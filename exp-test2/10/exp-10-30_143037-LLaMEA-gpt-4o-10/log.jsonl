{"id": "abf28ba0-2af9-4e38-94c1-e424e20a4227", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "An adaptive multi-swarm particle swarm optimization (AMSP) algorithm that dynamically adjusts swarms and inertia for diverse global search and fine-tuned local exploitation.", "configspace": "", "generation": 0, "fitness": 0.3157554134938368, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5264580362564848, 0.6264175077224927, 0.47997356660771007, 0.5781250291395594, 0.6115764610231142, 0.5522523229359653, 0.6122376613749838, 0.6039040287226116, 0.607054972006714, 0.1478119835767444, 0.14908275392912695, 0.12227720915598184, 0.11936952440201964, 0.14985889914798267, 0.13643238606469565, 0.1340971929900121, 0.1763999723309384, 0.41923143346539493, 0.13823790707313965, 0.12744685968030467, 0.11646815642335129, 0.11866530189233448, 0.12798536327293752, 0.1575392551227215, 0.5510599805679215, 0.13177770747070372, 0.1493783017083231, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.6250336808038246, 0.6095079114611683, 0.6178973227178214, 0.6059646278587403, 0.68003280541365, 0.599237580489276, 0.08669294474368705, 0.6211917574970182, 0.5882954418844897, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13408768620779832, 0.2324103414224219, 0.21316997970770457, 0.17113468546139243, 0.20713921534554725, 0.12813480580825176, 0.2339618984027465, 0.2139649998042643, 0.21387041326346157, 0.18049743974104182, 0.12355976263551838, 0.22860131859360366, 0.26270292633206105, 0.1302564830584685, 0.1285669870423044, 0.13251803088124037, 0.1306610034152531, 0.11187965979393266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05024910263638016, 9.999999999998899e-05, 9.999999999998899e-05, 0.19112457374284608, 9.999999999998899e-05, 0.003295878291856069, 0.06946301016253709, 0.0435053801831371, 0.08740906573731189, 0.11744493317609506, 0.030749540374197526, 0.04532925222629203, 0.07994793911286946, 0.1071114469600154, 0.042192309277317874, 0.04419607404027792, 0.03306206844537396, 0.16089014461197626, 0.08512337124723579, 0.10171452550215343, 0.07060634525054443, 0.09438115575607375, 0.0671060056832834, 0.08904040674510638, 0.20683579252295836, 0.14729628818786678, 0.12540733911849933, 0.1421332529439182, 0.17294376595071603, 0.09457778692181418, 0.21456534736762656, 0.16082214481851387, 0.22957410831782943, 0.5443405240887873, 0.5637037835914545, 0.583420396895667, 0.5146533642401286, 0.5705898108787248, 0.5607995661458118, 0.5808830873107447, 0.5570397443778614, 0.582722227887563, 0.13100974527778397, 0.08644987894434852, 0.09028865179398038, 0.12528024466177134, 0.12363876068716295, 0.12695927483295621, 0.12595588055013196, 0.1354615672055286, 0.13877988941014197, 0.2259641238988752, 0.23235819928782953, 0.21785790252889703, 0.19637409674646644, 0.21837648436891932, 0.298082951332992, 0.1952875018488347, 0.26996762335755753, 0.33442033602870136, 0.3172944808539738, 0.24835407020119915, 0.4684333812632825, 0.5608245445475225, 0.37856211316047816, 0.4845779353762064, 0.3953185131253659, 0.51974499034721, 0.4474613828324323, 0.22889976577915028, 0.2610488310146617, 0.30918400219687014, 0.2831963709115509, 0.3575448850766918, 0.2703861272604028, 0.2775214252357693, 0.3001470148482339, 0.14913682122234462, 0.18953536567405138, 0.21540558993641568, 0.20154455517806902, 0.23957624907690822, 0.20715987087433796, 0.2045046946039274, 0.22639065931466051, 0.2605384155439697, 0.22261675002417514, 0.6607778867017203, 0.7298408886195801, 0.34343298497257013, 0.21397239241187094, 0.21274809739081935, 0.23910635694266247, 0.23703137663716378, 0.1974529474536404, 0.20869199694593743, 0.13022587762760973, 0.18796588598952835, 0.3235922281180591, 0.11893020148167144, 0.2000143312845576, 0.16727389084553757, 0.15202285681134453, 0.16371518710597188, 0.8888499743915863, 0.7288560153156884, 0.21172077783370769, 0.6636095565103953, 0.8398712446201343, 0.16780620866188656, 0.6356040792992451, 0.1662728712703283, 0.10467137629374845, 0.6772848818170467, 0.19846419974879836, 0.24328266447812352, 0.19260405361739175, 0.18897203816421282, 0.19527170887181755, 0.2102357398728304, 0.20909231467867206, 0.19976818325292212, 0.20715713297407679, 0.1072964184579579, 0.0950247929610103, 0.1003671009306576, 0.09087552233220597, 0.08883362542341477, 0.09333253944843722, 0.10251254671877774, 0.10705944831114289, 0.09709784154329804]}, "mutation_prompt": null}
{"id": "5d78e8b3-8a76-4a4e-8aa8-af534a8dd5a0", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "An adaptive multi-swarm particle swarm optimization (AMSP) algorithm that dynamically adjusts swarms and inertia for diverse global search and fine-tuned local exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abf28ba0-2af9-4e38-94c1-e424e20a4227", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5264580362564848, 0.6264175077224927, 0.47997356660771007, 0.5781250291395594, 0.6115764610231142, 0.5522523229359653, 0.6122376613749838, 0.6039040287226116, 0.607054972006714, 0.1478119835767444, 0.14908275392912695, 0.12227720915598184, 0.11936952440201964, 0.14985889914798267, 0.13643238606469565, 0.1340971929900121, 0.1763999723309384, 0.41923143346539493, 0.13823790707313965, 0.12744685968030467, 0.11646815642335129, 0.11866530189233448, 0.12798536327293752, 0.1575392551227215, 0.5510599805679215, 0.13177770747070372, 0.1493783017083231, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.6250336808038246, 0.6095079114611683, 0.6178973227178214, 0.6059646278587403, 0.68003280541365, 0.599237580489276, 0.08669294474368705, 0.6211917574970182, 0.5882954418844897, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13408768620779832, 0.2324103414224219, 0.21316997970770457, 0.17113468546139243, 0.20713921534554725, 0.12813480580825176, 0.2339618984027465, 0.2139649998042643, 0.21387041326346157, 0.18049743974104182, 0.12355976263551838, 0.22860131859360366, 0.26270292633206105, 0.1302564830584685, 0.1285669870423044, 0.13251803088124037, 0.1306610034152531, 0.11187965979393266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05024910263638016, 9.999999999998899e-05, 9.999999999998899e-05, 0.19112457374284608, 9.999999999998899e-05, 0.003295878291856069, 0.06946301016253709, 0.0435053801831371, 0.08740906573731189, 0.11744493317609506, 0.030749540374197526, 0.04532925222629203, 0.07994793911286946, 0.1071114469600154, 0.042192309277317874, 0.04419607404027792, 0.03306206844537396, 0.16089014461197626, 0.08512337124723579, 0.10171452550215343, 0.07060634525054443, 0.09438115575607375, 0.0671060056832834, 0.08904040674510638, 0.20683579252295836, 0.14729628818786678, 0.12540733911849933, 0.1421332529439182, 0.17294376595071603, 0.09457778692181418, 0.21456534736762656, 0.16082214481851387, 0.22957410831782943, 0.5443405240887873, 0.5637037835914545, 0.583420396895667, 0.5146533642401286, 0.5705898108787248, 0.5607995661458118, 0.5808830873107447, 0.5570397443778614, 0.582722227887563, 0.13100974527778397, 0.08644987894434852, 0.09028865179398038, 0.12528024466177134, 0.12363876068716295, 0.12695927483295621, 0.12595588055013196, 0.1354615672055286, 0.13877988941014197, 0.2259641238988752, 0.23235819928782953, 0.21785790252889703, 0.19637409674646644, 0.21837648436891932, 0.298082951332992, 0.1952875018488347, 0.26996762335755753, 0.33442033602870136, 0.3172944808539738, 0.24835407020119915, 0.4684333812632825, 0.5608245445475225, 0.37856211316047816, 0.4845779353762064, 0.3953185131253659, 0.51974499034721, 0.4474613828324323, 0.22889976577915028, 0.2610488310146617, 0.30918400219687014, 0.2831963709115509, 0.3575448850766918, 0.2703861272604028, 0.2775214252357693, 0.3001470148482339, 0.14913682122234462, 0.18953536567405138, 0.21540558993641568, 0.20154455517806902, 0.23957624907690822, 0.20715987087433796, 0.2045046946039274, 0.22639065931466051, 0.2605384155439697, 0.22261675002417514, 0.6607778867017203, 0.7298408886195801, 0.34343298497257013, 0.21397239241187094, 0.21274809739081935, 0.23910635694266247, 0.23703137663716378, 0.1974529474536404, 0.20869199694593743, 0.13022587762760973, 0.18796588598952835, 0.3235922281180591, 0.11893020148167144, 0.2000143312845576, 0.16727389084553757, 0.15202285681134453, 0.16371518710597188, 0.8888499743915863, 0.7288560153156884, 0.21172077783370769, 0.6636095565103953, 0.8398712446201343, 0.16780620866188656, 0.6356040792992451, 0.1662728712703283, 0.10467137629374845, 0.6772848818170467, 0.19846419974879836, 0.24328266447812352, 0.19260405361739175, 0.18897203816421282, 0.19527170887181755, 0.2102357398728304, 0.20909231467867206, 0.19976818325292212, 0.20715713297407679, 0.1072964184579579, 0.0950247929610103, 0.1003671009306576, 0.09087552233220597, 0.08883362542341477, 0.09333253944843722, 0.10251254671877774, 0.10705944831114289, 0.09709784154329804]}, "mutation_prompt": null}
{"id": "53e33a81-ab84-4446-8cc2-d33615e2a4db", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "An adaptive multi-swarm particle swarm optimization (AMSP) algorithm that dynamically adjusts swarms and inertia for diverse global search and fine-tuned local exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abf28ba0-2af9-4e38-94c1-e424e20a4227", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5264580362564848, 0.6264175077224927, 0.47997356660771007, 0.5781250291395594, 0.6115764610231142, 0.5522523229359653, 0.6122376613749838, 0.6039040287226116, 0.607054972006714, 0.1478119835767444, 0.14908275392912695, 0.12227720915598184, 0.11936952440201964, 0.14985889914798267, 0.13643238606469565, 0.1340971929900121, 0.1763999723309384, 0.41923143346539493, 0.13823790707313965, 0.12744685968030467, 0.11646815642335129, 0.11866530189233448, 0.12798536327293752, 0.1575392551227215, 0.5510599805679215, 0.13177770747070372, 0.1493783017083231, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.6250336808038246, 0.6095079114611683, 0.6178973227178214, 0.6059646278587403, 0.68003280541365, 0.599237580489276, 0.08669294474368705, 0.6211917574970182, 0.5882954418844897, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13408768620779832, 0.2324103414224219, 0.21316997970770457, 0.17113468546139243, 0.20713921534554725, 0.12813480580825176, 0.2339618984027465, 0.2139649998042643, 0.21387041326346157, 0.18049743974104182, 0.12355976263551838, 0.22860131859360366, 0.26270292633206105, 0.1302564830584685, 0.1285669870423044, 0.13251803088124037, 0.1306610034152531, 0.11187965979393266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05024910263638016, 9.999999999998899e-05, 9.999999999998899e-05, 0.19112457374284608, 9.999999999998899e-05, 0.003295878291856069, 0.06946301016253709, 0.0435053801831371, 0.08740906573731189, 0.11744493317609506, 0.030749540374197526, 0.04532925222629203, 0.07994793911286946, 0.1071114469600154, 0.042192309277317874, 0.04419607404027792, 0.03306206844537396, 0.16089014461197626, 0.08512337124723579, 0.10171452550215343, 0.07060634525054443, 0.09438115575607375, 0.0671060056832834, 0.08904040674510638, 0.20683579252295836, 0.14729628818786678, 0.12540733911849933, 0.1421332529439182, 0.17294376595071603, 0.09457778692181418, 0.21456534736762656, 0.16082214481851387, 0.22957410831782943, 0.5443405240887873, 0.5637037835914545, 0.583420396895667, 0.5146533642401286, 0.5705898108787248, 0.5607995661458118, 0.5808830873107447, 0.5570397443778614, 0.582722227887563, 0.13100974527778397, 0.08644987894434852, 0.09028865179398038, 0.12528024466177134, 0.12363876068716295, 0.12695927483295621, 0.12595588055013196, 0.1354615672055286, 0.13877988941014197, 0.2259641238988752, 0.23235819928782953, 0.21785790252889703, 0.19637409674646644, 0.21837648436891932, 0.298082951332992, 0.1952875018488347, 0.26996762335755753, 0.33442033602870136, 0.3172944808539738, 0.24835407020119915, 0.4684333812632825, 0.5608245445475225, 0.37856211316047816, 0.4845779353762064, 0.3953185131253659, 0.51974499034721, 0.4474613828324323, 0.22889976577915028, 0.2610488310146617, 0.30918400219687014, 0.2831963709115509, 0.3575448850766918, 0.2703861272604028, 0.2775214252357693, 0.3001470148482339, 0.14913682122234462, 0.18953536567405138, 0.21540558993641568, 0.20154455517806902, 0.23957624907690822, 0.20715987087433796, 0.2045046946039274, 0.22639065931466051, 0.2605384155439697, 0.22261675002417514, 0.6607778867017203, 0.7298408886195801, 0.34343298497257013, 0.21397239241187094, 0.21274809739081935, 0.23910635694266247, 0.23703137663716378, 0.1974529474536404, 0.20869199694593743, 0.13022587762760973, 0.18796588598952835, 0.3235922281180591, 0.11893020148167144, 0.2000143312845576, 0.16727389084553757, 0.15202285681134453, 0.16371518710597188, 0.8888499743915863, 0.7288560153156884, 0.21172077783370769, 0.6636095565103953, 0.8398712446201343, 0.16780620866188656, 0.6356040792992451, 0.1662728712703283, 0.10467137629374845, 0.6772848818170467, 0.19846419974879836, 0.24328266447812352, 0.19260405361739175, 0.18897203816421282, 0.19527170887181755, 0.2102357398728304, 0.20909231467867206, 0.19976818325292212, 0.20715713297407679, 0.1072964184579579, 0.0950247929610103, 0.1003671009306576, 0.09087552233220597, 0.08883362542341477, 0.09333253944843722, 0.10251254671877774, 0.10705944831114289, 0.09709784154329804]}, "mutation_prompt": null}
{"id": "7aa10605-82cf-4079-b2b2-109bd4213924", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Adaptive cognitive and social components to enhance convergence\n                self.cognitive = 1.4 - 0.5 * (self.evaluations / self.budget)\n                self.social = 1.4 + 0.5 * (self.evaluations / self.budget)\n                \n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "A refined adaptive multi-swarm particle swarm optimization (AMSP) algorithm introducing adaptive cognitive and social factors to enhance convergence speed while maintaining exploration.", "configspace": "", "generation": 3, "fitness": 0.26683238207584525, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "abf28ba0-2af9-4e38-94c1-e424e20a4227", "metadata": {"aucs": [0.7314520511945295, 0.7292824446534543, 0.7014775372488842, 0.7402224140051246, 0.7073973575429959, 0.7199297251860484, 0.7412376881029339, 0.7259065292317701, 0.7137959246734484, 0.21487365849803353, 0.3258820412800538, 0.37602196786473074, 0.34422315378772006, 0.304251485681333, 0.2888788669960808, 0.3093944159883636, 0.04882218564826635, 0.3423951762442188, 0.17149538163833788, 0.16142773112262476, 0.1376859551125874, 0.1644875103390082, 0.12832857151596544, 0.2582055885923724, 0.18877278145109977, 0.12997491942895667, 0.15885953349930715, 0.1200127638945756, 0.10334942723865748, 0.10162584446038914, 0.11680816112944614, 0.09890452629462365, 0.12173439529913888, 0.12233378145347595, 0.10611994236998767, 0.1382478556624399, 0.9749788052320477, 0.9822122583792608, 0.9733916248793678, 0.9743229288966749, 0.9748149895703749, 0.9710790747995215, 0.9754540257995501, 0.9817348460353998, 0.9707788172052279, 0.4767288115402679, 0.43095228533512386, 0.05759634846158801, 0.4276050202514927, 0.4276974664846358, 0.2559706673627856, 0.12081849997395311, 0.4129319085461356, 0.42600474838622815, 0.1714687448318284, 0.595993978152038, 0.22845660981658733, 0.2201530410814988, 0.19112203318425414, 0.19110517545623373, 0.18944860336879632, 0.5993221739490038, 0.24155399422275237, 0.11524947695548216, 0.17656693008765156, 0.17614144327859815, 0.11944972674649379, 0.12494737073666928, 0.17915584037668253, 0.17016304916876035, 0.19942174398418366, 0.17931401090663168, 0.2276972109321218, 0.14276142748680032, 0.18786670413163364, 0.2046272082088918, 0.1257710987630899, 0.1896468412304062, 0.22538077835888826, 0.225491516066603, 0.2219766134877168, 9.999999999998899e-05, 9.999999999998899e-05, 0.014751676206869346, 0.04303420051241369, 0.016088505065490755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10816066118540768, 0.05849575940616947, 0.10844890399074525, 0.06509895623142437, 0.04411581019041899, 0.06846912592901067, 0.13510814664195825, 0.05274036615235633, 0.045690443302402906, 0.027474984798711577, 0.028061307419531167, 0.19731119281002318, 0.06005261033707343, 0.09536027912852674, 0.061200568126776655, 0.12865901424170312, 0.20561149076028318, 0.07365641379893317, 0.15010515549505676, 0.062163374818867356, 0.1023841012839608, 0.06274274926322465, 0.17520140940035234, 0.2140284598338662, 0.2321606938195908, 0.05202759486829067, 0.05391457600281535, 0.45543854458312527, 0.4977373242958888, 0.4726772638937362, 0.4929912461797916, 0.5298348240247429, 0.5137145055705186, 0.5170596938290812, 0.49228585395902813, 0.5244408864215618, 0.07913748900293727, 0.10307424558824863, 0.09912007289278812, 0.13203252421938727, 0.12434144282982851, 0.15149086891196162, 0.0769055870258637, 0.09268897457090586, 0.07766667453244058, 0.16443967749828425, 0.1745806632852105, 0.2052130787316483, 0.23925383483792162, 0.2252094751296786, 0.19465032039459174, 0.3700194317793626, 0.29697033026336217, 0.23779132676149684, 0.36698837928336436, 0.3507892280982622, 0.38132351940185194, 0.36100310680622605, 0.3122104082862174, 0.2845009247775261, 0.40008004845607925, 0.39062459749475953, 0.39509624235967833, 0.18091680671267796, 0.2283580975675592, 0.2589409490429154, 0.2286834629377722, 0.22255957841715412, 0.2521728821223571, 0.2439827947885994, 0.25848728911985497, 0.2013577366997208, 0.20871298603443622, 0.24237754936900724, 0.22708230457560974, 0.21660008768862027, 0.21241746064251765, 0.21296173798604134, 0.21382082285161763, 0.26370159563374496, 0.21389782458495887, 0.22667389486764555, 0.22617160178286178, 0.2285422016998243, 0.22776054782895983, 0.1876365796305126, 0.20238037092380146, 0.1992942688400089, 0.24205281432692283, 0.18772229371552562, 0.13065516491352513, 0.18763629128013082, 0.8025842656274202, 0.167359081034418, 0.1993795100873167, 0.16630087871739363, 0.6210221442138391, 0.16543963216323332, 0.2100908708191257, 0.6939212990204453, 0.20693513683473985, 0.07357471358479106, 0.483247778282208, 0.5878325265490607, 0.6450240010438039, 0.16719282717147177, 0.10439678238614503, 0.6633527835187409, 0.17543689671422347, 0.1777595489347661, 0.2101505297229651, 0.18910974841267192, 0.19041782555677678, 0.19798920264276043, 0.2205350949738596, 0.19947266897117244, 0.18883889116482255, 0.09193812392338563, 0.094168660896911, 0.09197635550272665, 0.09454846223821556, 0.09366107591542694, 0.09928992027718686, 0.08586630594185041, 0.09439398656680897, 0.09358208894647924]}, "mutation_prompt": null}
{"id": "d2d130ad-d860-439d-a29a-67ea6b28bbd0", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "An adaptive multi-swarm particle swarm optimization (AMSP) algorithm that dynamically adjusts swarms and inertia for diverse global search and fine-tuned local exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abf28ba0-2af9-4e38-94c1-e424e20a4227", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5264580362564848, 0.6264175077224927, 0.47997356660771007, 0.5781250291395594, 0.6115764610231142, 0.5522523229359653, 0.6122376613749838, 0.6039040287226116, 0.607054972006714, 0.1478119835767444, 0.14908275392912695, 0.12227720915598184, 0.11936952440201964, 0.14985889914798267, 0.13643238606469565, 0.1340971929900121, 0.1763999723309384, 0.41923143346539493, 0.13823790707313965, 0.12744685968030467, 0.11646815642335129, 0.11866530189233448, 0.12798536327293752, 0.1575392551227215, 0.5510599805679215, 0.13177770747070372, 0.1493783017083231, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.6250336808038246, 0.6095079114611683, 0.6178973227178214, 0.6059646278587403, 0.68003280541365, 0.599237580489276, 0.08669294474368705, 0.6211917574970182, 0.5882954418844897, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13408768620779832, 0.2324103414224219, 0.21316997970770457, 0.17113468546139243, 0.20713921534554725, 0.12813480580825176, 0.2339618984027465, 0.2139649998042643, 0.21387041326346157, 0.18049743974104182, 0.12355976263551838, 0.22860131859360366, 0.26270292633206105, 0.1302564830584685, 0.1285669870423044, 0.13251803088124037, 0.1306610034152531, 0.11187965979393266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05024910263638016, 9.999999999998899e-05, 9.999999999998899e-05, 0.19112457374284608, 9.999999999998899e-05, 0.003295878291856069, 0.06946301016253709, 0.0435053801831371, 0.08740906573731189, 0.11744493317609506, 0.030749540374197526, 0.04532925222629203, 0.07994793911286946, 0.1071114469600154, 0.042192309277317874, 0.04419607404027792, 0.03306206844537396, 0.16089014461197626, 0.08512337124723579, 0.10171452550215343, 0.07060634525054443, 0.09438115575607375, 0.0671060056832834, 0.08904040674510638, 0.20683579252295836, 0.14729628818786678, 0.12540733911849933, 0.1421332529439182, 0.17294376595071603, 0.09457778692181418, 0.21456534736762656, 0.16082214481851387, 0.22957410831782943, 0.5443405240887873, 0.5637037835914545, 0.583420396895667, 0.5146533642401286, 0.5705898108787248, 0.5607995661458118, 0.5808830873107447, 0.5570397443778614, 0.582722227887563, 0.13100974527778397, 0.08644987894434852, 0.09028865179398038, 0.12528024466177134, 0.12363876068716295, 0.12695927483295621, 0.12595588055013196, 0.1354615672055286, 0.13877988941014197, 0.2259641238988752, 0.23235819928782953, 0.21785790252889703, 0.19637409674646644, 0.21837648436891932, 0.298082951332992, 0.1952875018488347, 0.26996762335755753, 0.33442033602870136, 0.3172944808539738, 0.24835407020119915, 0.4684333812632825, 0.5608245445475225, 0.37856211316047816, 0.4845779353762064, 0.3953185131253659, 0.51974499034721, 0.4474613828324323, 0.22889976577915028, 0.2610488310146617, 0.30918400219687014, 0.2831963709115509, 0.3575448850766918, 0.2703861272604028, 0.2775214252357693, 0.3001470148482339, 0.14913682122234462, 0.18953536567405138, 0.21540558993641568, 0.20154455517806902, 0.23957624907690822, 0.20715987087433796, 0.2045046946039274, 0.22639065931466051, 0.2605384155439697, 0.22261675002417514, 0.6607778867017203, 0.7298408886195801, 0.34343298497257013, 0.21397239241187094, 0.21274809739081935, 0.23910635694266247, 0.23703137663716378, 0.1974529474536404, 0.20869199694593743, 0.13022587762760973, 0.18796588598952835, 0.3235922281180591, 0.11893020148167144, 0.2000143312845576, 0.16727389084553757, 0.15202285681134453, 0.16371518710597188, 0.8888499743915863, 0.7288560153156884, 0.21172077783370769, 0.6636095565103953, 0.8398712446201343, 0.16780620866188656, 0.6356040792992451, 0.1662728712703283, 0.10467137629374845, 0.6772848818170467, 0.19846419974879836, 0.24328266447812352, 0.19260405361739175, 0.18897203816421282, 0.19527170887181755, 0.2102357398728304, 0.20909231467867206, 0.19976818325292212, 0.20715713297407679, 0.1072964184579579, 0.0950247929610103, 0.1003671009306576, 0.09087552233220597, 0.08883362542341477, 0.09333253944843722, 0.10251254671877774, 0.10705944831114289, 0.09709784154329804]}, "mutation_prompt": null}
{"id": "1c40262d-1d7e-461f-9494-8cae5ec934f4", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "An adaptive multi-swarm particle swarm optimization (AMSP) algorithm that dynamically adjusts swarms and inertia for diverse global search and fine-tuned local exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abf28ba0-2af9-4e38-94c1-e424e20a4227", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5264580362564848, 0.6264175077224927, 0.47997356660771007, 0.5781250291395594, 0.6115764610231142, 0.5522523229359653, 0.6122376613749838, 0.6039040287226116, 0.607054972006714, 0.1478119835767444, 0.14908275392912695, 0.12227720915598184, 0.11936952440201964, 0.14985889914798267, 0.13643238606469565, 0.1340971929900121, 0.1763999723309384, 0.41923143346539493, 0.13823790707313965, 0.12744685968030467, 0.11646815642335129, 0.11866530189233448, 0.12798536327293752, 0.1575392551227215, 0.5510599805679215, 0.13177770747070372, 0.1493783017083231, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.6250336808038246, 0.6095079114611683, 0.6178973227178214, 0.6059646278587403, 0.68003280541365, 0.599237580489276, 0.08669294474368705, 0.6211917574970182, 0.5882954418844897, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13408768620779832, 0.2324103414224219, 0.21316997970770457, 0.17113468546139243, 0.20713921534554725, 0.12813480580825176, 0.2339618984027465, 0.2139649998042643, 0.21387041326346157, 0.18049743974104182, 0.12355976263551838, 0.22860131859360366, 0.26270292633206105, 0.1302564830584685, 0.1285669870423044, 0.13251803088124037, 0.1306610034152531, 0.11187965979393266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05024910263638016, 9.999999999998899e-05, 9.999999999998899e-05, 0.19112457374284608, 9.999999999998899e-05, 0.003295878291856069, 0.06946301016253709, 0.0435053801831371, 0.08740906573731189, 0.11744493317609506, 0.030749540374197526, 0.04532925222629203, 0.07994793911286946, 0.1071114469600154, 0.042192309277317874, 0.04419607404027792, 0.03306206844537396, 0.16089014461197626, 0.08512337124723579, 0.10171452550215343, 0.07060634525054443, 0.09438115575607375, 0.0671060056832834, 0.08904040674510638, 0.20683579252295836, 0.14729628818786678, 0.12540733911849933, 0.1421332529439182, 0.17294376595071603, 0.09457778692181418, 0.21456534736762656, 0.16082214481851387, 0.22957410831782943, 0.5443405240887873, 0.5637037835914545, 0.583420396895667, 0.5146533642401286, 0.5705898108787248, 0.5607995661458118, 0.5808830873107447, 0.5570397443778614, 0.582722227887563, 0.13100974527778397, 0.08644987894434852, 0.09028865179398038, 0.12528024466177134, 0.12363876068716295, 0.12695927483295621, 0.12595588055013196, 0.1354615672055286, 0.13877988941014197, 0.2259641238988752, 0.23235819928782953, 0.21785790252889703, 0.19637409674646644, 0.21837648436891932, 0.298082951332992, 0.1952875018488347, 0.26996762335755753, 0.33442033602870136, 0.3172944808539738, 0.24835407020119915, 0.4684333812632825, 0.5608245445475225, 0.37856211316047816, 0.4845779353762064, 0.3953185131253659, 0.51974499034721, 0.4474613828324323, 0.22889976577915028, 0.2610488310146617, 0.30918400219687014, 0.2831963709115509, 0.3575448850766918, 0.2703861272604028, 0.2775214252357693, 0.3001470148482339, 0.14913682122234462, 0.18953536567405138, 0.21540558993641568, 0.20154455517806902, 0.23957624907690822, 0.20715987087433796, 0.2045046946039274, 0.22639065931466051, 0.2605384155439697, 0.22261675002417514, 0.6607778867017203, 0.7298408886195801, 0.34343298497257013, 0.21397239241187094, 0.21274809739081935, 0.23910635694266247, 0.23703137663716378, 0.1974529474536404, 0.20869199694593743, 0.13022587762760973, 0.18796588598952835, 0.3235922281180591, 0.11893020148167144, 0.2000143312845576, 0.16727389084553757, 0.15202285681134453, 0.16371518710597188, 0.8888499743915863, 0.7288560153156884, 0.21172077783370769, 0.6636095565103953, 0.8398712446201343, 0.16780620866188656, 0.6356040792992451, 0.1662728712703283, 0.10467137629374845, 0.6772848818170467, 0.19846419974879836, 0.24328266447812352, 0.19260405361739175, 0.18897203816421282, 0.19527170887181755, 0.2102357398728304, 0.20909231467867206, 0.19976818325292212, 0.20715713297407679, 0.1072964184579579, 0.0950247929610103, 0.1003671009306576, 0.09087552233220597, 0.08883362542341477, 0.09333253944843722, 0.10251254671877774, 0.10705944831114289, 0.09709784154329804]}, "mutation_prompt": null}
{"id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 6, "fitness": 0.31601928942818713, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "abf28ba0-2af9-4e38-94c1-e424e20a4227", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "b759f21a-8212-423f-88fa-1d81512ad4a6", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "7977bb52-c386-4f72-8afe-2e27ca9de7b0", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Enhanced inertia adjustment for better balance\n                self.inertia = 0.5 + 0.2 * np.sin(2 * np.pi * self.evaluations / self.budget)\n                if self.evaluations > 0.5 * self.budget:  # Collaborate between swarms\n                    cross_swarm_index = (swarm_index + 1) % self.num_swarms\n                    self.local_best_positions[swarm_index] = self.positions[cross_swarm_index].copy()\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Improved AMSP with enhanced inertia adjustment and swarm collaboration for superior exploration-exploitation balance.", "configspace": "", "generation": 8, "fitness": 0.28534284702248613, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.7866096268548117, 0.815833860232658, 0.7793006265376103, 0.787147079411593, 0.7973548174788503, 0.7800272180446057, 0.7988737082391821, 0.7559364917027981, 0.7804134571710956, 0.037152169704448124, 0.4435495542570388, 0.5020699017204677, 0.46650633952905396, 0.5104344251043833, 0.47290075659365804, 0.45820525288019986, 0.4287401594851049, 0.3665471797262031, 0.12197393583561766, 0.17840109939530535, 0.1123930760581332, 0.14793121004645637, 0.16816856959838167, 0.16708616371262475, 0.14072788851222795, 0.13390699342743262, 0.15057261878505612, 0.2615660700489092, 0.14784363171528492, 0.14859431944737078, 0.13314430291463342, 0.1298722682395257, 0.10875629216340932, 0.14721375764310218, 0.15213700549695208, 0.1291843350766012, 0.9743796025833099, 0.9754711118442727, 0.9686563692979817, 0.9680722770332131, 0.9747031421815824, 0.9676915807224319, 0.9751176738403087, 0.9767749736288672, 0.9673613306635944, 0.4649562467011257, 0.43905558511340026, 0.39630350587811913, 0.47537855843679133, 0.5270015618414029, 0.42113097463589044, 0.12411040097424864, 0.4445138844518427, 0.45393195310646073, 0.7681897446393275, 0.23570800006769277, 0.8407158674053251, 0.25213379274464265, 0.1929181320951926, 0.1895986853584417, 0.14535599637800167, 0.23683474689576867, 0.17296667767993845, 0.1442606167506828, 0.22444426879442536, 0.21245028775275576, 0.10364028830962957, 0.19154564009316355, 0.18209672174714564, 0.21143113028874683, 0.18533719003465432, 0.19532443296269208, 0.2163981498001032, 0.120812960453069, 0.18692610701345025, 0.20737507764058982, 0.13121329799156667, 0.24390936606701397, 0.20793830219288267, 0.19979334142462046, 0.1272446185905476, 9.999999999998899e-05, 9.999999999998899e-05, 0.008433846864936645, 0.0509487502524234, 9.999999999998899e-05, 9.999999999998899e-05, 0.00929762880371221, 9.999999999998899e-05, 0.0034881786047304963, 0.11720940905437405, 0.041158006638073896, 0.09737533864146919, 0.05516921709351719, 0.07766162759690776, 0.05517332907410655, 0.12903103090475376, 0.099662220044473, 0.047045978883786144, 0.04501269769573302, 0.031148402616785087, 0.16975432958066106, 0.0661107149917941, 0.09960671992294778, 0.06975570124193442, 0.18259237868676914, 0.16584337889199563, 0.07370379555935302, 0.17900912927635437, 0.04028123256862348, 0.12789579817149166, 0.03773512449465011, 0.06587231504824376, 0.14168377843298496, 0.07881947669099754, 0.1692834341947812, 0.055080330637897856, 0.524363305356969, 0.5699940411636836, 0.5681575064617272, 0.5366802107735789, 0.5326134807728296, 0.5326324786215848, 0.5727720559709384, 0.5193816781329406, 0.5331528034193722, 0.08045379054415502, 0.1328615241571739, 0.09506555933936867, 0.1536129865314657, 0.13519303403028027, 0.11261459367835036, 0.07114622755860933, 0.11233273132396349, 0.14717512348275863, 0.17147349031186165, 0.2324325244710964, 0.3035095616017234, 0.21633675190965018, 0.28240283698905044, 0.203814826998313, 0.19731857509698036, 0.22494067769630732, 0.26228383617894946, 0.38524217604402056, 0.290047360861709, 0.3276532212755706, 0.439384333247813, 0.36812533707743056, 0.4144630531613541, 0.3659943845898146, 0.47060158034001576, 0.3567784740310883, 0.2503134793835925, 0.19734307737803325, 0.2465327393992951, 0.24622651463879663, 0.33625772896248896, 0.3300587352164295, 0.3148800297184733, 0.351235244139124, 0.16925346008263809, 0.2117193658464105, 0.21212333886128476, 0.21554923967758766, 0.2331389143010104, 0.18883353802408687, 0.1952812375653331, 0.24590302665951025, 0.23014465275847362, 0.21607796397343693, 0.24744537897972074, 0.22180587901092008, 0.21060399480623015, 0.21524497205697557, 0.22262421491795736, 0.2059184183875309, 0.19511896068702572, 0.21595716823798183, 0.1952564593631353, 0.13074873571607515, 0.1880610676396388, 0.8726916986065318, 0.1965371355428368, 0.20032013368021329, 0.16725500602319898, 0.7717732916006332, 0.16930139524454557, 0.21019937506601005, 0.8459726648629327, 0.210758576484801, 0.07358994183810974, 0.7104601579305972, 0.16830211464147737, 0.5624212567125746, 0.16781246056876808, 0.1045994139304548, 0.7645606331355204, 0.19710540961064993, 0.18755988996374895, 0.18351080665499442, 0.21082582764017566, 0.18331204546574742, 0.21099605786988473, 0.1745714683738694, 0.19655589982152932, 0.17611624516139568, 0.07446183970869169, 0.09300932038798404, 0.0854559799946657, 0.08225038853358657, 0.088996771881936, 0.08281001560239742, 0.0846693354117457, 0.08983906949107134, 0.0931960217630724]}, "mutation_prompt": null}
{"id": "c47e64c3-9c56-4a51-8200-56172b664896", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.5 + 0.2 * np.random.rand()  # Slightly adjusted range\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.3\n                    self.social = 1.5\n                    if np.random.rand() < 0.1:  # Introduce perturbation\n                        perturbation = np.random.normal(0, 0.1, self.dim)\n                        self.global_best_position += perturbation\n\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "AMSP with improved adaptive control and perturbation strategy for enhanced exploration-exploitation balance.", "configspace": "", "generation": 9, "fitness": 0.28842504472421904, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8135023182881755, 0.8091072850716655, 0.8043121608864137, 0.795432521273419, 0.8096109411422243, 0.8246720388936204, 0.8193681310217114, 0.8043464508195287, 0.8062264632651814, 0.4390303828209954, 0.23591068136102655, 0.43781726895542394, 0.39090172468848183, 0.43873819468615316, 0.3297886050034302, 0.4489037235575425, 0.1610877966290858, 0.5140796167322401, 0.1480901202465661, 0.153852522390585, 0.1476672967154884, 0.11791931672309197, 0.2672624049114434, 0.17367119470268555, 0.14289265400219286, 0.1749860726046334, 0.521383606461429, 0.20065393529340259, 0.11809863885048688, 0.1349946731081464, 0.11401385268153752, 0.12209933779756443, 0.11518594510683255, 0.1695123941420439, 0.10766743889066077, 0.14982393195879173, 0.9747954564191847, 0.9829500387374382, 0.9742807196108962, 0.9719373970145391, 0.9678647993108512, 0.9583841865908103, 0.975462146200542, 0.9752754857247203, 0.969003766530777, 0.49632976859310607, 0.4766364273849073, 0.351184610398492, 0.46742793845609953, 0.5213911952167033, 0.218371461119089, 0.15667910639989535, 0.4797020515172299, 0.4531333612499635, 0.22638545491279394, 0.37588598105590243, 0.2246345984162047, 0.21657503282350177, 0.808025635342294, 0.21136901951802378, 0.17187632872936265, 0.23123240488857655, 0.23334217232133592, 0.09918594978559891, 0.1963059254858861, 0.1279451035631468, 0.17374925328821522, 0.21972826592272787, 0.18396637249729397, 0.180536001775922, 0.18922956868914886, 0.19892158870583598, 0.14845966665767463, 0.2040090786069335, 0.20508584685393316, 0.22455746519741682, 0.1800131793355677, 0.2112366846175152, 0.13007309912896692, 0.12611108299464813, 0.16258342186169772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036022660244377946, 9.999999999998899e-05, 9.999999999998899e-05, 0.04095827143978059, 9.999999999998899e-05, 9.999999999998899e-05, 0.09585515426190483, 0.034260066411312406, 0.10440734983374333, 0.09630977453562495, 0.11231670339455502, 0.04979168881367391, 0.16119350448129355, 0.08897987987810863, 0.1363580174924548, 0.04384861058241063, 0.03159015065609383, 0.15670323926152308, 0.10053691845428203, 0.08933925765559869, 0.06800258276786919, 0.08707184745190044, 0.0627834811243767, 0.08783760431150422, 0.1755740565898425, 0.056764333211618445, 0.16720743976280428, 0.08167042875691644, 0.17775578918586366, 0.19195554053716146, 0.1730073391118202, 0.14871607667544795, 0.12244817189451584, 0.4967560052005888, 0.5345598966694256, 0.5078307717634726, 0.5275494276530912, 0.5311307439862561, 0.5645154946930848, 0.5242195386916363, 0.5331639900857303, 0.5595339448769303, 0.08890449352852248, 0.09547232060316424, 0.0774656322172177, 0.11142283568780853, 0.12400144502534949, 0.09791232375913972, 0.06926510817499565, 0.11510114664177762, 0.08035988789355675, 0.26466843935156326, 0.3195972376835048, 0.18243610555165024, 0.23681833292131393, 0.2162145431852066, 0.44909006356798287, 0.2230931187520735, 0.16443297419835745, 0.32243309747222126, 0.3250307233381432, 0.3654828645401752, 0.23841416796866333, 0.38619113309230146, 0.4389275893129154, 0.2703814777662681, 0.3785049251029734, 0.32304517129573485, 0.39775650169657906, 0.22217286602366904, 0.16737700763702046, 0.32135004106489307, 0.31232412609367055, 0.3417553083124104, 0.2568980926912453, 0.2730330355318149, 0.4268896073721222, 0.227588613375743, 0.1982978038396589, 0.17567957959272384, 0.22676186688209576, 0.19863570184788482, 0.18684999698783844, 0.21765069382708757, 0.2095276721781033, 0.20666560804309597, 0.25564632257650133, 0.30751507619309026, 0.2458632953130414, 0.5700583281547599, 0.4439525949964044, 0.194479714506838, 0.20741994003564113, 0.6359223745199469, 0.1953479305385606, 0.20439634181551392, 0.13083612556889623, 0.1879085330463579, 0.2154080769785759, 0.16383181132952818, 0.19983917936114515, 0.16749841025945766, 0.1402988669794275, 0.1622247915290561, 0.874780036510967, 0.6574908546019085, 0.2113737105499074, 0.8257133092450704, 0.6994917795352811, 0.1675075332823035, 0.5183451915033498, 0.16537644323572442, 0.10462542170282718, 0.6615601886930212, 0.19302547077755772, 0.19492591652733715, 0.17974405882226585, 0.18885284335788277, 0.182827766393296, 0.17986362627619146, 0.1875068865693662, 0.2174948632936109, 0.17492956852567587, 0.09311658572647519, 0.1005121447691405, 0.10009673946991637, 0.09310207902345669, 0.07621530826743406, 0.08648019568344667, 0.08751808015656748, 0.07447985969214388, 0.08885270937234657]}, "mutation_prompt": null}
{"id": "25253bc4-31bb-4cd9-acfd-4cbdd905eab6", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "ce16cfef-3699-41bb-b20d-ed2fb016ef32", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "0d4a5aa8-c4a0-44f2-a16f-cbced534e325", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                if self.evaluations % (0.1 * self.budget) == 0:  # Periodic reset to introduce diversity\n                    self.positions[swarm_index] = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n                \n                self.inertia = 0.4 + 0.3 * np.random.rand()  # Random inertia adjustment for exploration-exploitation balance\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Introduced adaptive learning rates and periodic swarm position reset to enhance convergence speed and diversity.", "configspace": "", "generation": 12, "fitness": 0.3158130537075403, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562619008, 0.14908275359331635, 0.143495615198309, 0.11936952441349735, 0.14985658762592902, 0.13643238357130794, 0.1362112796210595, 0.176399972943855, 0.4402912515800017, 0.13823829704782453, 0.1339761522634848, 0.11631565906458652, 0.12236160137837815, 0.12802846551526803, 0.1564177483487882, 0.5530119875652295, 0.13074310540901024, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5776015281612511, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292538073115, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2311566780652362, 0.13407917224967603, 0.23240490498591493, 0.2070760674273755, 0.1682458437084764, 0.20815275003596634, 0.12812031970149473, 0.22930269414876336, 0.21235476278380205, 0.21851300711477062, 0.17613263592310757, 0.12354560063362952, 0.2271471647531379, 0.2613476326605799, 0.13023839723501662, 0.12875347977868656, 0.13251430668093822, 0.13066057175486345, 0.1118712430995018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05041842132361596, 9.999999999998899e-05, 9.999999999998899e-05, 0.19104890153068366, 9.999999999998899e-05, 0.0032958771963518263, 0.07125112029958358, 0.04246479759101862, 0.08737531898841222, 0.1170581834099721, 0.03453326668281931, 0.04542913160895079, 0.08185098058323981, 0.11381113870545811, 0.05224428609521492, 0.044196074156780396, 0.03306206843423365, 0.16087796046100444, 0.08512337244552637, 0.10171218484279543, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.20683602599983109, 0.1472962309018101, 0.1254096037480067, 0.14213387234538155, 0.1729437225060272, 0.09457770832888424, 0.21455996208602324, 0.1608221853114613, 0.22958276450111081, 0.5498060865228269, 0.5651773670085439, 0.5843046311317265, 0.5183478411020401, 0.5691582820903743, 0.5596532612432394, 0.5796749155731138, 0.5727968048012742, 0.581575297301484, 0.1328870724720993, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621195788, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.22647748680575663, 0.2323164662586673, 0.21796437103481403, 0.19642469228692327, 0.21841052342933365, 0.2982407896426261, 0.19400903718465123, 0.2700514094304265, 0.334418852406011, 0.3172851041521775, 0.24828322441719852, 0.4799556491395778, 0.5575529023099106, 0.37808603855540024, 0.48495298942918785, 0.39551437400129763, 0.558643848863067, 0.44937221807372996, 0.2288863595945415, 0.2616750888316226, 0.3091806941439398, 0.28317710013081476, 0.35775714770250766, 0.27039265565909854, 0.2779315542845283, 0.30016929931656056, 0.14913078519063017, 0.18791246271745676, 0.2254690310663473, 0.20452131795606732, 0.25611050298047666, 0.1979033540890246, 0.2039548723951482, 0.2246434825825312, 0.24876759601162401, 0.2229447879778581, 0.6560814055331404, 0.7299788718861845, 0.22386467953205824, 0.21397200174240816, 0.21274823995084002, 0.23910637598080742, 0.23703165700912676, 0.19751055665133121, 0.20869199695077334, 0.13022587764245597, 0.18796588598955644, 0.3189405067038805, 0.12055542086746118, 0.20001433128454038, 0.16727389084553757, 0.2572731562544679, 0.1638178438754534, 0.8888499743915863, 0.6893254953322288, 0.21172077783362886, 0.6304925447617336, 0.8398712446201343, 0.16780620866191143, 0.5923622672021538, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23895289934354713, 0.19285656727500344, 0.18788162463382063, 0.19572136937523577, 0.21021353198939796, 0.2087704630692192, 0.19935377899118756, 0.20597286608430865, 0.10730039650036871, 0.09500936005972183, 0.10036767495538101, 0.09097459055135737, 0.08884192615134434, 0.09334529725636753, 0.10275787577009055, 0.10705923175623899, 0.0970485643405109]}, "mutation_prompt": null}
{"id": "2b0e6b51-7ea9-4011-91aa-f9da54fa97c6", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "fcfd0e14-caa4-48a6-85cc-1baf6326db13", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "fe7bf762-9140-49b2-b001-91f76651881a", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "dd5b692e-615d-411d-999d-5deab3ad7bd3", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "1492ab9b-562e-4ac4-b989-36947513283d", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "585fdaa7-5d5b-4aa8-8a11-474ff6705dfd", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "757efcc7-d6b9-4774-af90-1e8026e3d847", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "55d1d211-61e9-4842-8633-8d7fa58cca82", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "9e4142bc-5a56-405e-891c-19b833ee6d65", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "aa01138f-c800-4953-9f49-1cd5edc98909", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                velocity_scaling = np.random.uniform(0.8, 1.2)  # Adaptive velocity scaling\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + \n                                                cognitive_component + social_component) * velocity_scaling\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5 + 0.1 * np.random.rand()  # Slight stochastic adjustments\n                    self.social = 1.2 + 0.1 * np.random.rand()  # Slight stochastic adjustments\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced swarm strategy with adaptive velocity scaling and stochastic component adjustments to improve exploration and efficiency.", "configspace": "", "generation": 22, "fitness": 0.30928687639562497, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.26.", "error": "", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8350331892493378, 0.831245452296205, 0.8288266184350838, 0.8411861109831904, 0.8234336607250707, 0.8166679041550016, 0.8383479360226741, 0.8326674973244222, 0.820086759168853, 0.5407531275576536, 0.5947470525561518, 0.5440785115057725, 0.5754804652423622, 0.6150246102175465, 0.5596463771474607, 0.5996969429782788, 0.5843626505908148, 0.5283277181004773, 0.1407722135510221, 0.13290934161641943, 0.13614518352591198, 0.1567698418000626, 0.122175861687701, 0.16909730846557336, 0.23517680430624366, 0.17376287842521543, 0.44286960268320896, 0.09047757244692545, 0.12059836316932249, 0.10264239855228174, 0.10505299915658928, 0.1619008801576619, 0.12215967707489617, 0.14507100888835212, 0.1139086124963189, 0.14846690463890178, 0.9749686070748885, 0.9770610926181023, 0.9739049262587166, 0.9595830142486228, 0.9748404860547466, 0.9599695610077776, 0.9765309592185587, 0.9817948836528717, 0.9751866042359053, 0.6474071895722234, 0.6211957154810699, 0.4706699998048063, 0.5315303998608796, 0.6128480400831346, 0.6399730503756846, 0.5938002761653118, 0.5662721219632255, 0.5826131346854784, 0.22753872229204375, 0.22675909696522756, 0.8521058150751435, 0.21271963192524213, 0.27516543837913354, 0.1921534563708045, 0.8004395887182901, 0.22451275115505864, 0.23109880254090764, 0.17762058504491995, 0.18923407845181384, 0.22300188903754448, 0.12784006431687944, 0.19127558409864764, 0.13188010708641573, 0.22790442344590478, 0.2301528146810986, 0.2132641731618189, 0.2277316389631303, 0.12339645533309118, 0.13014419054170323, 0.2453154147673442, 0.216179380309224, 0.2251082059187851, 0.23213374474831605, 0.12572767497638182, 0.2148554471244697, 9.999999999998899e-05, 0.018781126371961943, 9.999999999998899e-05, 0.020272842263054702, 0.11465693338161087, 9.999999999998899e-05, 0.001548960893020923, 9.999999999998899e-05, 0.010524621304425219, 0.13047357763784695, 0.04348731443186149, 0.07243208067536211, 0.06280932257888161, 0.05056636065818443, 0.035730183439391605, 0.07300521707122354, 0.11011096440540347, 0.038599084072935, 0.07792863847372677, 0.03029270153441943, 0.04529816937832987, 0.273962039766783, 0.14326564391315932, 0.07197287352287163, 0.1360818286278862, 0.11767107369150653, 0.2510112930618358, 0.29645398303800086, 0.06253726161318696, 0.09550313696082013, 0.038023153495985174, 0.1961224598291964, 0.12764193669869106, 0.07869354786845928, 0.053365507818042945, 0.09211610496807299, 0.5561853992976251, 0.5583596356350822, 0.5998049933125917, 0.5466962876506065, 0.5053648349994289, 0.534571419767123, 0.5440397915823998, 0.5537855560222168, 0.5850103682971277, 0.09877967578758484, 0.1016688773554204, 0.09879792956226996, 0.11100620118514071, 0.09363136390526727, 0.12864749983752266, 0.07774147110483154, 0.1491221487713872, 0.0985230177950781, 0.20117220860157126, 0.2400261665754192, 0.17389524059724426, 0.25334610507674393, 0.27162597654405074, 0.21210662074155961, 0.24665353098493836, 0.24594678399893122, 0.27106156676971827, 0.29473086106466007, 0.155564365939042, 0.5355572906501005, 0.38826928159717977, 0.5266472709332435, 0.2810216914020084, 0.2506905113181841, 0.47320553643104624, 0.5766748333731739, 0.2249325076680072, 0.09274934902780374, 0.3044165930208321, 0.2734929054665499, 0.23192184785797476, 0.2780010962896169, 0.3365742082313701, 0.3443660692464615, 0.2837196241967369, 0.22132303220788418, 0.20263590467950576, 0.21227142669308474, 0.24609889534663454, 0.20688027076339155, 0.21406033159810356, 0.19085369528175256, 0.2019549367765313, 0.25929772877953106, 0.201729440570524, 0.19333717075419943, 0.6859744396909304, 0.20933404519549914, 0.22779672832718978, 0.219530582591962, 0.21481725395432671, 0.24382937028901275, 0.2034670137434892, 0.1850301417879956, 0.1880997669271205, 0.8876593261623851, 0.15691939528433008, 0.2004665675252857, 0.16817878163606803, 0.14221165691483695, 0.17635839844386103, 0.86108484245488, 0.6457472404290343, 0.20958686576872831, 0.14736939438645735, 0.8062378593897321, 0.1673992938904343, 0.6158601015928157, 0.16834916130233246, 0.20687769112688237, 0.8576481717009495, 0.18280207812882343, 0.21059334761898152, 0.19644040105390037, 0.1946626197334882, 0.18404374579445926, 0.2096298384459624, 0.20295591927495704, 0.18113187942930709, 0.24433754240733696, 0.10060631154331545, 0.08155651965275879, 0.09755774794576899, 0.09759424266992123, 0.08710682218073307, 0.09040668940510643, 0.07892322971288301, 0.09796820423516472, 0.0949455046451192]}, "mutation_prompt": null}
{"id": "b702c323-d8c1-4d58-bdee-5db1a4aaac9d", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "d9345562-9a27-49eb-8187-d7f37d20a125", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "4b49df5f-2fd5-4a28-8d2a-21f29ced0fd7", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                if self.evaluations < 0.25 * self.budget:  # Early evaluation adaptive adjustment\n                    self.num_particles = 25\n                elif self.evaluations > 0.75 * self.budget:\n                    self.num_particles = 35\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Adaptive AMSP with dynamic swarm size and inertia adjustment based on evaluation progression.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (25,5) (30,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (25,5) (30,5) ')", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {}, "mutation_prompt": null}
{"id": "bee92949-ccb5-42e7-86ae-e4f22671ab74", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n\n                if self.evaluations % (self.budget // 10) == 0:  # Periodic random perturbations\n                    self.positions[swarm_index] += np.random.uniform(-0.1, 0.1, self.positions[swarm_index].shape)\n\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "AMSP with enhanced diversity by introducing periodic random perturbations in particle positions for better exploration.", "configspace": "", "generation": 26, "fitness": 0.3159379621911895, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562619008, 0.14908275359331635, 0.143495615198309, 0.11936952441349735, 0.14985658762592902, 0.13643238357130794, 0.1362112796210595, 0.176399972943855, 0.4402912515800017, 0.13823829704782453, 0.1339761522634848, 0.11631565906458652, 0.12236160137837815, 0.12802846551526803, 0.1564177483487882, 0.5530119875652295, 0.13074310540901024, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5776015281612511, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08784668304172083, 0.6244643940794161, 0.6006796830061158, 0.2279713332964497, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20223207661895193, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13408273824411898, 0.23244246596797324, 0.20711530457441274, 0.16826636212381185, 0.20822125661508673, 0.1281210802966969, 0.22935351776370982, 0.21235476278380205, 0.21852517511727243, 0.17614743475093053, 0.12354560063362952, 0.2271471647531379, 0.2613476326605799, 0.13023839723501662, 0.12875376526852755, 0.13251430668093822, 0.13066057175486345, 0.1118712430995018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05041842132361596, 9.999999999998899e-05, 9.999999999998899e-05, 0.19104890153068366, 9.999999999998899e-05, 0.0032958771963518263, 0.07126401954146677, 0.042490476103822616, 0.08768793093981186, 0.11769414330103534, 0.034663246543020665, 0.04542913160895079, 0.08185098058323981, 0.11181116304233762, 0.05171348208110793, 0.044196074156780396, 0.03306206843423365, 0.16087796046100444, 0.08512337244552637, 0.10171218484279543, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.20683602599983109, 0.1472962309018101, 0.1254096037480067, 0.14213387234538155, 0.1729437225060272, 0.09457770832888424, 0.21455996208602324, 0.1608221853114613, 0.22958276450111081, 0.5498060865228269, 0.5651773670085439, 0.5843046311317265, 0.5183478411020401, 0.5691582820903743, 0.5596532612432394, 0.5796749155731138, 0.5727968048012742, 0.581575297301484, 0.13297403725873014, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621195788, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259832075697814, 0.2323164662586673, 0.21796437103481403, 0.19642469228692327, 0.21841052342933365, 0.2982407896426261, 0.19400903718465123, 0.2700514094304265, 0.334418852406011, 0.3172851041521775, 0.24828322441719852, 0.4799556491395778, 0.5575529023099106, 0.37808603855540024, 0.48495298942918785, 0.39551437400129763, 0.558643848863067, 0.44937221807372996, 0.2288863595945415, 0.2616750888316226, 0.3091806941439398, 0.28317710013081476, 0.35775714770250766, 0.27039265565909854, 0.2779315542845283, 0.30016929931656056, 0.14913078519063017, 0.1879152329424253, 0.2254690310663473, 0.20452131795606732, 0.25611050298047666, 0.1979033540890246, 0.20424983692415266, 0.2246434825825312, 0.24876759601162401, 0.2229447879778581, 0.6560814055331404, 0.7299788718861845, 0.22798334238806395, 0.21397200174240816, 0.21274823995084002, 0.23910637598080742, 0.23703165700912676, 0.19745294745077946, 0.20869199695077334, 0.13022587764245597, 0.18796588598955644, 0.33008125650793607, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.26973487062171075, 0.16371518901388005, 0.8888499743915863, 0.6896831062901974, 0.21172077783362886, 0.6305169489923648, 0.8398712446201343, 0.16780620866191143, 0.5929663518524171, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23895289934354713, 0.19285656727500344, 0.18788162463382063, 0.19572136937523577, 0.21021353198939796, 0.2087704630692192, 0.19935377899118756, 0.20597286608430865, 0.10730039650036871, 0.09500936005972183, 0.10036767495538101, 0.09097459055135737, 0.08884192615134434, 0.09334529725636753, 0.10275787577009055, 0.10705923175623899, 0.0970485643405109]}, "mutation_prompt": null}
{"id": "13dc7dcb-f813-43f7-93f4-98b4dc0835a7", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                self.inertia = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia scaling\n                if self.evaluations > 0.5 * self.budget:\n                    self.cognitive = 1.6   # Adjust cognitive-social balance\n                    self.social = 1.1\n                    if np.random.rand() < 0.3:  # Selective swarm learning\n                        other_swarm = (swarm_index + 1) % self.num_swarms\n                        self.positions[swarm_index] = self.local_best_positions[other_swarm].copy()\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Modified AMSP featuring enhanced position updating with dynamic inertia scaling and selective swarm learning.", "configspace": "", "generation": 27, "fitness": 0.29674298202359606, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.25.", "error": "", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8135023182881755, 0.8091072850716655, 0.8043121608864137, 0.795432521273419, 0.8096109411422243, 0.8246720388936204, 0.8193681310217114, 0.8043464508195287, 0.8062264632651814, 0.5266581350739172, 0.31841773457172295, 0.48469646928224, 0.4870324625682424, 0.5158225458621295, 0.4094327432299195, 0.4783152832941957, 0.23800125184592735, 0.4883714915500029, 0.14809021710886483, 0.15318335077380274, 0.1478050221787951, 0.1358629884195176, 0.35886012652842914, 0.19350490944224696, 0.14878139518539135, 0.17498837048357285, 0.5588905408679407, 0.25082129920032903, 0.11809864734813802, 0.142617321186432, 0.11732164682810764, 0.12209972435374805, 0.12574948815408427, 0.16952599604540142, 0.10773811108442877, 0.14982460378415818, 0.9747954564191847, 0.9829500387374382, 0.9742807196108962, 0.9719373970145391, 0.9678647993108512, 0.9583841865908103, 0.975462146200542, 0.9752754857247203, 0.969003766530777, 0.49678926672053636, 0.49917537523800926, 0.37896645824277075, 0.5019492130966815, 0.5550242127755387, 0.20417350312853055, 0.08647329867392073, 0.4929804349940923, 0.4648888792518314, 0.22638545491279394, 0.6032641219850499, 0.2246345984162047, 0.21657503282350177, 0.808025635342294, 0.21136901951802378, 0.17187632872936265, 0.23123240488857655, 0.23334217232133592, 0.100182204317246, 0.1978387755642761, 0.12850195230838568, 0.17710965351567187, 0.2206708350161145, 0.1924361466752712, 0.18881659071676582, 0.19634733981134322, 0.195264258011712, 0.14489350603432793, 0.20120951514312901, 0.2110009093876254, 0.23295371568797896, 0.18695389838927978, 0.219231009790417, 0.1300734021330281, 0.12616251538690681, 0.16271429803149362, 9.999999999998899e-05, 0.004167611889468903, 0.0048425608089808225, 0.036760677001063446, 9.999999999998899e-05, 9.999999999998899e-05, 0.042753888637102166, 9.999999999998899e-05, 9.999999999998899e-05, 0.0813818610986562, 0.05054766687547252, 0.10880826972235813, 0.0981857906727398, 0.10823046614200971, 0.05266816933004648, 0.16318102216824304, 0.08916062650483347, 0.1402775249880287, 0.043848618069784795, 0.03159017832241329, 0.15672187484185307, 0.10054917661212315, 0.08934386203865308, 0.06800535086778636, 0.08707312923610466, 0.06278379750232321, 0.08783747272058351, 0.17588745358064972, 0.05677069142444724, 0.16717400442425023, 0.08170242928269966, 0.17778664454508175, 0.19254899787900137, 0.17298481476529248, 0.14873238054406535, 0.12245508871656297, 0.503366294321996, 0.5398532920103976, 0.5111924508321988, 0.5313308347081913, 0.5378194417904264, 0.571948987447612, 0.5350693953987415, 0.5482070036042975, 0.5677903069290723, 0.08301642259639574, 0.09547232060446098, 0.07745806961481116, 0.111422835502901, 0.124002763985683, 0.09885382677319954, 0.076738747058813, 0.11510115967534418, 0.07957673751389871, 0.2675289068270663, 0.3207550489897607, 0.18298901567979642, 0.237318856769544, 0.21738666304987464, 0.46642602229670316, 0.22342185698300832, 0.16474965551532128, 0.32581357941504185, 0.3252313514226336, 0.371556996906677, 0.23857139285773854, 0.3865226352772626, 0.4421505377945033, 0.2707147768451498, 0.38788010060422373, 0.3238931646143216, 0.4341486895115546, 0.222071699665068, 0.1674273900401908, 0.32445434623084635, 0.31751821365248, 0.34657986053509726, 0.25862142427309487, 0.27512562881302405, 0.42902044120784244, 0.23116532150907165, 0.20336364646931693, 0.17876717129327935, 0.2220629416164872, 0.1982384305337127, 0.18981766469803718, 0.22287411739628527, 0.2089605204779178, 0.21394894969792255, 0.2525636363639443, 0.39952828225428016, 0.24586330937514256, 0.6284556986290819, 0.5262658559288899, 0.1944797315563842, 0.2074199270627478, 0.6998496393745186, 0.2061504171572467, 0.20439639062384296, 0.13083616337143444, 0.18790853305386512, 0.18725468624246389, 0.16383214398074797, 0.19983917938386986, 0.16749841025959722, 0.1402988669735018, 0.16223576220897462, 0.874780036510967, 0.6751590646145627, 0.21137371072554423, 0.8257133092450704, 0.7425858297509107, 0.16750753328282608, 0.5707903841665516, 0.16537648693715878, 0.10462542171279676, 0.7004869447132429, 0.19485533306424274, 0.19492591652733715, 0.1815635937984066, 0.18110929579511126, 0.182827766393296, 0.1850178491243235, 0.1875068865693662, 0.21824065625871136, 0.1811713984326898, 0.09593581849864696, 0.10050573484000691, 0.09773806009758879, 0.09663233117678482, 0.07641467741861374, 0.08868500479485641, 0.08635966686672636, 0.07797593152314108, 0.08885270937234657]}, "mutation_prompt": null}
{"id": "8a8fe558-f543-4350-b02b-f43291657c42", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "1f23f37e-61d1-44ff-bb7d-ab5e94651db8", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Dynamic inertia and learning rate adjustment for enhanced convergence\n                self.inertia = 0.9 - 0.5 * (self.evaluations / self.budget)\n                self.cognitive = 1.3 + 0.2 * np.random.rand() if self.evaluations < 0.5 * self.budget else 1.5\n                self.social = 1.5 - 0.3 * np.random.rand() if self.evaluations > 0.75 * self.budget else 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive dynamic learning rates and a stochastic local search to improve convergence.", "configspace": "", "generation": 29, "fitness": 0.2612212375792741, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.6646571866408468, 0.6609060490037997, 0.6597262871632465, 0.6790095032096447, 0.694955710496215, 0.6746580236650184, 0.6809692970199255, 0.668972485934707, 0.661779438475122, 0.3539370562301769, 0.32326280987077693, 0.2819563150975608, 0.24890528020201796, 0.3116838657267248, 0.3898829844840618, 0.036296475747127466, 0.3683449268233072, 0.3316569484717493, 0.11646976085347227, 0.2095889568315411, 0.2932006003329978, 0.13166085975472652, 0.2559172077159363, 0.1259478311970248, 0.11408144341267112, 0.14034366996548597, 0.14040415632002423, 0.12431246254446893, 0.12109605240426768, 0.10776418973151669, 0.14841820054998478, 0.11989406298366301, 0.1304705070726241, 0.11984000768476144, 0.13241381786794426, 0.09576966780793683, 0.9746397746526064, 0.9811292536840912, 0.9745421074872357, 0.9671924141503322, 0.9679952548183453, 0.9585353455418637, 0.9756159252612634, 0.981711682422929, 0.9748865945930016, 0.41963310329365244, 0.3882818017521491, 0.372704234992843, 0.37340741363258545, 0.35896982702824, 0.15280304351976937, 0.23219947560715404, 0.43923931496204993, 0.3851859735960248, 0.21170236462022007, 0.2009831507016393, 0.28662366687102125, 0.20405911575102187, 0.18746797657426173, 0.1881065525067882, 0.2212200120393274, 0.5957981209260688, 0.6984652371736872, 0.31213223188801853, 0.17655464183532188, 0.11496148292246633, 0.09722224107428468, 0.12299096820705857, 0.12274291994515885, 0.16459156692211108, 0.16675736154005394, 0.17303694978109996, 0.1756176389324453, 0.10882544934038596, 0.15935490029434007, 0.17056289473856612, 0.1749929433915196, 0.18187775317898747, 0.12045254400992522, 0.1823939965918876, 0.19490184088915963, 0.008659907635249153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01279660374257341, 9.999999999998899e-05, 9.999999999998899e-05, 0.00546376785641256, 0.0022236982363598168, 0.00266916620773594, 0.09122832366407252, 0.04346794295635681, 0.07290002013364538, 0.06739385794298991, 0.05801662552468845, 0.025130073180729462, 0.174253083481262, 0.030811968921426902, 0.027350610259830654, 0.03999823545035508, 0.023815215946559, 0.09949850404098193, 0.10775422747819796, 0.04668429354182935, 0.0497871643118486, 0.06512202258057309, 0.0720420659761527, 0.1535882506702062, 0.07291344152713264, 0.03853089737833959, 0.15083557784282564, 0.15502670253384299, 0.07164399870340044, 0.09079431409810079, 0.0502202215270483, 0.049565231372474594, 0.16665375449145192, 0.5195295085883946, 0.46117519320951983, 0.4767613700533886, 0.4419426343291897, 0.4726570079107847, 0.4579298320186014, 0.46821018998344166, 0.4444385868983092, 0.4844419523759872, 0.11178228507329369, 0.07423120298855901, 0.08069238937038714, 0.10279916960235536, 0.1247068609724804, 0.12386695848056839, 0.14042877795671393, 0.10211428342921192, 0.12312067711404706, 0.1756525324821081, 0.16271129835737397, 0.21155191711896582, 0.18270132525263238, 0.3402171820780894, 0.32225762181523354, 0.3064987337677607, 0.1898104642604732, 0.15502745854925337, 0.35840538040173564, 0.2988136135189994, 0.29496031697579195, 0.376509768955273, 0.41481628485193367, 0.36445113758700176, 0.4017486165440842, 0.4170600473751075, 0.2723820811062213, 0.21927743707825498, 0.17769379543996744, 0.23756650113660793, 0.18656812603927042, 0.22535960518454334, 0.1948870013307199, 0.20632914859835905, 0.23966630028904545, 0.1542585023273232, 0.20783559918342287, 0.25277930173153784, 0.20047998800537814, 0.21887790462727674, 0.1945528663684304, 0.20253862640746645, 0.22342253333079765, 0.21785781494449408, 0.23624685239265053, 0.19885273641918844, 0.19902106193034785, 0.1966706473963281, 0.41320531121289783, 0.20150272707036698, 0.20720904671438345, 0.19234228139451248, 0.22475757256575168, 0.20429326725272, 0.14462219679577593, 0.18572684285095953, 0.7913814734122031, 0.14394111649894548, 0.19782833298948088, 0.1926661286921234, 0.19705516071239648, 0.17414201520428796, 0.7808793818940759, 0.7287480077151092, 0.21115963530644877, 0.4967493067980083, 0.6484352752564476, 0.36077334631378055, 0.4400768334084504, 0.16734159176219687, 0.19268177544302056, 0.5506065766572994, 0.20421029096594434, 0.19633088716463487, 0.18835811727448803, 0.19490473594604207, 0.18855575346628894, 0.18304649092208014, 0.19742976780318733, 0.19063601852662615, 0.19137554936092538, 0.07857131325632905, 0.08761605496324432, 0.08291831648902392, 0.0820317370924375, 0.09058337710024011, 0.07773372542955026, 0.08461776021985135, 0.0809377655382374, 0.08919450801706175]}, "mutation_prompt": null}
{"id": "23203a7d-cb0f-41a2-9765-5b5f4d7c0f3b", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Introduce small mutation to velocities for better exploration\n                mutation_strength = 0.1\n                self.velocities[swarm_index] += mutation_strength * np.random.randn(self.num_particles, self.dim)\n\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n\n                # Adjust number of swarms based on diversity\n                if np.std(self.local_best_scores[swarm_index]) < 0.01:  # Low diversity, merge swarms\n                    self.num_swarms = max(1, self.num_swarms - 1)\n                \n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Improved AMSP by introducing mutation in particles' velocities and adapting swarm counts adaptively based on diversity.", "configspace": "", "generation": 30, "fitness": 0.22301175786321042, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.4573639151398068, 0.4331565278318469, 0.4229350553239086, 0.43770071929080734, 0.4589728616118903, 0.4677127281031478, 0.4424758559829205, 0.4463240820264295, 0.4377269116079612, 0.00035353024057005467, 0.04763241831131926, 0.000329815800862554, 0.08531020133110656, 9.999999999998899e-05, 0.009827554247307857, 0.03202183924424229, 0.05684412687256679, 9.999999999998899e-05, 0.12734341544191796, 0.0943285665222855, 0.11995455763418617, 0.11084745409413699, 0.10813749876209189, 0.12505915137474566, 0.12385708367289949, 0.1495384293681471, 0.11501447963193623, 0.09593082312365131, 0.0987498477446519, 0.12603044987912349, 0.10118143761152476, 0.11346627077890659, 0.11108556293104122, 0.10136699590126408, 0.09688299534728972, 0.07121561696642076, 0.9688469570123559, 0.9757378564465701, 0.9772666499642066, 0.9548025099861255, 0.9597944322738168, 0.9596148665490785, 0.9758142425556259, 0.9783591779046766, 0.9676012899201264, 0.3092934539162322, 0.28362777068199685, 0.2521106479916403, 0.3055223133719912, 0.31122329265571635, 0.268185453761119, 0.2621833402067929, 0.3102351176175988, 0.29129379376099274, 0.8654710072843685, 0.3225450491307118, 0.37547023493976917, 0.2771785294897674, 0.3589686038373274, 0.2966032545146543, 0.2577398947116234, 0.17686600008816444, 0.3013364321447233, 0.09360860123206571, 0.15398168471670015, 0.18948454980597018, 0.09994080395918459, 0.15170703789896056, 0.12406597035339528, 0.15039084318896878, 0.17920867926653705, 0.16114668292463397, 0.1979602489378569, 0.11177762106727462, 0.1622502738843683, 0.12208089258476684, 0.16172751604108526, 0.16269045524880843, 0.15592876187741644, 0.15806448107244653, 0.12502432980203193, 9.999999999998899e-05, 0.06826267186261481, 0.038275696160001815, 0.03809656149997154, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09001108829336646, 0.0297813263965947, 0.12140639101312956, 0.05246187706084526, 0.09380680194570012, 0.01772744329113407, 0.11513713889291177, 0.06555578989133592, 0.09082025891775358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1185485868727072, 0.10452604382572739, 0.06678231319182903, 0.0694395650469738, 0.11702279629715262, 0.0575688124629683, 0.09686354698696142, 0.10795832046550491, 0.09827483270034243, 0.4029107036634255, 0.42015698848248273, 0.4327864207160844, 0.39469284532496685, 0.4004259569775833, 0.401912310293721, 0.41441788828954806, 0.436726314161223, 0.4121193529664535, 0.09726870838613033, 0.12602125785817864, 0.09415627788556646, 0.09718413546614357, 0.11233850199867956, 0.09813107130112675, 0.11966505000174787, 0.09797105265349293, 0.08305290849002356, 0.1778567793092627, 0.25288965534264685, 0.18911780521630617, 0.18399755612383173, 0.25442388809374583, 0.16165030049221163, 0.2835501723669477, 0.23515295516324797, 0.248904580792772, 0.28763428153856563, 0.2958185544902415, 0.28060648021182477, 0.2849684394620501, 0.2570452143830857, 0.28645331643671046, 0.2901048845373203, 0.2960641912568692, 0.25554299844343753, 0.216953255866688, 0.09182594557694645, 0.23511561524051627, 0.19531873229878938, 0.2140063752237249, 0.21506898315823464, 0.18515277313687306, 0.23332340184416123, 0.1546076519066999, 0.2071846027461265, 0.17319860841846635, 0.21442045004536836, 0.21264869070817816, 0.23847311265485005, 0.19906745743663412, 0.24195039857310774, 0.20615342073985288, 0.2560479625893719, 0.21018679744980295, 0.19979964317351162, 0.19260338041117764, 0.28232450223238303, 0.22896650466437296, 0.20068234665755902, 0.21714979982055893, 0.19623289905568342, 0.22301734316111943, 0.1297084254947386, 0.18820122188485866, 0.1870176979937319, 0.16425363100912782, 0.20036371194439195, 0.1675188350445187, 0.5776348328655183, 0.16401113826749258, 0.6522378897044647, 0.5081145285406669, 0.20969898116046026, 0.5966021205046769, 0.5975149692753744, 0.16669739786159588, 0.4492314192655186, 0.16654340566105819, 0.10435017603108465, 0.5709492666525459, 0.18199692280609103, 0.18828711584310565, 0.20923776164339547, 0.1830966546058006, 0.17654327935720904, 0.20531208283077407, 0.18411677942895044, 0.17827318074985576, 0.18251315349404362, 0.08434391136417652, 0.09508138876788985, 0.09544746686629368, 0.07486998066599748, 0.08599284353496572, 0.08455346800793684, 0.09806504737289456, 0.09381719695338198, 0.0717031122217624]}, "mutation_prompt": null}
{"id": "d186d3a3-31a7-4a30-bded-65185290e89e", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "63386230-b680-4fb7-8be6-7d773af95d90", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "15a5131d-592a-4740-888e-5d440c94d85c", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5 + 0.1 * np.random.randn()  # Stochastic adjustment\n                    self.social = 1.2 + 0.1 * np.random.randn()      # Stochastic adjustment\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n                if (self.evaluations % (self.budget // 10) == 0) and (self.num_swarms < 5):  # Dynamic adjustment\n                    self.num_swarms += 1\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Refined AMSP with stochastic cognitive-social balance and dynamic swarm number adjustment based on performance metrics.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {}, "mutation_prompt": null}
{"id": "dd2d5ef7-378b-44fa-ad14-08517050a1ea", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "82454854-5c61-4df6-bb10-a2987bd13df0", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                    if self.evaluations % 10 == 0:  # Dynamic swarm merging\n                        self.num_swarms = max(1, self.num_swarms - 1)\n                self.velocities[swarm_index] *= (1.2 - 0.4 * np.random.rand())  # Adaptive velocity scaling\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced swarm intelligence by incorporating adaptive velocity scaling and dynamic swarm merging for improved convergence.", "configspace": "", "generation": 35, "fitness": 0.30374416783893493, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8336919820135463, 0.8249523000070266, 0.8180608787194459, 0.8252908271685442, 0.8272848195128839, 0.8225407971061635, 0.8323172075884272, 0.8380123860420204, 0.8188541406839769, 0.5196574064770179, 0.5753345530409265, 0.593740881685783, 0.6249957214524595, 0.5614129330752529, 0.5790307321959778, 0.6117567202486537, 0.6183165938185748, 0.6327073714295826, 0.14128287199618006, 0.12781490064820156, 0.14665395208604715, 0.15816892390724824, 0.11806168439665798, 0.12843449225590808, 0.11394364656885425, 0.18333002524307318, 0.13522824240065057, 0.12430993935726442, 0.12783117351661344, 0.1346971076542084, 0.11014046749529549, 0.13717881955706868, 0.13333979014245834, 0.14745911246106191, 0.1145169837702853, 0.12185391972297877, 0.9751371739505795, 0.983030420119651, 0.9728264977312359, 0.9602253775906661, 0.9749309154525513, 0.9593371436649429, 0.9764002837323245, 0.981752039023984, 0.9744660656029533, 0.6454717827371559, 0.6247178841512022, 0.05683142881561676, 0.6162213831172147, 0.6580337809985284, 0.6235720234697413, 0.6011630530907832, 0.6217634209388659, 0.6221825613494256, 0.22553910260563237, 0.22715027385384934, 0.38433784558568385, 0.19381687685846583, 0.27437851696368243, 0.1918609263030231, 0.22983172342547786, 0.12990309768152097, 0.23086835822551677, 0.20696621257938586, 0.2143973028774363, 0.19230540444207533, 0.16310371335801266, 0.21470810839617982, 0.28190513975669573, 0.20572844546575098, 0.11557705959813824, 0.1988926989646992, 0.2053206229166996, 0.1825592255380104, 0.12980838275848205, 0.23103129199972583, 0.25575513400406646, 0.28405763651036586, 0.3168111524970929, 0.2379120248027914, 0.23817896363942126, 9.999999999998899e-05, 0.08847713970429849, 9.999999999998899e-05, 0.0347314123340986, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03996431983864879, 0.0032660891011191406, 0.07067278677292621, 0.09514380337123707, 0.10577341410302143, 0.08273984452703675, 0.06828986771244905, 0.0019551249903375645, 0.06708211194356462, 0.042292658582746445, 0.09959775423738793, 0.0993909045084671, 9.999999999998899e-05, 0.08159945345987163, 0.07091531018110453, 0.138446665469107, 0.07232726911965348, 0.16764162970143603, 0.1437964170879995, 0.1401805081683466, 0.11234915103135334, 0.10819915045807627, 0.08232018581606082, 0.048993815856867684, 0.1697062759758785, 0.1836615887987173, 0.10867335633951825, 0.0808842766370681, 0.05579713193681202, 0.5150566652537704, 0.5379647110562553, 0.5190470148752692, 0.5539102400250104, 0.5537064083137073, 0.5331523499056136, 0.5561206462818589, 0.5444956518072878, 0.5203577422401137, 0.09628076554304565, 0.09350634094157673, 0.0738152529737035, 0.13134774545588512, 0.6727635244358502, 0.1586842720143452, 0.11062893503358351, 0.10822642293335427, 0.1195436112597823, 0.161910063477109, 0.20211194142964983, 0.20207184064976613, 0.2665596823221045, 0.32190276909954074, 0.20754636351594713, 0.2702516134301386, 0.33453752865158626, 0.26691153530973366, 0.40017773483803964, 0.23099689643645227, 0.42122758690921724, 0.44336502411448686, 0.4070331730914154, 0.4181646170139872, 0.26361582908049563, 0.4802493502175442, 0.2791713483580014, 0.23503487907830944, 0.09750021761330141, 0.2656014172608401, 0.20468996500194758, 0.22536724869114422, 0.23226301447463837, 0.2596804849419365, 0.2817106602452445, 0.20918225660068523, 0.23536269727765813, 0.2056841573745093, 0.20826343267934944, 0.20687320812465693, 0.2001358412659101, 0.268336485718804, 0.21630014472931347, 0.2610937919597187, 0.2572990022068621, 0.19238363136384795, 0.7261464117807143, 0.22619917838992576, 0.5739372236222129, 0.22557006176558403, 0.20657157901352508, 0.5819077111914605, 0.2212375233873073, 0.19727550549545325, 0.12957617098583563, 0.18692726287614347, 0.18693754928700623, 0.1639523241766092, 0.19952550840312255, 0.1674412819517751, 0.8505248754583797, 0.16337010696909016, 0.894676545926736, 0.6521777467455598, 0.20854254227974056, 0.07331187681254092, 0.5014685869017825, 0.16702056137695076, 0.5454755194172302, 0.16797265220141855, 0.10433282124643284, 0.7816318433515903, 0.19998392795666642, 0.18930583165141057, 0.19372916143110774, 0.20560892053535518, 0.20834566227667395, 0.18174737297197252, 0.24308626381209308, 0.17997685519854023, 0.20276650014961284, 0.0974651504845071, 0.09196723219110337, 0.10105526644295604, 0.10688418512828068, 0.07106721295059992, 0.09486373752465838, 0.09657237787790396, 0.09114636705356971, 0.09183932129807326]}, "mutation_prompt": null}
{"id": "1ee34cc0-c19a-49d7-80ca-cf88557f6718", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "d0b92450-895a-40c7-bca1-4c9c5430ac3d", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "e7b34f46-8146-46fb-8cc5-2b6a7cce9c4e", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Dynamic inertia adjustment based on convergence rate\n                self.inertia = 0.4 + 0.3 * (1 - self.evaluations / self.budget)\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n            # Adjust number of particles based on progress\n            if self.evaluations > 0.75 * self.budget:\n                self.num_particles = int(self.num_particles * 1.1)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Improved AMSP with dynamic particle count and inertia based on convergence rate.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 30 is out of bounds for axis 0 with size 30').", "error": "IndexError('index 30 is out of bounds for axis 0 with size 30')", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {}, "mutation_prompt": null}
{"id": "da6bcb21-b42a-4e6a-a896-502160e19faa", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "406f16cd-4d41-47ab-9229-c58365b6f6e2", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n            # Merge swarms if one dominates \n            if min([np.min(scores) for scores in self.local_best_scores]) < self.global_best_score:\n                self.num_swarms = max(1, self.num_swarms - 1)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with dynamic inertia and swarm merging strategies to improve exploration-exploitation balance and convergence.", "configspace": "", "generation": 40, "fitness": 0.31601928942818713, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "977c5f69-e8df-49df-82b9-b0b74072d470", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n                # Alternate inertia for diversity\n                self.inertia = 0.5 + (0.2 * (swarm_index % 2))\n                \n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Adaptive learning rates for local search enhancement\n                if self.evaluations > 0.5 * self.budget:\n                    self.cognitive = 1.2\n                    self.social = 1.5\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Tweaked AMSP by introducing swarm diversity through alternate swarm inertia values and enhancing local search with adaptive learning rates.", "configspace": "", "generation": 41, "fitness": 0.3081620650758545, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8439884660895608, 0.8464424489442134, 0.8396653375163893, 0.8515892440969912, 0.8489427119839438, 0.8426863729606417, 0.8462790830450826, 0.8369864852692162, 0.8448046783303248, 9.999999999998899e-05, 0.6443675042900316, 0.6374399750182302, 0.5876400148817036, 0.565931607790628, 0.6603572898719158, 0.636578986009614, 0.6064714690141337, 0.5366524013886057, 0.12669661186422487, 0.1765142716869561, 0.12440018750444648, 0.3962388589851277, 0.3905188121464457, 0.1206911591668155, 0.1469833956365756, 0.12328408541833391, 0.17755320117545614, 0.10947249214345012, 0.13182822517075876, 0.08166842748862868, 0.13545544064431125, 0.11592311977305303, 0.11353057247880993, 0.15370967743083186, 0.11446385020106131, 0.11109136526817587, 0.9743563391915454, 0.9753788337600262, 0.9675855949910078, 0.9679476058219614, 0.9690219546638306, 0.9676311131853348, 0.975110417413966, 0.9765473163067502, 0.9605679534502243, 0.6345719960929852, 0.6700099276602982, 0.5971998103830708, 0.6881898532282886, 0.6828945953169074, 0.592083716597795, 0.12330317407041225, 0.6292757259875434, 0.6609614073581545, 0.22633463934428033, 0.17142519957387958, 0.22791416963456135, 0.21958435948878885, 0.19241685574563672, 0.19054021249980257, 0.20923294777524648, 0.8699752841533912, 0.23910233533233372, 0.15445108988443812, 0.1997215497762106, 0.19338415516945284, 0.13489651320121954, 0.1981714533663249, 0.3023923223266166, 0.18615925033095482, 0.19352194281163249, 0.2021309404562639, 0.2374588354163032, 0.09821048613744932, 0.2279660838235954, 0.1332819940346699, 0.21888662293215944, 0.21919734691782589, 0.15637345048695495, 0.2438018807516693, 0.13105780648088006, 0.0015413810451273546, 0.08431479851171075, 0.024605108446253854, 0.04635388168600907, 9.999999999998899e-05, 9.999999999998899e-05, 0.008984983751146314, 9.999999999998899e-05, 0.006885390016709625, 0.09138331743203121, 0.051173489847982645, 0.0807724998173639, 0.06740536523081608, 0.05841053880672731, 0.024719393789756405, 0.1009483442821334, 0.061426141150687896, 0.04307215051624591, 0.08761635032195814, 0.03431033224778568, 0.20018425985806532, 0.0756555332848573, 0.11745489227898287, 0.07409379570516939, 0.21734641483133876, 0.2014782533383952, 0.09428056926843109, 0.2804418221961067, 0.0477970778672947, 0.12893069545951252, 0.038187554413403046, 0.15662263955939038, 0.16323367737687045, 0.0868600122019143, 0.08109954567338773, 0.05017286300462165, 0.5151318799114344, 0.5499405516657039, 0.6222015761956894, 0.5377236628545616, 0.5457917447258667, 0.5368997295814403, 0.5588040495535547, 0.5676693100845869, 0.5459154097707548, 0.07724190314984913, 0.14066017273861375, 0.10731903992350111, 0.10976235745050889, 0.1349865773075637, 0.1544488155578243, 0.09373059642982517, 0.11488931706298333, 0.08264939499283896, 0.16383215187126932, 0.3486520730168511, 0.21441904877394058, 0.2141045523730879, 0.5111733705235624, 0.2012114732660445, 0.2764031862926133, 0.203427786316005, 0.2610363250045863, 0.3426734196622392, 0.41427516961852884, 0.5283263883385052, 0.28684139535999953, 0.42715681900747016, 0.3224625035025188, 0.4906955481579168, 0.27613894479935686, 0.4769184868955917, 0.3034777938549803, 0.2357734508509437, 0.3152835300317871, 0.23417787057547834, 0.2614448615280216, 0.34150120595004374, 0.3568164489416621, 0.366809491318128, 0.21894303699950124, 0.21872162477758683, 0.23376956188643694, 0.21246762859218093, 0.24576522888740326, 0.20526132995590496, 0.22291538533614497, 0.19579623256408973, 0.20738024753338846, 0.2412370455122933, 0.1920463771415929, 0.2016720329358762, 0.2027111147304459, 0.7863662467445184, 0.2218672265581335, 0.21236019902563252, 0.20764141084722199, 0.19657020050271845, 0.1979241108296752, 0.13080359533154062, 0.18815810624275464, 0.898152620586441, 0.1970781208601715, 0.1999913123456195, 0.16725024016484424, 0.7781948362708756, 0.16378116926780262, 0.21029556294227236, 0.7853491707493444, 0.21059952286411776, 0.07359328778964469, 0.587799809114068, 0.1684532466683749, 0.7268475404517794, 0.16759889812812012, 0.10461040463472526, 0.827589766480163, 0.22114098891179368, 0.1921417419976581, 0.22716266795651796, 0.17405888688588456, 0.2022240853666336, 0.21850261251325998, 0.19120887647939522, 0.2591827353970192, 0.21931030771496984, 0.09563859630327787, 0.0968981230785243, 0.09128523946210665, 0.1062775726282722, 0.10785430875176405, 0.07457592524272116, 0.0986436753922697, 0.1068196326571278, 0.09647927536821843]}, "mutation_prompt": null}
{"id": "7f3c2cc3-fcb9-4b4c-b98c-26aa12004042", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "9876e4c9-42b2-4193-a6a4-01a7487d013d", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                if self.evaluations < 0.3 * self.budget:  # Early exploration phase\n                    self.inertia = 0.9\n                elif self.evaluations > 0.7 * self.budget:  # Late exploitation phase\n                    self.inertia = 0.4\n                else:  # Transition phase\n                    self.inertia = 0.4 + 0.5 * (1 - self.evaluations / self.budget)\n                    \n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhance AMSP by introducing adaptive parameters based on swarm performance and dynamic inertia scaling for improved exploration-exploitation balance.", "configspace": "", "generation": 43, "fitness": 0.23578657659381128, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.5760617549655671, 0.5662935370945672, 0.6057070582306223, 0.6091949323699924, 0.6206819986271142, 0.591731954307958, 0.5701878018162833, 0.6091746101098208, 0.6103557595238487, 0.026324731530013246, 0.2702325691192602, 0.26915314164041637, 0.2190347221500336, 0.03831102292979072, 0.08596907432319933, 0.25555438811245745, 0.2701300226536266, 0.2542070928380382, 0.189374815016636, 0.1417777044744114, 0.13330007275986666, 0.10355133944955197, 0.12849878765922873, 0.1675178864221074, 0.13649510275244225, 0.12483751012957744, 0.2613291062036698, 0.100464126119852, 0.10740225731328956, 0.08739496476998099, 0.10084174653014999, 0.12494509518249253, 0.09089909994262413, 0.10384497784248437, 0.1198339608493183, 0.1259118903444425, 0.9764670366523016, 0.9822164039421357, 0.9749395482757917, 0.9743290910696578, 0.9752188041189273, 0.9715620810316529, 0.9755820391867028, 0.981732930697055, 0.9742487384766041, 0.3536978100106498, 0.30469736936593417, 0.05735998450241164, 0.3222687621647925, 0.3312305701148337, 0.34266240937381875, 0.10889304000868327, 0.3635872097377214, 0.36075548895680276, 0.19315751472219422, 0.22065825889172397, 0.22488726598579922, 0.20624941828815102, 0.18792530591681467, 0.18170930102466576, 0.1895839576617142, 0.618240992570489, 0.3131508222249033, 0.10472669880174545, 0.13337828656409367, 0.14462026018451557, 0.07423867932550732, 0.10779590217649127, 0.10567616953219916, 0.14208839376031013, 0.14095762013155122, 0.15446149117530772, 0.14111754111840258, 0.1492845475998904, 0.142402444836211, 0.13684666960505343, 0.10771033040753519, 0.1346809211582225, 0.16875967020752014, 0.15580703898097525, 0.1213721767516186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03245520865377838, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07871291838282346, 0.0544896985523452, 0.0491440568227286, 0.08197376550679814, 0.04160600014432203, 0.02726488126501936, 0.17660079033547105, 0.033094732821844275, 0.007161337937144019, 0.04861729582448204, 0.019674159809379477, 0.050970278456351825, 0.051318091294333734, 0.06160529145741134, 0.03946885183869653, 0.05142923820206091, 0.08983305076706094, 0.07686672192857258, 0.21109381615955192, 0.03425789811240543, 0.10065121434529067, 0.030326712801504563, 0.11258938647586236, 0.11927954670032814, 0.04774947047361766, 0.04819104868990198, 0.04690973192083259, 0.41289812405802073, 0.4164773605851608, 0.4334663387541151, 0.44064560329867086, 0.42144144256790395, 0.4338028905547595, 0.4488840914088251, 0.4376624064675303, 0.4570654451939774, 0.06627067319628499, 0.13040918428074888, 0.13556393291714686, 0.13065028833694325, 0.1064281927544991, 0.13114042418213046, 0.10420863624690979, 0.1031633311681931, 0.11528293698993763, 0.1381545514568301, 0.16345107248629798, 0.17091686013320995, 0.21767880744443135, 0.32639353615741784, 0.3290547539552249, 0.18542483354055517, 0.24658426097906005, 0.25861389037937277, 0.28696746839150733, 0.3005919401059546, 0.3120777775001434, 0.34869741094747564, 0.3308205881965607, 0.3316665786994054, 0.32289270391127334, 0.35241653728669564, 0.3783597009948778, 0.23655371993430485, 0.22149462750111704, 0.22747385249504026, 0.22502631739235468, 0.20992838434074412, 0.2055731306536912, 0.25531173331856294, 0.2420074110278475, 0.1442975949945261, 0.21124607181198174, 0.2200079101431618, 0.19761476125677058, 0.23472319174307354, 0.1941674149928333, 0.19763250031055057, 0.19060645240026552, 0.19791289253074473, 0.18979613086043046, 0.21941836063668685, 0.4219007644467895, 0.43586742200625483, 0.2132186547275018, 0.19180284437779282, 0.22955506982562623, 0.187923670863537, 0.19732332326241975, 0.21339067141914403, 0.1300257135451709, 0.1846320223293626, 0.7206350807305866, 0.16003169273678763, 0.19674963144092317, 0.16675528359841318, 0.5473199323326713, 0.15501657463502894, 0.2047508122140166, 0.5102846997212673, 0.20427104039430888, 0.19312527008962077, 0.44251642499899446, 0.3231198946856677, 0.40082564804518017, 0.16522056573065125, 0.2045797735186714, 0.3003867559306116, 0.20028695066259738, 0.18064387621604383, 0.1938441544342938, 0.18481438461974808, 0.1838949464929931, 0.18950363683545257, 0.18476422181137286, 0.1934917362530595, 0.2082589588849194, 0.08153500824889592, 0.07770286723276609, 0.08168752738589213, 0.06903155585301246, 0.07689430491150451, 0.08368789682744826, 0.07636146585999481, 0.08217342815685091, 0.07947854302191248]}, "mutation_prompt": null}
{"id": "6a9befbc-5c7f-46d3-8c90-54c8210c5263", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "f55194ca-ad0c-4eaa-ade4-5e2dc23a370c", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "edb33df1-122d-4a01-bbd7-1af8eefa3750", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "17aea241-dcfc-4444-9e92-9aa15834236b", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "2ef05f48-b9d5-4683-867d-ff166cf58196", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "bbdfe46c-766f-446b-9234-3fb71875f748", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n                \n                # Energy-based dynamic velocity damping\n                self.velocities[swarm_index] *= 0.9 * (1 - np.tanh(np.linalg.norm(self.velocities[swarm_index])))\n\n                # Enhanced inertia adaptation\n                self.inertia = 0.4 + 0.3 / (1 + np.exp(-0.1 * (self.evaluations - 0.5 * self.budget)))\n                \n                if self.evaluations > 0.5 * self.budget:\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with energy-based dynamic velocity damping and improved inertia adaptation for superior convergence.", "configspace": "", "generation": 49, "fitness": 0.05040118948050129, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.11869729595922507, 0.12023113931555696, 0.09169502728636048, 0.13112642370491867, 0.10750000009520266, 0.11042008850345264, 0.0998473575412605, 0.07553714411058787, 0.1094008673217095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009789823877150217, 0.015169340368183293, 0.018911566204957708, 0.010643411704069683, 0.006592353378601756, 0.006669962766643223, 0.018603296811771308, 0.007792397052521438, 0.010674738340807233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 0.0004952459975243739, 9.999999999998899e-05, 0.014763392921912755, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.05881044770816646, 0.04287777107098589, 0.054877264043567076, 0.05331602884281661, 0.04865133012201606, 0.0639706079335367, 0.057803977829267716, 0.053494718807759134, 0.06274794416174423, 0.029078853981581276, 9.999999999998899e-05, 0.037102256751242346, 0.03923690144124814, 9.999999999998899e-05, 9.999999999998899e-05, 0.016675340803576577, 9.999999999998899e-05, 0.10027683525177622, 0.08224659834595494, 0.059824388882108726, 0.0667108215001172, 0.07285119553694963, 0.08132921701227258, 0.049366521008575415, 0.05931056463008866, 0.10017772473897679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004514399195837737, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12539741187488818, 0.15756555760738078, 0.16308692172496542, 0.11299707672965909, 0.10274288241579344, 0.12416483807742551, 0.16112956940342849, 0.12648358403994353, 0.1210557193025883, 0.013739533971539819, 0.002504996190535347, 0.02198412468535549, 0.03266886175302153, 0.0008380415396770369, 0.01759993274736349, 9.999999999998899e-05, 0.021948067854712816, 0.0267656688986897, 0.08494000004272673, 0.08609370886951495, 0.11842175776965747, 0.13766266535167793, 0.13511880823300437, 0.10798713552628325, 0.08808199726801991, 0.08099219012337167, 0.0798722905190411, 0.11985149873023437, 0.12244191735429832, 0.1613932299901244, 0.13800672315110074, 0.1362913836684968, 0.161856142914947, 0.1219584187816024, 0.17377774300845283, 0.11544443549682837, 0.05985564337097804, 0.05884243066818107, 0.08398582550377798, 0.058279853167365614, 0.06633611147388963, 0.09793549997287943, 0.0837317855149382, 0.0997711199450243, 0.06766106901929891, 0.11943364695601921, 0.10491313827275839, 0.13345086981233123, 0.1103568689991713, 0.10248497347293928, 0.10896891037713907, 0.12245976138762271, 0.10201798564705933, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12680551929410044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10630450851969886, 0.08967513334876764, 0.10161371339885394, 0.09360775873740623, 0.1207914665021157, 0.06995893837844436, 0.1070176662487543, 0.10511484148144368, 0.0693612576838919, 0.11040265245322212, 0.10267165755511809, 0.06932034027342138, 0.08059276491351852, 0.03738259240699027, 0.0794872468536234, 0.07376503436009862, 0.05346335986028028, 0.04699248306696513, 0.13480174570059533, 0.1608614726286951, 0.148124017676316, 0.14552268903905985, 0.1282201447801723, 0.13994288924415266, 0.14969714796693134, 0.15308535452138583, 0.14689007985489466, 0.027007085248150542, 0.024813730588825633, 0.031393493129599714, 0.027015293023570086, 0.03425093938292756, 0.0388165651178235, 0.02672016584536452, 0.03803354422653826, 0.02489289782248183]}, "mutation_prompt": null}
{"id": "e7d15352-bf1e-4705-96a8-05ad7087dcb0", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "74b7e46d-0c11-4ef2-9d9d-0505c1ac2dd4", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "75a797aa-7fb0-4633-85e5-437d064dfafb", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "bc74d209-ada9-492d-9156-ffa932a74fc2", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n            if np.random.rand() < 0.1:  # Introduce mutation for exploration\n                mutation_vector = np.random.normal(0, 0.1, self.dim)\n                self.global_best_position += mutation_vector\n            \n            if self.evaluations > 0.75 * self.budget:  # Adaptively reduce swarm size\n                self.num_particles = max(10, self.num_particles - 1)\n                for swarm_index in range(self.num_swarms):\n                    self.positions[swarm_index] = self.positions[swarm_index][:self.num_particles]\n                    self.velocities[swarm_index] = self.velocities[swarm_index][:self.num_particles]\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "AMSP with enhanced exploration by introducing mutation for global best position and adaptive swarm sizes.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (30,5) (29,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (30,5) (29,5) ')", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {}, "mutation_prompt": null}
{"id": "60c2756e-f179-42d3-8b13-18c9568f2e37", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "ad1f2c01-8d80-42fc-bfac-7cf41298b15f", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "62cc59e0-0a3c-4c96-9c6e-e1671fd61774", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "265816f0-1703-47d2-84e9-4df67e0861ed", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Dynamic adjustment of cognitive and social factors\n                if self.evaluations > 0.5 * self.budget: \n                    self.cognitive = 1.3 + 0.2 * np.random.rand()\n                    self.social = 1.1 + 0.3 * np.random.rand()\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n                # Selective swarm collaboration\n                if swarm_index == np.argmin([np.min(self.local_best_scores[swarm]) for swarm in range(self.num_swarms)]):\n                    self.positions[swarm_index] += 0.1 * np.random.rand(self.num_particles, self.dim) * (self.positions[(swarm_index+1) % self.num_swarms] - self.positions[swarm_index])\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Improved AMSP with adaptive learning factors and selective swarm collaboration for enhanced convergence.", "configspace": "", "generation": 57, "fitness": 0.27465724214662185, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.7484855673270944, 0.7321997879618536, 0.7275129971301549, 0.7460426748632201, 0.7315981419774757, 0.7568547480716948, 0.7497907681596873, 0.7568781172077045, 0.7500200530341727, 0.4042841449606073, 0.36738538420847167, 0.32348865267587157, 0.3466444242328387, 0.3217127113549264, 0.043716112840688215, 0.4047659514108336, 0.33863870460958256, 0.3531523357925137, 0.13289372203172367, 0.14659391012982392, 0.1529284003554705, 0.10965716630415678, 0.11969796657557508, 0.12194888631866874, 0.14165601693768748, 0.14540875317675395, 0.3771990510633717, 0.13305388851910793, 0.11428512321934681, 0.13268946621115685, 0.13403989741335265, 0.13610744304457056, 0.12544795562925992, 0.13815541500625372, 0.13605174714721602, 0.11465881249675436, 0.9696231870712813, 0.9829876604084281, 0.972474315612725, 0.9730266855339069, 0.9728574676987479, 0.973387048126148, 0.9780268347519804, 0.9756910843338049, 0.9740268244840345, 0.46576912745095145, 0.42331274700619104, 0.3803350633281102, 0.4028314472125809, 0.38514089269218243, 0.3629932136437044, 0.12191091618322902, 0.4081102961986953, 0.4516793082709212, 0.2207139566173142, 0.6007719148285057, 0.6383973882625305, 0.2013365076999858, 0.7698633727884444, 0.1882152077136452, 0.35960112910640263, 0.1490467780858744, 0.23552932467164434, 0.19028173942757753, 0.17930300488202522, 0.1869686712798323, 0.11389574001009495, 0.17592100617466788, 0.17911692081602992, 0.18964175113429327, 0.17770080048757808, 0.18497842756418936, 0.1967511784738799, 0.10139538747579557, 0.19216357617583613, 0.19503338203841325, 0.22106813065062558, 0.27063042505602086, 0.19442339780822582, 0.18043559941771758, 0.12370528579929052, 9.999999999998899e-05, 0.0294360693893847, 0.06845005547882443, 0.03648898493313246, 9.999999999998899e-05, 9.999999999998899e-05, 0.003168722758247755, 9.999999999998899e-05, 0.003881451058981633, 0.06760163241081774, 0.03276383505744784, 0.05511938086434531, 0.07064802514558721, 0.04878723107211447, 0.07662506857994977, 0.11840044950551687, 0.03781097903800856, 0.05895767099587779, 0.19792954917382222, 0.02701471572861014, 0.07458796168971515, 0.061807581398010014, 0.1065911710925258, 0.0613254269351613, 0.07853786843573185, 0.09289055494990495, 0.05821362692212273, 0.16734853953784823, 0.16558260036983463, 0.18374811739758, 0.03614555644586237, 0.14423135537407528, 0.23125944565224987, 0.07558940419304727, 0.0765748110266612, 0.0535322183805883, 0.48146389344342655, 0.5005357005987426, 0.48552639486967486, 0.4929626032637823, 0.5018577167889751, 0.5214671539782936, 0.5271527612360584, 0.4927125821318299, 0.514799082999037, 0.062406334651725404, 0.09792132772353235, 0.09380294100575504, 0.11902153221217815, 0.08292423541316452, 0.1075131646345917, 0.09807863288641816, 0.15538831798515496, 0.1498005122222199, 0.38702177384265024, 0.28447440713057237, 0.20244168408204466, 0.2065433352774294, 0.2936123306281718, 0.39201736847495106, 0.25592626407013686, 0.19800526541970176, 0.22510229848719987, 0.2520353598845141, 0.4016113508124257, 0.3453853793734043, 0.36645805607927373, 0.40260459328880305, 0.39691030702063146, 0.42407432139374623, 0.4585821070595816, 0.3015014879604596, 0.23260141774270082, 0.18633933560533356, 0.23040826929471891, 0.22607750675888993, 0.33789053021065074, 0.2923663143584203, 0.25464088348172287, 0.26799463816206326, 0.2019934905099584, 0.2075791536434859, 0.19203942871786672, 0.194298805895034, 0.23717839767940663, 0.20754938539509737, 0.193448189713735, 0.1865830274449064, 0.211172055105041, 0.20599303521487422, 0.23514537929062185, 0.46353923731602165, 0.2040022793490106, 0.22762396322983747, 0.23027440795762666, 0.24010157794435727, 0.2026847935325229, 0.22875617737121734, 0.1978091051525831, 0.12874842289345578, 0.18725930810353952, 0.8416169339250894, 0.1950942605788919, 0.19926629948081298, 0.16743603437051502, 0.14188056711584107, 0.16053640512711753, 0.8251443594616529, 0.7840872031781283, 0.21128677484137692, 0.07355071351075582, 0.6612354574382892, 0.1659253910188232, 0.49917067647405355, 0.16518075745068306, 0.1043311110188977, 0.16632179276783932, 0.1941489636276016, 0.18311023626777623, 0.18933037776836126, 0.21060246030904717, 0.17897338036023502, 0.1858200080208382, 0.18445739000723171, 0.20239142964012857, 0.17470417144499606, 0.08355231539638353, 0.10331686316937116, 0.0836562963602786, 0.07563907231259104, 0.08040397667351185, 0.09076680318772301, 0.08387996807581877, 0.07544474296421377, 0.08379093007518423]}, "mutation_prompt": null}
{"id": "0cde42b1-9bc5-4181-aa37-00bf98d6692a", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n                # Merge swarms if global best improvement is stagnating\n                if self.evaluations % (self.budget // 4) == 0:\n                    self.num_swarms = max(1, self.num_swarms - 1)\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                self.inertia = 0.4 + 0.5 * np.random.rand()  # Adjusted randomness range for inertia\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm merging and dynamic inertia adjustment for improved convergence.", "configspace": "", "generation": 58, "fitness": 0.3008710616868271, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.25.", "error": "", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.7621513985483281, 0.7766634182335175, 0.791586275097077, 0.7850662984822497, 0.7923550412226674, 0.8080939854075417, 0.7778877051268102, 0.780050318708878, 0.7977797246839506, 0.4870088260162434, 0.4623866770877624, 0.48695622629275537, 0.4874704069648531, 0.4986175673149431, 0.5236846230185728, 0.39681810660157635, 0.5102473166348411, 0.5423679752362329, 0.47840369011571215, 0.1366038396539705, 0.15663392725866143, 0.11428680557445914, 0.37164841614098454, 0.13617006614801996, 0.11815657037807081, 0.15408356341730922, 0.4280000094194697, 0.13099603147932481, 0.13103518137052816, 0.14018777546576822, 0.1325919923270792, 0.14184557610494863, 0.1133299967403344, 0.13814507476758953, 0.13762162575759318, 0.12358313414989641, 0.9748302682371018, 0.9829500387374382, 0.9741515635548454, 0.9719399482747355, 0.9683690156108156, 0.9583612106211737, 0.9754744247033015, 0.9755325590200759, 0.9744143895701807, 0.5095387923947625, 0.45180158941915616, 0.4802561264847087, 0.5343498039422565, 0.4836736119632522, 0.5336346101238778, 0.1919172722284156, 0.49327877334312975, 0.5234541570718634, 0.794607329509958, 0.6203739641567463, 0.216336712337441, 0.21577271601816483, 0.1989259395389833, 0.26727489568298035, 0.5273681919398824, 0.2273694286000536, 0.7665628050613997, 0.3184207187250382, 0.19363676315612177, 0.2010281132087921, 0.09599023240596694, 0.22913420031137688, 0.2060919294731275, 0.19105501307637995, 0.18945052374940796, 0.20054857446752217, 0.19479157012899084, 0.20336874958357298, 0.19921806931437125, 0.1301982638251351, 0.1278403333270458, 0.22036397188978785, 0.1261014724691336, 0.1280661320531168, 0.1128813537255835, 0.011300662463460509, 9.999999999998899e-05, 9.999999999998899e-05, 0.051595655039647914, 0.00881672773207487, 9.999999999998899e-05, 0.0025679986968760726, 9.999999999998899e-05, 9.999999999998899e-05, 0.07602446116919359, 0.05297182839886094, 0.13117037799459053, 0.07946734055456506, 0.0838391315580933, 0.08036457330841207, 0.08360518607287382, 0.1060708392937253, 0.07510854346094653, 0.040212444568344274, 0.025220666118040524, 0.06429711875841237, 0.1407591978109165, 0.08179185679892143, 0.06484278724273895, 0.08384478887081037, 0.060537970191153034, 0.08611958962783173, 0.2011116230653518, 0.11343826361997567, 0.12964255678433234, 0.12768845209338675, 0.05970266825571957, 0.13007439959660894, 0.15252977872052342, 0.053800080207701995, 0.1516070930121194, 0.5559098414570398, 0.6113174029081846, 0.5176159787464221, 0.5825291697883888, 0.5379392893891184, 0.5245542159120191, 0.5522936106430985, 0.5119476037574915, 0.5354052687260382, 0.07345521188670812, 0.13625709183624435, 0.08225981876444932, 0.08836363830182714, 0.12506976590478225, 0.1213853354784431, 0.1422990580721385, 0.1737496666308005, 0.14809075628023405, 0.19700805545165467, 0.1732842503581955, 0.2209757671772118, 0.22013309580634932, 0.22678076431882455, 0.3734596713437389, 0.1947050205911114, 0.25313047625428986, 0.24728226280761956, 0.41757476431684104, 0.22280759629938007, 0.3345025246464036, 0.44878516135482116, 0.35793049014114153, 0.47370463129781015, 0.4508211373636831, 0.4610363859715022, 0.2803969322310953, 0.25007729197353223, 0.23549319327348628, 0.3166798297690241, 0.41506498135183545, 0.2952076621983337, 0.25212607802321996, 0.2717078240624279, 0.2430818825703408, 0.26992409169075404, 0.21357754154760877, 0.1954018140445689, 0.20067700327397786, 0.2144189291787777, 0.20893140354093476, 0.18745266313557463, 0.19905392009313694, 0.20431619543877322, 0.2345644748517991, 0.19542285427953954, 0.24447793180289368, 0.1935636086924687, 0.6504909700409114, 0.22219445985722863, 0.4852251359553894, 0.28503641814981906, 0.23345741008995202, 0.19430713396717358, 0.13065556344920914, 0.18788036622631377, 0.18683652482384783, 0.16373990074236877, 0.19933306997281552, 0.16733853258355702, 0.17477326141769478, 0.16263351155480543, 0.8683581750657214, 0.591517708505992, 0.2112586699369966, 0.6127772637959079, 0.8051817654151442, 0.16727234766084653, 0.6936889584738335, 0.1653408292216414, 0.10462447211229542, 0.7261883771059607, 0.20618497550131953, 0.19661333991092556, 0.18933715546752494, 0.18498288307554145, 0.1903073031625223, 0.19185982916277877, 0.19769882820797424, 0.18593599444975928, 0.18978363816770216, 0.08407339202933928, 0.08965170520415355, 0.0905259003423351, 0.1078329613139124, 0.10414290989951369, 0.08778016437083569, 0.09269536694022518, 0.0912911293911648, 0.07951218355169642]}, "mutation_prompt": null}
{"id": "95b00309-1e98-4f3f-a09c-73de3c983b3c", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "92a7d853-6d31-4e41-84bc-ba4974fae450", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "46d72003-33b5-4b34-bd56-9e900830c086", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "245eea9c-01b8-4603-9c98-97313be00dbc", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "7cec040e-4dd9-4fbb-bb5b-e38d6558074e", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "0d15e46d-09a7-4b56-b0d1-4e7e1d09942e", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "f9a19fa4-29c3-48b6-910c-e36c4ba2e134", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "1d5cfec6-511b-47c1-8469-457af6304b8f", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                distance_to_global = np.linalg.norm(self.positions[swarm_index] - self.global_best_position, axis=1)\n                self.inertia = 0.5 + 0.2 * np.random.rand() * (1.0 - distance_to_global / 10.0)  # Dynamic inertia\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive dynamic parameters based on performance and distance to global best.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (30,) (30,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (30,) (30,5) ')", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {}, "mutation_prompt": null}
{"id": "eb9a66de-6104-446c-a519-ecb5e8889d8f", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "9e4e0554-5acd-400d-9c5f-bda9b0ff6ee4", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "dfb78a32-d90b-422b-bf02-1792eae84ec1", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "b10e7346-e814-44b0-b3e9-29dd05deb5c0", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "2c8912b9-a7f8-410e-972b-576d34736592", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "7d499936-515f-4f6c-bb2e-e8d3c62a99c5", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "52a9ba35-c0c8-4f72-b43c-61bcf6a1f669", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "5faf264b-5057-4085-9891-c5e2c83ce877", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "30abe5f7-110c-44f1-94ef-14c740b3b632", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Adjustments for exploration-exploitation and periodic reinitialization\n                self.inertia = 0.5 + 0.2 * np.random.rand()  # Adjusted inertia range\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                if self.evaluations % (0.2 * self.budget) == 0:  # Periodic reinitialization\n                    self.positions[swarm_index] = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with periodic swarm reinitialization and adjusted inertia for improved exploration.", "configspace": "", "generation": 75, "fitness": 0.3030775394641407, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.25.", "error": "", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8135023182881755, 0.8091072850716655, 0.8043121608864137, 0.795432521273419, 0.8096109411422243, 0.8246720388936204, 0.8193681310217114, 0.8043464508195287, 0.8062264632651814, 0.567642907701426, 0.36422601243422104, 0.5366762409935246, 0.5358763424403881, 0.5543819197418671, 0.46640174481171803, 0.5073220675789429, 0.17238585046599897, 0.5439413559841051, 0.15885075507389324, 0.15426964193681691, 0.14784397967358287, 0.11902299256396032, 0.4382902376819946, 0.17367767355294395, 0.1430034932529839, 0.17498897888876286, 0.6009689142947572, 0.3476008805230407, 0.11898524167524427, 0.14067331767567592, 0.11583388817555318, 0.12624533525214132, 0.14094580156487135, 0.16952647000776289, 0.10980688792392179, 0.15464107491417722, 0.9747954564191847, 0.9829500387374382, 0.9742807196108962, 0.9719373970145391, 0.9678647993108512, 0.9583841865908103, 0.975462146200542, 0.9752754857247203, 0.969003766530777, 0.5743338043686048, 0.5673757776749864, 0.4672327391894622, 0.5771914088966013, 0.6277661224993409, 0.24861023266688387, 0.08647330008869669, 0.5783201972330236, 0.5424861194552033, 0.2601707319626464, 0.37588598105590243, 0.25201913766655526, 0.21657503282350177, 0.808025635342294, 0.21136901951802378, 0.17187632872936265, 0.23123240488857655, 0.23334217232133592, 0.09982430685069199, 0.20370377475553747, 0.1285879845010519, 0.1808541332530469, 0.22462703331620204, 0.20004227243264272, 0.18941683669030895, 0.2033851839354559, 0.20717984662877165, 0.1498577732343851, 0.20540609149615607, 0.2077203638329871, 0.22998338763048476, 0.20061192215177814, 0.22595243971893708, 0.13007339017197483, 0.1261279937526386, 0.16269399296203024, 9.999999999998899e-05, 9.999999999998899e-05, 0.003148298169763586, 0.037093935516201104, 9.999999999998899e-05, 9.999999999998899e-05, 0.04176936832666778, 9.999999999998899e-05, 0.00010587802040396, 0.08178847545283263, 0.03691498619573286, 0.10636892421586475, 0.09726008271129682, 0.10860627510943233, 0.05113158704180609, 0.16881034527550454, 0.09457602686602129, 0.1442004903068448, 0.043848630848044357, 0.03159018985931694, 0.1567183233913897, 0.10055313288888224, 0.08934530779239935, 0.06800604261178922, 0.08707318026910815, 0.06278385560119937, 0.08783767466595582, 0.17590000895907776, 0.05676920357044579, 0.1672042462784732, 0.0816746198917564, 0.1777965042114461, 0.19285743660318955, 0.1730271061553551, 0.14875208420442265, 0.12245791159961028, 0.5036339025831617, 0.5375270706574142, 0.5114329683356574, 0.5369373552127498, 0.539105789772673, 0.5779358186611799, 0.5396775663366261, 0.5487835003729142, 0.5715402018501679, 0.08304806912951568, 0.09547232064665334, 0.07745807954948558, 0.11871330990477491, 0.12400287307237778, 0.09791253722836513, 0.07138099284679189, 0.11510117135139153, 0.0902014676433961, 0.26824489379955296, 0.3218663430197053, 0.18277673533964223, 0.23752481313136053, 0.2152750343919132, 0.47288787050123626, 0.2236813648391509, 0.1648553118200522, 0.3263847155689884, 0.32609258463297097, 0.3709202082343369, 0.23865628738393185, 0.3899771892458863, 0.4459978251368346, 0.2711082539774623, 0.3886802601496613, 0.3249659681393412, 0.42822545895787223, 0.22202258886695525, 0.16746605626277034, 0.3227974492488356, 0.3185724076313836, 0.35152745045108, 0.25994859554753535, 0.27519809901128656, 0.4350568582719616, 0.22770682474121673, 0.1981429820842201, 0.17613817136094967, 0.22629466829587086, 0.20435756471940902, 0.18961145354540498, 0.24219749961356585, 0.2294865976374295, 0.20957731403473467, 0.2560603347687279, 0.44582377616991853, 0.2458633073297064, 0.6614052543000768, 0.5996401114030663, 0.19638011047076087, 0.2074199812616877, 0.7103099354420895, 0.19784903606211168, 0.20439639516079522, 0.13083617793890756, 0.18790853306479716, 0.21597541721080293, 0.1638314830687887, 0.19983917939946982, 0.1674984102600272, 0.140298866979231, 0.1622252556546031, 0.874780036510967, 0.6973534628166433, 0.21137371074730582, 0.8257133092450704, 0.7376796582705722, 0.16750753328306878, 0.61349716876987, 0.16537649434659074, 0.10462542171414824, 0.7169916412169868, 0.19401055265429223, 0.19571399241273435, 0.17716590631292506, 0.1835322419036972, 0.19062970475981567, 0.1827643047984132, 0.19334177867470748, 0.2217940935765521, 0.18189819468305146, 0.0968336769800675, 0.10052198909291565, 0.0991230386741847, 0.09693295781330913, 0.07621205410819187, 0.08827895058209811, 0.09028324502690999, 0.07844857499117375, 0.0913472497004616]}, "mutation_prompt": null}
{"id": "ca1266a8-a187-4fe5-9c35-2c112df92137", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm size adjustment and dynamic cognitive-social balance based on current performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8246711737977285, 0.8234074875542493, 0.8174235553339331, 0.8298188403886974, 0.8284269336624337, 0.8483327916731217, 0.8298025424749574, 0.8218208197361639, 0.8374756275718939, 0.5353211293867012, 0.6243527291088733, 0.48716323692653274, 0.5812179437968443, 0.6091401725716581, 0.5526711016930448, 0.6096660835473855, 0.6028266248682578, 0.605155813964738, 0.14781124562733983, 0.14908275359331635, 0.1434958111068334, 0.11936952441349735, 0.15215515565509208, 0.13643238357130794, 0.13621130018696403, 0.176399972943855, 0.4402912515800017, 0.13823829712305413, 0.1339795748016821, 0.1163219636496522, 0.12236160563727194, 0.12802846568457094, 0.15641814953379307, 0.5530119875652295, 0.13074310541242196, 0.1493782999087907, 0.9747319909517408, 0.9761046341516729, 0.9741088905120956, 0.9705379309844855, 0.9677791587071224, 0.9519415819990741, 0.9754238774229625, 0.9746667517179245, 0.9676382830056991, 0.5798218364209409, 0.6186227708015464, 0.6161201645870362, 0.6338116418200568, 0.680473360016628, 0.6077699089115195, 0.08669292544228224, 0.6244643940794161, 0.6006796830061158, 0.22787928057558215, 0.7473416314435026, 0.8374832710547617, 0.21920778924524376, 0.19092753884212477, 0.20163523892470303, 0.15067996782656612, 0.6582996938417665, 0.2306475233057128, 0.13418272183299418, 0.23264305053538292, 0.20759759774607955, 0.16882975551515333, 0.2083279278980279, 0.12812269698491996, 0.22948367962413918, 0.2124935736118887, 0.21862237387931194, 0.17686717753736425, 0.12355135634525027, 0.22725268827121747, 0.2616059610163738, 0.1302430282434408, 0.12875948805734339, 0.13251489320036014, 0.1306606134976508, 0.11187853250879454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050432886041957725, 9.999999999998899e-05, 9.999999999998899e-05, 0.19105739343418426, 9.999999999998899e-05, 0.003403371389037013, 0.07125241795160442, 0.04246694756899305, 0.08742949431289493, 0.1170581834099721, 0.03455754663206112, 0.0455117831696813, 0.08202772069007191, 0.11192595605985278, 0.05110853433417328, 0.044196074156780396, 0.03306206843423365, 0.1608783508728362, 0.08512337244552637, 0.10171239289031786, 0.07060634547437128, 0.09438115566397842, 0.06710600633344166, 0.08904040677106584, 0.2068360270142391, 0.14729623130631786, 0.12540960407229884, 0.1421338726843947, 0.17294372293925153, 0.09457770835179158, 0.21455996414187062, 0.16082218550269356, 0.22958278067276128, 0.5501664205832437, 0.5652952259453499, 0.5845703249459333, 0.518476580603359, 0.5692254842876352, 0.5600708784770358, 0.5797612850324125, 0.572838877289112, 0.5816301027724311, 0.13310222598355415, 0.08644987894434852, 0.0902886516049346, 0.1252802466091062, 0.1236387621196996, 0.1269592746762117, 0.1259558812829098, 0.1354615659938443, 0.13877988942435326, 0.2259838901827741, 0.23231827027635998, 0.2179644102933216, 0.1964248685627673, 0.21841055300441992, 0.2982419622622833, 0.1940093763807963, 0.27005141160563007, 0.33441885242728153, 0.3172859424911536, 0.2482845811997063, 0.47997444428715363, 0.5578885213306137, 0.3780875268599224, 0.4850209000039525, 0.3955262326118618, 0.5588365982569484, 0.4494089695300919, 0.22888690834693415, 0.26172353261248626, 0.3091807835563912, 0.2831799385062771, 0.35775714770250766, 0.27039460689343664, 0.2779365701365104, 0.30017269089907606, 0.149130898470628, 0.18791246271745676, 0.2254691155395402, 0.20452133771575354, 0.2563208244494112, 0.19790336157080624, 0.20395923851403075, 0.22471866732998458, 0.2503100897605206, 0.22294478806101137, 0.6560814055331404, 0.7299788718861845, 0.23665045252061312, 0.21397200174251152, 0.21274823995107495, 0.23910637598080742, 0.2370316570091885, 0.19745294745077946, 0.20869199695077334, 0.1302258776424804, 0.18796588598955644, 0.32515375951592673, 0.11893020148201017, 0.20001433128454038, 0.16727389084553757, 0.2609293534711713, 0.1637151890140054, 0.8888499743915863, 0.6960293913708115, 0.21172077783362886, 0.6331277157746347, 0.8398712446201343, 0.16780620866191143, 0.5967326207266266, 0.16627287126701684, 0.10467137629374845, 0.679523789329455, 0.19055182060708098, 0.23908490046104347, 0.19289506984015836, 0.18788202605546134, 0.1963504295189461, 0.21021354550664872, 0.208934890797969, 0.19974431756699884, 0.20609655818502237, 0.10730142398272113, 0.09500972279977593, 0.10036767496527177, 0.09097477595145698, 0.08884230161803175, 0.09334545175714737, 0.10276382797178574, 0.10705923649291238, 0.09705350626634024]}, "mutation_prompt": null}
{"id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 77, "fitness": 0.31847171880914926, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "3ce74181-c916-4627-83fa-924e59d1e3f9", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "d79ce891-7748-4087-a04c-4afe781bb9ba", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = self.inertia * self.velocities[swarm_index] + cognitive_component + social_component\n\n                # Adaptive inertia adjustment based on diversity\n                mean_position = self.positions[swarm_index].mean(axis=0)\n                diversity = np.mean(np.linalg.norm(self.positions[swarm_index] - mean_position, axis=1))\n                self.inertia = 0.5 + 0.2 * np.tanh(diversity)\n\n                if self.evaluations > 0.5 * self.budget:\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive inertia and swarm diversity maintenance for improved exploration-exploitation balance and convergence.", "configspace": "", "generation": 78, "fitness": 0.29127954803264156, "feedback": "The algorithm AMSP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8076369515846248, 0.7966942167567902, 0.7913632383184562, 0.8122024351775875, 0.8085574057756779, 0.7868204781678902, 0.7900491066493001, 0.7871120492406407, 0.8026661179013806, 0.5094749362374562, 0.4810735598140996, 0.4852210560644198, 0.4857597783781652, 0.5145606876755795, 0.46571543534572835, 0.041734371074450216, 0.05110886848033702, 0.04790901859410901, 0.15869093866652562, 0.15402794790231078, 0.1358953675362804, 0.1555357596926693, 0.09053917583158377, 0.12883563234038153, 0.16637363720524279, 0.16229269487677067, 0.1391974676374006, 0.1021519279556764, 0.11165193041345611, 0.13445282544314052, 0.12262055242428505, 0.10839154608557255, 0.1329499070396165, 0.13828620451522766, 0.1334481103399876, 0.13168097511481902, 0.9813996191267299, 0.9811980064854736, 0.9743295264539674, 0.9740768871661346, 0.9675791666646569, 0.9665340942959878, 0.978309426187166, 0.9745666739054378, 0.9747547650382814, 0.5262832156487749, 0.5565534199591797, 0.48388728645581747, 0.5602659378889299, 0.5711730285618246, 0.2726948340137506, 0.08397367465120609, 0.5072721541706262, 0.5719708063983809, 0.6442558657280608, 0.2811758459069462, 0.3619904026629648, 0.1985362564730011, 0.20116871265494873, 0.18452445421302743, 0.1692545703666687, 0.508400903335583, 0.7951668093281133, 0.10972484062856624, 0.1901243641177528, 0.18388590469076505, 0.09487115877051544, 0.1096852626988779, 0.1853510337418378, 0.30510674710631525, 0.14279310423968128, 0.1837661849498049, 0.15082682883762666, 0.1079081578522133, 0.19705535470442603, 0.17128872085456004, 0.21616749409412916, 0.2644348308571489, 0.2434698623670517, 0.21891628794676998, 0.36124541412142364, 0.08455820812336312, 9.999999999998899e-05, 9.999999999998899e-05, 0.048274449235601646, 9.999999999998899e-05, 0.030579530274169375, 0.019397709404200936, 0.0030998513078751566, 9.999999999998899e-05, 0.09321478999625854, 0.05100632995985366, 0.12845568006094288, 0.07271987893483578, 0.06561094038109228, 0.056424304577703865, 0.06308151646615134, 0.056127370203337024, 0.08437981514033577, 0.04179754719702122, 0.03195356010656347, 0.10425404686798878, 0.09802479002947306, 0.0650857844854007, 0.06713671442948577, 0.1587679104878218, 0.06743180147951044, 0.08298629158479365, 0.07770483610222068, 0.05055351861096846, 0.0895184476553228, 0.08498430346817476, 0.13490376172082974, 0.18702584969947322, 0.05347988224089406, 0.1267985130188226, 0.19211582815730488, 0.499457393998917, 0.5213010011466179, 0.5146685038413362, 0.5027335369545172, 0.5138297574218318, 0.5107040817125317, 0.5357729265853273, 0.5613821479525418, 0.5434911180144468, 0.11846137680777247, 0.12781160995933405, 0.07964050927442845, 0.10731254988047711, 0.10502505091738168, 0.10558845782650583, 0.1381141618736399, 0.14556797253939224, 0.13391488213959568, 0.24578977941178493, 0.24552868559345686, 0.21158189539852912, 0.22902271510773975, 0.31568973488417584, 0.2652204909943806, 0.23147952875608313, 0.17727016976115684, 0.2750587587442609, 0.38181747836880564, 0.2214629840884047, 0.5273049416106301, 0.3851229986670264, 0.3850446247058128, 0.4227952392421719, 0.49385263664835755, 0.3762997775130261, 0.42529735304139527, 0.19022651452957096, 0.20416779712031707, 0.237808634125947, 0.1706066100017406, 0.3578612309624907, 0.3117057522477249, 0.32014619496370456, 0.3036695383433309, 0.19647251917331343, 0.2203246018381274, 0.20075781974635543, 0.20285435871553903, 0.20830759411468847, 0.24687838531976414, 0.19565738542821753, 0.2294792856465142, 0.21607119894797366, 0.23934240756041825, 0.44280580773293154, 0.5997591656222595, 0.2466550382210848, 0.3345425060494318, 0.24154216150650387, 0.20485259834760705, 0.5108904171052623, 0.2323638835267836, 0.19597002396052698, 0.12918991669100144, 0.18674988214611898, 0.8481580518883577, 0.19273558004668523, 0.19890479540345118, 0.7954790046684744, 0.8259173110160385, 0.1625490368735356, 0.20862052533958753, 0.6274383970086959, 0.21067116202808756, 0.1913752263183034, 0.5933832744718666, 0.44419380667993247, 0.16831617192117687, 0.1661845665349807, 0.10411523492590491, 0.5747128106430544, 0.1990325678390058, 0.1907156446776881, 0.18529979999245716, 0.2033959538598875, 0.18587537291919787, 0.19163643514693585, 0.17255663598423487, 0.19392609441869357, 0.19782671017311093, 0.09599036408336892, 0.07948150646520769, 0.0924502611855853, 0.09011235293076114, 0.09281718725557497, 0.08977725261592129, 0.08882115065156448, 0.07573415236580328, 0.08764794565186307]}, "mutation_prompt": null}
{"id": "b55f2fb4-d02f-422a-9372-55108d51e814", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "a3ba5df8-2598-4e61-af7a-0e58a671f1bf", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "d14cd694-449a-446b-9074-624f89dbf925", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "440ba10a-f937-4e24-ab24-56db70ccf5c4", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "86f08bb3-7d3e-498a-a97f-d19dc2790a2b", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "9680fa68-a935-4726-a0de-c466e3dea2e8", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "053db3bb-9173-4097-af28-2f718bfb5b8c", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "e02e6e99-0ad1-4acd-804c-096dc1ddac29", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "f0485db4-7c70-4db1-a27b-0d71f8665a3a", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "35f34031-0800-4e43-988e-d9f3bf173e9d", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "2a5d389a-66cf-42b6-bbaa-e2da06b41c69", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "b4398e2d-367a-4258-a86c-e24264d6bb84", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "314d29ce-3d9f-4169-b47f-454df6fac29f", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "f4b3b23b-d891-4e45-bb00-13f7a22d33c1", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "02da3ef7-be58-44dc-8f5d-b6fad296a60f", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "c22f3eb8-eea1-41b2-b9be-f799c0b46cc4", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "eaf22ccb-3e96-4538-9777-3e7f86157fdf", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                num_particles_swarm = int(self.num_particles * (0.5 + np.random.rand() * 0.5))  # Adaptive swarm size\n                r1, r2 = np.random.rand(2, num_particles_swarm, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.3  # Slightly reduced for better exploitation\n                    self.social = 1.3  # Slightly increased for enhanced social learning\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with adaptive swarm sizes and improved balancing of exploration and exploitation phases.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (29,5) (30,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (29,5) (30,5) ')", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {}, "mutation_prompt": null}
{"id": "2bc7c8e2-4503-4f53-9769-4a2914f5d2f9", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "31e5cf0a-347f-4950-b378-10f2871c7fe8", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "a9768d2f-fa98-4cb5-ac4b-254c99c093f7", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
{"id": "43a6321f-b340-4c60-aebb-d0ab2202be2f", "solution": "import numpy as np\n\nclass AMSP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 3\n        self.inertia = 0.7\n        self.cognitive = 1.4\n        self.social = 1.4\n        self.positions = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) \n                          for _ in range(self.num_swarms)]\n        self.velocities = [np.zeros((self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        self.local_best_positions = [pos.copy() for pos in self.positions]\n        self.local_best_scores = [np.full(self.num_particles, np.inf) for _ in range(self.num_swarms)]\n        self.global_best_score = np.inf\n        self.global_best_position = np.zeros(self.dim)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    score = func(self.positions[swarm_index][i])\n                    self.evaluations += 1\n\n                    if score < self.local_best_scores[swarm_index][i]:\n                        self.local_best_scores[swarm_index][i] = score\n                        self.local_best_positions[swarm_index][i] = self.positions[swarm_index][i].copy()\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[swarm_index][i].copy()\n\n            # Implement stochastic migration of particles between swarms\n            if np.random.rand() < 0.1:\n                for _ in range(self.num_particles // 10):\n                    a, b = np.random.choice(self.num_swarms, 2, replace=False)\n                    particle_idx = np.random.randint(self.num_particles)\n                    self.positions[a][particle_idx], self.positions[b][particle_idx] = self.positions[b][particle_idx], self.positions[a][particle_idx]\n\n            for swarm_index in range(self.num_swarms):\n                r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n                cognitive_component = self.cognitive * r1 * (self.local_best_positions[swarm_index] - self.positions[swarm_index])\n                social_component = self.social * r2 * (self.global_best_position - self.positions[swarm_index])\n                self.velocities[swarm_index] = (self.inertia * self.velocities[swarm_index] + cognitive_component + social_component)\n\n                # Random inertia adjustment for exploration-exploitation balance\n                self.inertia = 0.4 + 0.3 * np.random.rand()\n                if self.evaluations > 0.5 * self.budget:  # Adjust cognitive-social balance dynamically\n                    self.cognitive = 1.5\n                    self.social = 1.2\n                self.positions[swarm_index] += self.velocities[swarm_index]\n                self.positions[swarm_index] = np.clip(self.positions[swarm_index], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AMSP", "description": "Enhanced AMSP with stochastic migration between swarms for increased exploration and adaptive dynamic parameter adjustment.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e67a1e-8643-44d0-bf76-e54e004662ea", "metadata": {"aucs": [0.8317545548325939, 0.8330982647794652, 0.8331225766937408, 0.8402805395197934, 0.8446372293206418, 0.8389993917737105, 0.8273150999860104, 0.8348807305406387, 0.8351544608024246, 0.5732141780068768, 0.5401344626807535, 0.6433820282989395, 0.5773925194191784, 0.5280607880288861, 0.4917294184705572, 0.47079474283467493, 0.6197710537389765, 0.5729411884390891, 0.12222235594554842, 0.15803062532241963, 0.1809476075070494, 0.1315058185561525, 0.114169308744133, 0.14582598203256225, 0.11116614585061457, 0.17299390443504659, 0.5422862117615568, 0.1263233406731501, 0.1430064640514931, 0.11544435468284786, 0.11213620304222005, 0.10854661315111025, 0.1577700335734208, 0.14864394398250091, 0.12072883455790928, 0.08852574916273603, 0.9602398153706049, 0.9830895355143452, 0.9687523398281731, 0.9589684353687766, 0.9518727044953322, 0.9747023713300689, 0.9760519880552954, 0.9784473784870806, 0.9746756686740669, 0.6116202160272016, 0.6248844286643913, 0.34756728788933133, 0.5644327119821083, 0.622744256108406, 0.5963884276974141, 0.5541839134027475, 0.5698685605480476, 0.5997194974876106, 0.22700141379631888, 0.7823110374940087, 0.38801636732586176, 0.1939285353733441, 0.8587106985081381, 0.19362407535389337, 0.23067057255461842, 0.8001871138745614, 0.37985296955411074, 0.19248225564014243, 0.24348982150678122, 0.2090481354006435, 0.10286728449761706, 0.1246122550808183, 0.21312394147535496, 0.20463644740056575, 0.16521260945753402, 0.21624364621429792, 0.23445799747106377, 0.12732596095048443, 0.2097227592836437, 0.2351317751060149, 0.18030762492905528, 0.3152065918185123, 0.22298232205133994, 0.22919623240744635, 0.11941077723175053, 9.999999999998899e-05, 9.999999999998899e-05, 0.17197677815011192, 0.0050801599367105155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08646126989880143, 0.03882896716705142, 0.09918137048036191, 0.08605883123065472, 0.06799359052948406, 0.04876435090185183, 0.1063852898546429, 0.044437745370135784, 0.05286783174228604, 0.04374925300001198, 0.08543281492723198, 0.11170813427820214, 0.09052159804290405, 0.15783979095259038, 0.0734555362974143, 0.09088033155017661, 0.14906683966972034, 0.09267845496927896, 0.2737439709119972, 0.0324276675471421, 0.1284402850714077, 0.10278417425904174, 0.17360726422722217, 0.08544301011679578, 0.14000235261789462, 0.11763342762030637, 0.09698537120497619, 0.5161256318703205, 0.5142289646071405, 0.541260117629497, 0.525592074716196, 0.5518965342816177, 0.5089324524452088, 0.5841678507559587, 0.567496957063402, 0.5264096003864589, 0.09079694851085263, 0.1437909252308911, 0.10503715046339734, 0.11612539419808765, 0.11417510392538532, 0.09313674713016384, 0.0825178742276399, 0.099119136963151, 0.11601628595936908, 0.17267249285462416, 0.24258923430509605, 0.19947003955355735, 0.2003410894998856, 0.24144840673409995, 0.3944981977175749, 0.22528050775029584, 0.2650018260125516, 0.3339585488337803, 0.4562638348221234, 0.4577958749568629, 0.4145999092292909, 0.3823292204807567, 0.5342706686130714, 0.5285694726912024, 0.36885849381347124, 0.5943710721515532, 0.3183320903623068, 0.30871199719216813, 0.0984044992376314, 0.2740151778436193, 0.24745027698810118, 0.31045955661415714, 0.2795341661070653, 0.28769422981860193, 0.25101738976701826, 0.15284066011069064, 0.21425503740319873, 0.23164192651138926, 0.24317751665465326, 0.2033202697512988, 0.19094820154798064, 0.2167499522287769, 0.21097499810613185, 0.2675552518119718, 0.2083514639099563, 0.20102860337777773, 0.1911285439322934, 0.22194229110903918, 0.705027739523457, 0.21550925590959824, 0.22452880963221156, 0.19380331852420019, 0.2070363977954246, 0.20658610735954075, 0.12960611925552235, 0.18761418095542726, 0.18718163836246215, 0.16498946810829096, 0.20064133778690074, 0.16748151406063594, 0.8790848931168949, 0.16332941088171393, 0.8923858115444839, 0.6676538306150179, 0.4834681872003306, 0.6147777702743594, 0.8136115563765846, 0.7345600034443582, 0.5419398700786607, 0.16830654951381563, 0.10461633459158615, 0.7788655418863605, 0.17775033943447582, 0.17921353506835458, 0.2214771788630061, 0.17672684742572908, 0.2197226266004274, 0.18612455335582678, 0.19746323259993048, 0.1867996782434902, 0.2482793799626687, 0.10264184581043079, 0.09678544507318543, 0.06972535383165668, 0.08700555818215983, 0.097124709645807, 0.09478693986594766, 0.08719699674549408, 0.09424962348014576, 0.08548908460455096]}, "mutation_prompt": null}
