{"id": "f3c52a00-92e6-474a-875d-e6649cd4bf05", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand()\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Adaptive Differential Evolution with Local Search Boosting (ADE-LSB) combines differential evolution with adaptive strategy selection and local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.20830812617590239, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.5778007055925349, 0.5671640967786673, 0.5680092706093101, 0.6157247750933103, 0.5867702347919976, 0.5949197784895696, 0.5435193797823525, 0.5944158079497355, 0.5958383428887812, 0.27434894779576824, 0.28140289356254, 0.2793526454699885, 0.29268702605453534, 0.30721497312027, 0.28653422897181324, 0.2988382365509711, 0.29473569916100983, 0.3083804690566694, 0.1351709079165121, 0.13566558765136727, 0.1328697009145453, 0.1229050362077827, 0.1469658445184968, 0.11553751192841277, 0.13573009444088546, 0.1345466138927226, 0.12213282862067809, 0.10642654342930513, 0.10382424084847552, 0.12610629587219213, 0.10948691037663705, 0.11083121598307422, 0.10996486834798858, 0.11073805954452276, 0.10151557495290053, 0.10607808778367434, 0.9215385047094589, 0.9179075494908319, 0.9457620450356642, 0.9687808772667424, 0.9295444988269952, 0.9514454899375729, 0.9464907007189876, 0.9252243650584958, 0.9425139308301559, 0.1874746327882637, 0.18794608594322737, 0.1919649105012594, 0.19791126411226556, 0.20582610779286914, 0.2133439322327495, 0.19866435986899855, 0.20124289188690125, 0.1904116905580543, 0.2430411744350226, 0.2772940166853942, 0.20454495546489415, 0.24781830100451097, 0.1953276270266261, 0.25318947524281266, 0.24233332169388122, 0.2166568075093943, 0.24260700267305735, 0.14032737577286136, 0.1192269808505011, 0.11449257689140946, 0.13043074645869146, 0.1375162995367708, 0.1455533117150759, 0.12058821079977311, 0.1301450533560191, 0.1407276317917735, 0.09851799058376887, 0.08675020113545429, 0.09956824938292974, 0.1230888811050127, 0.1306597298384541, 0.11697968938164305, 0.11751778710207805, 0.11512703350021658, 0.11751286727686583, 0.006519030503600698, 0.00918439420880346, 9.999999999998899e-05, 9.999999999998899e-05, 0.002667362031177234, 0.002254640395292551, 0.0024112161742028126, 0.005327064760438982, 0.005126589069886167, 0.09314809223530063, 0.09063846671681874, 0.11238574450488847, 0.12194059234188648, 0.09523442418288963, 0.10428612986742336, 0.14422890163736013, 0.14606650741995342, 0.09717558109265934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001270750972462542, 0.002466140895032387, 0.0041649359531096275, 0.08093114078012187, 0.07029777140244475, 0.08676645507787673, 0.08010022518853277, 0.08950831227749734, 0.08584192655509904, 0.08675683049261096, 0.09294045589165467, 0.09829760514823771, 0.4232425765889699, 0.40606763712490546, 0.4049622411034858, 0.39957705436317115, 0.41083849084499824, 0.4140916294269431, 0.42558996150796646, 0.4110725794849974, 0.4269257075671262, 0.077232330059957, 0.0886560158829991, 0.08686002851886587, 0.08187956128007623, 0.08131730857280295, 0.08421802620016772, 0.084195246195501, 0.08825968692317743, 0.07302149395764523, 0.1347644066752266, 0.1335941728305441, 0.13039443505253656, 0.14716154919999302, 0.13003249725105448, 0.1465094814824035, 0.20715399259554357, 0.15802481145647074, 0.138990928777742, 0.22173489567645588, 0.21731451221869802, 0.23897905110801532, 0.2207790006223792, 0.22876615101718178, 0.23736800636798072, 0.2623267727586934, 0.2596432007916789, 0.24784973924101517, 0.1689383802332879, 0.1621048174261519, 0.1667449117312244, 0.16474311372316186, 0.15043321155121525, 0.15425811325004002, 0.1844139695445951, 0.1800350333654155, 0.19222936392735623, 0.184438008440733, 0.17647306985812594, 0.19208112321239135, 0.18810075242202207, 0.16329307160764273, 0.18542969772009232, 0.17018428260646146, 0.21652908635224122, 0.1911843366780317, 0.18057019468328872, 0.18072395704700228, 0.19324528728711776, 0.18284572978312252, 0.19769996811200907, 0.18781470454774662, 0.1986121054533665, 0.18287950440416556, 0.19325545915808928, 0.190239141151879, 0.15413788776763782, 0.22875854257484984, 0.18013496772715898, 0.19794182084319756, 0.22512710755646925, 0.19135298829413872, 0.15323047023065373, 0.14316181700709785, 0.1580835010453293, 0.1647488505575786, 0.18472004168578426, 0.21113267998259355, 0.1753468228042977, 0.22812874683934548, 0.1774294706372277, 0.2443735940520294, 0.20360017319034895, 0.18786506422979954, 0.22444598439163632, 0.19260447864943242, 0.21376435046770026, 0.18129431420025954, 0.18291441793441887, 0.1769057991151527, 0.188264891848423, 0.17733814492911204, 0.07078333974980067, 0.0748414282770955, 0.06434856346871931, 0.07368420626395478, 0.0757423557848882, 0.0713600775768255, 0.07344436299620116, 0.0852678720537644, 0.06495268475499649]}, "mutation_prompt": null}
{"id": "4c437c81-bb44-4398-8a6c-fb60e3e38d5c", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand()\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Adaptive Differential Evolution with Local Search Boosting (ADE-LSB) combines differential evolution with adaptive strategy selection and local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c52a00-92e6-474a-875d-e6649cd4bf05", "metadata": {"aucs": [0.5778007055925349, 0.5671640967786673, 0.5680092706093101, 0.6157247750933103, 0.5867702347919976, 0.5949197784895696, 0.5435193797823525, 0.5944158079497355, 0.5958383428887812, 0.27434894779576824, 0.28140289356254, 0.2793526454699885, 0.29268702605453534, 0.30721497312027, 0.28653422897181324, 0.2988382365509711, 0.29473569916100983, 0.3083804690566694, 0.1351709079165121, 0.13566558765136727, 0.1328697009145453, 0.1229050362077827, 0.1469658445184968, 0.11553751192841277, 0.13573009444088546, 0.1345466138927226, 0.12213282862067809, 0.10642654342930513, 0.10382424084847552, 0.12610629587219213, 0.10948691037663705, 0.11083121598307422, 0.10996486834798858, 0.11073805954452276, 0.10151557495290053, 0.10607808778367434, 0.9215385047094589, 0.9179075494908319, 0.9457620450356642, 0.9687808772667424, 0.9295444988269952, 0.9514454899375729, 0.9464907007189876, 0.9252243650584958, 0.9425139308301559, 0.1874746327882637, 0.18794608594322737, 0.1919649105012594, 0.19791126411226556, 0.20582610779286914, 0.2133439322327495, 0.19866435986899855, 0.20124289188690125, 0.1904116905580543, 0.2430411744350226, 0.2772940166853942, 0.20454495546489415, 0.24781830100451097, 0.1953276270266261, 0.25318947524281266, 0.24233332169388122, 0.2166568075093943, 0.24260700267305735, 0.14032737577286136, 0.1192269808505011, 0.11449257689140946, 0.13043074645869146, 0.1375162995367708, 0.1455533117150759, 0.12058821079977311, 0.1301450533560191, 0.1407276317917735, 0.09851799058376887, 0.08675020113545429, 0.09956824938292974, 0.1230888811050127, 0.1306597298384541, 0.11697968938164305, 0.11751778710207805, 0.11512703350021658, 0.11751286727686583, 0.006519030503600698, 0.00918439420880346, 9.999999999998899e-05, 9.999999999998899e-05, 0.002667362031177234, 0.002254640395292551, 0.0024112161742028126, 0.005327064760438982, 0.005126589069886167, 0.09314809223530063, 0.09063846671681874, 0.11238574450488847, 0.12194059234188648, 0.09523442418288963, 0.10428612986742336, 0.14422890163736013, 0.14606650741995342, 0.09717558109265934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001270750972462542, 0.002466140895032387, 0.0041649359531096275, 0.08093114078012187, 0.07029777140244475, 0.08676645507787673, 0.08010022518853277, 0.08950831227749734, 0.08584192655509904, 0.08675683049261096, 0.09294045589165467, 0.09829760514823771, 0.4232425765889699, 0.40606763712490546, 0.4049622411034858, 0.39957705436317115, 0.41083849084499824, 0.4140916294269431, 0.42558996150796646, 0.4110725794849974, 0.4269257075671262, 0.077232330059957, 0.0886560158829991, 0.08686002851886587, 0.08187956128007623, 0.08131730857280295, 0.08421802620016772, 0.084195246195501, 0.08825968692317743, 0.07302149395764523, 0.1347644066752266, 0.1335941728305441, 0.13039443505253656, 0.14716154919999302, 0.13003249725105448, 0.1465094814824035, 0.20715399259554357, 0.15802481145647074, 0.138990928777742, 0.22173489567645588, 0.21731451221869802, 0.23897905110801532, 0.2207790006223792, 0.22876615101718178, 0.23736800636798072, 0.2623267727586934, 0.2596432007916789, 0.24784973924101517, 0.1689383802332879, 0.1621048174261519, 0.1667449117312244, 0.16474311372316186, 0.15043321155121525, 0.15425811325004002, 0.1844139695445951, 0.1800350333654155, 0.19222936392735623, 0.184438008440733, 0.17647306985812594, 0.19208112321239135, 0.18810075242202207, 0.16329307160764273, 0.18542969772009232, 0.17018428260646146, 0.21652908635224122, 0.1911843366780317, 0.18057019468328872, 0.18072395704700228, 0.19324528728711776, 0.18284572978312252, 0.19769996811200907, 0.18781470454774662, 0.1986121054533665, 0.18287950440416556, 0.19325545915808928, 0.190239141151879, 0.15413788776763782, 0.22875854257484984, 0.18013496772715898, 0.19794182084319756, 0.22512710755646925, 0.19135298829413872, 0.15323047023065373, 0.14316181700709785, 0.1580835010453293, 0.1647488505575786, 0.18472004168578426, 0.21113267998259355, 0.1753468228042977, 0.22812874683934548, 0.1774294706372277, 0.2443735940520294, 0.20360017319034895, 0.18786506422979954, 0.22444598439163632, 0.19260447864943242, 0.21376435046770026, 0.18129431420025954, 0.18291441793441887, 0.1769057991151527, 0.188264891848423, 0.17733814492911204, 0.07078333974980067, 0.0748414282770955, 0.06434856346871931, 0.07368420626395478, 0.0757423557848882, 0.0713600775768255, 0.07344436299620116, 0.0852678720537644, 0.06495268475499649]}, "mutation_prompt": null}
{"id": "48f62e10-13e2-4058-8937-536b3329d043", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand()\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Adaptive Differential Evolution with Local Search Boosting (ADE-LSB) combines differential evolution with adaptive strategy selection and local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c52a00-92e6-474a-875d-e6649cd4bf05", "metadata": {"aucs": [0.5778007055925349, 0.5671640967786673, 0.5680092706093101, 0.6157247750933103, 0.5867702347919976, 0.5949197784895696, 0.5435193797823525, 0.5944158079497355, 0.5958383428887812, 0.27434894779576824, 0.28140289356254, 0.2793526454699885, 0.29268702605453534, 0.30721497312027, 0.28653422897181324, 0.2988382365509711, 0.29473569916100983, 0.3083804690566694, 0.1351709079165121, 0.13566558765136727, 0.1328697009145453, 0.1229050362077827, 0.1469658445184968, 0.11553751192841277, 0.13573009444088546, 0.1345466138927226, 0.12213282862067809, 0.10642654342930513, 0.10382424084847552, 0.12610629587219213, 0.10948691037663705, 0.11083121598307422, 0.10996486834798858, 0.11073805954452276, 0.10151557495290053, 0.10607808778367434, 0.9215385047094589, 0.9179075494908319, 0.9457620450356642, 0.9687808772667424, 0.9295444988269952, 0.9514454899375729, 0.9464907007189876, 0.9252243650584958, 0.9425139308301559, 0.1874746327882637, 0.18794608594322737, 0.1919649105012594, 0.19791126411226556, 0.20582610779286914, 0.2133439322327495, 0.19866435986899855, 0.20124289188690125, 0.1904116905580543, 0.2430411744350226, 0.2772940166853942, 0.20454495546489415, 0.24781830100451097, 0.1953276270266261, 0.25318947524281266, 0.24233332169388122, 0.2166568075093943, 0.24260700267305735, 0.14032737577286136, 0.1192269808505011, 0.11449257689140946, 0.13043074645869146, 0.1375162995367708, 0.1455533117150759, 0.12058821079977311, 0.1301450533560191, 0.1407276317917735, 0.09851799058376887, 0.08675020113545429, 0.09956824938292974, 0.1230888811050127, 0.1306597298384541, 0.11697968938164305, 0.11751778710207805, 0.11512703350021658, 0.11751286727686583, 0.006519030503600698, 0.00918439420880346, 9.999999999998899e-05, 9.999999999998899e-05, 0.002667362031177234, 0.002254640395292551, 0.0024112161742028126, 0.005327064760438982, 0.005126589069886167, 0.09314809223530063, 0.09063846671681874, 0.11238574450488847, 0.12194059234188648, 0.09523442418288963, 0.10428612986742336, 0.14422890163736013, 0.14606650741995342, 0.09717558109265934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001270750972462542, 0.002466140895032387, 0.0041649359531096275, 0.08093114078012187, 0.07029777140244475, 0.08676645507787673, 0.08010022518853277, 0.08950831227749734, 0.08584192655509904, 0.08675683049261096, 0.09294045589165467, 0.09829760514823771, 0.4232425765889699, 0.40606763712490546, 0.4049622411034858, 0.39957705436317115, 0.41083849084499824, 0.4140916294269431, 0.42558996150796646, 0.4110725794849974, 0.4269257075671262, 0.077232330059957, 0.0886560158829991, 0.08686002851886587, 0.08187956128007623, 0.08131730857280295, 0.08421802620016772, 0.084195246195501, 0.08825968692317743, 0.07302149395764523, 0.1347644066752266, 0.1335941728305441, 0.13039443505253656, 0.14716154919999302, 0.13003249725105448, 0.1465094814824035, 0.20715399259554357, 0.15802481145647074, 0.138990928777742, 0.22173489567645588, 0.21731451221869802, 0.23897905110801532, 0.2207790006223792, 0.22876615101718178, 0.23736800636798072, 0.2623267727586934, 0.2596432007916789, 0.24784973924101517, 0.1689383802332879, 0.1621048174261519, 0.1667449117312244, 0.16474311372316186, 0.15043321155121525, 0.15425811325004002, 0.1844139695445951, 0.1800350333654155, 0.19222936392735623, 0.184438008440733, 0.17647306985812594, 0.19208112321239135, 0.18810075242202207, 0.16329307160764273, 0.18542969772009232, 0.17018428260646146, 0.21652908635224122, 0.1911843366780317, 0.18057019468328872, 0.18072395704700228, 0.19324528728711776, 0.18284572978312252, 0.19769996811200907, 0.18781470454774662, 0.1986121054533665, 0.18287950440416556, 0.19325545915808928, 0.190239141151879, 0.15413788776763782, 0.22875854257484984, 0.18013496772715898, 0.19794182084319756, 0.22512710755646925, 0.19135298829413872, 0.15323047023065373, 0.14316181700709785, 0.1580835010453293, 0.1647488505575786, 0.18472004168578426, 0.21113267998259355, 0.1753468228042977, 0.22812874683934548, 0.1774294706372277, 0.2443735940520294, 0.20360017319034895, 0.18786506422979954, 0.22444598439163632, 0.19260447864943242, 0.21376435046770026, 0.18129431420025954, 0.18291441793441887, 0.1769057991151527, 0.188264891848423, 0.17733814492911204, 0.07078333974980067, 0.0748414282770955, 0.06434856346871931, 0.07368420626395478, 0.0757423557848882, 0.0713600775768255, 0.07344436299620116, 0.0852678720537644, 0.06495268475499649]}, "mutation_prompt": null}
{"id": "0cfdba82-6ef2-434a-8e5e-1fa168265068", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand()\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Adaptive Differential Evolution with Local Search Boosting (ADE-LSB) combines differential evolution with adaptive strategy selection and local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c52a00-92e6-474a-875d-e6649cd4bf05", "metadata": {"aucs": [0.5778007055925349, 0.5671640967786673, 0.5680092706093101, 0.6157247750933103, 0.5867702347919976, 0.5949197784895696, 0.5435193797823525, 0.5944158079497355, 0.5958383428887812, 0.27434894779576824, 0.28140289356254, 0.2793526454699885, 0.29268702605453534, 0.30721497312027, 0.28653422897181324, 0.2988382365509711, 0.29473569916100983, 0.3083804690566694, 0.1351709079165121, 0.13566558765136727, 0.1328697009145453, 0.1229050362077827, 0.1469658445184968, 0.11553751192841277, 0.13573009444088546, 0.1345466138927226, 0.12213282862067809, 0.10642654342930513, 0.10382424084847552, 0.12610629587219213, 0.10948691037663705, 0.11083121598307422, 0.10996486834798858, 0.11073805954452276, 0.10151557495290053, 0.10607808778367434, 0.9215385047094589, 0.9179075494908319, 0.9457620450356642, 0.9687808772667424, 0.9295444988269952, 0.9514454899375729, 0.9464907007189876, 0.9252243650584958, 0.9425139308301559, 0.1874746327882637, 0.18794608594322737, 0.1919649105012594, 0.19791126411226556, 0.20582610779286914, 0.2133439322327495, 0.19866435986899855, 0.20124289188690125, 0.1904116905580543, 0.2430411744350226, 0.2772940166853942, 0.20454495546489415, 0.24781830100451097, 0.1953276270266261, 0.25318947524281266, 0.24233332169388122, 0.2166568075093943, 0.24260700267305735, 0.14032737577286136, 0.1192269808505011, 0.11449257689140946, 0.13043074645869146, 0.1375162995367708, 0.1455533117150759, 0.12058821079977311, 0.1301450533560191, 0.1407276317917735, 0.09851799058376887, 0.08675020113545429, 0.09956824938292974, 0.1230888811050127, 0.1306597298384541, 0.11697968938164305, 0.11751778710207805, 0.11512703350021658, 0.11751286727686583, 0.006519030503600698, 0.00918439420880346, 9.999999999998899e-05, 9.999999999998899e-05, 0.002667362031177234, 0.002254640395292551, 0.0024112161742028126, 0.005327064760438982, 0.005126589069886167, 0.09314809223530063, 0.09063846671681874, 0.11238574450488847, 0.12194059234188648, 0.09523442418288963, 0.10428612986742336, 0.14422890163736013, 0.14606650741995342, 0.09717558109265934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001270750972462542, 0.002466140895032387, 0.0041649359531096275, 0.08093114078012187, 0.07029777140244475, 0.08676645507787673, 0.08010022518853277, 0.08950831227749734, 0.08584192655509904, 0.08675683049261096, 0.09294045589165467, 0.09829760514823771, 0.4232425765889699, 0.40606763712490546, 0.4049622411034858, 0.39957705436317115, 0.41083849084499824, 0.4140916294269431, 0.42558996150796646, 0.4110725794849974, 0.4269257075671262, 0.077232330059957, 0.0886560158829991, 0.08686002851886587, 0.08187956128007623, 0.08131730857280295, 0.08421802620016772, 0.084195246195501, 0.08825968692317743, 0.07302149395764523, 0.1347644066752266, 0.1335941728305441, 0.13039443505253656, 0.14716154919999302, 0.13003249725105448, 0.1465094814824035, 0.20715399259554357, 0.15802481145647074, 0.138990928777742, 0.22173489567645588, 0.21731451221869802, 0.23897905110801532, 0.2207790006223792, 0.22876615101718178, 0.23736800636798072, 0.2623267727586934, 0.2596432007916789, 0.24784973924101517, 0.1689383802332879, 0.1621048174261519, 0.1667449117312244, 0.16474311372316186, 0.15043321155121525, 0.15425811325004002, 0.1844139695445951, 0.1800350333654155, 0.19222936392735623, 0.184438008440733, 0.17647306985812594, 0.19208112321239135, 0.18810075242202207, 0.16329307160764273, 0.18542969772009232, 0.17018428260646146, 0.21652908635224122, 0.1911843366780317, 0.18057019468328872, 0.18072395704700228, 0.19324528728711776, 0.18284572978312252, 0.19769996811200907, 0.18781470454774662, 0.1986121054533665, 0.18287950440416556, 0.19325545915808928, 0.190239141151879, 0.15413788776763782, 0.22875854257484984, 0.18013496772715898, 0.19794182084319756, 0.22512710755646925, 0.19135298829413872, 0.15323047023065373, 0.14316181700709785, 0.1580835010453293, 0.1647488505575786, 0.18472004168578426, 0.21113267998259355, 0.1753468228042977, 0.22812874683934548, 0.1774294706372277, 0.2443735940520294, 0.20360017319034895, 0.18786506422979954, 0.22444598439163632, 0.19260447864943242, 0.21376435046770026, 0.18129431420025954, 0.18291441793441887, 0.1769057991151527, 0.188264891848423, 0.17733814492911204, 0.07078333974980067, 0.0748414282770955, 0.06434856346871931, 0.07368420626395478, 0.0757423557848882, 0.0713600775768255, 0.07344436299620116, 0.0852678720537644, 0.06495268475499649]}, "mutation_prompt": null}
{"id": "b1ba3d9c-815d-463d-98ca-c7ae8c7d2f1f", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand()\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Adaptive Differential Evolution with Local Search Boosting (ADE-LSB) combines differential evolution with adaptive strategy selection and local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c52a00-92e6-474a-875d-e6649cd4bf05", "metadata": {"aucs": [0.5778007055925349, 0.5671640967786673, 0.5680092706093101, 0.6157247750933103, 0.5867702347919976, 0.5949197784895696, 0.5435193797823525, 0.5944158079497355, 0.5958383428887812, 0.27434894779576824, 0.28140289356254, 0.2793526454699885, 0.29268702605453534, 0.30721497312027, 0.28653422897181324, 0.2988382365509711, 0.29473569916100983, 0.3083804690566694, 0.1351709079165121, 0.13566558765136727, 0.1328697009145453, 0.1229050362077827, 0.1469658445184968, 0.11553751192841277, 0.13573009444088546, 0.1345466138927226, 0.12213282862067809, 0.10642654342930513, 0.10382424084847552, 0.12610629587219213, 0.10948691037663705, 0.11083121598307422, 0.10996486834798858, 0.11073805954452276, 0.10151557495290053, 0.10607808778367434, 0.9215385047094589, 0.9179075494908319, 0.9457620450356642, 0.9687808772667424, 0.9295444988269952, 0.9514454899375729, 0.9464907007189876, 0.9252243650584958, 0.9425139308301559, 0.1874746327882637, 0.18794608594322737, 0.1919649105012594, 0.19791126411226556, 0.20582610779286914, 0.2133439322327495, 0.19866435986899855, 0.20124289188690125, 0.1904116905580543, 0.2430411744350226, 0.2772940166853942, 0.20454495546489415, 0.24781830100451097, 0.1953276270266261, 0.25318947524281266, 0.24233332169388122, 0.2166568075093943, 0.24260700267305735, 0.14032737577286136, 0.1192269808505011, 0.11449257689140946, 0.13043074645869146, 0.1375162995367708, 0.1455533117150759, 0.12058821079977311, 0.1301450533560191, 0.1407276317917735, 0.09851799058376887, 0.08675020113545429, 0.09956824938292974, 0.1230888811050127, 0.1306597298384541, 0.11697968938164305, 0.11751778710207805, 0.11512703350021658, 0.11751286727686583, 0.006519030503600698, 0.00918439420880346, 9.999999999998899e-05, 9.999999999998899e-05, 0.002667362031177234, 0.002254640395292551, 0.0024112161742028126, 0.005327064760438982, 0.005126589069886167, 0.09314809223530063, 0.09063846671681874, 0.11238574450488847, 0.12194059234188648, 0.09523442418288963, 0.10428612986742336, 0.14422890163736013, 0.14606650741995342, 0.09717558109265934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001270750972462542, 0.002466140895032387, 0.0041649359531096275, 0.08093114078012187, 0.07029777140244475, 0.08676645507787673, 0.08010022518853277, 0.08950831227749734, 0.08584192655509904, 0.08675683049261096, 0.09294045589165467, 0.09829760514823771, 0.4232425765889699, 0.40606763712490546, 0.4049622411034858, 0.39957705436317115, 0.41083849084499824, 0.4140916294269431, 0.42558996150796646, 0.4110725794849974, 0.4269257075671262, 0.077232330059957, 0.0886560158829991, 0.08686002851886587, 0.08187956128007623, 0.08131730857280295, 0.08421802620016772, 0.084195246195501, 0.08825968692317743, 0.07302149395764523, 0.1347644066752266, 0.1335941728305441, 0.13039443505253656, 0.14716154919999302, 0.13003249725105448, 0.1465094814824035, 0.20715399259554357, 0.15802481145647074, 0.138990928777742, 0.22173489567645588, 0.21731451221869802, 0.23897905110801532, 0.2207790006223792, 0.22876615101718178, 0.23736800636798072, 0.2623267727586934, 0.2596432007916789, 0.24784973924101517, 0.1689383802332879, 0.1621048174261519, 0.1667449117312244, 0.16474311372316186, 0.15043321155121525, 0.15425811325004002, 0.1844139695445951, 0.1800350333654155, 0.19222936392735623, 0.184438008440733, 0.17647306985812594, 0.19208112321239135, 0.18810075242202207, 0.16329307160764273, 0.18542969772009232, 0.17018428260646146, 0.21652908635224122, 0.1911843366780317, 0.18057019468328872, 0.18072395704700228, 0.19324528728711776, 0.18284572978312252, 0.19769996811200907, 0.18781470454774662, 0.1986121054533665, 0.18287950440416556, 0.19325545915808928, 0.190239141151879, 0.15413788776763782, 0.22875854257484984, 0.18013496772715898, 0.19794182084319756, 0.22512710755646925, 0.19135298829413872, 0.15323047023065373, 0.14316181700709785, 0.1580835010453293, 0.1647488505575786, 0.18472004168578426, 0.21113267998259355, 0.1753468228042977, 0.22812874683934548, 0.1774294706372277, 0.2443735940520294, 0.20360017319034895, 0.18786506422979954, 0.22444598439163632, 0.19260447864943242, 0.21376435046770026, 0.18129431420025954, 0.18291441793441887, 0.1769057991151527, 0.188264891848423, 0.17733814492911204, 0.07078333974980067, 0.0748414282770955, 0.06434856346871931, 0.07368420626395478, 0.0757423557848882, 0.0713600775768255, 0.07344436299620116, 0.0852678720537644, 0.06495268475499649]}, "mutation_prompt": null}
{"id": "7b0dbc8c-d8a0-4df8-a262-dc303bbc3635", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand()\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Adaptive Differential Evolution with Local Search Boosting (ADE-LSB) combines differential evolution with adaptive strategy selection and local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c52a00-92e6-474a-875d-e6649cd4bf05", "metadata": {"aucs": [0.5778007055925349, 0.5671640967786673, 0.5680092706093101, 0.6157247750933103, 0.5867702347919976, 0.5949197784895696, 0.5435193797823525, 0.5944158079497355, 0.5958383428887812, 0.27434894779576824, 0.28140289356254, 0.2793526454699885, 0.29268702605453534, 0.30721497312027, 0.28653422897181324, 0.2988382365509711, 0.29473569916100983, 0.3083804690566694, 0.1351709079165121, 0.13566558765136727, 0.1328697009145453, 0.1229050362077827, 0.1469658445184968, 0.11553751192841277, 0.13573009444088546, 0.1345466138927226, 0.12213282862067809, 0.10642654342930513, 0.10382424084847552, 0.12610629587219213, 0.10948691037663705, 0.11083121598307422, 0.10996486834798858, 0.11073805954452276, 0.10151557495290053, 0.10607808778367434, 0.9215385047094589, 0.9179075494908319, 0.9457620450356642, 0.9687808772667424, 0.9295444988269952, 0.9514454899375729, 0.9464907007189876, 0.9252243650584958, 0.9425139308301559, 0.1874746327882637, 0.18794608594322737, 0.1919649105012594, 0.19791126411226556, 0.20582610779286914, 0.2133439322327495, 0.19866435986899855, 0.20124289188690125, 0.1904116905580543, 0.2430411744350226, 0.2772940166853942, 0.20454495546489415, 0.24781830100451097, 0.1953276270266261, 0.25318947524281266, 0.24233332169388122, 0.2166568075093943, 0.24260700267305735, 0.14032737577286136, 0.1192269808505011, 0.11449257689140946, 0.13043074645869146, 0.1375162995367708, 0.1455533117150759, 0.12058821079977311, 0.1301450533560191, 0.1407276317917735, 0.09851799058376887, 0.08675020113545429, 0.09956824938292974, 0.1230888811050127, 0.1306597298384541, 0.11697968938164305, 0.11751778710207805, 0.11512703350021658, 0.11751286727686583, 0.006519030503600698, 0.00918439420880346, 9.999999999998899e-05, 9.999999999998899e-05, 0.002667362031177234, 0.002254640395292551, 0.0024112161742028126, 0.005327064760438982, 0.005126589069886167, 0.09314809223530063, 0.09063846671681874, 0.11238574450488847, 0.12194059234188648, 0.09523442418288963, 0.10428612986742336, 0.14422890163736013, 0.14606650741995342, 0.09717558109265934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001270750972462542, 0.002466140895032387, 0.0041649359531096275, 0.08093114078012187, 0.07029777140244475, 0.08676645507787673, 0.08010022518853277, 0.08950831227749734, 0.08584192655509904, 0.08675683049261096, 0.09294045589165467, 0.09829760514823771, 0.4232425765889699, 0.40606763712490546, 0.4049622411034858, 0.39957705436317115, 0.41083849084499824, 0.4140916294269431, 0.42558996150796646, 0.4110725794849974, 0.4269257075671262, 0.077232330059957, 0.0886560158829991, 0.08686002851886587, 0.08187956128007623, 0.08131730857280295, 0.08421802620016772, 0.084195246195501, 0.08825968692317743, 0.07302149395764523, 0.1347644066752266, 0.1335941728305441, 0.13039443505253656, 0.14716154919999302, 0.13003249725105448, 0.1465094814824035, 0.20715399259554357, 0.15802481145647074, 0.138990928777742, 0.22173489567645588, 0.21731451221869802, 0.23897905110801532, 0.2207790006223792, 0.22876615101718178, 0.23736800636798072, 0.2623267727586934, 0.2596432007916789, 0.24784973924101517, 0.1689383802332879, 0.1621048174261519, 0.1667449117312244, 0.16474311372316186, 0.15043321155121525, 0.15425811325004002, 0.1844139695445951, 0.1800350333654155, 0.19222936392735623, 0.184438008440733, 0.17647306985812594, 0.19208112321239135, 0.18810075242202207, 0.16329307160764273, 0.18542969772009232, 0.17018428260646146, 0.21652908635224122, 0.1911843366780317, 0.18057019468328872, 0.18072395704700228, 0.19324528728711776, 0.18284572978312252, 0.19769996811200907, 0.18781470454774662, 0.1986121054533665, 0.18287950440416556, 0.19325545915808928, 0.190239141151879, 0.15413788776763782, 0.22875854257484984, 0.18013496772715898, 0.19794182084319756, 0.22512710755646925, 0.19135298829413872, 0.15323047023065373, 0.14316181700709785, 0.1580835010453293, 0.1647488505575786, 0.18472004168578426, 0.21113267998259355, 0.1753468228042977, 0.22812874683934548, 0.1774294706372277, 0.2443735940520294, 0.20360017319034895, 0.18786506422979954, 0.22444598439163632, 0.19260447864943242, 0.21376435046770026, 0.18129431420025954, 0.18291441793441887, 0.1769057991151527, 0.188264891848423, 0.17733814492911204, 0.07078333974980067, 0.0748414282770955, 0.06434856346871931, 0.07368420626395478, 0.0757423557848882, 0.0713600775768255, 0.07344436299620116, 0.0852678720537644, 0.06495268475499649]}, "mutation_prompt": null}
{"id": "0950c9e8-a9e1-45a9-9edc-f4ec8c9c445c", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand()\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Adaptive Differential Evolution with Local Search Boosting (ADE-LSB) combines differential evolution with adaptive strategy selection and local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c52a00-92e6-474a-875d-e6649cd4bf05", "metadata": {"aucs": [0.5778007055925349, 0.5671640967786673, 0.5680092706093101, 0.6157247750933103, 0.5867702347919976, 0.5949197784895696, 0.5435193797823525, 0.5944158079497355, 0.5958383428887812, 0.27434894779576824, 0.28140289356254, 0.2793526454699885, 0.29268702605453534, 0.30721497312027, 0.28653422897181324, 0.2988382365509711, 0.29473569916100983, 0.3083804690566694, 0.1351709079165121, 0.13566558765136727, 0.1328697009145453, 0.1229050362077827, 0.1469658445184968, 0.11553751192841277, 0.13573009444088546, 0.1345466138927226, 0.12213282862067809, 0.10642654342930513, 0.10382424084847552, 0.12610629587219213, 0.10948691037663705, 0.11083121598307422, 0.10996486834798858, 0.11073805954452276, 0.10151557495290053, 0.10607808778367434, 0.9215385047094589, 0.9179075494908319, 0.9457620450356642, 0.9687808772667424, 0.9295444988269952, 0.9514454899375729, 0.9464907007189876, 0.9252243650584958, 0.9425139308301559, 0.1874746327882637, 0.18794608594322737, 0.1919649105012594, 0.19791126411226556, 0.20582610779286914, 0.2133439322327495, 0.19866435986899855, 0.20124289188690125, 0.1904116905580543, 0.2430411744350226, 0.2772940166853942, 0.20454495546489415, 0.24781830100451097, 0.1953276270266261, 0.25318947524281266, 0.24233332169388122, 0.2166568075093943, 0.24260700267305735, 0.14032737577286136, 0.1192269808505011, 0.11449257689140946, 0.13043074645869146, 0.1375162995367708, 0.1455533117150759, 0.12058821079977311, 0.1301450533560191, 0.1407276317917735, 0.09851799058376887, 0.08675020113545429, 0.09956824938292974, 0.1230888811050127, 0.1306597298384541, 0.11697968938164305, 0.11751778710207805, 0.11512703350021658, 0.11751286727686583, 0.006519030503600698, 0.00918439420880346, 9.999999999998899e-05, 9.999999999998899e-05, 0.002667362031177234, 0.002254640395292551, 0.0024112161742028126, 0.005327064760438982, 0.005126589069886167, 0.09314809223530063, 0.09063846671681874, 0.11238574450488847, 0.12194059234188648, 0.09523442418288963, 0.10428612986742336, 0.14422890163736013, 0.14606650741995342, 0.09717558109265934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001270750972462542, 0.002466140895032387, 0.0041649359531096275, 0.08093114078012187, 0.07029777140244475, 0.08676645507787673, 0.08010022518853277, 0.08950831227749734, 0.08584192655509904, 0.08675683049261096, 0.09294045589165467, 0.09829760514823771, 0.4232425765889699, 0.40606763712490546, 0.4049622411034858, 0.39957705436317115, 0.41083849084499824, 0.4140916294269431, 0.42558996150796646, 0.4110725794849974, 0.4269257075671262, 0.077232330059957, 0.0886560158829991, 0.08686002851886587, 0.08187956128007623, 0.08131730857280295, 0.08421802620016772, 0.084195246195501, 0.08825968692317743, 0.07302149395764523, 0.1347644066752266, 0.1335941728305441, 0.13039443505253656, 0.14716154919999302, 0.13003249725105448, 0.1465094814824035, 0.20715399259554357, 0.15802481145647074, 0.138990928777742, 0.22173489567645588, 0.21731451221869802, 0.23897905110801532, 0.2207790006223792, 0.22876615101718178, 0.23736800636798072, 0.2623267727586934, 0.2596432007916789, 0.24784973924101517, 0.1689383802332879, 0.1621048174261519, 0.1667449117312244, 0.16474311372316186, 0.15043321155121525, 0.15425811325004002, 0.1844139695445951, 0.1800350333654155, 0.19222936392735623, 0.184438008440733, 0.17647306985812594, 0.19208112321239135, 0.18810075242202207, 0.16329307160764273, 0.18542969772009232, 0.17018428260646146, 0.21652908635224122, 0.1911843366780317, 0.18057019468328872, 0.18072395704700228, 0.19324528728711776, 0.18284572978312252, 0.19769996811200907, 0.18781470454774662, 0.1986121054533665, 0.18287950440416556, 0.19325545915808928, 0.190239141151879, 0.15413788776763782, 0.22875854257484984, 0.18013496772715898, 0.19794182084319756, 0.22512710755646925, 0.19135298829413872, 0.15323047023065373, 0.14316181700709785, 0.1580835010453293, 0.1647488505575786, 0.18472004168578426, 0.21113267998259355, 0.1753468228042977, 0.22812874683934548, 0.1774294706372277, 0.2443735940520294, 0.20360017319034895, 0.18786506422979954, 0.22444598439163632, 0.19260447864943242, 0.21376435046770026, 0.18129431420025954, 0.18291441793441887, 0.1769057991151527, 0.188264891848423, 0.17733814492911204, 0.07078333974980067, 0.0748414282770955, 0.06434856346871931, 0.07368420626395478, 0.0757423557848882, 0.0713600775768255, 0.07344436299620116, 0.0852678720537644, 0.06495268475499649]}, "mutation_prompt": null}
{"id": "c0fea2ee-f8c0-4872-a03d-c9471a9a444c", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand()\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.2:  # Changed from 0.1 to 0.2\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced ADE-LSB by adjusting local search frequency to improve exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": 0.19670700835601646, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "f3c52a00-92e6-474a-875d-e6649cd4bf05", "metadata": {"aucs": [0.5160272738154491, 0.4820306627183639, 0.5243853998332305, 0.5195367644153951, 0.5262251325530876, 0.5484897844270418, 0.5224318229854702, 0.5525659862186602, 0.5246236978972934, 0.1978535921373531, 0.25889355893315147, 0.2284132975421812, 0.18505636500246536, 0.22872436360527182, 0.24488333928207318, 0.20860264697444242, 0.2459852228470243, 0.2333042147287997, 0.10693547265449832, 0.13847389709123104, 0.1135326724970015, 0.12137641491770756, 0.11476487703724214, 0.12125153782026377, 0.10864056494476737, 0.1224286636437979, 0.1040259323484688, 0.09240705064962362, 0.09902136708399212, 0.09796163261263702, 0.11334738029541769, 0.09785526363498265, 0.10007962627409839, 0.1087155906018803, 0.10007816616110399, 0.1132792589687237, 0.8975787851487704, 0.9505833347759748, 0.9159687388737754, 0.9381859140137733, 0.9387773013208045, 0.9036583520402701, 0.9125503750234425, 0.9498103891225165, 0.9283809872036703, 0.19048970551751987, 0.16512826266785108, 0.1610992961531832, 0.18122806394980384, 0.16852857303942548, 0.18578588405055674, 0.20139795520460546, 0.19420107675825427, 0.18201160002245798, 0.18258460725844572, 0.1889508365173378, 0.18433868411362275, 0.22752685380973003, 0.22720835304950182, 0.22136755551540288, 0.2151964771546594, 0.22515301811598643, 0.1861825853034519, 0.1210851591897264, 0.0974260952687177, 0.11437706175397122, 0.11020649126477178, 0.11059585716816434, 0.0950820358804404, 0.11094483550212719, 0.10302495961031477, 0.1345917998039977, 0.10856372208106346, 0.07204282795580508, 0.09899867278890528, 0.1011855093893399, 0.10723647431928274, 0.10418866648389324, 0.10412039839803033, 0.0855473533129607, 0.12049790591348808, 0.003746359870006599, 0.002646568167678942, 9.999999999998899e-05, 9.999999999998899e-05, 0.006886312408868389, 0.0012379254859781197, 0.006526552348008363, 9.999999999998899e-05, 0.0006153475251383655, 0.11630318334329881, 0.07574998034728231, 0.08052472078995687, 0.07719519252039186, 0.15323282908061997, 0.0832734568748783, 0.11957472820935566, 0.09019150861024594, 0.11389319160520572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023075039052870006, 0.06725159714009188, 0.06606331479898275, 0.07597903224665992, 0.06984533741868149, 0.07194440028552196, 0.07511063812171725, 0.07676172746055343, 0.08532787336396597, 0.071881590807228, 0.3737070892593489, 0.35654953827041314, 0.397296462712861, 0.3914060470939881, 0.37881871613936025, 0.3773830374198105, 0.38329419081245064, 0.3645255105304559, 0.38179052597351015, 0.07324791226785365, 0.07611133129927661, 0.08456055836180365, 0.11304541677568725, 0.07335068495748931, 0.08178465856250838, 0.07614118277381987, 0.0679352112636521, 0.07989423602789136, 0.12233604092064032, 0.1373638007250102, 0.12617169290266395, 0.15993061642576445, 0.26888087973971, 0.15395495876993337, 0.14358683877841594, 0.14415471650729428, 0.1366414904400195, 0.23353031047351747, 0.22445403032622813, 0.23332168149827304, 0.22705252533535625, 0.20379200063597125, 0.21855508452095662, 0.21071553822071587, 0.2358252326889968, 0.24410390766998913, 0.1587007802038055, 0.1509190845574332, 0.16043660526057846, 0.16620420438368488, 0.15513363949534464, 0.1340979676005829, 0.1703677692558464, 0.17376062489596789, 0.16023611012808758, 0.19794663364139164, 0.1827618985961017, 0.197049931683558, 0.17349275598575353, 0.17678041109940656, 0.20654692880177694, 0.2410890485139937, 0.2129613359657031, 0.17877843137310045, 0.1821096118736496, 0.17306485584895204, 0.1781707543895451, 0.18687014064065643, 0.17736306263049506, 0.17295712701611554, 0.18817036102450246, 0.1711268266261775, 0.1865795221196025, 0.24775404534126033, 0.1596098776102972, 0.16361937598394194, 0.2578039627729064, 0.159888828965141, 0.16467756485486973, 0.20391658922381406, 0.14684309780831062, 0.28574184102404143, 0.2352311324205124, 0.17140601200289862, 0.15222751734083284, 0.16121576307016972, 0.17294778532995647, 0.16224285223377866, 0.29309832156769466, 0.3908279764613646, 0.19206096140287554, 0.1917961167010087, 0.18818564602100574, 0.19520234639020562, 0.1960492834880352, 0.19878067955048684, 0.17957125245869832, 0.1945782358441237, 0.1797675335530564, 0.20546529419084203, 0.07398554042106675, 0.06470986033746995, 0.06056339289779267, 0.06774555235505231, 0.07120420676245032, 0.08100013754417901, 0.07375220152606021, 0.06158946973601209, 0.07379470931430099]}, "mutation_prompt": null}
{"id": "1bc7f220-08cf-47c5-9631-25df7df1c2ed", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand()\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Adaptive Differential Evolution with Local Search Boosting (ADE-LSB) combines differential evolution with adaptive strategy selection and local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3c52a00-92e6-474a-875d-e6649cd4bf05", "metadata": {"aucs": [0.5778007055925349, 0.5671640967786673, 0.5680092706093101, 0.6157247750933103, 0.5867702347919976, 0.5949197784895696, 0.5435193797823525, 0.5944158079497355, 0.5958383428887812, 0.27434894779576824, 0.28140289356254, 0.2793526454699885, 0.29268702605453534, 0.30721497312027, 0.28653422897181324, 0.2988382365509711, 0.29473569916100983, 0.3083804690566694, 0.1351709079165121, 0.13566558765136727, 0.1328697009145453, 0.1229050362077827, 0.1469658445184968, 0.11553751192841277, 0.13573009444088546, 0.1345466138927226, 0.12213282862067809, 0.10642654342930513, 0.10382424084847552, 0.12610629587219213, 0.10948691037663705, 0.11083121598307422, 0.10996486834798858, 0.11073805954452276, 0.10151557495290053, 0.10607808778367434, 0.9215385047094589, 0.9179075494908319, 0.9457620450356642, 0.9687808772667424, 0.9295444988269952, 0.9514454899375729, 0.9464907007189876, 0.9252243650584958, 0.9425139308301559, 0.1874746327882637, 0.18794608594322737, 0.1919649105012594, 0.19791126411226556, 0.20582610779286914, 0.2133439322327495, 0.19866435986899855, 0.20124289188690125, 0.1904116905580543, 0.2430411744350226, 0.2772940166853942, 0.20454495546489415, 0.24781830100451097, 0.1953276270266261, 0.25318947524281266, 0.24233332169388122, 0.2166568075093943, 0.24260700267305735, 0.14032737577286136, 0.1192269808505011, 0.11449257689140946, 0.13043074645869146, 0.1375162995367708, 0.1455533117150759, 0.12058821079977311, 0.1301450533560191, 0.1407276317917735, 0.09851799058376887, 0.08675020113545429, 0.09956824938292974, 0.1230888811050127, 0.1306597298384541, 0.11697968938164305, 0.11751778710207805, 0.11512703350021658, 0.11751286727686583, 0.006519030503600698, 0.00918439420880346, 9.999999999998899e-05, 9.999999999998899e-05, 0.002667362031177234, 0.002254640395292551, 0.0024112161742028126, 0.005327064760438982, 0.005126589069886167, 0.09314809223530063, 0.09063846671681874, 0.11238574450488847, 0.12194059234188648, 0.09523442418288963, 0.10428612986742336, 0.14422890163736013, 0.14606650741995342, 0.09717558109265934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001270750972462542, 0.002466140895032387, 0.0041649359531096275, 0.08093114078012187, 0.07029777140244475, 0.08676645507787673, 0.08010022518853277, 0.08950831227749734, 0.08584192655509904, 0.08675683049261096, 0.09294045589165467, 0.09829760514823771, 0.4232425765889699, 0.40606763712490546, 0.4049622411034858, 0.39957705436317115, 0.41083849084499824, 0.4140916294269431, 0.42558996150796646, 0.4110725794849974, 0.4269257075671262, 0.077232330059957, 0.0886560158829991, 0.08686002851886587, 0.08187956128007623, 0.08131730857280295, 0.08421802620016772, 0.084195246195501, 0.08825968692317743, 0.07302149395764523, 0.1347644066752266, 0.1335941728305441, 0.13039443505253656, 0.14716154919999302, 0.13003249725105448, 0.1465094814824035, 0.20715399259554357, 0.15802481145647074, 0.138990928777742, 0.22173489567645588, 0.21731451221869802, 0.23897905110801532, 0.2207790006223792, 0.22876615101718178, 0.23736800636798072, 0.2623267727586934, 0.2596432007916789, 0.24784973924101517, 0.1689383802332879, 0.1621048174261519, 0.1667449117312244, 0.16474311372316186, 0.15043321155121525, 0.15425811325004002, 0.1844139695445951, 0.1800350333654155, 0.19222936392735623, 0.184438008440733, 0.17647306985812594, 0.19208112321239135, 0.18810075242202207, 0.16329307160764273, 0.18542969772009232, 0.17018428260646146, 0.21652908635224122, 0.1911843366780317, 0.18057019468328872, 0.18072395704700228, 0.19324528728711776, 0.18284572978312252, 0.19769996811200907, 0.18781470454774662, 0.1986121054533665, 0.18287950440416556, 0.19325545915808928, 0.190239141151879, 0.15413788776763782, 0.22875854257484984, 0.18013496772715898, 0.19794182084319756, 0.22512710755646925, 0.19135298829413872, 0.15323047023065373, 0.14316181700709785, 0.1580835010453293, 0.1647488505575786, 0.18472004168578426, 0.21113267998259355, 0.1753468228042977, 0.22812874683934548, 0.1774294706372277, 0.2443735940520294, 0.20360017319034895, 0.18786506422979954, 0.22444598439163632, 0.19260447864943242, 0.21376435046770026, 0.18129431420025954, 0.18291441793441887, 0.1769057991151527, 0.188264891848423, 0.17733814492911204, 0.07078333974980067, 0.0748414282770955, 0.06434856346871931, 0.07368420626395478, 0.0757423557848882, 0.0713600775768255, 0.07344436299620116, 0.0852678720537644, 0.06495268475499649]}, "mutation_prompt": null}
{"id": "0f4d29b1-4900-4a65-99c1-5f5f7ab4f2a3", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand()\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced the local search method by adjusting the perturbation distribution for improved exploitation.", "configspace": "", "generation": 9, "fitness": 0.2088962685520912, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "f3c52a00-92e6-474a-875d-e6649cd4bf05", "metadata": {"aucs": [0.5977945608725783, 0.5649253790368298, 0.5547586243264644, 0.5545112434210787, 0.5958695191227215, 0.5516642418476351, 0.5706820135014563, 0.6039520684103135, 0.5936529217667671, 0.28266649108394026, 0.2680247504545902, 0.28729805389010066, 0.25140324926884183, 0.2716511076529712, 0.26859800460264005, 0.2837395627631778, 0.2816418131858528, 0.2907376085478308, 0.1313636979669629, 0.12879658631196766, 0.12376560057194552, 0.12067442920557192, 0.1325695600696899, 0.12693583542764186, 0.13784837906474112, 0.11480170232094045, 0.12342573647393618, 0.12137372643581112, 0.10495978299775888, 0.11887275950873777, 0.1363874764423666, 0.1161297289588139, 0.11512413373514796, 0.11307346512489935, 0.1040293463879276, 0.10508259634570327, 0.9215386122025896, 0.9182963004191218, 0.9457609238284014, 0.9687810702955798, 0.9295350305711236, 0.9514454914532138, 0.9464906883234139, 0.9252229337662891, 0.9425016636696757, 0.20800440416742894, 0.18752166855635755, 0.1945441061898655, 0.2076453023550907, 0.21466775069384136, 0.2393731907060469, 0.20808155125872752, 0.22146210539861322, 0.20577309594665893, 0.21712266877029873, 0.26398950174079383, 0.23726074504918349, 0.29839054797348286, 0.2291335929564402, 0.25483004714545365, 0.22695789436122205, 0.2207435322037441, 0.24182523438132908, 0.14519194411121383, 0.13521661468526014, 0.1286434998327688, 0.14278566269397963, 0.13952074326718844, 0.13421095998522792, 0.13213443637969158, 0.1385589787288567, 0.14977307202495727, 0.09378560944417491, 0.10344503507184233, 0.08534048350595747, 0.13026798667046224, 0.119951330690242, 0.12352436423977142, 0.11853209493562822, 0.09714839213704562, 0.11479210458277556, 0.008894547652279261, 0.0016431557920763007, 0.0037883872960432496, 0.0008581502322433376, 0.00011764509928180455, 0.0008872990983254114, 0.0018097019248407564, 0.014294164570328949, 0.007075902860570249, 0.10767432257094, 0.1121469817071753, 0.10333066639142785, 0.10211471145148787, 0.08219621082475204, 0.09958340242052399, 0.1412150176914745, 0.14402219665208926, 0.12051092703116684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006835872571287149, 0.0014989838970431713, 0.08661626036939285, 0.09297412008532124, 0.0827281053336566, 0.1068278063532474, 0.08045318288248016, 0.07846592276330777, 0.07973023000469837, 0.0872454612448309, 0.09569898480967332, 0.40438741954366264, 0.40677168761005156, 0.4046389762406909, 0.42057833315234217, 0.4150758486809505, 0.3964716708519249, 0.41806109032251104, 0.39750380126769846, 0.3967804218006581, 0.07957422478375942, 0.0955674597384576, 0.09817701558700376, 0.08255233306619758, 0.08462799179934666, 0.08014554368451476, 0.07902693655214899, 0.09117255513361011, 0.07372695120272532, 0.12432336255897314, 0.12181232366789574, 0.13622249424788335, 0.12829320675989142, 0.13904100748007497, 0.1423720003136052, 0.1356011941665991, 0.16198382884184326, 0.13738514128334522, 0.23103719648997678, 0.22743347101934286, 0.23083972800700603, 0.22308339050639403, 0.24407316384771338, 0.22921805485829228, 0.25056360446431414, 0.2524538494165931, 0.2533000674949467, 0.17317701231972482, 0.17246913148310905, 0.15876775138049548, 0.1689173676288207, 0.16847470129936704, 0.17182517544409626, 0.16638595242400656, 0.18360630359802044, 0.17831070461413545, 0.18036714262133613, 0.18035205924786113, 0.1725890431765762, 0.17553722835385066, 0.16508372564822604, 0.18358632066288194, 0.19722882033316724, 0.19316316561641278, 0.18727035618751753, 0.198169848119083, 0.18744113417507957, 0.17764570374556077, 0.18695254345338563, 0.1848141483596627, 0.18508848624085472, 0.19162350399391226, 0.18116072480840062, 0.18794031613866835, 0.258161356101128, 0.1647334625900887, 0.2221816037677855, 0.21988568991473323, 0.19769072917407504, 0.1982565295255212, 0.19099460782217792, 0.1628949173652734, 0.1846251442144834, 0.1556577315477774, 0.16517900230213745, 0.18446016632451778, 0.18731659745360607, 0.17593131290400088, 0.2073704009212226, 0.2547847118854293, 0.3402525609815823, 0.20310796488732275, 0.1864997958732041, 0.17764753104528486, 0.18366580787147735, 0.18835311256020537, 0.20330811199470966, 0.1849438600405372, 0.18159625451076844, 0.20433930626829677, 0.17190081281669323, 0.06696549370208726, 0.06314215283408608, 0.06749212705559315, 0.07543872729599022, 0.07317129960932767, 0.07933095161617798, 0.07010079955933668, 0.08694363680601458, 0.07099697253253545]}, "mutation_prompt": null}
{"id": "c2dcf5dc-92c5-4245-b5c8-5cd9ac686528", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand()\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.12:  # Slightly increased probability from 0.1 to 0.12\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Slightly increased the probability of applying local search to boost exploitation.", "configspace": "", "generation": 10, "fitness": 0.20444216836394927, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "0f4d29b1-4900-4a65-99c1-5f5f7ab4f2a3", "metadata": {"aucs": [0.5630953854147661, 0.5597961289610647, 0.562741931661928, 0.5813459371364136, 0.5478144750517453, 0.5892726281525551, 0.5538085399454229, 0.5684332370310773, 0.5485358790959914, 0.2821907180751373, 0.30126483400452586, 0.2590383293408547, 0.2555767362640604, 0.26733003349407314, 0.29301544450570816, 0.27959581839610315, 0.2838199956387176, 0.28644214359444664, 0.14039318145374824, 0.12458734455005782, 0.13243109024923505, 0.11541896943869034, 0.13458123446701376, 0.13556777008772447, 0.13143475938046956, 0.14498383959028893, 0.11771953657795275, 0.10782952719408678, 0.10194356599691379, 0.10996027537112862, 0.12838534349136244, 0.1010440393477251, 0.1057679476984631, 0.10217688546118209, 0.0965650872680075, 0.12122806543291664, 0.9311536929649671, 0.9480856816933034, 0.9183349769407436, 0.9298966147180763, 0.9273895176815365, 0.8999568569469092, 0.9261080717879634, 0.9087594675702504, 0.9146953162475118, 0.17668087351593253, 0.19511019627458281, 0.18979899627791375, 0.21552952887578825, 0.18245576391610407, 0.2136782529674679, 0.2063401335037114, 0.18706435954352552, 0.2093919243388207, 0.21503687348546396, 0.22234587408888828, 0.2070107284092727, 0.27338637059567106, 0.21089425309272303, 0.23148926924417812, 0.23936082341918008, 0.24009300383223087, 0.24900514893728154, 0.11663928599060658, 0.12612700503056462, 0.13576596994377055, 0.10350640309569759, 0.13887912202085118, 0.10709713482043148, 0.12683195938588054, 0.11708985242550807, 0.1417033975463391, 0.10126102127186043, 0.09169696653579995, 0.08858949864223609, 0.1258456269793471, 0.1114364886639958, 0.12659928269590004, 0.10247999478065417, 0.0853732757251684, 0.0910208669070125, 9.999999999998899e-05, 0.005208286800597484, 0.0009053235810148053, 0.0229855725862268, 9.999999999998899e-05, 0.0017067796953910142, 9.999999999998899e-05, 0.001884176752836364, 0.0034985436599926922, 0.09457030424492296, 0.1019101708866168, 0.1048798245253405, 0.05346874546705316, 0.06472240441502985, 0.06312337170687476, 0.11909184222086766, 0.10883674673977295, 0.08631660726302193, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002695540513678263, 9.999999999998899e-05, 9.999999999998899e-05, 0.013190103410083642, 0.0745661276919305, 0.06523192885056528, 0.07422658193236908, 0.08776630591039125, 0.09114034189975251, 0.07734958953810256, 0.07088564018705423, 0.08320465811829858, 0.09118812025162282, 0.3960111152688973, 0.40634910667100677, 0.40934839877828544, 0.3878070003516606, 0.41912145804822254, 0.40190458370673354, 0.4022771866585968, 0.4004229395173293, 0.3826778780608724, 0.08106905641982465, 0.09578246002286794, 0.08272153438156726, 0.09372954433461511, 0.0846467932449928, 0.08331532097817251, 0.08296618538346834, 0.06318930475473228, 0.07284283995785956, 0.15023752925009481, 0.13432307353723938, 0.18287354153650703, 0.13433260682181136, 0.12892631771752638, 0.1504581468394841, 0.12426468412724423, 0.15431023733535332, 0.14725554466792, 0.2380582178860965, 0.22344857917103822, 0.24106478929994546, 0.22886105250697464, 0.2347474367654674, 0.2292269413426128, 0.24779364791665726, 0.2530050153171929, 0.2464102239448145, 0.16855025609561525, 0.16270215917647857, 0.1675702095263728, 0.16545712664397216, 0.1558851357318506, 0.14163647527144063, 0.17351114647290033, 0.18655476849795383, 0.16736010787818634, 0.18452175551054784, 0.19906005415003247, 0.1907399981537553, 0.17132095941765524, 0.17375686277887636, 0.16764255608677725, 0.18906675454143274, 0.16940163986731982, 0.17260774850356753, 0.17615888783443967, 0.1827080994020096, 0.19075903997379606, 0.18987772492549004, 0.18908683898828005, 0.17813245112284692, 0.19061514882341635, 0.1782159884738247, 0.1869646648107377, 0.18739890507254608, 0.2820254711772848, 0.2107955228867452, 0.1612185559573851, 0.15361089862194421, 0.3164349883205728, 0.21897513931998447, 0.19655088683563504, 0.2251516225538801, 0.16831613177249705, 0.21203343645076334, 0.19287057218210246, 0.22290130768993377, 0.1430704560434759, 0.15538287085949265, 0.23175801510041338, 0.27195715240809903, 0.2028409808787187, 0.1813850759093456, 0.1960208252821658, 0.1919681278450679, 0.18023280115286722, 0.17922791136048777, 0.17810653877857074, 0.1872051339089068, 0.20270167750531987, 0.19184922206466626, 0.07102467447198302, 0.07504859021261856, 0.07018322606378802, 0.0682341081918928, 0.07728654730633533, 0.06854222172096902, 0.06930397256153098, 0.07850790945930697, 0.06605601649989712]}, "mutation_prompt": null}
{"id": "bdd0e42a-cfd9-41cd-9f2a-fb642df96285", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand()\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced the local search method by adjusting the perturbation distribution for improved exploitation.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f4d29b1-4900-4a65-99c1-5f5f7ab4f2a3", "metadata": {"aucs": [0.5977945608725783, 0.5649253790368298, 0.5547586243264644, 0.5545112434210787, 0.5958695191227215, 0.5516642418476351, 0.5706820135014563, 0.6039520684103135, 0.5936529217667671, 0.28266649108394026, 0.2680247504545902, 0.28729805389010066, 0.25140324926884183, 0.2716511076529712, 0.26859800460264005, 0.2837395627631778, 0.2816418131858528, 0.2907376085478308, 0.1313636979669629, 0.12879658631196766, 0.12376560057194552, 0.12067442920557192, 0.1325695600696899, 0.12693583542764186, 0.13784837906474112, 0.11480170232094045, 0.12342573647393618, 0.12137372643581112, 0.10495978299775888, 0.11887275950873777, 0.1363874764423666, 0.1161297289588139, 0.11512413373514796, 0.11307346512489935, 0.1040293463879276, 0.10508259634570327, 0.9215386122025896, 0.9182963004191218, 0.9457609238284014, 0.9687810702955798, 0.9295350305711236, 0.9514454914532138, 0.9464906883234139, 0.9252229337662891, 0.9425016636696757, 0.20800440416742894, 0.18752166855635755, 0.1945441061898655, 0.2076453023550907, 0.21466775069384136, 0.2393731907060469, 0.20808155125872752, 0.22146210539861322, 0.20577309594665893, 0.21712266877029873, 0.26398950174079383, 0.23726074504918349, 0.29839054797348286, 0.2291335929564402, 0.25483004714545365, 0.22695789436122205, 0.2207435322037441, 0.24182523438132908, 0.14519194411121383, 0.13521661468526014, 0.1286434998327688, 0.14278566269397963, 0.13952074326718844, 0.13421095998522792, 0.13213443637969158, 0.1385589787288567, 0.14977307202495727, 0.09378560944417491, 0.10344503507184233, 0.08534048350595747, 0.13026798667046224, 0.119951330690242, 0.12352436423977142, 0.11853209493562822, 0.09714839213704562, 0.11479210458277556, 0.008894547652279261, 0.0016431557920763007, 0.0037883872960432496, 0.0008581502322433376, 0.00011764509928180455, 0.0008872990983254114, 0.0018097019248407564, 0.014294164570328949, 0.007075902860570249, 0.10767432257094, 0.1121469817071753, 0.10333066639142785, 0.10211471145148787, 0.08219621082475204, 0.09958340242052399, 0.1412150176914745, 0.14402219665208926, 0.12051092703116684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006835872571287149, 0.0014989838970431713, 0.08661626036939285, 0.09297412008532124, 0.0827281053336566, 0.1068278063532474, 0.08045318288248016, 0.07846592276330777, 0.07973023000469837, 0.0872454612448309, 0.09569898480967332, 0.40438741954366264, 0.40677168761005156, 0.4046389762406909, 0.42057833315234217, 0.4150758486809505, 0.3964716708519249, 0.41806109032251104, 0.39750380126769846, 0.3967804218006581, 0.07957422478375942, 0.0955674597384576, 0.09817701558700376, 0.08255233306619758, 0.08462799179934666, 0.08014554368451476, 0.07902693655214899, 0.09117255513361011, 0.07372695120272532, 0.12432336255897314, 0.12181232366789574, 0.13622249424788335, 0.12829320675989142, 0.13904100748007497, 0.1423720003136052, 0.1356011941665991, 0.16198382884184326, 0.13738514128334522, 0.23103719648997678, 0.22743347101934286, 0.23083972800700603, 0.22308339050639403, 0.24407316384771338, 0.22921805485829228, 0.25056360446431414, 0.2524538494165931, 0.2533000674949467, 0.17317701231972482, 0.17246913148310905, 0.15876775138049548, 0.1689173676288207, 0.16847470129936704, 0.17182517544409626, 0.16638595242400656, 0.18360630359802044, 0.17831070461413545, 0.18036714262133613, 0.18035205924786113, 0.1725890431765762, 0.17553722835385066, 0.16508372564822604, 0.18358632066288194, 0.19722882033316724, 0.19316316561641278, 0.18727035618751753, 0.198169848119083, 0.18744113417507957, 0.17764570374556077, 0.18695254345338563, 0.1848141483596627, 0.18508848624085472, 0.19162350399391226, 0.18116072480840062, 0.18794031613866835, 0.258161356101128, 0.1647334625900887, 0.2221816037677855, 0.21988568991473323, 0.19769072917407504, 0.1982565295255212, 0.19099460782217792, 0.1628949173652734, 0.1846251442144834, 0.1556577315477774, 0.16517900230213745, 0.18446016632451778, 0.18731659745360607, 0.17593131290400088, 0.2073704009212226, 0.2547847118854293, 0.3402525609815823, 0.20310796488732275, 0.1864997958732041, 0.17764753104528486, 0.18366580787147735, 0.18835311256020537, 0.20330811199470966, 0.1849438600405372, 0.18159625451076844, 0.20433930626829677, 0.17190081281669323, 0.06696549370208726, 0.06314215283408608, 0.06749212705559315, 0.07543872729599022, 0.07317129960932767, 0.07933095161617798, 0.07010079955933668, 0.08694363680601458, 0.07099697253253545]}, "mutation_prompt": null}
{"id": "911245c8-92eb-4faa-9dcd-66b2feb7c825", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand()\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced the local search method by adjusting the perturbation distribution for improved exploitation.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f4d29b1-4900-4a65-99c1-5f5f7ab4f2a3", "metadata": {"aucs": [0.5977945608725783, 0.5649253790368298, 0.5547586243264644, 0.5545112434210787, 0.5958695191227215, 0.5516642418476351, 0.5706820135014563, 0.6039520684103135, 0.5936529217667671, 0.28266649108394026, 0.2680247504545902, 0.28729805389010066, 0.25140324926884183, 0.2716511076529712, 0.26859800460264005, 0.2837395627631778, 0.2816418131858528, 0.2907376085478308, 0.1313636979669629, 0.12879658631196766, 0.12376560057194552, 0.12067442920557192, 0.1325695600696899, 0.12693583542764186, 0.13784837906474112, 0.11480170232094045, 0.12342573647393618, 0.12137372643581112, 0.10495978299775888, 0.11887275950873777, 0.1363874764423666, 0.1161297289588139, 0.11512413373514796, 0.11307346512489935, 0.1040293463879276, 0.10508259634570327, 0.9215386122025896, 0.9182963004191218, 0.9457609238284014, 0.9687810702955798, 0.9295350305711236, 0.9514454914532138, 0.9464906883234139, 0.9252229337662891, 0.9425016636696757, 0.20800440416742894, 0.18752166855635755, 0.1945441061898655, 0.2076453023550907, 0.21466775069384136, 0.2393731907060469, 0.20808155125872752, 0.22146210539861322, 0.20577309594665893, 0.21712266877029873, 0.26398950174079383, 0.23726074504918349, 0.29839054797348286, 0.2291335929564402, 0.25483004714545365, 0.22695789436122205, 0.2207435322037441, 0.24182523438132908, 0.14519194411121383, 0.13521661468526014, 0.1286434998327688, 0.14278566269397963, 0.13952074326718844, 0.13421095998522792, 0.13213443637969158, 0.1385589787288567, 0.14977307202495727, 0.09378560944417491, 0.10344503507184233, 0.08534048350595747, 0.13026798667046224, 0.119951330690242, 0.12352436423977142, 0.11853209493562822, 0.09714839213704562, 0.11479210458277556, 0.008894547652279261, 0.0016431557920763007, 0.0037883872960432496, 0.0008581502322433376, 0.00011764509928180455, 0.0008872990983254114, 0.0018097019248407564, 0.014294164570328949, 0.007075902860570249, 0.10767432257094, 0.1121469817071753, 0.10333066639142785, 0.10211471145148787, 0.08219621082475204, 0.09958340242052399, 0.1412150176914745, 0.14402219665208926, 0.12051092703116684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006835872571287149, 0.0014989838970431713, 0.08661626036939285, 0.09297412008532124, 0.0827281053336566, 0.1068278063532474, 0.08045318288248016, 0.07846592276330777, 0.07973023000469837, 0.0872454612448309, 0.09569898480967332, 0.40438741954366264, 0.40677168761005156, 0.4046389762406909, 0.42057833315234217, 0.4150758486809505, 0.3964716708519249, 0.41806109032251104, 0.39750380126769846, 0.3967804218006581, 0.07957422478375942, 0.0955674597384576, 0.09817701558700376, 0.08255233306619758, 0.08462799179934666, 0.08014554368451476, 0.07902693655214899, 0.09117255513361011, 0.07372695120272532, 0.12432336255897314, 0.12181232366789574, 0.13622249424788335, 0.12829320675989142, 0.13904100748007497, 0.1423720003136052, 0.1356011941665991, 0.16198382884184326, 0.13738514128334522, 0.23103719648997678, 0.22743347101934286, 0.23083972800700603, 0.22308339050639403, 0.24407316384771338, 0.22921805485829228, 0.25056360446431414, 0.2524538494165931, 0.2533000674949467, 0.17317701231972482, 0.17246913148310905, 0.15876775138049548, 0.1689173676288207, 0.16847470129936704, 0.17182517544409626, 0.16638595242400656, 0.18360630359802044, 0.17831070461413545, 0.18036714262133613, 0.18035205924786113, 0.1725890431765762, 0.17553722835385066, 0.16508372564822604, 0.18358632066288194, 0.19722882033316724, 0.19316316561641278, 0.18727035618751753, 0.198169848119083, 0.18744113417507957, 0.17764570374556077, 0.18695254345338563, 0.1848141483596627, 0.18508848624085472, 0.19162350399391226, 0.18116072480840062, 0.18794031613866835, 0.258161356101128, 0.1647334625900887, 0.2221816037677855, 0.21988568991473323, 0.19769072917407504, 0.1982565295255212, 0.19099460782217792, 0.1628949173652734, 0.1846251442144834, 0.1556577315477774, 0.16517900230213745, 0.18446016632451778, 0.18731659745360607, 0.17593131290400088, 0.2073704009212226, 0.2547847118854293, 0.3402525609815823, 0.20310796488732275, 0.1864997958732041, 0.17764753104528486, 0.18366580787147735, 0.18835311256020537, 0.20330811199470966, 0.1849438600405372, 0.18159625451076844, 0.20433930626829677, 0.17190081281669323, 0.06696549370208726, 0.06314215283408608, 0.06749212705559315, 0.07543872729599022, 0.07317129960932767, 0.07933095161617798, 0.07010079955933668, 0.08694363680601458, 0.07099697253253545]}, "mutation_prompt": null}
{"id": "647b1079-fd3a-4964-b16a-c154b0af939c", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand()\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced the local search method by adjusting the perturbation distribution for improved exploitation.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f4d29b1-4900-4a65-99c1-5f5f7ab4f2a3", "metadata": {"aucs": [0.5977945608725783, 0.5649253790368298, 0.5547586243264644, 0.5545112434210787, 0.5958695191227215, 0.5516642418476351, 0.5706820135014563, 0.6039520684103135, 0.5936529217667671, 0.28266649108394026, 0.2680247504545902, 0.28729805389010066, 0.25140324926884183, 0.2716511076529712, 0.26859800460264005, 0.2837395627631778, 0.2816418131858528, 0.2907376085478308, 0.1313636979669629, 0.12879658631196766, 0.12376560057194552, 0.12067442920557192, 0.1325695600696899, 0.12693583542764186, 0.13784837906474112, 0.11480170232094045, 0.12342573647393618, 0.12137372643581112, 0.10495978299775888, 0.11887275950873777, 0.1363874764423666, 0.1161297289588139, 0.11512413373514796, 0.11307346512489935, 0.1040293463879276, 0.10508259634570327, 0.9215386122025896, 0.9182963004191218, 0.9457609238284014, 0.9687810702955798, 0.9295350305711236, 0.9514454914532138, 0.9464906883234139, 0.9252229337662891, 0.9425016636696757, 0.20800440416742894, 0.18752166855635755, 0.1945441061898655, 0.2076453023550907, 0.21466775069384136, 0.2393731907060469, 0.20808155125872752, 0.22146210539861322, 0.20577309594665893, 0.21712266877029873, 0.26398950174079383, 0.23726074504918349, 0.29839054797348286, 0.2291335929564402, 0.25483004714545365, 0.22695789436122205, 0.2207435322037441, 0.24182523438132908, 0.14519194411121383, 0.13521661468526014, 0.1286434998327688, 0.14278566269397963, 0.13952074326718844, 0.13421095998522792, 0.13213443637969158, 0.1385589787288567, 0.14977307202495727, 0.09378560944417491, 0.10344503507184233, 0.08534048350595747, 0.13026798667046224, 0.119951330690242, 0.12352436423977142, 0.11853209493562822, 0.09714839213704562, 0.11479210458277556, 0.008894547652279261, 0.0016431557920763007, 0.0037883872960432496, 0.0008581502322433376, 0.00011764509928180455, 0.0008872990983254114, 0.0018097019248407564, 0.014294164570328949, 0.007075902860570249, 0.10767432257094, 0.1121469817071753, 0.10333066639142785, 0.10211471145148787, 0.08219621082475204, 0.09958340242052399, 0.1412150176914745, 0.14402219665208926, 0.12051092703116684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006835872571287149, 0.0014989838970431713, 0.08661626036939285, 0.09297412008532124, 0.0827281053336566, 0.1068278063532474, 0.08045318288248016, 0.07846592276330777, 0.07973023000469837, 0.0872454612448309, 0.09569898480967332, 0.40438741954366264, 0.40677168761005156, 0.4046389762406909, 0.42057833315234217, 0.4150758486809505, 0.3964716708519249, 0.41806109032251104, 0.39750380126769846, 0.3967804218006581, 0.07957422478375942, 0.0955674597384576, 0.09817701558700376, 0.08255233306619758, 0.08462799179934666, 0.08014554368451476, 0.07902693655214899, 0.09117255513361011, 0.07372695120272532, 0.12432336255897314, 0.12181232366789574, 0.13622249424788335, 0.12829320675989142, 0.13904100748007497, 0.1423720003136052, 0.1356011941665991, 0.16198382884184326, 0.13738514128334522, 0.23103719648997678, 0.22743347101934286, 0.23083972800700603, 0.22308339050639403, 0.24407316384771338, 0.22921805485829228, 0.25056360446431414, 0.2524538494165931, 0.2533000674949467, 0.17317701231972482, 0.17246913148310905, 0.15876775138049548, 0.1689173676288207, 0.16847470129936704, 0.17182517544409626, 0.16638595242400656, 0.18360630359802044, 0.17831070461413545, 0.18036714262133613, 0.18035205924786113, 0.1725890431765762, 0.17553722835385066, 0.16508372564822604, 0.18358632066288194, 0.19722882033316724, 0.19316316561641278, 0.18727035618751753, 0.198169848119083, 0.18744113417507957, 0.17764570374556077, 0.18695254345338563, 0.1848141483596627, 0.18508848624085472, 0.19162350399391226, 0.18116072480840062, 0.18794031613866835, 0.258161356101128, 0.1647334625900887, 0.2221816037677855, 0.21988568991473323, 0.19769072917407504, 0.1982565295255212, 0.19099460782217792, 0.1628949173652734, 0.1846251442144834, 0.1556577315477774, 0.16517900230213745, 0.18446016632451778, 0.18731659745360607, 0.17593131290400088, 0.2073704009212226, 0.2547847118854293, 0.3402525609815823, 0.20310796488732275, 0.1864997958732041, 0.17764753104528486, 0.18366580787147735, 0.18835311256020537, 0.20330811199470966, 0.1849438600405372, 0.18159625451076844, 0.20433930626829677, 0.17190081281669323, 0.06696549370208726, 0.06314215283408608, 0.06749212705559315, 0.07543872729599022, 0.07317129960932767, 0.07933095161617798, 0.07010079955933668, 0.08694363680601458, 0.07099697253253545]}, "mutation_prompt": null}
{"id": "3de1e418-9e89-4f57-97ed-a87a5bec6be5", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand()\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n                # Dynamic scaling based on fitness improvement trend\n                if trial_fitness < best_fitness:\n                    F_adaptive *= 1.1  # Increase step size if fitness improves\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Introduced adaptive mutation step size through dynamic scaling based on fitness improvement trend.", "configspace": "", "generation": 14, "fitness": 0.2088962685520912, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "0f4d29b1-4900-4a65-99c1-5f5f7ab4f2a3", "metadata": {"aucs": [0.5977945608725783, 0.5649253790368298, 0.5547586243264644, 0.5545112434210787, 0.5958695191227215, 0.5516642418476351, 0.5706820135014563, 0.6039520684103135, 0.5936529217667671, 0.28266649108394026, 0.2680247504545902, 0.28729805389010066, 0.25140324926884183, 0.2716511076529712, 0.26859800460264005, 0.2837395627631778, 0.2816418131858528, 0.2907376085478308, 0.1313636979669629, 0.12879658631196766, 0.12376560057194552, 0.12067442920557192, 0.1325695600696899, 0.12693583542764186, 0.13784837906474112, 0.11480170232094045, 0.12342573647393618, 0.12137372643581112, 0.10495978299775888, 0.11887275950873777, 0.1363874764423666, 0.1161297289588139, 0.11512413373514796, 0.11307346512489935, 0.1040293463879276, 0.10508259634570327, 0.9215386122025896, 0.9182963004191218, 0.9457609238284014, 0.9687810702955798, 0.9295350305711236, 0.9514454914532138, 0.9464906883234139, 0.9252229337662891, 0.9425016636696757, 0.20800440416742894, 0.18752166855635755, 0.1945441061898655, 0.2076453023550907, 0.21466775069384136, 0.2393731907060469, 0.20808155125872752, 0.22146210539861322, 0.20577309594665893, 0.21712266877029873, 0.26398950174079383, 0.23726074504918349, 0.29839054797348286, 0.2291335929564402, 0.25483004714545365, 0.22695789436122205, 0.2207435322037441, 0.24182523438132908, 0.14519194411121383, 0.13521661468526014, 0.1286434998327688, 0.14278566269397963, 0.13952074326718844, 0.13421095998522792, 0.13213443637969158, 0.1385589787288567, 0.14977307202495727, 0.09378560944417491, 0.10344503507184233, 0.08534048350595747, 0.13026798667046224, 0.119951330690242, 0.12352436423977142, 0.11853209493562822, 0.09714839213704562, 0.11479210458277556, 0.008894547652279261, 0.0016431557920763007, 0.0037883872960432496, 0.0008581502322433376, 0.00011764509928180455, 0.0008872990983254114, 0.0018097019248407564, 0.014294164570328949, 0.007075902860570249, 0.10767432257094, 0.1121469817071753, 0.10333066639142785, 0.10211471145148787, 0.08219621082475204, 0.09958340242052399, 0.1412150176914745, 0.14402219665208926, 0.12051092703116684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006835872571287149, 0.0014989838970431713, 0.08661626036939285, 0.09297412008532124, 0.0827281053336566, 0.1068278063532474, 0.08045318288248016, 0.07846592276330777, 0.07973023000469837, 0.0872454612448309, 0.09569898480967332, 0.40438741954366264, 0.40677168761005156, 0.4046389762406909, 0.42057833315234217, 0.4150758486809505, 0.3964716708519249, 0.41806109032251104, 0.39750380126769846, 0.3967804218006581, 0.07957422478375942, 0.0955674597384576, 0.09817701558700376, 0.08255233306619758, 0.08462799179934666, 0.08014554368451476, 0.07902693655214899, 0.09117255513361011, 0.07372695120272532, 0.12432336255897314, 0.12181232366789574, 0.13622249424788335, 0.12829320675989142, 0.13904100748007497, 0.1423720003136052, 0.1356011941665991, 0.16198382884184326, 0.13738514128334522, 0.23103719648997678, 0.22743347101934286, 0.23083972800700603, 0.22308339050639403, 0.24407316384771338, 0.22921805485829228, 0.25056360446431414, 0.2524538494165931, 0.2533000674949467, 0.17317701231972482, 0.17246913148310905, 0.15876775138049548, 0.1689173676288207, 0.16847470129936704, 0.17182517544409626, 0.16638595242400656, 0.18360630359802044, 0.17831070461413545, 0.18036714262133613, 0.18035205924786113, 0.1725890431765762, 0.17553722835385066, 0.16508372564822604, 0.18358632066288194, 0.19722882033316724, 0.19316316561641278, 0.18727035618751753, 0.198169848119083, 0.18744113417507957, 0.17764570374556077, 0.18695254345338563, 0.1848141483596627, 0.18508848624085472, 0.19162350399391226, 0.18116072480840062, 0.18794031613866835, 0.258161356101128, 0.1647334625900887, 0.2221816037677855, 0.21988568991473323, 0.19769072917407504, 0.1982565295255212, 0.19099460782217792, 0.1628949173652734, 0.1846251442144834, 0.1556577315477774, 0.16517900230213745, 0.18446016632451778, 0.18731659745360607, 0.17593131290400088, 0.2073704009212226, 0.2547847118854293, 0.3402525609815823, 0.20310796488732275, 0.1864997958732041, 0.17764753104528486, 0.18366580787147735, 0.18835311256020537, 0.20330811199470966, 0.1849438600405372, 0.18159625451076844, 0.20433930626829677, 0.17190081281669323, 0.06696549370208726, 0.06314215283408608, 0.06749212705559315, 0.07543872729599022, 0.07317129960932767, 0.07933095161617798, 0.07010079955933668, 0.08694363680601458, 0.07099697253253545]}, "mutation_prompt": null}
{"id": "2df510d7-1b39-4ee5-a2a4-c61026b6049e", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand()\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced the local search method by adjusting the perturbation distribution for improved exploitation.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f4d29b1-4900-4a65-99c1-5f5f7ab4f2a3", "metadata": {"aucs": [0.5977945608725783, 0.5649253790368298, 0.5547586243264644, 0.5545112434210787, 0.5958695191227215, 0.5516642418476351, 0.5706820135014563, 0.6039520684103135, 0.5936529217667671, 0.28266649108394026, 0.2680247504545902, 0.28729805389010066, 0.25140324926884183, 0.2716511076529712, 0.26859800460264005, 0.2837395627631778, 0.2816418131858528, 0.2907376085478308, 0.1313636979669629, 0.12879658631196766, 0.12376560057194552, 0.12067442920557192, 0.1325695600696899, 0.12693583542764186, 0.13784837906474112, 0.11480170232094045, 0.12342573647393618, 0.12137372643581112, 0.10495978299775888, 0.11887275950873777, 0.1363874764423666, 0.1161297289588139, 0.11512413373514796, 0.11307346512489935, 0.1040293463879276, 0.10508259634570327, 0.9215386122025896, 0.9182963004191218, 0.9457609238284014, 0.9687810702955798, 0.9295350305711236, 0.9514454914532138, 0.9464906883234139, 0.9252229337662891, 0.9425016636696757, 0.20800440416742894, 0.18752166855635755, 0.1945441061898655, 0.2076453023550907, 0.21466775069384136, 0.2393731907060469, 0.20808155125872752, 0.22146210539861322, 0.20577309594665893, 0.21712266877029873, 0.26398950174079383, 0.23726074504918349, 0.29839054797348286, 0.2291335929564402, 0.25483004714545365, 0.22695789436122205, 0.2207435322037441, 0.24182523438132908, 0.14519194411121383, 0.13521661468526014, 0.1286434998327688, 0.14278566269397963, 0.13952074326718844, 0.13421095998522792, 0.13213443637969158, 0.1385589787288567, 0.14977307202495727, 0.09378560944417491, 0.10344503507184233, 0.08534048350595747, 0.13026798667046224, 0.119951330690242, 0.12352436423977142, 0.11853209493562822, 0.09714839213704562, 0.11479210458277556, 0.008894547652279261, 0.0016431557920763007, 0.0037883872960432496, 0.0008581502322433376, 0.00011764509928180455, 0.0008872990983254114, 0.0018097019248407564, 0.014294164570328949, 0.007075902860570249, 0.10767432257094, 0.1121469817071753, 0.10333066639142785, 0.10211471145148787, 0.08219621082475204, 0.09958340242052399, 0.1412150176914745, 0.14402219665208926, 0.12051092703116684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006835872571287149, 0.0014989838970431713, 0.08661626036939285, 0.09297412008532124, 0.0827281053336566, 0.1068278063532474, 0.08045318288248016, 0.07846592276330777, 0.07973023000469837, 0.0872454612448309, 0.09569898480967332, 0.40438741954366264, 0.40677168761005156, 0.4046389762406909, 0.42057833315234217, 0.4150758486809505, 0.3964716708519249, 0.41806109032251104, 0.39750380126769846, 0.3967804218006581, 0.07957422478375942, 0.0955674597384576, 0.09817701558700376, 0.08255233306619758, 0.08462799179934666, 0.08014554368451476, 0.07902693655214899, 0.09117255513361011, 0.07372695120272532, 0.12432336255897314, 0.12181232366789574, 0.13622249424788335, 0.12829320675989142, 0.13904100748007497, 0.1423720003136052, 0.1356011941665991, 0.16198382884184326, 0.13738514128334522, 0.23103719648997678, 0.22743347101934286, 0.23083972800700603, 0.22308339050639403, 0.24407316384771338, 0.22921805485829228, 0.25056360446431414, 0.2524538494165931, 0.2533000674949467, 0.17317701231972482, 0.17246913148310905, 0.15876775138049548, 0.1689173676288207, 0.16847470129936704, 0.17182517544409626, 0.16638595242400656, 0.18360630359802044, 0.17831070461413545, 0.18036714262133613, 0.18035205924786113, 0.1725890431765762, 0.17553722835385066, 0.16508372564822604, 0.18358632066288194, 0.19722882033316724, 0.19316316561641278, 0.18727035618751753, 0.198169848119083, 0.18744113417507957, 0.17764570374556077, 0.18695254345338563, 0.1848141483596627, 0.18508848624085472, 0.19162350399391226, 0.18116072480840062, 0.18794031613866835, 0.258161356101128, 0.1647334625900887, 0.2221816037677855, 0.21988568991473323, 0.19769072917407504, 0.1982565295255212, 0.19099460782217792, 0.1628949173652734, 0.1846251442144834, 0.1556577315477774, 0.16517900230213745, 0.18446016632451778, 0.18731659745360607, 0.17593131290400088, 0.2073704009212226, 0.2547847118854293, 0.3402525609815823, 0.20310796488732275, 0.1864997958732041, 0.17764753104528486, 0.18366580787147735, 0.18835311256020537, 0.20330811199470966, 0.1849438600405372, 0.18159625451076844, 0.20433930626829677, 0.17190081281669323, 0.06696549370208726, 0.06314215283408608, 0.06749212705559315, 0.07543872729599022, 0.07317129960932767, 0.07933095161617798, 0.07010079955933668, 0.08694363680601458, 0.07099697253253545]}, "mutation_prompt": null}
{"id": "78769807-1b5d-4bb2-ba39-e1073d6c1e31", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand()\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced the local search method by adjusting the perturbation distribution for improved exploitation.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f4d29b1-4900-4a65-99c1-5f5f7ab4f2a3", "metadata": {"aucs": [0.5977945608725783, 0.5649253790368298, 0.5547586243264644, 0.5545112434210787, 0.5958695191227215, 0.5516642418476351, 0.5706820135014563, 0.6039520684103135, 0.5936529217667671, 0.28266649108394026, 0.2680247504545902, 0.28729805389010066, 0.25140324926884183, 0.2716511076529712, 0.26859800460264005, 0.2837395627631778, 0.2816418131858528, 0.2907376085478308, 0.1313636979669629, 0.12879658631196766, 0.12376560057194552, 0.12067442920557192, 0.1325695600696899, 0.12693583542764186, 0.13784837906474112, 0.11480170232094045, 0.12342573647393618, 0.12137372643581112, 0.10495978299775888, 0.11887275950873777, 0.1363874764423666, 0.1161297289588139, 0.11512413373514796, 0.11307346512489935, 0.1040293463879276, 0.10508259634570327, 0.9215386122025896, 0.9182963004191218, 0.9457609238284014, 0.9687810702955798, 0.9295350305711236, 0.9514454914532138, 0.9464906883234139, 0.9252229337662891, 0.9425016636696757, 0.20800440416742894, 0.18752166855635755, 0.1945441061898655, 0.2076453023550907, 0.21466775069384136, 0.2393731907060469, 0.20808155125872752, 0.22146210539861322, 0.20577309594665893, 0.21712266877029873, 0.26398950174079383, 0.23726074504918349, 0.29839054797348286, 0.2291335929564402, 0.25483004714545365, 0.22695789436122205, 0.2207435322037441, 0.24182523438132908, 0.14519194411121383, 0.13521661468526014, 0.1286434998327688, 0.14278566269397963, 0.13952074326718844, 0.13421095998522792, 0.13213443637969158, 0.1385589787288567, 0.14977307202495727, 0.09378560944417491, 0.10344503507184233, 0.08534048350595747, 0.13026798667046224, 0.119951330690242, 0.12352436423977142, 0.11853209493562822, 0.09714839213704562, 0.11479210458277556, 0.008894547652279261, 0.0016431557920763007, 0.0037883872960432496, 0.0008581502322433376, 0.00011764509928180455, 0.0008872990983254114, 0.0018097019248407564, 0.014294164570328949, 0.007075902860570249, 0.10767432257094, 0.1121469817071753, 0.10333066639142785, 0.10211471145148787, 0.08219621082475204, 0.09958340242052399, 0.1412150176914745, 0.14402219665208926, 0.12051092703116684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006835872571287149, 0.0014989838970431713, 0.08661626036939285, 0.09297412008532124, 0.0827281053336566, 0.1068278063532474, 0.08045318288248016, 0.07846592276330777, 0.07973023000469837, 0.0872454612448309, 0.09569898480967332, 0.40438741954366264, 0.40677168761005156, 0.4046389762406909, 0.42057833315234217, 0.4150758486809505, 0.3964716708519249, 0.41806109032251104, 0.39750380126769846, 0.3967804218006581, 0.07957422478375942, 0.0955674597384576, 0.09817701558700376, 0.08255233306619758, 0.08462799179934666, 0.08014554368451476, 0.07902693655214899, 0.09117255513361011, 0.07372695120272532, 0.12432336255897314, 0.12181232366789574, 0.13622249424788335, 0.12829320675989142, 0.13904100748007497, 0.1423720003136052, 0.1356011941665991, 0.16198382884184326, 0.13738514128334522, 0.23103719648997678, 0.22743347101934286, 0.23083972800700603, 0.22308339050639403, 0.24407316384771338, 0.22921805485829228, 0.25056360446431414, 0.2524538494165931, 0.2533000674949467, 0.17317701231972482, 0.17246913148310905, 0.15876775138049548, 0.1689173676288207, 0.16847470129936704, 0.17182517544409626, 0.16638595242400656, 0.18360630359802044, 0.17831070461413545, 0.18036714262133613, 0.18035205924786113, 0.1725890431765762, 0.17553722835385066, 0.16508372564822604, 0.18358632066288194, 0.19722882033316724, 0.19316316561641278, 0.18727035618751753, 0.198169848119083, 0.18744113417507957, 0.17764570374556077, 0.18695254345338563, 0.1848141483596627, 0.18508848624085472, 0.19162350399391226, 0.18116072480840062, 0.18794031613866835, 0.258161356101128, 0.1647334625900887, 0.2221816037677855, 0.21988568991473323, 0.19769072917407504, 0.1982565295255212, 0.19099460782217792, 0.1628949173652734, 0.1846251442144834, 0.1556577315477774, 0.16517900230213745, 0.18446016632451778, 0.18731659745360607, 0.17593131290400088, 0.2073704009212226, 0.2547847118854293, 0.3402525609815823, 0.20310796488732275, 0.1864997958732041, 0.17764753104528486, 0.18366580787147735, 0.18835311256020537, 0.20330811199470966, 0.1849438600405372, 0.18159625451076844, 0.20433930626829677, 0.17190081281669323, 0.06696549370208726, 0.06314215283408608, 0.06749212705559315, 0.07543872729599022, 0.07317129960932767, 0.07933095161617798, 0.07010079955933668, 0.08694363680601458, 0.07099697253253545]}, "mutation_prompt": null}
{"id": "e728c9fe-bfe2-417a-9f5a-260f954da78d", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved adaptive crossover probability for better exploration-exploitation balance.", "configspace": "", "generation": 17, "fitness": 0.22168881493104262, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "0f4d29b1-4900-4a65-99c1-5f5f7ab4f2a3", "metadata": {"aucs": [0.6033982926394796, 0.6205719623049389, 0.632007585151622, 0.6592919675402897, 0.6660666079872342, 0.6738060767128663, 0.6681443802130234, 0.653052685252774, 0.6422637151150379, 0.3632829146386347, 0.3867098734233789, 0.3749398785782633, 0.3950644734080785, 0.3892767247302843, 0.42271344239765296, 0.38219883003906996, 0.3757495061944951, 0.3775005853875306, 0.12226901702618687, 0.13883271912067463, 0.11510687385996721, 0.11449323233465025, 0.11488408738118794, 0.12093944325382577, 0.12084393286158213, 0.12271774405213287, 0.12286108467595935, 0.10973319004198401, 0.12005243572676094, 0.12254762908190586, 0.12150478719329172, 0.10530596544688942, 0.11864619577242397, 0.11220395658969395, 0.11601194064373099, 0.11061317270834403, 0.9440153941917231, 0.943513054850906, 0.9315714084780329, 0.9301458894265214, 0.9320398841760953, 0.9561462771851785, 0.938514753065278, 0.9268080760546911, 0.9649909709910134, 0.22265800386308654, 0.20940702551422385, 0.24848201047513618, 0.22719912665534436, 0.22816890289310698, 0.2383798410876865, 0.23012296306243962, 0.23871964387855793, 0.24496074729354056, 0.24763140902751146, 0.25140526424108023, 0.22437785242423702, 0.375778164599912, 0.23500978091636449, 0.2670322912143166, 0.2419388335493039, 0.2842618878663491, 0.4097216563249657, 0.1373801058991294, 0.14009932455274843, 0.12551953747159295, 0.14545581974867805, 0.14712133384533788, 0.13131588221065738, 0.13717786393270948, 0.15621397825399985, 0.1558833159121754, 0.11446624412283868, 0.08849685779304017, 0.09238167393066665, 0.1400297350865587, 0.14249256988955117, 0.13800281683945037, 0.11256334187566175, 0.12117792199550936, 0.1198696685883317, 0.00561506043620752, 0.00414686788967189, 0.0010967657122351593, 0.020257422504852518, 0.0023396205582312257, 0.005205140869367408, 0.002523576281676654, 0.00534997849720964, 0.004788487316754297, 0.08898444171001085, 0.10690064468135352, 0.08423285178455608, 0.11635324064753605, 0.09786525153192638, 0.08430947639095154, 0.12420919619083992, 0.11717325917542143, 0.10717649290754994, 0.0002989543500876435, 0.0025726101247415256, 9.999999999998899e-05, 9.999999999998899e-05, 0.003331393671723748, 9.999999999998899e-05, 0.0010090438057981377, 0.02321720455469045, 0.03319612099848013, 0.07457031825430072, 0.08413267235843414, 0.08627538351705588, 0.10765259330029475, 0.10037702824776573, 0.1130647671804278, 0.1000121539493215, 0.09224799947055129, 0.09301198221389861, 0.39938501420103667, 0.41609945123689573, 0.43047570616571207, 0.4523384734119358, 0.42591109812966654, 0.4583769907995494, 0.4369477606703078, 0.4358699139153317, 0.4192309752490372, 0.07137062829926144, 0.08515203080651612, 0.08890066978800115, 0.08486594291951499, 0.08513757618830242, 0.10713734236857786, 0.07713736790865444, 0.08944780943905695, 0.07771769442289389, 0.13170518811226994, 0.1364638416282432, 0.13987810043086557, 0.17978480825652254, 0.1358089616013063, 0.1318493132027848, 0.14439727457033713, 0.14023900206116346, 0.13153266883568626, 0.24851933657473546, 0.2503582033718057, 0.25332970509052144, 0.22190494041110087, 0.2625613180620954, 0.21971250334695902, 0.2904906644755141, 0.29976023587463874, 0.27705134846954194, 0.1775223766017745, 0.17710178976106072, 0.17774538819036512, 0.15101782027217958, 0.18181836399611961, 0.178828922730496, 0.20027806321514185, 0.20134731370175085, 0.18051490950683258, 0.18031711620909996, 0.1841468710499985, 0.19784673830094313, 0.1877148226966996, 0.18162683349847963, 0.18607031095752147, 0.18157830547376164, 0.19267828972884338, 0.212518254677317, 0.20632912099374812, 0.1987516971882647, 0.18357329003752154, 0.1810995699413822, 0.18439882693960108, 0.18275131490031593, 0.18401694418641223, 0.1941890949908902, 0.1844165589077521, 0.19249406821521475, 0.18749909467911774, 0.1641187505637045, 0.17208705495611265, 0.15893605776786424, 0.2623488969146095, 0.1617775361572421, 0.15530161068124104, 0.16103886651209431, 0.23992638401399924, 0.1845159937133679, 0.2308039709780233, 0.17447024935460287, 0.16619676769038194, 0.23535270865463187, 0.3156678915203406, 0.19797835383125018, 0.20328866736353646, 0.18610622254214926, 0.20394295505107252, 0.18227501232839316, 0.18586158396581842, 0.18945568143349378, 0.1731373161115416, 0.17470571296644832, 0.1748096548184752, 0.18481740387443524, 0.07564836111895734, 0.06714091428769131, 0.07428788031642364, 0.0860902549167969, 0.07193384489008336, 0.06763292686655353, 0.07539521823360174, 0.06897960389323776, 0.06365776914706456]}, "mutation_prompt": null}
{"id": "2431c5dd-945c-40dc-8090-83cd6ff16e11", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.5 + 0.5\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved adaptive crossover probability for better exploration-exploitation balance.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e728c9fe-bfe2-417a-9f5a-260f954da78d", "metadata": {"aucs": [0.6033982926394796, 0.6205719623049389, 0.632007585151622, 0.6592919675402897, 0.6660666079872342, 0.6738060767128663, 0.6681443802130234, 0.653052685252774, 0.6422637151150379, 0.3632829146386347, 0.3867098734233789, 0.3749398785782633, 0.3950644734080785, 0.3892767247302843, 0.42271344239765296, 0.38219883003906996, 0.3757495061944951, 0.3775005853875306, 0.12226901702618687, 0.13883271912067463, 0.11510687385996721, 0.11449323233465025, 0.11488408738118794, 0.12093944325382577, 0.12084393286158213, 0.12271774405213287, 0.12286108467595935, 0.10973319004198401, 0.12005243572676094, 0.12254762908190586, 0.12150478719329172, 0.10530596544688942, 0.11864619577242397, 0.11220395658969395, 0.11601194064373099, 0.11061317270834403, 0.9440153941917231, 0.943513054850906, 0.9315714084780329, 0.9301458894265214, 0.9320398841760953, 0.9561462771851785, 0.938514753065278, 0.9268080760546911, 0.9649909709910134, 0.22265800386308654, 0.20940702551422385, 0.24848201047513618, 0.22719912665534436, 0.22816890289310698, 0.2383798410876865, 0.23012296306243962, 0.23871964387855793, 0.24496074729354056, 0.24763140902751146, 0.25140526424108023, 0.22437785242423702, 0.375778164599912, 0.23500978091636449, 0.2670322912143166, 0.2419388335493039, 0.2842618878663491, 0.4097216563249657, 0.1373801058991294, 0.14009932455274843, 0.12551953747159295, 0.14545581974867805, 0.14712133384533788, 0.13131588221065738, 0.13717786393270948, 0.15621397825399985, 0.1558833159121754, 0.11446624412283868, 0.08849685779304017, 0.09238167393066665, 0.1400297350865587, 0.14249256988955117, 0.13800281683945037, 0.11256334187566175, 0.12117792199550936, 0.1198696685883317, 0.00561506043620752, 0.00414686788967189, 0.0010967657122351593, 0.020257422504852518, 0.0023396205582312257, 0.005205140869367408, 0.002523576281676654, 0.00534997849720964, 0.004788487316754297, 0.08898444171001085, 0.10690064468135352, 0.08423285178455608, 0.11635324064753605, 0.09786525153192638, 0.08430947639095154, 0.12420919619083992, 0.11717325917542143, 0.10717649290754994, 0.0002989543500876435, 0.0025726101247415256, 9.999999999998899e-05, 9.999999999998899e-05, 0.003331393671723748, 9.999999999998899e-05, 0.0010090438057981377, 0.02321720455469045, 0.03319612099848013, 0.07457031825430072, 0.08413267235843414, 0.08627538351705588, 0.10765259330029475, 0.10037702824776573, 0.1130647671804278, 0.1000121539493215, 0.09224799947055129, 0.09301198221389861, 0.39938501420103667, 0.41609945123689573, 0.43047570616571207, 0.4523384734119358, 0.42591109812966654, 0.4583769907995494, 0.4369477606703078, 0.4358699139153317, 0.4192309752490372, 0.07137062829926144, 0.08515203080651612, 0.08890066978800115, 0.08486594291951499, 0.08513757618830242, 0.10713734236857786, 0.07713736790865444, 0.08944780943905695, 0.07771769442289389, 0.13170518811226994, 0.1364638416282432, 0.13987810043086557, 0.17978480825652254, 0.1358089616013063, 0.1318493132027848, 0.14439727457033713, 0.14023900206116346, 0.13153266883568626, 0.24851933657473546, 0.2503582033718057, 0.25332970509052144, 0.22190494041110087, 0.2625613180620954, 0.21971250334695902, 0.2904906644755141, 0.29976023587463874, 0.27705134846954194, 0.1775223766017745, 0.17710178976106072, 0.17774538819036512, 0.15101782027217958, 0.18181836399611961, 0.178828922730496, 0.20027806321514185, 0.20134731370175085, 0.18051490950683258, 0.18031711620909996, 0.1841468710499985, 0.19784673830094313, 0.1877148226966996, 0.18162683349847963, 0.18607031095752147, 0.18157830547376164, 0.19267828972884338, 0.212518254677317, 0.20632912099374812, 0.1987516971882647, 0.18357329003752154, 0.1810995699413822, 0.18439882693960108, 0.18275131490031593, 0.18401694418641223, 0.1941890949908902, 0.1844165589077521, 0.19249406821521475, 0.18749909467911774, 0.1641187505637045, 0.17208705495611265, 0.15893605776786424, 0.2623488969146095, 0.1617775361572421, 0.15530161068124104, 0.16103886651209431, 0.23992638401399924, 0.1845159937133679, 0.2308039709780233, 0.17447024935460287, 0.16619676769038194, 0.23535270865463187, 0.3156678915203406, 0.19797835383125018, 0.20328866736353646, 0.18610622254214926, 0.20394295505107252, 0.18227501232839316, 0.18586158396581842, 0.18945568143349378, 0.1731373161115416, 0.17470571296644832, 0.1748096548184752, 0.18481740387443524, 0.07564836111895734, 0.06714091428769131, 0.07428788031642364, 0.0860902549167969, 0.07193384489008336, 0.06763292686655353, 0.07539521823360174, 0.06897960389323776, 0.06365776914706456]}, "mutation_prompt": null}
{"id": "7937aff7-5e62-4f99-8107-f4490977b06c", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.3 + 0.7  # Modified the adaptive mutation factor\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced adaptive mutation strategy for balanced exploration and exploitation.", "configspace": "", "generation": 19, "fitness": 0.2058333286602552, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "e728c9fe-bfe2-417a-9f5a-260f954da78d", "metadata": {"aucs": [0.5757325362401515, 0.5565450229814864, 0.561169922143967, 0.5660439149364955, 0.6236883106530178, 0.558279674715376, 0.5834811274987148, 0.5539666652997064, 0.5311735605577261, 0.2893947455481236, 0.31587697008704785, 0.30630249191755643, 0.30357427726903585, 0.2891599167114509, 0.269456532977154, 0.29480460488521043, 0.28147710960999106, 0.2998009557545903, 0.1125643267752372, 0.1189708508219881, 0.13045228535562092, 0.13131718249377478, 0.14176184231048738, 0.12101466925423576, 0.12470914539498024, 0.14120409417422797, 0.11887736992395115, 0.10542904105972539, 0.10668774292273375, 0.10333261754209411, 0.1093832532000022, 0.10730009618933056, 0.10609703197497078, 0.1144600984204861, 0.1034443782087483, 0.10403784975892538, 0.9653552707689474, 0.9751919315499243, 0.9455863492844092, 0.9328495944388187, 0.9491227198895765, 0.9443966271907838, 0.932855335845451, 0.9466879870935867, 0.9503204051645096, 0.17639908106747548, 0.19411465419068186, 0.23072631746153216, 0.20131036533479196, 0.18295173466733894, 0.19475291728751432, 0.20140392066357682, 0.21123252572576356, 0.20824742496047666, 0.22901355052344774, 0.2115260898006016, 0.22019526394118882, 0.22881409240593653, 0.23851031158491698, 0.40968470015093006, 0.2095654808046038, 0.22950999881536238, 0.23490050533747275, 0.13844169820163044, 0.10630175449487667, 0.11585320072743888, 0.12708053867981983, 0.11241261456917839, 0.1280957257237012, 0.12014305677472326, 0.11643471844731279, 0.12274757368755085, 0.11973971855746646, 0.11963900733281685, 0.0941289528957655, 0.1283956050182925, 0.10760271934812138, 0.12235073302345012, 0.10275731020115397, 0.08972970755437237, 0.10622085298424278, 0.002243096106785525, 9.999999999998899e-05, 0.005158898054830607, 0.0008622223874809043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08947121899263133, 0.06227286961594747, 0.06921035604259018, 0.07340168999370256, 0.07176229763911346, 0.08390261743380723, 0.10032846360313818, 0.0968405904187768, 0.08038492114418605, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028756045108577766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06457793524143385, 0.06995047279557898, 0.06466517724800724, 0.0878971355302981, 0.0934294545324239, 0.08148756820325631, 0.06917154715754548, 0.07009172540519504, 0.08781986112356333, 0.39386735846600396, 0.3891717210113831, 0.4111456048239107, 0.4007878586906817, 0.4122987521201953, 0.4175424582728797, 0.41945943816256637, 0.3903799308620086, 0.37292425084392855, 0.08466935553497101, 0.08897903140646501, 0.09051482770588515, 0.07833711851303693, 0.07821061843219301, 0.08185910208763758, 0.07603658666136781, 0.076674383526109, 0.07442249679505353, 0.12476877257094288, 0.14617886790167944, 0.16156230032127428, 0.1544329632807383, 0.14149238269783204, 0.1523112592017586, 0.14188961192229488, 0.16780114139501656, 0.14889868442962795, 0.23291964239010732, 0.23509453380050405, 0.22872769869131593, 0.22390825353530353, 0.22327672871423088, 0.21385687097342554, 0.24018722265592296, 0.2536399586738255, 0.2626304190506519, 0.16880692108247697, 0.16572080525926536, 0.17249868626590392, 0.16658556472879282, 0.14510300113382824, 0.1496265096362387, 0.19888048408855008, 0.17719652082597825, 0.16596467764940026, 0.17504722882135393, 0.18797789842701906, 0.19258290648031018, 0.18204897478411397, 0.16928364972314303, 0.18358467858671457, 0.1803678079372758, 0.17521879679840824, 0.19850770749161195, 0.17222937265528782, 0.19171317179990188, 0.18468497146210439, 0.1868373767469197, 0.1775139122430608, 0.17706961684798805, 0.1680759117440137, 0.1836222355365752, 0.17445711988344081, 0.2061420840123338, 0.16285488571908768, 0.15866773533846557, 0.184835176607559, 0.15966044523136713, 0.17863846694244567, 0.1631958753102023, 0.19491536839523194, 0.153380111661224, 0.20883675167477866, 0.18530466958530456, 0.17801603798713017, 0.19320884446762343, 0.1484304126188426, 0.3879489509437841, 0.30276229713590774, 0.33392522173744144, 0.19438814802445792, 0.18241570791100792, 0.1920833024156402, 0.20159805737709735, 0.19489778475425323, 0.1817732163246525, 0.1754418313333106, 0.18872457175774926, 0.1811416290546517, 0.18939151957742606, 0.07061872425826243, 0.06124466821726149, 0.06793625070225373, 0.06226280624836256, 0.0654486587105243, 0.06236082173680846, 0.06758301439031389, 0.06977892050978718, 0.06464272425915751]}, "mutation_prompt": null}
{"id": "4c7e5f3d-0774-4050-b5d8-9325054868ce", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.8 + 0.2  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.1:\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved mutation strategy by introducing differential scaling factor variability.", "configspace": "", "generation": 20, "fitness": 0.2634872848899396, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "e728c9fe-bfe2-417a-9f5a-260f954da78d", "metadata": {"aucs": [0.7432555622107215, 0.7070999321684475, 0.7146255863464983, 0.7537169603142786, 0.7431783053567105, 0.7356061634589699, 0.7394709367954955, 0.7281329287179963, 0.7393610559140078, 0.5271957357651094, 0.511880039047641, 0.526454548285695, 0.4712245421834822, 0.5208945143472723, 0.5002229920579123, 0.5079682075756469, 0.5125916125356239, 0.5420508250229845, 0.13426064438878316, 0.14221147631545572, 0.1767060827814545, 0.1464002971433176, 0.13809571457337333, 0.13606354128483256, 0.17143689435580434, 0.13403961349908022, 0.12620889985865102, 0.14588516719149103, 0.125563274140417, 0.1390159498912521, 0.13217871831594608, 0.16227730345369018, 0.12286225013696661, 0.12475406245713816, 0.11973468683532706, 0.12099211926368392, 0.9197361420994933, 0.9324585644038337, 0.9476886846205178, 0.9144920601568006, 0.9165427822524393, 0.9575953331217962, 0.9421327824389789, 0.9295814088228105, 0.9528867840593356, 0.3093305671699118, 0.30195873120322403, 0.32395060807732934, 0.2841884035070229, 0.29831727534103225, 0.3010669072413876, 0.2720535371365681, 0.29533502987156657, 0.32158054355129295, 0.4778963492978171, 0.41971999300995944, 0.48437563798632477, 0.5209809394302762, 0.46582743826593, 0.4433924214780133, 0.4918551235000084, 0.4379381755052375, 0.46006600645968543, 0.17354057049168314, 0.1900590374209552, 0.14230470824032615, 0.16374083312566345, 0.17253011783104721, 0.15774467296051176, 0.172508555612768, 0.14574996362283177, 0.15463212965945183, 0.13320546342136586, 0.12464685602806036, 0.14678101011292544, 0.18202731579624076, 0.14326572315440678, 0.1510681632197045, 0.14428718004931884, 0.15633465030777605, 0.15224257742627323, 0.028265229897481037, 0.06234331527347026, 0.018989059105882333, 0.027943161486857715, 0.03593712365467017, 0.026428620203485798, 0.027301934050165788, 0.03875033972556663, 0.02708448682043285, 0.18039706705777958, 0.14345690230531072, 0.13034516353094527, 0.10847701071309257, 0.08620073860362121, 0.14172316290281084, 0.15547475325392657, 0.1561966348562266, 0.15283550709536808, 0.003006821858404174, 0.031704161967256006, 0.00655648816835841, 0.010163274672016609, 0.02994904438180257, 0.01839895353583665, 0.036393770478770016, 0.016337356928742386, 0.004104817906286362, 0.13553091572037734, 0.13527149689412454, 0.12789533169275424, 0.1311689205781067, 0.1254119020396398, 0.1450705356516988, 0.1305246836452374, 0.1188598580040009, 0.1357974549077, 0.4775193999519215, 0.4797033089581193, 0.5084361478825757, 0.4682967191527061, 0.4801514409451496, 0.5106443350818157, 0.48500436955816284, 0.4714730668647822, 0.48990689905311924, 0.1060334620799307, 0.10336694705082661, 0.09760520897876301, 0.08631336302330872, 0.08389647843365144, 0.09526345854654517, 0.09017602469441499, 0.0851264453894246, 0.08708697448355873, 0.14600610273647763, 0.16662090534653706, 0.1375193589686371, 0.14261419510775974, 0.13344302710317857, 0.12529727554858616, 0.14609819787404, 0.13746683958726225, 0.13610421170042575, 0.32728430501782024, 0.2857294014873031, 0.3131988814957908, 0.31118209855861456, 0.3123492387212887, 0.30629669872023335, 0.3337686966741207, 0.33119229604194955, 0.3425423168180515, 0.1989502819725858, 0.21742350523187703, 0.2288260063121098, 0.21332436886867867, 0.1931383909122001, 0.19018104789783075, 0.2466622744778436, 0.24437985287545827, 0.21725322668724023, 0.18727974971793515, 0.1829479003189204, 0.1919304003315676, 0.18080946067042625, 0.20246964924913513, 0.1826549447833229, 0.2023654820874038, 0.18247979033062078, 0.2105690762267084, 0.18691598702793677, 0.18638694035401615, 0.20151934447690645, 0.19904552638342743, 0.19962813104304344, 0.19166085504957275, 0.18863852760902, 0.1782109830928108, 0.18938946303688875, 0.3713898724524878, 0.2324986688521118, 0.22886052799961853, 0.5012110659549425, 0.31542766267607847, 0.2944619801581817, 0.29627425194112234, 0.3747120683852617, 0.43653796633812547, 0.37720922487985076, 0.19011715289177844, 0.22053390876985324, 0.1825088616990841, 0.18042001934885588, 0.1682141497733417, 0.357835670668764, 0.1490534632101027, 0.20555136494777548, 0.18940819359441108, 0.19338656886855765, 0.19855462671228818, 0.18243361491763022, 0.18912668636085372, 0.18371366029442027, 0.19303547700497414, 0.17700722695801707, 0.1774410226419264, 0.0783374531263642, 0.07904763618258204, 0.07600796674014365, 0.08084963365517228, 0.07074567053501579, 0.07243858445700901, 0.07095029890896554, 0.0702830134453829, 0.06837815416429616]}, "mutation_prompt": null}
{"id": "58a5023c-0dfa-4d14-a5db-8a9a08edadad", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15:  # Increased probability for local search\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced differential scaling factor variability and boosted local search probability for improved diversity and convergence.", "configspace": "", "generation": 21, "fitness": 0.26533230120416984, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "4c7e5f3d-0774-4050-b5d8-9325054868ce", "metadata": {"aucs": [0.7291441100905314, 0.6885967481164967, 0.7239044426128196, 0.7288349274269541, 0.7459367710908884, 0.7337076759873511, 0.7167330499993133, 0.719882611028425, 0.7074547791764727, 0.4768650813705224, 0.5010240705787741, 0.5058106730942866, 0.5052438766622165, 0.49479172583648356, 0.5146391901099459, 0.4874813577395707, 0.5005251137709543, 0.5093535804465168, 0.1485151433260511, 0.14371048272942644, 0.1441557680889637, 0.14938698839268016, 0.12854434725190644, 0.15662072615246414, 0.1405164714325201, 0.16023675901134138, 0.1409090424118007, 0.12288770726126919, 0.1359637389066891, 0.12522773451498614, 0.1350202548428131, 0.12201250626003945, 0.13331485191187253, 0.13537498714513896, 0.13360443079618767, 0.14761435883900298, 0.94143273240684, 0.9307601571582367, 0.9236811670862587, 0.8873269311889213, 0.9341983951562994, 0.9049344061715876, 0.8576199749376546, 0.9365997833671068, 0.8983694799128878, 0.31941396889278406, 0.30508222377038885, 0.3240333156809009, 0.28896276515409414, 0.2726011292918723, 0.3349192151047852, 0.289199127360956, 0.3052584409851379, 0.2876702021095561, 0.4880045369292517, 0.4584714399074802, 0.5190963368064296, 0.5104298534027016, 0.45983859810327343, 0.4499496555625895, 0.4826533944087996, 0.5706478415356173, 0.518189700361054, 0.17852860529056702, 0.1663997399943884, 0.14913987348760782, 0.16604904184607183, 0.14127343074437126, 0.1930820745798617, 0.1544925313434935, 0.12979288873488026, 0.18805905417362467, 0.14798857264194065, 0.12343689182459183, 0.15805496332167113, 0.1638576379522868, 0.15075262010641977, 0.17916859211944525, 0.18820597954948914, 0.12748136650037123, 0.1647479202031965, 0.03734032987915359, 0.017692030609694154, 0.03317746331206384, 0.03205094996338487, 0.0385710166662544, 0.027952742060009195, 0.03568226706843447, 0.011146111137432135, 0.048911428007256674, 0.12865759203920113, 0.11640071453161127, 0.11020918789500356, 0.09276958440291494, 0.1452914534378339, 0.1338545181816717, 0.18565314948446254, 0.14518119611261449, 0.14418213224928, 0.030172109117776902, 0.004248476187695083, 0.03671261482737498, 0.0004943663510695862, 0.017401478789291325, 0.02109731393043257, 0.043246573600850935, 0.022240945929833833, 0.04606170678156907, 0.1146893907543165, 0.12546365756242017, 0.11501521397530345, 0.14194552438999397, 0.14317856134109386, 0.14541833784740432, 0.13576205526535745, 0.11512778117936762, 0.12249313333089684, 0.476593244286464, 0.4638371713129896, 0.48871038875862216, 0.5035154968178379, 0.4704627729148514, 0.4974977843119933, 0.49379560256301824, 0.4859173560329516, 0.5138360287698274, 0.10579560671006294, 0.09177941688411284, 0.10442567654842838, 0.09206185171017645, 0.08679383325473067, 0.09336481393232521, 0.1103622081189003, 0.09172405793488159, 0.083871227349676, 0.142366286919545, 0.14947183822367227, 0.13118982095324905, 0.1285285765537696, 0.16336646036360125, 0.14640148518956175, 0.1399644402044996, 0.16167018779578868, 0.13705382004201871, 0.3128483286297966, 0.31295392111775666, 0.29997198298312666, 0.32041407319197013, 0.3099445197777323, 0.3055515726768048, 0.3401178219234089, 0.32274685291855176, 0.35416907177856727, 0.24659183260627715, 0.22087117151253055, 0.20912935634701246, 0.231684189497795, 0.22669301858455437, 0.22915265840001853, 0.22152596011803338, 0.251939931292146, 0.23394292773059366, 0.192660280853876, 0.19785978562879813, 0.17538525386183468, 0.19794398960778758, 0.2012151556333166, 0.20130200549914967, 0.21159372019686284, 0.18571377220213803, 0.19318399009628306, 0.19597419019265716, 0.2171938981525443, 0.187252319666111, 0.2126174932726449, 0.2017111128956105, 0.21051976890797175, 0.20457781820062004, 0.20286461667301936, 0.20246117787172047, 0.4380249627065438, 0.15748045744251649, 0.29702736306292243, 0.5776556174652543, 0.17442462916203216, 0.28548277651741705, 0.28924873445686516, 0.25465298135859404, 0.43346079688013284, 0.37325453274623666, 0.19891433235627132, 0.3145505390207429, 0.18083448822335801, 0.1913224831523327, 0.18538938898813162, 0.29941045549170886, 0.33598281265595664, 0.1960442441495549, 0.18603095598758335, 0.19738622303261633, 0.18444752287196187, 0.1801524792907221, 0.19558370119144608, 0.18322472714849924, 0.19149759336215988, 0.19322759661982902, 0.19165776820545133, 0.07573146997179792, 0.07378763680492462, 0.07247524555732454, 0.0805897349381356, 0.08018532610839557, 0.07593864166320874, 0.07621177800398016, 0.08498169326137994, 0.07997262550578021]}, "mutation_prompt": null}
{"id": "4fc3c749-4f26-4984-96c0-fc9b08a07757", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.25:  # Increased probability for local search\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Minor adjustment to the local search probability to enhance convergence.", "configspace": "", "generation": 22, "fitness": 0.24894786065187102, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": "58a5023c-0dfa-4d14-a5db-8a9a08edadad", "metadata": {"aucs": [0.6768477961439838, 0.6689558890398664, 0.6688670754203792, 0.6977830764611068, 0.7017281730786662, 0.6756175810874954, 0.6980197080636203, 0.6870104011710128, 0.7158950635440353, 0.4410241190265921, 0.4314553010681321, 0.3917178899942918, 0.416397184487734, 0.4025879647613393, 0.46203590510662096, 0.4275601167181684, 0.44463457648685534, 0.45848440021407455, 0.13686017054469235, 0.16833276002260122, 0.18449699531637553, 0.14967269588760046, 0.10891872593778806, 0.1133336685708558, 0.12479394663674503, 0.14883803207882507, 0.13283873308914262, 0.11622247932747831, 0.10231658554905809, 0.13874743495745645, 0.11124901851612956, 0.1273114957104834, 0.11279684379976385, 0.11076473551378219, 0.12581895629412954, 0.11528702363912946, 0.9064891738902486, 0.9093166237029323, 0.9338812745405045, 0.9356774144805471, 0.947801855928833, 0.974565914864609, 0.9344803069299084, 0.9696863374020444, 0.9083018214390648, 0.2539159162244605, 0.26676268041348505, 0.2665246585440939, 0.27337492287526166, 0.2897619474819245, 0.2816278931572481, 0.24278140964571093, 0.27576654886913554, 0.2354473635610984, 0.4091881993672828, 0.4229014725844662, 0.22231844404428047, 0.4231791755481663, 0.5063149235457043, 0.28477058512521125, 0.47401764962522674, 0.4201782856683328, 0.4677339322301949, 0.1569462764505366, 0.14660214353125245, 0.16682408464869436, 0.15596935328486217, 0.13103121547136976, 0.14352267936021146, 0.16036778855065115, 0.15132226875254418, 0.14894023660456346, 0.12580905366048423, 0.10407415050322943, 0.15333087496385522, 0.14118637236364995, 0.15606711386785987, 0.14209177111424887, 0.15216127892881393, 0.15258232973469055, 0.14184728022588222, 0.028734902865251155, 0.026404918373708952, 0.013276862774298737, 0.07030248175518883, 0.020205874994739692, 0.004802242666060885, 0.015259680531588993, 0.011101275542774292, 0.005664250100365309, 0.11085726183746591, 0.11323813722664966, 0.1410955984411818, 0.11130536028398241, 0.1283309443603874, 0.08220236224493238, 0.1282912942690595, 0.13001642440902283, 0.14622704340200687, 0.007105529647842168, 0.003647145836877419, 9.999999999998899e-05, 0.0003957802319142223, 0.022126524307680473, 0.022915756628333783, 0.014872858627822838, 0.0236645456966027, 0.02586086941080956, 0.09673966041311866, 0.09952159544540207, 0.12432673601336064, 0.1265183954972119, 0.12467932398557191, 0.13437625188700253, 0.12082825791678242, 0.09465942980647901, 0.10185391591864168, 0.46959737218545194, 0.46054462407928143, 0.4541058629790754, 0.4463522073305616, 0.444806562735772, 0.4501566756707308, 0.4575025215568105, 0.4752107227753126, 0.46147238441914573, 0.08499247895467565, 0.08438828082190863, 0.07704498179742059, 0.08920371242339864, 0.07784507429647725, 0.08636968513478516, 0.1033352363217489, 0.07939538307798744, 0.09352745100733229, 0.16561598695037605, 0.16370227954380023, 0.15092366734168083, 0.17804128742120762, 0.16909392341811458, 0.1091468837598688, 0.16382246339132434, 0.1528839760520987, 0.13330025340222218, 0.2706325697995582, 0.2936692001109348, 0.28530186445390704, 0.28652826780386675, 0.2984131137464766, 0.28111840071105665, 0.3282268365466957, 0.33324533250912014, 0.3221555410196357, 0.19126483525778404, 0.2106592198737952, 0.2080299965608008, 0.1941391174004823, 0.20908001624755956, 0.21459691862751795, 0.2345569162722021, 0.260736999736508, 0.21407045387868262, 0.19756376329701275, 0.17474125889960146, 0.1932011803386614, 0.1971842240620516, 0.20134879410512385, 0.19326999303519665, 0.2228842342580215, 0.1936183630639352, 0.1977832360951547, 0.19220421878796845, 0.18401370970853503, 0.20402056906273158, 0.20629343523174426, 0.23722893932106226, 0.1830118599410424, 0.20319796187131522, 0.21668835998854952, 0.18877043004410599, 0.16658231505699772, 0.1725446065146562, 0.35758296783369226, 0.5315744249760745, 0.2941599890214839, 0.23563211213296598, 0.2821076078423813, 0.17243573403936074, 0.20083597343756887, 0.31128881925716523, 0.46312358528771125, 0.18489957539811364, 0.24250647255495072, 0.19547967688798917, 0.20364644499912987, 0.3962939735093076, 0.2640476434211183, 0.36221570073396636, 0.1787725101394193, 0.20067823375071192, 0.18357981271322377, 0.18087283858263892, 0.17539044470112664, 0.19434561490104219, 0.1887304732355316, 0.1903665438684914, 0.189111261398057, 0.07588177907862559, 0.06741646359016018, 0.06480907881601217, 0.0721673349418206, 0.0773100130740575, 0.07952935205855793, 0.07155266406621652, 0.07759777085067521, 0.06766099729265884]}, "mutation_prompt": null}
{"id": "3134a1ba-4370-4c6a-bd18-4d3d6054b480", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15:  # Increased probability for local search\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced differential scaling factor variability and boosted local search probability for improved diversity and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58a5023c-0dfa-4d14-a5db-8a9a08edadad", "metadata": {"aucs": [0.7291441100905314, 0.6885967481164967, 0.7239044426128196, 0.7288349274269541, 0.7459367710908884, 0.7337076759873511, 0.7167330499993133, 0.719882611028425, 0.7074547791764727, 0.4768650813705224, 0.5010240705787741, 0.5058106730942866, 0.5052438766622165, 0.49479172583648356, 0.5146391901099459, 0.4874813577395707, 0.5005251137709543, 0.5093535804465168, 0.1485151433260511, 0.14371048272942644, 0.1441557680889637, 0.14938698839268016, 0.12854434725190644, 0.15662072615246414, 0.1405164714325201, 0.16023675901134138, 0.1409090424118007, 0.12288770726126919, 0.1359637389066891, 0.12522773451498614, 0.1350202548428131, 0.12201250626003945, 0.13331485191187253, 0.13537498714513896, 0.13360443079618767, 0.14761435883900298, 0.94143273240684, 0.9307601571582367, 0.9236811670862587, 0.8873269311889213, 0.9341983951562994, 0.9049344061715876, 0.8576199749376546, 0.9365997833671068, 0.8983694799128878, 0.31941396889278406, 0.30508222377038885, 0.3240333156809009, 0.28896276515409414, 0.2726011292918723, 0.3349192151047852, 0.289199127360956, 0.3052584409851379, 0.2876702021095561, 0.4880045369292517, 0.4584714399074802, 0.5190963368064296, 0.5104298534027016, 0.45983859810327343, 0.4499496555625895, 0.4826533944087996, 0.5706478415356173, 0.518189700361054, 0.17852860529056702, 0.1663997399943884, 0.14913987348760782, 0.16604904184607183, 0.14127343074437126, 0.1930820745798617, 0.1544925313434935, 0.12979288873488026, 0.18805905417362467, 0.14798857264194065, 0.12343689182459183, 0.15805496332167113, 0.1638576379522868, 0.15075262010641977, 0.17916859211944525, 0.18820597954948914, 0.12748136650037123, 0.1647479202031965, 0.03734032987915359, 0.017692030609694154, 0.03317746331206384, 0.03205094996338487, 0.0385710166662544, 0.027952742060009195, 0.03568226706843447, 0.011146111137432135, 0.048911428007256674, 0.12865759203920113, 0.11640071453161127, 0.11020918789500356, 0.09276958440291494, 0.1452914534378339, 0.1338545181816717, 0.18565314948446254, 0.14518119611261449, 0.14418213224928, 0.030172109117776902, 0.004248476187695083, 0.03671261482737498, 0.0004943663510695862, 0.017401478789291325, 0.02109731393043257, 0.043246573600850935, 0.022240945929833833, 0.04606170678156907, 0.1146893907543165, 0.12546365756242017, 0.11501521397530345, 0.14194552438999397, 0.14317856134109386, 0.14541833784740432, 0.13576205526535745, 0.11512778117936762, 0.12249313333089684, 0.476593244286464, 0.4638371713129896, 0.48871038875862216, 0.5035154968178379, 0.4704627729148514, 0.4974977843119933, 0.49379560256301824, 0.4859173560329516, 0.5138360287698274, 0.10579560671006294, 0.09177941688411284, 0.10442567654842838, 0.09206185171017645, 0.08679383325473067, 0.09336481393232521, 0.1103622081189003, 0.09172405793488159, 0.083871227349676, 0.142366286919545, 0.14947183822367227, 0.13118982095324905, 0.1285285765537696, 0.16336646036360125, 0.14640148518956175, 0.1399644402044996, 0.16167018779578868, 0.13705382004201871, 0.3128483286297966, 0.31295392111775666, 0.29997198298312666, 0.32041407319197013, 0.3099445197777323, 0.3055515726768048, 0.3401178219234089, 0.32274685291855176, 0.35416907177856727, 0.24659183260627715, 0.22087117151253055, 0.20912935634701246, 0.231684189497795, 0.22669301858455437, 0.22915265840001853, 0.22152596011803338, 0.251939931292146, 0.23394292773059366, 0.192660280853876, 0.19785978562879813, 0.17538525386183468, 0.19794398960778758, 0.2012151556333166, 0.20130200549914967, 0.21159372019686284, 0.18571377220213803, 0.19318399009628306, 0.19597419019265716, 0.2171938981525443, 0.187252319666111, 0.2126174932726449, 0.2017111128956105, 0.21051976890797175, 0.20457781820062004, 0.20286461667301936, 0.20246117787172047, 0.4380249627065438, 0.15748045744251649, 0.29702736306292243, 0.5776556174652543, 0.17442462916203216, 0.28548277651741705, 0.28924873445686516, 0.25465298135859404, 0.43346079688013284, 0.37325453274623666, 0.19891433235627132, 0.3145505390207429, 0.18083448822335801, 0.1913224831523327, 0.18538938898813162, 0.29941045549170886, 0.33598281265595664, 0.1960442441495549, 0.18603095598758335, 0.19738622303261633, 0.18444752287196187, 0.1801524792907221, 0.19558370119144608, 0.18322472714849924, 0.19149759336215988, 0.19322759661982902, 0.19165776820545133, 0.07573146997179792, 0.07378763680492462, 0.07247524555732454, 0.0805897349381356, 0.08018532610839557, 0.07593864166320874, 0.07621177800398016, 0.08498169326137994, 0.07997262550578021]}, "mutation_prompt": null}
{"id": "aa82654e-f155-477e-88af-59729af5df6a", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15:  # Increased probability for local search\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced differential scaling factor variability and boosted local search probability for improved diversity and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58a5023c-0dfa-4d14-a5db-8a9a08edadad", "metadata": {"aucs": [0.7291441100905314, 0.6885967481164967, 0.7239044426128196, 0.7288349274269541, 0.7459367710908884, 0.7337076759873511, 0.7167330499993133, 0.719882611028425, 0.7074547791764727, 0.4768650813705224, 0.5010240705787741, 0.5058106730942866, 0.5052438766622165, 0.49479172583648356, 0.5146391901099459, 0.4874813577395707, 0.5005251137709543, 0.5093535804465168, 0.1485151433260511, 0.14371048272942644, 0.1441557680889637, 0.14938698839268016, 0.12854434725190644, 0.15662072615246414, 0.1405164714325201, 0.16023675901134138, 0.1409090424118007, 0.12288770726126919, 0.1359637389066891, 0.12522773451498614, 0.1350202548428131, 0.12201250626003945, 0.13331485191187253, 0.13537498714513896, 0.13360443079618767, 0.14761435883900298, 0.94143273240684, 0.9307601571582367, 0.9236811670862587, 0.8873269311889213, 0.9341983951562994, 0.9049344061715876, 0.8576199749376546, 0.9365997833671068, 0.8983694799128878, 0.31941396889278406, 0.30508222377038885, 0.3240333156809009, 0.28896276515409414, 0.2726011292918723, 0.3349192151047852, 0.289199127360956, 0.3052584409851379, 0.2876702021095561, 0.4880045369292517, 0.4584714399074802, 0.5190963368064296, 0.5104298534027016, 0.45983859810327343, 0.4499496555625895, 0.4826533944087996, 0.5706478415356173, 0.518189700361054, 0.17852860529056702, 0.1663997399943884, 0.14913987348760782, 0.16604904184607183, 0.14127343074437126, 0.1930820745798617, 0.1544925313434935, 0.12979288873488026, 0.18805905417362467, 0.14798857264194065, 0.12343689182459183, 0.15805496332167113, 0.1638576379522868, 0.15075262010641977, 0.17916859211944525, 0.18820597954948914, 0.12748136650037123, 0.1647479202031965, 0.03734032987915359, 0.017692030609694154, 0.03317746331206384, 0.03205094996338487, 0.0385710166662544, 0.027952742060009195, 0.03568226706843447, 0.011146111137432135, 0.048911428007256674, 0.12865759203920113, 0.11640071453161127, 0.11020918789500356, 0.09276958440291494, 0.1452914534378339, 0.1338545181816717, 0.18565314948446254, 0.14518119611261449, 0.14418213224928, 0.030172109117776902, 0.004248476187695083, 0.03671261482737498, 0.0004943663510695862, 0.017401478789291325, 0.02109731393043257, 0.043246573600850935, 0.022240945929833833, 0.04606170678156907, 0.1146893907543165, 0.12546365756242017, 0.11501521397530345, 0.14194552438999397, 0.14317856134109386, 0.14541833784740432, 0.13576205526535745, 0.11512778117936762, 0.12249313333089684, 0.476593244286464, 0.4638371713129896, 0.48871038875862216, 0.5035154968178379, 0.4704627729148514, 0.4974977843119933, 0.49379560256301824, 0.4859173560329516, 0.5138360287698274, 0.10579560671006294, 0.09177941688411284, 0.10442567654842838, 0.09206185171017645, 0.08679383325473067, 0.09336481393232521, 0.1103622081189003, 0.09172405793488159, 0.083871227349676, 0.142366286919545, 0.14947183822367227, 0.13118982095324905, 0.1285285765537696, 0.16336646036360125, 0.14640148518956175, 0.1399644402044996, 0.16167018779578868, 0.13705382004201871, 0.3128483286297966, 0.31295392111775666, 0.29997198298312666, 0.32041407319197013, 0.3099445197777323, 0.3055515726768048, 0.3401178219234089, 0.32274685291855176, 0.35416907177856727, 0.24659183260627715, 0.22087117151253055, 0.20912935634701246, 0.231684189497795, 0.22669301858455437, 0.22915265840001853, 0.22152596011803338, 0.251939931292146, 0.23394292773059366, 0.192660280853876, 0.19785978562879813, 0.17538525386183468, 0.19794398960778758, 0.2012151556333166, 0.20130200549914967, 0.21159372019686284, 0.18571377220213803, 0.19318399009628306, 0.19597419019265716, 0.2171938981525443, 0.187252319666111, 0.2126174932726449, 0.2017111128956105, 0.21051976890797175, 0.20457781820062004, 0.20286461667301936, 0.20246117787172047, 0.4380249627065438, 0.15748045744251649, 0.29702736306292243, 0.5776556174652543, 0.17442462916203216, 0.28548277651741705, 0.28924873445686516, 0.25465298135859404, 0.43346079688013284, 0.37325453274623666, 0.19891433235627132, 0.3145505390207429, 0.18083448822335801, 0.1913224831523327, 0.18538938898813162, 0.29941045549170886, 0.33598281265595664, 0.1960442441495549, 0.18603095598758335, 0.19738622303261633, 0.18444752287196187, 0.1801524792907221, 0.19558370119144608, 0.18322472714849924, 0.19149759336215988, 0.19322759661982902, 0.19165776820545133, 0.07573146997179792, 0.07378763680492462, 0.07247524555732454, 0.0805897349381356, 0.08018532610839557, 0.07593864166320874, 0.07621177800398016, 0.08498169326137994, 0.07997262550578021]}, "mutation_prompt": null}
{"id": "a98a96b6-20ce-4ad6-b5b3-9fc0942fa12c", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15:  # Increased probability for local search\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced differential scaling factor variability and boosted local search probability for improved diversity and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58a5023c-0dfa-4d14-a5db-8a9a08edadad", "metadata": {"aucs": [0.7291441100905314, 0.6885967481164967, 0.7239044426128196, 0.7288349274269541, 0.7459367710908884, 0.7337076759873511, 0.7167330499993133, 0.719882611028425, 0.7074547791764727, 0.4768650813705224, 0.5010240705787741, 0.5058106730942866, 0.5052438766622165, 0.49479172583648356, 0.5146391901099459, 0.4874813577395707, 0.5005251137709543, 0.5093535804465168, 0.1485151433260511, 0.14371048272942644, 0.1441557680889637, 0.14938698839268016, 0.12854434725190644, 0.15662072615246414, 0.1405164714325201, 0.16023675901134138, 0.1409090424118007, 0.12288770726126919, 0.1359637389066891, 0.12522773451498614, 0.1350202548428131, 0.12201250626003945, 0.13331485191187253, 0.13537498714513896, 0.13360443079618767, 0.14761435883900298, 0.94143273240684, 0.9307601571582367, 0.9236811670862587, 0.8873269311889213, 0.9341983951562994, 0.9049344061715876, 0.8576199749376546, 0.9365997833671068, 0.8983694799128878, 0.31941396889278406, 0.30508222377038885, 0.3240333156809009, 0.28896276515409414, 0.2726011292918723, 0.3349192151047852, 0.289199127360956, 0.3052584409851379, 0.2876702021095561, 0.4880045369292517, 0.4584714399074802, 0.5190963368064296, 0.5104298534027016, 0.45983859810327343, 0.4499496555625895, 0.4826533944087996, 0.5706478415356173, 0.518189700361054, 0.17852860529056702, 0.1663997399943884, 0.14913987348760782, 0.16604904184607183, 0.14127343074437126, 0.1930820745798617, 0.1544925313434935, 0.12979288873488026, 0.18805905417362467, 0.14798857264194065, 0.12343689182459183, 0.15805496332167113, 0.1638576379522868, 0.15075262010641977, 0.17916859211944525, 0.18820597954948914, 0.12748136650037123, 0.1647479202031965, 0.03734032987915359, 0.017692030609694154, 0.03317746331206384, 0.03205094996338487, 0.0385710166662544, 0.027952742060009195, 0.03568226706843447, 0.011146111137432135, 0.048911428007256674, 0.12865759203920113, 0.11640071453161127, 0.11020918789500356, 0.09276958440291494, 0.1452914534378339, 0.1338545181816717, 0.18565314948446254, 0.14518119611261449, 0.14418213224928, 0.030172109117776902, 0.004248476187695083, 0.03671261482737498, 0.0004943663510695862, 0.017401478789291325, 0.02109731393043257, 0.043246573600850935, 0.022240945929833833, 0.04606170678156907, 0.1146893907543165, 0.12546365756242017, 0.11501521397530345, 0.14194552438999397, 0.14317856134109386, 0.14541833784740432, 0.13576205526535745, 0.11512778117936762, 0.12249313333089684, 0.476593244286464, 0.4638371713129896, 0.48871038875862216, 0.5035154968178379, 0.4704627729148514, 0.4974977843119933, 0.49379560256301824, 0.4859173560329516, 0.5138360287698274, 0.10579560671006294, 0.09177941688411284, 0.10442567654842838, 0.09206185171017645, 0.08679383325473067, 0.09336481393232521, 0.1103622081189003, 0.09172405793488159, 0.083871227349676, 0.142366286919545, 0.14947183822367227, 0.13118982095324905, 0.1285285765537696, 0.16336646036360125, 0.14640148518956175, 0.1399644402044996, 0.16167018779578868, 0.13705382004201871, 0.3128483286297966, 0.31295392111775666, 0.29997198298312666, 0.32041407319197013, 0.3099445197777323, 0.3055515726768048, 0.3401178219234089, 0.32274685291855176, 0.35416907177856727, 0.24659183260627715, 0.22087117151253055, 0.20912935634701246, 0.231684189497795, 0.22669301858455437, 0.22915265840001853, 0.22152596011803338, 0.251939931292146, 0.23394292773059366, 0.192660280853876, 0.19785978562879813, 0.17538525386183468, 0.19794398960778758, 0.2012151556333166, 0.20130200549914967, 0.21159372019686284, 0.18571377220213803, 0.19318399009628306, 0.19597419019265716, 0.2171938981525443, 0.187252319666111, 0.2126174932726449, 0.2017111128956105, 0.21051976890797175, 0.20457781820062004, 0.20286461667301936, 0.20246117787172047, 0.4380249627065438, 0.15748045744251649, 0.29702736306292243, 0.5776556174652543, 0.17442462916203216, 0.28548277651741705, 0.28924873445686516, 0.25465298135859404, 0.43346079688013284, 0.37325453274623666, 0.19891433235627132, 0.3145505390207429, 0.18083448822335801, 0.1913224831523327, 0.18538938898813162, 0.29941045549170886, 0.33598281265595664, 0.1960442441495549, 0.18603095598758335, 0.19738622303261633, 0.18444752287196187, 0.1801524792907221, 0.19558370119144608, 0.18322472714849924, 0.19149759336215988, 0.19322759661982902, 0.19165776820545133, 0.07573146997179792, 0.07378763680492462, 0.07247524555732454, 0.0805897349381356, 0.08018532610839557, 0.07593864166320874, 0.07621177800398016, 0.08498169326137994, 0.07997262550578021]}, "mutation_prompt": null}
{"id": "2adcf5be-92c9-403a-8cf4-e92ae877ab13", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15:  # Increased probability for local search\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.0025, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhance local search by using a finer perturbation during exploration to increase precision.", "configspace": "", "generation": 26, "fitness": 0.2642772572746161, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "58a5023c-0dfa-4d14-a5db-8a9a08edadad", "metadata": {"aucs": [0.7209742054361594, 0.6953643416127491, 0.7533423588825343, 0.7058503656808823, 0.738388576109815, 0.7244297153443389, 0.7238021904452006, 0.7406635822075637, 0.7088728138140377, 0.5004174264190896, 0.5306734475395681, 0.5349054801543509, 0.5130037863326677, 0.5253022777760366, 0.5234784326002575, 0.5110436957248208, 0.5058235870834789, 0.504858278873312, 0.12704896349179617, 0.2211119450254021, 0.1869521857035198, 0.150411801517624, 0.1517318796882664, 0.15756213110521822, 0.11721758952426276, 0.12705994571658175, 0.1456993553357111, 0.14969517324531156, 0.12641569476109848, 0.12078688479158295, 0.13253624356197902, 0.11740297143201117, 0.17727404630968446, 0.13976596499789307, 0.12864448674571938, 0.14278536992908297, 0.9414320852704179, 0.9307620171350163, 0.9237133474269881, 0.8873068684577621, 0.9341973531888433, 0.9049374345213453, 0.8517753969868702, 0.936652603837691, 0.872534519470468, 0.2837819284477937, 0.28888733292803725, 0.3059278492215831, 0.30028347229476016, 0.28536537352673896, 0.3518523845957624, 0.26544329249548193, 0.3006287693823527, 0.32459620582070325, 0.5463579116931687, 0.38750739286296554, 0.52668160602357, 0.4691154645200116, 0.4741532901134906, 0.566339452205719, 0.37131218810854827, 0.5249695038200985, 0.6121735052902868, 0.15714801388564215, 0.16587834285401581, 0.14972503392310976, 0.1488443549275993, 0.16189210894546635, 0.1465386926229959, 0.1536077062794151, 0.15140303224638685, 0.1879262263840541, 0.16559585369207652, 0.1258438985373116, 0.1770908665877592, 0.17382113686984502, 0.1415805803511363, 0.16583713573049463, 0.16318124097045872, 0.12859591650709268, 0.15822132839908776, 0.027760558475189434, 0.045913000735123055, 0.038866867158201646, 0.03635867877828658, 0.040841856317640146, 0.04167341436755301, 0.06235840245627422, 0.01673518252146844, 0.06793041304868075, 0.13719455078667397, 0.13759476997478592, 0.13463052256026276, 0.09647121632788969, 0.1249255868855369, 0.07868349219597948, 0.20548039060236067, 0.13101993634153075, 0.17562824537311372, 0.06084086452143622, 0.010953412462478829, 0.0026907790516202956, 0.018613740893454134, 0.016757464375475095, 0.010846977817277503, 0.025255587005730384, 0.01612970376076006, 0.07044664905929698, 0.10504067852711108, 0.11592390566331556, 0.12725163889752622, 0.14008581491065852, 0.12882911991609003, 0.14365549237459652, 0.1090081585446977, 0.09217819498425939, 0.13443030721683702, 0.468107468833432, 0.4455535344857232, 0.4823186061968353, 0.4719554695257747, 0.4760226125225323, 0.46561739352507747, 0.46947802442881703, 0.4516488939900085, 0.5138092185228267, 0.09405770944092251, 0.10210085972598304, 0.10500122507386589, 0.09103807014811904, 0.09475829935031121, 0.10135948671409623, 0.1022312665627636, 0.09523318576944961, 0.08596699311136069, 0.13069344360960655, 0.14552583888608206, 0.12989819027950633, 0.18336551262398515, 0.14187979063947387, 0.14559153364912325, 0.1349644346860499, 0.15040175022492275, 0.14482806323700692, 0.31049150630097133, 0.3159782787919997, 0.3040144577252475, 0.32769258414881464, 0.3180942453403691, 0.29397051268845364, 0.3428361817958926, 0.32963329617967985, 0.32245726111448025, 0.21787171595106325, 0.21787325177075167, 0.22456278141315766, 0.20478386103041624, 0.19117253929833422, 0.2178166370961645, 0.2202654569965652, 0.20307610082455163, 0.2471905128649542, 0.19606842539406033, 0.18137145215191108, 0.19064498632144744, 0.20412829361616092, 0.1749423217858208, 0.2155571603176304, 0.1880524939598176, 0.18798197646209924, 0.19098457935239654, 0.19793291199501373, 0.20547200127241727, 0.19640253500360072, 0.2019188068189931, 0.1914334167347883, 0.2049586798602635, 0.23835393566985452, 0.21910103440342865, 0.2063578245552642, 0.3779202251191206, 0.18455116849136, 0.28899823648406253, 0.5786791922976282, 0.17434460588569178, 0.28185524629030856, 0.29476803123327455, 0.2607837870719999, 0.46811118377374483, 0.37364032520564483, 0.19891021593754243, 0.2238214794208282, 0.19583591277912282, 0.19119319528985346, 0.18519596492034485, 0.19292137511485385, 0.282804868404407, 0.19599554791374163, 0.20216417763520855, 0.18000774105840645, 0.19067610022342185, 0.18682107788015645, 0.18147301789864412, 0.18353572549084607, 0.19140325786460566, 0.19072223931151056, 0.18980000825703514, 0.0820111439122635, 0.08666630911162576, 0.08898170936794902, 0.07162939149661685, 0.07409907622039735, 0.08987125953257713, 0.07210188672821083, 0.07019790388829883, 0.0748213018660675]}, "mutation_prompt": null}
{"id": "a8e8d04b-82f6-4e97-afbd-657007133eb9", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.6 + 0.2  # Slightly expanded CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15:  # Increased probability for local search\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Fine-tune the adaptive crossover rate to enhance exploration and convergence.", "configspace": "", "generation": 27, "fitness": 0.23735150963384677, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "58a5023c-0dfa-4d14-a5db-8a9a08edadad", "metadata": {"aucs": [0.6825109967708545, 0.7014903410761483, 0.7017695119311834, 0.6940403907415889, 0.6913907477376912, 0.6991031546263702, 0.6961094801052498, 0.7012974257637067, 0.718011873610481, 0.4564778178348716, 0.46092114368600334, 0.4915223414955775, 0.4667784988927458, 0.40293957859122365, 0.45827068396520765, 0.44188396699766275, 0.45587276318827696, 0.4672764697374757, 0.15009219759286918, 0.1979297804547797, 0.2324498807815223, 0.23919391647106414, 0.2084317399126313, 0.18085555762379368, 0.15623707958185473, 0.15090491919041793, 0.19426658526870888, 0.1466434383309374, 0.16775548382691663, 0.15183126406859226, 0.18168648397916254, 0.15782211898454757, 0.18012881348047272, 0.14148440774091775, 0.1520221882030408, 0.1333529543124683, 0.9067120370660033, 0.9228119257602035, 0.9548721850285652, 0.9276782308155495, 0.9219611922511126, 0.9220169747887812, 0.9376353179193943, 0.9213105314467605, 0.9023887759580448, 0.25217295816675833, 0.21574272972560116, 0.23164238206706056, 0.24012748220038604, 0.19845839912994567, 0.2621236922623579, 0.22553733356792172, 0.1980685003275906, 0.24757103437594474, 0.25593111007361635, 0.2498893428811404, 0.2259895694908699, 0.3853275192200808, 0.23463594555851763, 0.26628671441099594, 0.2414956700314157, 0.24207083335821322, 0.266751799750107, 0.17942840433519214, 0.11662931231580553, 0.14617775208691364, 0.134084477517189, 0.14320998174905086, 0.12142339668848035, 0.13800287243697384, 0.13427337834463737, 0.1606950321291546, 0.12776565533539175, 0.10394855007031989, 0.13264172105124494, 0.16217622051121705, 0.14185010728596226, 0.15607789854644782, 0.14868610894741596, 0.10969120643726815, 0.11646014728026333, 0.00852674046428148, 9.999999999998899e-05, 0.010420166484172655, 0.013342531288478177, 9.999999999998899e-05, 9.999999999998899e-05, 0.004246207480582798, 9.999999999998899e-05, 0.010926630170306595, 0.08652201129914394, 0.08166387294150967, 0.0839945641180122, 0.052506452646480795, 0.09909937301980332, 0.0987077416500437, 0.10797408901451122, 0.125557776629585, 0.12208933910177455, 9.999999999998899e-05, 9.999999999998899e-05, 0.004288987061555227, 0.030303384652123566, 0.0028107571642078666, 0.004142571184104438, 0.01117404738748029, 0.008527082392940089, 9.999999999998899e-05, 0.0901291735440396, 0.08803321991815738, 0.08752052594057336, 0.10473497556228739, 0.10018379386300125, 0.11735798157578992, 0.09335699986365731, 0.08928352661069927, 0.0960128088511254, 0.43387155889737816, 0.4297062096820068, 0.44701224500795256, 0.4210580141875887, 0.4396496571099193, 0.44908646573392186, 0.44744279154635247, 0.43808843171358125, 0.431821615638324, 0.10272225855481687, 0.101426107981054, 0.09984575669387108, 0.10507122245315337, 0.09840836250788465, 0.09160599795095004, 0.08149540707240888, 0.09637385753697747, 0.10407861328697876, 0.1886856775128356, 0.1442167902379493, 0.13159252440205493, 0.14307069104281422, 0.13738004505801504, 0.16136224204642835, 0.14424001750518078, 0.14397732854035472, 0.15126021902426945, 0.26740606826468893, 0.2718461369190509, 0.28429330687348, 0.2692166870867091, 0.2638573730636057, 0.25847618568776387, 0.271088846560518, 0.28804448140572436, 0.30158691800685145, 0.19573836506939535, 0.19810101813534642, 0.21137835660564874, 0.19336582042947126, 0.18275662880854338, 0.1860095520047994, 0.20372166765182453, 0.2254725900880319, 0.19306504522557022, 0.20835855842714157, 0.19646083541112025, 0.21176428356844512, 0.1865569391963925, 0.1797658484187541, 0.1926145772183686, 0.18453842173335588, 0.19540860203948696, 0.20285692671106526, 0.23618522395260677, 0.21388324354108823, 0.20134530028807152, 0.20442358307097908, 0.19040782305485193, 0.22190505942417793, 0.19200243769680403, 0.18345147012321883, 0.2349566204607073, 0.16078704219010664, 0.37602581372302635, 0.1779391481437611, 0.21488322942810578, 0.18836712774040976, 0.35689232397153015, 0.28816317991387264, 0.1743089689863897, 0.3854576750479156, 0.2542369553385506, 0.206534244956872, 0.2587943064062558, 0.19524074360378574, 0.18103932509268117, 0.1797269446026588, 0.19999029640573385, 0.2581058935911221, 0.20003043104417528, 0.19123782273032475, 0.18060556738752898, 0.1899530374610059, 0.1850509097156814, 0.19762181062248296, 0.20591573277557929, 0.17951074144425216, 0.19035922534935712, 0.18076506820899518, 0.07435679716849741, 0.06153970473394643, 0.07906304495318384, 0.07601689528881794, 0.07042238904642872, 0.07434076142991197, 0.0803369049441941, 0.08377817084947403, 0.06834119632629576]}, "mutation_prompt": null}
{"id": "e3b60809-ffae-48be-8cc8-f54bdd67daa1", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = (1 - (fitness[a] - min(fitness)) / (max(fitness) - min(fitness) + 1e-9))  # Fitness scaling\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15:  # Increased probability for local search\n                    trial_vector = self.local_search(trial_vector, func)\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n        \n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved selection pressure by incorporating fitness scaling in mutation strategy.", "configspace": "", "generation": 28, "fitness": 0.2822820116695746, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "58a5023c-0dfa-4d14-a5db-8a9a08edadad", "metadata": {"aucs": [0.7426754739975612, 0.7435326250791777, 0.7479458269122219, 0.7418226840664228, 0.7305718307850264, 0.7409610300692766, 0.742298922920211, 0.7453525434469837, 0.7339365152549926, 0.5294680237268221, 0.5337635887825434, 0.5412836842517832, 0.5337559777585896, 0.5114012146111284, 0.5499751641483965, 0.5382052975645963, 0.5458637990176649, 0.5614229236956667, 0.1786815960537359, 0.2919054685446588, 0.24080743801521454, 0.3863489643703616, 0.2849389880349449, 0.20859997393547014, 0.30628822550016943, 0.22309963608146832, 0.27967133443130365, 0.17720609703995238, 0.14240845901350263, 0.11375270331805709, 0.148533989750529, 0.24867251575936833, 0.26132277856061636, 0.18878730766580054, 0.2615949329455337, 0.14058046263776192, 0.8952931555033473, 0.9030679367084056, 0.9029852541166559, 0.8719989352876576, 0.9331789446069719, 0.9253707305966169, 0.8959205896472205, 0.8994821223106729, 0.946681749412101, 0.3144443321708318, 0.27905664620977655, 0.3351711027133568, 0.347931767844758, 0.29373685549352746, 0.3642852493257217, 0.2666476254585035, 0.23875914804858922, 0.28423973529368307, 0.47402019201582013, 0.4775458249482367, 0.4515476171803273, 0.5851377795947718, 0.6233870234150951, 0.5384024710449706, 0.43535928861425033, 0.5263002370432999, 0.5024517827166022, 0.16972644221327537, 0.1628888828033569, 0.17018840967409632, 0.1591793874499765, 0.1258315087284726, 0.14988405250778214, 0.16749423686358167, 0.18927738856323506, 0.1791814583958159, 0.14449506990148997, 0.16697318226698166, 0.16614659360188266, 0.16301478890132381, 0.14478216106087416, 0.1721811564912905, 0.14701639348448803, 0.12865314162316932, 0.1563570356767663, 0.0795257716940907, 0.031033281745259766, 0.07590510100293046, 0.02963818217074965, 0.054180532276680626, 0.027080956380845067, 0.030210786144627355, 0.02745437637013437, 0.03325680781606277, 0.1453316645986501, 0.13902629513780995, 0.14892871873737024, 0.13136136242834362, 0.1671748651697752, 0.12812900475693934, 0.1569531090522105, 0.16030783552749794, 0.20803507609931648, 0.05130617426780959, 0.015271212143209256, 0.02358682770521825, 0.023074991195957018, 0.05377069779001342, 0.03502649045094042, 0.022713488370087576, 0.026338191636873343, 0.028850762520472917, 0.16511593978188288, 0.13657508858986844, 0.15960647638069403, 0.1392524724200681, 0.13891642372772672, 0.19172227931281827, 0.12945557244486772, 0.14752889863041752, 0.15316099652075632, 0.5116238761512153, 0.5057530042992775, 0.5267339032496319, 0.5123772588183307, 0.5004592870841913, 0.4952641246074764, 0.49297680332182714, 0.5038571474270348, 0.5064933823570617, 0.10630329392564686, 0.10597837741064886, 0.10184558285924816, 0.10001170103847523, 0.09547832803218936, 0.10369623148308493, 0.09069712170906119, 0.09905200454294372, 0.09767431495757062, 0.1290845489635034, 0.1399989655531535, 0.16505483561933654, 0.15727672237482326, 0.1770286113898628, 0.13514240127941157, 0.1626652229360549, 0.14977249290507166, 0.14692585076639986, 0.3211386244523853, 0.33293948832741105, 0.3302052781110494, 0.35362546308086384, 0.3036366520640561, 0.3059812083013249, 0.3571541193890929, 0.3506802258848789, 0.34852626862716074, 0.2675442909342588, 0.21722772037642368, 0.27365753647540736, 0.24881534985930276, 0.20620734410581443, 0.23967900139448306, 0.24432173125811418, 0.2840542974156578, 0.2559481998791454, 0.19033785939755898, 0.2066995446047657, 0.18806039783309758, 0.18538593392693892, 0.2110377759197397, 0.19970610116017717, 0.19281077125205826, 0.19145656909305675, 0.21113935601661338, 0.19904252794353638, 0.21505057483567713, 0.22821761134897822, 0.20049972972793573, 0.21820685533541984, 0.34684816041837874, 0.36828778611318225, 0.1919759359253962, 0.22466084108662354, 0.1770843735123624, 0.2717586121515929, 0.1824695624442435, 0.5727286690054197, 0.4359141636713514, 0.5687585401063927, 0.4686617825579136, 0.15736841046862649, 0.20265788886623226, 0.18764029002222682, 0.3511328852113741, 0.15982832937182478, 0.18600302652254253, 0.19903459477419394, 0.26723973304181736, 0.4177009406655461, 0.18832324883767215, 0.18780420588483882, 0.17549645894839783, 0.17436164006039923, 0.18625708013936382, 0.17750218543317586, 0.17963448004102156, 0.18686146698170136, 0.1844278964185594, 0.19110923590143192, 0.203367488249939, 0.07651616645711423, 0.07113309376618959, 0.08212097442108424, 0.0786204383572735, 0.07595217991497227, 0.07519565608728784, 0.0811019889790221, 0.08207479589510036, 0.09115941424529705]}, "mutation_prompt": null}
{"id": "fb2d8ced-205b-464f-8067-535a43734f31", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = (1 - (fitness[a] - min(fitness)) / (max(fitness) - min(fitness) + 1e-9)) * np.random.rand()  # Fitness scaling with randomness\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15:  # Increased probability for local search\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.005, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced mutation strategy by introducing a fitness-based adaptive scaling factor.", "configspace": "", "generation": 29, "fitness": 0.32035752324201333, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "e3b60809-ffae-48be-8cc8-f54bdd67daa1", "metadata": {"aucs": [0.8036808478347982, 0.7765879940106316, 0.8117842856127284, 0.7842968251292611, 0.8200842026053005, 0.8075452280432475, 0.8008856559487548, 0.8078857736548372, 0.8075115610397589, 0.63275312098439, 0.6064168074499159, 0.6238707811254327, 0.6208741829974783, 0.6338509957010909, 0.6421728461306724, 0.6561748140549172, 0.6342560850979955, 0.6564291477395672, 0.6176604878464562, 0.17377793535098662, 0.5257773509927774, 0.6219461285741998, 0.5402806413334518, 0.5419764018017054, 0.17194457465145208, 0.5323222238007191, 0.615113153810672, 0.16482923428830587, 0.1464183562464907, 0.1701618186429119, 0.16233857660809192, 0.1661052446650596, 0.48582404860503603, 0.11707604665857563, 0.14689255634862985, 0.1730449412825097, 0.8941968138687301, 0.9363894368489911, 0.9019548096740853, 0.8532493073356402, 0.8791291954386199, 0.8789340907118387, 0.8552899457849024, 0.8486393039192709, 0.8810242426669102, 0.22989420027975316, 0.25532385758251375, 0.18214154157420093, 0.2490488319004579, 0.1800903848551907, 0.3250305682623461, 0.10603051321194912, 0.14309996529261226, 0.22377605023149338, 0.6414510841628489, 0.31146503626889344, 0.5602095865391661, 0.7893525409613098, 0.2625955411087689, 0.7199945078121204, 0.7251348746814952, 0.6282127682416951, 0.2038154624480819, 0.3143854330517193, 0.15489948293955402, 0.12406181099614222, 0.15941750863352477, 0.16181120218817346, 0.12275200137184927, 0.24153256786001698, 0.15667351450688016, 0.2237951820446621, 0.144177147179402, 0.1786881635455233, 0.15437807097735445, 0.1952733323911966, 0.21326958545420271, 0.18710845274392696, 0.12400668052455655, 0.18953693623262913, 0.13554879660637764, 0.03481401142035734, 0.052516784628815705, 0.05035973218510392, 0.0524123710254617, 0.045015705437885134, 0.02975900409282184, 0.03741273851393434, 0.03271520460405741, 0.05805285531480586, 0.12016099508942168, 0.11301382190587517, 0.18699167464478728, 0.13765352463046132, 0.11807136053292999, 0.0388302467870415, 0.16493189158579713, 0.08784941680813174, 0.11662294296603704, 0.14877938809761526, 0.030434381458141813, 0.14919258889670894, 0.07146060390213338, 0.0678945615476827, 0.08611133641937618, 0.10190202732353626, 0.17660755604202028, 0.10816793897635957, 0.08030047414173791, 0.18422874703931313, 0.15597251154178648, 0.11987096397496899, 0.21151073702324752, 0.1975764174500637, 0.16487817235771285, 0.21541074454443798, 0.0976344736633824, 0.5578949172842851, 0.532064698449025, 0.5933094022141947, 0.5283725876684127, 0.5584479677454282, 0.5283950742521568, 0.5304619727798433, 0.548649743760673, 0.5129971028131186, 0.11593756306124392, 0.11490231355690306, 0.13501019463089747, 0.12437276174862577, 0.09615798020479449, 0.13493892193044543, 0.12014897877713115, 0.12635323109550844, 0.11189821789694543, 0.1463704163617765, 0.15311068090645985, 0.17102273111454103, 0.17982099601272183, 0.19856854934312607, 0.16276792412235774, 0.1873923800434456, 0.15478679465038403, 0.23568562683324246, 0.3454097357263952, 0.40492670773078576, 0.3952199476404967, 0.3951883086087723, 0.3940201483823733, 0.33682973613177825, 0.4220597058100438, 0.42731314958074207, 0.45072462963493554, 0.22210255772990728, 0.28129113229370206, 0.2958953506997578, 0.2134630253237264, 0.19720339117934993, 0.23733757710926517, 0.3336028820434642, 0.3343951930836858, 0.3034011015011301, 0.20923130866346995, 0.20194454778723125, 0.21930828109516154, 0.18966411898197222, 0.2206217611866167, 0.2133300660259445, 0.2031617415382717, 0.2025417651012984, 0.20898352431919598, 0.2204397425510347, 0.4205666133114001, 0.48586845676206825, 0.20946181295726063, 0.5413479041664291, 0.23616810123168308, 0.21551215672427948, 0.23324100478975784, 0.5350775864939041, 0.7457251915985106, 0.7427722865012023, 0.1853360657014298, 0.6161591583778844, 0.17876379188926983, 0.750594098314856, 0.7401223659192284, 0.165209609363971, 0.7591724256451944, 0.4544940326697119, 0.34529676780134, 0.2940281951798246, 0.19991073845465646, 0.19925364018003355, 0.2541803532021357, 0.3114143468128131, 0.393416700015633, 0.20368754138515643, 0.18661235871663928, 0.19047003076525926, 0.19153011598410263, 0.16728160260507918, 0.18021051340447558, 0.20376483114305277, 0.182199454313972, 0.19121528497499107, 0.19540773966667657, 0.08012474507766543, 0.08640803860471002, 0.08064085517412001, 0.08081734995193202, 0.08876679591776504, 0.08363977694325897, 0.08148030897264613, 0.08696910327032692, 0.09099518846605281]}, "mutation_prompt": null}
{"id": "b4dbe21f-85ac-4571-8453-4d39e1b511d7", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = (1 - (fitness[a] - min(fitness)) / (max(fitness) - min(fitness) + 1e-9)) * np.random.rand()  # Fitness scaling with randomness\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15:  # Increased probability for local search\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced local search perturbation for improved exploration and exploitation balance.", "configspace": "", "generation": 30, "fitness": 0.32828002805602813, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "fb2d8ced-205b-464f-8067-535a43734f31", "metadata": {"aucs": [0.8086462511000572, 0.8036253896726829, 0.811321019997626, 0.7974260039780147, 0.8127859069478912, 0.8041627702216799, 0.7956393998401599, 0.8017483409484195, 0.8090703668272262, 0.6423196844775837, 0.6178258120636837, 0.6364159477504585, 0.6322029231671602, 0.6421258816431699, 0.6338316209244141, 0.6308177261280885, 0.6321020167347431, 0.6526502613462617, 0.45131643664684984, 0.5610600057619166, 0.5324230336055363, 0.5833484776692499, 0.5933643750933879, 0.5423734057861673, 0.5833399394929768, 0.5551019724603821, 0.5152409476512849, 0.13009254495808453, 0.5299498298721517, 0.16839605144475323, 0.43553419704269614, 0.5358070959889969, 0.1692271873951433, 0.5149377698406319, 0.468891983732009, 0.17139865818842281, 0.8878963433405226, 0.9364017895720923, 0.9019721244332396, 0.8559241926943645, 0.8791286554418876, 0.8789207597030545, 0.8685902657839143, 0.8190312025957386, 0.8725775215435764, 0.2651051729640992, 0.1914053791478415, 0.2563674168383081, 0.2817977607018348, 0.14714117885701217, 0.1921855393970634, 0.1504585414428402, 0.17641944193385295, 0.21874446778729661, 0.5721413658385757, 0.5755871199670244, 0.5713361985441656, 0.7487454652559, 0.26281263066269667, 0.5631864056224265, 0.7018626959497911, 0.632525357449373, 0.22307104525266253, 0.2072795260550757, 0.15269385357417775, 0.12511443260638078, 0.18269994508323417, 0.15604694598612445, 0.15993322678858135, 0.2142869311192599, 0.1705961398158553, 0.1412695608712089, 0.1495935045675355, 0.16269740207607664, 0.1305005977106748, 0.19029441719775253, 0.21338192966907932, 0.20426923280991693, 0.14650061759311084, 0.11987840773664715, 0.12885780544601733, 0.08117147395094648, 0.08702802796531872, 9.999999999998899e-05, 0.08823852488113249, 0.03190622216832073, 0.0008718154548421619, 0.05220173169212994, 0.0164048367764853, 0.057363749912084705, 0.1908999368929245, 0.15230836392167135, 0.20084428752034178, 0.08718238911681842, 0.06303315191977876, 0.04728753274758346, 0.1541740071911234, 0.1901866165923265, 0.12414542876362356, 0.16008690354908361, 0.029315550054744066, 0.09923473443596609, 0.0820240671562169, 0.05827745117768701, 0.05286683321770125, 0.09816016206146505, 0.13366784793938824, 0.061821034762374216, 0.1350922431284033, 0.17800059160511594, 0.13222960992023458, 0.12246144477957766, 0.13879630617969596, 0.23642852834595562, 0.15104342658019, 0.21827965024411455, 0.1144915630964104, 0.5340349189476976, 0.49493585034756327, 0.548550166779407, 0.47434855343360294, 0.5352928270222874, 0.5006318264407577, 0.4955806524941522, 0.5387460921480813, 0.5197427345841856, 0.1269271990914369, 0.1316416320802799, 0.10171562667964573, 0.11395132477548164, 0.1259035613986642, 0.1651602695037021, 0.11394808406188317, 0.13710309054482295, 0.13369759529414116, 0.16357631844268328, 0.18411301386680567, 0.18624586911928287, 0.1688711176572678, 0.1617808346288515, 0.15452678178807489, 0.1627232630543971, 0.15420332366435963, 0.16803128661057432, 0.3494633200915541, 0.42325139407049095, 0.38237522701973425, 0.44230081871395355, 0.38791756251200527, 0.36209841954295585, 0.39908183818227194, 0.4425949508004845, 0.4626377519935583, 0.21336625282706878, 0.24716951845137058, 0.2595122111382534, 0.2509726664987477, 0.24438514988047455, 0.26649268451202357, 0.244801293366257, 0.3056322514762583, 0.30576407140954553, 0.1933647460238027, 0.21376905832752702, 0.19979992973911298, 0.22852467656630204, 0.1849152174754377, 0.20047863464519255, 0.20525533756783398, 0.19497755639297598, 0.20421559003784573, 0.2197449282380729, 0.3363970126125436, 0.2278238612069805, 0.23135264969242064, 0.5245338737564554, 0.5680357468686459, 0.21530406472732477, 0.2441520796026071, 0.49659543909903003, 0.7731865237169754, 0.5552309394329245, 0.18598439013888368, 0.6924043571341836, 0.17932825574916045, 0.7894813002195474, 0.7471787714383333, 0.4740181396512687, 0.7469878219606227, 0.418279739056458, 0.4116715690777225, 0.3357650626040184, 0.19999649928641006, 0.19901236233414188, 0.27367655622687914, 0.3135825937917719, 0.3719933728401754, 0.20367194326617866, 0.1888665993356089, 0.1776345330238377, 0.20129828731872668, 0.1757184783732697, 0.1772992782731273, 0.1829092606985162, 0.17715424148558745, 0.1779477707211834, 0.197577718068789, 0.08611391423227199, 0.08889426971482717, 0.09245136309665924, 0.08680671935429707, 0.08380529700896144, 0.08409833216505636, 0.09397252243005694, 0.08599977345592269, 0.08206810636291284]}, "mutation_prompt": null}
{"id": "6781fb39-1aaf-4f5c-b71f-59ab6325137f", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = (1 - (fitness[a] - min(fitness)) / (max(fitness) - min(fitness) + 1e-9)) * np.random.rand()  # Fitness scaling with randomness\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                # Updated line for improved mutation strategy\n                trial_vector = np.where(np.random.rand(self.dim) < CR_adaptive, mutant_vector, self.pop[i])\n\n                # Local search boosting\n                if np.random.rand() < 0.15:  # Increased probability for local search\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced local search perturbation with refined mutation strategy for improved convergence.", "configspace": "", "generation": 31, "fitness": 0.32828002805602813, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "b4dbe21f-85ac-4571-8453-4d39e1b511d7", "metadata": {"aucs": [0.8086462511000572, 0.8036253896726829, 0.811321019997626, 0.7974260039780147, 0.8127859069478912, 0.8041627702216799, 0.7956393998401599, 0.8017483409484195, 0.8090703668272262, 0.6423196844775837, 0.6178258120636837, 0.6364159477504585, 0.6322029231671602, 0.6421258816431699, 0.6338316209244141, 0.6308177261280885, 0.6321020167347431, 0.6526502613462617, 0.45131643664684984, 0.5610600057619166, 0.5324230336055363, 0.5833484776692499, 0.5933643750933879, 0.5423734057861673, 0.5833399394929768, 0.5551019724603821, 0.5152409476512849, 0.13009254495808453, 0.5299498298721517, 0.16839605144475323, 0.43553419704269614, 0.5358070959889969, 0.1692271873951433, 0.5149377698406319, 0.468891983732009, 0.17139865818842281, 0.8878963433405226, 0.9364017895720923, 0.9019721244332396, 0.8559241926943645, 0.8791286554418876, 0.8789207597030545, 0.8685902657839143, 0.8190312025957386, 0.8725775215435764, 0.2651051729640992, 0.1914053791478415, 0.2563674168383081, 0.2817977607018348, 0.14714117885701217, 0.1921855393970634, 0.1504585414428402, 0.17641944193385295, 0.21874446778729661, 0.5721413658385757, 0.5755871199670244, 0.5713361985441656, 0.7487454652559, 0.26281263066269667, 0.5631864056224265, 0.7018626959497911, 0.632525357449373, 0.22307104525266253, 0.2072795260550757, 0.15269385357417775, 0.12511443260638078, 0.18269994508323417, 0.15604694598612445, 0.15993322678858135, 0.2142869311192599, 0.1705961398158553, 0.1412695608712089, 0.1495935045675355, 0.16269740207607664, 0.1305005977106748, 0.19029441719775253, 0.21338192966907932, 0.20426923280991693, 0.14650061759311084, 0.11987840773664715, 0.12885780544601733, 0.08117147395094648, 0.08702802796531872, 9.999999999998899e-05, 0.08823852488113249, 0.03190622216832073, 0.0008718154548421619, 0.05220173169212994, 0.0164048367764853, 0.057363749912084705, 0.1908999368929245, 0.15230836392167135, 0.20084428752034178, 0.08718238911681842, 0.06303315191977876, 0.04728753274758346, 0.1541740071911234, 0.1901866165923265, 0.12414542876362356, 0.16008690354908361, 0.029315550054744066, 0.09923473443596609, 0.0820240671562169, 0.05827745117768701, 0.05286683321770125, 0.09816016206146505, 0.13366784793938824, 0.061821034762374216, 0.1350922431284033, 0.17800059160511594, 0.13222960992023458, 0.12246144477957766, 0.13879630617969596, 0.23642852834595562, 0.15104342658019, 0.21827965024411455, 0.1144915630964104, 0.5340349189476976, 0.49493585034756327, 0.548550166779407, 0.47434855343360294, 0.5352928270222874, 0.5006318264407577, 0.4955806524941522, 0.5387460921480813, 0.5197427345841856, 0.1269271990914369, 0.1316416320802799, 0.10171562667964573, 0.11395132477548164, 0.1259035613986642, 0.1651602695037021, 0.11394808406188317, 0.13710309054482295, 0.13369759529414116, 0.16357631844268328, 0.18411301386680567, 0.18624586911928287, 0.1688711176572678, 0.1617808346288515, 0.15452678178807489, 0.1627232630543971, 0.15420332366435963, 0.16803128661057432, 0.3494633200915541, 0.42325139407049095, 0.38237522701973425, 0.44230081871395355, 0.38791756251200527, 0.36209841954295585, 0.39908183818227194, 0.4425949508004845, 0.4626377519935583, 0.21336625282706878, 0.24716951845137058, 0.2595122111382534, 0.2509726664987477, 0.24438514988047455, 0.26649268451202357, 0.244801293366257, 0.3056322514762583, 0.30576407140954553, 0.1933647460238027, 0.21376905832752702, 0.19979992973911298, 0.22852467656630204, 0.1849152174754377, 0.20047863464519255, 0.20525533756783398, 0.19497755639297598, 0.20421559003784573, 0.2197449282380729, 0.3363970126125436, 0.2278238612069805, 0.23135264969242064, 0.5245338737564554, 0.5680357468686459, 0.21530406472732477, 0.2441520796026071, 0.49659543909903003, 0.7731865237169754, 0.5552309394329245, 0.18598439013888368, 0.6924043571341836, 0.17932825574916045, 0.7894813002195474, 0.7471787714383333, 0.4740181396512687, 0.7469878219606227, 0.418279739056458, 0.4116715690777225, 0.3357650626040184, 0.19999649928641006, 0.19901236233414188, 0.27367655622687914, 0.3135825937917719, 0.3719933728401754, 0.20367194326617866, 0.1888665993356089, 0.1776345330238377, 0.20129828731872668, 0.1757184783732697, 0.1772992782731273, 0.1829092606985162, 0.17715424148558745, 0.1779477707211834, 0.197577718068789, 0.08611391423227199, 0.08889426971482717, 0.09245136309665924, 0.08680671935429707, 0.08380529700896144, 0.08409833216505636, 0.09397252243005694, 0.08599977345592269, 0.08206810636291284]}, "mutation_prompt": null}
{"id": "a1498af9-6bf3-44c1-9484-cbed00fe8950", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = (1 - (fitness[a] - min(fitness)) / (max(fitness) - min(fitness) + 1e-9)) * np.random.rand()  # Fitness scaling with randomness\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with adaptive local search probability.", "configspace": "", "generation": 32, "fitness": 0.3317052304351982, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.25.", "error": "", "parent_id": "b4dbe21f-85ac-4571-8453-4d39e1b511d7", "metadata": {"aucs": [0.8178206201647986, 0.7758970247433123, 0.8049308864072948, 0.7975497140850081, 0.8063422817062995, 0.8158769628327522, 0.8104601748151303, 0.7920424921790645, 0.8040902431542288, 0.6621229269090416, 0.5037886351333936, 0.6407906770681195, 0.6175787439774285, 0.6433959414386414, 0.6728492415326929, 0.643849140614501, 0.6615251279239212, 0.614291699204806, 0.6561722838851769, 0.5485028268534899, 0.5978999224052812, 0.57408787953934, 0.5299227899603698, 0.6622941033882985, 0.6539907554853415, 0.5832562474660536, 0.6628173681403837, 0.14401091392395393, 0.17089080466177142, 0.14800462633605616, 0.16586247917418184, 0.5330050524125286, 0.11775540135499918, 0.4983493706115295, 0.16989111884630126, 0.542431047095462, 0.8822725565751305, 0.9073705948544037, 0.8628857765006627, 0.8698250891389416, 0.849104813385124, 0.872449879717804, 0.858947065079215, 0.940483009771947, 0.8778534821031672, 0.18875467355210007, 0.18138920508086842, 0.06848331286355713, 0.22225369170508624, 0.11355523603015905, 0.33631262497137937, 0.18929976216904798, 0.1393367550380672, 0.2234409286362724, 0.6969218708821312, 0.6895453133594952, 0.1970606513222144, 0.7121741346400293, 0.7160278830551103, 0.34709726971715704, 0.7475869855256134, 0.31114337924703206, 0.522142296921545, 0.14324422217848265, 0.1102052340225036, 0.29477923851942356, 0.16264808768954775, 0.2029007822790707, 0.3622088712228041, 0.219835334642008, 0.14677667739989575, 0.15898200294918774, 0.13713459651343984, 0.18481985506001597, 0.1413752803557745, 0.17897627100745572, 0.15981703677677395, 0.13959661638733922, 0.15056312159486918, 0.13996966640236586, 0.13035424802327855, 0.08192237356879961, 0.09148959621123465, 0.026110457937879583, 0.046336278840988565, 0.001448276083767852, 9.999999999998899e-05, 0.06451105927267675, 0.049787568220696965, 0.11167799661222266, 0.11179077654275338, 0.12131984141165408, 0.1410217416583368, 0.15344847529442052, 0.11814344726179793, 0.14549676306045767, 0.11676653734991982, 0.19142066782946154, 0.1322480082615568, 0.10313240637704801, 0.024237618617153234, 0.11171627901276993, 0.07946949457753238, 0.06990276127348394, 0.11051739123151605, 0.10769952053805809, 0.09469400565992037, 0.09409544485387833, 0.1632852605061882, 0.20048534959627573, 0.08741270562225112, 0.08848993439621411, 0.22596831250337324, 0.20910401745000518, 0.14103694210877515, 0.1799031139715771, 0.21050734002754112, 0.5341815664785472, 0.5819205662605, 0.5541311228519636, 0.5140177735548755, 0.5296903752593921, 0.4757767696520907, 0.586925654363536, 0.5200256681203064, 0.5046467913873152, 0.11487193024124331, 0.12050517763028079, 0.1240064213448766, 0.1409379042308817, 0.09706968302522911, 0.1376969543085239, 0.1340841915010702, 0.13969088626038006, 0.11040221437391806, 0.19295178519616318, 0.18970135968710833, 0.18408445827786413, 0.1548072133931313, 0.16937022373380695, 0.17206490241658756, 0.17821815625349902, 0.16450012954009707, 0.15680813239670877, 0.3765446207719241, 0.3422397250111111, 0.36167761731536563, 0.3324363742412396, 0.4210704742130046, 0.3938355338512882, 0.49607913713586427, 0.45932932317154496, 0.3972113070492025, 0.23436549575895127, 0.34093332389562714, 0.29272240730592747, 0.22755245899415866, 0.2628915031369201, 0.25146782965073955, 0.26998914316730394, 0.26487118055630576, 0.24360869658795237, 0.2258105314121488, 0.19363046118115235, 0.21334102936790056, 0.20746965951118712, 0.20681701129858854, 0.2232038506179238, 0.20558963049191192, 0.22201435409368764, 0.20628310927417093, 0.21433399088052318, 0.4590951635302094, 0.21323543567669123, 0.576173939717036, 0.5128294427984901, 0.23233206188935396, 0.20292919270507304, 0.5100655488991801, 0.6153193953988707, 0.5757200152100582, 0.40042123092359183, 0.17718441009385588, 0.7703294429104393, 0.19990031851458911, 0.7827620809397511, 0.7045812426100143, 0.16250317899349864, 0.8082874759823194, 0.3983388202033602, 0.37020205506568804, 0.5167844960066916, 0.19458520202402663, 0.19857500749891432, 0.252107573692366, 0.3592057431195752, 0.6392514586295683, 0.3070497122161966, 0.17545313680562868, 0.1923380689919868, 0.19113575566323082, 0.18044183028890837, 0.18235576389437214, 0.17264218210922044, 0.18101383507275592, 0.17520115130549496, 0.17700204066232395, 0.07666463365692311, 0.0945192490966632, 0.09189148001058711, 0.08379887979204992, 0.0842699801735618, 0.07553782574617784, 0.08336400940849198, 0.09394320593995908, 0.08762863441089175]}, "mutation_prompt": null}
{"id": "1c9b09b6-b7f4-4458-b326-8423bc90cfd3", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = (1 - (fitness[a] - min(fitness)) / (max(fitness) - min(fitness) + 1e-9)) * np.random.normal(0, 1)  # Fitness scaling with randomness\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with improved mutation scaling for diverse exploration.", "configspace": "", "generation": 33, "fitness": 0.3277856764234006, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "a1498af9-6bf3-44c1-9484-cbed00fe8950", "metadata": {"aucs": [0.7748782836724111, 0.7802973323438623, 0.7941755297526751, 0.7814728408347622, 0.8023679891667608, 0.7736605256540279, 0.7905329143223813, 0.7971150589737352, 0.7851317440746184, 0.6119845327677194, 0.6288043346469088, 0.6131806117414266, 0.6184296937205814, 0.6093737405163395, 0.6424371658862775, 0.6116088370371238, 0.5963202465984657, 0.6434190462204805, 0.5666156200902308, 0.5148655251502825, 0.55026021901308, 0.17000113355610025, 0.5070439914136624, 0.4968020439275588, 0.4934723353252485, 0.5821670681414857, 0.5437035088891259, 0.5051671167479923, 0.1484888453600275, 0.16429853124567895, 0.4972657846411417, 0.14653210337378786, 0.14333182261946098, 0.40952667028733825, 0.16846945575773586, 0.4520638131540776, 0.8786704710555268, 0.9194695821098328, 0.8657511392238554, 0.8606165091350996, 0.9119160992030731, 0.8837294561046286, 0.8327620157514525, 0.9322061167429655, 0.8971868918652212, 0.31036279782171516, 0.2534629547000379, 0.3069904447184867, 0.37580452029483347, 0.2652028844184541, 0.2714310063632114, 0.2481630554217178, 0.30991803547835883, 0.27619176511545473, 0.6335294367049422, 0.7121646001743163, 0.724656144276876, 0.2961536465748148, 0.20576007911325123, 0.6071356631757514, 0.5493720450012273, 0.6640967155712596, 0.5960491162070132, 0.2273879691392121, 0.2659529758641096, 0.1770707092385021, 0.11601066683067551, 0.15899068299478025, 0.22715924947907618, 0.2544814515921743, 0.1570112071182903, 0.24812244669504502, 0.13507474872154157, 0.16770522368627794, 0.1804822085263722, 0.16029977752954905, 0.14226393208267896, 0.12954463040159425, 0.15172632531375496, 0.2677149313316417, 0.12832651987400712, 0.04985446944056515, 0.07443671722797518, 0.0429904456503164, 0.11120112698777795, 0.037443947131560185, 0.05658596014772466, 0.0636335234131733, 0.06543436431054273, 0.06215213416671905, 0.18775144776540054, 0.15064761780917146, 0.19054112498577325, 0.10108424141344008, 0.08031700022152166, 0.22672491359480318, 0.21640093938852778, 0.21661402330277346, 0.16022451590518594, 0.0728713857613198, 0.05327238909492116, 0.09910140240971466, 0.0790481735310159, 0.05743764899937176, 0.0758041581130503, 0.06762709586193305, 0.06805163302130945, 0.0752539792114536, 0.15962833239614194, 0.1488171356437057, 0.17955662893598512, 0.1573481906030063, 0.1760230378879436, 0.18245935513708367, 0.11789756979072241, 0.125990434296551, 0.09091116939485877, 0.5173407526476588, 0.5524025271884254, 0.5376754280055243, 0.5072540163743817, 0.5480566063209533, 0.5586226735452254, 0.5363811575722086, 0.5488893665642597, 0.5378101896747126, 0.12779473712033596, 0.127033749505294, 0.1334531879678008, 0.10566003522792344, 0.12415835447022705, 0.13597981090793076, 0.0979494952813269, 0.12678983472218353, 0.09514235476807587, 0.1737390534043186, 0.19872336031083682, 0.1671658217667371, 0.18001041722772315, 0.1515143235896501, 0.1883202738441211, 0.15849976885663541, 0.1626192254274229, 0.1683398229071148, 0.33127795793401493, 0.3028700819460802, 0.34734806766627613, 0.38761624848109266, 0.37525460235036634, 0.33349041895876286, 0.42006508006289955, 0.4658924308859088, 0.4149477228891957, 0.23075405142177485, 0.21035560836357603, 0.2477196840378193, 0.30317929193674686, 0.2629126447706531, 0.2389392301643627, 0.29836071890347515, 0.31456977253212504, 0.30286962904341697, 0.19612092801234948, 0.18869765302412211, 0.18997583642349702, 0.2106020540033703, 0.2191432274214734, 0.19782557477104978, 0.22975767278094583, 0.19883991595695727, 0.19158043573812011, 0.49540361956558376, 0.5164900447329862, 0.4032733371413808, 0.5306041947663714, 0.4979664565482381, 0.3254026463190133, 0.5235203567263138, 0.22567893577635534, 0.4601145652269565, 0.1799574873666817, 0.18293603514355472, 0.5671676265498087, 0.641258855536828, 0.5990575726193768, 0.6008522048545976, 0.4044133404249407, 0.1858373598679669, 0.7039883672829923, 0.4417866348421642, 0.20380010619429845, 0.1873972663001473, 0.26181644333101883, 0.5233750545815636, 0.16192061952820003, 0.1841387346547424, 0.5053607829121685, 0.10280181217647155, 0.20223468899361474, 0.17788012123188568, 0.19458230775899066, 0.19846926995561953, 0.17747699776596315, 0.17999214988632373, 0.1781101160009705, 0.19391026367033437, 0.19099796660784263, 0.08105938394020051, 0.07923620715533419, 0.07540616884894336, 0.08293861784708911, 0.07953531680047399, 0.08112141037682108, 0.08315406137395398, 0.08630615453125179, 0.08419845973848172]}, "mutation_prompt": null}
{"id": "2eb622e2-e49f-41bf-95a5-0935b8593f5e", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = (1 - (fitness[a] - min(fitness)) / (max(fitness) - min(fitness) + 1e-9)) * np.random.rand()  # Fitness scaling with randomness\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with adaptive local search probability.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a1498af9-6bf3-44c1-9484-cbed00fe8950", "metadata": {"aucs": [0.8178206201647986, 0.7758970247433123, 0.8049308864072948, 0.7975497140850081, 0.8063422817062995, 0.8158769628327522, 0.8104601748151303, 0.7920424921790645, 0.8040902431542288, 0.6621229269090416, 0.5037886351333936, 0.6407906770681195, 0.6175787439774285, 0.6433959414386414, 0.6728492415326929, 0.643849140614501, 0.6615251279239212, 0.614291699204806, 0.6561722838851769, 0.5485028268534899, 0.5978999224052812, 0.57408787953934, 0.5299227899603698, 0.6622941033882985, 0.6539907554853415, 0.5832562474660536, 0.6628173681403837, 0.14401091392395393, 0.17089080466177142, 0.14800462633605616, 0.16586247917418184, 0.5330050524125286, 0.11775540135499918, 0.4983493706115295, 0.16989111884630126, 0.542431047095462, 0.8822725565751305, 0.9073705948544037, 0.8628857765006627, 0.8698250891389416, 0.849104813385124, 0.872449879717804, 0.858947065079215, 0.940483009771947, 0.8778534821031672, 0.18875467355210007, 0.18138920508086842, 0.06848331286355713, 0.22225369170508624, 0.11355523603015905, 0.33631262497137937, 0.18929976216904798, 0.1393367550380672, 0.2234409286362724, 0.6969218708821312, 0.6895453133594952, 0.1970606513222144, 0.7121741346400293, 0.7160278830551103, 0.34709726971715704, 0.7475869855256134, 0.31114337924703206, 0.522142296921545, 0.14324422217848265, 0.1102052340225036, 0.29477923851942356, 0.16264808768954775, 0.2029007822790707, 0.3622088712228041, 0.219835334642008, 0.14677667739989575, 0.15898200294918774, 0.13713459651343984, 0.18481985506001597, 0.1413752803557745, 0.17897627100745572, 0.15981703677677395, 0.13959661638733922, 0.15056312159486918, 0.13996966640236586, 0.13035424802327855, 0.08192237356879961, 0.09148959621123465, 0.026110457937879583, 0.046336278840988565, 0.001448276083767852, 9.999999999998899e-05, 0.06451105927267675, 0.049787568220696965, 0.11167799661222266, 0.11179077654275338, 0.12131984141165408, 0.1410217416583368, 0.15344847529442052, 0.11814344726179793, 0.14549676306045767, 0.11676653734991982, 0.19142066782946154, 0.1322480082615568, 0.10313240637704801, 0.024237618617153234, 0.11171627901276993, 0.07946949457753238, 0.06990276127348394, 0.11051739123151605, 0.10769952053805809, 0.09469400565992037, 0.09409544485387833, 0.1632852605061882, 0.20048534959627573, 0.08741270562225112, 0.08848993439621411, 0.22596831250337324, 0.20910401745000518, 0.14103694210877515, 0.1799031139715771, 0.21050734002754112, 0.5341815664785472, 0.5819205662605, 0.5541311228519636, 0.5140177735548755, 0.5296903752593921, 0.4757767696520907, 0.586925654363536, 0.5200256681203064, 0.5046467913873152, 0.11487193024124331, 0.12050517763028079, 0.1240064213448766, 0.1409379042308817, 0.09706968302522911, 0.1376969543085239, 0.1340841915010702, 0.13969088626038006, 0.11040221437391806, 0.19295178519616318, 0.18970135968710833, 0.18408445827786413, 0.1548072133931313, 0.16937022373380695, 0.17206490241658756, 0.17821815625349902, 0.16450012954009707, 0.15680813239670877, 0.3765446207719241, 0.3422397250111111, 0.36167761731536563, 0.3324363742412396, 0.4210704742130046, 0.3938355338512882, 0.49607913713586427, 0.45932932317154496, 0.3972113070492025, 0.23436549575895127, 0.34093332389562714, 0.29272240730592747, 0.22755245899415866, 0.2628915031369201, 0.25146782965073955, 0.26998914316730394, 0.26487118055630576, 0.24360869658795237, 0.2258105314121488, 0.19363046118115235, 0.21334102936790056, 0.20746965951118712, 0.20681701129858854, 0.2232038506179238, 0.20558963049191192, 0.22201435409368764, 0.20628310927417093, 0.21433399088052318, 0.4590951635302094, 0.21323543567669123, 0.576173939717036, 0.5128294427984901, 0.23233206188935396, 0.20292919270507304, 0.5100655488991801, 0.6153193953988707, 0.5757200152100582, 0.40042123092359183, 0.17718441009385588, 0.7703294429104393, 0.19990031851458911, 0.7827620809397511, 0.7045812426100143, 0.16250317899349864, 0.8082874759823194, 0.3983388202033602, 0.37020205506568804, 0.5167844960066916, 0.19458520202402663, 0.19857500749891432, 0.252107573692366, 0.3592057431195752, 0.6392514586295683, 0.3070497122161966, 0.17545313680562868, 0.1923380689919868, 0.19113575566323082, 0.18044183028890837, 0.18235576389437214, 0.17264218210922044, 0.18101383507275592, 0.17520115130549496, 0.17700204066232395, 0.07666463365692311, 0.0945192490966632, 0.09189148001058711, 0.08379887979204992, 0.0842699801735618, 0.07553782574617784, 0.08336400940849198, 0.09394320593995908, 0.08762863441089175]}, "mutation_prompt": null}
{"id": "c69ffc0f-03d6-400e-b348-cb94609dce89", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = (1 - (fitness[a] - min(fitness)) / (max(fitness) - min(fitness) + 1e-9)) * np.random.rand()  # Fitness scaling with randomness\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with adaptive local search probability.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a1498af9-6bf3-44c1-9484-cbed00fe8950", "metadata": {"aucs": [0.8178206201647986, 0.7758970247433123, 0.8049308864072948, 0.7975497140850081, 0.8063422817062995, 0.8158769628327522, 0.8104601748151303, 0.7920424921790645, 0.8040902431542288, 0.6621229269090416, 0.5037886351333936, 0.6407906770681195, 0.6175787439774285, 0.6433959414386414, 0.6728492415326929, 0.643849140614501, 0.6615251279239212, 0.614291699204806, 0.6561722838851769, 0.5485028268534899, 0.5978999224052812, 0.57408787953934, 0.5299227899603698, 0.6622941033882985, 0.6539907554853415, 0.5832562474660536, 0.6628173681403837, 0.14401091392395393, 0.17089080466177142, 0.14800462633605616, 0.16586247917418184, 0.5330050524125286, 0.11775540135499918, 0.4983493706115295, 0.16989111884630126, 0.542431047095462, 0.8822725565751305, 0.9073705948544037, 0.8628857765006627, 0.8698250891389416, 0.849104813385124, 0.872449879717804, 0.858947065079215, 0.940483009771947, 0.8778534821031672, 0.18875467355210007, 0.18138920508086842, 0.06848331286355713, 0.22225369170508624, 0.11355523603015905, 0.33631262497137937, 0.18929976216904798, 0.1393367550380672, 0.2234409286362724, 0.6969218708821312, 0.6895453133594952, 0.1970606513222144, 0.7121741346400293, 0.7160278830551103, 0.34709726971715704, 0.7475869855256134, 0.31114337924703206, 0.522142296921545, 0.14324422217848265, 0.1102052340225036, 0.29477923851942356, 0.16264808768954775, 0.2029007822790707, 0.3622088712228041, 0.219835334642008, 0.14677667739989575, 0.15898200294918774, 0.13713459651343984, 0.18481985506001597, 0.1413752803557745, 0.17897627100745572, 0.15981703677677395, 0.13959661638733922, 0.15056312159486918, 0.13996966640236586, 0.13035424802327855, 0.08192237356879961, 0.09148959621123465, 0.026110457937879583, 0.046336278840988565, 0.001448276083767852, 9.999999999998899e-05, 0.06451105927267675, 0.049787568220696965, 0.11167799661222266, 0.11179077654275338, 0.12131984141165408, 0.1410217416583368, 0.15344847529442052, 0.11814344726179793, 0.14549676306045767, 0.11676653734991982, 0.19142066782946154, 0.1322480082615568, 0.10313240637704801, 0.024237618617153234, 0.11171627901276993, 0.07946949457753238, 0.06990276127348394, 0.11051739123151605, 0.10769952053805809, 0.09469400565992037, 0.09409544485387833, 0.1632852605061882, 0.20048534959627573, 0.08741270562225112, 0.08848993439621411, 0.22596831250337324, 0.20910401745000518, 0.14103694210877515, 0.1799031139715771, 0.21050734002754112, 0.5341815664785472, 0.5819205662605, 0.5541311228519636, 0.5140177735548755, 0.5296903752593921, 0.4757767696520907, 0.586925654363536, 0.5200256681203064, 0.5046467913873152, 0.11487193024124331, 0.12050517763028079, 0.1240064213448766, 0.1409379042308817, 0.09706968302522911, 0.1376969543085239, 0.1340841915010702, 0.13969088626038006, 0.11040221437391806, 0.19295178519616318, 0.18970135968710833, 0.18408445827786413, 0.1548072133931313, 0.16937022373380695, 0.17206490241658756, 0.17821815625349902, 0.16450012954009707, 0.15680813239670877, 0.3765446207719241, 0.3422397250111111, 0.36167761731536563, 0.3324363742412396, 0.4210704742130046, 0.3938355338512882, 0.49607913713586427, 0.45932932317154496, 0.3972113070492025, 0.23436549575895127, 0.34093332389562714, 0.29272240730592747, 0.22755245899415866, 0.2628915031369201, 0.25146782965073955, 0.26998914316730394, 0.26487118055630576, 0.24360869658795237, 0.2258105314121488, 0.19363046118115235, 0.21334102936790056, 0.20746965951118712, 0.20681701129858854, 0.2232038506179238, 0.20558963049191192, 0.22201435409368764, 0.20628310927417093, 0.21433399088052318, 0.4590951635302094, 0.21323543567669123, 0.576173939717036, 0.5128294427984901, 0.23233206188935396, 0.20292919270507304, 0.5100655488991801, 0.6153193953988707, 0.5757200152100582, 0.40042123092359183, 0.17718441009385588, 0.7703294429104393, 0.19990031851458911, 0.7827620809397511, 0.7045812426100143, 0.16250317899349864, 0.8082874759823194, 0.3983388202033602, 0.37020205506568804, 0.5167844960066916, 0.19458520202402663, 0.19857500749891432, 0.252107573692366, 0.3592057431195752, 0.6392514586295683, 0.3070497122161966, 0.17545313680562868, 0.1923380689919868, 0.19113575566323082, 0.18044183028890837, 0.18235576389437214, 0.17264218210922044, 0.18101383507275592, 0.17520115130549496, 0.17700204066232395, 0.07666463365692311, 0.0945192490966632, 0.09189148001058711, 0.08379887979204992, 0.0842699801735618, 0.07553782574617784, 0.08336400940849198, 0.09394320593995908, 0.08762863441089175]}, "mutation_prompt": null}
{"id": "96d7bc15-96cb-46cd-b0b0-7abb38455dcc", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = (1 - (fitness[a] - min(fitness)) / (max(fitness) - min(fitness) + 1e-9)) * np.random.rand()  # Fitness scaling with randomness\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with adaptive local search probability.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a1498af9-6bf3-44c1-9484-cbed00fe8950", "metadata": {"aucs": [0.8178206201647986, 0.7758970247433123, 0.8049308864072948, 0.7975497140850081, 0.8063422817062995, 0.8158769628327522, 0.8104601748151303, 0.7920424921790645, 0.8040902431542288, 0.6621229269090416, 0.5037886351333936, 0.6407906770681195, 0.6175787439774285, 0.6433959414386414, 0.6728492415326929, 0.643849140614501, 0.6615251279239212, 0.614291699204806, 0.6561722838851769, 0.5485028268534899, 0.5978999224052812, 0.57408787953934, 0.5299227899603698, 0.6622941033882985, 0.6539907554853415, 0.5832562474660536, 0.6628173681403837, 0.14401091392395393, 0.17089080466177142, 0.14800462633605616, 0.16586247917418184, 0.5330050524125286, 0.11775540135499918, 0.4983493706115295, 0.16989111884630126, 0.542431047095462, 0.8822725565751305, 0.9073705948544037, 0.8628857765006627, 0.8698250891389416, 0.849104813385124, 0.872449879717804, 0.858947065079215, 0.940483009771947, 0.8778534821031672, 0.18875467355210007, 0.18138920508086842, 0.06848331286355713, 0.22225369170508624, 0.11355523603015905, 0.33631262497137937, 0.18929976216904798, 0.1393367550380672, 0.2234409286362724, 0.6969218708821312, 0.6895453133594952, 0.1970606513222144, 0.7121741346400293, 0.7160278830551103, 0.34709726971715704, 0.7475869855256134, 0.31114337924703206, 0.522142296921545, 0.14324422217848265, 0.1102052340225036, 0.29477923851942356, 0.16264808768954775, 0.2029007822790707, 0.3622088712228041, 0.219835334642008, 0.14677667739989575, 0.15898200294918774, 0.13713459651343984, 0.18481985506001597, 0.1413752803557745, 0.17897627100745572, 0.15981703677677395, 0.13959661638733922, 0.15056312159486918, 0.13996966640236586, 0.13035424802327855, 0.08192237356879961, 0.09148959621123465, 0.026110457937879583, 0.046336278840988565, 0.001448276083767852, 9.999999999998899e-05, 0.06451105927267675, 0.049787568220696965, 0.11167799661222266, 0.11179077654275338, 0.12131984141165408, 0.1410217416583368, 0.15344847529442052, 0.11814344726179793, 0.14549676306045767, 0.11676653734991982, 0.19142066782946154, 0.1322480082615568, 0.10313240637704801, 0.024237618617153234, 0.11171627901276993, 0.07946949457753238, 0.06990276127348394, 0.11051739123151605, 0.10769952053805809, 0.09469400565992037, 0.09409544485387833, 0.1632852605061882, 0.20048534959627573, 0.08741270562225112, 0.08848993439621411, 0.22596831250337324, 0.20910401745000518, 0.14103694210877515, 0.1799031139715771, 0.21050734002754112, 0.5341815664785472, 0.5819205662605, 0.5541311228519636, 0.5140177735548755, 0.5296903752593921, 0.4757767696520907, 0.586925654363536, 0.5200256681203064, 0.5046467913873152, 0.11487193024124331, 0.12050517763028079, 0.1240064213448766, 0.1409379042308817, 0.09706968302522911, 0.1376969543085239, 0.1340841915010702, 0.13969088626038006, 0.11040221437391806, 0.19295178519616318, 0.18970135968710833, 0.18408445827786413, 0.1548072133931313, 0.16937022373380695, 0.17206490241658756, 0.17821815625349902, 0.16450012954009707, 0.15680813239670877, 0.3765446207719241, 0.3422397250111111, 0.36167761731536563, 0.3324363742412396, 0.4210704742130046, 0.3938355338512882, 0.49607913713586427, 0.45932932317154496, 0.3972113070492025, 0.23436549575895127, 0.34093332389562714, 0.29272240730592747, 0.22755245899415866, 0.2628915031369201, 0.25146782965073955, 0.26998914316730394, 0.26487118055630576, 0.24360869658795237, 0.2258105314121488, 0.19363046118115235, 0.21334102936790056, 0.20746965951118712, 0.20681701129858854, 0.2232038506179238, 0.20558963049191192, 0.22201435409368764, 0.20628310927417093, 0.21433399088052318, 0.4590951635302094, 0.21323543567669123, 0.576173939717036, 0.5128294427984901, 0.23233206188935396, 0.20292919270507304, 0.5100655488991801, 0.6153193953988707, 0.5757200152100582, 0.40042123092359183, 0.17718441009385588, 0.7703294429104393, 0.19990031851458911, 0.7827620809397511, 0.7045812426100143, 0.16250317899349864, 0.8082874759823194, 0.3983388202033602, 0.37020205506568804, 0.5167844960066916, 0.19458520202402663, 0.19857500749891432, 0.252107573692366, 0.3592057431195752, 0.6392514586295683, 0.3070497122161966, 0.17545313680562868, 0.1923380689919868, 0.19113575566323082, 0.18044183028890837, 0.18235576389437214, 0.17264218210922044, 0.18101383507275592, 0.17520115130549496, 0.17700204066232395, 0.07666463365692311, 0.0945192490966632, 0.09189148001058711, 0.08379887979204992, 0.0842699801735618, 0.07553782574617784, 0.08336400940849198, 0.09394320593995908, 0.08762863441089175]}, "mutation_prompt": null}
{"id": "c2a97962-549e-4da4-9412-29e30d6b6af1", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = (1 - (fitness[a] - min(fitness)) / (max(fitness) - min(fitness) + 1e-9)) * np.random.rand()  # Fitness scaling with randomness\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with adaptive local search probability.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a1498af9-6bf3-44c1-9484-cbed00fe8950", "metadata": {"aucs": [0.8178206201647986, 0.7758970247433123, 0.8049308864072948, 0.7975497140850081, 0.8063422817062995, 0.8158769628327522, 0.8104601748151303, 0.7920424921790645, 0.8040902431542288, 0.6621229269090416, 0.5037886351333936, 0.6407906770681195, 0.6175787439774285, 0.6433959414386414, 0.6728492415326929, 0.643849140614501, 0.6615251279239212, 0.614291699204806, 0.6561722838851769, 0.5485028268534899, 0.5978999224052812, 0.57408787953934, 0.5299227899603698, 0.6622941033882985, 0.6539907554853415, 0.5832562474660536, 0.6628173681403837, 0.14401091392395393, 0.17089080466177142, 0.14800462633605616, 0.16586247917418184, 0.5330050524125286, 0.11775540135499918, 0.4983493706115295, 0.16989111884630126, 0.542431047095462, 0.8822725565751305, 0.9073705948544037, 0.8628857765006627, 0.8698250891389416, 0.849104813385124, 0.872449879717804, 0.858947065079215, 0.940483009771947, 0.8778534821031672, 0.18875467355210007, 0.18138920508086842, 0.06848331286355713, 0.22225369170508624, 0.11355523603015905, 0.33631262497137937, 0.18929976216904798, 0.1393367550380672, 0.2234409286362724, 0.6969218708821312, 0.6895453133594952, 0.1970606513222144, 0.7121741346400293, 0.7160278830551103, 0.34709726971715704, 0.7475869855256134, 0.31114337924703206, 0.522142296921545, 0.14324422217848265, 0.1102052340225036, 0.29477923851942356, 0.16264808768954775, 0.2029007822790707, 0.3622088712228041, 0.219835334642008, 0.14677667739989575, 0.15898200294918774, 0.13713459651343984, 0.18481985506001597, 0.1413752803557745, 0.17897627100745572, 0.15981703677677395, 0.13959661638733922, 0.15056312159486918, 0.13996966640236586, 0.13035424802327855, 0.08192237356879961, 0.09148959621123465, 0.026110457937879583, 0.046336278840988565, 0.001448276083767852, 9.999999999998899e-05, 0.06451105927267675, 0.049787568220696965, 0.11167799661222266, 0.11179077654275338, 0.12131984141165408, 0.1410217416583368, 0.15344847529442052, 0.11814344726179793, 0.14549676306045767, 0.11676653734991982, 0.19142066782946154, 0.1322480082615568, 0.10313240637704801, 0.024237618617153234, 0.11171627901276993, 0.07946949457753238, 0.06990276127348394, 0.11051739123151605, 0.10769952053805809, 0.09469400565992037, 0.09409544485387833, 0.1632852605061882, 0.20048534959627573, 0.08741270562225112, 0.08848993439621411, 0.22596831250337324, 0.20910401745000518, 0.14103694210877515, 0.1799031139715771, 0.21050734002754112, 0.5341815664785472, 0.5819205662605, 0.5541311228519636, 0.5140177735548755, 0.5296903752593921, 0.4757767696520907, 0.586925654363536, 0.5200256681203064, 0.5046467913873152, 0.11487193024124331, 0.12050517763028079, 0.1240064213448766, 0.1409379042308817, 0.09706968302522911, 0.1376969543085239, 0.1340841915010702, 0.13969088626038006, 0.11040221437391806, 0.19295178519616318, 0.18970135968710833, 0.18408445827786413, 0.1548072133931313, 0.16937022373380695, 0.17206490241658756, 0.17821815625349902, 0.16450012954009707, 0.15680813239670877, 0.3765446207719241, 0.3422397250111111, 0.36167761731536563, 0.3324363742412396, 0.4210704742130046, 0.3938355338512882, 0.49607913713586427, 0.45932932317154496, 0.3972113070492025, 0.23436549575895127, 0.34093332389562714, 0.29272240730592747, 0.22755245899415866, 0.2628915031369201, 0.25146782965073955, 0.26998914316730394, 0.26487118055630576, 0.24360869658795237, 0.2258105314121488, 0.19363046118115235, 0.21334102936790056, 0.20746965951118712, 0.20681701129858854, 0.2232038506179238, 0.20558963049191192, 0.22201435409368764, 0.20628310927417093, 0.21433399088052318, 0.4590951635302094, 0.21323543567669123, 0.576173939717036, 0.5128294427984901, 0.23233206188935396, 0.20292919270507304, 0.5100655488991801, 0.6153193953988707, 0.5757200152100582, 0.40042123092359183, 0.17718441009385588, 0.7703294429104393, 0.19990031851458911, 0.7827620809397511, 0.7045812426100143, 0.16250317899349864, 0.8082874759823194, 0.3983388202033602, 0.37020205506568804, 0.5167844960066916, 0.19458520202402663, 0.19857500749891432, 0.252107573692366, 0.3592057431195752, 0.6392514586295683, 0.3070497122161966, 0.17545313680562868, 0.1923380689919868, 0.19113575566323082, 0.18044183028890837, 0.18235576389437214, 0.17264218210922044, 0.18101383507275592, 0.17520115130549496, 0.17700204066232395, 0.07666463365692311, 0.0945192490966632, 0.09189148001058711, 0.08379887979204992, 0.0842699801735618, 0.07553782574617784, 0.08336400940849198, 0.09394320593995908, 0.08762863441089175]}, "mutation_prompt": null}
{"id": "f82641f9-a0d3-4920-8820-bd3e8a3e0447", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = (1 - (fitness[a] - min(fitness)) / (max(fitness) - min(fitness) + 1e-9)) * np.random.rand()  # Fitness scaling with randomness\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim) * (0.5 + np.random.rand())  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with adaptive local search probability and refined local search to increase exploitation.", "configspace": "", "generation": 38, "fitness": 0.322297428916439, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "a1498af9-6bf3-44c1-9484-cbed00fe8950", "metadata": {"aucs": [0.7954023671153866, 0.7980474546495012, 0.8198312918662468, 0.8075359418283107, 0.8279635450363028, 0.7941010872879721, 0.7913566982155444, 0.8186761535470857, 0.8221713699289306, 0.6643520532563115, 0.6572375760500079, 0.6424735417950069, 0.6546064798501035, 0.641616867363956, 0.6712486356688743, 0.6685952781946598, 0.6381702281066796, 0.6480926352090794, 0.6071703309043339, 0.633405013107216, 0.5521438019365739, 0.5518248206075835, 0.17407242782199484, 0.5374799320174848, 0.6000214312043237, 0.1713186206234999, 0.17771798542226658, 0.5276711414652341, 0.4219706725372203, 0.11526616473195772, 0.16788835281353853, 0.14887914916522493, 0.14854421856451538, 0.5238084762937443, 0.17420086453018435, 0.5431165040974923, 0.8934273630375668, 0.8788187724728385, 0.857233916927691, 0.9198691712026592, 0.8770326264496957, 0.8285672584109529, 0.8665652196388411, 0.9041388037530458, 0.913390674390084, 0.24104877861890628, 0.24858565028853896, 0.2838993650083751, 0.15194254006740648, 0.20150443900868809, 0.24312530065977012, 0.19192621716782154, 0.15210039241380569, 0.25563981779717737, 0.3277945693787302, 0.6821161479317808, 0.2215245227460767, 0.3372516112996201, 0.7259748373312349, 0.7495486318517041, 0.6739385589715499, 0.6549306066523387, 0.1653801242603018, 0.17978254662356863, 0.10184870527493972, 0.28770667690706664, 0.22325644589801363, 0.23311264527273, 0.18723413615462992, 0.14020710108530643, 0.13973807372266878, 0.2106198486632349, 0.1298850486890013, 0.1495514073667753, 0.14216416696798573, 0.14598986580025308, 0.2391835441905269, 0.35713980482799457, 0.11008074977519644, 0.1669665135926207, 0.12940738067634772, 0.12234447567214923, 0.10806803877029614, 0.0034964870027890393, 0.06875146642011021, 0.04038589259537506, 0.0052052488341925995, 0.10527144656816512, 0.03951699294147237, 0.046050448768496066, 0.21404790936541063, 0.18016225793262042, 0.14894952121090432, 0.1182249770992072, 0.11813341327028115, 0.1490352054934896, 0.12280034801875095, 0.1300814463264529, 0.16624025935408393, 0.13330268004557966, 0.12017894308754817, 0.09907439306878807, 0.0732482800666101, 0.07000342933426928, 0.10033763257713113, 0.09738968679707083, 0.06171356541428541, 0.13162744206641586, 0.181080821292395, 0.1895136864491308, 0.12951231849578249, 0.21457752020587317, 0.19150508471476524, 0.13547137319923264, 0.1510082399451016, 0.10617374012368475, 0.1411223193044796, 0.534603134819973, 0.5246480956616142, 0.546632725884199, 0.5386321903656612, 0.48478710822197857, 0.48558312766532186, 0.47117396010580737, 0.5165498249726614, 0.5328770200183548, 0.13137762090229388, 0.1285530284614923, 0.12494370144775424, 0.12460009539646144, 0.11212230970939963, 0.1345871192125656, 0.12283040713033166, 0.13595015783056674, 0.1316718486561651, 0.1923529791608416, 0.1706118105479667, 0.26072732557822387, 0.175777674320314, 0.19620717110744068, 0.3137207631068426, 0.19304104576631476, 0.1944404942024135, 0.16684254180676472, 0.3683042869768811, 0.3799748401132046, 0.42498758573813644, 0.3546388758347889, 0.40319011169453156, 0.4794017102639446, 0.38720147446479714, 0.5436771806595008, 0.4494759161951727, 0.2454567433362166, 0.26622356686251103, 0.27053200287858614, 0.1976025171543081, 0.2783769929871671, 0.2919793728640757, 0.21405836493399932, 0.35158295464343714, 0.33995547362170164, 0.1930328915301055, 0.203928004836874, 0.1957249560508254, 0.2082408564981273, 0.20646815719427358, 0.20398904199421808, 0.18573938487903274, 0.19420895373709524, 0.20674789450440478, 0.20067680250964814, 0.38614540077221404, 0.583412912401722, 0.5258333760963685, 0.40772536725922703, 0.31692723111837673, 0.5298079892194758, 0.5413537793738492, 0.23141598504581085, 0.17935344506964157, 0.1923778860349138, 0.1797332268748556, 0.23763368008256214, 0.7104795483925042, 0.7025778934471363, 0.16665422520131523, 0.1613207453318779, 0.5176136101179174, 0.3521404879995593, 0.20576128642857938, 0.7279545273394327, 0.19493185739093077, 0.201907991141975, 0.20329531603681505, 0.19271715276297863, 0.4566190784850972, 0.2826384521819245, 0.186458548400259, 0.20543671349134174, 0.18217719514502595, 0.20392161074081327, 0.18499048445016375, 0.20331441830523622, 0.1829009597222938, 0.18655444420786926, 0.1783357828979537, 0.08678696041141631, 0.08749994564586983, 0.085031096107823, 0.08429503090222856, 0.08175319861535335, 0.08272413981575044, 0.08178492498427481, 0.08275202639252222, 0.07723583321747207]}, "mutation_prompt": null}
{"id": "b0ea46a8-9f78-4895-ade8-be85e3c7f403", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.7 + 0.2  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = (1 - (fitness[a] - min(fitness)) / (max(fitness) - min(fitness) + 1e-9)) * np.random.rand()  # Fitness scaling with randomness\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved exploration using adaptive crossover rate and scaling factor.", "configspace": "", "generation": 39, "fitness": 0.3123226766893689, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "a1498af9-6bf3-44c1-9484-cbed00fe8950", "metadata": {"aucs": [0.7917263358871488, 0.7654009258539954, 0.796937129800485, 0.7799748127548205, 0.781010356511309, 0.8000331074000051, 0.8068220000888893, 0.7740879748650003, 0.8001433075198539, 0.6013086916738684, 0.6091087437865594, 0.5983449220164236, 0.5974055532804945, 0.63751541360115, 0.6532486266263875, 0.6123646543899879, 0.6498190233627971, 0.6577241508625653, 0.17098041673811037, 0.6003450307966143, 0.5720099197969065, 0.17208903212626514, 0.17088571601988622, 0.640130217626851, 0.5470963356977896, 0.5272339863260378, 0.5692772863011507, 0.16106249988250876, 0.17066721364116788, 0.16098434742630485, 0.16957963996098768, 0.4931138332092112, 0.16935251009219843, 0.16719332523599373, 0.46735367494349744, 0.16010724478944538, 0.8962989451156456, 0.8541709143093694, 0.8549752583466055, 0.8744440521396877, 0.8637189093496606, 0.9087087248142817, 0.8618743878874816, 0.9082180372021403, 0.876968197836003, 0.21011535521641878, 0.08245901913635101, 0.10686873838004962, 0.1932911001329557, 0.24096324059367558, 0.13758493328908628, 0.17448432883979725, 0.15359455582541182, 0.2901105172061811, 0.30653300967271335, 0.5045352416127995, 0.5093962906793416, 0.3320682143950253, 0.7015700009643697, 0.20375420323450621, 0.6348302705613398, 0.5910946098807004, 0.6301383948493942, 0.14036866715630258, 0.21049215245268738, 0.2636006165125997, 0.14196761910461286, 0.24805938167225838, 0.16797644723783411, 0.1595492817978027, 0.22644951918023815, 0.18526200765321732, 0.20242187258342825, 0.14966057547887435, 0.11426177189758413, 0.13378379652834482, 0.1535029200635588, 0.12889712451156898, 0.20148132450345435, 0.14125685139542765, 0.1301140611394308, 0.036121370037264344, 0.011886973084698549, 0.01749946208576547, 0.07091997878809819, 0.07148930671479414, 0.03267048619868984, 0.09108314100355186, 0.027618253925861258, 0.031592465739046394, 0.19473998699779527, 0.15804190411827346, 0.17503782459628925, 0.07219313601593569, 0.09179552229012333, 0.08483647836981323, 0.20753891096440436, 0.139168397831829, 0.20403507136743904, 0.06564496281492027, 0.03881846032842917, 0.044040676094930675, 0.043921738047066006, 0.09972164809452755, 0.11491996046250119, 0.12577188370102554, 0.09542790667079293, 0.10353149607923295, 0.18342044601321572, 0.12989786970688222, 0.10106860835787557, 0.1587833685242831, 0.18949806836559135, 0.1933081890878463, 0.14848588945604912, 0.15653626520967667, 0.10575957615801412, 0.5053937283701639, 0.5113960038938603, 0.5415433175953377, 0.5265949867568047, 0.5520099865751779, 0.48623286773366814, 0.5153615778649507, 0.5051299216900387, 0.5138465666770218, 0.1358332301450168, 0.14484531596211836, 0.11747985340899358, 0.10957210659472472, 0.11322953290735893, 0.1433429826984418, 0.11560956930397592, 0.12050821785460253, 0.11794618299220838, 0.13949716787873256, 0.18005235047322243, 0.16376670415118078, 0.17301829690660853, 0.19240334921845514, 0.17172507071610632, 0.1747099961089731, 0.21943280584260405, 0.15187876047783544, 0.3154343192135015, 0.4044331927147635, 0.3848234138388599, 0.384788101984599, 0.3347589823436249, 0.3119296245345824, 0.4148232069634735, 0.4556678477336601, 0.44488500500613204, 0.2436801164111575, 0.27803420241272747, 0.3034294604051231, 0.24961190703989866, 0.24295408418962738, 0.3031337471593897, 0.2564670729889874, 0.2781544166805615, 0.21599999570853012, 0.20792725718468053, 0.1888446623359139, 0.1944351808280379, 0.21189760295122895, 0.1972164898535116, 0.2039328006222776, 0.2260784198866358, 0.18823848013529976, 0.20918544134301287, 0.20941431704699098, 0.22916997460611388, 0.42141508060874233, 0.6163486989250084, 0.2353433098848935, 0.22900319898206623, 0.22478970420609046, 0.5700599974071853, 0.23551887478468703, 0.1816948070247747, 0.17403799346473026, 0.41247228221395105, 0.19254252599957888, 0.6739400162214892, 0.6517067335651963, 0.7533845121339618, 0.35640332859443646, 0.6948567742897723, 0.6301965808464827, 0.19478325152004916, 0.4570554769999482, 0.24137144396272447, 0.20025579402918925, 0.4183552278064555, 0.3090422362782853, 0.6314836085666669, 0.2641722739393281, 0.1870403815676417, 0.1900200808204623, 0.187026133073789, 0.2055080422825093, 0.19655120535241066, 0.1811831204125508, 0.17757919196514227, 0.1702828257531953, 0.18135778148486303, 0.08823798802590643, 0.07572377675736808, 0.09046455104232332, 0.08277169917755978, 0.07838638170988399, 0.09958608330607677, 0.08558532701083044, 0.07701743792767679, 0.08429356352129047]}, "mutation_prompt": null}
{"id": "1fb6306f-9fa3-4f5e-965a-6b9abc73e2ed", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = (1 - (fitness[a] - min(fitness)) / (max(fitness) - min(fitness) + 1e-9)) * np.random.rand()  # Fitness scaling with randomness\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.20 * (1 - evaluations / self.budget):  # Adjusted local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with adjusted local search probability for diversified heuristics.", "configspace": "", "generation": 40, "fitness": 0.3134956819462266, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "a1498af9-6bf3-44c1-9484-cbed00fe8950", "metadata": {"aucs": [0.794044014015528, 0.7720197374562887, 0.8001846026495963, 0.7907110195419434, 0.7956688166341832, 0.7916074904124344, 0.7815499987176957, 0.6943795775863697, 0.7821412743368614, 0.634932486753762, 0.6279536797724159, 0.6110094267400199, 0.1528287015774049, 0.625802450007888, 0.6280769834668536, 0.6677793462315672, 0.5645969773594286, 0.645220721074629, 0.5825518923143873, 0.5547629752446513, 0.4968639206201989, 0.5857594146267935, 0.5292202728921892, 0.1717942066705136, 0.5881084931602794, 0.5679593744901668, 0.5531394925689517, 0.13348660639904408, 0.14705074429642895, 0.4427833259584595, 0.4799239815226063, 0.44433513548239667, 0.1681199066675403, 0.4286446211545101, 0.13357451522152297, 0.13401135459844082, 0.9037749901209856, 0.8471332109689287, 0.7930597944674822, 0.8366285793201106, 0.8438148876048848, 0.885069598615855, 0.8753299346938312, 0.8355958692850884, 0.8911817272337433, 0.22414268279178706, 0.20408423727383906, 0.2189283710524652, 0.2943599310656606, 0.21359765824957244, 0.22347006999053254, 0.13799188799180806, 0.16446798482063718, 0.2693988138273635, 0.2278692393341526, 0.6649891768276043, 0.29000848158178183, 0.3304579987359453, 0.7163396904782776, 0.7725761169648714, 0.30693373822677594, 0.4321011542155251, 0.22065350061402744, 0.17081809346910215, 0.22748682962052058, 0.17710817745564345, 0.16073027752264368, 0.12220790327413966, 0.15251479489199826, 0.11929239165536598, 0.14609649776951117, 0.28503463124236084, 0.22087062682117808, 0.1388175880728948, 0.1416561015525002, 0.1432985141402744, 0.1750819582413904, 0.15575485676804635, 0.16613786063219282, 0.15533253369981503, 0.1479127582056421, 0.03746310897104799, 0.08951456558841508, 0.03229248149434716, 0.08481451098157, 0.023273769193603244, 0.053192587375662126, 0.03239983935991275, 0.006104602603487885, 0.049325736905172946, 0.19224197084428785, 0.09102817778632288, 0.19205569703644687, 0.09374310602450098, 0.14195179436983218, 0.13405081690228704, 0.2842852267341236, 0.1287638198271699, 0.23758537965446502, 0.09561611308177653, 0.016654886981413264, 0.09951626756351084, 0.05241903634569267, 0.06961370914798204, 0.04905111918348193, 0.08095867387481226, 0.0664958980329653, 0.05408405203158395, 0.17870208596700543, 0.1251073135645263, 0.12506582724976156, 0.1761658986504946, 0.05069638109793795, 0.1756010191711157, 0.1353280942161762, 0.1361850992109901, 0.2051939272050134, 0.5569639871008327, 0.5288863287664514, 0.5443928490819151, 0.4836493546921603, 0.5232444489490731, 0.5052498779526537, 0.5722131547673905, 0.48509566712686925, 0.5003198199691536, 0.13386521657557238, 0.11089068559179105, 0.12770896800017129, 0.15502069306312027, 0.10172713134006262, 0.11912929330364563, 0.12110128194483982, 0.1071830920186958, 0.11585887143254636, 0.16171842807031755, 0.1601223500352662, 0.15898520591350485, 0.19773374041553315, 0.1495546602356963, 0.14844597481584332, 0.1671257052957279, 0.18314021966913163, 0.16859850261870035, 0.3823416652807712, 0.34710326145457526, 0.34948002985989257, 0.4009091358602259, 0.39442129597243625, 0.3368931835250464, 0.3691223983353722, 0.4376979801007578, 0.4216741954251291, 0.283146246116212, 0.24105638970033783, 0.24897941082734465, 0.1735139225720559, 0.22665340358655495, 0.25546852334484194, 0.23052701749695304, 0.29530641008893943, 0.28229764266425994, 0.21022554576742547, 0.20133476715051835, 0.2106798240378518, 0.18267354605868713, 0.2056985569243559, 0.19859461673596912, 0.20022600163491178, 0.21343137435054516, 0.20931959307554648, 0.4577140406708339, 0.21847749282607187, 0.23852849371108809, 0.23342743371346253, 0.2006525684404734, 0.20929994501343963, 0.5066500240586078, 0.21639403106878152, 0.5026884602951261, 0.654449120324314, 0.447999311392141, 0.15500519297931348, 0.7620010319326186, 0.7433406479568259, 0.702225334437623, 0.6273075056876756, 0.6006183726258189, 0.6907862431190438, 0.19963228814596212, 0.16283647171667182, 0.3792905809166972, 0.20377697369702796, 0.16573756852835453, 0.16554624674674578, 0.197540793813464, 0.743173879087381, 0.43847373276304646, 0.17463618442513507, 0.18144020793263338, 0.175016990611515, 0.1813562712258595, 0.1860975224338175, 0.18232580185551273, 0.18337151183910794, 0.1757486376966968, 0.18119895848716028, 0.07794448958830691, 0.08423351181325345, 0.0809981225855001, 0.08056256096439607, 0.08152752966490329, 0.08907026931859452, 0.08100872657130842, 0.08771523941303272, 0.08128767775380619]}, "mutation_prompt": null}
{"id": "b2df2e3c-93db-42cc-839f-a2396ca6f998", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = (1 - (fitness[a] - min(fitness)) / (max(fitness) - min(fitness) + 1e-9)) * np.random.rand()  # Fitness scaling with randomness\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * ((1 - evaluations / self.budget)**2):  # Non-linear decay in local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved dynamic local search probability by introducing non-linear decay for enhanced exploitation-exploration balance.", "configspace": "", "generation": 41, "fitness": 0.32369975832217057, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "a1498af9-6bf3-44c1-9484-cbed00fe8950", "metadata": {"aucs": [0.8075558461363151, 0.7992107779204498, 0.8146494621663973, 0.7995455029533763, 0.8113269663202112, 0.7997392225566577, 0.781899724701397, 0.8052557863438683, 0.8191509224206137, 0.6109574494584004, 0.646691956309443, 0.6609530524211518, 0.6615253568101991, 0.6562277059309602, 0.6396228864569845, 0.6311085291661314, 0.6543004340509126, 0.6718661103126025, 0.6016442333577163, 0.6294968516741316, 0.6344285550279605, 0.5770186332699387, 0.5874474354426249, 0.6225031130822503, 0.1765841460020745, 0.624215104023363, 0.6603287701016964, 0.15090307582343465, 0.14806767742776206, 0.16990628178482003, 0.1697906239489535, 0.170568385770145, 0.1743404610458612, 0.1695945116839721, 0.5337576575189924, 0.14288904574721506, 0.8427566703079195, 0.862792555221196, 0.8928525430641256, 0.8436319164492342, 0.8679679745684723, 0.8539075217323195, 0.9245895293833147, 0.9412524856950588, 0.8937828152487394, 0.14016787442956924, 0.21930396936619534, 0.08497585441385402, 0.20418038894614887, 0.1803217608989398, 0.17916761574342233, 0.17398878516268756, 0.1934021113015627, 0.21093407919347662, 0.6271447032704727, 0.6206107485847294, 0.7134817367667969, 0.2517540811408445, 0.7721130619618506, 0.3534152983892104, 0.22482012897794068, 0.6153638927551028, 0.22427166635274065, 0.2433152881852133, 0.22413568069329282, 0.3076871463815063, 0.17988110139883828, 0.31985402940690744, 0.16715579643987333, 0.2606006743202125, 0.18212811257420924, 0.1419330848494934, 0.15600031899339284, 0.1442797549213457, 0.1206289860561155, 0.15045002697948406, 0.16353498622401785, 0.16617771989994856, 0.1503818449673947, 0.18780551043230698, 0.15504167620163467, 9.999999999998899e-05, 0.019307497299529852, 0.07019530345688052, 0.0003621318188690159, 0.08554880424636302, 0.06383470012583681, 0.09988080666507104, 0.151981315686467, 0.06464564272358642, 0.21445221362326805, 0.17999449166253578, 0.1583498927880106, 0.11957775694952, 0.08382890720634861, 0.09333966398968319, 0.13521904936137763, 0.20921650783279822, 0.20495419719087593, 0.13452497353777815, 0.04673152088525112, 0.14179751008232488, 0.0646596686110048, 0.08707724073476675, 0.061913281027086264, 0.05846223512268134, 0.14194381713501902, 0.06828632788103128, 0.1709657770701286, 0.19938012784150594, 0.2062675782377359, 0.21632036780457253, 0.18084933207307696, 0.2252502910039873, 0.1703996277334383, 0.21316176505173767, 0.1112284375158582, 0.5393239939070364, 0.5443307101996011, 0.5119428662242822, 0.5333569296902997, 0.5740442123552116, 0.5805722837224161, 0.5047422734510536, 0.4389966175470711, 0.5312429106123108, 0.12950001304682723, 0.14004206294434884, 0.13419351298167437, 0.1278430817437276, 0.14352113919081366, 0.1303834184368674, 0.15137607287818933, 0.12493003788840706, 0.11797179124648405, 0.22366238625957102, 0.22224392009293725, 0.2024695889486159, 0.2105063223144643, 0.18263108841834597, 0.2148855226298293, 0.22286678778866986, 0.22292138470712464, 0.2155341631857265, 0.40226960458912564, 0.3595943932693375, 0.3671797919646742, 0.25768477207507345, 0.4389212508382955, 0.3958324345594193, 0.4170101880496493, 0.5216151191026568, 0.46910615473558903, 0.300859042902083, 0.306207521836538, 0.2791886766730307, 0.29450514533863337, 0.21266556139924409, 0.30517588198894996, 0.2421201098712935, 0.35781010306618966, 0.24407122989425856, 0.1963492300248999, 0.21454602232657394, 0.25995483963679156, 0.2016658639769381, 0.20376145560043668, 0.21050074148764286, 0.19577321039332318, 0.19978834079049657, 0.18672741612774302, 0.6715529835719116, 0.23074548960109798, 0.2266139287861635, 0.5212119605551584, 0.5020493606793496, 0.399348431595579, 0.24166553431564797, 0.22890481827519538, 0.1992653023565707, 0.18012952254468673, 0.1800910142810015, 0.1814959325413732, 0.7534445933117689, 0.18200783881433613, 0.7846199784086493, 0.6952028253657514, 0.16492896291526937, 0.5549517654322089, 0.6141460145423985, 0.19953857974596312, 0.5307660341532356, 0.19798522870678792, 0.1990553087586303, 0.1684186908869011, 0.437009461661908, 0.33249681568488854, 0.19964017743074025, 0.1807228960078433, 0.18262056430449136, 0.18846142377186303, 0.19942349592980912, 0.18090620496903487, 0.18325297280248432, 0.18707468182043763, 0.1881172231634296, 0.17196916944953322, 0.08070288010176974, 0.08221833216769359, 0.08598748317200589, 0.08204885382041793, 0.09289802295782323, 0.08295039642530533, 0.0851188276843532, 0.07766699444115366, 0.08977709934932887]}, "mutation_prompt": null}
{"id": "773a2d9f-9bc5-4296-9593-d2ffe1fdf022", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined mutation strategy for improved convergence.", "configspace": "", "generation": 42, "fitness": 0.3375978120110463, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "a1498af9-6bf3-44c1-9484-cbed00fe8950", "metadata": {"aucs": [0.7951871789015963, 0.8046229080764052, 0.8161322378734774, 0.7834775405905937, 0.8075031056784653, 0.8041627081068179, 0.8156918599287651, 0.7909492619749733, 0.8083633734473739, 0.6267931023221185, 0.6646695851946143, 0.6241614418692274, 0.6747352102808654, 0.6102673373962157, 0.6474735237887486, 0.6563700006181058, 0.664195112998299, 0.6262673177522432, 0.5851406595099158, 0.48216599079830513, 0.5773202650226203, 0.5948540865116547, 0.4690418352074729, 0.6014217755305548, 0.5496161399070618, 0.5054888153388055, 0.5565462223327162, 0.141325349355933, 0.16167425379641953, 0.1440579389196346, 0.5134067945916023, 0.17164110184149395, 0.1704574712059308, 0.16304012873297558, 0.4858987482619559, 0.16349375022810386, 0.8657512489736292, 0.8557419856012413, 0.8712333660701184, 0.8545667445782728, 0.865016574888847, 0.9216323217269576, 0.867557798240322, 0.9041810995312133, 0.9063449810738902, 0.2516953062368281, 0.36259208808575083, 0.2743489520959739, 0.2521635442182555, 0.390139919280024, 0.40987042352047165, 0.2161882014580898, 0.24538087913864537, 0.3065867114229889, 0.6256846186974396, 0.6602276396989777, 0.6327635241614866, 0.4911728261051408, 0.5678790966792518, 0.26246942451906885, 0.3619453477846146, 0.33262333339037387, 0.6436193954884164, 0.16206912530070727, 0.24212494004738827, 0.1468836519309521, 0.1614354155569383, 0.15752604975234297, 0.1939557703618383, 0.15751336481474976, 0.15484398858983828, 0.15188377084733873, 0.15183615975293174, 0.16732769059108432, 0.13006871558852817, 0.15154287560716606, 0.23205129409836822, 0.26192779147770484, 0.13931427050599432, 0.12655721727177205, 0.14584407058661586, 0.1055020230455449, 0.09155300194038773, 0.08197993985326357, 0.08797439318774214, 0.05209815157863429, 0.07125116378586427, 0.03596485951195194, 0.07172682913178563, 0.115050629409584, 0.15715157669579893, 0.18586687690744963, 0.182629896242538, 0.0665891711779052, 0.13490417152657397, 0.18283518059122572, 0.2946522882263186, 0.15017756991485842, 0.14883217437419316, 0.11073438513722633, 0.08226922569547912, 0.08891814885690985, 0.1028290119510823, 0.08075145119301108, 0.061347421955929016, 0.06980786178421572, 0.11799550949874105, 0.08826125154434761, 0.109378207624931, 0.13472611559711933, 0.16976773715000504, 0.18194915324926164, 0.15789192823142517, 0.20888100290749512, 0.1480809169034475, 0.16962445297902373, 0.10366612413793796, 0.6150515108392394, 0.5506680109340142, 0.5551425414819996, 0.5526368556156527, 0.552594565153455, 0.5486787711917496, 0.5174362241236864, 0.5091362924608531, 0.48554344436075814, 0.1515981149714406, 0.13181006762926628, 0.1322781083855361, 0.10319199090270847, 0.12987385377064242, 0.10586987536319159, 0.12446263561142967, 0.12213042939963836, 0.11990210630722808, 0.16786335782528494, 0.15578597982520914, 0.1643788276290259, 0.1762397710878134, 0.160344357540392, 0.19973935873299553, 0.16114549235160502, 0.18941160674239677, 0.23519259771147494, 0.3373041205906411, 0.37833455277646366, 0.32921755213492065, 0.41668392518743236, 0.4269544292297113, 0.4279149581390641, 0.4863662074262938, 0.4528482021157011, 0.42188460884951495, 0.23138374837340303, 0.27984555426718594, 0.2639176072293882, 0.19410217335308522, 0.2565928926309008, 0.25074456227366193, 0.32276889137013764, 0.36110770488075994, 0.2680823576827124, 0.20082227621620263, 0.18646996540616134, 0.20679509414508845, 0.20789774014927798, 0.2113345680439006, 0.20080345279564327, 0.21959165234494815, 0.2030192463635897, 0.23012482649304167, 0.4670833976718892, 0.43140437436707224, 0.6038821379856343, 0.5602983331296179, 0.5585067230689417, 0.49694566349351976, 0.6167209807176397, 0.5123154454829861, 0.2311111422517832, 0.1774207910329123, 0.645765655840639, 0.32533484365301324, 0.6393967495822817, 0.2015774139157247, 0.7870902648213349, 0.7087048927068168, 0.5602181862290903, 0.7622764513700405, 0.3760720304034241, 0.19863114136012716, 0.20207855562021382, 0.20073975775835928, 0.20418772566411214, 0.4052396682486519, 0.5322603978547538, 0.5962683299135436, 0.20098604977822854, 0.19736733127678519, 0.20600293279178472, 0.1722034160360949, 0.1779303914331506, 0.19272300125334063, 0.18537847185912693, 0.17807923045266538, 0.17916046856877943, 0.1893477454643605, 0.08193001114182608, 0.08546551896773724, 0.0846988670626766, 0.08724696250915853, 0.08076507872717353, 0.07593158538917033, 0.09255104950314996, 0.0792732602690247, 0.08621789660030466]}, "mutation_prompt": null}
{"id": "295a1a5e-9ccd-45b9-8109-946b2aabdcab", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01 * (1 - evaluations / self.budget), self.dim)  # Dynamic scaling\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Introduce dynamic scaling for local search perturbation to enhance adaptive exploration.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'evaluations' is not defined\").", "error": "NameError(\"name 'evaluations' is not defined\")", "parent_id": "773a2d9f-9bc5-4296-9593-d2ffe1fdf022", "metadata": {}, "mutation_prompt": null}
{"id": "f440f794-0df4-444b-9695-96ed3930324e", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined mutation strategy for improved convergence.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "773a2d9f-9bc5-4296-9593-d2ffe1fdf022", "metadata": {"aucs": [0.7951871789015963, 0.8046229080764052, 0.8161322378734774, 0.7834775405905937, 0.8075031056784653, 0.8041627081068179, 0.8156918599287651, 0.7909492619749733, 0.8083633734473739, 0.6267931023221185, 0.6646695851946143, 0.6241614418692274, 0.6747352102808654, 0.6102673373962157, 0.6474735237887486, 0.6563700006181058, 0.664195112998299, 0.6262673177522432, 0.5851406595099158, 0.48216599079830513, 0.5773202650226203, 0.5948540865116547, 0.4690418352074729, 0.6014217755305548, 0.5496161399070618, 0.5054888153388055, 0.5565462223327162, 0.141325349355933, 0.16167425379641953, 0.1440579389196346, 0.5134067945916023, 0.17164110184149395, 0.1704574712059308, 0.16304012873297558, 0.4858987482619559, 0.16349375022810386, 0.8657512489736292, 0.8557419856012413, 0.8712333660701184, 0.8545667445782728, 0.865016574888847, 0.9216323217269576, 0.867557798240322, 0.9041810995312133, 0.9063449810738902, 0.2516953062368281, 0.36259208808575083, 0.2743489520959739, 0.2521635442182555, 0.390139919280024, 0.40987042352047165, 0.2161882014580898, 0.24538087913864537, 0.3065867114229889, 0.6256846186974396, 0.6602276396989777, 0.6327635241614866, 0.4911728261051408, 0.5678790966792518, 0.26246942451906885, 0.3619453477846146, 0.33262333339037387, 0.6436193954884164, 0.16206912530070727, 0.24212494004738827, 0.1468836519309521, 0.1614354155569383, 0.15752604975234297, 0.1939557703618383, 0.15751336481474976, 0.15484398858983828, 0.15188377084733873, 0.15183615975293174, 0.16732769059108432, 0.13006871558852817, 0.15154287560716606, 0.23205129409836822, 0.26192779147770484, 0.13931427050599432, 0.12655721727177205, 0.14584407058661586, 0.1055020230455449, 0.09155300194038773, 0.08197993985326357, 0.08797439318774214, 0.05209815157863429, 0.07125116378586427, 0.03596485951195194, 0.07172682913178563, 0.115050629409584, 0.15715157669579893, 0.18586687690744963, 0.182629896242538, 0.0665891711779052, 0.13490417152657397, 0.18283518059122572, 0.2946522882263186, 0.15017756991485842, 0.14883217437419316, 0.11073438513722633, 0.08226922569547912, 0.08891814885690985, 0.1028290119510823, 0.08075145119301108, 0.061347421955929016, 0.06980786178421572, 0.11799550949874105, 0.08826125154434761, 0.109378207624931, 0.13472611559711933, 0.16976773715000504, 0.18194915324926164, 0.15789192823142517, 0.20888100290749512, 0.1480809169034475, 0.16962445297902373, 0.10366612413793796, 0.6150515108392394, 0.5506680109340142, 0.5551425414819996, 0.5526368556156527, 0.552594565153455, 0.5486787711917496, 0.5174362241236864, 0.5091362924608531, 0.48554344436075814, 0.1515981149714406, 0.13181006762926628, 0.1322781083855361, 0.10319199090270847, 0.12987385377064242, 0.10586987536319159, 0.12446263561142967, 0.12213042939963836, 0.11990210630722808, 0.16786335782528494, 0.15578597982520914, 0.1643788276290259, 0.1762397710878134, 0.160344357540392, 0.19973935873299553, 0.16114549235160502, 0.18941160674239677, 0.23519259771147494, 0.3373041205906411, 0.37833455277646366, 0.32921755213492065, 0.41668392518743236, 0.4269544292297113, 0.4279149581390641, 0.4863662074262938, 0.4528482021157011, 0.42188460884951495, 0.23138374837340303, 0.27984555426718594, 0.2639176072293882, 0.19410217335308522, 0.2565928926309008, 0.25074456227366193, 0.32276889137013764, 0.36110770488075994, 0.2680823576827124, 0.20082227621620263, 0.18646996540616134, 0.20679509414508845, 0.20789774014927798, 0.2113345680439006, 0.20080345279564327, 0.21959165234494815, 0.2030192463635897, 0.23012482649304167, 0.4670833976718892, 0.43140437436707224, 0.6038821379856343, 0.5602983331296179, 0.5585067230689417, 0.49694566349351976, 0.6167209807176397, 0.5123154454829861, 0.2311111422517832, 0.1774207910329123, 0.645765655840639, 0.32533484365301324, 0.6393967495822817, 0.2015774139157247, 0.7870902648213349, 0.7087048927068168, 0.5602181862290903, 0.7622764513700405, 0.3760720304034241, 0.19863114136012716, 0.20207855562021382, 0.20073975775835928, 0.20418772566411214, 0.4052396682486519, 0.5322603978547538, 0.5962683299135436, 0.20098604977822854, 0.19736733127678519, 0.20600293279178472, 0.1722034160360949, 0.1779303914331506, 0.19272300125334063, 0.18537847185912693, 0.17807923045266538, 0.17916046856877943, 0.1893477454643605, 0.08193001114182608, 0.08546551896773724, 0.0846988670626766, 0.08724696250915853, 0.08076507872717353, 0.07593158538917033, 0.09255104950314996, 0.0792732602690247, 0.08621789660030466]}, "mutation_prompt": null}
{"id": "e54dae53-79aa-4ce7-a077-71939837e9e2", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined mutation strategy for improved convergence.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "773a2d9f-9bc5-4296-9593-d2ffe1fdf022", "metadata": {"aucs": [0.7951871789015963, 0.8046229080764052, 0.8161322378734774, 0.7834775405905937, 0.8075031056784653, 0.8041627081068179, 0.8156918599287651, 0.7909492619749733, 0.8083633734473739, 0.6267931023221185, 0.6646695851946143, 0.6241614418692274, 0.6747352102808654, 0.6102673373962157, 0.6474735237887486, 0.6563700006181058, 0.664195112998299, 0.6262673177522432, 0.5851406595099158, 0.48216599079830513, 0.5773202650226203, 0.5948540865116547, 0.4690418352074729, 0.6014217755305548, 0.5496161399070618, 0.5054888153388055, 0.5565462223327162, 0.141325349355933, 0.16167425379641953, 0.1440579389196346, 0.5134067945916023, 0.17164110184149395, 0.1704574712059308, 0.16304012873297558, 0.4858987482619559, 0.16349375022810386, 0.8657512489736292, 0.8557419856012413, 0.8712333660701184, 0.8545667445782728, 0.865016574888847, 0.9216323217269576, 0.867557798240322, 0.9041810995312133, 0.9063449810738902, 0.2516953062368281, 0.36259208808575083, 0.2743489520959739, 0.2521635442182555, 0.390139919280024, 0.40987042352047165, 0.2161882014580898, 0.24538087913864537, 0.3065867114229889, 0.6256846186974396, 0.6602276396989777, 0.6327635241614866, 0.4911728261051408, 0.5678790966792518, 0.26246942451906885, 0.3619453477846146, 0.33262333339037387, 0.6436193954884164, 0.16206912530070727, 0.24212494004738827, 0.1468836519309521, 0.1614354155569383, 0.15752604975234297, 0.1939557703618383, 0.15751336481474976, 0.15484398858983828, 0.15188377084733873, 0.15183615975293174, 0.16732769059108432, 0.13006871558852817, 0.15154287560716606, 0.23205129409836822, 0.26192779147770484, 0.13931427050599432, 0.12655721727177205, 0.14584407058661586, 0.1055020230455449, 0.09155300194038773, 0.08197993985326357, 0.08797439318774214, 0.05209815157863429, 0.07125116378586427, 0.03596485951195194, 0.07172682913178563, 0.115050629409584, 0.15715157669579893, 0.18586687690744963, 0.182629896242538, 0.0665891711779052, 0.13490417152657397, 0.18283518059122572, 0.2946522882263186, 0.15017756991485842, 0.14883217437419316, 0.11073438513722633, 0.08226922569547912, 0.08891814885690985, 0.1028290119510823, 0.08075145119301108, 0.061347421955929016, 0.06980786178421572, 0.11799550949874105, 0.08826125154434761, 0.109378207624931, 0.13472611559711933, 0.16976773715000504, 0.18194915324926164, 0.15789192823142517, 0.20888100290749512, 0.1480809169034475, 0.16962445297902373, 0.10366612413793796, 0.6150515108392394, 0.5506680109340142, 0.5551425414819996, 0.5526368556156527, 0.552594565153455, 0.5486787711917496, 0.5174362241236864, 0.5091362924608531, 0.48554344436075814, 0.1515981149714406, 0.13181006762926628, 0.1322781083855361, 0.10319199090270847, 0.12987385377064242, 0.10586987536319159, 0.12446263561142967, 0.12213042939963836, 0.11990210630722808, 0.16786335782528494, 0.15578597982520914, 0.1643788276290259, 0.1762397710878134, 0.160344357540392, 0.19973935873299553, 0.16114549235160502, 0.18941160674239677, 0.23519259771147494, 0.3373041205906411, 0.37833455277646366, 0.32921755213492065, 0.41668392518743236, 0.4269544292297113, 0.4279149581390641, 0.4863662074262938, 0.4528482021157011, 0.42188460884951495, 0.23138374837340303, 0.27984555426718594, 0.2639176072293882, 0.19410217335308522, 0.2565928926309008, 0.25074456227366193, 0.32276889137013764, 0.36110770488075994, 0.2680823576827124, 0.20082227621620263, 0.18646996540616134, 0.20679509414508845, 0.20789774014927798, 0.2113345680439006, 0.20080345279564327, 0.21959165234494815, 0.2030192463635897, 0.23012482649304167, 0.4670833976718892, 0.43140437436707224, 0.6038821379856343, 0.5602983331296179, 0.5585067230689417, 0.49694566349351976, 0.6167209807176397, 0.5123154454829861, 0.2311111422517832, 0.1774207910329123, 0.645765655840639, 0.32533484365301324, 0.6393967495822817, 0.2015774139157247, 0.7870902648213349, 0.7087048927068168, 0.5602181862290903, 0.7622764513700405, 0.3760720304034241, 0.19863114136012716, 0.20207855562021382, 0.20073975775835928, 0.20418772566411214, 0.4052396682486519, 0.5322603978547538, 0.5962683299135436, 0.20098604977822854, 0.19736733127678519, 0.20600293279178472, 0.1722034160360949, 0.1779303914331506, 0.19272300125334063, 0.18537847185912693, 0.17807923045266538, 0.17916046856877943, 0.1893477454643605, 0.08193001114182608, 0.08546551896773724, 0.0846988670626766, 0.08724696250915853, 0.08076507872717353, 0.07593158538917033, 0.09255104950314996, 0.0792732602690247, 0.08621789660030466]}, "mutation_prompt": null}
{"id": "32abf4ff-0913-4f4b-9236-f29a2b2da88f", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined mutation strategy and adaptive crossover for improved convergence.", "configspace": "", "generation": 46, "fitness": 0.3375978120110463, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "773a2d9f-9bc5-4296-9593-d2ffe1fdf022", "metadata": {"aucs": [0.7951871789015963, 0.8046229080764052, 0.8161322378734774, 0.7834775405905937, 0.8075031056784653, 0.8041627081068179, 0.8156918599287651, 0.7909492619749733, 0.8083633734473739, 0.6267931023221185, 0.6646695851946143, 0.6241614418692274, 0.6747352102808654, 0.6102673373962157, 0.6474735237887486, 0.6563700006181058, 0.664195112998299, 0.6262673177522432, 0.5851406595099158, 0.48216599079830513, 0.5773202650226203, 0.5948540865116547, 0.4690418352074729, 0.6014217755305548, 0.5496161399070618, 0.5054888153388055, 0.5565462223327162, 0.141325349355933, 0.16167425379641953, 0.1440579389196346, 0.5134067945916023, 0.17164110184149395, 0.1704574712059308, 0.16304012873297558, 0.4858987482619559, 0.16349375022810386, 0.8657512489736292, 0.8557419856012413, 0.8712333660701184, 0.8545667445782728, 0.865016574888847, 0.9216323217269576, 0.867557798240322, 0.9041810995312133, 0.9063449810738902, 0.2516953062368281, 0.36259208808575083, 0.2743489520959739, 0.2521635442182555, 0.390139919280024, 0.40987042352047165, 0.2161882014580898, 0.24538087913864537, 0.3065867114229889, 0.6256846186974396, 0.6602276396989777, 0.6327635241614866, 0.4911728261051408, 0.5678790966792518, 0.26246942451906885, 0.3619453477846146, 0.33262333339037387, 0.6436193954884164, 0.16206912530070727, 0.24212494004738827, 0.1468836519309521, 0.1614354155569383, 0.15752604975234297, 0.1939557703618383, 0.15751336481474976, 0.15484398858983828, 0.15188377084733873, 0.15183615975293174, 0.16732769059108432, 0.13006871558852817, 0.15154287560716606, 0.23205129409836822, 0.26192779147770484, 0.13931427050599432, 0.12655721727177205, 0.14584407058661586, 0.1055020230455449, 0.09155300194038773, 0.08197993985326357, 0.08797439318774214, 0.05209815157863429, 0.07125116378586427, 0.03596485951195194, 0.07172682913178563, 0.115050629409584, 0.15715157669579893, 0.18586687690744963, 0.182629896242538, 0.0665891711779052, 0.13490417152657397, 0.18283518059122572, 0.2946522882263186, 0.15017756991485842, 0.14883217437419316, 0.11073438513722633, 0.08226922569547912, 0.08891814885690985, 0.1028290119510823, 0.08075145119301108, 0.061347421955929016, 0.06980786178421572, 0.11799550949874105, 0.08826125154434761, 0.109378207624931, 0.13472611559711933, 0.16976773715000504, 0.18194915324926164, 0.15789192823142517, 0.20888100290749512, 0.1480809169034475, 0.16962445297902373, 0.10366612413793796, 0.6150515108392394, 0.5506680109340142, 0.5551425414819996, 0.5526368556156527, 0.552594565153455, 0.5486787711917496, 0.5174362241236864, 0.5091362924608531, 0.48554344436075814, 0.1515981149714406, 0.13181006762926628, 0.1322781083855361, 0.10319199090270847, 0.12987385377064242, 0.10586987536319159, 0.12446263561142967, 0.12213042939963836, 0.11990210630722808, 0.16786335782528494, 0.15578597982520914, 0.1643788276290259, 0.1762397710878134, 0.160344357540392, 0.19973935873299553, 0.16114549235160502, 0.18941160674239677, 0.23519259771147494, 0.3373041205906411, 0.37833455277646366, 0.32921755213492065, 0.41668392518743236, 0.4269544292297113, 0.4279149581390641, 0.4863662074262938, 0.4528482021157011, 0.42188460884951495, 0.23138374837340303, 0.27984555426718594, 0.2639176072293882, 0.19410217335308522, 0.2565928926309008, 0.25074456227366193, 0.32276889137013764, 0.36110770488075994, 0.2680823576827124, 0.20082227621620263, 0.18646996540616134, 0.20679509414508845, 0.20789774014927798, 0.2113345680439006, 0.20080345279564327, 0.21959165234494815, 0.2030192463635897, 0.23012482649304167, 0.4670833976718892, 0.43140437436707224, 0.6038821379856343, 0.5602983331296179, 0.5585067230689417, 0.49694566349351976, 0.6167209807176397, 0.5123154454829861, 0.2311111422517832, 0.1774207910329123, 0.645765655840639, 0.32533484365301324, 0.6393967495822817, 0.2015774139157247, 0.7870902648213349, 0.7087048927068168, 0.5602181862290903, 0.7622764513700405, 0.3760720304034241, 0.19863114136012716, 0.20207855562021382, 0.20073975775835928, 0.20418772566411214, 0.4052396682486519, 0.5322603978547538, 0.5962683299135436, 0.20098604977822854, 0.19736733127678519, 0.20600293279178472, 0.1722034160360949, 0.1779303914331506, 0.19272300125334063, 0.18537847185912693, 0.17807923045266538, 0.17916046856877943, 0.1893477454643605, 0.08193001114182608, 0.08546551896773724, 0.0846988670626766, 0.08724696250915853, 0.08076507872717353, 0.07593158538917033, 0.09255104950314996, 0.0792732602690247, 0.08621789660030466]}, "mutation_prompt": null}
{"id": "e6320ede-e362-46e1-ae50-7c0a95a4224a", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined mutation strategy for improved convergence.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "773a2d9f-9bc5-4296-9593-d2ffe1fdf022", "metadata": {"aucs": [0.7951871789015963, 0.8046229080764052, 0.8161322378734774, 0.7834775405905937, 0.8075031056784653, 0.8041627081068179, 0.8156918599287651, 0.7909492619749733, 0.8083633734473739, 0.6267931023221185, 0.6646695851946143, 0.6241614418692274, 0.6747352102808654, 0.6102673373962157, 0.6474735237887486, 0.6563700006181058, 0.664195112998299, 0.6262673177522432, 0.5851406595099158, 0.48216599079830513, 0.5773202650226203, 0.5948540865116547, 0.4690418352074729, 0.6014217755305548, 0.5496161399070618, 0.5054888153388055, 0.5565462223327162, 0.141325349355933, 0.16167425379641953, 0.1440579389196346, 0.5134067945916023, 0.17164110184149395, 0.1704574712059308, 0.16304012873297558, 0.4858987482619559, 0.16349375022810386, 0.8657512489736292, 0.8557419856012413, 0.8712333660701184, 0.8545667445782728, 0.865016574888847, 0.9216323217269576, 0.867557798240322, 0.9041810995312133, 0.9063449810738902, 0.2516953062368281, 0.36259208808575083, 0.2743489520959739, 0.2521635442182555, 0.390139919280024, 0.40987042352047165, 0.2161882014580898, 0.24538087913864537, 0.3065867114229889, 0.6256846186974396, 0.6602276396989777, 0.6327635241614866, 0.4911728261051408, 0.5678790966792518, 0.26246942451906885, 0.3619453477846146, 0.33262333339037387, 0.6436193954884164, 0.16206912530070727, 0.24212494004738827, 0.1468836519309521, 0.1614354155569383, 0.15752604975234297, 0.1939557703618383, 0.15751336481474976, 0.15484398858983828, 0.15188377084733873, 0.15183615975293174, 0.16732769059108432, 0.13006871558852817, 0.15154287560716606, 0.23205129409836822, 0.26192779147770484, 0.13931427050599432, 0.12655721727177205, 0.14584407058661586, 0.1055020230455449, 0.09155300194038773, 0.08197993985326357, 0.08797439318774214, 0.05209815157863429, 0.07125116378586427, 0.03596485951195194, 0.07172682913178563, 0.115050629409584, 0.15715157669579893, 0.18586687690744963, 0.182629896242538, 0.0665891711779052, 0.13490417152657397, 0.18283518059122572, 0.2946522882263186, 0.15017756991485842, 0.14883217437419316, 0.11073438513722633, 0.08226922569547912, 0.08891814885690985, 0.1028290119510823, 0.08075145119301108, 0.061347421955929016, 0.06980786178421572, 0.11799550949874105, 0.08826125154434761, 0.109378207624931, 0.13472611559711933, 0.16976773715000504, 0.18194915324926164, 0.15789192823142517, 0.20888100290749512, 0.1480809169034475, 0.16962445297902373, 0.10366612413793796, 0.6150515108392394, 0.5506680109340142, 0.5551425414819996, 0.5526368556156527, 0.552594565153455, 0.5486787711917496, 0.5174362241236864, 0.5091362924608531, 0.48554344436075814, 0.1515981149714406, 0.13181006762926628, 0.1322781083855361, 0.10319199090270847, 0.12987385377064242, 0.10586987536319159, 0.12446263561142967, 0.12213042939963836, 0.11990210630722808, 0.16786335782528494, 0.15578597982520914, 0.1643788276290259, 0.1762397710878134, 0.160344357540392, 0.19973935873299553, 0.16114549235160502, 0.18941160674239677, 0.23519259771147494, 0.3373041205906411, 0.37833455277646366, 0.32921755213492065, 0.41668392518743236, 0.4269544292297113, 0.4279149581390641, 0.4863662074262938, 0.4528482021157011, 0.42188460884951495, 0.23138374837340303, 0.27984555426718594, 0.2639176072293882, 0.19410217335308522, 0.2565928926309008, 0.25074456227366193, 0.32276889137013764, 0.36110770488075994, 0.2680823576827124, 0.20082227621620263, 0.18646996540616134, 0.20679509414508845, 0.20789774014927798, 0.2113345680439006, 0.20080345279564327, 0.21959165234494815, 0.2030192463635897, 0.23012482649304167, 0.4670833976718892, 0.43140437436707224, 0.6038821379856343, 0.5602983331296179, 0.5585067230689417, 0.49694566349351976, 0.6167209807176397, 0.5123154454829861, 0.2311111422517832, 0.1774207910329123, 0.645765655840639, 0.32533484365301324, 0.6393967495822817, 0.2015774139157247, 0.7870902648213349, 0.7087048927068168, 0.5602181862290903, 0.7622764513700405, 0.3760720304034241, 0.19863114136012716, 0.20207855562021382, 0.20073975775835928, 0.20418772566411214, 0.4052396682486519, 0.5322603978547538, 0.5962683299135436, 0.20098604977822854, 0.19736733127678519, 0.20600293279178472, 0.1722034160360949, 0.1779303914331506, 0.19272300125334063, 0.18537847185912693, 0.17807923045266538, 0.17916046856877943, 0.1893477454643605, 0.08193001114182608, 0.08546551896773724, 0.0846988670626766, 0.08724696250915853, 0.08076507872717353, 0.07593158538917033, 0.09255104950314996, 0.0792732602690247, 0.08621789660030466]}, "mutation_prompt": null}
{"id": "8cb24b71-34e4-45a4-9726-e914944fc3ea", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced exploration through adaptive CR perturbation for improved diversity.", "configspace": "", "generation": 48, "fitness": 0.3375978120110463, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "773a2d9f-9bc5-4296-9593-d2ffe1fdf022", "metadata": {"aucs": [0.7951871789015963, 0.8046229080764052, 0.8161322378734774, 0.7834775405905937, 0.8075031056784653, 0.8041627081068179, 0.8156918599287651, 0.7909492619749733, 0.8083633734473739, 0.6267931023221185, 0.6646695851946143, 0.6241614418692274, 0.6747352102808654, 0.6102673373962157, 0.6474735237887486, 0.6563700006181058, 0.664195112998299, 0.6262673177522432, 0.5851406595099158, 0.48216599079830513, 0.5773202650226203, 0.5948540865116547, 0.4690418352074729, 0.6014217755305548, 0.5496161399070618, 0.5054888153388055, 0.5565462223327162, 0.141325349355933, 0.16167425379641953, 0.1440579389196346, 0.5134067945916023, 0.17164110184149395, 0.1704574712059308, 0.16304012873297558, 0.4858987482619559, 0.16349375022810386, 0.8657512489736292, 0.8557419856012413, 0.8712333660701184, 0.8545667445782728, 0.865016574888847, 0.9216323217269576, 0.867557798240322, 0.9041810995312133, 0.9063449810738902, 0.2516953062368281, 0.36259208808575083, 0.2743489520959739, 0.2521635442182555, 0.390139919280024, 0.40987042352047165, 0.2161882014580898, 0.24538087913864537, 0.3065867114229889, 0.6256846186974396, 0.6602276396989777, 0.6327635241614866, 0.4911728261051408, 0.5678790966792518, 0.26246942451906885, 0.3619453477846146, 0.33262333339037387, 0.6436193954884164, 0.16206912530070727, 0.24212494004738827, 0.1468836519309521, 0.1614354155569383, 0.15752604975234297, 0.1939557703618383, 0.15751336481474976, 0.15484398858983828, 0.15188377084733873, 0.15183615975293174, 0.16732769059108432, 0.13006871558852817, 0.15154287560716606, 0.23205129409836822, 0.26192779147770484, 0.13931427050599432, 0.12655721727177205, 0.14584407058661586, 0.1055020230455449, 0.09155300194038773, 0.08197993985326357, 0.08797439318774214, 0.05209815157863429, 0.07125116378586427, 0.03596485951195194, 0.07172682913178563, 0.115050629409584, 0.15715157669579893, 0.18586687690744963, 0.182629896242538, 0.0665891711779052, 0.13490417152657397, 0.18283518059122572, 0.2946522882263186, 0.15017756991485842, 0.14883217437419316, 0.11073438513722633, 0.08226922569547912, 0.08891814885690985, 0.1028290119510823, 0.08075145119301108, 0.061347421955929016, 0.06980786178421572, 0.11799550949874105, 0.08826125154434761, 0.109378207624931, 0.13472611559711933, 0.16976773715000504, 0.18194915324926164, 0.15789192823142517, 0.20888100290749512, 0.1480809169034475, 0.16962445297902373, 0.10366612413793796, 0.6150515108392394, 0.5506680109340142, 0.5551425414819996, 0.5526368556156527, 0.552594565153455, 0.5486787711917496, 0.5174362241236864, 0.5091362924608531, 0.48554344436075814, 0.1515981149714406, 0.13181006762926628, 0.1322781083855361, 0.10319199090270847, 0.12987385377064242, 0.10586987536319159, 0.12446263561142967, 0.12213042939963836, 0.11990210630722808, 0.16786335782528494, 0.15578597982520914, 0.1643788276290259, 0.1762397710878134, 0.160344357540392, 0.19973935873299553, 0.16114549235160502, 0.18941160674239677, 0.23519259771147494, 0.3373041205906411, 0.37833455277646366, 0.32921755213492065, 0.41668392518743236, 0.4269544292297113, 0.4279149581390641, 0.4863662074262938, 0.4528482021157011, 0.42188460884951495, 0.23138374837340303, 0.27984555426718594, 0.2639176072293882, 0.19410217335308522, 0.2565928926309008, 0.25074456227366193, 0.32276889137013764, 0.36110770488075994, 0.2680823576827124, 0.20082227621620263, 0.18646996540616134, 0.20679509414508845, 0.20789774014927798, 0.2113345680439006, 0.20080345279564327, 0.21959165234494815, 0.2030192463635897, 0.23012482649304167, 0.4670833976718892, 0.43140437436707224, 0.6038821379856343, 0.5602983331296179, 0.5585067230689417, 0.49694566349351976, 0.6167209807176397, 0.5123154454829861, 0.2311111422517832, 0.1774207910329123, 0.645765655840639, 0.32533484365301324, 0.6393967495822817, 0.2015774139157247, 0.7870902648213349, 0.7087048927068168, 0.5602181862290903, 0.7622764513700405, 0.3760720304034241, 0.19863114136012716, 0.20207855562021382, 0.20073975775835928, 0.20418772566411214, 0.4052396682486519, 0.5322603978547538, 0.5962683299135436, 0.20098604977822854, 0.19736733127678519, 0.20600293279178472, 0.1722034160360949, 0.1779303914331506, 0.19272300125334063, 0.18537847185912693, 0.17807923045266538, 0.17916046856877943, 0.1893477454643605, 0.08193001114182608, 0.08546551896773724, 0.0846988670626766, 0.08724696250915853, 0.08076507872717353, 0.07593158538917033, 0.09255104950314996, 0.0792732602690247, 0.08621789660030466]}, "mutation_prompt": null}
{"id": "c13c9a8f-bc29-4bc2-9a96-14928db593f6", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined mutation strategy for improved convergence.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "773a2d9f-9bc5-4296-9593-d2ffe1fdf022", "metadata": {"aucs": [0.7951871789015963, 0.8046229080764052, 0.8161322378734774, 0.7834775405905937, 0.8075031056784653, 0.8041627081068179, 0.8156918599287651, 0.7909492619749733, 0.8083633734473739, 0.6267931023221185, 0.6646695851946143, 0.6241614418692274, 0.6747352102808654, 0.6102673373962157, 0.6474735237887486, 0.6563700006181058, 0.664195112998299, 0.6262673177522432, 0.5851406595099158, 0.48216599079830513, 0.5773202650226203, 0.5948540865116547, 0.4690418352074729, 0.6014217755305548, 0.5496161399070618, 0.5054888153388055, 0.5565462223327162, 0.141325349355933, 0.16167425379641953, 0.1440579389196346, 0.5134067945916023, 0.17164110184149395, 0.1704574712059308, 0.16304012873297558, 0.4858987482619559, 0.16349375022810386, 0.8657512489736292, 0.8557419856012413, 0.8712333660701184, 0.8545667445782728, 0.865016574888847, 0.9216323217269576, 0.867557798240322, 0.9041810995312133, 0.9063449810738902, 0.2516953062368281, 0.36259208808575083, 0.2743489520959739, 0.2521635442182555, 0.390139919280024, 0.40987042352047165, 0.2161882014580898, 0.24538087913864537, 0.3065867114229889, 0.6256846186974396, 0.6602276396989777, 0.6327635241614866, 0.4911728261051408, 0.5678790966792518, 0.26246942451906885, 0.3619453477846146, 0.33262333339037387, 0.6436193954884164, 0.16206912530070727, 0.24212494004738827, 0.1468836519309521, 0.1614354155569383, 0.15752604975234297, 0.1939557703618383, 0.15751336481474976, 0.15484398858983828, 0.15188377084733873, 0.15183615975293174, 0.16732769059108432, 0.13006871558852817, 0.15154287560716606, 0.23205129409836822, 0.26192779147770484, 0.13931427050599432, 0.12655721727177205, 0.14584407058661586, 0.1055020230455449, 0.09155300194038773, 0.08197993985326357, 0.08797439318774214, 0.05209815157863429, 0.07125116378586427, 0.03596485951195194, 0.07172682913178563, 0.115050629409584, 0.15715157669579893, 0.18586687690744963, 0.182629896242538, 0.0665891711779052, 0.13490417152657397, 0.18283518059122572, 0.2946522882263186, 0.15017756991485842, 0.14883217437419316, 0.11073438513722633, 0.08226922569547912, 0.08891814885690985, 0.1028290119510823, 0.08075145119301108, 0.061347421955929016, 0.06980786178421572, 0.11799550949874105, 0.08826125154434761, 0.109378207624931, 0.13472611559711933, 0.16976773715000504, 0.18194915324926164, 0.15789192823142517, 0.20888100290749512, 0.1480809169034475, 0.16962445297902373, 0.10366612413793796, 0.6150515108392394, 0.5506680109340142, 0.5551425414819996, 0.5526368556156527, 0.552594565153455, 0.5486787711917496, 0.5174362241236864, 0.5091362924608531, 0.48554344436075814, 0.1515981149714406, 0.13181006762926628, 0.1322781083855361, 0.10319199090270847, 0.12987385377064242, 0.10586987536319159, 0.12446263561142967, 0.12213042939963836, 0.11990210630722808, 0.16786335782528494, 0.15578597982520914, 0.1643788276290259, 0.1762397710878134, 0.160344357540392, 0.19973935873299553, 0.16114549235160502, 0.18941160674239677, 0.23519259771147494, 0.3373041205906411, 0.37833455277646366, 0.32921755213492065, 0.41668392518743236, 0.4269544292297113, 0.4279149581390641, 0.4863662074262938, 0.4528482021157011, 0.42188460884951495, 0.23138374837340303, 0.27984555426718594, 0.2639176072293882, 0.19410217335308522, 0.2565928926309008, 0.25074456227366193, 0.32276889137013764, 0.36110770488075994, 0.2680823576827124, 0.20082227621620263, 0.18646996540616134, 0.20679509414508845, 0.20789774014927798, 0.2113345680439006, 0.20080345279564327, 0.21959165234494815, 0.2030192463635897, 0.23012482649304167, 0.4670833976718892, 0.43140437436707224, 0.6038821379856343, 0.5602983331296179, 0.5585067230689417, 0.49694566349351976, 0.6167209807176397, 0.5123154454829861, 0.2311111422517832, 0.1774207910329123, 0.645765655840639, 0.32533484365301324, 0.6393967495822817, 0.2015774139157247, 0.7870902648213349, 0.7087048927068168, 0.5602181862290903, 0.7622764513700405, 0.3760720304034241, 0.19863114136012716, 0.20207855562021382, 0.20073975775835928, 0.20418772566411214, 0.4052396682486519, 0.5322603978547538, 0.5962683299135436, 0.20098604977822854, 0.19736733127678519, 0.20600293279178472, 0.1722034160360949, 0.1779303914331506, 0.19272300125334063, 0.18537847185912693, 0.17807923045266538, 0.17916046856877943, 0.1893477454643605, 0.08193001114182608, 0.08546551896773724, 0.0846988670626766, 0.08724696250915853, 0.08076507872717353, 0.07593158538917033, 0.09255104950314996, 0.0792732602690247, 0.08621789660030466]}, "mutation_prompt": null}
{"id": "217a96a4-9ab8-4c53-b6b0-1c250d4986dc", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined mutation strategy for improved convergence.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "773a2d9f-9bc5-4296-9593-d2ffe1fdf022", "metadata": {"aucs": [0.7951871789015963, 0.8046229080764052, 0.8161322378734774, 0.7834775405905937, 0.8075031056784653, 0.8041627081068179, 0.8156918599287651, 0.7909492619749733, 0.8083633734473739, 0.6267931023221185, 0.6646695851946143, 0.6241614418692274, 0.6747352102808654, 0.6102673373962157, 0.6474735237887486, 0.6563700006181058, 0.664195112998299, 0.6262673177522432, 0.5851406595099158, 0.48216599079830513, 0.5773202650226203, 0.5948540865116547, 0.4690418352074729, 0.6014217755305548, 0.5496161399070618, 0.5054888153388055, 0.5565462223327162, 0.141325349355933, 0.16167425379641953, 0.1440579389196346, 0.5134067945916023, 0.17164110184149395, 0.1704574712059308, 0.16304012873297558, 0.4858987482619559, 0.16349375022810386, 0.8657512489736292, 0.8557419856012413, 0.8712333660701184, 0.8545667445782728, 0.865016574888847, 0.9216323217269576, 0.867557798240322, 0.9041810995312133, 0.9063449810738902, 0.2516953062368281, 0.36259208808575083, 0.2743489520959739, 0.2521635442182555, 0.390139919280024, 0.40987042352047165, 0.2161882014580898, 0.24538087913864537, 0.3065867114229889, 0.6256846186974396, 0.6602276396989777, 0.6327635241614866, 0.4911728261051408, 0.5678790966792518, 0.26246942451906885, 0.3619453477846146, 0.33262333339037387, 0.6436193954884164, 0.16206912530070727, 0.24212494004738827, 0.1468836519309521, 0.1614354155569383, 0.15752604975234297, 0.1939557703618383, 0.15751336481474976, 0.15484398858983828, 0.15188377084733873, 0.15183615975293174, 0.16732769059108432, 0.13006871558852817, 0.15154287560716606, 0.23205129409836822, 0.26192779147770484, 0.13931427050599432, 0.12655721727177205, 0.14584407058661586, 0.1055020230455449, 0.09155300194038773, 0.08197993985326357, 0.08797439318774214, 0.05209815157863429, 0.07125116378586427, 0.03596485951195194, 0.07172682913178563, 0.115050629409584, 0.15715157669579893, 0.18586687690744963, 0.182629896242538, 0.0665891711779052, 0.13490417152657397, 0.18283518059122572, 0.2946522882263186, 0.15017756991485842, 0.14883217437419316, 0.11073438513722633, 0.08226922569547912, 0.08891814885690985, 0.1028290119510823, 0.08075145119301108, 0.061347421955929016, 0.06980786178421572, 0.11799550949874105, 0.08826125154434761, 0.109378207624931, 0.13472611559711933, 0.16976773715000504, 0.18194915324926164, 0.15789192823142517, 0.20888100290749512, 0.1480809169034475, 0.16962445297902373, 0.10366612413793796, 0.6150515108392394, 0.5506680109340142, 0.5551425414819996, 0.5526368556156527, 0.552594565153455, 0.5486787711917496, 0.5174362241236864, 0.5091362924608531, 0.48554344436075814, 0.1515981149714406, 0.13181006762926628, 0.1322781083855361, 0.10319199090270847, 0.12987385377064242, 0.10586987536319159, 0.12446263561142967, 0.12213042939963836, 0.11990210630722808, 0.16786335782528494, 0.15578597982520914, 0.1643788276290259, 0.1762397710878134, 0.160344357540392, 0.19973935873299553, 0.16114549235160502, 0.18941160674239677, 0.23519259771147494, 0.3373041205906411, 0.37833455277646366, 0.32921755213492065, 0.41668392518743236, 0.4269544292297113, 0.4279149581390641, 0.4863662074262938, 0.4528482021157011, 0.42188460884951495, 0.23138374837340303, 0.27984555426718594, 0.2639176072293882, 0.19410217335308522, 0.2565928926309008, 0.25074456227366193, 0.32276889137013764, 0.36110770488075994, 0.2680823576827124, 0.20082227621620263, 0.18646996540616134, 0.20679509414508845, 0.20789774014927798, 0.2113345680439006, 0.20080345279564327, 0.21959165234494815, 0.2030192463635897, 0.23012482649304167, 0.4670833976718892, 0.43140437436707224, 0.6038821379856343, 0.5602983331296179, 0.5585067230689417, 0.49694566349351976, 0.6167209807176397, 0.5123154454829861, 0.2311111422517832, 0.1774207910329123, 0.645765655840639, 0.32533484365301324, 0.6393967495822817, 0.2015774139157247, 0.7870902648213349, 0.7087048927068168, 0.5602181862290903, 0.7622764513700405, 0.3760720304034241, 0.19863114136012716, 0.20207855562021382, 0.20073975775835928, 0.20418772566411214, 0.4052396682486519, 0.5322603978547538, 0.5962683299135436, 0.20098604977822854, 0.19736733127678519, 0.20600293279178472, 0.1722034160360949, 0.1779303914331506, 0.19272300125334063, 0.18537847185912693, 0.17807923045266538, 0.17916046856877943, 0.1893477454643605, 0.08193001114182608, 0.08546551896773724, 0.0846988670626766, 0.08724696250915853, 0.08076507872717353, 0.07593158538917033, 0.09255104950314996, 0.0792732602690247, 0.08621789660030466]}, "mutation_prompt": null}
{"id": "c139b6d1-a114-4191-95fa-7690732b7812", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func, evaluations)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func, evaluations):\n        # Adjusted perturbation magnitude based on evaluations\n        perturbation_magnitude = 0.01 * (1 - evaluations / self.budget)\n        perturbation = np.random.normal(0, perturbation_magnitude, self.dim)\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Introducing a more effective local search by adjusting perturbation magnitude based on the progress of evaluations.", "configspace": "", "generation": 51, "fitness": 0.3337594600336535, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "773a2d9f-9bc5-4296-9593-d2ffe1fdf022", "metadata": {"aucs": [0.7877881083956614, 0.8110396870969305, 0.8083782414778546, 0.7910392358107096, 0.8098269658551704, 0.8069838030962436, 0.7962400354130226, 0.7839001798433007, 0.8081413921713175, 0.6175392579040584, 0.6546643598621675, 0.6632173377451791, 0.6423873144145071, 0.6492964256769924, 0.6653041464401284, 0.6503859505321073, 0.6573216782883198, 0.6555708229467214, 0.607918291507197, 0.4905067989629661, 0.5177289497532764, 0.5865971627942577, 0.4684476036382812, 0.5916870762913535, 0.5214171448958697, 0.532819996615547, 0.5634258734427864, 0.15481740313886494, 0.16065686288800118, 0.14422878209052326, 0.47919084947500723, 0.16313429403100033, 0.1499269210355222, 0.14508367375923192, 0.48114871045582197, 0.16643263337381398, 0.8660704783630754, 0.8573168925242751, 0.8712343213385456, 0.8533379339955636, 0.8636381367681447, 0.9216253333737274, 0.8671708532226784, 0.9041839198599362, 0.9063490271475994, 0.2530462996614382, 0.34111116035174815, 0.27320214783689556, 0.17903304488701266, 0.42713403101578806, 0.416216071883885, 0.17661305272833505, 0.2148873440218837, 0.30336733447057374, 0.5874601853049762, 0.5937086509210623, 0.6579006723979948, 0.6842819026969063, 0.6314353800113932, 0.2636797012312472, 0.3619453477846146, 0.30620806446572635, 0.34841382133797405, 0.1565999104310376, 0.21226631988633504, 0.1459487741237686, 0.2519790695935442, 0.15830985727388103, 0.19071437656127377, 0.16146024624186373, 0.14434739600532698, 0.1573616785213009, 0.1398452148078022, 0.1541400003103921, 0.13003794091398635, 0.14523350690124137, 0.2164456053181808, 0.2699676757766988, 0.14040218380861513, 0.12104898005569553, 0.13594691217510757, 0.1370859864495928, 0.13952373707485055, 0.07741579752802286, 0.10725151753924766, 0.05745991535946138, 0.08186030865299854, 0.0548910025963838, 0.040069700050262114, 0.08883539648241767, 0.227586111848176, 0.16348333599404563, 0.14964994484696614, 0.07092668295922577, 0.1349651676386897, 0.16612825856928926, 0.2913974923282061, 0.14368557632794743, 0.14445478454021776, 0.10051385651393452, 0.0813193103456068, 0.08705389093351501, 0.08625270191609158, 0.11138232133120696, 0.06420912696750258, 0.0755683810462533, 0.12256279573648377, 0.10069793643084557, 0.12928295272869106, 0.1344754775761352, 0.1830994318242486, 0.18758999982782865, 0.20022004410280758, 0.2266164212937738, 0.14749062347671826, 0.15197104743307632, 0.110302768802086, 0.5390439384921862, 0.5147797824542506, 0.5883892299487505, 0.5618805368205414, 0.556808166746612, 0.5423419822077116, 0.5126205584845569, 0.5146902877063737, 0.5547755061017057, 0.16343506771423766, 0.12709058489383063, 0.10585548923505772, 0.11034451581978189, 0.1241428744486549, 0.13300615993333909, 0.11868163920725305, 0.11674743289867451, 0.12076063033862883, 0.14097845921119678, 0.15225226590767615, 0.14875093012794038, 0.1983208928546213, 0.15894279520141585, 0.19548524830529468, 0.16765891427281965, 0.20675478691922877, 0.1695077479949667, 0.30577399583656395, 0.3853373231823418, 0.3431411110325884, 0.4414243584111156, 0.42927040990878196, 0.3860027858180375, 0.45601503188298287, 0.4793511567569507, 0.42264911510615444, 0.26439064075989926, 0.31562561710824455, 0.2621170578110461, 0.21078835806426965, 0.26239216862555526, 0.2650851344224122, 0.3323436973578163, 0.3501025296376621, 0.30810352097108407, 0.20001541578077142, 0.18868568179478185, 0.20690777732039634, 0.20069934438094172, 0.21000820017569577, 0.2179907244057364, 0.2015805707159467, 0.20365935940182833, 0.19323005675824056, 0.5576863877291618, 0.251941118972278, 0.6231994555380255, 0.2202498731458219, 0.5036889215402423, 0.2111503311796552, 0.6212908291329072, 0.4811959006630807, 0.23114160216422597, 0.17743658519495853, 0.6492024921612338, 0.33964394799044273, 0.650816723263212, 0.20167083826528565, 0.7831185766505813, 0.7071162522082095, 0.5015766992244399, 0.758782644267398, 0.36628645802968396, 0.1986241512872069, 0.20206874035426503, 0.200590256433687, 0.20417994910025394, 0.5260249969260188, 0.5396721571545942, 0.5959752923023756, 0.20107138506220967, 0.20031694885324358, 0.20603402587988184, 0.17765564608744444, 0.18182284831780193, 0.188798292581824, 0.17871204762943815, 0.1904540105968674, 0.19831663250395937, 0.18617021061922956, 0.07793207859556484, 0.08355682682467835, 0.08044512560534312, 0.09318831119542026, 0.08058583591065327, 0.08459351504811241, 0.08694571171559162, 0.09045021778451301, 0.08982441340141245]}, "mutation_prompt": null}
{"id": "f89dd98c-bf2f-4e46-96e9-ad4c6513f863", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand() * (1 - evaluations / self.budget)  # Dynamic scaling factor\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced mutation strategy with dynamic scaling for better exploration and exploitation.", "configspace": "", "generation": 52, "fitness": 0.32204326136893396, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "773a2d9f-9bc5-4296-9593-d2ffe1fdf022", "metadata": {"aucs": [0.8030401050084499, 0.7952923124130804, 0.8231630629779431, 0.8014618581542692, 0.8007239897440886, 0.7894541682890768, 0.8104855839946297, 0.8037710156143394, 0.8119641607228196, 0.6580418770425315, 0.6608602530130188, 0.6501469751335889, 0.6154994847756163, 0.6485810262733318, 0.6540906890438949, 0.6389383272204863, 0.6664267969223414, 0.6638814721165649, 0.6193977634504543, 0.17965311423439467, 0.5028741475740492, 0.5430500855472322, 0.5909503135741964, 0.6570531470412909, 0.5864157793784937, 0.6093902359320422, 0.17452722475182103, 0.14571383831674156, 0.5093581000531439, 0.11099632151774186, 0.36674989638676503, 0.1703713222144725, 0.5054200424460913, 0.16712102017106045, 0.3883960771370888, 0.16665423511302757, 0.836041708928144, 0.8779840633543099, 0.8595659829993808, 0.8709884216926245, 0.8973403276622363, 0.9036775855077338, 0.8954753717215534, 0.9007206389311658, 0.8737281447213032, 0.15110820950607617, 0.29430748097331005, 0.21591223938462778, 0.10003710515704767, 0.2652283580776835, 0.18158585129506277, 0.09679985016728332, 0.1262859283263551, 0.21522013145216157, 0.34907216418046827, 0.75739364407582, 0.32484059908534213, 0.33702757743512346, 0.681860250383956, 0.35875619538278125, 0.7583971704904612, 0.33969753847787465, 0.2627598265297495, 0.29135144237797106, 0.32280765854607074, 0.11619231551676312, 0.17132083899448536, 0.1694414198035804, 0.23698232637567185, 0.23429879161761624, 0.15993969951963027, 0.14622031930797896, 0.17018545984823852, 0.16583651923201137, 0.12898167733593835, 0.1437064905089288, 0.1770127477061162, 0.15562361890261522, 0.13995315544068476, 0.12373944755046973, 0.146391817194093, 0.1032764106393621, 0.08429045921420131, 0.046990343812715385, 0.016796368966424224, 0.046751585561115805, 0.04769844767671727, 0.03807101487963338, 0.033599754633277024, 0.09808728819457824, 0.12095594542413146, 0.12006820221561698, 0.14948710184232528, 0.06836885423687233, 0.10277176393246679, 0.09610721927547505, 0.3373740840370789, 0.2054661812297992, 0.10721182530458662, 0.16680177326036538, 0.04187239392117281, 0.09737494533417723, 0.1133320413694664, 0.06946212385351447, 0.14626968458220868, 0.10719937839688864, 0.14078256546967227, 0.10049568645848306, 0.1453571320211784, 0.20444139149654805, 0.1854791072314913, 0.23299732676028584, 0.17561557114080606, 0.12160153164740983, 0.12784167803375224, 0.16010918852105283, 0.0904095285873252, 0.47422460796093313, 0.5988749892561901, 0.5456061956902435, 0.5590690023296023, 0.5229842573189014, 0.5125282583501166, 0.5010070319439028, 0.5464652980753184, 0.5029078036408037, 0.1268262794667444, 0.11715072105609692, 0.1236448031456332, 0.12794805798103648, 0.1238856466175795, 0.12042105209489273, 0.11110069135700307, 0.12035446421945362, 0.1300823791423953, 0.19311405496147993, 0.16037911169371377, 0.2249134450088175, 0.2407455266835502, 0.22165761937697048, 0.2119267264890622, 0.17381922341732048, 0.21084321497110392, 0.17499849305889925, 0.3249844963916194, 0.42046374956676447, 0.36578774020130045, 0.2957341667519833, 0.2935170569781661, 0.41865359992414464, 0.5306300348514994, 0.4778189279592311, 0.4630530934336371, 0.2111246208420845, 0.24402805073415723, 0.3543834641361837, 0.29462927197986255, 0.31104257979520034, 0.2774982630887065, 0.2846901840078757, 0.3394923825164353, 0.3382515692053689, 0.21625361849347857, 0.190244353923809, 0.19753947008773953, 0.20969541340184183, 0.23225796849328761, 0.20312754886566953, 0.2216189020417968, 0.2303808595972362, 0.19270483294215812, 0.23656312518764977, 0.1955657916053435, 0.20642093371506898, 0.5359061398531055, 0.23778404526086439, 0.22512703780818233, 0.6616732597149735, 0.23399253901017925, 0.3699207715104591, 0.17864652198988684, 0.6881871336692051, 0.505620233743888, 0.3388065845537701, 0.3815425922765673, 0.7087258189186572, 0.6554571912731456, 0.3710364317772613, 0.7617607702445376, 0.26673983037151716, 0.20152736095127488, 0.34490505053068077, 0.2023172973853865, 0.20484027931553916, 0.16409356088098792, 0.32643141410515275, 0.33491904082095303, 0.4590277079692806, 0.18783488019865469, 0.187762326812962, 0.1890949850273581, 0.17702971613333485, 0.19461494713145266, 0.19326060955808144, 0.1891413275078757, 0.20287955591869833, 0.17563327497018522, 0.08230766006345802, 0.09050242344267334, 0.08991697875357219, 0.0783090245439878, 0.094372376594404, 0.09616934253041343, 0.0776593368292271, 0.08151344869095978, 0.0861887668790634]}, "mutation_prompt": null}
{"id": "9c3063cd-9375-46ee-9c58-de9b63c3e5a1", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined mutation strategy for improved convergence.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "773a2d9f-9bc5-4296-9593-d2ffe1fdf022", "metadata": {"aucs": [0.7951871789015963, 0.8046229080764052, 0.8161322378734774, 0.7834775405905937, 0.8075031056784653, 0.8041627081068179, 0.8156918599287651, 0.7909492619749733, 0.8083633734473739, 0.6267931023221185, 0.6646695851946143, 0.6241614418692274, 0.6747352102808654, 0.6102673373962157, 0.6474735237887486, 0.6563700006181058, 0.664195112998299, 0.6262673177522432, 0.5851406595099158, 0.48216599079830513, 0.5773202650226203, 0.5948540865116547, 0.4690418352074729, 0.6014217755305548, 0.5496161399070618, 0.5054888153388055, 0.5565462223327162, 0.141325349355933, 0.16167425379641953, 0.1440579389196346, 0.5134067945916023, 0.17164110184149395, 0.1704574712059308, 0.16304012873297558, 0.4858987482619559, 0.16349375022810386, 0.8657512489736292, 0.8557419856012413, 0.8712333660701184, 0.8545667445782728, 0.865016574888847, 0.9216323217269576, 0.867557798240322, 0.9041810995312133, 0.9063449810738902, 0.2516953062368281, 0.36259208808575083, 0.2743489520959739, 0.2521635442182555, 0.390139919280024, 0.40987042352047165, 0.2161882014580898, 0.24538087913864537, 0.3065867114229889, 0.6256846186974396, 0.6602276396989777, 0.6327635241614866, 0.4911728261051408, 0.5678790966792518, 0.26246942451906885, 0.3619453477846146, 0.33262333339037387, 0.6436193954884164, 0.16206912530070727, 0.24212494004738827, 0.1468836519309521, 0.1614354155569383, 0.15752604975234297, 0.1939557703618383, 0.15751336481474976, 0.15484398858983828, 0.15188377084733873, 0.15183615975293174, 0.16732769059108432, 0.13006871558852817, 0.15154287560716606, 0.23205129409836822, 0.26192779147770484, 0.13931427050599432, 0.12655721727177205, 0.14584407058661586, 0.1055020230455449, 0.09155300194038773, 0.08197993985326357, 0.08797439318774214, 0.05209815157863429, 0.07125116378586427, 0.03596485951195194, 0.07172682913178563, 0.115050629409584, 0.15715157669579893, 0.18586687690744963, 0.182629896242538, 0.0665891711779052, 0.13490417152657397, 0.18283518059122572, 0.2946522882263186, 0.15017756991485842, 0.14883217437419316, 0.11073438513722633, 0.08226922569547912, 0.08891814885690985, 0.1028290119510823, 0.08075145119301108, 0.061347421955929016, 0.06980786178421572, 0.11799550949874105, 0.08826125154434761, 0.109378207624931, 0.13472611559711933, 0.16976773715000504, 0.18194915324926164, 0.15789192823142517, 0.20888100290749512, 0.1480809169034475, 0.16962445297902373, 0.10366612413793796, 0.6150515108392394, 0.5506680109340142, 0.5551425414819996, 0.5526368556156527, 0.552594565153455, 0.5486787711917496, 0.5174362241236864, 0.5091362924608531, 0.48554344436075814, 0.1515981149714406, 0.13181006762926628, 0.1322781083855361, 0.10319199090270847, 0.12987385377064242, 0.10586987536319159, 0.12446263561142967, 0.12213042939963836, 0.11990210630722808, 0.16786335782528494, 0.15578597982520914, 0.1643788276290259, 0.1762397710878134, 0.160344357540392, 0.19973935873299553, 0.16114549235160502, 0.18941160674239677, 0.23519259771147494, 0.3373041205906411, 0.37833455277646366, 0.32921755213492065, 0.41668392518743236, 0.4269544292297113, 0.4279149581390641, 0.4863662074262938, 0.4528482021157011, 0.42188460884951495, 0.23138374837340303, 0.27984555426718594, 0.2639176072293882, 0.19410217335308522, 0.2565928926309008, 0.25074456227366193, 0.32276889137013764, 0.36110770488075994, 0.2680823576827124, 0.20082227621620263, 0.18646996540616134, 0.20679509414508845, 0.20789774014927798, 0.2113345680439006, 0.20080345279564327, 0.21959165234494815, 0.2030192463635897, 0.23012482649304167, 0.4670833976718892, 0.43140437436707224, 0.6038821379856343, 0.5602983331296179, 0.5585067230689417, 0.49694566349351976, 0.6167209807176397, 0.5123154454829861, 0.2311111422517832, 0.1774207910329123, 0.645765655840639, 0.32533484365301324, 0.6393967495822817, 0.2015774139157247, 0.7870902648213349, 0.7087048927068168, 0.5602181862290903, 0.7622764513700405, 0.3760720304034241, 0.19863114136012716, 0.20207855562021382, 0.20073975775835928, 0.20418772566411214, 0.4052396682486519, 0.5322603978547538, 0.5962683299135436, 0.20098604977822854, 0.19736733127678519, 0.20600293279178472, 0.1722034160360949, 0.1779303914331506, 0.19272300125334063, 0.18537847185912693, 0.17807923045266538, 0.17916046856877943, 0.1893477454643605, 0.08193001114182608, 0.08546551896773724, 0.0846988670626766, 0.08724696250915853, 0.08076507872717353, 0.07593158538917033, 0.09255104950314996, 0.0792732602690247, 0.08621789660030466]}, "mutation_prompt": null}
{"id": "850f112e-67c2-47fd-af1c-daede6086cad", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined mutation strategy for improved convergence.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "773a2d9f-9bc5-4296-9593-d2ffe1fdf022", "metadata": {"aucs": [0.7951871789015963, 0.8046229080764052, 0.8161322378734774, 0.7834775405905937, 0.8075031056784653, 0.8041627081068179, 0.8156918599287651, 0.7909492619749733, 0.8083633734473739, 0.6267931023221185, 0.6646695851946143, 0.6241614418692274, 0.6747352102808654, 0.6102673373962157, 0.6474735237887486, 0.6563700006181058, 0.664195112998299, 0.6262673177522432, 0.5851406595099158, 0.48216599079830513, 0.5773202650226203, 0.5948540865116547, 0.4690418352074729, 0.6014217755305548, 0.5496161399070618, 0.5054888153388055, 0.5565462223327162, 0.141325349355933, 0.16167425379641953, 0.1440579389196346, 0.5134067945916023, 0.17164110184149395, 0.1704574712059308, 0.16304012873297558, 0.4858987482619559, 0.16349375022810386, 0.8657512489736292, 0.8557419856012413, 0.8712333660701184, 0.8545667445782728, 0.865016574888847, 0.9216323217269576, 0.867557798240322, 0.9041810995312133, 0.9063449810738902, 0.2516953062368281, 0.36259208808575083, 0.2743489520959739, 0.2521635442182555, 0.390139919280024, 0.40987042352047165, 0.2161882014580898, 0.24538087913864537, 0.3065867114229889, 0.6256846186974396, 0.6602276396989777, 0.6327635241614866, 0.4911728261051408, 0.5678790966792518, 0.26246942451906885, 0.3619453477846146, 0.33262333339037387, 0.6436193954884164, 0.16206912530070727, 0.24212494004738827, 0.1468836519309521, 0.1614354155569383, 0.15752604975234297, 0.1939557703618383, 0.15751336481474976, 0.15484398858983828, 0.15188377084733873, 0.15183615975293174, 0.16732769059108432, 0.13006871558852817, 0.15154287560716606, 0.23205129409836822, 0.26192779147770484, 0.13931427050599432, 0.12655721727177205, 0.14584407058661586, 0.1055020230455449, 0.09155300194038773, 0.08197993985326357, 0.08797439318774214, 0.05209815157863429, 0.07125116378586427, 0.03596485951195194, 0.07172682913178563, 0.115050629409584, 0.15715157669579893, 0.18586687690744963, 0.182629896242538, 0.0665891711779052, 0.13490417152657397, 0.18283518059122572, 0.2946522882263186, 0.15017756991485842, 0.14883217437419316, 0.11073438513722633, 0.08226922569547912, 0.08891814885690985, 0.1028290119510823, 0.08075145119301108, 0.061347421955929016, 0.06980786178421572, 0.11799550949874105, 0.08826125154434761, 0.109378207624931, 0.13472611559711933, 0.16976773715000504, 0.18194915324926164, 0.15789192823142517, 0.20888100290749512, 0.1480809169034475, 0.16962445297902373, 0.10366612413793796, 0.6150515108392394, 0.5506680109340142, 0.5551425414819996, 0.5526368556156527, 0.552594565153455, 0.5486787711917496, 0.5174362241236864, 0.5091362924608531, 0.48554344436075814, 0.1515981149714406, 0.13181006762926628, 0.1322781083855361, 0.10319199090270847, 0.12987385377064242, 0.10586987536319159, 0.12446263561142967, 0.12213042939963836, 0.11990210630722808, 0.16786335782528494, 0.15578597982520914, 0.1643788276290259, 0.1762397710878134, 0.160344357540392, 0.19973935873299553, 0.16114549235160502, 0.18941160674239677, 0.23519259771147494, 0.3373041205906411, 0.37833455277646366, 0.32921755213492065, 0.41668392518743236, 0.4269544292297113, 0.4279149581390641, 0.4863662074262938, 0.4528482021157011, 0.42188460884951495, 0.23138374837340303, 0.27984555426718594, 0.2639176072293882, 0.19410217335308522, 0.2565928926309008, 0.25074456227366193, 0.32276889137013764, 0.36110770488075994, 0.2680823576827124, 0.20082227621620263, 0.18646996540616134, 0.20679509414508845, 0.20789774014927798, 0.2113345680439006, 0.20080345279564327, 0.21959165234494815, 0.2030192463635897, 0.23012482649304167, 0.4670833976718892, 0.43140437436707224, 0.6038821379856343, 0.5602983331296179, 0.5585067230689417, 0.49694566349351976, 0.6167209807176397, 0.5123154454829861, 0.2311111422517832, 0.1774207910329123, 0.645765655840639, 0.32533484365301324, 0.6393967495822817, 0.2015774139157247, 0.7870902648213349, 0.7087048927068168, 0.5602181862290903, 0.7622764513700405, 0.3760720304034241, 0.19863114136012716, 0.20207855562021382, 0.20073975775835928, 0.20418772566411214, 0.4052396682486519, 0.5322603978547538, 0.5962683299135436, 0.20098604977822854, 0.19736733127678519, 0.20600293279178472, 0.1722034160360949, 0.1779303914331506, 0.19272300125334063, 0.18537847185912693, 0.17807923045266538, 0.17916046856877943, 0.1893477454643605, 0.08193001114182608, 0.08546551896773724, 0.0846988670626766, 0.08724696250915853, 0.08076507872717353, 0.07593158538917033, 0.09255104950314996, 0.0792732602690247, 0.08621789660030466]}, "mutation_prompt": null}
{"id": "00411aa2-81ee-43cc-a200-d888a74cca83", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined mutation strategy for improved convergence.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "773a2d9f-9bc5-4296-9593-d2ffe1fdf022", "metadata": {"aucs": [0.7951871789015963, 0.8046229080764052, 0.8161322378734774, 0.7834775405905937, 0.8075031056784653, 0.8041627081068179, 0.8156918599287651, 0.7909492619749733, 0.8083633734473739, 0.6267931023221185, 0.6646695851946143, 0.6241614418692274, 0.6747352102808654, 0.6102673373962157, 0.6474735237887486, 0.6563700006181058, 0.664195112998299, 0.6262673177522432, 0.5851406595099158, 0.48216599079830513, 0.5773202650226203, 0.5948540865116547, 0.4690418352074729, 0.6014217755305548, 0.5496161399070618, 0.5054888153388055, 0.5565462223327162, 0.141325349355933, 0.16167425379641953, 0.1440579389196346, 0.5134067945916023, 0.17164110184149395, 0.1704574712059308, 0.16304012873297558, 0.4858987482619559, 0.16349375022810386, 0.8657512489736292, 0.8557419856012413, 0.8712333660701184, 0.8545667445782728, 0.865016574888847, 0.9216323217269576, 0.867557798240322, 0.9041810995312133, 0.9063449810738902, 0.2516953062368281, 0.36259208808575083, 0.2743489520959739, 0.2521635442182555, 0.390139919280024, 0.40987042352047165, 0.2161882014580898, 0.24538087913864537, 0.3065867114229889, 0.6256846186974396, 0.6602276396989777, 0.6327635241614866, 0.4911728261051408, 0.5678790966792518, 0.26246942451906885, 0.3619453477846146, 0.33262333339037387, 0.6436193954884164, 0.16206912530070727, 0.24212494004738827, 0.1468836519309521, 0.1614354155569383, 0.15752604975234297, 0.1939557703618383, 0.15751336481474976, 0.15484398858983828, 0.15188377084733873, 0.15183615975293174, 0.16732769059108432, 0.13006871558852817, 0.15154287560716606, 0.23205129409836822, 0.26192779147770484, 0.13931427050599432, 0.12655721727177205, 0.14584407058661586, 0.1055020230455449, 0.09155300194038773, 0.08197993985326357, 0.08797439318774214, 0.05209815157863429, 0.07125116378586427, 0.03596485951195194, 0.07172682913178563, 0.115050629409584, 0.15715157669579893, 0.18586687690744963, 0.182629896242538, 0.0665891711779052, 0.13490417152657397, 0.18283518059122572, 0.2946522882263186, 0.15017756991485842, 0.14883217437419316, 0.11073438513722633, 0.08226922569547912, 0.08891814885690985, 0.1028290119510823, 0.08075145119301108, 0.061347421955929016, 0.06980786178421572, 0.11799550949874105, 0.08826125154434761, 0.109378207624931, 0.13472611559711933, 0.16976773715000504, 0.18194915324926164, 0.15789192823142517, 0.20888100290749512, 0.1480809169034475, 0.16962445297902373, 0.10366612413793796, 0.6150515108392394, 0.5506680109340142, 0.5551425414819996, 0.5526368556156527, 0.552594565153455, 0.5486787711917496, 0.5174362241236864, 0.5091362924608531, 0.48554344436075814, 0.1515981149714406, 0.13181006762926628, 0.1322781083855361, 0.10319199090270847, 0.12987385377064242, 0.10586987536319159, 0.12446263561142967, 0.12213042939963836, 0.11990210630722808, 0.16786335782528494, 0.15578597982520914, 0.1643788276290259, 0.1762397710878134, 0.160344357540392, 0.19973935873299553, 0.16114549235160502, 0.18941160674239677, 0.23519259771147494, 0.3373041205906411, 0.37833455277646366, 0.32921755213492065, 0.41668392518743236, 0.4269544292297113, 0.4279149581390641, 0.4863662074262938, 0.4528482021157011, 0.42188460884951495, 0.23138374837340303, 0.27984555426718594, 0.2639176072293882, 0.19410217335308522, 0.2565928926309008, 0.25074456227366193, 0.32276889137013764, 0.36110770488075994, 0.2680823576827124, 0.20082227621620263, 0.18646996540616134, 0.20679509414508845, 0.20789774014927798, 0.2113345680439006, 0.20080345279564327, 0.21959165234494815, 0.2030192463635897, 0.23012482649304167, 0.4670833976718892, 0.43140437436707224, 0.6038821379856343, 0.5602983331296179, 0.5585067230689417, 0.49694566349351976, 0.6167209807176397, 0.5123154454829861, 0.2311111422517832, 0.1774207910329123, 0.645765655840639, 0.32533484365301324, 0.6393967495822817, 0.2015774139157247, 0.7870902648213349, 0.7087048927068168, 0.5602181862290903, 0.7622764513700405, 0.3760720304034241, 0.19863114136012716, 0.20207855562021382, 0.20073975775835928, 0.20418772566411214, 0.4052396682486519, 0.5322603978547538, 0.5962683299135436, 0.20098604977822854, 0.19736733127678519, 0.20600293279178472, 0.1722034160360949, 0.1779303914331506, 0.19272300125334063, 0.18537847185912693, 0.17807923045266538, 0.17916046856877943, 0.1893477454643605, 0.08193001114182608, 0.08546551896773724, 0.0846988670626766, 0.08724696250915853, 0.08076507872717353, 0.07593158538917033, 0.09255104950314996, 0.0792732602690247, 0.08621789660030466]}, "mutation_prompt": null}
{"id": "3710b669-4706-43f1-9b2b-54e0beb06eef", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand() * 0.8 + 0.2  # Changed to enhance mutation diversity\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Slightly increase mutation diversity by altering the scaling factor.", "configspace": "", "generation": 56, "fitness": 0.32424819987333436, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.23.", "error": "", "parent_id": "773a2d9f-9bc5-4296-9593-d2ffe1fdf022", "metadata": {"aucs": [0.7947906414815732, 0.7989945422794252, 0.8022921327966701, 0.7885303193059184, 0.7877735374207242, 0.8074515595942078, 0.7776071675285471, 0.7878023075543252, 0.7939335570039514, 0.6444972427945912, 0.6269134858021206, 0.6206712178155629, 0.6562694134469975, 0.6210960925830431, 0.6377494911045474, 0.6318978592502908, 0.6333569805296488, 0.6319895551718687, 0.38963893017341855, 0.2320360830294107, 0.5069821964429776, 0.4796231555380941, 0.49151447655773095, 0.48553598818540167, 0.5318920241997236, 0.4760307325563927, 0.268691897252614, 0.1464803701024584, 0.2259573997797093, 0.36226496351142523, 0.14677983794437566, 0.3590061291959348, 0.3004697765304247, 0.3271658693541085, 0.3194176380652438, 0.15105358218645304, 0.8223380439360772, 0.91456919500091, 0.8863962720438345, 0.8663952029022529, 0.889739867817943, 0.8981114900283874, 0.8789983076176315, 0.8688320559257542, 0.9100874356697526, 0.3627578380273059, 0.36982593392128116, 0.23437530245728389, 0.25909131227381854, 0.33948034344965494, 0.3551390710976793, 0.38431777466042827, 0.26737479413772247, 0.24965021313414704, 0.5486808621251897, 0.640499329521552, 0.5923842010876189, 0.31480945984102604, 0.683996070440233, 0.6108374022778952, 0.6908376846368212, 0.7176753250101007, 0.6535641379290438, 0.2013374702669607, 0.1424131418928808, 0.16270650706280354, 0.1439933727882683, 0.18185146920348838, 0.34107573074901754, 0.14321348638909515, 0.1780256728257391, 0.15975728174224346, 0.22987246793740668, 0.14363834604610892, 0.1619586397097913, 0.18669611894072113, 0.19020103516526887, 0.18956265833834907, 0.14018271940391624, 0.11179862217166137, 0.13676598374726778, 0.09991176306358862, 0.05396028706014677, 0.00871694540246648, 0.05075706418117243, 0.055343505386123426, 0.021380284025823704, 0.10503710913213249, 0.05505084605206978, 0.07997074829768702, 0.21459246677116683, 0.22932353866513877, 0.14379203437679278, 0.11432369856180236, 0.15218062064314852, 0.1247519567964307, 0.22456179101230211, 0.16480172375866076, 0.20075557938017008, 0.12074922593777826, 0.07426024518818508, 0.0769228831914901, 0.0781749828539483, 0.08133310617955081, 0.06003165638962216, 0.09311057485753249, 0.14521245881459655, 0.11393500322419092, 0.1417979729934492, 0.14283616941484778, 0.16491767020788606, 0.23283387243646325, 0.18750306237612013, 0.22105581621927273, 0.21210869784636166, 0.1595722407381398, 0.10050550294410754, 0.5233150304300704, 0.5382246911155275, 0.5584622510761269, 0.5567682600765971, 0.536850322158118, 0.545464017545932, 0.5361244090609765, 0.5462122613853597, 0.5311552897189697, 0.12495405278077965, 0.1134339314831565, 0.10202664122793925, 0.12115066718065959, 0.11819001613275593, 0.10630353501898504, 0.1206814713263411, 0.11066695395729642, 0.13320055802767505, 0.14782556023663695, 0.15178696417955706, 0.15618485286802675, 0.1629233938544581, 0.13259363174525785, 0.13853939904078272, 0.1646064850513128, 0.14917099171391546, 0.13834417069548477, 0.4197241775136269, 0.39442058551850245, 0.3740445000877318, 0.41789053944212273, 0.34025400780353143, 0.4063868973785053, 0.39986754226107524, 0.46388664463209606, 0.4146685371081872, 0.30421698198993774, 0.2987360742829457, 0.28505573817121366, 0.24626930812578363, 0.26734095087415943, 0.2643355495003009, 0.316669854209487, 0.3062403499121876, 0.2987624076681641, 0.21453604870560516, 0.19389782965382862, 0.21276278487364964, 0.19412098773812336, 0.19389322984638724, 0.1984337027711447, 0.21510491684470423, 0.2063041836575148, 0.19482569860468224, 0.5045043386341199, 0.3520291018066366, 0.49506274839185116, 0.2244604768109416, 0.423557504931808, 0.20671288873404614, 0.39948032958588187, 0.4214084469718359, 0.4093439748963974, 0.1818183899609096, 0.15971258953504874, 0.17969542713950337, 0.6843064175209657, 0.48955058101822946, 0.8235993648348778, 0.5740747288307091, 0.16051079321130657, 0.1650223138836876, 0.36035474382095467, 0.20185532024933805, 0.18443677176272744, 0.19698076758424232, 0.39782866975140607, 0.16482232313230905, 0.4902757295248368, 0.3357238671290743, 0.20160145515444572, 0.18547758730690755, 0.17628748225398883, 0.18211053694842572, 0.17165189750070697, 0.19655293068877577, 0.1816260289803181, 0.1818904615109902, 0.1869452112259964, 0.18729978088324728, 0.08407469938235157, 0.08922022617113634, 0.08820807266347874, 0.08563962399898062, 0.09419303585035255, 0.09421886633728915, 0.0838705052067431, 0.07804248427387794, 0.08771492858205765]}, "mutation_prompt": null}
{"id": "473e7ad4-4312-40e7-9c15-8f14d87cfa88", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = (0.3 + 0.7 * (1 - evaluations / self.budget))  # Incremental adjustment of CR\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Incremental adjustment of crossover rate to enhance diversity and convergence.", "configspace": "", "generation": 57, "fitness": 0.28170413521587917, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": "773a2d9f-9bc5-4296-9593-d2ffe1fdf022", "metadata": {"aucs": [0.8307458543441532, 0.806192855362382, 0.7806388113557068, 0.8033706868948507, 0.6827489852436686, 0.8243399002049111, 0.7475371649235583, 0.7997875309237367, 0.8086541363829127, 0.6905392492852882, 0.1882464871933014, 0.644550365640101, 0.6947199561246182, 0.18909209617447298, 0.0748706793445868, 0.6144870383514542, 0.728529454491754, 0.49241679614029144, 0.4985776786723771, 0.1673417628816456, 0.45423641678883586, 0.12159539354262139, 0.1705669877538074, 0.17577973490386978, 0.13471823791948467, 0.16700572526353008, 0.16630715223348502, 0.11377918483986504, 0.143286760077872, 0.10962608225549975, 0.1667828181850719, 0.08485603116302554, 0.10726682338331206, 0.16787160827337244, 0.1713633118267588, 0.11169744515420554, 0.3317568741081185, 0.8072590368256927, 0.17862877788031495, 0.7624347301650467, 0.832789218825664, 0.7782120484061137, 0.7758184342617442, 0.8024281778567741, 0.7538882382830032, 0.28990026420903836, 0.13392630503905145, 0.2690076698991226, 0.18727409772715808, 0.1431322342928012, 0.054012047844054, 0.20803116987351822, 0.24492798387566295, 0.3113848158024741, 0.3006391371263739, 0.2519550595627683, 0.21208315977219838, 0.8139385148220087, 0.8150955372860862, 0.14555137721653222, 0.7430389975289469, 0.208420436933754, 0.3297158193823764, 0.3395088172010131, 0.2227130008075704, 0.0015406282444786479, 9.999999999998899e-05, 0.11938021044773284, 0.35457693379113675, 0.17644597518024074, 0.3089692550041796, 0.15053396224588345, 0.49623822444022003, 0.16137998506537587, 0.155155524084575, 0.13245985796988302, 0.1762485561047854, 0.17735569521477812, 0.13845392531205636, 0.2080071914855106, 0.11511312844998156, 0.27579726422174844, 0.30294254195545234, 9.999999999998899e-05, 0.004251127619199324, 0.1261827396452958, 0.033340379226389216, 0.0793829341336254, 0.0397894778581207, 0.06383615074478743, 0.15935105211776046, 0.3095741234648677, 0.26308273035934326, 0.1037479013285687, 0.13069133233927022, 0.036854446150105136, 0.20395242592812057, 0.1338213765503331, 0.23739889080922816, 0.13151738341740915, 0.06731954281198393, 0.13539415599178284, 0.096743812016021, 0.12974283249317597, 0.126622711646871, 0.14602679253450002, 0.12805265883687267, 0.1935604838602467, 0.09647080261530006, 0.2744269992242643, 0.1465847373930106, 0.1984735088706947, 0.23830468800050963, 0.34564515123523654, 0.058901267464404716, 0.17459827402217254, 0.1170270490661387, 0.5710938393956158, 0.6091680073205841, 0.6115706057973869, 0.48332263196159264, 0.46347717920811415, 0.48882045937377727, 0.5266260196161723, 0.4889304520614286, 0.46724700362142735, 0.10941656263354527, 0.13717537401187785, 0.11272845091186223, 0.10054700935467098, 0.11078635545482707, 0.08455504117492985, 0.1162522695532685, 0.14953073822771834, 0.1127954232025219, 0.3836651985351751, 0.189506158602466, 0.3048008086521248, 0.24358284998095736, 0.202745144213483, 0.510738784536497, 0.18483353609541942, 0.19738511890204313, 0.25553877792392754, 0.2700854351562211, 0.3888528779179119, 0.3990397946732158, 0.41314511005513155, 0.3655709558153962, 0.445430761326874, 0.5027558509594157, 0.494544600689538, 0.4618523225658995, 0.30482473017202105, 0.3138010547884291, 0.23979347923651007, 0.22795994737476066, 0.3131959121894603, 0.28131891096127115, 0.24534444462880645, 0.2438257399365944, 0.3253879950689901, 0.21751003885509446, 0.2029408887105515, 0.19433204059023423, 0.21362531017300446, 0.2055698572641662, 0.1983559015698917, 0.24864739433914684, 0.20186455221897948, 0.2003094997042798, 0.2024473560519564, 0.24326528056532037, 0.21869978597492246, 0.21004887048107712, 0.19157845608622304, 0.17161209750614836, 0.20556164726841575, 0.21205859133793203, 0.18915010311072844, 0.1680798953189182, 0.18115771379789303, 0.6318262907292369, 0.8919489110739872, 0.1967096795865365, 0.19564236440152427, 0.39142991719360265, 0.17080097534778527, 0.1605511169680074, 0.3927297824098245, 0.20998904979999367, 0.4067574121022831, 0.17459643025231575, 0.20774163873196927, 0.16579985596113034, 0.2043458740483982, 0.2102600532991723, 0.16113985396445896, 0.18338146531119626, 0.1806745402797516, 0.18003305795035573, 0.18215359985019375, 0.19102037249260806, 0.17934499175628882, 0.1873692670467514, 0.18892272553786393, 0.19142496817648103, 0.08926540060373478, 0.08714584265667058, 0.09760315208394454, 0.08997562290317052, 0.0919333027819943, 0.0859235963827234, 0.08999487063269884, 0.08851992357994076, 0.09768431065955119]}, "mutation_prompt": null}
{"id": "51171780-3c7d-4d25-ac34-2a7bbd94a100", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Optimized dynamic exploration with enhanced mutation diversity for improved convergence.", "configspace": "", "generation": 58, "fitness": 0.3375978120110463, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "773a2d9f-9bc5-4296-9593-d2ffe1fdf022", "metadata": {"aucs": [0.7951871789015963, 0.8046229080764052, 0.8161322378734774, 0.7834775405905937, 0.8075031056784653, 0.8041627081068179, 0.8156918599287651, 0.7909492619749733, 0.8083633734473739, 0.6267931023221185, 0.6646695851946143, 0.6241614418692274, 0.6747352102808654, 0.6102673373962157, 0.6474735237887486, 0.6563700006181058, 0.664195112998299, 0.6262673177522432, 0.5851406595099158, 0.48216599079830513, 0.5773202650226203, 0.5948540865116547, 0.4690418352074729, 0.6014217755305548, 0.5496161399070618, 0.5054888153388055, 0.5565462223327162, 0.141325349355933, 0.16167425379641953, 0.1440579389196346, 0.5134067945916023, 0.17164110184149395, 0.1704574712059308, 0.16304012873297558, 0.4858987482619559, 0.16349375022810386, 0.8657512489736292, 0.8557419856012413, 0.8712333660701184, 0.8545667445782728, 0.865016574888847, 0.9216323217269576, 0.867557798240322, 0.9041810995312133, 0.9063449810738902, 0.2516953062368281, 0.36259208808575083, 0.2743489520959739, 0.2521635442182555, 0.390139919280024, 0.40987042352047165, 0.2161882014580898, 0.24538087913864537, 0.3065867114229889, 0.6256846186974396, 0.6602276396989777, 0.6327635241614866, 0.4911728261051408, 0.5678790966792518, 0.26246942451906885, 0.3619453477846146, 0.33262333339037387, 0.6436193954884164, 0.16206912530070727, 0.24212494004738827, 0.1468836519309521, 0.1614354155569383, 0.15752604975234297, 0.1939557703618383, 0.15751336481474976, 0.15484398858983828, 0.15188377084733873, 0.15183615975293174, 0.16732769059108432, 0.13006871558852817, 0.15154287560716606, 0.23205129409836822, 0.26192779147770484, 0.13931427050599432, 0.12655721727177205, 0.14584407058661586, 0.1055020230455449, 0.09155300194038773, 0.08197993985326357, 0.08797439318774214, 0.05209815157863429, 0.07125116378586427, 0.03596485951195194, 0.07172682913178563, 0.115050629409584, 0.15715157669579893, 0.18586687690744963, 0.182629896242538, 0.0665891711779052, 0.13490417152657397, 0.18283518059122572, 0.2946522882263186, 0.15017756991485842, 0.14883217437419316, 0.11073438513722633, 0.08226922569547912, 0.08891814885690985, 0.1028290119510823, 0.08075145119301108, 0.061347421955929016, 0.06980786178421572, 0.11799550949874105, 0.08826125154434761, 0.109378207624931, 0.13472611559711933, 0.16976773715000504, 0.18194915324926164, 0.15789192823142517, 0.20888100290749512, 0.1480809169034475, 0.16962445297902373, 0.10366612413793796, 0.6150515108392394, 0.5506680109340142, 0.5551425414819996, 0.5526368556156527, 0.552594565153455, 0.5486787711917496, 0.5174362241236864, 0.5091362924608531, 0.48554344436075814, 0.1515981149714406, 0.13181006762926628, 0.1322781083855361, 0.10319199090270847, 0.12987385377064242, 0.10586987536319159, 0.12446263561142967, 0.12213042939963836, 0.11990210630722808, 0.16786335782528494, 0.15578597982520914, 0.1643788276290259, 0.1762397710878134, 0.160344357540392, 0.19973935873299553, 0.16114549235160502, 0.18941160674239677, 0.23519259771147494, 0.3373041205906411, 0.37833455277646366, 0.32921755213492065, 0.41668392518743236, 0.4269544292297113, 0.4279149581390641, 0.4863662074262938, 0.4528482021157011, 0.42188460884951495, 0.23138374837340303, 0.27984555426718594, 0.2639176072293882, 0.19410217335308522, 0.2565928926309008, 0.25074456227366193, 0.32276889137013764, 0.36110770488075994, 0.2680823576827124, 0.20082227621620263, 0.18646996540616134, 0.20679509414508845, 0.20789774014927798, 0.2113345680439006, 0.20080345279564327, 0.21959165234494815, 0.2030192463635897, 0.23012482649304167, 0.4670833976718892, 0.43140437436707224, 0.6038821379856343, 0.5602983331296179, 0.5585067230689417, 0.49694566349351976, 0.6167209807176397, 0.5123154454829861, 0.2311111422517832, 0.1774207910329123, 0.645765655840639, 0.32533484365301324, 0.6393967495822817, 0.2015774139157247, 0.7870902648213349, 0.7087048927068168, 0.5602181862290903, 0.7622764513700405, 0.3760720304034241, 0.19863114136012716, 0.20207855562021382, 0.20073975775835928, 0.20418772566411214, 0.4052396682486519, 0.5322603978547538, 0.5962683299135436, 0.20098604977822854, 0.19736733127678519, 0.20600293279178472, 0.1722034160360949, 0.1779303914331506, 0.19272300125334063, 0.18537847185912693, 0.17807923045266538, 0.17916046856877943, 0.1893477454643605, 0.08193001114182608, 0.08546551896773724, 0.0846988670626766, 0.08724696250915853, 0.08076507872717353, 0.07593158538917033, 0.09255104950314996, 0.0792732602690247, 0.08621789660030466]}, "mutation_prompt": null}
{"id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.02, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined local search scaling for improved convergence.", "configspace": "", "generation": 59, "fitness": 0.3402751579967883, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "773a2d9f-9bc5-4296-9593-d2ffe1fdf022", "metadata": {"aucs": [0.7901515981392251, 0.8109564542824997, 0.823983883403354, 0.8078959353659622, 0.8039132680879147, 0.7991478010104747, 0.8044527385152666, 0.7800544923942474, 0.8129729764238944, 0.6225008384666069, 0.596479164286183, 0.6697692421032345, 0.673218701517774, 0.6453025826426018, 0.6818619259081896, 0.6449482598460416, 0.6560650015966856, 0.6778804019622324, 0.5758876666341368, 0.5264009368222926, 0.5747200903290176, 0.46375389093649677, 0.541256612089343, 0.5556562489593059, 0.5488903988140932, 0.1716656079323431, 0.5890471408725002, 0.15945972255087404, 0.1679712076751665, 0.13679414539225743, 0.41264566949553416, 0.16553518041961146, 0.15123222478659304, 0.1713792888405795, 0.45148905344771784, 0.4741393346033269, 0.8677127189510389, 0.8710805230233919, 0.8837512579052195, 0.8708544335729065, 0.8830055526018968, 0.9217707942923975, 0.8903108185754729, 0.9038571266995518, 0.9062311401398995, 0.3098132747507256, 0.28877685475064707, 0.30138309286723597, 0.3076597486670184, 0.26761987184897984, 0.32195084020821296, 0.1717660584887033, 0.18660611027998597, 0.27839910330324924, 0.6543085445520473, 0.676454400226388, 0.5561035470398652, 0.7457050319775509, 0.6549494836527975, 0.33196663924177394, 0.6820035791923336, 0.7192155869158263, 0.7471037502020932, 0.16256720566794847, 0.19896311696685065, 0.2748606652873543, 0.1883102340511098, 0.16213588014093416, 0.20365673164407905, 0.15418072993172138, 0.1729946145386233, 0.14863300398553914, 0.13246021658925367, 0.15543871072566762, 0.1392314983270444, 0.14751919094348465, 0.20435054873817993, 0.1993629971803751, 0.13298516937408855, 0.12840248462169512, 0.11290690328430597, 0.07395667427263342, 0.10294364301815806, 0.06296553002772176, 0.07145552835473445, 0.026582645522530757, 0.008155264757216396, 0.06133691476873937, 0.10703897382705985, 0.12295973084624168, 0.17500186918938399, 0.14915463122469697, 0.2516371930605914, 0.09582276738097206, 0.21327220318423845, 0.1545000053875163, 0.18861900824146882, 0.15994769762769578, 0.14422944777237368, 0.08008709064582109, 0.06708237450245702, 0.09265379245585226, 0.0845660089571475, 0.07968617882253837, 0.06625581380371948, 0.07552722457552807, 0.11199542291795483, 0.0941409081373511, 0.1775938802804674, 0.15176628766530142, 0.14996786639824655, 0.21159560044624093, 0.19066939835556018, 0.18716801012764395, 0.14024159358898047, 0.1988226810451833, 0.08682861036760947, 0.5353825847000608, 0.527255067240293, 0.6031928134374015, 0.4987004932802833, 0.5233298861595981, 0.48477586654201865, 0.5561702975787719, 0.540347405423104, 0.5376657790329669, 0.274940459098146, 0.15890424845256312, 0.11451409519872091, 0.13725965294710973, 0.1048094240285724, 0.12161775931797725, 0.13822296661310862, 0.1215267691689278, 0.11280590944596447, 0.20898830770413646, 0.1690672622282, 0.1948501860709696, 0.19269846695267812, 0.15169958371949777, 0.19862008097291095, 0.18079119151741252, 0.2293222332992677, 0.20675708993918096, 0.368481265647455, 0.38835957011429134, 0.42367679067732456, 0.35935216877437937, 0.38074469000632993, 0.3862581205770541, 0.42740862447373007, 0.4645559369535982, 0.482821348152616, 0.2712789919870603, 0.25682966455219725, 0.25177025832436195, 0.25300487954529205, 0.2686431975475436, 0.2284833807825305, 0.2960965595320878, 0.28396874137812134, 0.3050526199775574, 0.20339604071847195, 0.1978155673211751, 0.21966069356581153, 0.19938852923311068, 0.22185366697914244, 0.2320235133063855, 0.19121266540991033, 0.19819511154561376, 0.2000098144275868, 0.5770063213667567, 0.19713095017879112, 0.21291475690098538, 0.5822606527067358, 0.5073150970907279, 0.3661899546669183, 0.6130160024801777, 0.2280679143675175, 0.21682017269098086, 0.17785344074212828, 0.6506620923403263, 0.7520921181626954, 0.6253833091655182, 0.20111732763074652, 0.7653579385472628, 0.6602615695121166, 0.5839766496831977, 0.7515424932314403, 0.42507541576011754, 0.199071383724855, 0.4274599575353726, 0.27289280188897413, 0.204182253363433, 0.481247226650771, 0.5309335961401198, 0.28946496870998417, 0.20104985155318267, 0.18087940341120845, 0.1991505110650572, 0.18044526989082044, 0.19937227925997014, 0.18472023573761798, 0.18851857278527728, 0.19069335896140927, 0.1746705246575142, 0.19612374453280312, 0.0849012882318273, 0.08827193195396899, 0.07735334035919694, 0.08676754310849688, 0.07627436625478279, 0.07672729779464005, 0.08468983196999902, 0.0829973644055606, 0.08694481051709624]}, "mutation_prompt": null}
{"id": "b25b49ff-f42a-44c2-90bd-82246e286dd5", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small weighted random perturbation\n        perturbation = np.random.normal(0, 0.02, self.dim) * (1 - self.budget / (self.budget + 1))  # Weighted perturbation\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined local search scaling and weighted perturbation for improved convergence.", "configspace": "", "generation": 60, "fitness": 0.3316877331831891, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.7961565829576607, 0.8074840058682633, 0.8126569387432245, 0.7830510910309099, 0.8046936731949637, 0.813866965983265, 0.7851085187686182, 0.7814414138747242, 0.7920996737227527, 0.651048571818318, 0.6539531478082614, 0.6333990234537201, 0.6191074009517228, 0.6180547302777242, 0.6781765091593112, 0.648465386302248, 0.6443110462746962, 0.6630667268113422, 0.5987525982420769, 0.17238462558630507, 0.5306632754490834, 0.572325506312896, 0.5068480615112574, 0.5657636518729676, 0.5054951463307766, 0.16398163025545254, 0.563792167534027, 0.15661621675264636, 0.1632666251439543, 0.12394523543824276, 0.47438186160763085, 0.1694585338487361, 0.1476527655771428, 0.16733153798983535, 0.4338589918737348, 0.16819834877505402, 0.8703703773812231, 0.8765680825924603, 0.8695893362929944, 0.8456430227684003, 0.8817602841988641, 0.9213715633452465, 0.8910848626515832, 0.9042309505653634, 0.8804292972335711, 0.26322042096833176, 0.25273019550866205, 0.24434205173856494, 0.25220719494323374, 0.3087017018074366, 0.29348653523270063, 0.17613608023788274, 0.1783222073041124, 0.21783584042008075, 0.5966723988527893, 0.646961314550668, 0.6231509733891307, 0.6140928615677832, 0.6421796363316464, 0.5673914903904411, 0.7242692969742448, 0.6921590136810478, 0.6659003142064989, 0.1380753506229203, 0.2085696440776994, 0.1324960833608675, 0.1720515368808344, 0.19094447399273384, 0.18155143539891527, 0.15673633831661848, 0.12502614567285475, 0.13779858144753088, 0.13831923077342112, 0.13280076996437806, 0.12922007924985646, 0.15351501663720124, 0.15134077189448925, 0.15950836097983134, 0.23036811238984178, 0.14450986648891107, 0.14336626452046852, 0.1063788293733523, 0.09662868231790944, 0.05501888427199442, 0.024769563689798435, 0.08390320288481723, 0.06662087248914683, 0.05156365735838431, 0.044685010329895025, 0.07250793352964169, 0.2152033299462286, 0.11765218911361386, 0.24847594389801708, 0.06287030624310375, 0.1551886989358089, 0.22966354712884796, 0.17859100462118405, 0.13000844175789317, 0.18485474180148598, 0.10747690663116505, 0.039129632716855434, 0.09230544806573926, 0.10890709719394964, 0.11010820003549615, 0.07334432162715765, 0.07599666668484384, 0.11816259105028892, 0.1658072888080766, 0.12387231499711837, 0.17082538784355805, 0.1558849112759224, 0.20699767515644507, 0.19575382276216702, 0.23278712318740769, 0.15914651203814323, 0.17907815371071178, 0.09717296276298526, 0.49807571836766007, 0.5173462928785573, 0.5557730980173634, 0.525305237863762, 0.5134584411519278, 0.5218505716672202, 0.4839891729182437, 0.5261805279633792, 0.5363534373490345, 0.11343448941043988, 0.13958779704715762, 0.13594266160003976, 0.1337135841428848, 0.14727535838357397, 0.1272467885298112, 0.2049194440048936, 0.11685033745865281, 0.12194610749665247, 0.18343546972805502, 0.14424588874909183, 0.1999198388950254, 0.15382745021195132, 0.1616152471672463, 0.16080872753908204, 0.1871249083026082, 0.19650000994697447, 0.15820252880825103, 0.3781714790154892, 0.27446902203719925, 0.4045152337637621, 0.3905024467812781, 0.347240371048666, 0.4313604865765056, 0.4510358018028249, 0.46101164424347596, 0.41366662536888343, 0.2540831081233502, 0.2818240793657516, 0.24953495317669572, 0.24205626124994029, 0.3030625013349929, 0.24499050261267485, 0.2798793312847906, 0.30578155546267616, 0.2711751279939858, 0.19992048388599348, 0.1833838128556996, 0.22014116726365296, 0.21267255064780222, 0.2019937844527795, 0.2056241923416694, 0.19748014580534523, 0.19049491683103392, 0.19938200624104407, 0.584257227939675, 0.3451042900422302, 0.5428848435373654, 0.6073080678267415, 0.3630182665954881, 0.23842520294148728, 0.6265668896050371, 0.23243197141117067, 0.23183217873976092, 0.17748398913920627, 0.6124464784906464, 0.7123376889777404, 0.46162627427208125, 0.20232254630226854, 0.8032438726106047, 0.6705805890931288, 0.5327311363539313, 0.6904212175735812, 0.3649367242885906, 0.1992441521918904, 0.20172960573697385, 0.1996465458616854, 0.20421181946535005, 0.547092075438207, 0.5135948393811901, 0.4755977227945163, 0.20096765431906483, 0.1917970281141026, 0.18862814590084176, 0.17603991492464544, 0.18604237252570488, 0.18681532739241868, 0.17388372191580348, 0.17414214881587997, 0.18363504406203401, 0.17740590060863326, 0.08002628302419801, 0.08398823423211199, 0.07336216962666042, 0.08799453423989212, 0.08532860224234684, 0.09297982819175321, 0.08606656661899215, 0.08335359273146004, 0.09542894315722039]}, "mutation_prompt": null}
{"id": "2eb9078f-c496-48f2-88b6-4cce3a673c9c", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.02, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined local search scaling for improved convergence.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.7901515981392251, 0.8109564542824997, 0.823983883403354, 0.8078959353659622, 0.8039132680879147, 0.7991478010104747, 0.8044527385152666, 0.7800544923942474, 0.8129729764238944, 0.6225008384666069, 0.596479164286183, 0.6697692421032345, 0.673218701517774, 0.6453025826426018, 0.6818619259081896, 0.6449482598460416, 0.6560650015966856, 0.6778804019622324, 0.5758876666341368, 0.5264009368222926, 0.5747200903290176, 0.46375389093649677, 0.541256612089343, 0.5556562489593059, 0.5488903988140932, 0.1716656079323431, 0.5890471408725002, 0.15945972255087404, 0.1679712076751665, 0.13679414539225743, 0.41264566949553416, 0.16553518041961146, 0.15123222478659304, 0.1713792888405795, 0.45148905344771784, 0.4741393346033269, 0.8677127189510389, 0.8710805230233919, 0.8837512579052195, 0.8708544335729065, 0.8830055526018968, 0.9217707942923975, 0.8903108185754729, 0.9038571266995518, 0.9062311401398995, 0.3098132747507256, 0.28877685475064707, 0.30138309286723597, 0.3076597486670184, 0.26761987184897984, 0.32195084020821296, 0.1717660584887033, 0.18660611027998597, 0.27839910330324924, 0.6543085445520473, 0.676454400226388, 0.5561035470398652, 0.7457050319775509, 0.6549494836527975, 0.33196663924177394, 0.6820035791923336, 0.7192155869158263, 0.7471037502020932, 0.16256720566794847, 0.19896311696685065, 0.2748606652873543, 0.1883102340511098, 0.16213588014093416, 0.20365673164407905, 0.15418072993172138, 0.1729946145386233, 0.14863300398553914, 0.13246021658925367, 0.15543871072566762, 0.1392314983270444, 0.14751919094348465, 0.20435054873817993, 0.1993629971803751, 0.13298516937408855, 0.12840248462169512, 0.11290690328430597, 0.07395667427263342, 0.10294364301815806, 0.06296553002772176, 0.07145552835473445, 0.026582645522530757, 0.008155264757216396, 0.06133691476873937, 0.10703897382705985, 0.12295973084624168, 0.17500186918938399, 0.14915463122469697, 0.2516371930605914, 0.09582276738097206, 0.21327220318423845, 0.1545000053875163, 0.18861900824146882, 0.15994769762769578, 0.14422944777237368, 0.08008709064582109, 0.06708237450245702, 0.09265379245585226, 0.0845660089571475, 0.07968617882253837, 0.06625581380371948, 0.07552722457552807, 0.11199542291795483, 0.0941409081373511, 0.1775938802804674, 0.15176628766530142, 0.14996786639824655, 0.21159560044624093, 0.19066939835556018, 0.18716801012764395, 0.14024159358898047, 0.1988226810451833, 0.08682861036760947, 0.5353825847000608, 0.527255067240293, 0.6031928134374015, 0.4987004932802833, 0.5233298861595981, 0.48477586654201865, 0.5561702975787719, 0.540347405423104, 0.5376657790329669, 0.274940459098146, 0.15890424845256312, 0.11451409519872091, 0.13725965294710973, 0.1048094240285724, 0.12161775931797725, 0.13822296661310862, 0.1215267691689278, 0.11280590944596447, 0.20898830770413646, 0.1690672622282, 0.1948501860709696, 0.19269846695267812, 0.15169958371949777, 0.19862008097291095, 0.18079119151741252, 0.2293222332992677, 0.20675708993918096, 0.368481265647455, 0.38835957011429134, 0.42367679067732456, 0.35935216877437937, 0.38074469000632993, 0.3862581205770541, 0.42740862447373007, 0.4645559369535982, 0.482821348152616, 0.2712789919870603, 0.25682966455219725, 0.25177025832436195, 0.25300487954529205, 0.2686431975475436, 0.2284833807825305, 0.2960965595320878, 0.28396874137812134, 0.3050526199775574, 0.20339604071847195, 0.1978155673211751, 0.21966069356581153, 0.19938852923311068, 0.22185366697914244, 0.2320235133063855, 0.19121266540991033, 0.19819511154561376, 0.2000098144275868, 0.5770063213667567, 0.19713095017879112, 0.21291475690098538, 0.5822606527067358, 0.5073150970907279, 0.3661899546669183, 0.6130160024801777, 0.2280679143675175, 0.21682017269098086, 0.17785344074212828, 0.6506620923403263, 0.7520921181626954, 0.6253833091655182, 0.20111732763074652, 0.7653579385472628, 0.6602615695121166, 0.5839766496831977, 0.7515424932314403, 0.42507541576011754, 0.199071383724855, 0.4274599575353726, 0.27289280188897413, 0.204182253363433, 0.481247226650771, 0.5309335961401198, 0.28946496870998417, 0.20104985155318267, 0.18087940341120845, 0.1991505110650572, 0.18044526989082044, 0.19937227925997014, 0.18472023573761798, 0.18851857278527728, 0.19069335896140927, 0.1746705246575142, 0.19612374453280312, 0.0849012882318273, 0.08827193195396899, 0.07735334035919694, 0.08676754310849688, 0.07627436625478279, 0.07672729779464005, 0.08468983196999902, 0.0829973644055606, 0.08694481051709624]}, "mutation_prompt": null}
{"id": "2454e264-aa60-4b14-a82d-ad48ee2966b1", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.02, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined local search scaling for improved convergence.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.7901515981392251, 0.8109564542824997, 0.823983883403354, 0.8078959353659622, 0.8039132680879147, 0.7991478010104747, 0.8044527385152666, 0.7800544923942474, 0.8129729764238944, 0.6225008384666069, 0.596479164286183, 0.6697692421032345, 0.673218701517774, 0.6453025826426018, 0.6818619259081896, 0.6449482598460416, 0.6560650015966856, 0.6778804019622324, 0.5758876666341368, 0.5264009368222926, 0.5747200903290176, 0.46375389093649677, 0.541256612089343, 0.5556562489593059, 0.5488903988140932, 0.1716656079323431, 0.5890471408725002, 0.15945972255087404, 0.1679712076751665, 0.13679414539225743, 0.41264566949553416, 0.16553518041961146, 0.15123222478659304, 0.1713792888405795, 0.45148905344771784, 0.4741393346033269, 0.8677127189510389, 0.8710805230233919, 0.8837512579052195, 0.8708544335729065, 0.8830055526018968, 0.9217707942923975, 0.8903108185754729, 0.9038571266995518, 0.9062311401398995, 0.3098132747507256, 0.28877685475064707, 0.30138309286723597, 0.3076597486670184, 0.26761987184897984, 0.32195084020821296, 0.1717660584887033, 0.18660611027998597, 0.27839910330324924, 0.6543085445520473, 0.676454400226388, 0.5561035470398652, 0.7457050319775509, 0.6549494836527975, 0.33196663924177394, 0.6820035791923336, 0.7192155869158263, 0.7471037502020932, 0.16256720566794847, 0.19896311696685065, 0.2748606652873543, 0.1883102340511098, 0.16213588014093416, 0.20365673164407905, 0.15418072993172138, 0.1729946145386233, 0.14863300398553914, 0.13246021658925367, 0.15543871072566762, 0.1392314983270444, 0.14751919094348465, 0.20435054873817993, 0.1993629971803751, 0.13298516937408855, 0.12840248462169512, 0.11290690328430597, 0.07395667427263342, 0.10294364301815806, 0.06296553002772176, 0.07145552835473445, 0.026582645522530757, 0.008155264757216396, 0.06133691476873937, 0.10703897382705985, 0.12295973084624168, 0.17500186918938399, 0.14915463122469697, 0.2516371930605914, 0.09582276738097206, 0.21327220318423845, 0.1545000053875163, 0.18861900824146882, 0.15994769762769578, 0.14422944777237368, 0.08008709064582109, 0.06708237450245702, 0.09265379245585226, 0.0845660089571475, 0.07968617882253837, 0.06625581380371948, 0.07552722457552807, 0.11199542291795483, 0.0941409081373511, 0.1775938802804674, 0.15176628766530142, 0.14996786639824655, 0.21159560044624093, 0.19066939835556018, 0.18716801012764395, 0.14024159358898047, 0.1988226810451833, 0.08682861036760947, 0.5353825847000608, 0.527255067240293, 0.6031928134374015, 0.4987004932802833, 0.5233298861595981, 0.48477586654201865, 0.5561702975787719, 0.540347405423104, 0.5376657790329669, 0.274940459098146, 0.15890424845256312, 0.11451409519872091, 0.13725965294710973, 0.1048094240285724, 0.12161775931797725, 0.13822296661310862, 0.1215267691689278, 0.11280590944596447, 0.20898830770413646, 0.1690672622282, 0.1948501860709696, 0.19269846695267812, 0.15169958371949777, 0.19862008097291095, 0.18079119151741252, 0.2293222332992677, 0.20675708993918096, 0.368481265647455, 0.38835957011429134, 0.42367679067732456, 0.35935216877437937, 0.38074469000632993, 0.3862581205770541, 0.42740862447373007, 0.4645559369535982, 0.482821348152616, 0.2712789919870603, 0.25682966455219725, 0.25177025832436195, 0.25300487954529205, 0.2686431975475436, 0.2284833807825305, 0.2960965595320878, 0.28396874137812134, 0.3050526199775574, 0.20339604071847195, 0.1978155673211751, 0.21966069356581153, 0.19938852923311068, 0.22185366697914244, 0.2320235133063855, 0.19121266540991033, 0.19819511154561376, 0.2000098144275868, 0.5770063213667567, 0.19713095017879112, 0.21291475690098538, 0.5822606527067358, 0.5073150970907279, 0.3661899546669183, 0.6130160024801777, 0.2280679143675175, 0.21682017269098086, 0.17785344074212828, 0.6506620923403263, 0.7520921181626954, 0.6253833091655182, 0.20111732763074652, 0.7653579385472628, 0.6602615695121166, 0.5839766496831977, 0.7515424932314403, 0.42507541576011754, 0.199071383724855, 0.4274599575353726, 0.27289280188897413, 0.204182253363433, 0.481247226650771, 0.5309335961401198, 0.28946496870998417, 0.20104985155318267, 0.18087940341120845, 0.1991505110650572, 0.18044526989082044, 0.19937227925997014, 0.18472023573761798, 0.18851857278527728, 0.19069335896140927, 0.1746705246575142, 0.19612374453280312, 0.0849012882318273, 0.08827193195396899, 0.07735334035919694, 0.08676754310849688, 0.07627436625478279, 0.07672729779464005, 0.08468983196999902, 0.0829973644055606, 0.08694481051709624]}, "mutation_prompt": null}
{"id": "b5e363e7-dd67-48cd-9e80-2c1d168da07f", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.02, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined local search scaling for improved convergence.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.7901515981392251, 0.8109564542824997, 0.823983883403354, 0.8078959353659622, 0.8039132680879147, 0.7991478010104747, 0.8044527385152666, 0.7800544923942474, 0.8129729764238944, 0.6225008384666069, 0.596479164286183, 0.6697692421032345, 0.673218701517774, 0.6453025826426018, 0.6818619259081896, 0.6449482598460416, 0.6560650015966856, 0.6778804019622324, 0.5758876666341368, 0.5264009368222926, 0.5747200903290176, 0.46375389093649677, 0.541256612089343, 0.5556562489593059, 0.5488903988140932, 0.1716656079323431, 0.5890471408725002, 0.15945972255087404, 0.1679712076751665, 0.13679414539225743, 0.41264566949553416, 0.16553518041961146, 0.15123222478659304, 0.1713792888405795, 0.45148905344771784, 0.4741393346033269, 0.8677127189510389, 0.8710805230233919, 0.8837512579052195, 0.8708544335729065, 0.8830055526018968, 0.9217707942923975, 0.8903108185754729, 0.9038571266995518, 0.9062311401398995, 0.3098132747507256, 0.28877685475064707, 0.30138309286723597, 0.3076597486670184, 0.26761987184897984, 0.32195084020821296, 0.1717660584887033, 0.18660611027998597, 0.27839910330324924, 0.6543085445520473, 0.676454400226388, 0.5561035470398652, 0.7457050319775509, 0.6549494836527975, 0.33196663924177394, 0.6820035791923336, 0.7192155869158263, 0.7471037502020932, 0.16256720566794847, 0.19896311696685065, 0.2748606652873543, 0.1883102340511098, 0.16213588014093416, 0.20365673164407905, 0.15418072993172138, 0.1729946145386233, 0.14863300398553914, 0.13246021658925367, 0.15543871072566762, 0.1392314983270444, 0.14751919094348465, 0.20435054873817993, 0.1993629971803751, 0.13298516937408855, 0.12840248462169512, 0.11290690328430597, 0.07395667427263342, 0.10294364301815806, 0.06296553002772176, 0.07145552835473445, 0.026582645522530757, 0.008155264757216396, 0.06133691476873937, 0.10703897382705985, 0.12295973084624168, 0.17500186918938399, 0.14915463122469697, 0.2516371930605914, 0.09582276738097206, 0.21327220318423845, 0.1545000053875163, 0.18861900824146882, 0.15994769762769578, 0.14422944777237368, 0.08008709064582109, 0.06708237450245702, 0.09265379245585226, 0.0845660089571475, 0.07968617882253837, 0.06625581380371948, 0.07552722457552807, 0.11199542291795483, 0.0941409081373511, 0.1775938802804674, 0.15176628766530142, 0.14996786639824655, 0.21159560044624093, 0.19066939835556018, 0.18716801012764395, 0.14024159358898047, 0.1988226810451833, 0.08682861036760947, 0.5353825847000608, 0.527255067240293, 0.6031928134374015, 0.4987004932802833, 0.5233298861595981, 0.48477586654201865, 0.5561702975787719, 0.540347405423104, 0.5376657790329669, 0.274940459098146, 0.15890424845256312, 0.11451409519872091, 0.13725965294710973, 0.1048094240285724, 0.12161775931797725, 0.13822296661310862, 0.1215267691689278, 0.11280590944596447, 0.20898830770413646, 0.1690672622282, 0.1948501860709696, 0.19269846695267812, 0.15169958371949777, 0.19862008097291095, 0.18079119151741252, 0.2293222332992677, 0.20675708993918096, 0.368481265647455, 0.38835957011429134, 0.42367679067732456, 0.35935216877437937, 0.38074469000632993, 0.3862581205770541, 0.42740862447373007, 0.4645559369535982, 0.482821348152616, 0.2712789919870603, 0.25682966455219725, 0.25177025832436195, 0.25300487954529205, 0.2686431975475436, 0.2284833807825305, 0.2960965595320878, 0.28396874137812134, 0.3050526199775574, 0.20339604071847195, 0.1978155673211751, 0.21966069356581153, 0.19938852923311068, 0.22185366697914244, 0.2320235133063855, 0.19121266540991033, 0.19819511154561376, 0.2000098144275868, 0.5770063213667567, 0.19713095017879112, 0.21291475690098538, 0.5822606527067358, 0.5073150970907279, 0.3661899546669183, 0.6130160024801777, 0.2280679143675175, 0.21682017269098086, 0.17785344074212828, 0.6506620923403263, 0.7520921181626954, 0.6253833091655182, 0.20111732763074652, 0.7653579385472628, 0.6602615695121166, 0.5839766496831977, 0.7515424932314403, 0.42507541576011754, 0.199071383724855, 0.4274599575353726, 0.27289280188897413, 0.204182253363433, 0.481247226650771, 0.5309335961401198, 0.28946496870998417, 0.20104985155318267, 0.18087940341120845, 0.1991505110650572, 0.18044526989082044, 0.19937227925997014, 0.18472023573761798, 0.18851857278527728, 0.19069335896140927, 0.1746705246575142, 0.19612374453280312, 0.0849012882318273, 0.08827193195396899, 0.07735334035919694, 0.08676754310849688, 0.07627436625478279, 0.07672729779464005, 0.08468983196999902, 0.0829973644055606, 0.08694481051709624]}, "mutation_prompt": null}
{"id": "1d7c8b40-ae98-4baa-99ff-b823a9f4e8fa", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                # Weighted combination of current and best solution\n                weighted_vector = 0.7 * self.pop[i] + 0.3 * self.best_solution\n                mutant_vector = weighted_vector + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.02, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved mutation strategy using a weighted combination of current and best solutions to enhance convergence.", "configspace": "", "generation": 64, "fitness": 0.2695926900018395, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.8186199920058794, 0.819436425546901, 0.8308933535957946, 0.8089608868950302, 0.8234219814643657, 0.8092573192914443, 0.8243670337576998, 0.7745851491810406, 0.6119872709740394, 0.09327361635863585, 0.07703830331141148, 9.999999999998899e-05, 0.07698836437842216, 0.1512997549334254, 0.10433362311276162, 0.020355136526230333, 0.25972399862086415, 9.999999999998899e-05, 0.13498408749141744, 0.21337065471966477, 0.1274005842598963, 0.1384374100837753, 0.1150225549182261, 0.12651233663696204, 0.106407323236971, 0.12091442966432953, 0.16668292532058548, 0.12389012358314044, 0.12066964385778722, 0.10278343456839889, 0.11577156776029673, 0.10354200437088623, 0.10925172714423115, 0.11026653177257995, 0.12049463564030993, 0.10371474250568624, 0.1547906952584993, 0.10893249830171503, 0.1921595893821204, 0.1258556254442077, 0.12339674076055418, 0.14002831995485543, 0.1388271083612138, 0.8197906785260192, 0.5203993989207072, 0.32378948222705906, 0.18079411938583378, 0.38683761067893574, 0.41293044677079926, 0.3639470590697911, 0.29228538826571016, 0.27202429172749365, 0.16781811208172626, 0.35890954231009364, 0.8274122890929533, 0.8809798806889012, 0.810048877256733, 0.26997270459336775, 0.8269804559294249, 0.5812435324688883, 0.6106253162616285, 0.7990513750946703, 0.6282290551843925, 0.28101668551656633, 0.12691472323884778, 0.15454724956982846, 0.16317087729759527, 0.18308582993386657, 0.17162957349600216, 0.18832462808537132, 0.44485707111347006, 0.155648999828776, 0.14274834645980283, 0.17383602439291257, 0.15476714240448397, 0.16199485922320778, 0.1416006221236008, 0.1464444635400337, 0.20917534988780295, 0.21363691161844567, 0.1519096796319036, 0.15899299885686546, 0.11031674626653476, 0.07630567936845944, 0.18987000206062155, 0.17088321417587304, 0.0857244078486441, 0.038789382893432034, 0.07106920077237078, 0.023371903766637114, 0.21185459755463454, 0.14829871081358814, 0.30561462645960236, 0.18746822448717748, 0.08574648767003856, 0.14970783420145195, 0.38220497724349667, 0.2109116461297904, 0.4147636703518227, 0.11522807405146474, 0.09894150790446332, 0.13060325619297652, 0.1374043698292906, 0.12712789885213183, 0.1945397588287585, 0.18920387421620877, 0.08151162951247282, 0.14200711398859855, 0.11662128195209465, 0.2207247558852634, 0.08193176999913487, 0.040626898689600566, 0.15752183778761686, 0.161880023916541, 0.3242718209903984, 0.11229937433765169, 0.1191096211204753, 0.49575646747089674, 0.5721382989628321, 0.6877524425361251, 0.4390480756312539, 0.43338326935774707, 0.5173653107356586, 0.6657161372004348, 0.6293228857980202, 0.609730286897781, 0.08058138148561134, 0.10992709382048638, 0.08340564432230935, 0.11618998265432978, 0.11735145107752254, 0.13252180459940832, 0.11774176816416071, 0.14263032542313536, 0.12489811878168056, 0.15482307048770894, 0.18017645419516015, 0.17507911878841131, 0.18260105168144547, 0.1601910206398588, 0.17188195399456818, 0.1755304014584531, 0.15006331402962347, 0.17727547046544145, 0.35487724055037584, 0.34274400936072047, 0.37242917933458497, 0.3737086068230314, 0.3452738350600365, 0.374479568087964, 0.23939110495713667, 0.36335426608901145, 0.3673344759924294, 0.2726063184003794, 0.22845869774052086, 0.29319714667534813, 0.3013372491299634, 0.2926917606798254, 0.31290067886562145, 0.21646078752816433, 0.2246093732567659, 0.2172915894421582, 0.23676668103645737, 0.274078230361645, 0.20797833297553292, 0.20956181487640257, 0.21080513323349526, 0.24197061096500871, 0.20495230229167605, 0.2034285499543983, 0.20853492125262074, 0.18613997219873768, 0.19959840381766447, 0.18077154803092776, 0.19651418980333535, 0.21469772398234543, 0.20338604951278416, 0.20936069740600827, 0.24536557231858191, 0.18410870411888192, 0.7171881823430372, 0.19025945432610647, 0.1817580774048997, 0.7781390602100242, 0.451247408227887, 0.683668120612207, 0.5760793549818408, 0.5528894102114055, 0.5381194811561375, 0.6915085652496706, 0.2623607205712236, 0.6172296307639566, 0.522678187014909, 0.2645499700323126, 0.338495445386492, 0.29957089286649563, 0.41840529310534413, 0.2979175647926351, 0.19157491668177884, 0.17786082606215714, 0.18848281233484676, 0.17283631236210006, 0.1864926376406243, 0.17988937421430162, 0.20092397373444515, 0.1874547430962269, 0.17601541183142966, 0.0891518227305802, 0.07871985903992429, 0.09549291644954772, 0.0889051100954773, 0.09378310573366655, 0.1275166856728196, 0.08106375843111469, 0.08708837950584403, 0.1107783109271615]}, "mutation_prompt": null}
{"id": "3b3b2ebc-2cfe-4864-8f51-c36e5e431c29", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.02, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined local search scaling for improved convergence.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.7901515981392251, 0.8109564542824997, 0.823983883403354, 0.8078959353659622, 0.8039132680879147, 0.7991478010104747, 0.8044527385152666, 0.7800544923942474, 0.8129729764238944, 0.6225008384666069, 0.596479164286183, 0.6697692421032345, 0.673218701517774, 0.6453025826426018, 0.6818619259081896, 0.6449482598460416, 0.6560650015966856, 0.6778804019622324, 0.5758876666341368, 0.5264009368222926, 0.5747200903290176, 0.46375389093649677, 0.541256612089343, 0.5556562489593059, 0.5488903988140932, 0.1716656079323431, 0.5890471408725002, 0.15945972255087404, 0.1679712076751665, 0.13679414539225743, 0.41264566949553416, 0.16553518041961146, 0.15123222478659304, 0.1713792888405795, 0.45148905344771784, 0.4741393346033269, 0.8677127189510389, 0.8710805230233919, 0.8837512579052195, 0.8708544335729065, 0.8830055526018968, 0.9217707942923975, 0.8903108185754729, 0.9038571266995518, 0.9062311401398995, 0.3098132747507256, 0.28877685475064707, 0.30138309286723597, 0.3076597486670184, 0.26761987184897984, 0.32195084020821296, 0.1717660584887033, 0.18660611027998597, 0.27839910330324924, 0.6543085445520473, 0.676454400226388, 0.5561035470398652, 0.7457050319775509, 0.6549494836527975, 0.33196663924177394, 0.6820035791923336, 0.7192155869158263, 0.7471037502020932, 0.16256720566794847, 0.19896311696685065, 0.2748606652873543, 0.1883102340511098, 0.16213588014093416, 0.20365673164407905, 0.15418072993172138, 0.1729946145386233, 0.14863300398553914, 0.13246021658925367, 0.15543871072566762, 0.1392314983270444, 0.14751919094348465, 0.20435054873817993, 0.1993629971803751, 0.13298516937408855, 0.12840248462169512, 0.11290690328430597, 0.07395667427263342, 0.10294364301815806, 0.06296553002772176, 0.07145552835473445, 0.026582645522530757, 0.008155264757216396, 0.06133691476873937, 0.10703897382705985, 0.12295973084624168, 0.17500186918938399, 0.14915463122469697, 0.2516371930605914, 0.09582276738097206, 0.21327220318423845, 0.1545000053875163, 0.18861900824146882, 0.15994769762769578, 0.14422944777237368, 0.08008709064582109, 0.06708237450245702, 0.09265379245585226, 0.0845660089571475, 0.07968617882253837, 0.06625581380371948, 0.07552722457552807, 0.11199542291795483, 0.0941409081373511, 0.1775938802804674, 0.15176628766530142, 0.14996786639824655, 0.21159560044624093, 0.19066939835556018, 0.18716801012764395, 0.14024159358898047, 0.1988226810451833, 0.08682861036760947, 0.5353825847000608, 0.527255067240293, 0.6031928134374015, 0.4987004932802833, 0.5233298861595981, 0.48477586654201865, 0.5561702975787719, 0.540347405423104, 0.5376657790329669, 0.274940459098146, 0.15890424845256312, 0.11451409519872091, 0.13725965294710973, 0.1048094240285724, 0.12161775931797725, 0.13822296661310862, 0.1215267691689278, 0.11280590944596447, 0.20898830770413646, 0.1690672622282, 0.1948501860709696, 0.19269846695267812, 0.15169958371949777, 0.19862008097291095, 0.18079119151741252, 0.2293222332992677, 0.20675708993918096, 0.368481265647455, 0.38835957011429134, 0.42367679067732456, 0.35935216877437937, 0.38074469000632993, 0.3862581205770541, 0.42740862447373007, 0.4645559369535982, 0.482821348152616, 0.2712789919870603, 0.25682966455219725, 0.25177025832436195, 0.25300487954529205, 0.2686431975475436, 0.2284833807825305, 0.2960965595320878, 0.28396874137812134, 0.3050526199775574, 0.20339604071847195, 0.1978155673211751, 0.21966069356581153, 0.19938852923311068, 0.22185366697914244, 0.2320235133063855, 0.19121266540991033, 0.19819511154561376, 0.2000098144275868, 0.5770063213667567, 0.19713095017879112, 0.21291475690098538, 0.5822606527067358, 0.5073150970907279, 0.3661899546669183, 0.6130160024801777, 0.2280679143675175, 0.21682017269098086, 0.17785344074212828, 0.6506620923403263, 0.7520921181626954, 0.6253833091655182, 0.20111732763074652, 0.7653579385472628, 0.6602615695121166, 0.5839766496831977, 0.7515424932314403, 0.42507541576011754, 0.199071383724855, 0.4274599575353726, 0.27289280188897413, 0.204182253363433, 0.481247226650771, 0.5309335961401198, 0.28946496870998417, 0.20104985155318267, 0.18087940341120845, 0.1991505110650572, 0.18044526989082044, 0.19937227925997014, 0.18472023573761798, 0.18851857278527728, 0.19069335896140927, 0.1746705246575142, 0.19612374453280312, 0.0849012882318273, 0.08827193195396899, 0.07735334035919694, 0.08676754310849688, 0.07627436625478279, 0.07672729779464005, 0.08468983196999902, 0.0829973644055606, 0.08694481051709624]}, "mutation_prompt": null}
{"id": "aa66616a-d3ac-4885-bcf8-cd6c63f45ef6", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Enhanced local search with adaptive step size variance\n        adaptive_variance = 0.02 * (1 - len(self.pop) / self.population_size)\n        perturbation = np.random.normal(0, adaptive_variance, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved local search by enhancing exploration with adaptive step size variance.", "configspace": "", "generation": 66, "fitness": 0.3301540014072702, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.7962640724749619, 0.8068850704079743, 0.8131336242144025, 0.7823845205908496, 0.8047144672336448, 0.8135146591617181, 0.7909701204248503, 0.7820346542598289, 0.7926792309429771, 0.6286713493778234, 0.6620814964470834, 0.6197134920686365, 0.6228076281093632, 0.6171864668325142, 0.6721467165915054, 0.6499833194698512, 0.6420243818393454, 0.6545949817628771, 0.5888285938950983, 0.17238500375781163, 0.5364048141510708, 0.5788017290105767, 0.50244774631409, 0.5615852974758413, 0.4966029617456573, 0.1639818434947361, 0.563451413125749, 0.15661656548376868, 0.16326699256278387, 0.12394517764227042, 0.16665901615268564, 0.1694587924833988, 0.14765237110486473, 0.16733243484286253, 0.4227505820606404, 0.16819838304101598, 0.8703696982811403, 0.8765700456730252, 0.8695888795331649, 0.8455936655025711, 0.881760269194943, 0.9213715242456886, 0.8910848569871035, 0.904230977435265, 0.8827268346191917, 0.26318740203082447, 0.2543062172782997, 0.2454617693332094, 0.25154394754862397, 0.3056041159930045, 0.2880267229931589, 0.17620799583325586, 0.17808599894744037, 0.21783097719139266, 0.5966723988527893, 0.646961314550668, 0.6231509733891307, 0.6140928615677832, 0.6421796363316464, 0.5673914903904411, 0.7242692969742448, 0.6921590136810478, 0.6659003142064989, 0.13802188339277877, 0.2085463800216314, 0.13249720095565587, 0.1724035283169093, 0.19093102057514055, 0.18155259231876686, 0.1563659163676141, 0.12502528686978187, 0.1404555022348244, 0.13831168708731623, 0.13283231522730365, 0.12925777269864447, 0.154378430878501, 0.1513622620127959, 0.15946411288205076, 0.2304424582814737, 0.144278576412316, 0.14328786671876426, 0.10637278480737755, 0.09662886462698794, 0.05501810898913406, 0.02477470254850267, 0.08314551495407174, 0.06660333253078876, 0.0515704946179365, 0.044680082596187054, 0.07263006773631675, 0.21684000278809057, 0.11765410045968439, 0.24854286369406575, 0.06285163635748103, 0.1551964282966075, 0.2292611142712614, 0.1787289005814071, 0.13025086387720897, 0.18933154758100024, 0.11885459884187699, 0.03935913770759503, 0.09241748780124359, 0.10921473874967846, 0.11008609443380124, 0.07333877964904645, 0.07596116248686413, 0.1179942575595544, 0.1661789115402469, 0.11249414191453799, 0.1708487878753282, 0.15588541142653634, 0.20514113679098334, 0.19829871515418152, 0.2291688337755865, 0.15829870775092436, 0.1790822170057016, 0.09893673963084859, 0.5014209328222174, 0.5114503322791799, 0.5602206144963375, 0.5274086176049178, 0.5170752913187266, 0.518260047614985, 0.4746185398134183, 0.5332366167087974, 0.519024290351672, 0.11702356307899375, 0.13958754186450206, 0.13594243562551733, 0.13371258336642988, 0.14727585718312097, 0.12724663164549876, 0.20488884820383668, 0.11684990829951125, 0.12194624686012334, 0.18346654341154434, 0.1442392926089585, 0.19993152126806968, 0.15380952835233042, 0.16162589198459043, 0.1608154511788552, 0.18571980962658374, 0.19650033369475217, 0.15819265130327154, 0.3802424871795712, 0.2745633834024471, 0.4023535592145797, 0.41324322821720894, 0.36453918277315567, 0.4488033113218457, 0.44309987166373344, 0.4572343752029605, 0.4154941671057574, 0.254068100660655, 0.2819813255868878, 0.24988540103076784, 0.24225917759500848, 0.306975518125183, 0.24550517972280117, 0.2741146359252079, 0.31519298822660413, 0.26759958012389373, 0.19991904031397145, 0.18333328443176966, 0.22012365138766699, 0.21263525309436604, 0.18559690984504118, 0.20343604523144954, 0.19750415142192046, 0.19040914225313021, 0.20655588428138716, 0.5818102397026987, 0.3428051604125445, 0.5428851855917916, 0.6054227630373891, 0.36285693509958405, 0.23842536648055235, 0.6289777243335599, 0.2324318651748679, 0.23183226946767432, 0.17748395872964962, 0.6124445217137349, 0.7123385048820716, 0.4615863922655965, 0.20232255950610156, 0.8032454575759842, 0.6704380406811506, 0.5350848433443196, 0.69008491497764, 0.36494177444650566, 0.19924438665424637, 0.20172949874860147, 0.1996464872058018, 0.20421182219079737, 0.5470777308953374, 0.5148095823127528, 0.4836270859918529, 0.20096765747674394, 0.19178901140725957, 0.18859531671843144, 0.17603152556499735, 0.1860288158934158, 0.1868154455240053, 0.1738821517703869, 0.1741283859475723, 0.1836360828608079, 0.17739894422399083, 0.08002675236639589, 0.08398758484397006, 0.0733627169734633, 0.08799520464542987, 0.0853298453953879, 0.0929763604689331, 0.08606399626795647, 0.08334955636305186, 0.0954298861480376]}, "mutation_prompt": null}
{"id": "6b5f7730-8947-4861-9f87-5a365d2309e3", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.02, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined local search scaling for improved convergence.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.7901515981392251, 0.8109564542824997, 0.823983883403354, 0.8078959353659622, 0.8039132680879147, 0.7991478010104747, 0.8044527385152666, 0.7800544923942474, 0.8129729764238944, 0.6225008384666069, 0.596479164286183, 0.6697692421032345, 0.673218701517774, 0.6453025826426018, 0.6818619259081896, 0.6449482598460416, 0.6560650015966856, 0.6778804019622324, 0.5758876666341368, 0.5264009368222926, 0.5747200903290176, 0.46375389093649677, 0.541256612089343, 0.5556562489593059, 0.5488903988140932, 0.1716656079323431, 0.5890471408725002, 0.15945972255087404, 0.1679712076751665, 0.13679414539225743, 0.41264566949553416, 0.16553518041961146, 0.15123222478659304, 0.1713792888405795, 0.45148905344771784, 0.4741393346033269, 0.8677127189510389, 0.8710805230233919, 0.8837512579052195, 0.8708544335729065, 0.8830055526018968, 0.9217707942923975, 0.8903108185754729, 0.9038571266995518, 0.9062311401398995, 0.3098132747507256, 0.28877685475064707, 0.30138309286723597, 0.3076597486670184, 0.26761987184897984, 0.32195084020821296, 0.1717660584887033, 0.18660611027998597, 0.27839910330324924, 0.6543085445520473, 0.676454400226388, 0.5561035470398652, 0.7457050319775509, 0.6549494836527975, 0.33196663924177394, 0.6820035791923336, 0.7192155869158263, 0.7471037502020932, 0.16256720566794847, 0.19896311696685065, 0.2748606652873543, 0.1883102340511098, 0.16213588014093416, 0.20365673164407905, 0.15418072993172138, 0.1729946145386233, 0.14863300398553914, 0.13246021658925367, 0.15543871072566762, 0.1392314983270444, 0.14751919094348465, 0.20435054873817993, 0.1993629971803751, 0.13298516937408855, 0.12840248462169512, 0.11290690328430597, 0.07395667427263342, 0.10294364301815806, 0.06296553002772176, 0.07145552835473445, 0.026582645522530757, 0.008155264757216396, 0.06133691476873937, 0.10703897382705985, 0.12295973084624168, 0.17500186918938399, 0.14915463122469697, 0.2516371930605914, 0.09582276738097206, 0.21327220318423845, 0.1545000053875163, 0.18861900824146882, 0.15994769762769578, 0.14422944777237368, 0.08008709064582109, 0.06708237450245702, 0.09265379245585226, 0.0845660089571475, 0.07968617882253837, 0.06625581380371948, 0.07552722457552807, 0.11199542291795483, 0.0941409081373511, 0.1775938802804674, 0.15176628766530142, 0.14996786639824655, 0.21159560044624093, 0.19066939835556018, 0.18716801012764395, 0.14024159358898047, 0.1988226810451833, 0.08682861036760947, 0.5353825847000608, 0.527255067240293, 0.6031928134374015, 0.4987004932802833, 0.5233298861595981, 0.48477586654201865, 0.5561702975787719, 0.540347405423104, 0.5376657790329669, 0.274940459098146, 0.15890424845256312, 0.11451409519872091, 0.13725965294710973, 0.1048094240285724, 0.12161775931797725, 0.13822296661310862, 0.1215267691689278, 0.11280590944596447, 0.20898830770413646, 0.1690672622282, 0.1948501860709696, 0.19269846695267812, 0.15169958371949777, 0.19862008097291095, 0.18079119151741252, 0.2293222332992677, 0.20675708993918096, 0.368481265647455, 0.38835957011429134, 0.42367679067732456, 0.35935216877437937, 0.38074469000632993, 0.3862581205770541, 0.42740862447373007, 0.4645559369535982, 0.482821348152616, 0.2712789919870603, 0.25682966455219725, 0.25177025832436195, 0.25300487954529205, 0.2686431975475436, 0.2284833807825305, 0.2960965595320878, 0.28396874137812134, 0.3050526199775574, 0.20339604071847195, 0.1978155673211751, 0.21966069356581153, 0.19938852923311068, 0.22185366697914244, 0.2320235133063855, 0.19121266540991033, 0.19819511154561376, 0.2000098144275868, 0.5770063213667567, 0.19713095017879112, 0.21291475690098538, 0.5822606527067358, 0.5073150970907279, 0.3661899546669183, 0.6130160024801777, 0.2280679143675175, 0.21682017269098086, 0.17785344074212828, 0.6506620923403263, 0.7520921181626954, 0.6253833091655182, 0.20111732763074652, 0.7653579385472628, 0.6602615695121166, 0.5839766496831977, 0.7515424932314403, 0.42507541576011754, 0.199071383724855, 0.4274599575353726, 0.27289280188897413, 0.204182253363433, 0.481247226650771, 0.5309335961401198, 0.28946496870998417, 0.20104985155318267, 0.18087940341120845, 0.1991505110650572, 0.18044526989082044, 0.19937227925997014, 0.18472023573761798, 0.18851857278527728, 0.19069335896140927, 0.1746705246575142, 0.19612374453280312, 0.0849012882318273, 0.08827193195396899, 0.07735334035919694, 0.08676754310849688, 0.07627436625478279, 0.07672729779464005, 0.08468983196999902, 0.0829973644055606, 0.08694481051709624]}, "mutation_prompt": null}
{"id": "fd9f5d48-2ba6-44a1-9024-141904628a36", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.02, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced adaptive parameter scaling for improved search efficiency.", "configspace": "", "generation": 68, "fitness": 0.3402751579967883, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.7901515981392251, 0.8109564542824997, 0.823983883403354, 0.8078959353659622, 0.8039132680879147, 0.7991478010104747, 0.8044527385152666, 0.7800544923942474, 0.8129729764238944, 0.6225008384666069, 0.596479164286183, 0.6697692421032345, 0.673218701517774, 0.6453025826426018, 0.6818619259081896, 0.6449482598460416, 0.6560650015966856, 0.6778804019622324, 0.5758876666341368, 0.5264009368222926, 0.5747200903290176, 0.46375389093649677, 0.541256612089343, 0.5556562489593059, 0.5488903988140932, 0.1716656079323431, 0.5890471408725002, 0.15945972255087404, 0.1679712076751665, 0.13679414539225743, 0.41264566949553416, 0.16553518041961146, 0.15123222478659304, 0.1713792888405795, 0.45148905344771784, 0.4741393346033269, 0.8677127189510389, 0.8710805230233919, 0.8837512579052195, 0.8708544335729065, 0.8830055526018968, 0.9217707942923975, 0.8903108185754729, 0.9038571266995518, 0.9062311401398995, 0.3098132747507256, 0.28877685475064707, 0.30138309286723597, 0.3076597486670184, 0.26761987184897984, 0.32195084020821296, 0.1717660584887033, 0.18660611027998597, 0.27839910330324924, 0.6543085445520473, 0.676454400226388, 0.5561035470398652, 0.7457050319775509, 0.6549494836527975, 0.33196663924177394, 0.6820035791923336, 0.7192155869158263, 0.7471037502020932, 0.16256720566794847, 0.19896311696685065, 0.2748606652873543, 0.1883102340511098, 0.16213588014093416, 0.20365673164407905, 0.15418072993172138, 0.1729946145386233, 0.14863300398553914, 0.13246021658925367, 0.15543871072566762, 0.1392314983270444, 0.14751919094348465, 0.20435054873817993, 0.1993629971803751, 0.13298516937408855, 0.12840248462169512, 0.11290690328430597, 0.07395667427263342, 0.10294364301815806, 0.06296553002772176, 0.07145552835473445, 0.026582645522530757, 0.008155264757216396, 0.06133691476873937, 0.10703897382705985, 0.12295973084624168, 0.17500186918938399, 0.14915463122469697, 0.2516371930605914, 0.09582276738097206, 0.21327220318423845, 0.1545000053875163, 0.18861900824146882, 0.15994769762769578, 0.14422944777237368, 0.08008709064582109, 0.06708237450245702, 0.09265379245585226, 0.0845660089571475, 0.07968617882253837, 0.06625581380371948, 0.07552722457552807, 0.11199542291795483, 0.0941409081373511, 0.1775938802804674, 0.15176628766530142, 0.14996786639824655, 0.21159560044624093, 0.19066939835556018, 0.18716801012764395, 0.14024159358898047, 0.1988226810451833, 0.08682861036760947, 0.5353825847000608, 0.527255067240293, 0.6031928134374015, 0.4987004932802833, 0.5233298861595981, 0.48477586654201865, 0.5561702975787719, 0.540347405423104, 0.5376657790329669, 0.274940459098146, 0.15890424845256312, 0.11451409519872091, 0.13725965294710973, 0.1048094240285724, 0.12161775931797725, 0.13822296661310862, 0.1215267691689278, 0.11280590944596447, 0.20898830770413646, 0.1690672622282, 0.1948501860709696, 0.19269846695267812, 0.15169958371949777, 0.19862008097291095, 0.18079119151741252, 0.2293222332992677, 0.20675708993918096, 0.368481265647455, 0.38835957011429134, 0.42367679067732456, 0.35935216877437937, 0.38074469000632993, 0.3862581205770541, 0.42740862447373007, 0.4645559369535982, 0.482821348152616, 0.2712789919870603, 0.25682966455219725, 0.25177025832436195, 0.25300487954529205, 0.2686431975475436, 0.2284833807825305, 0.2960965595320878, 0.28396874137812134, 0.3050526199775574, 0.20339604071847195, 0.1978155673211751, 0.21966069356581153, 0.19938852923311068, 0.22185366697914244, 0.2320235133063855, 0.19121266540991033, 0.19819511154561376, 0.2000098144275868, 0.5770063213667567, 0.19713095017879112, 0.21291475690098538, 0.5822606527067358, 0.5073150970907279, 0.3661899546669183, 0.6130160024801777, 0.2280679143675175, 0.21682017269098086, 0.17785344074212828, 0.6506620923403263, 0.7520921181626954, 0.6253833091655182, 0.20111732763074652, 0.7653579385472628, 0.6602615695121166, 0.5839766496831977, 0.7515424932314403, 0.42507541576011754, 0.199071383724855, 0.4274599575353726, 0.27289280188897413, 0.204182253363433, 0.481247226650771, 0.5309335961401198, 0.28946496870998417, 0.20104985155318267, 0.18087940341120845, 0.1991505110650572, 0.18044526989082044, 0.19937227925997014, 0.18472023573761798, 0.18851857278527728, 0.19069335896140927, 0.1746705246575142, 0.19612374453280312, 0.0849012882318273, 0.08827193195396899, 0.07735334035919694, 0.08676754310849688, 0.07627436625478279, 0.07672729779464005, 0.08468983196999902, 0.0829973644055606, 0.08694481051709624]}, "mutation_prompt": null}
{"id": "18b674b6-7ef3-4780-bb5a-947c2181c6d9", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.02, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined local search scaling for improved convergence.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.7901515981392251, 0.8109564542824997, 0.823983883403354, 0.8078959353659622, 0.8039132680879147, 0.7991478010104747, 0.8044527385152666, 0.7800544923942474, 0.8129729764238944, 0.6225008384666069, 0.596479164286183, 0.6697692421032345, 0.673218701517774, 0.6453025826426018, 0.6818619259081896, 0.6449482598460416, 0.6560650015966856, 0.6778804019622324, 0.5758876666341368, 0.5264009368222926, 0.5747200903290176, 0.46375389093649677, 0.541256612089343, 0.5556562489593059, 0.5488903988140932, 0.1716656079323431, 0.5890471408725002, 0.15945972255087404, 0.1679712076751665, 0.13679414539225743, 0.41264566949553416, 0.16553518041961146, 0.15123222478659304, 0.1713792888405795, 0.45148905344771784, 0.4741393346033269, 0.8677127189510389, 0.8710805230233919, 0.8837512579052195, 0.8708544335729065, 0.8830055526018968, 0.9217707942923975, 0.8903108185754729, 0.9038571266995518, 0.9062311401398995, 0.3098132747507256, 0.28877685475064707, 0.30138309286723597, 0.3076597486670184, 0.26761987184897984, 0.32195084020821296, 0.1717660584887033, 0.18660611027998597, 0.27839910330324924, 0.6543085445520473, 0.676454400226388, 0.5561035470398652, 0.7457050319775509, 0.6549494836527975, 0.33196663924177394, 0.6820035791923336, 0.7192155869158263, 0.7471037502020932, 0.16256720566794847, 0.19896311696685065, 0.2748606652873543, 0.1883102340511098, 0.16213588014093416, 0.20365673164407905, 0.15418072993172138, 0.1729946145386233, 0.14863300398553914, 0.13246021658925367, 0.15543871072566762, 0.1392314983270444, 0.14751919094348465, 0.20435054873817993, 0.1993629971803751, 0.13298516937408855, 0.12840248462169512, 0.11290690328430597, 0.07395667427263342, 0.10294364301815806, 0.06296553002772176, 0.07145552835473445, 0.026582645522530757, 0.008155264757216396, 0.06133691476873937, 0.10703897382705985, 0.12295973084624168, 0.17500186918938399, 0.14915463122469697, 0.2516371930605914, 0.09582276738097206, 0.21327220318423845, 0.1545000053875163, 0.18861900824146882, 0.15994769762769578, 0.14422944777237368, 0.08008709064582109, 0.06708237450245702, 0.09265379245585226, 0.0845660089571475, 0.07968617882253837, 0.06625581380371948, 0.07552722457552807, 0.11199542291795483, 0.0941409081373511, 0.1775938802804674, 0.15176628766530142, 0.14996786639824655, 0.21159560044624093, 0.19066939835556018, 0.18716801012764395, 0.14024159358898047, 0.1988226810451833, 0.08682861036760947, 0.5353825847000608, 0.527255067240293, 0.6031928134374015, 0.4987004932802833, 0.5233298861595981, 0.48477586654201865, 0.5561702975787719, 0.540347405423104, 0.5376657790329669, 0.274940459098146, 0.15890424845256312, 0.11451409519872091, 0.13725965294710973, 0.1048094240285724, 0.12161775931797725, 0.13822296661310862, 0.1215267691689278, 0.11280590944596447, 0.20898830770413646, 0.1690672622282, 0.1948501860709696, 0.19269846695267812, 0.15169958371949777, 0.19862008097291095, 0.18079119151741252, 0.2293222332992677, 0.20675708993918096, 0.368481265647455, 0.38835957011429134, 0.42367679067732456, 0.35935216877437937, 0.38074469000632993, 0.3862581205770541, 0.42740862447373007, 0.4645559369535982, 0.482821348152616, 0.2712789919870603, 0.25682966455219725, 0.25177025832436195, 0.25300487954529205, 0.2686431975475436, 0.2284833807825305, 0.2960965595320878, 0.28396874137812134, 0.3050526199775574, 0.20339604071847195, 0.1978155673211751, 0.21966069356581153, 0.19938852923311068, 0.22185366697914244, 0.2320235133063855, 0.19121266540991033, 0.19819511154561376, 0.2000098144275868, 0.5770063213667567, 0.19713095017879112, 0.21291475690098538, 0.5822606527067358, 0.5073150970907279, 0.3661899546669183, 0.6130160024801777, 0.2280679143675175, 0.21682017269098086, 0.17785344074212828, 0.6506620923403263, 0.7520921181626954, 0.6253833091655182, 0.20111732763074652, 0.7653579385472628, 0.6602615695121166, 0.5839766496831977, 0.7515424932314403, 0.42507541576011754, 0.199071383724855, 0.4274599575353726, 0.27289280188897413, 0.204182253363433, 0.481247226650771, 0.5309335961401198, 0.28946496870998417, 0.20104985155318267, 0.18087940341120845, 0.1991505110650572, 0.18044526989082044, 0.19937227925997014, 0.18472023573761798, 0.18851857278527728, 0.19069335896140927, 0.1746705246575142, 0.19612374453280312, 0.0849012882318273, 0.08827193195396899, 0.07735334035919694, 0.08676754310849688, 0.07627436625478279, 0.07672729779464005, 0.08468983196999902, 0.0829973644055606, 0.08694481051709624]}, "mutation_prompt": null}
{"id": "e4ba4c39-5efe-40a3-a06e-761031478559", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.18 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.02, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Slightly improved local search probability scaling for better convergence.", "configspace": "", "generation": 70, "fitness": 0.33950088665703326, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.7989934668117176, 0.7870068641240057, 0.7905609087827061, 0.7799964044610688, 0.8061681121690387, 0.7885750104906875, 0.8077087169702387, 0.7782871087011878, 0.7830437455440269, 0.6147006650257019, 0.6289769976794397, 0.6234110423691701, 0.6250831369719898, 0.6188531119006755, 0.636025711219665, 0.642153704515747, 0.5664920967210753, 0.6016849640160875, 0.5385815942989124, 0.5547159683527247, 0.49417504021769465, 0.5269169648814334, 0.6065974172080549, 0.4841988772906689, 0.49566027022501713, 0.535169780319958, 0.5095347254041098, 0.16179286319330166, 0.48433676893417343, 0.16791808120686014, 0.4290667966654853, 0.4402971218720183, 0.40912309194818075, 0.14116598169818995, 0.1626683935194837, 0.43913918680447306, 0.9240683939998892, 0.8837617551986533, 0.8731242839872743, 0.8928845831018304, 0.9242140450170233, 0.9236387093807329, 0.9054526466454925, 0.9278567440402734, 0.9007818439046084, 0.25715433029814216, 0.316119218882835, 0.1422305209764707, 0.38902554809288414, 0.2329425453187528, 0.3946365201183226, 0.23135125281822244, 0.2180006704783064, 0.23666781360179945, 0.2730138795038546, 0.6626796567818481, 0.6511199912681611, 0.26364688207705556, 0.2673292491170598, 0.7098645869720985, 0.47741652661789136, 0.6083779123425177, 0.7179267822494204, 0.14968628741923407, 0.17316637185523975, 0.21120183370211953, 0.20946098581521233, 0.14946183108762912, 0.15603495168428416, 0.16279467351782118, 0.20198072821276558, 0.14339065113495286, 0.17042679258120552, 0.14815639887422727, 0.16300900338938484, 0.2457291608209955, 0.3204884273456722, 0.2812306241671867, 0.13162348004196267, 0.12267915582629685, 0.16323950319296487, 0.08921677944837336, 0.08483136416664006, 0.08071794648384945, 0.010972384896515863, 0.009172885859936253, 0.02182749723498456, 0.07506033562028747, 0.057335983804021495, 0.07770693880351087, 0.15617102977667618, 0.19039687584371112, 0.14777787490168193, 0.15368628405686946, 0.14445778708884305, 0.17849892664212852, 0.194445051486536, 0.1502888362387561, 0.154588611227356, 0.044669771815656345, 0.08810226249841202, 0.09389448866031047, 0.12075426645351106, 0.08291493599360222, 0.053248407812486076, 0.05399991091450451, 0.12134236354972927, 0.10321268476043055, 0.19493978808395218, 0.10313004790296276, 0.12255174146599201, 0.13447957093947083, 0.18110467458095147, 0.20169719835262667, 0.10317146299567326, 0.2111816719921531, 0.17355379153529105, 0.5554747726628126, 0.5096639527767081, 0.5639043124990801, 0.5205267177147362, 0.5283141158342204, 0.544510794917566, 0.5733068498836756, 0.5528083261313472, 0.586668436862928, 0.13297189975609658, 0.15426578065485086, 0.10637268085733609, 0.13206945495697786, 0.12531987807777423, 0.13503273584884268, 0.11419793025002856, 0.11033989681335565, 0.14021651317949724, 0.2377536049831428, 0.16522672296897967, 0.19792227157336306, 0.1562274834515034, 0.18769224797745254, 0.1954454746037928, 0.20936493073109674, 0.13316790651564192, 0.1786885257673324, 0.38984008687010785, 0.4611592182176272, 0.37578030472042545, 0.3774613697162055, 0.3663948321032774, 0.3709216112704897, 0.45791466456907914, 0.5078804049213422, 0.4520546404594016, 0.24661579011505308, 0.23887649758896434, 0.23934901343840054, 0.27534141107357524, 0.2730794209130608, 0.2649374379463154, 0.30235818590765107, 0.31929443255869294, 0.3041203355796388, 0.21490985977702104, 0.17922007948277585, 0.22125137324499655, 0.19919524400017297, 0.1884487683836502, 0.19879808130222243, 0.22115789949064024, 0.19953210617706707, 0.1953304110301185, 0.5329847242139805, 0.23529517085859541, 0.23268819687000208, 0.5397560962465611, 0.632276412968337, 0.4054433272497505, 0.22777139768380772, 0.4851246192869768, 0.23330182341746708, 0.7040139574853015, 0.17499477676623465, 0.8031222368854555, 0.582661926478054, 0.19209610058631255, 0.626426601435765, 0.5516244707416299, 0.6332567048323235, 0.6537698150937821, 0.5233315267967175, 0.20599402671933487, 0.5295624521063698, 0.3186411699052738, 0.5987267828878362, 0.404557918961556, 0.561353859742954, 0.2047692513089986, 0.3394780620380746, 0.18700311336647069, 0.1859166812863814, 0.20177522179867158, 0.1867260034287742, 0.19430044494861642, 0.18645026447077162, 0.17935402187881755, 0.20032008313820726, 0.18247452586803903, 0.0830956217169343, 0.08057608147884221, 0.09846080212342823, 0.0789886736090657, 0.08563077747324244, 0.0820570943885961, 0.09009611068489176, 0.08730793740629483, 0.08702607031363263]}, "mutation_prompt": null}
{"id": "e160e50a-c224-4986-983c-1945a808ed8c", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.02, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined local search scaling for improved convergence.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.7901515981392251, 0.8109564542824997, 0.823983883403354, 0.8078959353659622, 0.8039132680879147, 0.7991478010104747, 0.8044527385152666, 0.7800544923942474, 0.8129729764238944, 0.6225008384666069, 0.596479164286183, 0.6697692421032345, 0.673218701517774, 0.6453025826426018, 0.6818619259081896, 0.6449482598460416, 0.6560650015966856, 0.6778804019622324, 0.5758876666341368, 0.5264009368222926, 0.5747200903290176, 0.46375389093649677, 0.541256612089343, 0.5556562489593059, 0.5488903988140932, 0.1716656079323431, 0.5890471408725002, 0.15945972255087404, 0.1679712076751665, 0.13679414539225743, 0.41264566949553416, 0.16553518041961146, 0.15123222478659304, 0.1713792888405795, 0.45148905344771784, 0.4741393346033269, 0.8677127189510389, 0.8710805230233919, 0.8837512579052195, 0.8708544335729065, 0.8830055526018968, 0.9217707942923975, 0.8903108185754729, 0.9038571266995518, 0.9062311401398995, 0.3098132747507256, 0.28877685475064707, 0.30138309286723597, 0.3076597486670184, 0.26761987184897984, 0.32195084020821296, 0.1717660584887033, 0.18660611027998597, 0.27839910330324924, 0.6543085445520473, 0.676454400226388, 0.5561035470398652, 0.7457050319775509, 0.6549494836527975, 0.33196663924177394, 0.6820035791923336, 0.7192155869158263, 0.7471037502020932, 0.16256720566794847, 0.19896311696685065, 0.2748606652873543, 0.1883102340511098, 0.16213588014093416, 0.20365673164407905, 0.15418072993172138, 0.1729946145386233, 0.14863300398553914, 0.13246021658925367, 0.15543871072566762, 0.1392314983270444, 0.14751919094348465, 0.20435054873817993, 0.1993629971803751, 0.13298516937408855, 0.12840248462169512, 0.11290690328430597, 0.07395667427263342, 0.10294364301815806, 0.06296553002772176, 0.07145552835473445, 0.026582645522530757, 0.008155264757216396, 0.06133691476873937, 0.10703897382705985, 0.12295973084624168, 0.17500186918938399, 0.14915463122469697, 0.2516371930605914, 0.09582276738097206, 0.21327220318423845, 0.1545000053875163, 0.18861900824146882, 0.15994769762769578, 0.14422944777237368, 0.08008709064582109, 0.06708237450245702, 0.09265379245585226, 0.0845660089571475, 0.07968617882253837, 0.06625581380371948, 0.07552722457552807, 0.11199542291795483, 0.0941409081373511, 0.1775938802804674, 0.15176628766530142, 0.14996786639824655, 0.21159560044624093, 0.19066939835556018, 0.18716801012764395, 0.14024159358898047, 0.1988226810451833, 0.08682861036760947, 0.5353825847000608, 0.527255067240293, 0.6031928134374015, 0.4987004932802833, 0.5233298861595981, 0.48477586654201865, 0.5561702975787719, 0.540347405423104, 0.5376657790329669, 0.274940459098146, 0.15890424845256312, 0.11451409519872091, 0.13725965294710973, 0.1048094240285724, 0.12161775931797725, 0.13822296661310862, 0.1215267691689278, 0.11280590944596447, 0.20898830770413646, 0.1690672622282, 0.1948501860709696, 0.19269846695267812, 0.15169958371949777, 0.19862008097291095, 0.18079119151741252, 0.2293222332992677, 0.20675708993918096, 0.368481265647455, 0.38835957011429134, 0.42367679067732456, 0.35935216877437937, 0.38074469000632993, 0.3862581205770541, 0.42740862447373007, 0.4645559369535982, 0.482821348152616, 0.2712789919870603, 0.25682966455219725, 0.25177025832436195, 0.25300487954529205, 0.2686431975475436, 0.2284833807825305, 0.2960965595320878, 0.28396874137812134, 0.3050526199775574, 0.20339604071847195, 0.1978155673211751, 0.21966069356581153, 0.19938852923311068, 0.22185366697914244, 0.2320235133063855, 0.19121266540991033, 0.19819511154561376, 0.2000098144275868, 0.5770063213667567, 0.19713095017879112, 0.21291475690098538, 0.5822606527067358, 0.5073150970907279, 0.3661899546669183, 0.6130160024801777, 0.2280679143675175, 0.21682017269098086, 0.17785344074212828, 0.6506620923403263, 0.7520921181626954, 0.6253833091655182, 0.20111732763074652, 0.7653579385472628, 0.6602615695121166, 0.5839766496831977, 0.7515424932314403, 0.42507541576011754, 0.199071383724855, 0.4274599575353726, 0.27289280188897413, 0.204182253363433, 0.481247226650771, 0.5309335961401198, 0.28946496870998417, 0.20104985155318267, 0.18087940341120845, 0.1991505110650572, 0.18044526989082044, 0.19937227925997014, 0.18472023573761798, 0.18851857278527728, 0.19069335896140927, 0.1746705246575142, 0.19612374453280312, 0.0849012882318273, 0.08827193195396899, 0.07735334035919694, 0.08676754310849688, 0.07627436625478279, 0.07672729779464005, 0.08468983196999902, 0.0829973644055606, 0.08694481051709624]}, "mutation_prompt": null}
{"id": "f13f335a-ed52-4c81-863a-03569247abdc", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand() * (1 - evaluations / self.budget)  # Introduced adaptive scaling factor\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.02, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Introduce an adaptive scaling factor to enhance trial vector generation for better convergence.", "configspace": "", "generation": 72, "fitness": 0.329478945208178, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.797691785867664, 0.8242735576882145, 0.8141693946344299, 0.8001359174888554, 0.8046148371733761, 0.811084921360304, 0.8159494674810099, 0.8071538274029473, 0.8205056827475645, 0.45011209404237285, 0.65432564669962, 0.6645158128428597, 0.6502526928008585, 0.6415535509402644, 0.6690024289169667, 0.6631502629866601, 0.6601191737393033, 0.6623772919026811, 0.5824013477035772, 0.6015743838371224, 0.5568325573107964, 0.17241034156809587, 0.5642882950661322, 0.6541435290542629, 0.17522658902518762, 0.6126940097057083, 0.5741710199299073, 0.16542770417749908, 0.4529825918302376, 0.4394926415258753, 0.4635949382543385, 0.36725972579061317, 0.4360103041494372, 0.1708739360574526, 0.14761407429595197, 0.14833282721965257, 0.8202766314274026, 0.8623213224927089, 0.8709697630265689, 0.8675483723720742, 0.8976041723798358, 0.9211260519875065, 0.8954536547557629, 0.8934648046164885, 0.8810993628525117, 0.16363321092989414, 0.3150130648887408, 0.27960509344645357, 0.20660677765223134, 0.278704878827014, 0.2382417997803553, 0.10702778917597622, 0.10723589349128737, 0.2179477842351799, 0.3497456588155513, 0.7205271465577945, 0.3394966726075258, 0.3221236539741644, 0.5372525069580645, 0.3538890208754992, 0.7695170959429951, 0.7216301535471533, 0.2255284342305809, 0.2636788844992459, 0.4041851878153949, 0.11668197739342545, 0.16827912652548382, 0.14297387657006744, 0.2104930243560228, 0.19963497726153723, 0.16543615382437127, 0.1477897941825984, 0.16911683383730325, 0.14074239098796748, 0.14632514151202325, 0.13633647669831184, 0.18272651775349735, 0.14566078673744765, 0.13208293994279485, 0.12669858197241013, 0.14038555372822215, 0.10155684876300397, 0.14535358635975992, 0.12731934726533, 0.009911135450543562, 9.999999999998899e-05, 0.05993075337250808, 0.03992137543186569, 0.01284481364492418, 0.09310932248757853, 0.1554069179923454, 0.108738894165607, 0.17002508247850767, 0.0940600224882282, 0.057665858063774444, 0.09614201228950425, 0.26562084864783864, 0.17331819381809233, 0.18317703997991786, 0.1821050826738917, 0.03351619029716635, 0.11477846077435461, 0.08568204682550862, 0.1005558873295358, 0.207107397344363, 0.09106401867810798, 0.12802577064183274, 0.07407287914541472, 0.2047706611768263, 0.19244220054783068, 0.18808802472863517, 0.1957093989634744, 0.1573230137570234, 0.18467117944937173, 0.10872721718087885, 0.20886981320494247, 0.10405507161296812, 0.5057507403272312, 0.514916637695471, 0.5166760688582024, 0.5636219254020614, 0.5386607849473595, 0.4925896774870957, 0.5014242046292624, 0.5394606001953391, 0.4993608428804819, 0.11334990205367035, 0.10451828921506712, 0.134713885385769, 0.11959201546874865, 0.10893772975292837, 0.14683221040295025, 0.12734852327139723, 0.13464123051913846, 0.11325758175978806, 0.18491791194964113, 0.20968932004229723, 0.1910307221777563, 0.16716571763001742, 0.18536977001511878, 0.23158698447196002, 0.15231024989158082, 0.219747632497439, 0.1899762640791146, 0.356118462581434, 0.3790227227624984, 0.3774457247041033, 0.3897805441734765, 0.3614394453997526, 0.41285532501048994, 0.46210655398639866, 0.5175238114976491, 0.47080092434259646, 0.25854699249266333, 0.28130228276487956, 0.264684003698327, 0.23633783386885576, 0.21247384272938274, 0.28247369325042604, 0.25253425277148434, 0.29795489725562474, 0.31354646195838576, 0.2444780245666155, 0.21596810778107622, 0.19797723139927248, 0.21572398034505857, 0.20032620825674607, 0.20175145132421413, 0.20702360795540964, 0.20118718015665205, 0.21906420648334857, 0.21416178884748038, 0.22920485654456668, 0.5851775558201383, 0.4782086052178395, 0.23594974371572341, 0.21608474224504282, 0.6313007445600571, 0.4927708567997652, 0.23308554278898885, 0.174774320130342, 0.6614364343320265, 0.6473958353219671, 0.40793622581756406, 0.19771845575070313, 0.7842226283433342, 0.7798641658374469, 0.5381599897753591, 0.7196659247930448, 0.3799715393274161, 0.20208298198546504, 0.3391183622267596, 0.2035115467315879, 0.20477656484698026, 0.1641284238246291, 0.4180219281749673, 0.4054118505262233, 0.46195549205710384, 0.17783002609595422, 0.18586116647912132, 0.19272246554457417, 0.18844262000037526, 0.19628311871791793, 0.19686978412630263, 0.18862653161787135, 0.2362476910423542, 0.1784011561823452, 0.09183900745111218, 0.08070274761428087, 0.09294824928066026, 0.0983075764206991, 0.0805147038870686, 0.11762942518047093, 0.08371482912092343, 0.08974650048246258, 0.09186773516102109]}, "mutation_prompt": null}
{"id": "cff5af02-3998-4a72-9fb1-357ebd2425ad", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1\n                CR_adaptive = np.random.rand() * 0.5 + 0.4\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand() * 0.5 + 0.3  # Updated precision mutation scaling\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        perturbation = np.random.normal(0, 0.02, self.dim)\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced adaptive control with precision mutation scaling for improved convergence rate.", "configspace": "", "generation": 73, "fitness": 0.32190451149767746, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.8112529154263607, 0.8118649680403822, 0.8227359055156332, 0.8172736078276391, 0.7872104895653398, 0.8167429872464775, 0.8000111077430677, 0.7744517076517354, 0.8130448733991582, 0.6824569385088948, 0.6590263966140695, 0.6392498521994261, 0.6816017340765061, 0.6511472974763075, 0.6583518212777326, 0.630661756397463, 0.6427476231130025, 0.6733327859181879, 0.4561264919231608, 0.39718084772762874, 0.45283419504834266, 0.4024794828146393, 0.5164117942738571, 0.4646414464225711, 0.4810752198071354, 0.36639159945126043, 0.28483107547465913, 0.15184271828346607, 0.3503881047954127, 0.2585277084473462, 0.1581756058083531, 0.2519704235804797, 0.28494773730120837, 0.16343715428485517, 0.3470209754550503, 0.14786755705406196, 0.8773604746565173, 0.8794071958420141, 0.8783942357707066, 0.8950590163075747, 0.9105939648347312, 0.8818160293484979, 0.8902960561851396, 0.853432544766361, 0.8984953083850001, 0.30708085511780714, 0.25645145163654437, 0.3297228245425319, 0.37529251119623075, 0.27174931542953806, 0.4077003726397427, 0.22729336744758066, 0.17009102536943987, 0.28409014859069326, 0.6953152021098011, 0.6003203079208845, 0.2792215485423255, 0.6394744275727912, 0.7076644781812307, 0.6941104291925152, 0.712094197336805, 0.6407542722758874, 0.6684804020071031, 0.16180825838650403, 0.1689262331150876, 0.16223687384578045, 0.12229210912368127, 0.1619587994563646, 0.22391033201620403, 0.1724401430230995, 0.1761782453318208, 0.21894784888251528, 0.17321733489500946, 0.18712233524326372, 0.1923212272875584, 0.14902784044784056, 0.1231866098916724, 0.15463454247846653, 0.19764199585308384, 0.17739881740249164, 0.18085202833758562, 0.060565694762239164, 0.07595242020478088, 0.08599391257223687, 0.03644906553500771, 0.054865322518289794, 0.05017836295994127, 0.055179635951508654, 0.005573418211270109, 0.06667085042976428, 0.17707839752709897, 0.2097063535841719, 0.197413113942294, 0.13926454024892587, 0.1521097575016911, 0.12826417936217727, 0.26825951946321014, 0.24240374071043813, 0.2393296169753576, 0.0777904420406974, 0.03337389139154878, 0.11007145336042845, 0.09280921221180105, 0.08355303171551509, 0.10623683447634735, 0.07740500099334291, 0.08422303606630088, 0.09419555573352778, 0.18468809724030721, 0.1800437008737905, 0.1912896446815563, 0.18976037074336138, 0.21947364043066353, 0.21308202516378538, 0.1917916998604765, 0.18512230864103107, 0.10223616852254669, 0.5897925184828028, 0.5707978164049454, 0.5340972926563902, 0.5590926827705507, 0.5386868708044044, 0.5437963419774852, 0.5952302736041011, 0.567831301217625, 0.589480325562902, 0.10992438155363671, 0.11242549323359874, 0.1569112409230351, 0.12972053254386395, 0.09191679017885923, 0.12360376242377258, 0.11579537243710125, 0.13506988079517124, 0.12143983165367933, 0.1611289577254329, 0.13637729389598696, 0.15215160551744944, 0.16235331786350127, 0.15430387831701753, 0.15326544118530872, 0.15020157017236657, 0.14464470925434036, 0.15267422031607658, 0.4003566346688694, 0.3821307214890124, 0.43037131112451976, 0.39448389742209367, 0.337888542458611, 0.3751281621254883, 0.4214563089935399, 0.4412142389527446, 0.4365933752344887, 0.31009448465228684, 0.28094964724611704, 0.3219494610874324, 0.2511299129317346, 0.19264954338054185, 0.2634464754445768, 0.33283846440794806, 0.31606280907679496, 0.31051752142001143, 0.20517569550118564, 0.21032942634915752, 0.2122940774461879, 0.19927857956737205, 0.19717328345606522, 0.20746007584973736, 0.21607729451463076, 0.20708828120073708, 0.20092360809445287, 0.48578942707683503, 0.22849303079995298, 0.22049073356043314, 0.41624741465050086, 0.3214883296065786, 0.2447867758427631, 0.49064442571857403, 0.2086282207385025, 0.44180028864734344, 0.1819056884318797, 0.5924514122247411, 0.1827268608605188, 0.6340620918831326, 0.4069514588180396, 0.7363152673832112, 0.18016060876184947, 0.1601954983559073, 0.18037618137950084, 0.26393590812767476, 0.20185118465022112, 0.186548559151976, 0.20022332442011614, 0.22346850342394198, 0.16587654894326298, 0.2519910038812946, 0.15237460237065226, 0.4391770412823244, 0.18050679745184806, 0.18554018248555137, 0.17898909477116542, 0.1871543046756139, 0.17886947760892713, 0.21474852194758887, 0.1778025876947963, 0.19203788759595786, 0.18352048560126388, 0.08385508725008894, 0.07299181438790214, 0.08326809010866887, 0.07895736681132226, 0.0803010056278265, 0.0902390279079649, 0.0862469890392551, 0.08373583359581649, 0.07829153959496216]}, "mutation_prompt": null}
{"id": "3dcd9557-162f-414b-9d3d-47b30b51c178", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small adaptive random perturbation\n        perturbation_scale = 0.02 * (1 - np.abs(func(vector) - np.min(func(np.array([vector])))))\n        perturbation = np.random.normal(0, perturbation_scale, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved exploration via adaptive perturbation scaling in local search.", "configspace": "", "generation": 74, "fitness": 0.3124455195866644, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.7466744497303572, 0.7735000337141722, 0.7894951443459459, 0.7678569255004362, 0.7651614441269293, 0.7602597311231026, 0.7637113154208008, 0.7366485934026099, 0.7762536325784978, 0.5473496570495888, 0.5195028579925446, 0.6072110514829785, 0.6066863555884889, 0.5765601510984337, 0.6215356820131697, 0.5738458422853858, 0.5893670402006812, 0.6167823056475277, 0.49363682711753476, 0.4393762737659167, 0.4979190996418571, 0.3650653130704813, 0.4563409098603636, 0.4759692638811638, 0.4623306751162509, 0.1660240158855919, 0.5143497613135557, 0.15097411552779227, 0.1615673928260667, 0.13363951087907322, 0.3094109047240613, 0.15868861418696156, 0.1475011544468109, 0.1652629855726464, 0.3541560190582611, 0.38247213541164615, 0.8392545385615806, 0.8449044304883769, 0.8604154076426545, 0.8434334140244835, 0.8592642546333282, 0.9065965118474415, 0.8660063182852541, 0.8847163736926232, 0.8870965881073327, 0.27232474812882834, 0.25605311922991214, 0.2676313570682374, 0.2509637480437159, 0.24119112232464168, 0.2854409971186962, 0.15756515007492722, 0.1720816459129354, 0.2550362719045728, 0.5858670249515274, 0.6132137913094959, 0.4767165902257765, 0.6930188465155278, 0.5890308391129682, 0.31893053614765654, 0.6176814057730571, 0.6636225786923347, 0.6983117595313906, 0.15246272398813254, 0.18166469782322658, 0.23987447147969376, 0.17848483458591358, 0.1569423833459701, 0.19446525246347746, 0.14741405440298605, 0.15860624242329613, 0.14385363571800847, 0.12777713081352104, 0.1462414757079974, 0.13431639330209533, 0.1428417683553953, 0.19513824719070205, 0.18741638411818795, 0.12905073330039996, 0.1216997305076073, 0.10754247620986612, 0.06172605923290997, 0.08033292011925819, 0.05390922598576309, 0.04924732438751778, 0.019633053775991338, 0.005884555950091408, 0.051164880839132065, 0.08009312837055327, 0.09866474192787877, 0.15929813269847237, 0.13347174934003925, 0.2232976363481214, 0.0846501248712146, 0.17940695779314175, 0.13517963263044386, 0.1749123278839777, 0.14391278000738839, 0.1344441415883575, 0.060068060164719994, 0.05084458120290325, 0.07022343821572863, 0.07056550406807471, 0.06650298660638743, 0.05396601607702356, 0.06349204378750783, 0.09438348585094392, 0.08038661472140807, 0.15826664867378115, 0.12999398742778212, 0.1397116719167747, 0.17506651360112424, 0.16676624670549411, 0.1613549814852555, 0.132242197070229, 0.17531922655421817, 0.08364884996462241, 0.5084589797834385, 0.49807312872761145, 0.576802638759647, 0.47778314704537783, 0.49832533630982057, 0.4671277294367817, 0.5299717551464553, 0.5065709110561565, 0.5107495725086366, 0.19210188061676714, 0.15098391201629602, 0.10747216645741808, 0.13059103789770576, 0.10153984679923866, 0.11614181950639924, 0.13163204731732092, 0.11548870701089231, 0.10947072609139163, 0.19043827432885885, 0.1590337937591808, 0.17834235780218766, 0.17544708018434607, 0.1433486231235387, 0.18481654527306302, 0.16860751361470738, 0.21337932751059163, 0.19481209818706435, 0.32970620853462673, 0.3488609102455015, 0.38539480540406024, 0.3209279476281105, 0.35752995187155623, 0.35066000514156204, 0.3785284262526263, 0.42452671800378816, 0.42948336827810507, 0.250689946519414, 0.24486481598944532, 0.23652668739010896, 0.23177196292411495, 0.2529193899370411, 0.21640057915403954, 0.26711274790885986, 0.27000706133920516, 0.2767809796573406, 0.20169033806007963, 0.1936151656585653, 0.21096782585394913, 0.19754501490206022, 0.2117602569152771, 0.22635527597317673, 0.18677896621735068, 0.19588855098396207, 0.19405329567504537, 0.49640793270142014, 0.19325374256413375, 0.20910798355124705, 0.5028048719851126, 0.4189079634390461, 0.2817766547077124, 0.5378080288501785, 0.22116694312094431, 0.21309112407015496, 0.17516956024240626, 0.5834658181816991, 0.7040252218895178, 0.5517415239716577, 0.1981452697149012, 0.7201576224308373, 0.5930825829532411, 0.5060227727015005, 0.7034415760409221, 0.383472679089631, 0.1957068314572511, 0.36266882988258875, 0.25505814124659787, 0.2019102396790733, 0.3952676934564703, 0.4599992522186741, 0.26949706984546506, 0.19806436126124194, 0.1784753530130283, 0.19883748928126777, 0.17876934609614326, 0.1979209989447439, 0.18143000714088187, 0.18778517091296565, 0.18839167053536643, 0.17407379054190297, 0.19441618194881605, 0.08195410610441412, 0.08560450793488095, 0.07556152915717051, 0.08287695522000593, 0.07268147510900891, 0.07455441434090804, 0.08200126529931673, 0.08005942073354255, 0.08547647994397645]}, "mutation_prompt": null}
{"id": "c80a2f1b-1d33-4c43-bb95-763dc464cde5", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = int(0.5 * dim * np.log(dim))  # Adaptive population size adjustment\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.02, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined local search scaling for improved convergence and adaptive population size.", "configspace": "", "generation": 75, "fitness": 0.11778316389545618, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.13.", "error": "", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.5766756814591881, 0.5093300691551559, 0.5600155992065974, 0.11883148283183564, 0.4580641129798795, 0.38114622049124813, 0.3679445534398633, 0.41734695052553994, 0.4153594665477848, 0.022505128601975177, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766876658807476, 0.0020424548892841177, 9.999999999998899e-05, 0.04433224249919154, 0.035705349759007965, 0.05694503805920359, 0.04319070895187038, 0.07122810874470598, 0.07417479979464603, 0.06329836811872169, 9.999999999998899e-05, 0.0023608276482089963, 9.999999999998899e-05, 0.0019375489178641292, 9.999999999998899e-05, 0.004246275303473546, 9.999999999998899e-05, 9.999999999998899e-05, 0.0847323130079145, 0.05592751872930568, 0.08795067881947694, 0.07010772119629816, 0.0784122676256358, 0.12693870916069538, 0.05774384196734339, 0.08119115743158001, 0.11147851658211005, 0.26616438279164545, 0.011381356007086785, 0.19159384732945883, 0.021355427541939975, 0.11106687749232824, 0.0313778259492159, 0.06802167486070798, 0.21000378315258128, 0.35998297036051374, 0.09736929537374528, 0.02068005949723739, 0.04796003728970444, 0.15086354252505552, 9.999999999998899e-05, 0.09712235630875932, 0.07391664599380932, 0.028424765169898447, 0.02560366051234031, 0.10717312488481001, 0.007684172402295242, 0.2931754190745641, 9.999999999998899e-05, 0.02103102103822474, 0.09179856947770582, 0.11346816840769225, 0.1402778722351501, 0.1190183017441494, 0.19382867622649125, 0.03580024542273641, 0.10375032761873137, 0.15604566190303681, 0.08433049500272805, 0.1121408187023597, 0.1917655205441895, 0.09148334748769216, 0.16691656528851095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03337447162530405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03805302793078158, 0.051951733281589085, 0.05872020878721396, 0.06617284288059622, 0.001917940510392513, 9.999999999998899e-05, 0.0293649157897915, 0.04931628947188749, 0.028895535693059138, 0.025986423162012717, 0.0058230838294730525, 0.01772880785238007, 0.05749526895553558, 0.007238785692492811, 0.052935627715908984, 0.013721315938341139, 0.012370138627828653, 0.023466674792108844, 0.0006303897272624814, 0.03997684778884991, 0.0032994566914321677, 0.038105805194976305, 0.022504707423596337, 0.01512795380170262, 0.0068242550674755265, 0.08318031656273284, 0.0835990471501622, 0.1461624311361147, 0.3620768709006007, 0.4494865151477827, 0.20277736072118047, 0.16685873421992004, 0.12787543222289444, 0.33159668600072156, 0.19941496772697653, 0.2677045641965118, 0.025559091969415415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07726901706776679, 0.029879590032700576, 0.04509327130398977, 0.026808298986940593, 0.08438148389323286, 0.09964231519649713, 0.16834845341554738, 0.11897534689571754, 0.13872875308174626, 0.15436233945053168, 0.13321012622269424, 0.10637329276629659, 0.10673846463675962, 0.20449629169222183, 0.13994356827499976, 0.13686426626196113, 0.11833234034064755, 0.14092639181994016, 0.1422216717523883, 0.10672923233658493, 0.13810564305856643, 0.11720366395124981, 0.11837197093164908, 0.06852439833981316, 0.06775465064446617, 0.09087224779921199, 0.08031143559354537, 0.0823828571370826, 0.1103583375206999, 0.07833002302672265, 0.04489654161007661, 0.05979069271633031, 0.21995217620873897, 0.14769605006647057, 0.22676770060975326, 0.20735498676105113, 0.11891922448153869, 0.11214287539090251, 0.2719536673929087, 0.18361560113508668, 0.22429803160261652, 0.1907630151805514, 0.13276530920065766, 0.12719314011758742, 0.14882331506568958, 0.16686218803112096, 0.16390922732526947, 0.17178778752470758, 0.13308809501892305, 0.15665752909428066, 0.1733861604680973, 0.10443905397059206, 0.12199764701051485, 0.6572557790791778, 0.19892184648863775, 0.5590297846733094, 0.6828792790938409, 0.12183373644099793, 0.10349002472964297, 0.29696810020749187, 0.27992120975767143, 0.32486952454418927, 0.12314215090580327, 0.07922725579705692, 0.18276976441283999, 0.3057465768908141, 0.09200093222049621, 0.10007719247064673, 0.21570939229050157, 0.2310167239736065, 0.18683645237945035, 0.1983952023168225, 0.17455585642482707, 0.19019691869997746, 0.2201894432690472, 0.24144714780805643, 0.21666835706912912, 0.05577326824803763, 0.05449430034990199, 0.05958717736694308, 0.0542537897665365, 0.04145919070238446, 0.1081078039103841, 0.07899423838546027, 0.039480846181868756, 0.07474165501689056]}, "mutation_prompt": null}
{"id": "2d0f91d3-d161-4edb-ac01-9bd075e8245b", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.02, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined local search scaling for improved convergence.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.7901515981392251, 0.8109564542824997, 0.823983883403354, 0.8078959353659622, 0.8039132680879147, 0.7991478010104747, 0.8044527385152666, 0.7800544923942474, 0.8129729764238944, 0.6225008384666069, 0.596479164286183, 0.6697692421032345, 0.673218701517774, 0.6453025826426018, 0.6818619259081896, 0.6449482598460416, 0.6560650015966856, 0.6778804019622324, 0.5758876666341368, 0.5264009368222926, 0.5747200903290176, 0.46375389093649677, 0.541256612089343, 0.5556562489593059, 0.5488903988140932, 0.1716656079323431, 0.5890471408725002, 0.15945972255087404, 0.1679712076751665, 0.13679414539225743, 0.41264566949553416, 0.16553518041961146, 0.15123222478659304, 0.1713792888405795, 0.45148905344771784, 0.4741393346033269, 0.8677127189510389, 0.8710805230233919, 0.8837512579052195, 0.8708544335729065, 0.8830055526018968, 0.9217707942923975, 0.8903108185754729, 0.9038571266995518, 0.9062311401398995, 0.3098132747507256, 0.28877685475064707, 0.30138309286723597, 0.3076597486670184, 0.26761987184897984, 0.32195084020821296, 0.1717660584887033, 0.18660611027998597, 0.27839910330324924, 0.6543085445520473, 0.676454400226388, 0.5561035470398652, 0.7457050319775509, 0.6549494836527975, 0.33196663924177394, 0.6820035791923336, 0.7192155869158263, 0.7471037502020932, 0.16256720566794847, 0.19896311696685065, 0.2748606652873543, 0.1883102340511098, 0.16213588014093416, 0.20365673164407905, 0.15418072993172138, 0.1729946145386233, 0.14863300398553914, 0.13246021658925367, 0.15543871072566762, 0.1392314983270444, 0.14751919094348465, 0.20435054873817993, 0.1993629971803751, 0.13298516937408855, 0.12840248462169512, 0.11290690328430597, 0.07395667427263342, 0.10294364301815806, 0.06296553002772176, 0.07145552835473445, 0.026582645522530757, 0.008155264757216396, 0.06133691476873937, 0.10703897382705985, 0.12295973084624168, 0.17500186918938399, 0.14915463122469697, 0.2516371930605914, 0.09582276738097206, 0.21327220318423845, 0.1545000053875163, 0.18861900824146882, 0.15994769762769578, 0.14422944777237368, 0.08008709064582109, 0.06708237450245702, 0.09265379245585226, 0.0845660089571475, 0.07968617882253837, 0.06625581380371948, 0.07552722457552807, 0.11199542291795483, 0.0941409081373511, 0.1775938802804674, 0.15176628766530142, 0.14996786639824655, 0.21159560044624093, 0.19066939835556018, 0.18716801012764395, 0.14024159358898047, 0.1988226810451833, 0.08682861036760947, 0.5353825847000608, 0.527255067240293, 0.6031928134374015, 0.4987004932802833, 0.5233298861595981, 0.48477586654201865, 0.5561702975787719, 0.540347405423104, 0.5376657790329669, 0.274940459098146, 0.15890424845256312, 0.11451409519872091, 0.13725965294710973, 0.1048094240285724, 0.12161775931797725, 0.13822296661310862, 0.1215267691689278, 0.11280590944596447, 0.20898830770413646, 0.1690672622282, 0.1948501860709696, 0.19269846695267812, 0.15169958371949777, 0.19862008097291095, 0.18079119151741252, 0.2293222332992677, 0.20675708993918096, 0.368481265647455, 0.38835957011429134, 0.42367679067732456, 0.35935216877437937, 0.38074469000632993, 0.3862581205770541, 0.42740862447373007, 0.4645559369535982, 0.482821348152616, 0.2712789919870603, 0.25682966455219725, 0.25177025832436195, 0.25300487954529205, 0.2686431975475436, 0.2284833807825305, 0.2960965595320878, 0.28396874137812134, 0.3050526199775574, 0.20339604071847195, 0.1978155673211751, 0.21966069356581153, 0.19938852923311068, 0.22185366697914244, 0.2320235133063855, 0.19121266540991033, 0.19819511154561376, 0.2000098144275868, 0.5770063213667567, 0.19713095017879112, 0.21291475690098538, 0.5822606527067358, 0.5073150970907279, 0.3661899546669183, 0.6130160024801777, 0.2280679143675175, 0.21682017269098086, 0.17785344074212828, 0.6506620923403263, 0.7520921181626954, 0.6253833091655182, 0.20111732763074652, 0.7653579385472628, 0.6602615695121166, 0.5839766496831977, 0.7515424932314403, 0.42507541576011754, 0.199071383724855, 0.4274599575353726, 0.27289280188897413, 0.204182253363433, 0.481247226650771, 0.5309335961401198, 0.28946496870998417, 0.20104985155318267, 0.18087940341120845, 0.1991505110650572, 0.18044526989082044, 0.19937227925997014, 0.18472023573761798, 0.18851857278527728, 0.19069335896140927, 0.1746705246575142, 0.19612374453280312, 0.0849012882318273, 0.08827193195396899, 0.07735334035919694, 0.08676754310849688, 0.07627436625478279, 0.07672729779464005, 0.08468983196999902, 0.0829973644055606, 0.08694481051709624]}, "mutation_prompt": null}
{"id": "bdc28985-2a26-4663-a98a-346605e1aa9a", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.02, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic exploration with refined local search scaling for improved convergence.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.7901515981392251, 0.8109564542824997, 0.823983883403354, 0.8078959353659622, 0.8039132680879147, 0.7991478010104747, 0.8044527385152666, 0.7800544923942474, 0.8129729764238944, 0.6225008384666069, 0.596479164286183, 0.6697692421032345, 0.673218701517774, 0.6453025826426018, 0.6818619259081896, 0.6449482598460416, 0.6560650015966856, 0.6778804019622324, 0.5758876666341368, 0.5264009368222926, 0.5747200903290176, 0.46375389093649677, 0.541256612089343, 0.5556562489593059, 0.5488903988140932, 0.1716656079323431, 0.5890471408725002, 0.15945972255087404, 0.1679712076751665, 0.13679414539225743, 0.41264566949553416, 0.16553518041961146, 0.15123222478659304, 0.1713792888405795, 0.45148905344771784, 0.4741393346033269, 0.8677127189510389, 0.8710805230233919, 0.8837512579052195, 0.8708544335729065, 0.8830055526018968, 0.9217707942923975, 0.8903108185754729, 0.9038571266995518, 0.9062311401398995, 0.3098132747507256, 0.28877685475064707, 0.30138309286723597, 0.3076597486670184, 0.26761987184897984, 0.32195084020821296, 0.1717660584887033, 0.18660611027998597, 0.27839910330324924, 0.6543085445520473, 0.676454400226388, 0.5561035470398652, 0.7457050319775509, 0.6549494836527975, 0.33196663924177394, 0.6820035791923336, 0.7192155869158263, 0.7471037502020932, 0.16256720566794847, 0.19896311696685065, 0.2748606652873543, 0.1883102340511098, 0.16213588014093416, 0.20365673164407905, 0.15418072993172138, 0.1729946145386233, 0.14863300398553914, 0.13246021658925367, 0.15543871072566762, 0.1392314983270444, 0.14751919094348465, 0.20435054873817993, 0.1993629971803751, 0.13298516937408855, 0.12840248462169512, 0.11290690328430597, 0.07395667427263342, 0.10294364301815806, 0.06296553002772176, 0.07145552835473445, 0.026582645522530757, 0.008155264757216396, 0.06133691476873937, 0.10703897382705985, 0.12295973084624168, 0.17500186918938399, 0.14915463122469697, 0.2516371930605914, 0.09582276738097206, 0.21327220318423845, 0.1545000053875163, 0.18861900824146882, 0.15994769762769578, 0.14422944777237368, 0.08008709064582109, 0.06708237450245702, 0.09265379245585226, 0.0845660089571475, 0.07968617882253837, 0.06625581380371948, 0.07552722457552807, 0.11199542291795483, 0.0941409081373511, 0.1775938802804674, 0.15176628766530142, 0.14996786639824655, 0.21159560044624093, 0.19066939835556018, 0.18716801012764395, 0.14024159358898047, 0.1988226810451833, 0.08682861036760947, 0.5353825847000608, 0.527255067240293, 0.6031928134374015, 0.4987004932802833, 0.5233298861595981, 0.48477586654201865, 0.5561702975787719, 0.540347405423104, 0.5376657790329669, 0.274940459098146, 0.15890424845256312, 0.11451409519872091, 0.13725965294710973, 0.1048094240285724, 0.12161775931797725, 0.13822296661310862, 0.1215267691689278, 0.11280590944596447, 0.20898830770413646, 0.1690672622282, 0.1948501860709696, 0.19269846695267812, 0.15169958371949777, 0.19862008097291095, 0.18079119151741252, 0.2293222332992677, 0.20675708993918096, 0.368481265647455, 0.38835957011429134, 0.42367679067732456, 0.35935216877437937, 0.38074469000632993, 0.3862581205770541, 0.42740862447373007, 0.4645559369535982, 0.482821348152616, 0.2712789919870603, 0.25682966455219725, 0.25177025832436195, 0.25300487954529205, 0.2686431975475436, 0.2284833807825305, 0.2960965595320878, 0.28396874137812134, 0.3050526199775574, 0.20339604071847195, 0.1978155673211751, 0.21966069356581153, 0.19938852923311068, 0.22185366697914244, 0.2320235133063855, 0.19121266540991033, 0.19819511154561376, 0.2000098144275868, 0.5770063213667567, 0.19713095017879112, 0.21291475690098538, 0.5822606527067358, 0.5073150970907279, 0.3661899546669183, 0.6130160024801777, 0.2280679143675175, 0.21682017269098086, 0.17785344074212828, 0.6506620923403263, 0.7520921181626954, 0.6253833091655182, 0.20111732763074652, 0.7653579385472628, 0.6602615695121166, 0.5839766496831977, 0.7515424932314403, 0.42507541576011754, 0.199071383724855, 0.4274599575353726, 0.27289280188897413, 0.204182253363433, 0.481247226650771, 0.5309335961401198, 0.28946496870998417, 0.20104985155318267, 0.18087940341120845, 0.1991505110650572, 0.18044526989082044, 0.19937227925997014, 0.18472023573761798, 0.18851857278527728, 0.19069335896140927, 0.1746705246575142, 0.19612374453280312, 0.0849012882318273, 0.08827193195396899, 0.07735334035919694, 0.08676754310849688, 0.07627436625478279, 0.07672729779464005, 0.08468983196999902, 0.0829973644055606, 0.08694481051709624]}, "mutation_prompt": null}
{"id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved local search perturbation for enhanced local optima escape.", "configspace": "", "generation": 78, "fitness": 0.3489377138265346, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "cbc3cb3b-b294-421c-8f92-14b9a612f01a", "metadata": {"aucs": [0.7959433012869088, 0.7959789942881453, 0.8254559668566257, 0.806073428012008, 0.8141275126402222, 0.79235963062453, 0.8058472606286998, 0.7764853372139778, 0.8225897751015764, 0.655805836268511, 0.6261525931685636, 0.6308649998780897, 0.6182197422838052, 0.6339776724337349, 0.6579316535520408, 0.626215590134857, 0.6482191682449441, 0.670876474077535, 0.5680716311018035, 0.5743616311809969, 0.5586746418048424, 0.5663661824428334, 0.5121531952347762, 0.5545022419498995, 0.538410328015076, 0.17346027732287517, 0.6289896968499442, 0.1644200560421858, 0.17108362622745776, 0.1697929307402647, 0.4744321400591861, 0.35999231249528707, 0.46863460905487975, 0.5030230956095068, 0.42446009278614294, 0.14869800055568905, 0.8776991845795534, 0.8859040368774871, 0.8908258111254226, 0.8722688277889146, 0.887664518809709, 0.8984188063587122, 0.859051049213535, 0.9039297105986406, 0.8895969648056474, 0.28938436862462846, 0.4004185532216421, 0.32784525260081465, 0.342087374732329, 0.31765417053915324, 0.3502017826495045, 0.19452149584787837, 0.2059338978599934, 0.29406222767052315, 0.5880664121108771, 0.7275241688321404, 0.21112941217865455, 0.7112817616642764, 0.7786822065452801, 0.337201918253654, 0.7438723413564414, 0.6850543571542623, 0.4822852860195016, 0.13975203564208827, 0.24715963585827672, 0.33006243225954424, 0.19331893226658659, 0.16784836475740017, 0.2713112951078117, 0.36907731093380103, 0.15113813024791978, 0.15186877216661365, 0.19254073606682787, 0.13526169254804832, 0.13860170688207252, 0.1588549304519693, 0.20060275933902638, 0.23463978008070163, 0.1944949270113906, 0.1230028695712061, 0.14294193949706713, 0.12524582018704844, 0.09943794318866717, 0.030522745111644323, 0.02991310228701094, 0.10717013385363539, 0.04473608532548767, 0.02646891728563372, 0.01672559763578718, 0.07696214384001376, 0.1709400979773691, 0.11521884721758413, 0.1830195334447482, 0.11686052739966346, 0.17130634073237527, 0.11486514282865923, 0.17595637191139868, 0.10341874341359436, 0.1205516444816973, 0.13792651788525123, 0.03454809184731533, 0.126114042914502, 0.10129864309374281, 0.061361137244363095, 0.05988022799860371, 0.13530050991235443, 0.11511726957089419, 0.057753489965365445, 0.12319593681520413, 0.20979712605400114, 0.20958605851169454, 0.22298006193740316, 0.20931234757748263, 0.2084086309450387, 0.20389556640441764, 0.1263989285483358, 0.08273819753038403, 0.49175439543109944, 0.5874142830050247, 0.5564194284943795, 0.5825252865352206, 0.4816061780218388, 0.5628946547312379, 0.5626313503853145, 0.5699939457945857, 0.5508901014937848, 0.1257158518237257, 0.12193467029653438, 0.12815264881098543, 0.13405923591813151, 0.15577963257531702, 0.13583811344460484, 0.12023738701012476, 0.1272966608188817, 0.11019978631093597, 0.16553858041591463, 0.1636394574131096, 0.15752250767508924, 0.17235826655072994, 0.15842056339648458, 0.19622016532562725, 0.1694539979517533, 0.18597406391327653, 0.15593005817902028, 0.33425283060357525, 0.4002322803873887, 0.4569292342663045, 0.37888112787265626, 0.36703412294483917, 0.41810678398413115, 0.45502976355311153, 0.47583268322486616, 0.4563952353289322, 0.23225314830664656, 0.3111293936849734, 0.2779654715102936, 0.23492369977974736, 0.25655842430759956, 0.2620451688219396, 0.30315564412785845, 0.3548973752267064, 0.23804974960280278, 0.22503471822094645, 0.22389791656359914, 0.20061880375768837, 0.2348125305611859, 0.2050682239112147, 0.20826650372276712, 0.22148530954028478, 0.19807262774134948, 0.224881534388925, 0.5473113051081611, 0.4377618207965386, 0.531494614336905, 0.5024075165456559, 0.45485321113472366, 0.48384674189354593, 0.2905437411681736, 0.6095004319094945, 0.4696043550389175, 0.5690367186551089, 0.6535354218824421, 0.6906830310335729, 0.6542199902032491, 0.6041566029763639, 0.8054449436778202, 0.7370618058872467, 0.1632393101377615, 0.6499462548047542, 0.31979311981564984, 0.20115883146602642, 0.1985382012396295, 0.201570151106934, 0.2036279347535136, 0.4103600502787115, 0.5473350162052579, 0.6360082314803657, 0.29189247781913474, 0.1845529292833331, 0.1930605359284414, 0.1771215933275767, 0.19068734731031678, 0.17426686135638958, 0.18431819792601944, 0.1781375871194959, 0.19418973231219117, 0.1770598642676081, 0.08435807250420879, 0.09228864246217783, 0.08170304342951462, 0.08711039462158365, 0.08195289353624668, 0.08068050080626887, 0.07457168397609004, 0.08617103493849887, 0.08454356465046198]}, "mutation_prompt": null}
{"id": "7f347802-df36-432f-9b52-3d071f88e051", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation_scale = 0.05 * (1 - evaluations / self.budget)  # Adaptive perturbation scale\n        perturbation = np.random.normal(0, perturbation_scale, self.dim)\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced local search with adaptive perturbation scaling to improve exploration and convergence.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'evaluations' is not defined\").", "error": "NameError(\"name 'evaluations' is not defined\")", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {}, "mutation_prompt": null}
{"id": "856c3c3e-a110-4369-8535-11212edc8b0b", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + F_adaptive * (self.pop[b] - self.pop[c] + self.pop[c] - self.pop[a])  # Modified mutation\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced mutation strategy by incorporating weighted differences for better exploration.", "configspace": "", "generation": 80, "fitness": 0.19185752584144672, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.5379629311893566, 0.5395682933095589, 0.5846359825266827, 0.3341168536742981, 0.4331441934772211, 0.43015045008675934, 0.47830761940167366, 0.4721857594459441, 0.4860892031358436, 0.05824489425287571, 9.999999999998899e-05, 0.0284122800316976, 0.10140816021816246, 0.16153318322359533, 0.004316634561615906, 9.999999999998899e-05, 0.08949944222323125, 9.999999999998899e-05, 0.15335153888695952, 0.15301333973996367, 0.11430336512586692, 0.1798351784160983, 0.16789888309185586, 0.1401577421953687, 0.18253192026266107, 0.1464448396618092, 0.15882031136334973, 0.08322682907470624, 0.07981306117216669, 0.09924495119985677, 0.09644804267134555, 0.08350449959963169, 0.09640093265412508, 0.1016224882426805, 0.10767003962919675, 0.08657086976361483, 0.09152685566458663, 0.12586221569054246, 0.08532695244852762, 0.10487512324702797, 0.11162847646294505, 0.10479411392857818, 0.11297908086229347, 0.11655535286051366, 0.10857363342104254, 0.12643845572176193, 0.12141399263752461, 0.11589529843399138, 0.07221126706106884, 0.10168609810743368, 0.09289354560746377, 0.10582885216358806, 0.13670031797227256, 0.15548469670873855, 0.17085336776540339, 0.16523803191755648, 0.1689896973959727, 0.35832696695383315, 0.2723386329600882, 0.2275377828198507, 0.15592836116657693, 0.17299882757297824, 0.1953017132779753, 0.17284122632441135, 0.2573311471151787, 0.2415602793547058, 0.14292515693645436, 0.22167192187694296, 0.14689423358203657, 0.13402808112708553, 0.28435919070637805, 0.24118935771169636, 0.12339709545468669, 0.1252174345989593, 0.24894471618589498, 0.1728593947055035, 0.1208888026686622, 0.13405090167311484, 0.1474107498705498, 0.1596147538151832, 0.12817890731289006, 0.010653718742407947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009090939423617272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12198883560427387, 0.1332265499813493, 0.0727088743050186, 0.11091225613335465, 0.05814488712182664, 0.06032408012666679, 0.05969638037209146, 0.1309520549815959, 0.10726770905581473, 0.14637011430749103, 9.999999999998899e-05, 0.13191101199755628, 0.026615598472149782, 9.999999999998899e-05, 0.11593561949463416, 0.08677799351549254, 0.08737152459644326, 0.05806636507934215, 0.07566026401508408, 0.1026041943119792, 0.12606903847877182, 0.03772933981232163, 0.1025881658776705, 0.0940069959981894, 0.083752735235323, 0.1009499433229053, 0.24693113647855658, 0.0872547636687323, 0.47440674772829916, 0.6192017970493898, 0.40731778717172196, 0.39518249963259744, 0.2080616176330573, 0.4018681277173677, 0.4106857267155707, 0.4650749973262066, 0.43678654885429813, 0.09341403743289378, 0.10354452393541613, 0.07014278418902209, 0.10994542209171865, 0.10777193925444939, 0.13632763476600007, 0.14896182268191238, 0.1270666352189075, 0.12161575489136589, 0.14025744082225922, 0.21639903930626525, 0.23929741617765898, 0.19503914508300613, 0.1623772805884146, 0.21111179787344514, 0.20691221329803589, 0.1822109187885389, 0.21211872764422834, 0.22008535056214806, 0.2960842103610184, 0.24443119789619905, 0.2976386763421881, 0.391586062020458, 0.41489239782230214, 0.2872373186006163, 0.29810593805300467, 0.23592897179958283, 0.21431140130628545, 0.2106743603030936, 0.17097393255573368, 0.22538558840623035, 0.2594630726223991, 0.25347572550312947, 0.1729284510871486, 0.2500120850697336, 0.1712382641701905, 0.2318337923927294, 0.2317080032021982, 0.22177209391369168, 0.26268835916819133, 0.21021942898989232, 0.25575406754309626, 0.23441669260309184, 0.24833234013515015, 0.23063526138200663, 0.18736583153422814, 0.18947479258528988, 0.1868751448156436, 0.18967933638643553, 0.19543288157198624, 0.18533353651151518, 0.19892699103617828, 0.20195381102601195, 0.18191246668382977, 0.185850671957145, 0.18640823503196713, 0.18264112665249765, 0.689044509300196, 0.19677774991726438, 0.1828842143549555, 0.8391298599040565, 0.7416385187227998, 0.5965768524733059, 0.4487207850810413, 0.4818290053104286, 0.30206406073767844, 0.78340104618641, 0.20242106391298398, 0.16691913910212464, 0.2588352977468281, 0.4316829485671443, 0.3035046464849045, 0.18536777337101784, 0.19466857051225384, 0.2197312312732871, 0.17625841923589358, 0.19167982578440768, 0.2284668873855259, 0.189145440973713, 0.17843838012137603, 0.17515130598435225, 0.08752718796094816, 0.08178005484351814, 0.08856714062867754, 0.09320614958057727, 0.090570781100625, 0.09754354634419382, 0.09297012118703385, 0.07814345122573829, 0.11116449709004173]}, "mutation_prompt": null}
{"id": "d4f6b27b-d114-44eb-b807-1f6d6f210e42", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved local search perturbation for enhanced local optima escape.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.7959433012869088, 0.7959789942881453, 0.8254559668566257, 0.806073428012008, 0.8141275126402222, 0.79235963062453, 0.8058472606286998, 0.7764853372139778, 0.8225897751015764, 0.655805836268511, 0.6261525931685636, 0.6308649998780897, 0.6182197422838052, 0.6339776724337349, 0.6579316535520408, 0.626215590134857, 0.6482191682449441, 0.670876474077535, 0.5680716311018035, 0.5743616311809969, 0.5586746418048424, 0.5663661824428334, 0.5121531952347762, 0.5545022419498995, 0.538410328015076, 0.17346027732287517, 0.6289896968499442, 0.1644200560421858, 0.17108362622745776, 0.1697929307402647, 0.4744321400591861, 0.35999231249528707, 0.46863460905487975, 0.5030230956095068, 0.42446009278614294, 0.14869800055568905, 0.8776991845795534, 0.8859040368774871, 0.8908258111254226, 0.8722688277889146, 0.887664518809709, 0.8984188063587122, 0.859051049213535, 0.9039297105986406, 0.8895969648056474, 0.28938436862462846, 0.4004185532216421, 0.32784525260081465, 0.342087374732329, 0.31765417053915324, 0.3502017826495045, 0.19452149584787837, 0.2059338978599934, 0.29406222767052315, 0.5880664121108771, 0.7275241688321404, 0.21112941217865455, 0.7112817616642764, 0.7786822065452801, 0.337201918253654, 0.7438723413564414, 0.6850543571542623, 0.4822852860195016, 0.13975203564208827, 0.24715963585827672, 0.33006243225954424, 0.19331893226658659, 0.16784836475740017, 0.2713112951078117, 0.36907731093380103, 0.15113813024791978, 0.15186877216661365, 0.19254073606682787, 0.13526169254804832, 0.13860170688207252, 0.1588549304519693, 0.20060275933902638, 0.23463978008070163, 0.1944949270113906, 0.1230028695712061, 0.14294193949706713, 0.12524582018704844, 0.09943794318866717, 0.030522745111644323, 0.02991310228701094, 0.10717013385363539, 0.04473608532548767, 0.02646891728563372, 0.01672559763578718, 0.07696214384001376, 0.1709400979773691, 0.11521884721758413, 0.1830195334447482, 0.11686052739966346, 0.17130634073237527, 0.11486514282865923, 0.17595637191139868, 0.10341874341359436, 0.1205516444816973, 0.13792651788525123, 0.03454809184731533, 0.126114042914502, 0.10129864309374281, 0.061361137244363095, 0.05988022799860371, 0.13530050991235443, 0.11511726957089419, 0.057753489965365445, 0.12319593681520413, 0.20979712605400114, 0.20958605851169454, 0.22298006193740316, 0.20931234757748263, 0.2084086309450387, 0.20389556640441764, 0.1263989285483358, 0.08273819753038403, 0.49175439543109944, 0.5874142830050247, 0.5564194284943795, 0.5825252865352206, 0.4816061780218388, 0.5628946547312379, 0.5626313503853145, 0.5699939457945857, 0.5508901014937848, 0.1257158518237257, 0.12193467029653438, 0.12815264881098543, 0.13405923591813151, 0.15577963257531702, 0.13583811344460484, 0.12023738701012476, 0.1272966608188817, 0.11019978631093597, 0.16553858041591463, 0.1636394574131096, 0.15752250767508924, 0.17235826655072994, 0.15842056339648458, 0.19622016532562725, 0.1694539979517533, 0.18597406391327653, 0.15593005817902028, 0.33425283060357525, 0.4002322803873887, 0.4569292342663045, 0.37888112787265626, 0.36703412294483917, 0.41810678398413115, 0.45502976355311153, 0.47583268322486616, 0.4563952353289322, 0.23225314830664656, 0.3111293936849734, 0.2779654715102936, 0.23492369977974736, 0.25655842430759956, 0.2620451688219396, 0.30315564412785845, 0.3548973752267064, 0.23804974960280278, 0.22503471822094645, 0.22389791656359914, 0.20061880375768837, 0.2348125305611859, 0.2050682239112147, 0.20826650372276712, 0.22148530954028478, 0.19807262774134948, 0.224881534388925, 0.5473113051081611, 0.4377618207965386, 0.531494614336905, 0.5024075165456559, 0.45485321113472366, 0.48384674189354593, 0.2905437411681736, 0.6095004319094945, 0.4696043550389175, 0.5690367186551089, 0.6535354218824421, 0.6906830310335729, 0.6542199902032491, 0.6041566029763639, 0.8054449436778202, 0.7370618058872467, 0.1632393101377615, 0.6499462548047542, 0.31979311981564984, 0.20115883146602642, 0.1985382012396295, 0.201570151106934, 0.2036279347535136, 0.4103600502787115, 0.5473350162052579, 0.6360082314803657, 0.29189247781913474, 0.1845529292833331, 0.1930605359284414, 0.1771215933275767, 0.19068734731031678, 0.17426686135638958, 0.18431819792601944, 0.1781375871194959, 0.19418973231219117, 0.1770598642676081, 0.08435807250420879, 0.09228864246217783, 0.08170304342951462, 0.08711039462158365, 0.08195289353624668, 0.08068050080626887, 0.07457168397609004, 0.08617103493849887, 0.08454356465046198]}, "mutation_prompt": null}
{"id": "54e93dfc-98e2-4cff-a146-9f7a7dfca66f", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved local search perturbation for enhanced local optima escape.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.7959433012869088, 0.7959789942881453, 0.8254559668566257, 0.806073428012008, 0.8141275126402222, 0.79235963062453, 0.8058472606286998, 0.7764853372139778, 0.8225897751015764, 0.655805836268511, 0.6261525931685636, 0.6308649998780897, 0.6182197422838052, 0.6339776724337349, 0.6579316535520408, 0.626215590134857, 0.6482191682449441, 0.670876474077535, 0.5680716311018035, 0.5743616311809969, 0.5586746418048424, 0.5663661824428334, 0.5121531952347762, 0.5545022419498995, 0.538410328015076, 0.17346027732287517, 0.6289896968499442, 0.1644200560421858, 0.17108362622745776, 0.1697929307402647, 0.4744321400591861, 0.35999231249528707, 0.46863460905487975, 0.5030230956095068, 0.42446009278614294, 0.14869800055568905, 0.8776991845795534, 0.8859040368774871, 0.8908258111254226, 0.8722688277889146, 0.887664518809709, 0.8984188063587122, 0.859051049213535, 0.9039297105986406, 0.8895969648056474, 0.28938436862462846, 0.4004185532216421, 0.32784525260081465, 0.342087374732329, 0.31765417053915324, 0.3502017826495045, 0.19452149584787837, 0.2059338978599934, 0.29406222767052315, 0.5880664121108771, 0.7275241688321404, 0.21112941217865455, 0.7112817616642764, 0.7786822065452801, 0.337201918253654, 0.7438723413564414, 0.6850543571542623, 0.4822852860195016, 0.13975203564208827, 0.24715963585827672, 0.33006243225954424, 0.19331893226658659, 0.16784836475740017, 0.2713112951078117, 0.36907731093380103, 0.15113813024791978, 0.15186877216661365, 0.19254073606682787, 0.13526169254804832, 0.13860170688207252, 0.1588549304519693, 0.20060275933902638, 0.23463978008070163, 0.1944949270113906, 0.1230028695712061, 0.14294193949706713, 0.12524582018704844, 0.09943794318866717, 0.030522745111644323, 0.02991310228701094, 0.10717013385363539, 0.04473608532548767, 0.02646891728563372, 0.01672559763578718, 0.07696214384001376, 0.1709400979773691, 0.11521884721758413, 0.1830195334447482, 0.11686052739966346, 0.17130634073237527, 0.11486514282865923, 0.17595637191139868, 0.10341874341359436, 0.1205516444816973, 0.13792651788525123, 0.03454809184731533, 0.126114042914502, 0.10129864309374281, 0.061361137244363095, 0.05988022799860371, 0.13530050991235443, 0.11511726957089419, 0.057753489965365445, 0.12319593681520413, 0.20979712605400114, 0.20958605851169454, 0.22298006193740316, 0.20931234757748263, 0.2084086309450387, 0.20389556640441764, 0.1263989285483358, 0.08273819753038403, 0.49175439543109944, 0.5874142830050247, 0.5564194284943795, 0.5825252865352206, 0.4816061780218388, 0.5628946547312379, 0.5626313503853145, 0.5699939457945857, 0.5508901014937848, 0.1257158518237257, 0.12193467029653438, 0.12815264881098543, 0.13405923591813151, 0.15577963257531702, 0.13583811344460484, 0.12023738701012476, 0.1272966608188817, 0.11019978631093597, 0.16553858041591463, 0.1636394574131096, 0.15752250767508924, 0.17235826655072994, 0.15842056339648458, 0.19622016532562725, 0.1694539979517533, 0.18597406391327653, 0.15593005817902028, 0.33425283060357525, 0.4002322803873887, 0.4569292342663045, 0.37888112787265626, 0.36703412294483917, 0.41810678398413115, 0.45502976355311153, 0.47583268322486616, 0.4563952353289322, 0.23225314830664656, 0.3111293936849734, 0.2779654715102936, 0.23492369977974736, 0.25655842430759956, 0.2620451688219396, 0.30315564412785845, 0.3548973752267064, 0.23804974960280278, 0.22503471822094645, 0.22389791656359914, 0.20061880375768837, 0.2348125305611859, 0.2050682239112147, 0.20826650372276712, 0.22148530954028478, 0.19807262774134948, 0.224881534388925, 0.5473113051081611, 0.4377618207965386, 0.531494614336905, 0.5024075165456559, 0.45485321113472366, 0.48384674189354593, 0.2905437411681736, 0.6095004319094945, 0.4696043550389175, 0.5690367186551089, 0.6535354218824421, 0.6906830310335729, 0.6542199902032491, 0.6041566029763639, 0.8054449436778202, 0.7370618058872467, 0.1632393101377615, 0.6499462548047542, 0.31979311981564984, 0.20115883146602642, 0.1985382012396295, 0.201570151106934, 0.2036279347535136, 0.4103600502787115, 0.5473350162052579, 0.6360082314803657, 0.29189247781913474, 0.1845529292833331, 0.1930605359284414, 0.1771215933275767, 0.19068734731031678, 0.17426686135638958, 0.18431819792601944, 0.1781375871194959, 0.19418973231219117, 0.1770598642676081, 0.08435807250420879, 0.09228864246217783, 0.08170304342951462, 0.08711039462158365, 0.08195289353624668, 0.08068050080626887, 0.07457168397609004, 0.08617103493849887, 0.08454356465046198]}, "mutation_prompt": null}
{"id": "a4b20e4b-1b7e-4658-a83d-756a9e7f8423", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved local search perturbation for enhanced local optima escape.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.7959433012869088, 0.7959789942881453, 0.8254559668566257, 0.806073428012008, 0.8141275126402222, 0.79235963062453, 0.8058472606286998, 0.7764853372139778, 0.8225897751015764, 0.655805836268511, 0.6261525931685636, 0.6308649998780897, 0.6182197422838052, 0.6339776724337349, 0.6579316535520408, 0.626215590134857, 0.6482191682449441, 0.670876474077535, 0.5680716311018035, 0.5743616311809969, 0.5586746418048424, 0.5663661824428334, 0.5121531952347762, 0.5545022419498995, 0.538410328015076, 0.17346027732287517, 0.6289896968499442, 0.1644200560421858, 0.17108362622745776, 0.1697929307402647, 0.4744321400591861, 0.35999231249528707, 0.46863460905487975, 0.5030230956095068, 0.42446009278614294, 0.14869800055568905, 0.8776991845795534, 0.8859040368774871, 0.8908258111254226, 0.8722688277889146, 0.887664518809709, 0.8984188063587122, 0.859051049213535, 0.9039297105986406, 0.8895969648056474, 0.28938436862462846, 0.4004185532216421, 0.32784525260081465, 0.342087374732329, 0.31765417053915324, 0.3502017826495045, 0.19452149584787837, 0.2059338978599934, 0.29406222767052315, 0.5880664121108771, 0.7275241688321404, 0.21112941217865455, 0.7112817616642764, 0.7786822065452801, 0.337201918253654, 0.7438723413564414, 0.6850543571542623, 0.4822852860195016, 0.13975203564208827, 0.24715963585827672, 0.33006243225954424, 0.19331893226658659, 0.16784836475740017, 0.2713112951078117, 0.36907731093380103, 0.15113813024791978, 0.15186877216661365, 0.19254073606682787, 0.13526169254804832, 0.13860170688207252, 0.1588549304519693, 0.20060275933902638, 0.23463978008070163, 0.1944949270113906, 0.1230028695712061, 0.14294193949706713, 0.12524582018704844, 0.09943794318866717, 0.030522745111644323, 0.02991310228701094, 0.10717013385363539, 0.04473608532548767, 0.02646891728563372, 0.01672559763578718, 0.07696214384001376, 0.1709400979773691, 0.11521884721758413, 0.1830195334447482, 0.11686052739966346, 0.17130634073237527, 0.11486514282865923, 0.17595637191139868, 0.10341874341359436, 0.1205516444816973, 0.13792651788525123, 0.03454809184731533, 0.126114042914502, 0.10129864309374281, 0.061361137244363095, 0.05988022799860371, 0.13530050991235443, 0.11511726957089419, 0.057753489965365445, 0.12319593681520413, 0.20979712605400114, 0.20958605851169454, 0.22298006193740316, 0.20931234757748263, 0.2084086309450387, 0.20389556640441764, 0.1263989285483358, 0.08273819753038403, 0.49175439543109944, 0.5874142830050247, 0.5564194284943795, 0.5825252865352206, 0.4816061780218388, 0.5628946547312379, 0.5626313503853145, 0.5699939457945857, 0.5508901014937848, 0.1257158518237257, 0.12193467029653438, 0.12815264881098543, 0.13405923591813151, 0.15577963257531702, 0.13583811344460484, 0.12023738701012476, 0.1272966608188817, 0.11019978631093597, 0.16553858041591463, 0.1636394574131096, 0.15752250767508924, 0.17235826655072994, 0.15842056339648458, 0.19622016532562725, 0.1694539979517533, 0.18597406391327653, 0.15593005817902028, 0.33425283060357525, 0.4002322803873887, 0.4569292342663045, 0.37888112787265626, 0.36703412294483917, 0.41810678398413115, 0.45502976355311153, 0.47583268322486616, 0.4563952353289322, 0.23225314830664656, 0.3111293936849734, 0.2779654715102936, 0.23492369977974736, 0.25655842430759956, 0.2620451688219396, 0.30315564412785845, 0.3548973752267064, 0.23804974960280278, 0.22503471822094645, 0.22389791656359914, 0.20061880375768837, 0.2348125305611859, 0.2050682239112147, 0.20826650372276712, 0.22148530954028478, 0.19807262774134948, 0.224881534388925, 0.5473113051081611, 0.4377618207965386, 0.531494614336905, 0.5024075165456559, 0.45485321113472366, 0.48384674189354593, 0.2905437411681736, 0.6095004319094945, 0.4696043550389175, 0.5690367186551089, 0.6535354218824421, 0.6906830310335729, 0.6542199902032491, 0.6041566029763639, 0.8054449436778202, 0.7370618058872467, 0.1632393101377615, 0.6499462548047542, 0.31979311981564984, 0.20115883146602642, 0.1985382012396295, 0.201570151106934, 0.2036279347535136, 0.4103600502787115, 0.5473350162052579, 0.6360082314803657, 0.29189247781913474, 0.1845529292833331, 0.1930605359284414, 0.1771215933275767, 0.19068734731031678, 0.17426686135638958, 0.18431819792601944, 0.1781375871194959, 0.19418973231219117, 0.1770598642676081, 0.08435807250420879, 0.09228864246217783, 0.08170304342951462, 0.08711039462158365, 0.08195289353624668, 0.08068050080626887, 0.07457168397609004, 0.08617103493849887, 0.08454356465046198]}, "mutation_prompt": null}
{"id": "f26139e7-2669-4e75-b55b-84b0341390ce", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.20 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced dynamic local search adaptation based on evaluation ratio.", "configspace": "", "generation": 84, "fitness": 0.3227525989355025, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.23.", "error": "", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.800438661813526, 0.7776768434410181, 0.7915258349029858, 0.7952148714480536, 0.7697021923943372, 0.8105277108818473, 0.7882988849517749, 0.7857263396667225, 0.7816122578986364, 0.6384930617373943, 0.6096767126283256, 0.6043002650123879, 0.6304862602474215, 0.5867514250442639, 0.63563170084137, 0.6140345636610116, 0.5808009543060972, 0.5799448934833978, 0.17154903462446525, 0.5620946814493614, 0.48534246456044383, 0.503192671778655, 0.5090615904467914, 0.5363308063888712, 0.48965825492417125, 0.4821930822744809, 0.5840082706820406, 0.47336032876831, 0.16673294740365763, 0.16780775444433205, 0.17053800702569022, 0.47120965876573906, 0.16143873223442684, 0.16400954050980654, 0.5180687650781983, 0.15923894499968771, 0.8853416428836638, 0.8929566851991954, 0.8477545154673846, 0.8729206528658486, 0.918533230406482, 0.9042292690511641, 0.8858194732965501, 0.8877434931397785, 0.8706672268920969, 0.2858282151985597, 0.2613337549858151, 0.31422554691428306, 0.3653402316226214, 0.34835833098659075, 0.4451536032383989, 0.2293787083241886, 0.2755110223720797, 0.2671285890120315, 0.3208234700858462, 0.45782140428763873, 0.5301760425578737, 0.6477364915199773, 0.4849664278264795, 0.25123260749838106, 0.528616224014312, 0.6614259843232305, 0.6833714167993149, 0.22643744498562113, 0.13686418892620955, 0.18287596891080804, 0.17613241090800258, 0.1744980424202187, 0.13820576888720937, 0.14592933957737497, 0.15641135685253849, 0.21213506354758493, 0.1682846772046931, 0.13515845334185184, 0.14776543258138386, 0.1374227828215746, 0.19196970694360493, 0.13973670019303186, 0.16299600586904983, 0.13358566669372796, 0.14539257163177677, 0.05959085910566497, 0.11353152861668825, 0.09789956928179544, 0.04159159590006489, 0.017266765984300436, 0.031694801795278504, 0.027576721874560284, 0.0454870115250493, 0.09115783279008594, 0.16237706892690673, 0.18511024895769979, 0.14048554411000913, 0.1843699888069843, 0.14712946935382665, 0.07331536341095668, 0.1407127301329396, 0.1503625749032117, 0.1814202846335906, 0.14590214656149436, 0.05640613951667528, 0.1661908267983515, 0.14346267128636903, 0.06095779467489537, 0.11617298450083036, 0.1124254721730511, 0.0971976413644523, 0.07103269360986975, 0.16390162550606424, 0.11770744436112313, 0.1436061116260593, 0.17648747407724463, 0.19332053682771122, 0.1408961324250717, 0.14127333200294379, 0.13517261854916574, 0.15130254841851276, 0.5339534836652424, 0.5373199677630608, 0.5868483952651053, 0.5150866416230439, 0.5573630258728863, 0.5741801747155318, 0.5144491120220556, 0.5551981524991967, 0.5462154623360366, 0.13188180520652748, 0.11092305974424488, 0.168389372020727, 0.12398858548166258, 0.09861754990744631, 0.1340137331346134, 0.1334015373164199, 0.13841365912639014, 0.12459816525972456, 0.18552323037986496, 0.15995521717444716, 0.17275991594602835, 0.16095792592957991, 0.14940762385859196, 0.13752071973616298, 0.2016545609536271, 0.1580859540098356, 0.1518432830684291, 0.35903336208157544, 0.38372456532097454, 0.4219128712344603, 0.3727081505422145, 0.37402618360117335, 0.3748596838701945, 0.46624894872321043, 0.43818720272704603, 0.42376203457190564, 0.3130947080242965, 0.2655327990169435, 0.26563694731843635, 0.19926458343882691, 0.2786140065218118, 0.2938545934819641, 0.28460701158043444, 0.3400603418406286, 0.26948452315172455, 0.19172562676642024, 0.21969977686170095, 0.203129437141783, 0.20233707265529433, 0.20543285264428313, 0.22994512311072135, 0.22161046436491671, 0.22054379515015066, 0.19877306989942134, 0.21136433782678266, 0.240436724148672, 0.23590525601522927, 0.5164646030197968, 0.5265443007883978, 0.19303223130507596, 0.5230990468386376, 0.5646293465846051, 0.391527012633368, 0.1666657598501854, 0.17441035351113054, 0.1781079502751769, 0.7458793123928014, 0.6693843471285105, 0.789300493461936, 0.5203137257929304, 0.13915264593037702, 0.5951052566525354, 0.5601426033170034, 0.27540540505194744, 0.18821959713619585, 0.1998018566273666, 0.16617886799145376, 0.16247888583110903, 0.19945647449747028, 0.5319759539117664, 0.20550455301321946, 0.17968416838513135, 0.17679962644532554, 0.188749387400739, 0.20602995042472472, 0.1777424253757809, 0.19070232452876956, 0.20869328285676814, 0.1985546298209374, 0.1713546031012022, 0.08083059101126988, 0.08462868691754777, 0.08508686445370617, 0.08053601179760339, 0.08444852457575269, 0.07970012778460622, 0.08512127924871749, 0.08374156263211385, 0.08393940393991794]}, "mutation_prompt": null}
{"id": "0cc0ac35-e802-4899-a129-99a2bf424322", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved local search perturbation for enhanced local optima escape.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.7959433012869088, 0.7959789942881453, 0.8254559668566257, 0.806073428012008, 0.8141275126402222, 0.79235963062453, 0.8058472606286998, 0.7764853372139778, 0.8225897751015764, 0.655805836268511, 0.6261525931685636, 0.6308649998780897, 0.6182197422838052, 0.6339776724337349, 0.6579316535520408, 0.626215590134857, 0.6482191682449441, 0.670876474077535, 0.5680716311018035, 0.5743616311809969, 0.5586746418048424, 0.5663661824428334, 0.5121531952347762, 0.5545022419498995, 0.538410328015076, 0.17346027732287517, 0.6289896968499442, 0.1644200560421858, 0.17108362622745776, 0.1697929307402647, 0.4744321400591861, 0.35999231249528707, 0.46863460905487975, 0.5030230956095068, 0.42446009278614294, 0.14869800055568905, 0.8776991845795534, 0.8859040368774871, 0.8908258111254226, 0.8722688277889146, 0.887664518809709, 0.8984188063587122, 0.859051049213535, 0.9039297105986406, 0.8895969648056474, 0.28938436862462846, 0.4004185532216421, 0.32784525260081465, 0.342087374732329, 0.31765417053915324, 0.3502017826495045, 0.19452149584787837, 0.2059338978599934, 0.29406222767052315, 0.5880664121108771, 0.7275241688321404, 0.21112941217865455, 0.7112817616642764, 0.7786822065452801, 0.337201918253654, 0.7438723413564414, 0.6850543571542623, 0.4822852860195016, 0.13975203564208827, 0.24715963585827672, 0.33006243225954424, 0.19331893226658659, 0.16784836475740017, 0.2713112951078117, 0.36907731093380103, 0.15113813024791978, 0.15186877216661365, 0.19254073606682787, 0.13526169254804832, 0.13860170688207252, 0.1588549304519693, 0.20060275933902638, 0.23463978008070163, 0.1944949270113906, 0.1230028695712061, 0.14294193949706713, 0.12524582018704844, 0.09943794318866717, 0.030522745111644323, 0.02991310228701094, 0.10717013385363539, 0.04473608532548767, 0.02646891728563372, 0.01672559763578718, 0.07696214384001376, 0.1709400979773691, 0.11521884721758413, 0.1830195334447482, 0.11686052739966346, 0.17130634073237527, 0.11486514282865923, 0.17595637191139868, 0.10341874341359436, 0.1205516444816973, 0.13792651788525123, 0.03454809184731533, 0.126114042914502, 0.10129864309374281, 0.061361137244363095, 0.05988022799860371, 0.13530050991235443, 0.11511726957089419, 0.057753489965365445, 0.12319593681520413, 0.20979712605400114, 0.20958605851169454, 0.22298006193740316, 0.20931234757748263, 0.2084086309450387, 0.20389556640441764, 0.1263989285483358, 0.08273819753038403, 0.49175439543109944, 0.5874142830050247, 0.5564194284943795, 0.5825252865352206, 0.4816061780218388, 0.5628946547312379, 0.5626313503853145, 0.5699939457945857, 0.5508901014937848, 0.1257158518237257, 0.12193467029653438, 0.12815264881098543, 0.13405923591813151, 0.15577963257531702, 0.13583811344460484, 0.12023738701012476, 0.1272966608188817, 0.11019978631093597, 0.16553858041591463, 0.1636394574131096, 0.15752250767508924, 0.17235826655072994, 0.15842056339648458, 0.19622016532562725, 0.1694539979517533, 0.18597406391327653, 0.15593005817902028, 0.33425283060357525, 0.4002322803873887, 0.4569292342663045, 0.37888112787265626, 0.36703412294483917, 0.41810678398413115, 0.45502976355311153, 0.47583268322486616, 0.4563952353289322, 0.23225314830664656, 0.3111293936849734, 0.2779654715102936, 0.23492369977974736, 0.25655842430759956, 0.2620451688219396, 0.30315564412785845, 0.3548973752267064, 0.23804974960280278, 0.22503471822094645, 0.22389791656359914, 0.20061880375768837, 0.2348125305611859, 0.2050682239112147, 0.20826650372276712, 0.22148530954028478, 0.19807262774134948, 0.224881534388925, 0.5473113051081611, 0.4377618207965386, 0.531494614336905, 0.5024075165456559, 0.45485321113472366, 0.48384674189354593, 0.2905437411681736, 0.6095004319094945, 0.4696043550389175, 0.5690367186551089, 0.6535354218824421, 0.6906830310335729, 0.6542199902032491, 0.6041566029763639, 0.8054449436778202, 0.7370618058872467, 0.1632393101377615, 0.6499462548047542, 0.31979311981564984, 0.20115883146602642, 0.1985382012396295, 0.201570151106934, 0.2036279347535136, 0.4103600502787115, 0.5473350162052579, 0.6360082314803657, 0.29189247781913474, 0.1845529292833331, 0.1930605359284414, 0.1771215933275767, 0.19068734731031678, 0.17426686135638958, 0.18431819792601944, 0.1781375871194959, 0.19418973231219117, 0.1770598642676081, 0.08435807250420879, 0.09228864246217783, 0.08170304342951462, 0.08711039462158365, 0.08195289353624668, 0.08068050080626887, 0.07457168397609004, 0.08617103493849887, 0.08454356465046198]}, "mutation_prompt": null}
{"id": "fc9dd337-a51c-4d20-b1ee-e2185b8b8510", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[i])  # Modified mutation strategy\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced adaptive mutation by modifying mutation strategy for increased exploration.", "configspace": "", "generation": 86, "fitness": 0.3337392965747923, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.7977827012188236, 0.8082213830362501, 0.8148275318481707, 0.8005285709409871, 0.7971355528862029, 0.7935040103348755, 0.7967043043733801, 0.7900685074048013, 0.8098866946036807, 0.6251579424676483, 0.6260130359015192, 0.6079330118712094, 0.6326155485624845, 0.6170694333134041, 0.6445235918671108, 0.6528104193419021, 0.6595855638510375, 0.6339837661803001, 0.4661696673420619, 0.346084537206079, 0.5640373131088686, 0.5126494395435, 0.48599671825254886, 0.5037789022895196, 0.5188537427563744, 0.47583217600278194, 0.4631473415328742, 0.3482245975192716, 0.373994033194458, 0.36469592177545496, 0.33700159962837384, 0.15607145049501447, 0.16844357918119823, 0.34578141698491793, 0.39743342419621375, 0.16269297463475174, 0.9350537535671022, 0.9409680216120192, 0.9200571222835338, 0.9106448759770954, 0.9152860539635224, 0.9245860159683328, 0.9116584307635618, 0.9195952859646649, 0.9550642857023675, 0.32874950736203146, 0.2424571968546173, 0.34253804511937924, 0.27729297710518497, 0.3086374771185829, 0.3740611324343519, 0.2121388191440441, 0.18745331827237965, 0.3123260570016978, 0.7163229528539536, 0.6826499763618858, 0.6837551217899346, 0.6766273725305638, 0.5403378177109974, 0.6613454594239554, 0.5301583642552963, 0.5705055380614534, 0.6203222348928612, 0.2563480316314537, 0.11671094315089636, 0.2750748414400921, 0.11978595460598085, 0.1673046924783379, 0.16664041341846847, 0.15382212207810586, 0.15725818394906, 0.28030175180867056, 0.13387666588724445, 0.15267541085495573, 0.17259895560734972, 0.13214211959033018, 0.22159139463603883, 0.21328586168057184, 0.14536779234170283, 0.12960622999262905, 0.18170940168984961, 0.014758406444529859, 0.09203369747566303, 0.053806367726004445, 0.04696588596772766, 0.07777591210158374, 0.05795302608482178, 0.0836107770354445, 0.031012574413792016, 0.07895488833482434, 0.12777161998275643, 0.17788668221538861, 0.13063301002288386, 0.13910481316483314, 0.10729977405779445, 0.22350317828684185, 0.16888668525111494, 0.12186436568795944, 0.15245674605996773, 0.1597488308258458, 0.028418252531798638, 0.13493068655211027, 0.06031032052589158, 0.07685476942939784, 0.10775365248164948, 0.11183465476136467, 0.12117841854428624, 0.09264224703968216, 0.16162840634068742, 0.11405552665177277, 0.19487968038621106, 0.17271641379015457, 0.10991575272457443, 0.16922097200730546, 0.2590726453882306, 0.1483686254532155, 0.10481082492714011, 0.5527700550906741, 0.5772714985867629, 0.5172936177234566, 0.5403731636046123, 0.5217947613877139, 0.5107102786069022, 0.52587203393847, 0.52209112194139, 0.5486119978443036, 0.11989046006853588, 0.11992946781981606, 0.1260362619007166, 0.12456685937115874, 0.133743217904431, 0.12196876204694396, 0.14743398438984223, 0.14382644881195283, 0.1402800491481172, 0.21873175761631236, 0.1398703688134585, 0.15498481788606955, 0.18280228624701556, 0.1726746130247131, 0.19579044910124255, 0.22882298137842172, 0.15115712649572777, 0.15897797519873125, 0.36579430722517203, 0.2652002192359316, 0.4039373475440975, 0.411427460938266, 0.41518732967456384, 0.39223243971267197, 0.453346033365544, 0.4617442524439197, 0.42139916690056023, 0.2640190317969586, 0.23978089610380748, 0.2755773413781534, 0.2847274488340169, 0.3256139726175912, 0.3208915609867756, 0.2977503634276716, 0.354885619189395, 0.30172435327423786, 0.23446260584522227, 0.2062588171245906, 0.2033985710518963, 0.22219056337668497, 0.2027150270663769, 0.1901770595347605, 0.19777412722011978, 0.19798737672994648, 0.20887839326505075, 0.21188579255952122, 0.2380939451134464, 0.49474268463257176, 0.5345376724305805, 0.211577943790764, 0.23206311698518656, 0.21713465708075652, 0.4678986194533623, 0.26381539125737774, 0.19100336172137522, 0.738121799189828, 0.7622781534963853, 0.6721741998193379, 0.20151771853694955, 0.6760866718486127, 0.6705460587051015, 0.642193249365798, 0.5851069323403034, 0.33522993618886043, 0.20632094134662893, 0.18899961233944795, 0.2009141643622031, 0.3011406020295132, 0.20161835498068603, 0.3034397092107992, 0.15068446475308483, 0.2024543383230999, 0.1723807881387287, 0.1811139215005555, 0.1911466751025599, 0.17726105784773738, 0.1849410352255434, 0.1806610212528158, 0.18036430447030538, 0.17547576998696024, 0.19030455045489947, 0.07240122195308107, 0.08587727815678203, 0.08540808338395833, 0.08950298991236583, 0.08149798358652582, 0.07924620633421442, 0.08796078944564145, 0.0806915637817669, 0.08196114868722848]}, "mutation_prompt": null}
{"id": "10b5a18c-e7cf-4530-80dd-88fb2711b2f9", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved local search perturbation for enhanced local optima escape.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.7959433012869088, 0.7959789942881453, 0.8254559668566257, 0.806073428012008, 0.8141275126402222, 0.79235963062453, 0.8058472606286998, 0.7764853372139778, 0.8225897751015764, 0.655805836268511, 0.6261525931685636, 0.6308649998780897, 0.6182197422838052, 0.6339776724337349, 0.6579316535520408, 0.626215590134857, 0.6482191682449441, 0.670876474077535, 0.5680716311018035, 0.5743616311809969, 0.5586746418048424, 0.5663661824428334, 0.5121531952347762, 0.5545022419498995, 0.538410328015076, 0.17346027732287517, 0.6289896968499442, 0.1644200560421858, 0.17108362622745776, 0.1697929307402647, 0.4744321400591861, 0.35999231249528707, 0.46863460905487975, 0.5030230956095068, 0.42446009278614294, 0.14869800055568905, 0.8776991845795534, 0.8859040368774871, 0.8908258111254226, 0.8722688277889146, 0.887664518809709, 0.8984188063587122, 0.859051049213535, 0.9039297105986406, 0.8895969648056474, 0.28938436862462846, 0.4004185532216421, 0.32784525260081465, 0.342087374732329, 0.31765417053915324, 0.3502017826495045, 0.19452149584787837, 0.2059338978599934, 0.29406222767052315, 0.5880664121108771, 0.7275241688321404, 0.21112941217865455, 0.7112817616642764, 0.7786822065452801, 0.337201918253654, 0.7438723413564414, 0.6850543571542623, 0.4822852860195016, 0.13975203564208827, 0.24715963585827672, 0.33006243225954424, 0.19331893226658659, 0.16784836475740017, 0.2713112951078117, 0.36907731093380103, 0.15113813024791978, 0.15186877216661365, 0.19254073606682787, 0.13526169254804832, 0.13860170688207252, 0.1588549304519693, 0.20060275933902638, 0.23463978008070163, 0.1944949270113906, 0.1230028695712061, 0.14294193949706713, 0.12524582018704844, 0.09943794318866717, 0.030522745111644323, 0.02991310228701094, 0.10717013385363539, 0.04473608532548767, 0.02646891728563372, 0.01672559763578718, 0.07696214384001376, 0.1709400979773691, 0.11521884721758413, 0.1830195334447482, 0.11686052739966346, 0.17130634073237527, 0.11486514282865923, 0.17595637191139868, 0.10341874341359436, 0.1205516444816973, 0.13792651788525123, 0.03454809184731533, 0.126114042914502, 0.10129864309374281, 0.061361137244363095, 0.05988022799860371, 0.13530050991235443, 0.11511726957089419, 0.057753489965365445, 0.12319593681520413, 0.20979712605400114, 0.20958605851169454, 0.22298006193740316, 0.20931234757748263, 0.2084086309450387, 0.20389556640441764, 0.1263989285483358, 0.08273819753038403, 0.49175439543109944, 0.5874142830050247, 0.5564194284943795, 0.5825252865352206, 0.4816061780218388, 0.5628946547312379, 0.5626313503853145, 0.5699939457945857, 0.5508901014937848, 0.1257158518237257, 0.12193467029653438, 0.12815264881098543, 0.13405923591813151, 0.15577963257531702, 0.13583811344460484, 0.12023738701012476, 0.1272966608188817, 0.11019978631093597, 0.16553858041591463, 0.1636394574131096, 0.15752250767508924, 0.17235826655072994, 0.15842056339648458, 0.19622016532562725, 0.1694539979517533, 0.18597406391327653, 0.15593005817902028, 0.33425283060357525, 0.4002322803873887, 0.4569292342663045, 0.37888112787265626, 0.36703412294483917, 0.41810678398413115, 0.45502976355311153, 0.47583268322486616, 0.4563952353289322, 0.23225314830664656, 0.3111293936849734, 0.2779654715102936, 0.23492369977974736, 0.25655842430759956, 0.2620451688219396, 0.30315564412785845, 0.3548973752267064, 0.23804974960280278, 0.22503471822094645, 0.22389791656359914, 0.20061880375768837, 0.2348125305611859, 0.2050682239112147, 0.20826650372276712, 0.22148530954028478, 0.19807262774134948, 0.224881534388925, 0.5473113051081611, 0.4377618207965386, 0.531494614336905, 0.5024075165456559, 0.45485321113472366, 0.48384674189354593, 0.2905437411681736, 0.6095004319094945, 0.4696043550389175, 0.5690367186551089, 0.6535354218824421, 0.6906830310335729, 0.6542199902032491, 0.6041566029763639, 0.8054449436778202, 0.7370618058872467, 0.1632393101377615, 0.6499462548047542, 0.31979311981564984, 0.20115883146602642, 0.1985382012396295, 0.201570151106934, 0.2036279347535136, 0.4103600502787115, 0.5473350162052579, 0.6360082314803657, 0.29189247781913474, 0.1845529292833331, 0.1930605359284414, 0.1771215933275767, 0.19068734731031678, 0.17426686135638958, 0.18431819792601944, 0.1781375871194959, 0.19418973231219117, 0.1770598642676081, 0.08435807250420879, 0.09228864246217783, 0.08170304342951462, 0.08711039462158365, 0.08195289353624668, 0.08068050080626887, 0.07457168397609004, 0.08617103493849887, 0.08454356465046198]}, "mutation_prompt": null}
{"id": "b3b5a932-0fbb-4740-ae71-3543dca3469c", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection with stochastic ranking\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if np.random.rand() < 0.5 or trial_fitness < fitness[i]:  # Incorporating robustness check\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Introduced stochastic ranking to enhance selection by incorporating trial solution robustness.", "configspace": "", "generation": 88, "fitness": 0.18751742306000055, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.516460343454618, 0.4791104775840185, 0.585753761014595, 0.5033625090331398, 0.5386981524643437, 0.589253137813406, 0.5845113826451231, 0.4896138548342892, 0.5667998534597958, 0.28860793875052215, 0.2561917644079348, 0.28730074733901834, 0.26970685549254114, 0.21583413053218492, 0.2669882154591591, 0.20052697083285043, 0.19238537732618533, 0.13197685955835792, 0.10356275543155224, 0.08601495875475862, 0.09572949313637602, 0.10053824851812554, 0.10156808012488416, 0.10036274408732537, 0.10633894037302927, 0.11287783412547592, 0.10165120198263489, 0.0881989887239435, 0.08023270638482882, 0.08046447803068257, 0.0938303135837073, 0.0878751850436662, 0.10042577394041419, 0.08602099620401238, 0.08340924003435024, 0.09143192974514947, 0.910824211021121, 0.7447130061669871, 0.8320035659197387, 0.8409918217118435, 0.742700326360046, 0.8035059550219845, 0.8867917874404295, 0.7560757102632099, 0.7085189751854, 0.1735022796859046, 0.12359759693079164, 0.1806061297324706, 0.1500254064094575, 0.13799604007291488, 0.2027242107798527, 0.15245954675582363, 0.12197071851004349, 0.13829917069368936, 0.16723283840829828, 0.2182119405745816, 0.22077081963333978, 0.1884931132237736, 0.27144653978953526, 0.2351756278062609, 0.1843002185236965, 0.20396888916271405, 0.22441269778636874, 0.07708968511428427, 0.0988375543107779, 0.09898903210510523, 0.11544872778742699, 0.07560988366364996, 0.09511713704194302, 0.11918194869060916, 0.13066496874627787, 0.11900193468002285, 0.12995407307147888, 0.10469002162052565, 0.08594235450699017, 0.11076637657980737, 0.09532978841138573, 0.11995182569102347, 0.10523064833863172, 0.07682740962093704, 0.1330624063162792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04167766395572814, 0.05461273765854202, 0.04047636977234337, 0.0139305045646404, 0.07107219153445221, 0.04529595639643613, 0.14071567075341862, 0.05847283599409514, 0.03355070567846874, 9.999999999998899e-05, 0.012087030633125107, 0.000434817192805359, 0.030928180998687993, 0.008139177258464914, 0.012500171095052637, 0.005033458629298493, 9.999999999998899e-05, 0.022736633837162845, 0.056255623056045034, 0.06749178049098259, 0.06701642974552502, 0.05388843873791771, 0.04742887096566628, 0.09923510923428713, 0.08035980378165064, 0.0836316158914846, 0.08576344703594896, 0.3547973693256635, 0.36788499775310646, 0.36134096061140075, 0.363964556792604, 0.37856323335838415, 0.409095774748482, 0.38644667150817036, 0.359947975602411, 0.36752030601245755, 0.09166509652570698, 0.1021769754339279, 0.0776744182102238, 0.10178104425125567, 0.0865259898288121, 0.09280712794311441, 0.08594465747056967, 0.08979611749393501, 0.0844885501307221, 0.1656183581358297, 0.16648682594103303, 0.1564386095256809, 0.17951073485459967, 0.15709890119416536, 0.17561916557321278, 0.14399685848966837, 0.13098262888909917, 0.14233185153636496, 0.24840813738637002, 0.2277420283525896, 0.26145851367847295, 0.22845696158201567, 0.21526167264241836, 0.2741458877431251, 0.2682863392048711, 0.24128099108228884, 0.26338948089136305, 0.20378607094515777, 0.16054114455952528, 0.17748883345639532, 0.1557291842533215, 0.12054053828101419, 0.1668125018785619, 0.1867677768551148, 0.18982756404525736, 0.20632336882987934, 0.1979265976456691, 0.18802365864217885, 0.2059696593783158, 0.18562484984342986, 0.18483818010174857, 0.17552241184607043, 0.19547843065521064, 0.1828574386708759, 0.20106370728361667, 0.18762461216365844, 0.17315652492496214, 0.1905075055834442, 0.1758683456226363, 0.1725878063743861, 0.18530431419054672, 0.20241377045024223, 0.18113153353980993, 0.18637524990153786, 0.16374603745362926, 0.15863691937758173, 0.15730654558603696, 0.19755756801155577, 0.16163497682566508, 0.16109987587612684, 0.22645079789593558, 0.1707744204685807, 0.16372160828561932, 0.1579696635722463, 0.16741641442823474, 0.20479976480381534, 0.1621506837281701, 0.18312527196390394, 0.17924951068816808, 0.19669898280713516, 0.18487537809361665, 0.1513203441213058, 0.19164882882693957, 0.18007992385370541, 0.18750581384302367, 0.17676452135912857, 0.18594244200353371, 0.17659564038824738, 0.1757879014952265, 0.17144040489714862, 0.175201347383645, 0.07593192354693079, 0.06835866605384633, 0.08152016955239483, 0.06765264117569536, 0.06970148791031838, 0.07465156885093349, 0.07962417591001991, 0.07267880242602498, 0.08464866288268291]}, "mutation_prompt": null}
{"id": "9ccdfdce-5c88-4dea-b3c4-814f3314ab50", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n            # Adaptive population size based on remaining budget\n            self.population_size = int(10 * self.dim * (1 - evaluations / self.budget))\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced diversity through adaptive population resizing.", "configspace": "", "generation": 89, "fitness": 0.34459542460933906, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.25.", "error": "", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.8255634685011525, 0.8191155014429481, 0.8111254227790785, 0.8104945749174703, 0.8288785785348606, 0.8152927144341182, 0.8332662098825475, 0.8029280824135275, 0.8122631140426095, 0.6819164031870772, 0.6877217532552442, 0.6916928986158568, 0.6775936658026402, 0.6971647677629964, 0.6663085757607661, 0.6783196483611216, 0.6934229391362436, 0.7107425236108755, 0.6619950405166783, 0.6151596311632327, 0.641770891675701, 0.6439168557631718, 0.17147596169898893, 0.17612881756620358, 0.6504287173508962, 0.5304131300722461, 0.6663160988473626, 0.5537032354255942, 0.3033551379039283, 0.1337766054445756, 0.5884151047657546, 0.13515081790326455, 0.16355381349952713, 0.14962671382554105, 0.4014905709277602, 0.14341339957167343, 0.9266543840437841, 0.90443801429483, 0.8734120713313033, 0.8777029433392967, 0.90729938398296, 0.8851730052451441, 0.8724358266020413, 0.896370418984781, 0.8915320029103535, 0.33178861677164984, 0.367030970060258, 0.22472242145423993, 0.27719678050107444, 0.3348626459622184, 0.3453733028398944, 0.27272949999933593, 0.23700920177428564, 0.3394566003879168, 0.686167823488401, 0.3081155717863301, 0.3470099079530732, 0.8016540088600127, 0.7132708362031907, 0.32984318008643854, 0.22212772182566687, 0.7173737570994081, 0.7770179412397422, 0.164066200183277, 0.20316872304621325, 0.15499157906040617, 0.18615908801117986, 0.4162801289992031, 0.2220593506716455, 0.16703477397762978, 0.15816379136424963, 0.15485543913505206, 0.1412311601178512, 0.14615528625063867, 0.1596189298762214, 0.16617732429318943, 0.20075664268803006, 0.14047594093248683, 0.15686843528198047, 0.15097430412300705, 0.12697588158606854, 0.03402753428270555, 0.0002974088608185266, 0.10232891538464861, 0.013684067304536085, 0.14726582210973593, 0.04013610474771245, 0.02749753356914897, 0.11674082042277878, 0.05740046344864225, 0.20212054909147392, 0.09745074534534248, 0.1896121214120423, 0.10270369513187438, 0.08470789395433276, 0.05194689137357145, 0.2019500176922977, 0.1432479559939015, 0.24839651830992604, 0.09049359704258297, 0.03854674117332524, 0.18117064630818014, 0.08915511513130114, 0.09196488523233604, 0.09397441005047147, 0.08455673094488525, 0.14786268703397631, 0.08589064491042009, 0.17204605793179728, 0.2229543597302791, 0.19484712691016337, 0.1870562591146352, 0.21024070401699768, 0.2526120207354665, 0.22242240328680152, 0.15595281757876878, 0.11552009543334041, 0.5518098864454579, 0.5761547098408057, 0.5533219326073796, 0.5017079615460269, 0.517770075822811, 0.6031527204377058, 0.6037831750178138, 0.4863215166142011, 0.5347148611277303, 0.10583930168921574, 0.13548603581873286, 0.1283769502793426, 0.148187572711866, 0.11272348199615101, 0.13873500953283324, 0.1384708428567688, 0.096236993812859, 0.13241098941374763, 0.23307546874141982, 0.23266738773547613, 0.3071727269171446, 0.25706334025589717, 0.28260314631543715, 0.19486332248637506, 0.25472185569039896, 0.15662872111973358, 0.23159993203843476, 0.46687797294847977, 0.3615832389079592, 0.3984573244978844, 0.42972629122109074, 0.2880237689977173, 0.46139952312729016, 0.4459444524843531, 0.5919531868624681, 0.4660737122279215, 0.29944889912608863, 0.3317612963493797, 0.25989008851643824, 0.34125596918364487, 0.29071052915574636, 0.29410923116910126, 0.28260084330509627, 0.37334081296763355, 0.31468811552475995, 0.1952404409458569, 0.1987657217682154, 0.20060316229940767, 0.19045041867758394, 0.21386473855969956, 0.23291838701439305, 0.22675839447947232, 0.21539060171835422, 0.19640971582594702, 0.23401395832695038, 0.5594909669332944, 0.6732511132585699, 0.44860570140302514, 0.5995592542107782, 0.20414415958461574, 0.228189272629853, 0.23100297511020385, 0.2383974970154803, 0.17746450600997554, 0.1609638365475301, 0.7167051749356323, 0.753501994162632, 0.6234929120085473, 0.7607585220722644, 0.15287617683619392, 0.7758862246350879, 0.7123679298789221, 0.2339352039378727, 0.24006467500317097, 0.15663277603126513, 0.4092071609882951, 0.20424072247225222, 0.34743244688420205, 0.1981065839440016, 0.16441447615707405, 0.655168688519363, 0.1868014927714371, 0.1760842706997401, 0.18840160861510347, 0.19260126093855656, 0.18231131727895145, 0.19748232911197416, 0.1874093283516407, 0.20212994987574706, 0.17889507985685937, 0.08696952009415926, 0.08779157530094761, 0.08404924776613121, 0.08842928830675412, 0.09354558465513396, 0.11475188894050659, 0.09430748037968784, 0.08416030753344039, 0.1063029529192574]}, "mutation_prompt": null}
{"id": "eb14998b-cb09-4422-8858-babbdbc0c0ce", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved local search perturbation for enhanced local optima escape.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.7959433012869088, 0.7959789942881453, 0.8254559668566257, 0.806073428012008, 0.8141275126402222, 0.79235963062453, 0.8058472606286998, 0.7764853372139778, 0.8225897751015764, 0.655805836268511, 0.6261525931685636, 0.6308649998780897, 0.6182197422838052, 0.6339776724337349, 0.6579316535520408, 0.626215590134857, 0.6482191682449441, 0.670876474077535, 0.5680716311018035, 0.5743616311809969, 0.5586746418048424, 0.5663661824428334, 0.5121531952347762, 0.5545022419498995, 0.538410328015076, 0.17346027732287517, 0.6289896968499442, 0.1644200560421858, 0.17108362622745776, 0.1697929307402647, 0.4744321400591861, 0.35999231249528707, 0.46863460905487975, 0.5030230956095068, 0.42446009278614294, 0.14869800055568905, 0.8776991845795534, 0.8859040368774871, 0.8908258111254226, 0.8722688277889146, 0.887664518809709, 0.8984188063587122, 0.859051049213535, 0.9039297105986406, 0.8895969648056474, 0.28938436862462846, 0.4004185532216421, 0.32784525260081465, 0.342087374732329, 0.31765417053915324, 0.3502017826495045, 0.19452149584787837, 0.2059338978599934, 0.29406222767052315, 0.5880664121108771, 0.7275241688321404, 0.21112941217865455, 0.7112817616642764, 0.7786822065452801, 0.337201918253654, 0.7438723413564414, 0.6850543571542623, 0.4822852860195016, 0.13975203564208827, 0.24715963585827672, 0.33006243225954424, 0.19331893226658659, 0.16784836475740017, 0.2713112951078117, 0.36907731093380103, 0.15113813024791978, 0.15186877216661365, 0.19254073606682787, 0.13526169254804832, 0.13860170688207252, 0.1588549304519693, 0.20060275933902638, 0.23463978008070163, 0.1944949270113906, 0.1230028695712061, 0.14294193949706713, 0.12524582018704844, 0.09943794318866717, 0.030522745111644323, 0.02991310228701094, 0.10717013385363539, 0.04473608532548767, 0.02646891728563372, 0.01672559763578718, 0.07696214384001376, 0.1709400979773691, 0.11521884721758413, 0.1830195334447482, 0.11686052739966346, 0.17130634073237527, 0.11486514282865923, 0.17595637191139868, 0.10341874341359436, 0.1205516444816973, 0.13792651788525123, 0.03454809184731533, 0.126114042914502, 0.10129864309374281, 0.061361137244363095, 0.05988022799860371, 0.13530050991235443, 0.11511726957089419, 0.057753489965365445, 0.12319593681520413, 0.20979712605400114, 0.20958605851169454, 0.22298006193740316, 0.20931234757748263, 0.2084086309450387, 0.20389556640441764, 0.1263989285483358, 0.08273819753038403, 0.49175439543109944, 0.5874142830050247, 0.5564194284943795, 0.5825252865352206, 0.4816061780218388, 0.5628946547312379, 0.5626313503853145, 0.5699939457945857, 0.5508901014937848, 0.1257158518237257, 0.12193467029653438, 0.12815264881098543, 0.13405923591813151, 0.15577963257531702, 0.13583811344460484, 0.12023738701012476, 0.1272966608188817, 0.11019978631093597, 0.16553858041591463, 0.1636394574131096, 0.15752250767508924, 0.17235826655072994, 0.15842056339648458, 0.19622016532562725, 0.1694539979517533, 0.18597406391327653, 0.15593005817902028, 0.33425283060357525, 0.4002322803873887, 0.4569292342663045, 0.37888112787265626, 0.36703412294483917, 0.41810678398413115, 0.45502976355311153, 0.47583268322486616, 0.4563952353289322, 0.23225314830664656, 0.3111293936849734, 0.2779654715102936, 0.23492369977974736, 0.25655842430759956, 0.2620451688219396, 0.30315564412785845, 0.3548973752267064, 0.23804974960280278, 0.22503471822094645, 0.22389791656359914, 0.20061880375768837, 0.2348125305611859, 0.2050682239112147, 0.20826650372276712, 0.22148530954028478, 0.19807262774134948, 0.224881534388925, 0.5473113051081611, 0.4377618207965386, 0.531494614336905, 0.5024075165456559, 0.45485321113472366, 0.48384674189354593, 0.2905437411681736, 0.6095004319094945, 0.4696043550389175, 0.5690367186551089, 0.6535354218824421, 0.6906830310335729, 0.6542199902032491, 0.6041566029763639, 0.8054449436778202, 0.7370618058872467, 0.1632393101377615, 0.6499462548047542, 0.31979311981564984, 0.20115883146602642, 0.1985382012396295, 0.201570151106934, 0.2036279347535136, 0.4103600502787115, 0.5473350162052579, 0.6360082314803657, 0.29189247781913474, 0.1845529292833331, 0.1930605359284414, 0.1771215933275767, 0.19068734731031678, 0.17426686135638958, 0.18431819792601944, 0.1781375871194959, 0.19418973231219117, 0.1770598642676081, 0.08435807250420879, 0.09228864246217783, 0.08170304342951462, 0.08711039462158365, 0.08195289353624668, 0.08068050080626887, 0.07457168397609004, 0.08617103493849887, 0.08454356465046198]}, "mutation_prompt": null}
{"id": "f20a3ab7-24cb-4f1e-a6a1-05b7cf20aaca", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced exploration with dynamic strategy switch to improve convergence.", "configspace": "", "generation": 91, "fitness": 0.3489377138265346, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.7959433012869088, 0.7959789942881453, 0.8254559668566257, 0.806073428012008, 0.8141275126402222, 0.79235963062453, 0.8058472606286998, 0.7764853372139778, 0.8225897751015764, 0.655805836268511, 0.6261525931685636, 0.6308649998780897, 0.6182197422838052, 0.6339776724337349, 0.6579316535520408, 0.626215590134857, 0.6482191682449441, 0.670876474077535, 0.5680716311018035, 0.5743616311809969, 0.5586746418048424, 0.5663661824428334, 0.5121531952347762, 0.5545022419498995, 0.538410328015076, 0.17346027732287517, 0.6289896968499442, 0.1644200560421858, 0.17108362622745776, 0.1697929307402647, 0.4744321400591861, 0.35999231249528707, 0.46863460905487975, 0.5030230956095068, 0.42446009278614294, 0.14869800055568905, 0.8776991845795534, 0.8859040368774871, 0.8908258111254226, 0.8722688277889146, 0.887664518809709, 0.8984188063587122, 0.859051049213535, 0.9039297105986406, 0.8895969648056474, 0.28938436862462846, 0.4004185532216421, 0.32784525260081465, 0.342087374732329, 0.31765417053915324, 0.3502017826495045, 0.19452149584787837, 0.2059338978599934, 0.29406222767052315, 0.5880664121108771, 0.7275241688321404, 0.21112941217865455, 0.7112817616642764, 0.7786822065452801, 0.337201918253654, 0.7438723413564414, 0.6850543571542623, 0.4822852860195016, 0.13975203564208827, 0.24715963585827672, 0.33006243225954424, 0.19331893226658659, 0.16784836475740017, 0.2713112951078117, 0.36907731093380103, 0.15113813024791978, 0.15186877216661365, 0.19254073606682787, 0.13526169254804832, 0.13860170688207252, 0.1588549304519693, 0.20060275933902638, 0.23463978008070163, 0.1944949270113906, 0.1230028695712061, 0.14294193949706713, 0.12524582018704844, 0.09943794318866717, 0.030522745111644323, 0.02991310228701094, 0.10717013385363539, 0.04473608532548767, 0.02646891728563372, 0.01672559763578718, 0.07696214384001376, 0.1709400979773691, 0.11521884721758413, 0.1830195334447482, 0.11686052739966346, 0.17130634073237527, 0.11486514282865923, 0.17595637191139868, 0.10341874341359436, 0.1205516444816973, 0.13792651788525123, 0.03454809184731533, 0.126114042914502, 0.10129864309374281, 0.061361137244363095, 0.05988022799860371, 0.13530050991235443, 0.11511726957089419, 0.057753489965365445, 0.12319593681520413, 0.20979712605400114, 0.20958605851169454, 0.22298006193740316, 0.20931234757748263, 0.2084086309450387, 0.20389556640441764, 0.1263989285483358, 0.08273819753038403, 0.49175439543109944, 0.5874142830050247, 0.5564194284943795, 0.5825252865352206, 0.4816061780218388, 0.5628946547312379, 0.5626313503853145, 0.5699939457945857, 0.5508901014937848, 0.1257158518237257, 0.12193467029653438, 0.12815264881098543, 0.13405923591813151, 0.15577963257531702, 0.13583811344460484, 0.12023738701012476, 0.1272966608188817, 0.11019978631093597, 0.16553858041591463, 0.1636394574131096, 0.15752250767508924, 0.17235826655072994, 0.15842056339648458, 0.19622016532562725, 0.1694539979517533, 0.18597406391327653, 0.15593005817902028, 0.33425283060357525, 0.4002322803873887, 0.4569292342663045, 0.37888112787265626, 0.36703412294483917, 0.41810678398413115, 0.45502976355311153, 0.47583268322486616, 0.4563952353289322, 0.23225314830664656, 0.3111293936849734, 0.2779654715102936, 0.23492369977974736, 0.25655842430759956, 0.2620451688219396, 0.30315564412785845, 0.3548973752267064, 0.23804974960280278, 0.22503471822094645, 0.22389791656359914, 0.20061880375768837, 0.2348125305611859, 0.2050682239112147, 0.20826650372276712, 0.22148530954028478, 0.19807262774134948, 0.224881534388925, 0.5473113051081611, 0.4377618207965386, 0.531494614336905, 0.5024075165456559, 0.45485321113472366, 0.48384674189354593, 0.2905437411681736, 0.6095004319094945, 0.4696043550389175, 0.5690367186551089, 0.6535354218824421, 0.6906830310335729, 0.6542199902032491, 0.6041566029763639, 0.8054449436778202, 0.7370618058872467, 0.1632393101377615, 0.6499462548047542, 0.31979311981564984, 0.20115883146602642, 0.1985382012396295, 0.201570151106934, 0.2036279347535136, 0.4103600502787115, 0.5473350162052579, 0.6360082314803657, 0.29189247781913474, 0.1845529292833331, 0.1930605359284414, 0.1771215933275767, 0.19068734731031678, 0.17426686135638958, 0.18431819792601944, 0.1781375871194959, 0.19418973231219117, 0.1770598642676081, 0.08435807250420879, 0.09228864246217783, 0.08170304342951462, 0.08711039462158365, 0.08195289353624668, 0.08068050080626887, 0.07457168397609004, 0.08617103493849887, 0.08454356465046198]}, "mutation_prompt": null}
{"id": "3905d072-7bd5-479a-83ef-32ef76e91a53", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved local search perturbation for enhanced local optima escape.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.7959433012869088, 0.7959789942881453, 0.8254559668566257, 0.806073428012008, 0.8141275126402222, 0.79235963062453, 0.8058472606286998, 0.7764853372139778, 0.8225897751015764, 0.655805836268511, 0.6261525931685636, 0.6308649998780897, 0.6182197422838052, 0.6339776724337349, 0.6579316535520408, 0.626215590134857, 0.6482191682449441, 0.670876474077535, 0.5680716311018035, 0.5743616311809969, 0.5586746418048424, 0.5663661824428334, 0.5121531952347762, 0.5545022419498995, 0.538410328015076, 0.17346027732287517, 0.6289896968499442, 0.1644200560421858, 0.17108362622745776, 0.1697929307402647, 0.4744321400591861, 0.35999231249528707, 0.46863460905487975, 0.5030230956095068, 0.42446009278614294, 0.14869800055568905, 0.8776991845795534, 0.8859040368774871, 0.8908258111254226, 0.8722688277889146, 0.887664518809709, 0.8984188063587122, 0.859051049213535, 0.9039297105986406, 0.8895969648056474, 0.28938436862462846, 0.4004185532216421, 0.32784525260081465, 0.342087374732329, 0.31765417053915324, 0.3502017826495045, 0.19452149584787837, 0.2059338978599934, 0.29406222767052315, 0.5880664121108771, 0.7275241688321404, 0.21112941217865455, 0.7112817616642764, 0.7786822065452801, 0.337201918253654, 0.7438723413564414, 0.6850543571542623, 0.4822852860195016, 0.13975203564208827, 0.24715963585827672, 0.33006243225954424, 0.19331893226658659, 0.16784836475740017, 0.2713112951078117, 0.36907731093380103, 0.15113813024791978, 0.15186877216661365, 0.19254073606682787, 0.13526169254804832, 0.13860170688207252, 0.1588549304519693, 0.20060275933902638, 0.23463978008070163, 0.1944949270113906, 0.1230028695712061, 0.14294193949706713, 0.12524582018704844, 0.09943794318866717, 0.030522745111644323, 0.02991310228701094, 0.10717013385363539, 0.04473608532548767, 0.02646891728563372, 0.01672559763578718, 0.07696214384001376, 0.1709400979773691, 0.11521884721758413, 0.1830195334447482, 0.11686052739966346, 0.17130634073237527, 0.11486514282865923, 0.17595637191139868, 0.10341874341359436, 0.1205516444816973, 0.13792651788525123, 0.03454809184731533, 0.126114042914502, 0.10129864309374281, 0.061361137244363095, 0.05988022799860371, 0.13530050991235443, 0.11511726957089419, 0.057753489965365445, 0.12319593681520413, 0.20979712605400114, 0.20958605851169454, 0.22298006193740316, 0.20931234757748263, 0.2084086309450387, 0.20389556640441764, 0.1263989285483358, 0.08273819753038403, 0.49175439543109944, 0.5874142830050247, 0.5564194284943795, 0.5825252865352206, 0.4816061780218388, 0.5628946547312379, 0.5626313503853145, 0.5699939457945857, 0.5508901014937848, 0.1257158518237257, 0.12193467029653438, 0.12815264881098543, 0.13405923591813151, 0.15577963257531702, 0.13583811344460484, 0.12023738701012476, 0.1272966608188817, 0.11019978631093597, 0.16553858041591463, 0.1636394574131096, 0.15752250767508924, 0.17235826655072994, 0.15842056339648458, 0.19622016532562725, 0.1694539979517533, 0.18597406391327653, 0.15593005817902028, 0.33425283060357525, 0.4002322803873887, 0.4569292342663045, 0.37888112787265626, 0.36703412294483917, 0.41810678398413115, 0.45502976355311153, 0.47583268322486616, 0.4563952353289322, 0.23225314830664656, 0.3111293936849734, 0.2779654715102936, 0.23492369977974736, 0.25655842430759956, 0.2620451688219396, 0.30315564412785845, 0.3548973752267064, 0.23804974960280278, 0.22503471822094645, 0.22389791656359914, 0.20061880375768837, 0.2348125305611859, 0.2050682239112147, 0.20826650372276712, 0.22148530954028478, 0.19807262774134948, 0.224881534388925, 0.5473113051081611, 0.4377618207965386, 0.531494614336905, 0.5024075165456559, 0.45485321113472366, 0.48384674189354593, 0.2905437411681736, 0.6095004319094945, 0.4696043550389175, 0.5690367186551089, 0.6535354218824421, 0.6906830310335729, 0.6542199902032491, 0.6041566029763639, 0.8054449436778202, 0.7370618058872467, 0.1632393101377615, 0.6499462548047542, 0.31979311981564984, 0.20115883146602642, 0.1985382012396295, 0.201570151106934, 0.2036279347535136, 0.4103600502787115, 0.5473350162052579, 0.6360082314803657, 0.29189247781913474, 0.1845529292833331, 0.1930605359284414, 0.1771215933275767, 0.19068734731031678, 0.17426686135638958, 0.18431819792601944, 0.1781375871194959, 0.19418973231219117, 0.1770598642676081, 0.08435807250420879, 0.09228864246217783, 0.08170304342951462, 0.08711039462158365, 0.08195289353624668, 0.08068050080626887, 0.07457168397609004, 0.08617103493849887, 0.08454356465046198]}, "mutation_prompt": null}
{"id": "a903d0a3-15c5-4126-aba7-5eeed6fb11e0", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation with adaptive Gaussian noise\n        perturbation = np.random.normal(0, 0.05 * (1 - evaluations / self.budget), self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced local search perturbation with adaptive Gaussian noise to improve convergence.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'evaluations' is not defined\").", "error": "NameError(\"name 'evaluations' is not defined\")", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {}, "mutation_prompt": null}
{"id": "473fe671-bc8d-4fd5-84d5-84c53fa4dd67", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * (1.0 - evaluations / self.budget) + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced adaptive crossover rate for improved exploration-exploitation balance.", "configspace": "", "generation": 94, "fitness": 0.33123442571503964, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.8345425372360232, 0.7919977837380674, 0.826326658528552, 0.8195096256632095, 0.8062287657115522, 0.8169383288549599, 0.8244208129758845, 0.7599796623424838, 0.8066560860648516, 0.6690529370042277, 0.49197388952839116, 0.628108317046902, 0.6282556543638912, 0.642041741525975, 0.6547621094651537, 0.19648208080543095, 0.6606279707952896, 0.6858370010110044, 0.16685228120140472, 0.17062878443773422, 0.4848375395758041, 0.5549084110605346, 0.5907186314546238, 0.5143609128093334, 0.17514002205839985, 0.5699264901679505, 0.15184255044492367, 0.1680172560333565, 0.11338071386600768, 0.5454197050200496, 0.1344228243313983, 0.10637339172409666, 0.1442264140489926, 0.14446725793816984, 0.14946582197001457, 0.11636316721814421, 0.8651343690827087, 0.9082744124863067, 0.858116604099643, 0.8870391501550614, 0.8672256389783537, 0.8638708717633663, 0.8810939572740105, 0.8752623041374145, 0.8664972397896311, 0.4135797648187992, 0.2802924507852176, 0.2857306217299933, 0.4132669200129149, 0.23926842551685734, 0.36483699796998503, 0.29452194786231345, 0.29062889712408546, 0.25281335346257694, 0.2622347630541575, 0.8651340336719, 0.8019886538404205, 0.7945830039815671, 0.2693391556075435, 0.26679402515094675, 0.7749581129580537, 0.2326528321330661, 0.8161128996394467, 0.25443938726038196, 0.17933368734375343, 0.1662339935570315, 0.16793294862685892, 0.17016827815093116, 0.12567469614679827, 0.26117132116086184, 0.11028646277395604, 0.15542147034937692, 0.16814784955827922, 0.27697655466276805, 0.14174986443864745, 0.1282896185119322, 0.16948881527398207, 0.2482074517472712, 0.5887419500596931, 0.1409630599021524, 0.16923592735368131, 0.03147502454951534, 0.04723055626238526, 0.13655551047126502, 0.04254675127433949, 0.09511813350585885, 0.10428762909977374, 0.03184633796919045, 0.045488994201173916, 0.12896102187251202, 0.22018792316246583, 0.2120784941390983, 0.11507083813396057, 0.18250534152582454, 0.42248241015539334, 0.12867750364866992, 0.2967200344427562, 0.13171732557838245, 0.2586630790922537, 0.15325770725487853, 0.0810759329968116, 0.1663662236443053, 0.18531021043232698, 0.12146689679333145, 0.13186635443428818, 0.078265831214545, 0.09389045362504822, 0.17894152663546392, 0.1869554636206212, 0.2436360604533433, 0.07728068256360443, 0.22807305350167084, 0.23596587771181976, 0.23786918404902757, 0.22344283324700265, 0.1824221438418564, 0.12656995366570334, 0.6194464817188137, 0.6518158373561167, 0.524471652049223, 0.5192416197532863, 0.49724519153569835, 0.5794306760518142, 0.5304006490917611, 0.5342593821044652, 0.5670939195577855, 0.09052044329940512, 0.10668992559760249, 0.09507421427225748, 0.08825603140032512, 0.12995236183667525, 0.1720487815909041, 0.10823359259572296, 0.09966077533675466, 0.11702065320931743, 0.21209515546068092, 0.2265369615539642, 0.1678769163650351, 0.28628772733890495, 0.22033478634101755, 0.27981725948664093, 0.21484037595841765, 0.2533897156324887, 0.248375018516928, 0.41669594014614064, 0.30774659464121235, 0.4318253653164881, 0.2544764987953917, 0.4414022443918678, 0.5003767839546082, 0.4692911167085587, 0.5250421330971624, 0.4735774024600795, 0.2935614290662415, 0.29545059808057184, 0.31632843192112103, 0.2865695382919108, 0.18352206235538793, 0.3352371573379994, 0.2409928652732808, 0.366401029019228, 0.3282226439737419, 0.22071454970191529, 0.18008930770681308, 0.22161375087792212, 0.21308857552403193, 0.1969451356487113, 0.2144173486928853, 0.22102599940050138, 0.20029442088632698, 0.1957890616351705, 0.4812653781273115, 0.21156289365485736, 0.6405536878697229, 0.2060500749081644, 0.5459706404356734, 0.23067096571130574, 0.20100588108176676, 0.6042900190062204, 0.23358936574072697, 0.16901471521375733, 0.17990844289620145, 0.8026296137958672, 0.1673103811422072, 0.6073869626598227, 0.7880023683384811, 0.1591084648488984, 0.16553232739987833, 0.1704571198151047, 0.7898647963257575, 0.2014242893225907, 0.501358809218958, 0.16582874994765628, 0.1666418693895736, 0.6752660274550457, 0.5773187141089589, 0.30368793461797694, 0.11022581119578756, 0.18617155188438161, 0.1995183562686188, 0.1865108739521486, 0.17911719998029474, 0.17543104942619503, 0.18339896025076663, 0.1903829816038376, 0.18949174878429664, 0.18657104090320642, 0.09487816075693933, 0.07826699844442297, 0.10366958134908488, 0.07992887325417719, 0.09518009835989871, 0.10938894936193122, 0.08728662489666372, 0.08474228782921034, 0.08658204223897537]}, "mutation_prompt": null}
{"id": "9d43ab70-9cc4-44a4-9763-eb7060dd6045", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved local search perturbation for enhanced local optima escape.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.7959433012869088, 0.7959789942881453, 0.8254559668566257, 0.806073428012008, 0.8141275126402222, 0.79235963062453, 0.8058472606286998, 0.7764853372139778, 0.8225897751015764, 0.655805836268511, 0.6261525931685636, 0.6308649998780897, 0.6182197422838052, 0.6339776724337349, 0.6579316535520408, 0.626215590134857, 0.6482191682449441, 0.670876474077535, 0.5680716311018035, 0.5743616311809969, 0.5586746418048424, 0.5663661824428334, 0.5121531952347762, 0.5545022419498995, 0.538410328015076, 0.17346027732287517, 0.6289896968499442, 0.1644200560421858, 0.17108362622745776, 0.1697929307402647, 0.4744321400591861, 0.35999231249528707, 0.46863460905487975, 0.5030230956095068, 0.42446009278614294, 0.14869800055568905, 0.8776991845795534, 0.8859040368774871, 0.8908258111254226, 0.8722688277889146, 0.887664518809709, 0.8984188063587122, 0.859051049213535, 0.9039297105986406, 0.8895969648056474, 0.28938436862462846, 0.4004185532216421, 0.32784525260081465, 0.342087374732329, 0.31765417053915324, 0.3502017826495045, 0.19452149584787837, 0.2059338978599934, 0.29406222767052315, 0.5880664121108771, 0.7275241688321404, 0.21112941217865455, 0.7112817616642764, 0.7786822065452801, 0.337201918253654, 0.7438723413564414, 0.6850543571542623, 0.4822852860195016, 0.13975203564208827, 0.24715963585827672, 0.33006243225954424, 0.19331893226658659, 0.16784836475740017, 0.2713112951078117, 0.36907731093380103, 0.15113813024791978, 0.15186877216661365, 0.19254073606682787, 0.13526169254804832, 0.13860170688207252, 0.1588549304519693, 0.20060275933902638, 0.23463978008070163, 0.1944949270113906, 0.1230028695712061, 0.14294193949706713, 0.12524582018704844, 0.09943794318866717, 0.030522745111644323, 0.02991310228701094, 0.10717013385363539, 0.04473608532548767, 0.02646891728563372, 0.01672559763578718, 0.07696214384001376, 0.1709400979773691, 0.11521884721758413, 0.1830195334447482, 0.11686052739966346, 0.17130634073237527, 0.11486514282865923, 0.17595637191139868, 0.10341874341359436, 0.1205516444816973, 0.13792651788525123, 0.03454809184731533, 0.126114042914502, 0.10129864309374281, 0.061361137244363095, 0.05988022799860371, 0.13530050991235443, 0.11511726957089419, 0.057753489965365445, 0.12319593681520413, 0.20979712605400114, 0.20958605851169454, 0.22298006193740316, 0.20931234757748263, 0.2084086309450387, 0.20389556640441764, 0.1263989285483358, 0.08273819753038403, 0.49175439543109944, 0.5874142830050247, 0.5564194284943795, 0.5825252865352206, 0.4816061780218388, 0.5628946547312379, 0.5626313503853145, 0.5699939457945857, 0.5508901014937848, 0.1257158518237257, 0.12193467029653438, 0.12815264881098543, 0.13405923591813151, 0.15577963257531702, 0.13583811344460484, 0.12023738701012476, 0.1272966608188817, 0.11019978631093597, 0.16553858041591463, 0.1636394574131096, 0.15752250767508924, 0.17235826655072994, 0.15842056339648458, 0.19622016532562725, 0.1694539979517533, 0.18597406391327653, 0.15593005817902028, 0.33425283060357525, 0.4002322803873887, 0.4569292342663045, 0.37888112787265626, 0.36703412294483917, 0.41810678398413115, 0.45502976355311153, 0.47583268322486616, 0.4563952353289322, 0.23225314830664656, 0.3111293936849734, 0.2779654715102936, 0.23492369977974736, 0.25655842430759956, 0.2620451688219396, 0.30315564412785845, 0.3548973752267064, 0.23804974960280278, 0.22503471822094645, 0.22389791656359914, 0.20061880375768837, 0.2348125305611859, 0.2050682239112147, 0.20826650372276712, 0.22148530954028478, 0.19807262774134948, 0.224881534388925, 0.5473113051081611, 0.4377618207965386, 0.531494614336905, 0.5024075165456559, 0.45485321113472366, 0.48384674189354593, 0.2905437411681736, 0.6095004319094945, 0.4696043550389175, 0.5690367186551089, 0.6535354218824421, 0.6906830310335729, 0.6542199902032491, 0.6041566029763639, 0.8054449436778202, 0.7370618058872467, 0.1632393101377615, 0.6499462548047542, 0.31979311981564984, 0.20115883146602642, 0.1985382012396295, 0.201570151106934, 0.2036279347535136, 0.4103600502787115, 0.5473350162052579, 0.6360082314803657, 0.29189247781913474, 0.1845529292833331, 0.1930605359284414, 0.1771215933275767, 0.19068734731031678, 0.17426686135638958, 0.18431819792601944, 0.1781375871194959, 0.19418973231219117, 0.1770598642676081, 0.08435807250420879, 0.09228864246217783, 0.08170304342951462, 0.08711039462158365, 0.08195289353624668, 0.08068050080626887, 0.07457168397609004, 0.08617103493849887, 0.08454356465046198]}, "mutation_prompt": null}
{"id": "03fd93d5-a250-40b1-a37c-44730e15325b", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.6 + 0.3  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced adaptive parameter control for improved exploration-exploitation balance.", "configspace": "", "generation": 96, "fitness": 0.345186481201085, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.7996269835010876, 0.7887095042912915, 0.8179883578714426, 0.7866570959154362, 0.8124805123178946, 0.7929956246017213, 0.8032378910703171, 0.7813115514512111, 0.8142338873139576, 0.635733329154919, 0.624331482820502, 0.6536484710190946, 0.6268398220901943, 0.651322739840756, 0.6471342191059826, 0.6337796601088814, 0.6537897396634484, 0.6108133598466294, 0.5276710211069233, 0.5723806289357201, 0.5565643869181309, 0.542019014317088, 0.5851101990232986, 0.4553150357003025, 0.5302549796551459, 0.4839772099316455, 0.36715603814015396, 0.48727866853580215, 0.4364877150809333, 0.16158315585626037, 0.15172137206916037, 0.4428784289468991, 0.4018099997259583, 0.13014029148433204, 0.36589426786526624, 0.4951231425381556, 0.9114503584591418, 0.9070031223645414, 0.878038101745097, 0.8645295235462069, 0.8794624011710259, 0.9237363289811695, 0.9443474758956338, 0.9038571213823704, 0.882920770430301, 0.35590103318989874, 0.32949673403498836, 0.20106333025314815, 0.36908901857321286, 0.2512425568619351, 0.33327625629658264, 0.2496729502164935, 0.2557699025330158, 0.2849522964250153, 0.3437305381613329, 0.62187950458059, 0.7141321605165197, 0.7480408101356708, 0.2707350552431892, 0.26676808875925306, 0.7424631643701305, 0.6608784403632211, 0.680271147493457, 0.2047047086595709, 0.3551206620353704, 0.14602177235741398, 0.16826256655777794, 0.1601275437298747, 0.27523957650675945, 0.1626338002393526, 0.18194406415229192, 0.15824828816611658, 0.1504132189423173, 0.1250920923767359, 0.1364526527370008, 0.1395135918908551, 0.17959522416010587, 0.1497228321561639, 0.18876171383781504, 0.1815800264906735, 0.16247200248717653, 0.1516600747686473, 0.11658484173322592, 0.07964292040397958, 0.06985421939874936, 0.06498649949158475, 0.04346496030031599, 0.039632062589901595, 0.01978906803306968, 0.09311021372893424, 0.10626231183093637, 0.19102265944140195, 0.18310419208821793, 0.17398470809848854, 0.11360498210391856, 0.10305263565869704, 0.28774586045447015, 0.243886974292002, 0.15059012613008693, 0.07533937597684803, 0.06115988864293853, 0.1112175233997037, 0.044698632660180926, 0.08349075286789043, 0.1370291535708249, 0.08655532482952, 0.19281659630812698, 0.08728489494450065, 0.19964943224949006, 0.1634019589564889, 0.17529170302963704, 0.21076458753918548, 0.1795325811896984, 0.2192789900077431, 0.19700050150751625, 0.16579992976034807, 0.11690289728949921, 0.5658496090419008, 0.5738086353428928, 0.5790938867247699, 0.5627324891309611, 0.5556413224733496, 0.5631533492743104, 0.5418965497228228, 0.5913286811486953, 0.5334605918254491, 0.10769319213004402, 0.12147931640837872, 0.1358358990668077, 0.11193873920421715, 0.13186856218391463, 0.11651719600483645, 0.13389676346348844, 0.12681192580518108, 0.12209984410823271, 0.1596391205147505, 0.1393105300587435, 0.14391898770754774, 0.22538200702592204, 0.15378081913432184, 0.32645072555241705, 0.16288454636139282, 0.16902774345025007, 0.1471750924969787, 0.35499861459191173, 0.4146740638875711, 0.3697266003437707, 0.3805504875963497, 0.37740051858263646, 0.4096502782975856, 0.43550651089616765, 0.46110559176859856, 0.45089323480635435, 0.2639787989187917, 0.3130555640903312, 0.23049069301340863, 0.2376467955534487, 0.2869856592472372, 0.30604605014821296, 0.27520659527506564, 0.35197578684329045, 0.308453627911062, 0.20030672063576804, 0.1897207037846771, 0.19753268250381706, 0.21727582680413138, 0.20174651171206692, 0.19006450389677876, 0.2026320653307554, 0.1861292101011386, 0.22170786767178563, 0.5614485424634456, 0.23336972555108082, 0.396403670055564, 0.5303350914475524, 0.39178777025062217, 0.20934210210609994, 0.22064669780625845, 0.4272656124918215, 0.5025073232711093, 0.4915199331284308, 0.6895589204294522, 0.37313970638785865, 0.6862362189816013, 0.19870474314057385, 0.7680990937626477, 0.6287488681483386, 0.5750648933232471, 0.5324822284464736, 0.46110720718217313, 0.19875878250655776, 0.1987474175024735, 0.3839642453947536, 0.36850640819407043, 0.524318003676693, 0.3240262219059268, 0.5058028013170067, 0.570518007663996, 0.18436765715387982, 0.17243343267107425, 0.18746253608356578, 0.1839310068985449, 0.19313132908177433, 0.17061607125197698, 0.18716875854195358, 0.18890872711272055, 0.1882637440806766, 0.08425737313601889, 0.08004111503287714, 0.08416671607454995, 0.07673119663329486, 0.0837577994403238, 0.0860118272973921, 0.08878268614570428, 0.0873328124286169, 0.0745588716990746]}, "mutation_prompt": null}
{"id": "70cde478-8835-48ef-9fd9-0d4417d71644", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = 1 - (evaluations / self.budget)  # Dynamic scaling based on evaluations\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced mutation strategy by incorporating a dynamic scaling factor based on current iteration count.", "configspace": "", "generation": 97, "fitness": 0.3009482101116017, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.7682286033277189, 0.7388107549848463, 0.7614140036547472, 0.7730598466703454, 0.7567345657996911, 0.7789105792430293, 0.7659582966431129, 0.7487810092094491, 0.7589668787735911, 0.5921317190970912, 0.6000513115565396, 0.5851306040773183, 0.5864837886440183, 0.5930186774574544, 0.5919905251254369, 0.5671571768350288, 0.5734577620730763, 0.5763801261333649, 0.26234326525407936, 0.24242816933412104, 0.3690144760889441, 0.26718654425696975, 0.2568003655586194, 0.2994153211804301, 0.2957726453986327, 0.35018393561731787, 0.3246369576059055, 0.20100817117030756, 0.14023700428270913, 0.2132958265775341, 0.2542133682338227, 0.2249394617123216, 0.25100762430560486, 0.2105153305172015, 0.19038387589381045, 0.14541741322477664, 0.9249688127244878, 0.920541459593512, 0.9432693059240203, 0.9124061207182389, 0.9337131492675285, 0.9151983297402856, 0.8668870087050333, 0.9220400951300256, 0.9554372061297823, 0.3039861813909309, 0.2732498599915125, 0.31089678576366464, 0.36793514722541565, 0.2857018500872719, 0.3319158299232897, 0.31658610381599994, 0.22628371190846908, 0.3538011397374561, 0.541606861876086, 0.5671990385121863, 0.535642205030171, 0.5538619793671278, 0.5947010275023865, 0.7030973866596284, 0.4678503592304243, 0.5899387417521902, 0.5231029964847687, 0.19234015664230997, 0.1848127163033022, 0.16499331033084796, 0.16170545951675763, 0.1641685555349095, 0.1563163170193026, 0.21110155918628581, 0.1594074419374477, 0.17866018632833003, 0.13643776720692136, 0.10095217681677637, 0.14583468428776136, 0.14451118422646558, 0.14145054356316555, 0.1755753538035264, 0.1466007968220574, 0.10775406794192399, 0.15316038505251706, 0.044117244417002266, 0.055876980704398393, 0.06816530077913796, 0.05338440777734754, 0.0521668726962885, 9.999999999998899e-05, 0.06420683721597831, 0.08845637610199353, 0.070105857343433, 0.1241833709034803, 0.1529310124210682, 0.1649911216452199, 0.09772977371261204, 0.13732011302487934, 0.15464820913930344, 0.17723826017649302, 0.20959395266564773, 0.20991582003622888, 0.07158921234843241, 0.0631734171824403, 0.05627428350254282, 0.03995727356223666, 0.03714950528439098, 0.049389301780567996, 0.06814194183981204, 0.05354258031154424, 0.07356240130202774, 0.15929636855064322, 0.1770991924809785, 0.15908101975134015, 0.16908721002148908, 0.18281504656318015, 0.16620387970423, 0.1252699658207297, 0.15882118142501145, 0.13667004172920383, 0.49221574972775695, 0.5070347138142375, 0.522637939472008, 0.5352975517077463, 0.5224594306083006, 0.5008447654468968, 0.5040324312604048, 0.5446758992037353, 0.5379050650287848, 0.09587216272081223, 0.11012314672737189, 0.11340358871919454, 0.11057327659154348, 0.10154701846445002, 0.105705498872397, 0.10452369592709543, 0.11239133778683086, 0.10153689590959691, 0.159233172617801, 0.15168083708769975, 0.1316063322690174, 0.13590968585431407, 0.22475159134235956, 0.1622682506310662, 0.16554050158427347, 0.14351112692776546, 0.15503506907878928, 0.34506537701250084, 0.3758020776015837, 0.31808227772854947, 0.352406693064217, 0.36067788014078883, 0.35843315036563406, 0.3868002170110958, 0.3835353530119995, 0.419872355383473, 0.25672231393094525, 0.24379304047361894, 0.23860847821547526, 0.23293006377401526, 0.22993321672874623, 0.24698222412727366, 0.2799351701564289, 0.24928479051193198, 0.2874111235203468, 0.20525209376985432, 0.17670924596885418, 0.20365624564045426, 0.1919351273843738, 0.1931562692408808, 0.20486559132593618, 0.19925169588479053, 0.19730886081509202, 0.1787984386115693, 0.3180312629115519, 0.3736026807892231, 0.20816616355294004, 0.35022375087922997, 0.41678009048657116, 0.299120769906734, 0.39060549712300185, 0.3516815612796562, 0.22596330723838876, 0.17100855962247552, 0.16244210108716683, 0.6297104527922146, 0.6713305003274164, 0.177925939881582, 0.4799344635063869, 0.5209221523578431, 0.17812757295692916, 0.6396065249550957, 0.5192940911697642, 0.19233953647962487, 0.19104472062053934, 0.2027551356596723, 0.1979207521277463, 0.3041765924213652, 0.21367475760093713, 0.20403684920423104, 0.19604083219047175, 0.1808353646419011, 0.18446673769360833, 0.18489196278006925, 0.18902990792283325, 0.19119549063746932, 0.1917175885189052, 0.18274742769939634, 0.18818867478567314, 0.18988088419527316, 0.08753461102738525, 0.0831390783973669, 0.07374217756176271, 0.08028062082560394, 0.08094253808671514, 0.07798576432327131, 0.07769595679079266, 0.07638906593111405, 0.07283413022260865]}, "mutation_prompt": null}
{"id": "9f04a123-1f1c-45f7-a5d7-23babbfc4cc0", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand() + 0.5  # Enhanced mutation scaling factor\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Enhanced mutation strategy with a dynamic scaling factor for improved convergence.", "configspace": "", "generation": 98, "fitness": 0.2811301232547871, "feedback": "The algorithm ADE_LSB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.7442801519867746, 0.7349689661843637, 0.7538850876372718, 0.7574222537227018, 0.745814625248854, 0.7585305883784177, 0.751241984216936, 0.7463320501558834, 0.753370156795195, 0.5487205484967156, 0.5492316796287144, 0.5594854535075873, 0.5275808057148441, 0.5402293275219915, 0.5331638368355818, 0.5759236138096403, 0.5405819350223842, 0.5519934074419461, 0.15145503683242045, 0.21272768329534852, 0.3272509215620546, 0.2373012805740079, 0.24421526122492443, 0.19310563430594985, 0.1565815242130889, 0.17284900737844455, 0.16426049888527827, 0.15574428867158951, 0.1303687285914742, 0.16210214540122447, 0.15148625647398217, 0.13433159912950288, 0.13588370927872695, 0.19566583535130389, 0.13936515291345475, 0.18061982058205273, 0.8882314920266331, 0.9397953368569895, 0.9125331897411405, 0.9318276744309741, 0.9384458887156393, 0.9106726504255622, 0.8661737920245266, 0.9259077283052094, 0.9294244006623256, 0.33069546280618944, 0.30473767109438954, 0.3086893245145519, 0.3210833291321248, 0.2916513159669377, 0.3611951758159542, 0.31634259368377105, 0.3038670850467947, 0.3311147362383423, 0.4165408046755231, 0.40735199635556174, 0.4562031432730915, 0.5816634669854722, 0.6146593966690908, 0.5776255979954903, 0.6540957150845481, 0.5646197226280272, 0.5394260332091005, 0.16375194277951266, 0.14634156502323525, 0.16698698172974114, 0.15369202986371022, 0.1857545932688941, 0.18931076704248895, 0.15580008660190048, 0.16044638823379354, 0.16755410550584948, 0.1595766743061442, 0.1814360312650275, 0.13000305269285617, 0.19767952564440217, 0.19301112631075368, 0.17276139657219614, 0.2157947845358612, 0.13482876756354012, 0.16876996588226612, 0.018819372827125647, 0.06102610350163118, 0.05287915973551294, 0.05509119463558787, 0.028941945611607456, 0.03676699456918575, 0.02521489554155032, 0.013122190871813433, 0.04127969835489598, 0.12936323687192908, 0.14866130993199256, 0.15066695476371061, 0.13716399785302824, 0.1131832824827943, 0.17834101820080273, 0.19019761118349243, 0.16684669585596512, 0.20338367934992685, 0.02512404629041398, 0.028170258953272964, 0.02230653490884249, 0.024591163093764745, 0.023896320228421586, 0.019293282084163366, 0.023222844932659026, 0.036649408868083655, 0.07139505079361097, 0.15286366948852337, 0.14256007673851034, 0.11962344362157984, 0.1394149765181728, 0.14473561303278382, 0.16347487804269079, 0.13079139875192936, 0.13477962535748178, 0.10885328008325346, 0.4930703809319277, 0.5010893776921928, 0.4878406100448329, 0.4978621517393599, 0.4886206966625789, 0.48493284680762194, 0.5051854288839002, 0.46073689443540355, 0.5162268037845776, 0.08954756730841928, 0.100456829744905, 0.1059512858341719, 0.11324715029150134, 0.09968953260374891, 0.09815812791898293, 0.09188418316512503, 0.08893162156004875, 0.09358230364221998, 0.14826015402408743, 0.1683666067800832, 0.15548836791836862, 0.15352550084851524, 0.19018302271526544, 0.16608376834491045, 0.16659541217009732, 0.14550322797573811, 0.1356090924031974, 0.3203694681799695, 0.30904016604293283, 0.3256123779113227, 0.3159037006572437, 0.3000127966138819, 0.32987043406123573, 0.3890719338999262, 0.370350302380961, 0.3503264207187674, 0.22784373641474331, 0.2445930167548972, 0.22389474074464466, 0.222037691258691, 0.20378487411088086, 0.21148025930932712, 0.24010474996479192, 0.27508480937874635, 0.23838971903042283, 0.2122283897453121, 0.17940087882259648, 0.1910124316948011, 0.1935689516952036, 0.17903786986447034, 0.20644930068574108, 0.18891547398013064, 0.21040232232013434, 0.1995785371702038, 0.21487401720661958, 0.1952613719712425, 0.20011855619438823, 0.27904271924226487, 0.22606664163281398, 0.19605885212493068, 0.20833306089010217, 0.21894719468772195, 0.18809824010911957, 0.16836882679117204, 0.31701971502004733, 0.16820561933380163, 0.6133228192346742, 0.4072035554854435, 0.6435290894393579, 0.31514267898966597, 0.23527750809419745, 0.17440726787257443, 0.1941097497112113, 0.19184479517150488, 0.35076487468889495, 0.34936886136647705, 0.19855390153693642, 0.228768876655291, 0.5143687650992246, 0.19822987509569323, 0.43459541328961115, 0.17350811009335176, 0.18004412973539052, 0.18768093788795448, 0.1805653873555133, 0.17403329157253888, 0.17940299319184072, 0.17779971470503464, 0.19045706292892894, 0.1838166780889522, 0.08049459119381985, 0.07925596745454822, 0.0718285373831763, 0.08867780491139166, 0.07572109019337936, 0.08889466833139392, 0.07737964844560408, 0.07903940485164895, 0.07178887804331768]}, "mutation_prompt": null}
{"id": "16692695-5f03-43a4-a600-0ca22c10968e", "solution": "import numpy as np\n\nclass ADE_LSB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.pop])\n        evaluations += self.population_size\n        self.best_solution = self.pop[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive parameter control\n                F_adaptive = np.random.rand() * 0.9 + 0.1  # Updated differential scaling factor range\n                CR_adaptive = np.random.rand() * 0.5 + 0.4  # Adjusted CR_adaptive for better exploration\n\n                # Mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_scale = np.random.rand()  # Removed fitness scaling for cleaner mutation\n                mutant_vector = self.pop[a] + f_scale * F_adaptive * (self.pop[b] - self.pop[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.pop[i])\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                # Local search boosting\n                if np.random.rand() < 0.15 * (1 - evaluations / self.budget):  # Dynamic local search probability\n                    trial_vector = self.local_search(trial_vector, func)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.pop[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n        return self.best_solution\n\n    def local_search(self, vector, func):\n        # Simple local search using a small random perturbation\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Adjusted perturbation distribution\n        new_vector = vector + perturbation\n        new_vector = np.clip(new_vector, self.lower_bound, self.upper_bound)\n        if func(new_vector) < func(vector):\n            return new_vector\n        return vector", "name": "ADE_LSB", "description": "Improved local search perturbation for enhanced local optima escape.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7b34afb-ed67-46d7-be23-03dbcf8c831e", "metadata": {"aucs": [0.7959433012869088, 0.7959789942881453, 0.8254559668566257, 0.806073428012008, 0.8141275126402222, 0.79235963062453, 0.8058472606286998, 0.7764853372139778, 0.8225897751015764, 0.655805836268511, 0.6261525931685636, 0.6308649998780897, 0.6182197422838052, 0.6339776724337349, 0.6579316535520408, 0.626215590134857, 0.6482191682449441, 0.670876474077535, 0.5680716311018035, 0.5743616311809969, 0.5586746418048424, 0.5663661824428334, 0.5121531952347762, 0.5545022419498995, 0.538410328015076, 0.17346027732287517, 0.6289896968499442, 0.1644200560421858, 0.17108362622745776, 0.1697929307402647, 0.4744321400591861, 0.35999231249528707, 0.46863460905487975, 0.5030230956095068, 0.42446009278614294, 0.14869800055568905, 0.8776991845795534, 0.8859040368774871, 0.8908258111254226, 0.8722688277889146, 0.887664518809709, 0.8984188063587122, 0.859051049213535, 0.9039297105986406, 0.8895969648056474, 0.28938436862462846, 0.4004185532216421, 0.32784525260081465, 0.342087374732329, 0.31765417053915324, 0.3502017826495045, 0.19452149584787837, 0.2059338978599934, 0.29406222767052315, 0.5880664121108771, 0.7275241688321404, 0.21112941217865455, 0.7112817616642764, 0.7786822065452801, 0.337201918253654, 0.7438723413564414, 0.6850543571542623, 0.4822852860195016, 0.13975203564208827, 0.24715963585827672, 0.33006243225954424, 0.19331893226658659, 0.16784836475740017, 0.2713112951078117, 0.36907731093380103, 0.15113813024791978, 0.15186877216661365, 0.19254073606682787, 0.13526169254804832, 0.13860170688207252, 0.1588549304519693, 0.20060275933902638, 0.23463978008070163, 0.1944949270113906, 0.1230028695712061, 0.14294193949706713, 0.12524582018704844, 0.09943794318866717, 0.030522745111644323, 0.02991310228701094, 0.10717013385363539, 0.04473608532548767, 0.02646891728563372, 0.01672559763578718, 0.07696214384001376, 0.1709400979773691, 0.11521884721758413, 0.1830195334447482, 0.11686052739966346, 0.17130634073237527, 0.11486514282865923, 0.17595637191139868, 0.10341874341359436, 0.1205516444816973, 0.13792651788525123, 0.03454809184731533, 0.126114042914502, 0.10129864309374281, 0.061361137244363095, 0.05988022799860371, 0.13530050991235443, 0.11511726957089419, 0.057753489965365445, 0.12319593681520413, 0.20979712605400114, 0.20958605851169454, 0.22298006193740316, 0.20931234757748263, 0.2084086309450387, 0.20389556640441764, 0.1263989285483358, 0.08273819753038403, 0.49175439543109944, 0.5874142830050247, 0.5564194284943795, 0.5825252865352206, 0.4816061780218388, 0.5628946547312379, 0.5626313503853145, 0.5699939457945857, 0.5508901014937848, 0.1257158518237257, 0.12193467029653438, 0.12815264881098543, 0.13405923591813151, 0.15577963257531702, 0.13583811344460484, 0.12023738701012476, 0.1272966608188817, 0.11019978631093597, 0.16553858041591463, 0.1636394574131096, 0.15752250767508924, 0.17235826655072994, 0.15842056339648458, 0.19622016532562725, 0.1694539979517533, 0.18597406391327653, 0.15593005817902028, 0.33425283060357525, 0.4002322803873887, 0.4569292342663045, 0.37888112787265626, 0.36703412294483917, 0.41810678398413115, 0.45502976355311153, 0.47583268322486616, 0.4563952353289322, 0.23225314830664656, 0.3111293936849734, 0.2779654715102936, 0.23492369977974736, 0.25655842430759956, 0.2620451688219396, 0.30315564412785845, 0.3548973752267064, 0.23804974960280278, 0.22503471822094645, 0.22389791656359914, 0.20061880375768837, 0.2348125305611859, 0.2050682239112147, 0.20826650372276712, 0.22148530954028478, 0.19807262774134948, 0.224881534388925, 0.5473113051081611, 0.4377618207965386, 0.531494614336905, 0.5024075165456559, 0.45485321113472366, 0.48384674189354593, 0.2905437411681736, 0.6095004319094945, 0.4696043550389175, 0.5690367186551089, 0.6535354218824421, 0.6906830310335729, 0.6542199902032491, 0.6041566029763639, 0.8054449436778202, 0.7370618058872467, 0.1632393101377615, 0.6499462548047542, 0.31979311981564984, 0.20115883146602642, 0.1985382012396295, 0.201570151106934, 0.2036279347535136, 0.4103600502787115, 0.5473350162052579, 0.6360082314803657, 0.29189247781913474, 0.1845529292833331, 0.1930605359284414, 0.1771215933275767, 0.19068734731031678, 0.17426686135638958, 0.18431819792601944, 0.1781375871194959, 0.19418973231219117, 0.1770598642676081, 0.08435807250420879, 0.09228864246217783, 0.08170304342951462, 0.08711039462158365, 0.08195289353624668, 0.08068050080626887, 0.07457168397609004, 0.08617103493849887, 0.08454356465046198]}, "mutation_prompt": null}
