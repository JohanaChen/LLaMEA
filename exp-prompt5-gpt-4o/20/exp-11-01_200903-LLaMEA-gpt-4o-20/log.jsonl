{"id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 0, "fitness": 0.2443272066666156, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": null, "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "d1081c3b-196c-4b4e-8283-35597d387a23", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "7152f870-556e-4019-a2fe-94a21ad4356a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "220e9fe3-f9b2-48c7-b1a0-425ad3ae0a69", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "b3992fe1-0a0c-40bb-991d-463725f8f53d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "61836059-1c01-4c68-b50b-17a3bc684dbb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.9 - 0.7 * (self.fes / self.budget)  # Time-varying inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F, CR = 0.8, 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        if trial_score < self.gbest_score:  # Elite replacement strategy\n            self.gbest_score = trial_score\n            self.gbest = trial\n\n        target_score = func(target)\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with Time-Varying Parameters and Elite Replacement Strategy for improved convergence and diversification.", "configspace": "", "generation": 5, "fitness": 0.19398411563599408, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.6072886870572616, 0.5543537662274953, 0.5340661305163539, 0.18001845898773394, 0.1853567672333618, 0.249717250933422, 0.5784895646932606, 0.5668302422302777, 0.5993616041076893, 0.0, 0.0, 0.32344682816663695, 0.0, 0.030352587346591076, 0.38535212448234, 0.04040892752763159, 0.3249692711044879, 0.3107230106489053, 0.108615684207511, 0.08241102690557922, 0.09798013643271175, 0.08479893312982145, 0.08769694521696603, 0.06309118083334375, 0.13023358627614345, 0.07652149386208384, 0.10882332282844598, 0.08790334677220812, 0.06341080953787936, 0.08221071048390438, 0.0912638096670958, 0.07898509173697132, 0.07725612069322418, 0.07308804565537463, 0.08515877104407832, 0.06717675914086685, 0.9803277401904684, 0.9850581058663546, 0.9843430995178317, 0.9804905729559186, 0.9782885401501483, 0.9795124388610125, 0.9791613052142484, 0.9850859801216059, 0.9872874935572706, 0.09135936646003662, 0.1572914911408959, 0.05712605444036323, 0.14326246955848598, 0.12603331468501333, 0.12909739062060088, 0.13639456238345338, 0.19802431111835184, 0.13461040630759158, 0.19597535008446743, 0.18421334174380422, 0.14181844494852558, 0.17649542008122954, 0.1870556102886458, 0.19454027518319883, 0.1399147337472888, 0.29545114504691383, 0.15571961094816977, 0.08362231320497793, 0.11794030829267799, 0.13810389050712402, 0.10492804583923787, 0.08957447632964555, 0.11956875155596647, 0.12262520476229655, 0.11567859371474787, 0.13514209034204938, 0.07230618407937495, 0.05065160850333883, 0.08810451013627663, 0.09802850556136344, 0.13673599197845565, 0.16653521682197026, 0.13934887493806725, 0.027721133622905292, 0.09619158798600025, 0.0, 0.0, 0.017801840017200088, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05888065418082622, 0.08715812467905049, 0.05259822330328767, 0.04132961531428625, 0.03772592288278265, 0.008183088688287876, 0.00687430207036599, 0.04781010646564443, 0.032163615508728594, 0.0270545518141605, 0.019310876985450864, 0.025993020806961753, 0.03660428597547438, 0.057029766172791985, 0.05201616483350058, 0.05907886178989974, 0.04934347093278679, 0.07395730280364299, 0.006938911538086345, 0.08957304987635728, 0.03741435229053913, 0.10101429363007663, 0.05914910723676692, 0.05995570344130141, 0.05932630003153738, 0.039146072477596494, 0.07206802606882523, 0.3803739200430736, 0.3919439105417729, 0.4101584199463847, 0.4006609398898956, 0.44823902601420074, 0.41798614799121336, 0.4444011102363823, 0.4311842252752758, 0.40078839222871065, 0.09320161422122508, 0.08452370271383247, 0.0833226278410879, 0.10570475699744797, 0.066190030481036, 0.10735027853183943, 0.07283375646536772, 0.0874143146412516, 0.07638495841647797, 0.1744117507152021, 0.14376633704963826, 0.19200770355471364, 0.1597236053374982, 0.16085843389950372, 0.1317167759101623, 0.14189623012358044, 0.13040449189745018, 0.14417577152167227, 0.2224676786354498, 0.3056792788345253, 0.2414481373453624, 0.28756952232650046, 0.22278939887058946, 0.187343819547659, 0.23602790194839252, 0.2751598728364182, 0.2955355781975906, 0.1576119663686648, 0.17174125885678182, 0.2001563222768059, 0.1600960377395857, 0.22713786671980107, 0.19854403459266545, 0.2004155306433958, 0.22110046646585102, 0.22056002825782794, 0.1808219180897046, 0.1619099232831701, 0.16609277148048207, 0.17759266714015853, 0.16573777551815472, 0.1884455301925424, 0.17154264373362071, 0.18053690344300044, 0.1723477919688492, 0.1761119766545044, 0.18630751200762263, 0.1824003308046841, 0.18004162685538216, 0.15352731957126076, 0.20224499928713935, 0.27664725988697303, 0.1705526580537764, 0.17182172589158307, 0.18476142918483907, 0.19321809584069816, 0.15484002914228023, 0.5229243550661715, 0.19597757514959768, 0.5307268536441425, 0.13509196731110384, 0.15806349300576317, 0.47668314881753837, 0.2755732803746299, 0.16558459752372423, 0.17704986781810095, 0.1937222857596579, 0.4179991943205882, 0.1767511780483343, 0.2008362611944038, 0.19262835634265763, 0.20122984881556572, 0.18268773121594684, 0.21048759651360716, 0.1871169410308543, 0.19142439693484903, 0.18681308874824532, 0.17468271613744324, 0.1983968219640514, 0.18636252493553862, 0.17082440204768723, 0.05768351933067262, 0.0663485437431034, 0.07898734224833459, 0.060544056323384, 0.05808736542234105, 0.06537160574312506, 0.0533766611073877, 0.05775786860278331, 0.06265624025095529]}, "mutation_prompt": null}
{"id": "1c2fcbb3-1e8f-40a9-8823-7827c22dbcda", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.7, 1.5, 1.5  # Changed inertia weight from 0.5 to 0.7\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_differential_evolution(func, self.particles[i])  # Updated method name\n                self.fes += 1\n\n    def adaptive_differential_evolution(self, func, target):  # Renamed and adjusted function\n        F = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        CR = 0.7  # Changed crossover rate from 0.9 to 0.7\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive mutation strategy and improved exploration-exploitation balance.", "configspace": "", "generation": 6, "fitness": 0.17928810994862487, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.450642411318657, 0.35384010280361455, 0.45476399591832506, 0.38878838446133956, 0.3737456705035318, 0.4636483467153837, 0.40207720099183497, 0.444395206116424, 0.33747854749553574, 0.07938175420615257, 0.07338343379010315, 0.017434452167114478, 0.05583860968329113, 0.03311762280761954, 0.06073397131111091, 0.060878139694925504, 0.0066729111632736204, 0.037297460389678405, 0.06568932477876988, 0.10026552945939415, 0.084634719228319, 0.08124803311610762, 0.060617372061658514, 0.06773674366848459, 0.09633368367864625, 0.06129620707581329, 0.09212945627245828, 0.07476128451203645, 0.07206524914053403, 0.058226479592768055, 0.047872201019396377, 0.04737722864649763, 0.035626353190641336, 0.11793484210636784, 0.0611923186321619, 0.04575510447534359, 0.9698352794087852, 0.9803167572827961, 0.981873504174579, 0.979248345356362, 0.973382324158851, 0.9731072465531981, 0.9716951203412559, 0.9772799104581016, 0.9733015156590059, 0.14957350070851938, 0.11825904296173562, 0.13225684898195722, 0.10019364465611469, 0.11062775079175158, 0.0896947920681912, 0.10605738965660061, 0.08598259816675946, 0.1183751916708834, 0.23688991894094324, 0.22757686859989212, 0.22649715573129525, 0.23225250375915418, 0.18578271238897182, 0.1897383483592101, 0.13799045550470324, 0.14149690495843203, 0.18372147245236536, 0.07274333197840188, 0.08279810329655735, 0.11923949961531888, 0.08245791349922527, 0.11912719635915581, 0.11072621116349657, 0.11102351115118636, 0.07639560760888231, 0.1391523715638988, 0.12236443651172901, 0.021398801308800453, 0.12404950346534238, 0.109689388091741, 0.03258545827216275, 0.14263208947363715, 0.08538004681625277, 0.014503369292738766, 0.11308033239842152, 0.0, 0.0, 0.0, 0.027678863721989577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06357491811272742, 0.015070333678281145, 0.028897695993518546, 0.012888186227295595, 0.01106642247243983, 0.006611203202826044, 0.03683280872377437, 0.031185614494923408, 0.0293026839766235, 0.04543789558964417, 0.012046792112166638, 0.0, 0.0, 0.013331037849691363, 0.01937118654816583, 0.02718433118924768, 0.028988353450442594, 0.03178665284995297, 0.04506469636951227, 0.043278449397610386, 0.0736078269374062, 0.05874827394882998, 0.0035428974821043457, 0.07949489331397586, 0.0376803995366326, 0.04030729658204002, 0.07399485998605126, 0.36202086412471735, 0.37357435292519736, 0.3779805899341062, 0.3825582324267164, 0.4161445256122184, 0.3843515113446374, 0.36138195010801777, 0.377392581420971, 0.3760816846741466, 0.0798382289167685, 0.0711142246297346, 0.07149650350314296, 0.07851513346567884, 0.09107477901684158, 0.07394609517726658, 0.07373159861289713, 0.05751605539143678, 0.07850690878713684, 0.17819191444094762, 0.12280392159123743, 0.1321817343304028, 0.24616586436349785, 0.1666139284048722, 0.12962755657936342, 0.14643575339485382, 0.14329794492268444, 0.15183497914856947, 0.2535557165061557, 0.23453435877919504, 0.2758733056386635, 0.2752627339524315, 0.19931377753448376, 0.24639507971147068, 0.23032982875674057, 0.30338713530966555, 0.219748029855786, 0.1507838720514837, 0.1618384868244701, 0.16187420458817792, 0.15507011053468522, 0.13437225520957252, 0.17883803485675942, 0.20856054346594444, 0.1978571196649198, 0.18284102233016897, 0.17825631666816444, 0.158812263432776, 0.15686708926231407, 0.17874701365506684, 0.16115866409428614, 0.15318324765227975, 0.2000630689486257, 0.1644164094467716, 0.17663631031745697, 0.18115452269985577, 0.16772580687053174, 0.18424557495707672, 0.17146838723685798, 0.1678842009212974, 0.17649448749606123, 0.18310357611877115, 0.17348432596523167, 0.19283047619761762, 0.5630121157385662, 0.15159611258577899, 0.1511991319084045, 0.5604390774496113, 0.19518829677510052, 0.1832864060361249, 0.11535948395317752, 0.16755341439985783, 0.5390430624969147, 0.2663408374758105, 0.17289737368527092, 0.27857415936899677, 0.24204547057973702, 0.1731260196882538, 0.19184295862672884, 0.20129410334369158, 0.19705629812313386, 0.27958308262873255, 0.16240150789873764, 0.18461458406907072, 0.18960273407562778, 0.17346907237836562, 0.16892123327088926, 0.19746121190827082, 0.1752421218708381, 0.18236511708761172, 0.19226954669310836, 0.0528196493313724, 0.06568848967255492, 0.07815785770232886, 0.057852162117404626, 0.0627974959003732, 0.0743195025718365, 0.06067776445441819, 0.06724631271547221, 0.05533200400237326]}, "mutation_prompt": null}
{"id": "5ae36f12-6965-4cd5-82dd-6591105b1154", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "2a247368-6d84-4df5-9a1e-1f2bdb6b263c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "3505ec93-d74a-4629-b4ac-49ce43481e30", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "f1b86c54-abec-4e6e-bc23-a32daaaa9f13", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "11b6cf71-baf8-4ce6-94a6-0d362359a50f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "87541d06-eeed-4761-9a05-20eb5709d00d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "9acc5da7-1762-4600-af08-7d776a1a47aa", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "cda7fadc-b156-4cfe-9430-7aa6ad3758d9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighbors = 3  # New: Number of neighbors for local best\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w_max, w_min = 0.9, 0.4  # New: Adaptive inertia\n        c1, c2 = 1.5, 1.5\n        w = w_max - (w_max - w_min) * (self.fes / self.budget)  # New: Adaptive inertia calculation\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.local_best(i) - self.particles[i])  # Change: Use local best\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target\n\n    def local_best(self, index):  # New: Local neighborhood best function\n        idxs = (index + np.arange(-self.neighbors, self.neighbors + 1)) % self.swarm_size\n        local_best_score = min(self.pbest_scores[idxs])\n        return self.pbest[idxs[np.argmin(self.pbest_scores[idxs])]]", "name": "HybridPSODE", "description": "Introduce adaptive inertia weight and local neighborhood best strategy to enhance exploitation and exploration balance in HybridPSODE.", "configspace": "", "generation": 14, "fitness": 0.1886305143502268, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.5304147135605612, 0.4941099050248955, 0.5520800863510376, 0.5546801847543396, 0.527719102693083, 0.577607285807871, 0.5226739201288819, 0.5313354664345507, 0.5173201322338901, 0.22659939707716026, 0.2374583538753613, 0.22620446377094472, 0.22145634610452403, 0.15625316808071077, 0.21619848639334005, 0.22260364673916921, 0.15980890474218246, 0.039035806448139865, 0.08840969860838355, 0.10227240842867791, 0.09016797867171389, 0.10061364524760374, 0.10362373955325999, 0.11549964342135899, 0.08816761386531757, 0.11600024514102791, 0.08832654942126916, 0.06919454823304183, 0.07124529470083885, 0.07655746030598276, 0.0666635112239875, 0.07756771697063736, 0.09194142427358931, 0.0626377676733395, 0.07416861510536255, 0.06135638232032148, 0.9790731258264543, 0.9767097151080071, 0.978820113654438, 0.9698438015349169, 0.9775035230313263, 0.9800482365082942, 0.977106497590827, 0.9773172978627305, 0.9788942824066057, 0.15661447943766138, 0.05770375917883375, 0.14947242984227704, 0.1202119517533059, 0.1340516163987635, 0.11745434228699836, 0.08414904667004086, 0.08497739083321088, 0.08348638641163564, 0.1803026454290182, 0.18581043609182202, 0.1588533255443022, 0.2612028036879763, 0.18541663815110954, 0.23682920796050833, 0.16695868085023524, 0.2277868064580526, 0.1594432906116966, 0.12477987489283782, 0.10707115197515882, 0.11262751588463926, 0.09161229876083876, 0.10696721602023485, 0.10540932757535515, 0.12048940377478812, 0.11168277869685295, 0.12270385628893998, 0.13549157647010102, 0.014757413330855118, 0.04372591413265614, 0.11668724713750012, 0.13546827657659055, 0.09778333325186594, 0.06661914616559994, 0.10731731189724503, 0.12868236472828176, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0943399527471731, 0.020892049672834756, 0.03866567577459534, 0.01195158638641769, 0.03221141037810504, 0.0015454330118942483, 0.018375858441675885, 0.07839691352618827, 0.03014120192494263, 0.01795824508418553, 0.01585380784546364, 0.03878277523458851, 0.0447073336344227, 0.03600586593432076, 0.03450103815245853, 0.050642731260251095, 0.05123266194944631, 0.044325672269081795, 0.0839884769734166, 0.03207721743416991, 0.11238840564028796, 0.07944952329470034, 0.10905521782303362, 0.07200881196970077, 0.04493217329523436, 0.03945338005950305, 0.09839455812505549, 0.3650584896767236, 0.40584470652341365, 0.4105191057122546, 0.3932242297439035, 0.3971670045634873, 0.37757252166072575, 0.36653066355139685, 0.37444135653502275, 0.3991729032313508, 0.07422629424914773, 0.09232396942667653, 0.06784692459262243, 0.08878308331694329, 0.08324044732537839, 0.063389743948005, 0.07762593666931861, 0.0752323725857128, 0.09906571694885602, 0.16717201059971232, 0.14286237444727845, 0.1400182332733857, 0.1320101321961964, 0.1489778271173995, 0.1418365283527896, 0.15164836807151527, 0.1362714648957457, 0.1494276498528021, 0.2631219282401899, 0.2524035514008126, 0.2838833773200711, 0.2498276275722202, 0.25521484277508166, 0.23584299247103713, 0.26478965800916454, 0.27918575860478845, 0.25299634454517494, 0.17364393268403255, 0.1802796570812929, 0.17254554116501508, 0.13691818069273465, 0.16142666520323679, 0.17907967983411122, 0.17964572123971378, 0.21386530537185422, 0.17611525403672823, 0.19002058512097142, 0.18210170290837224, 0.16304167996678331, 0.20073104790507834, 0.16004042615279013, 0.16775911533901033, 0.18065725146891332, 0.1585342810395658, 0.17489693536909912, 0.17177855353907856, 0.16959373266867572, 0.17793843379696006, 0.17712518614458328, 0.16988449335052846, 0.1776199772907021, 0.1744197080149259, 0.18158487745209073, 0.18308344552834455, 0.1944899053837127, 0.15954497609175455, 0.14682961108574744, 0.16718065024103435, 0.17594050695606733, 0.17685042195295553, 0.1460034503500085, 0.15705169327490354, 0.18634670955714205, 0.15810260504679663, 0.14914451522482175, 0.15188365276711013, 0.170982245041303, 0.1794028410671794, 0.18763724845220764, 0.18452995744282819, 0.20836634950394672, 0.18985772723618088, 0.19138177731041373, 0.19785497630403592, 0.2018505624158824, 0.20320059304353122, 0.18799696916652064, 0.1721728721152107, 0.17393850360943197, 0.175458370808373, 0.17666794107917028, 0.07754017257602286, 0.0730409839809778, 0.06844472398141077, 0.0609736765656369, 0.060890485035468345, 0.06804795155879606, 0.07012980131464264, 0.05603983532040069, 0.059158896504972636]}, "mutation_prompt": null}
{"id": "ea36af84-cd81-43b4-8c5f-934ecf0d6735", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "96a809df-a13c-426a-8da8-3192762e6c6b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "c53ebe01-19e9-43d8-af71-aa0cfe24745c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "e0b15c57-8415-4bac-99e9-4e13652041c4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.9 - (0.5 * self.fes) / self.budget  # Dynamic inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                if np.random.rand() > 0.5:  # Conditional DE\n                    self.particles[i] = self.differential_evolution(func, self.particles[i])\n\n    def differential_evolution(self, func, target):\n        F = 0.9  # Adjusted DE factor\n        CR = 0.8  # Adjusted crossover rate\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Inertia Weight and Optimized Differential Evolution for improved exploration-exploitation balance.", "configspace": "", "generation": 18, "fitness": 0.1555539606623442, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.2923409894641249, 0.2905247465571943, 0.2799696833829102, 0.28748854804533996, 0.38962423070805685, 0.29473778368084225, 0.3667963542095517, 0.3940896629575873, 0.28371531938740024, 0.017004365857603676, 0.05529509696426471, 0.019022109396461206, 9.999999999998899e-05, 0.008619984423851923, 0.017645303558537995, 9.999999999998899e-05, 0.07342867134754338, 0.007407230396715536, 0.08353933093603139, 0.07834097384303917, 0.07493628280151787, 0.05055778795044352, 0.0830248196982446, 0.08853397859085543, 0.05582612708765189, 0.05000889798825736, 0.06946639402947052, 0.06496724420668454, 0.04455436184063588, 0.053132434799545214, 0.0355945521749923, 0.04785653704294235, 0.05832204970053645, 0.03486040801103951, 0.05468643549012964, 0.07442545147899349, 0.9844510484740363, 0.9898767899718834, 0.9898032847825391, 0.9799289003628876, 0.9797845452450543, 0.9624292829493265, 0.9836488308774111, 0.980601349223119, 0.985064413296071, 0.11429374381049018, 0.07278844680343377, 0.13065382905063438, 0.12514307366845534, 0.09619014346691879, 0.10328156816180567, 0.08096322476315854, 0.08646678127618013, 0.09295039249276271, 0.15078012512761996, 0.14835831437950275, 0.14753890584711404, 0.22561962416733605, 0.1720888685046733, 0.15701944899523967, 0.11674793662154848, 0.1326604218305545, 0.15390119913957823, 0.09608543291564986, 0.06251001878371865, 0.10287753024500812, 0.07337281677856355, 0.06278947977130844, 0.041747360213274964, 0.10106871307745002, 0.025317985175569047, 0.08419814350276122, 0.04785471353507731, 0.01513132826772412, 0.032146745308761604, 0.05435236729830628, 0.051901858203228235, 0.06371425577232881, 0.04784310628603505, 9.999999999998899e-05, 0.11934289729908087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044492849294172965, 0.04777483021272089, 0.02270846088387357, 0.04346437598757724, 0.028511979913669716, 0.010212913764024445, 0.07210919287330708, 0.06775658732042444, 0.03721284799855151, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009183405116125476, 0.010270453107090405, 0.010816890803091561, 0.002177977199749659, 0.014085399341776661, 0.0007095112990160857, 0.001616230979386457, 0.04218146259129807, 0.016818265763140716, 0.074996079317323, 0.05261872870512785, 0.002618174488990377, 0.023292997570932505, 0.06985166001252652, 0.0462893274792594, 0.05463833664901374, 0.3018144570050951, 0.27245873796741493, 0.2799730387235624, 0.25439177149576786, 0.33613188490305634, 0.2767739719724106, 0.28519665011930906, 0.3301967370259621, 0.2896045521873164, 0.08533076789476512, 0.07335162142676088, 0.07683748089433007, 0.066878844837434, 0.05774989139235531, 0.08539024056551081, 0.07015586833098952, 0.07088846740836163, 0.06312549362823938, 0.12802575578391784, 0.16301382084534943, 0.14773893884775313, 0.21621639732318598, 0.18781695571718415, 0.13117861159238642, 0.13716025617391658, 0.15366779195803248, 0.15647059133624608, 0.18441871859126902, 0.23325394690228562, 0.18436317557674542, 0.21272372746372836, 0.2136463301515642, 0.21360533239819524, 0.20650803300839693, 0.2320820047943033, 0.19788762480349553, 0.12476961552737398, 0.1363354209914207, 0.15552726464433486, 0.15928348315655405, 0.1364805283222953, 0.1472430736252176, 0.1585133497454876, 0.1426499855485901, 0.18284518860837018, 0.1743145487190777, 0.13556021577933441, 0.1668985361734765, 0.18299395929716988, 0.16610714283542893, 0.17188092591197313, 0.17830791194892504, 0.1527253410047109, 0.16189056906196786, 0.1758387076894138, 0.14884625926770534, 0.14622996451434722, 0.17708710724757926, 0.1707834903602503, 0.18283902713990552, 0.17779288611480293, 0.14348477012944172, 0.16759828043617175, 0.47094596171221215, 0.1591317819940803, 0.12313273052393015, 0.29341094532260226, 0.16910125474293514, 0.15692924152010257, 0.09571332243143282, 0.13418210400385888, 0.1558192421784892, 0.17354151045610766, 0.1636800905343182, 0.15332943792386156, 0.16833194099866433, 0.16350850607277556, 0.1810937020950023, 0.19501459275462962, 0.19482683366044296, 0.18562224307795827, 0.18363308418867086, 0.1781668281492539, 0.17882389920075725, 0.18272335005156404, 0.17405625719688977, 0.18693211111836083, 0.19617368947062086, 0.18322572053008312, 0.17758595274919675, 0.05984533798750358, 0.047937692567779466, 0.05730358552901926, 0.05507230310200961, 0.06171856101171602, 0.05280207171660223, 0.053848660680863025, 0.053318626077458076, 0.0731390170868288]}, "mutation_prompt": null}
{"id": "96c1e904-3e8e-4f6f-ab1f-072b2c1b2478", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "a85403a9-f497-471b-8620-2a024de90210", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "4d5e59ae-9b71-4f56-9ba9-8218eb900e56", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "107f19a5-9c73-4dc2-b386-4b2d3fcfb996", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "993bb9f7-819a-4093-9011-3cf59230893f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "ca70a253-4a19-4500-a51a-259474173e76", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "93333dc1-1fc5-4b7f-9291-7ffded774e72", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w_max, w_min = 0.9, 0.4\n        w = w_max - ((w_max - w_min) * (self.fes / self.budget))  # Dynamic Inertia\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8 + 0.2 * (1 - self.fes / self.budget)  # Adaptive Mutation\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Inertia and Adaptive Mutation for improved convergence.", "configspace": "", "generation": 25, "fitness": 0.16697833581167335, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.41475176719500706, 0.3495122513473955, 0.3404559366602309, 0.484811226694397, 0.41261229853391834, 0.4078870191796131, 0.40034707943150893, 0.4632943426763899, 0.17329076539066024, 0.0, 0.08843666037625353, 0.02317998640298158, 0.09705496862580587, 0.023916357964382406, 0.09494845839604937, 0.16262106672459709, 0.1281643670665542, 0.15937427891107403, 0.09446866856604297, 0.06531804423913601, 0.07107605694028785, 0.07505529406906275, 0.08372840280677718, 0.06572831302265991, 0.07603522610423974, 0.09178816690540481, 0.10219750210095702, 0.04443804990768585, 0.05281140881666557, 0.04154111731019661, 0.07254170499836077, 0.04783726007800937, 0.04439402516161861, 0.05662896845950838, 0.0662520874410748, 0.08160201872301409, 0.979421902611388, 0.9853634348742086, 0.9812723307142084, 0.9806216219792926, 0.9789293330223673, 0.9722346301853872, 0.9730205257363479, 0.9816822329285767, 0.9721072839016437, 0.10516078507506044, 0.048878956897297376, 0.08906285664978619, 0.08573315566024575, 0.11069847637114416, 0.09417168726643343, 0.12446856169591902, 0.08701009032996498, 0.130629942216981, 0.2473734426179377, 0.15956584613310476, 0.14980843531222798, 0.19416020497981568, 0.20505232443103982, 0.17350821913140424, 0.1788362908319454, 0.2391353121945623, 0.11783139519886021, 0.07768827309314164, 0.11419002878382056, 0.07119882867212857, 0.11755458090974114, 0.06583357904885812, 0.09438580872995095, 0.12345224093843576, 0.06274497872770657, 0.08566504712750389, 0.06984342440643154, 0.04292678264223582, 0.06350022327337324, 0.11251376800093826, 0.09294240675428611, 0.05786258487769591, 0.05873449638812778, 0.016454332467021215, 0.12954667171885448, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08044724871193865, 0.014833825195821548, 0.01972334964129807, 0.05430406757521, 0.024415316130608655, 0.003969469453779517, 0.01635613077505982, 0.03348760649519755, 0.009394168193208707, 0.0, 0.016840859842378042, 0.015864471017757342, 0.025529145047518242, 0.0, 0.035490785702653405, 0.042348743069654304, 0.04006125697651619, 0.02444176546028609, 0.0, 0.0, 0.0904539110263689, 0.06391761987873001, 0.058154950360485014, 0.07160401206578937, 0.042085008993448025, 0.04409454940692015, 0.05257457429776946, 0.33814138279799455, 0.2852673209132105, 0.32312258067973476, 0.30317264425381696, 0.33254490885537114, 0.30485944936213505, 0.3799053423169918, 0.318628195203019, 0.3519439063057128, 0.07710925842817273, 0.060389589568839996, 0.07885353978372622, 0.06454687262277425, 0.067879942922077, 0.06653253166418471, 0.09116124300868123, 0.06175146035654766, 0.05006299907248757, 0.13588324468990975, 0.12881719745054887, 0.11594499743945763, 0.1591141975340028, 0.2339837667707353, 0.1240352169495833, 0.13757818312661874, 0.16798440276855342, 0.14647841201599643, 0.22154621953849762, 0.23204724819001366, 0.22904367220901534, 0.2328015507215525, 0.21495210267585352, 0.1831303028714235, 0.2579958028810867, 0.27137170552727763, 0.2394158706588556, 0.1368209237300263, 0.1119469840950762, 0.16907293584468475, 0.15080778012269713, 0.1716302680136671, 0.19371743217070703, 0.15591073840977498, 0.1942152493272291, 0.11966378760262486, 0.14547889699690497, 0.16357222723182496, 0.17876387669515048, 0.14883532926630705, 0.1863555762799074, 0.1895875653057627, 0.18736011446153733, 0.16886142296033724, 0.15683996427024016, 0.15031340210859545, 0.12181821955936034, 0.16947362843699498, 0.16230243087209018, 0.1769594843829866, 0.17394936242540093, 0.17083112116354437, 0.17143394380970034, 0.1381849571189967, 0.23235777338770314, 0.20789231645283157, 0.14576235618784372, 0.17471096897464156, 0.19562737363981775, 0.17984220252526717, 0.14507104547008876, 0.13771001742235278, 0.26913541869755286, 0.21518544340832302, 0.1637609459175452, 0.16116029420316846, 0.20094383930773319, 0.18112697446330162, 0.20709421959702579, 0.19195075767250513, 0.1902101107317663, 0.19537036896133264, 0.17633245954542032, 0.18411846761456507, 0.17508632302107507, 0.18351826507669333, 0.17566343548979224, 0.1747931993651125, 0.17461822277876127, 0.18978666792498233, 0.1780342819712254, 0.06473298525950555, 0.06207118802981082, 0.05680824999869161, 0.05630310241377534, 0.0779153864076434, 0.06000541542505489, 0.06725619937508587, 0.055690249353933186, 0.0656978063996061]}, "mutation_prompt": null}
{"id": "02c67add-24b3-4355-bdf8-ff502716bfda", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "2ab30e11-4ce2-4d31-954e-c6de2ed7a9b4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "ae333646-4654-4798-b88b-570ea666f221", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "0298d43a-82ec-4142-8715-c6385bde7326", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.learning_rate = np.full(self.swarm_size, 0.5)  # Adaptive learning rate\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                    self.learning_rate[i] = 0.8  # Increase learning rate when improved\n                else:\n                    self.learning_rate[i] = 0.3  # Decrease learning rate when not improved\n\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            w = self.learning_rate[i]  # Use adaptive learning rate\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid Particle Swarm Optimization using Adaptive Learning Rate and Dynamic Exploration for improved convergence and robustness.", "configspace": "", "generation": 29, "fitness": 0.22658655453402313, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.5370833185310981, 0.5040987544541673, 0.5497892542282965, 0.5805705405996295, 0.544797595705524, 0.18864397859275472, 0.5595065234341281, 0.6400826718449428, 0.6189000569900464, 0.2730098284639757, 0.2713647345754562, 0.13240159464746626, 0.24150349604450838, 0.2535161363970474, 0.16244114378160446, 0.18844891347794057, 0.0463451559508441, 0.26632841009516317, 0.12152163459438037, 0.1034983409796556, 0.10015729047643485, 0.11139966387322531, 0.12896477752363567, 0.1259534924720236, 0.11693974667542029, 0.12562904658059704, 0.13081601441334645, 0.08378830438983331, 0.10394722267367984, 0.10472481812773893, 0.10181650006580711, 0.11750477069871756, 0.09729435760856797, 0.08831418082663367, 0.10257967180746586, 0.09997402615052575, 0.9794979495970915, 0.9853349408806593, 0.981034679830472, 0.9806050981981478, 0.9728548252035403, 0.9715770817467642, 0.9725910121467987, 0.979396304649493, 0.9704837849853198, 0.2193951564690425, 0.15539984175022747, 0.20486466519405788, 0.16377541996720524, 0.13144835226772666, 0.13944886425611547, 0.19039905535427937, 0.12814394014660624, 0.0880676188972297, 0.6440778903176014, 0.2691060365949919, 0.4468885180081199, 0.18988826398644787, 0.2885473323980612, 0.18808464936955815, 0.2788816109380625, 0.31146220475002373, 0.271323536776365, 0.12885758733428032, 0.15596971810627036, 0.1546355005373824, 0.16005119223632192, 0.14943419130813163, 0.18665714624784469, 0.15084775035047748, 0.14073563808123313, 0.1305864604995428, 0.14650524738072412, 0.1123940661124363, 0.18850995091512912, 0.26417778361727284, 0.19228773676692612, 0.13015771509554486, 0.1643051181302344, 0.07876287848520802, 0.2251525616915513, 0.029266795819553937, 0.0, 0.0, 0.02433198015271243, 0.0, 0.0, 0.016073225801704227, 0.0, 0.07982199873350071, 0.08431063352539092, 0.04701472959850794, 0.1201929930228347, 0.07527839708557726, 0.06988025737363246, 0.006150801572503362, 0.05860311989506228, 0.10041456538669413, 0.06047204989330601, 0.018638088109551254, 0.02331660580128847, 0.039677015469286925, 0.0832567369979641, 0.04306052039677344, 0.047207543635759075, 0.05577875265701149, 0.04946625899138524, 0.04995932969765782, 0.12051473712018868, 0.08098216856171947, 0.054184179161649415, 0.14628357115855128, 0.1671185845479507, 0.164121988426025, 0.0726019361432747, 0.04728541101342887, 0.148322683727935, 0.4430018900427358, 0.46641861500243686, 0.45821525431441057, 0.4490640428222872, 0.4395782423261584, 0.4928407019741389, 0.48455587020548696, 0.41752699425649487, 0.4189143699818274, 0.10050560752982762, 0.09544401474687514, 0.08911355073681893, 0.11394003194416213, 0.10718547837498771, 0.09940802030867069, 0.07751091938556198, 0.10732010978756656, 0.11124483593029633, 0.1659066669727428, 0.1681161622626982, 0.14497768161947255, 0.15349445120412963, 0.1519972648529354, 0.1499527051993329, 0.17256481936579038, 0.18016018838734615, 0.14856804215050856, 0.33753834412379125, 0.33784277364869597, 0.2938859523953764, 0.2591998863292855, 0.28281621357960884, 0.3019129171419157, 0.3349874245770913, 0.3454032057169607, 0.32838582853628306, 0.18084096523557114, 0.21175978663887218, 0.1858502493319817, 0.2486384638253749, 0.2291891667018121, 0.2948806499079405, 0.24650672941224372, 0.2258009013952853, 0.19366736163573117, 0.1934276997955101, 0.20603629508495946, 0.17863980076368657, 0.19605050406326163, 0.1778397143942464, 0.19740259608283017, 0.21782730843613718, 0.17989389221680963, 0.19056470538122228, 0.1975117878177226, 0.1875049722006592, 0.20661017900297407, 0.20446820312701652, 0.20409576271154006, 0.19222188186902722, 0.20227473983262245, 0.19952027731363886, 0.29456525692984714, 0.18852911265381955, 0.16099522759221596, 0.123504185069931, 0.7428960670748526, 0.19463209718486418, 0.19334076139965217, 0.3964159810724731, 0.16443408353197664, 0.5182464176927913, 0.1707849313725197, 0.15233795370571168, 0.33769610741221834, 0.20159038001118257, 0.4007039395606047, 0.38980761056927726, 0.20668516968530048, 0.3314584957152532, 0.20311184683173356, 0.17855839563059506, 0.17248039106290014, 0.17339755488655717, 0.17416046273883035, 0.16694248118755461, 0.1953655420148942, 0.19298437811717695, 0.18572874742868095, 0.19131120744963692, 0.07252475436760064, 0.07190178030608985, 0.07177087005505711, 0.08384131789879834, 0.06772528886140439, 0.07624417916879134, 0.08146026679006924, 0.08366943789312686, 0.08251892170443931]}, "mutation_prompt": null}
{"id": "7e6eecc8-fb99-4750-95c8-b3d31bc91fda", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "a167488c-6528-46c4-8c03-09a6964d3749", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "b9459f66-d30e-4e1a-84b7-ded689b5ba47", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "dceb0bca-da19-49eb-a8fd-82b086cea608", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w, c1, c2 = 0.5, 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.differential_evolution(func, self.particles[i])\n                self.fes += 1\n\n    def differential_evolution(self, func, target):\n        F = 0.8\n        CR = 0.9\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Novel Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhancing global and local search dynamics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.695295924857013, 0.7166104097675722, 0.7252062169023605, 0.7091244820713432, 0.7607664383405597, 0.18951339986482696, 0.7748053595306477, 0.7438896360239948, 0.7336808268538222, 0.40167654717101675, 0.4069722803836415, 0.5066638950432708, 0.5216833561262055, 0.04311265560156685, 0.4629419082713244, 0.36878190404686906, 0.5653467591182215, 0.3778286931000394, 0.10318174650336331, 0.13265490728796647, 0.11460866402121395, 0.13122327706371506, 0.09938625344694774, 0.1358065995732275, 0.12604854106027963, 0.11120106105429406, 0.14668463134270893, 0.09808361271377364, 0.08138621635208843, 0.1181039366239931, 0.0964919911315858, 0.08648577252680478, 0.09365256330023786, 0.07741960976142659, 0.08775369363955121, 0.13104701788667084, 0.9664697999988634, 0.9781098609960005, 0.9739544634008986, 0.97882225643549, 0.9727982240243624, 0.9645154219107502, 0.9692509314225637, 0.9794569038170774, 0.9704370246152652, 0.13634775438778146, 0.10272038752958323, 0.25000925522387174, 0.16105559192997077, 0.16264468736118398, 0.13888011730483563, 0.08785912737712476, 0.08761403379214205, 0.21846084393392062, 0.6634418760206999, 0.539435204249985, 0.2115026338339725, 0.2710911394615376, 0.20390726602609754, 0.19729298475188994, 0.2920004889494108, 0.3011193583653532, 0.5215209981116373, 0.09329255582767182, 0.28052611158030116, 0.1878943696610733, 0.10832998885916345, 0.17948803741167252, 0.15633379449069473, 0.18530119553579738, 0.10824281129950486, 0.20085027054335136, 0.22644335090508916, 0.1070470869413892, 0.16929373959705463, 0.18939683605222668, 0.10594030347500427, 0.1623586420244415, 0.08976196309332607, 0.0035305282883977274, 0.20130877454947516, 0.0, 0.0, 0.0, 0.013091136860937658, 0.06706246908294056, 0.0, 0.0037563227462394932, 0.0, 0.047880453586639504, 0.10609905968052336, 0.023824775051056846, 0.0925416114223725, 0.09029225073004488, 0.06595230979892452, 0.03275411190251265, 0.09233984712929488, 0.06136754397450783, 0.03503665060538519, 0.11091547984145966, 0.02849520565317687, 0.11540010933089961, 0.11094507103061624, 0.061840954557048855, 0.05250265020848077, 0.0826565817136865, 0.057564995210106606, 0.0809302714110407, 0.04494618974221243, 0.026692836791719632, 0.10368310999079333, 0.12048935454219822, 0.12906488564167706, 0.13733034279263479, 0.09514737658386452, 0.046143645788355614, 0.07587326636186298, 0.44032181065470366, 0.49193487055059926, 0.4801540954761312, 0.49202624244229154, 0.5085174822836762, 0.48924865745683255, 0.5452933891327905, 0.46543457212021677, 0.4682761240867912, 0.1418714618575606, 0.10646782913851527, 0.09333633763671456, 0.10863653782968796, 0.10827507806586922, 0.11029720429824807, 0.07651759957798354, 0.07194445729635413, 0.10209066033626346, 0.12753480934459127, 0.2083022178902192, 0.14811291802542437, 0.12311483807947954, 0.14830801936621807, 0.15225428128186214, 0.1889776755096646, 0.18780515808139386, 0.16303857014229184, 0.2985807532902778, 0.3361290042577163, 0.2997662441963157, 0.3500990020236968, 0.3305446752344734, 0.3223822719960636, 0.3400729550683831, 0.40340939190677905, 0.36482751066810637, 0.21209950604881622, 0.21016623857160288, 0.2549636656612313, 0.2690870824809126, 0.22613083311011106, 0.19909862476451523, 0.2271569033426183, 0.2436898687678295, 0.20110262618745622, 0.18569657397436223, 0.18112691458224106, 0.19180274977919975, 0.16460759543896986, 0.1684816563528424, 0.1678464916538449, 0.19559940464646552, 0.18042874599017, 0.1882089493460264, 0.21524180078266386, 0.19292247424924813, 0.19356496433659853, 0.2180960058565231, 0.16847198089677695, 0.20277132234815065, 0.23129301169735506, 0.17982154294549546, 0.22085034857808206, 0.7883574351303957, 0.15328937408893184, 0.15225261125861667, 0.6229693178429903, 0.19889429738156672, 0.19677475025240077, 0.09908649350890064, 0.16603279489655975, 0.800933593364254, 0.5029144382232315, 0.1537616367085911, 0.17317353045816986, 0.1635269519180791, 0.32722566259434327, 0.3659669762829669, 0.10417596170872967, 0.2529167834238013, 0.10430000453936394, 0.18893098414330667, 0.18427828819343117, 0.17799966617451324, 0.19111919341025785, 0.17203239186567265, 0.1864323888861652, 0.17648763364295195, 0.1669807417749547, 0.17178354508290972, 0.0704646149204502, 0.07032349399048254, 0.060207589929253125, 0.0626682856859947, 0.06987733876055469, 0.08442479969868055, 0.060753828596129655, 0.06366554705870764, 0.061660452103097896]}, "mutation_prompt": null}
{"id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.9)  # Adaptive mutation factor\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Adaptive Mutation and Velocity Damping for improved exploration-exploitation balance.", "configspace": "", "generation": 34, "fitness": 0.27949666014540103, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "9d3e8801-fcdc-4a4c-a5c9-49eb21e17fb3", "metadata": {"aucs": [0.8028091364700235, 0.8081062099148022, 0.7966487351627463, 0.8047817590191543, 0.7862604449269923, 0.8322669073888598, 0.8288863619799015, 0.8031093983317925, 0.8076985199142841, 0.6905264037225114, 0.03985117407749328, 0.6648503298695665, 0.0, 0.5978660069604083, 0.6243112596186966, 0.6460357912586747, 0.05321114922427228, 0.6721498469990146, 0.1297199287329106, 0.14120676781627572, 0.11966506512416486, 0.11514692056148346, 0.1468373980399763, 0.16700823437180956, 0.16723988475671925, 0.10090065865595721, 0.09568097112414031, 0.11014516635709393, 0.1317443963246615, 0.12628784986758324, 0.1278566619981113, 0.09025256101972301, 0.1297487191100528, 0.12459696852588364, 0.09554730664508193, 0.09401079318593442, 0.9787020580575945, 0.9796603164293017, 0.9814371448109314, 0.9775668314395475, 0.9719945165545476, 0.9687572675225448, 0.9713654195590172, 0.9739851648577372, 0.9673924598508057, 0.45400034901342257, 0.3796143001958401, 0.5088543392516323, 0.44591216200049244, 0.14938983052386612, 0.38793255976219176, 0.12581879795148876, 0.3765952824376382, 0.4041111687696829, 0.32239951758247676, 0.21756951806524327, 0.34713533300483035, 0.2762962466504194, 0.26810002133897437, 0.1917623240991173, 0.2230645004673537, 0.1354416714002844, 0.3270673828047732, 0.24003681636715846, 0.1543765198523812, 0.17468291776517675, 0.09047496423112111, 0.12893448173004762, 0.18600991245693665, 0.14528033837140464, 0.12225788743350008, 0.25650525565273785, 0.18397895219779337, 0.11017838784192557, 0.15339187646707864, 0.20132202464683446, 0.14959961887964768, 0.20276197440123656, 0.16441013329871945, 0.0, 0.29999895840519075, 0.0, 0.0, 0.02438580771615928, 0.0, 0.0, 0.000513416175302539, 0.020260517011336576, 0.0, 0.007472242244628058, 0.036825681693003376, 0.0633211814076633, 0.05197085657458522, 0.09017150138273267, 0.02207106445053708, 0.03192249856171381, 0.09298412122161193, 0.05113046354275175, 0.03474060895680009, 0.12318109236655672, 0.07535385071800793, 0.11671387715172898, 0.09727758997380864, 0.16762223102830698, 0.07510742988681918, 0.06321138738081478, 0.07301456159365627, 0.11236659628402246, 0.10354396660362286, 0.1189767069267762, 0.2704414264117827, 0.13128884381244532, 0.12944136501276404, 0.16953040580138823, 0.22189948150081118, 0.0, 0.07845346685068144, 0.5020667123479734, 0.5433537411224207, 0.533891114350992, 0.5248534751223406, 0.5190273922928943, 0.5712258017597949, 0.5348553597129311, 0.5146006176422329, 0.532006980918726, 0.1257591008285277, 0.11942172103042592, 0.10393009175432999, 0.16663519566268115, 0.11418737729740203, 0.08685235066393904, 0.14804858589317482, 0.13315044073718474, 0.10370440553718652, 0.14788988379236356, 0.20116794136365335, 0.1729394925661374, 0.2572721826350812, 0.3341684247784523, 0.14783199041077355, 0.2527894180881285, 0.20958764107218242, 0.19638878021296646, 0.3462399682276739, 0.389358656110804, 0.31671010979389425, 0.30621055177634027, 0.24100463391670068, 0.37703753064419876, 0.366202652248801, 0.38646238148110346, 0.28223439582630894, 0.16947324839880462, 0.3040718377333358, 0.18354059075798956, 0.17813506155197478, 0.17733872006497609, 0.27360957880936865, 0.22409949835518905, 0.2696837422024039, 0.2560879275342365, 0.19198584147472664, 0.19231686737519482, 0.185482650792972, 0.20382060838680316, 0.19908953216816272, 0.20634976693078622, 0.18982793880239235, 0.18308506194950624, 0.230778522339267, 0.19775052254163272, 0.24273174609781456, 0.5906400932417375, 0.5810294797274485, 0.21417887274000824, 0.20860449350054056, 0.44149379715758164, 0.21867701015768926, 0.17948290167437642, 0.8137422449707588, 0.1259495661070309, 0.15280082898000835, 0.8555774625386846, 0.19823846622379027, 0.8301916145800076, 0.18776091529457062, 0.13561059065193581, 0.8463387621357794, 0.6447697781104909, 0.15399664456119555, 0.4354575246124789, 0.45332678289251793, 0.27036056793750807, 0.20759758080683988, 0.2000403552738842, 0.10343806183850757, 0.4992589831059526, 0.167039775899825, 0.17420894572391132, 0.17159430480118476, 0.17776762727625173, 0.19646846105421667, 0.17898126270682857, 0.17587571893511744, 0.1634114533455039, 0.18800956543087488, 0.0919274848706082, 0.08262809568861085, 0.08531568702038206, 0.07871144964177379, 0.07906023772896265, 0.084261795773518, 0.0884449895829732, 0.07652183509196331, 0.08987272642431254]}, "mutation_prompt": null}
{"id": "92795c41-a5c2-4b57-85b5-899e00acf32c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.9)  # Adaptive mutation factor\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Adaptive Mutation and Velocity Damping for improved exploration-exploitation balance.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.8028091364700235, 0.8081062099148022, 0.7966487351627463, 0.8047817590191543, 0.7862604449269923, 0.8322669073888598, 0.8288863619799015, 0.8031093983317925, 0.8076985199142841, 0.6905264037225114, 0.03985117407749328, 0.6648503298695665, 0.0, 0.5978660069604083, 0.6243112596186966, 0.6460357912586747, 0.05321114922427228, 0.6721498469990146, 0.1297199287329106, 0.14120676781627572, 0.11966506512416486, 0.11514692056148346, 0.1468373980399763, 0.16700823437180956, 0.16723988475671925, 0.10090065865595721, 0.09568097112414031, 0.11014516635709393, 0.1317443963246615, 0.12628784986758324, 0.1278566619981113, 0.09025256101972301, 0.1297487191100528, 0.12459696852588364, 0.09554730664508193, 0.09401079318593442, 0.9787020580575945, 0.9796603164293017, 0.9814371448109314, 0.9775668314395475, 0.9719945165545476, 0.9687572675225448, 0.9713654195590172, 0.9739851648577372, 0.9673924598508057, 0.45400034901342257, 0.3796143001958401, 0.5088543392516323, 0.44591216200049244, 0.14938983052386612, 0.38793255976219176, 0.12581879795148876, 0.3765952824376382, 0.4041111687696829, 0.32239951758247676, 0.21756951806524327, 0.34713533300483035, 0.2762962466504194, 0.26810002133897437, 0.1917623240991173, 0.2230645004673537, 0.1354416714002844, 0.3270673828047732, 0.24003681636715846, 0.1543765198523812, 0.17468291776517675, 0.09047496423112111, 0.12893448173004762, 0.18600991245693665, 0.14528033837140464, 0.12225788743350008, 0.25650525565273785, 0.18397895219779337, 0.11017838784192557, 0.15339187646707864, 0.20132202464683446, 0.14959961887964768, 0.20276197440123656, 0.16441013329871945, 0.0, 0.29999895840519075, 0.0, 0.0, 0.02438580771615928, 0.0, 0.0, 0.000513416175302539, 0.020260517011336576, 0.0, 0.007472242244628058, 0.036825681693003376, 0.0633211814076633, 0.05197085657458522, 0.09017150138273267, 0.02207106445053708, 0.03192249856171381, 0.09298412122161193, 0.05113046354275175, 0.03474060895680009, 0.12318109236655672, 0.07535385071800793, 0.11671387715172898, 0.09727758997380864, 0.16762223102830698, 0.07510742988681918, 0.06321138738081478, 0.07301456159365627, 0.11236659628402246, 0.10354396660362286, 0.1189767069267762, 0.2704414264117827, 0.13128884381244532, 0.12944136501276404, 0.16953040580138823, 0.22189948150081118, 0.0, 0.07845346685068144, 0.5020667123479734, 0.5433537411224207, 0.533891114350992, 0.5248534751223406, 0.5190273922928943, 0.5712258017597949, 0.5348553597129311, 0.5146006176422329, 0.532006980918726, 0.1257591008285277, 0.11942172103042592, 0.10393009175432999, 0.16663519566268115, 0.11418737729740203, 0.08685235066393904, 0.14804858589317482, 0.13315044073718474, 0.10370440553718652, 0.14788988379236356, 0.20116794136365335, 0.1729394925661374, 0.2572721826350812, 0.3341684247784523, 0.14783199041077355, 0.2527894180881285, 0.20958764107218242, 0.19638878021296646, 0.3462399682276739, 0.389358656110804, 0.31671010979389425, 0.30621055177634027, 0.24100463391670068, 0.37703753064419876, 0.366202652248801, 0.38646238148110346, 0.28223439582630894, 0.16947324839880462, 0.3040718377333358, 0.18354059075798956, 0.17813506155197478, 0.17733872006497609, 0.27360957880936865, 0.22409949835518905, 0.2696837422024039, 0.2560879275342365, 0.19198584147472664, 0.19231686737519482, 0.185482650792972, 0.20382060838680316, 0.19908953216816272, 0.20634976693078622, 0.18982793880239235, 0.18308506194950624, 0.230778522339267, 0.19775052254163272, 0.24273174609781456, 0.5906400932417375, 0.5810294797274485, 0.21417887274000824, 0.20860449350054056, 0.44149379715758164, 0.21867701015768926, 0.17948290167437642, 0.8137422449707588, 0.1259495661070309, 0.15280082898000835, 0.8555774625386846, 0.19823846622379027, 0.8301916145800076, 0.18776091529457062, 0.13561059065193581, 0.8463387621357794, 0.6447697781104909, 0.15399664456119555, 0.4354575246124789, 0.45332678289251793, 0.27036056793750807, 0.20759758080683988, 0.2000403552738842, 0.10343806183850757, 0.4992589831059526, 0.167039775899825, 0.17420894572391132, 0.17159430480118476, 0.17776762727625173, 0.19646846105421667, 0.17898126270682857, 0.17587571893511744, 0.1634114533455039, 0.18800956543087488, 0.0919274848706082, 0.08262809568861085, 0.08531568702038206, 0.07871144964177379, 0.07906023772896265, 0.084261795773518, 0.0884449895829732, 0.07652183509196331, 0.08987272642431254]}, "mutation_prompt": null}
{"id": "737bd121-5d55-439a-bbf8-3fcae240407a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i].copy()\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i].copy()\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.4 + 0.5 * (1 - self.fes / self.budget)  # Adjusted linear inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if np.random.rand() < 0.3:  # Local search probability\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.8)  # Adaptive mutation factor\n        CR = 0.6  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Adaptive Neighborhood PSO with Differential Evolution for enhanced local search and diversity maintenance.", "configspace": "", "generation": 36, "fitness": 0.23988589900106122, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.7259267563853997, 0.721519019402179, 0.7024971749688139, 0.7248818980548493, 0.754733804068248, 0.7449233960262927, 0.7088448263618741, 0.7228012864295101, 0.18210890263892998, 0.034334462413436295, 0.505887630310907, 0.516000531627919, 0.4840171272578704, 0.04043127396060442, 0.47277728541847686, 0.41073439522412813, 0.5009987290498858, 0.4403565802944265, 0.12998992414634303, 0.127479800631776, 0.42820293978973134, 0.13922497339961482, 0.07280221079014992, 0.1592416046116446, 0.15996900655343416, 0.0650290487592371, 0.13333878815800948, 0.10430763448125291, 0.13603479993895362, 0.0876253304818867, 0.11638932004026215, 0.12144893769911635, 0.10314876831749975, 0.09795877982110013, 0.10280251080779235, 0.12346382897482344, 0.9868014991891568, 0.9917047379701119, 0.9890848124706044, 0.9688937373310735, 0.9878981044472965, 0.9792317534271878, 0.9876057576130864, 0.9844937758301792, 0.9864898023173897, 0.49045330886289706, 0.05882977797704958, 0.05906244382258263, 0.43978776892349847, 0.1427273834462467, 0.4226419010204321, 0.11878957944621238, 0.08440606367834225, 0.08801045233975979, 0.6381919396236178, 0.19532359078113737, 0.20203173487173298, 0.3371278068879121, 0.17541432189995754, 0.2109766537302047, 0.20803380827476048, 0.12496015442491681, 0.21230712311103395, 0.167529894850745, 0.23492683202606768, 0.22154784603979938, 0.17254533143513584, 0.11875810208446291, 0.13200976956915278, 0.10429942760156241, 0.16137894700781996, 0.2010361253625268, 0.15859270889419563, 0.021058829828788705, 0.1782884267488063, 0.12336412572051103, 0.13138407227869742, 0.12878576457403346, 0.18263903722713826, 0.0, 0.20049209691425884, 0.0, 0.0, 0.04424133331289737, 0.00018227620018262947, 0.0, 0.011893878233739663, 0.0, 0.0, 0.002915878553002793, 0.05247518850381605, 0.01508867469070263, 0.08231456712304319, 0.04928097705265466, 0.010012914904275916, 0.0, 0.08389780692608495, 0.10168331208447356, 0.05177638901028658, 0.0, 0.02949277651584925, 0.0, 0.05478949393058652, 0.07049447110789664, 0.12907164388432557, 0.07877027855703023, 0.05333322365425697, 0.05441669068777244, 0.06373334710502365, 0.16643202037193916, 0.06707485376779732, 0.023522348186974185, 0.0, 0.15421156226225052, 0.09871891028399293, 0.07040489114562587, 0.07131215210689101, 0.4712073101585341, 0.45406227058075765, 0.4813947639737175, 0.45472832638089744, 0.4792642102717072, 0.49629531361012225, 0.48029449978802496, 0.48343887666242413, 0.48836387446456897, 0.0752184149780818, 0.08854415563428042, 0.08527575479334915, 0.13815405185411167, 0.12494437031978778, 0.1304568849084894, 0.10825953146288336, 0.10622774577863492, 0.08478571007172575, 0.15286440502014098, 0.1640778452375713, 0.1698984566409184, 0.2567301628832592, 0.2647783801234359, 0.2282888750490618, 0.23593957915389563, 0.1559389605455237, 0.18937883412548318, 0.22841903133707653, 0.39565819701585325, 0.3282777661246523, 0.22212910696387766, 0.29826211549923753, 0.4486861681271431, 0.32760825057550136, 0.2759108426124206, 0.25655564554096577, 0.2236437149724737, 0.19435979916923174, 0.2594969541500377, 0.1720969642572998, 0.2521362537448969, 0.22683279491078967, 0.2569380808280779, 0.2220396121466479, 0.27886091143423797, 0.21803116691093216, 0.14439128109450705, 0.18206727683154866, 0.1944536903751477, 0.21974892417917946, 0.1916030038785952, 0.20905119451378829, 0.19714080817227786, 0.20823285200832653, 0.21748775954417499, 0.20948473111984045, 0.21273889137822677, 0.1790951786765419, 0.20836210118926124, 0.2137023736469238, 0.1795802417794875, 0.21191534870782947, 0.2099848163015583, 0.22350743105800297, 0.16316448094985359, 0.12380575121267612, 0.7704376041324162, 0.19725790651745156, 0.7537688649386863, 0.09949367910836537, 0.1691793356811031, 0.17940885972837872, 0.490954177449882, 0.15549966434878348, 0.313402570409112, 0.20534795819820106, 0.16732345509741808, 0.20292638714743472, 0.12516653786004095, 0.19385861863674458, 0.15885041000155176, 0.19403100582821908, 0.17755068425346177, 0.18504439059843458, 0.18052680702131563, 0.1881672467250981, 0.19483825401519572, 0.2002606304057033, 0.17490454607947525, 0.17533490438320765, 0.08029330608489782, 0.07997510852954515, 0.08095097886928926, 0.07512737752794652, 0.07725908837520801, 0.08238207973669465, 0.07609736208166362, 0.09356888705121802, 0.07820014065475156]}, "mutation_prompt": null}
{"id": "d9ea950e-f847-4437-a71b-c98dd68cbcb5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.9)  # Adaptive mutation factor\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Adaptive Mutation and Velocity Damping for improved exploration-exploitation balance.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.8028091364700235, 0.8081062099148022, 0.7966487351627463, 0.8047817590191543, 0.7862604449269923, 0.8322669073888598, 0.8288863619799015, 0.8031093983317925, 0.8076985199142841, 0.6905264037225114, 0.03985117407749328, 0.6648503298695665, 0.0, 0.5978660069604083, 0.6243112596186966, 0.6460357912586747, 0.05321114922427228, 0.6721498469990146, 0.1297199287329106, 0.14120676781627572, 0.11966506512416486, 0.11514692056148346, 0.1468373980399763, 0.16700823437180956, 0.16723988475671925, 0.10090065865595721, 0.09568097112414031, 0.11014516635709393, 0.1317443963246615, 0.12628784986758324, 0.1278566619981113, 0.09025256101972301, 0.1297487191100528, 0.12459696852588364, 0.09554730664508193, 0.09401079318593442, 0.9787020580575945, 0.9796603164293017, 0.9814371448109314, 0.9775668314395475, 0.9719945165545476, 0.9687572675225448, 0.9713654195590172, 0.9739851648577372, 0.9673924598508057, 0.45400034901342257, 0.3796143001958401, 0.5088543392516323, 0.44591216200049244, 0.14938983052386612, 0.38793255976219176, 0.12581879795148876, 0.3765952824376382, 0.4041111687696829, 0.32239951758247676, 0.21756951806524327, 0.34713533300483035, 0.2762962466504194, 0.26810002133897437, 0.1917623240991173, 0.2230645004673537, 0.1354416714002844, 0.3270673828047732, 0.24003681636715846, 0.1543765198523812, 0.17468291776517675, 0.09047496423112111, 0.12893448173004762, 0.18600991245693665, 0.14528033837140464, 0.12225788743350008, 0.25650525565273785, 0.18397895219779337, 0.11017838784192557, 0.15339187646707864, 0.20132202464683446, 0.14959961887964768, 0.20276197440123656, 0.16441013329871945, 0.0, 0.29999895840519075, 0.0, 0.0, 0.02438580771615928, 0.0, 0.0, 0.000513416175302539, 0.020260517011336576, 0.0, 0.007472242244628058, 0.036825681693003376, 0.0633211814076633, 0.05197085657458522, 0.09017150138273267, 0.02207106445053708, 0.03192249856171381, 0.09298412122161193, 0.05113046354275175, 0.03474060895680009, 0.12318109236655672, 0.07535385071800793, 0.11671387715172898, 0.09727758997380864, 0.16762223102830698, 0.07510742988681918, 0.06321138738081478, 0.07301456159365627, 0.11236659628402246, 0.10354396660362286, 0.1189767069267762, 0.2704414264117827, 0.13128884381244532, 0.12944136501276404, 0.16953040580138823, 0.22189948150081118, 0.0, 0.07845346685068144, 0.5020667123479734, 0.5433537411224207, 0.533891114350992, 0.5248534751223406, 0.5190273922928943, 0.5712258017597949, 0.5348553597129311, 0.5146006176422329, 0.532006980918726, 0.1257591008285277, 0.11942172103042592, 0.10393009175432999, 0.16663519566268115, 0.11418737729740203, 0.08685235066393904, 0.14804858589317482, 0.13315044073718474, 0.10370440553718652, 0.14788988379236356, 0.20116794136365335, 0.1729394925661374, 0.2572721826350812, 0.3341684247784523, 0.14783199041077355, 0.2527894180881285, 0.20958764107218242, 0.19638878021296646, 0.3462399682276739, 0.389358656110804, 0.31671010979389425, 0.30621055177634027, 0.24100463391670068, 0.37703753064419876, 0.366202652248801, 0.38646238148110346, 0.28223439582630894, 0.16947324839880462, 0.3040718377333358, 0.18354059075798956, 0.17813506155197478, 0.17733872006497609, 0.27360957880936865, 0.22409949835518905, 0.2696837422024039, 0.2560879275342365, 0.19198584147472664, 0.19231686737519482, 0.185482650792972, 0.20382060838680316, 0.19908953216816272, 0.20634976693078622, 0.18982793880239235, 0.18308506194950624, 0.230778522339267, 0.19775052254163272, 0.24273174609781456, 0.5906400932417375, 0.5810294797274485, 0.21417887274000824, 0.20860449350054056, 0.44149379715758164, 0.21867701015768926, 0.17948290167437642, 0.8137422449707588, 0.1259495661070309, 0.15280082898000835, 0.8555774625386846, 0.19823846622379027, 0.8301916145800076, 0.18776091529457062, 0.13561059065193581, 0.8463387621357794, 0.6447697781104909, 0.15399664456119555, 0.4354575246124789, 0.45332678289251793, 0.27036056793750807, 0.20759758080683988, 0.2000403552738842, 0.10343806183850757, 0.4992589831059526, 0.167039775899825, 0.17420894572391132, 0.17159430480118476, 0.17776762727625173, 0.19646846105421667, 0.17898126270682857, 0.17587571893511744, 0.1634114533455039, 0.18800956543087488, 0.0919274848706082, 0.08262809568861085, 0.08531568702038206, 0.07871144964177379, 0.07906023772896265, 0.084261795773518, 0.0884449895829732, 0.07652183509196331, 0.08987272642431254]}, "mutation_prompt": null}
{"id": "a6fc5127-5eae-4fe5-8118-0b75f83582a6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.9)  # Adaptive mutation factor\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Adaptive Mutation and Velocity Damping for improved exploration-exploitation balance.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.8028091364700235, 0.8081062099148022, 0.7966487351627463, 0.8047817590191543, 0.7862604449269923, 0.8322669073888598, 0.8288863619799015, 0.8031093983317925, 0.8076985199142841, 0.6905264037225114, 0.03985117407749328, 0.6648503298695665, 0.0, 0.5978660069604083, 0.6243112596186966, 0.6460357912586747, 0.05321114922427228, 0.6721498469990146, 0.1297199287329106, 0.14120676781627572, 0.11966506512416486, 0.11514692056148346, 0.1468373980399763, 0.16700823437180956, 0.16723988475671925, 0.10090065865595721, 0.09568097112414031, 0.11014516635709393, 0.1317443963246615, 0.12628784986758324, 0.1278566619981113, 0.09025256101972301, 0.1297487191100528, 0.12459696852588364, 0.09554730664508193, 0.09401079318593442, 0.9787020580575945, 0.9796603164293017, 0.9814371448109314, 0.9775668314395475, 0.9719945165545476, 0.9687572675225448, 0.9713654195590172, 0.9739851648577372, 0.9673924598508057, 0.45400034901342257, 0.3796143001958401, 0.5088543392516323, 0.44591216200049244, 0.14938983052386612, 0.38793255976219176, 0.12581879795148876, 0.3765952824376382, 0.4041111687696829, 0.32239951758247676, 0.21756951806524327, 0.34713533300483035, 0.2762962466504194, 0.26810002133897437, 0.1917623240991173, 0.2230645004673537, 0.1354416714002844, 0.3270673828047732, 0.24003681636715846, 0.1543765198523812, 0.17468291776517675, 0.09047496423112111, 0.12893448173004762, 0.18600991245693665, 0.14528033837140464, 0.12225788743350008, 0.25650525565273785, 0.18397895219779337, 0.11017838784192557, 0.15339187646707864, 0.20132202464683446, 0.14959961887964768, 0.20276197440123656, 0.16441013329871945, 0.0, 0.29999895840519075, 0.0, 0.0, 0.02438580771615928, 0.0, 0.0, 0.000513416175302539, 0.020260517011336576, 0.0, 0.007472242244628058, 0.036825681693003376, 0.0633211814076633, 0.05197085657458522, 0.09017150138273267, 0.02207106445053708, 0.03192249856171381, 0.09298412122161193, 0.05113046354275175, 0.03474060895680009, 0.12318109236655672, 0.07535385071800793, 0.11671387715172898, 0.09727758997380864, 0.16762223102830698, 0.07510742988681918, 0.06321138738081478, 0.07301456159365627, 0.11236659628402246, 0.10354396660362286, 0.1189767069267762, 0.2704414264117827, 0.13128884381244532, 0.12944136501276404, 0.16953040580138823, 0.22189948150081118, 0.0, 0.07845346685068144, 0.5020667123479734, 0.5433537411224207, 0.533891114350992, 0.5248534751223406, 0.5190273922928943, 0.5712258017597949, 0.5348553597129311, 0.5146006176422329, 0.532006980918726, 0.1257591008285277, 0.11942172103042592, 0.10393009175432999, 0.16663519566268115, 0.11418737729740203, 0.08685235066393904, 0.14804858589317482, 0.13315044073718474, 0.10370440553718652, 0.14788988379236356, 0.20116794136365335, 0.1729394925661374, 0.2572721826350812, 0.3341684247784523, 0.14783199041077355, 0.2527894180881285, 0.20958764107218242, 0.19638878021296646, 0.3462399682276739, 0.389358656110804, 0.31671010979389425, 0.30621055177634027, 0.24100463391670068, 0.37703753064419876, 0.366202652248801, 0.38646238148110346, 0.28223439582630894, 0.16947324839880462, 0.3040718377333358, 0.18354059075798956, 0.17813506155197478, 0.17733872006497609, 0.27360957880936865, 0.22409949835518905, 0.2696837422024039, 0.2560879275342365, 0.19198584147472664, 0.19231686737519482, 0.185482650792972, 0.20382060838680316, 0.19908953216816272, 0.20634976693078622, 0.18982793880239235, 0.18308506194950624, 0.230778522339267, 0.19775052254163272, 0.24273174609781456, 0.5906400932417375, 0.5810294797274485, 0.21417887274000824, 0.20860449350054056, 0.44149379715758164, 0.21867701015768926, 0.17948290167437642, 0.8137422449707588, 0.1259495661070309, 0.15280082898000835, 0.8555774625386846, 0.19823846622379027, 0.8301916145800076, 0.18776091529457062, 0.13561059065193581, 0.8463387621357794, 0.6447697781104909, 0.15399664456119555, 0.4354575246124789, 0.45332678289251793, 0.27036056793750807, 0.20759758080683988, 0.2000403552738842, 0.10343806183850757, 0.4992589831059526, 0.167039775899825, 0.17420894572391132, 0.17159430480118476, 0.17776762727625173, 0.19646846105421667, 0.17898126270682857, 0.17587571893511744, 0.1634114533455039, 0.18800956543087488, 0.0919274848706082, 0.08262809568861085, 0.08531568702038206, 0.07871144964177379, 0.07906023772896265, 0.084261795773518, 0.0884449895829732, 0.07652183509196331, 0.08987272642431254]}, "mutation_prompt": null}
{"id": "01c47113-6351-4691-ad1d-2f80e69e9dda", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            if self.fes > self.budget // 2:\n                self.dynamic_swarm_reduction()\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def dynamic_swarm_reduction(self):\n        self.swarm_size = max(5, int(self.swarm_size * 0.9))\n        self.particles = self.particles[:self.swarm_size]\n        self.velocities = self.velocities[:self.swarm_size]\n        self.pbest = self.pbest[:self.swarm_size]\n        self.pbest_scores = self.pbest_scores[:self.swarm_size]\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.9)\n        CR = 0.7\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Convergence Strategy by Dynamic Swarm Size Adjustment and Local Search.", "configspace": "", "generation": 39, "fitness": 0.2703147907210879, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.8027710762544945, 0.8081154522395414, 0.7969833413276757, 0.8044805733506, 0.7863944663592951, 0.8322669073888598, 0.8288863619799015, 0.8032902580753973, 0.8076640859478673, 0.6935171339838937, 0.03985117407524508, 0.6590377358300503, 0.0, 0.6243403973202353, 0.484314116699338, 0.5513091780957101, 0.053211149255409707, 0.6749629269026004, 0.14068471880755207, 0.13021459090156573, 0.10077893120434167, 0.12211616216828336, 0.13421298558679484, 0.166988777223382, 0.16723248090380605, 0.10119368104394466, 0.1086728836613523, 0.1057920399404213, 0.09984146818951034, 0.11894673347591289, 0.12787499719030804, 0.08779112479844897, 0.12242829408164912, 0.12107710825330997, 0.09556080590057003, 0.09387530008912404, 0.9787020580575945, 0.9796603164293017, 0.9814371448109314, 0.9775668314395475, 0.9719945165545476, 0.9687572675225448, 0.9713654195590172, 0.9739851648577372, 0.9673924598508057, 0.325875671221898, 0.3307023132022562, 0.42743498181511486, 0.3352256342776382, 0.14939583072672613, 0.3067256513513208, 0.12249491857806638, 0.31213754235029, 0.3599843186133477, 0.2991549964515059, 0.2175695180652435, 0.331044474424088, 0.2762962466504195, 0.2681275640505071, 0.19176232409911742, 0.2230645004673536, 0.1354416714002844, 0.3270673828047732, 0.23693553753958008, 0.153307123574555, 0.16964451784113976, 0.09029165586054244, 0.1289321801965061, 0.18505813525145365, 0.14407016658976868, 0.12211100426815358, 0.2525895549685271, 0.18392871515998233, 0.11016366273241818, 0.15055348856370399, 0.19961819967247352, 0.14841675556604028, 0.20065434236515445, 0.1597043466934439, 0.0, 0.2995174875544613, 0.0, 0.0, 0.013984613282915226, 0.0, 0.0, 0.0, 0.019666833028087582, 0.0, 0.0064523695983894624, 0.036484275520206166, 0.060543085325631574, 0.0676900401104562, 0.07872514861484581, 0.025117638109739215, 0.03644307730266538, 0.08357578167272206, 0.05186564463730137, 0.030056574055685625, 0.1231739901666602, 0.07536278472489888, 0.11684019332488349, 0.09725737123201184, 0.16760546426165124, 0.07510685118040705, 0.06320720394253987, 0.07300418677791021, 0.11235732679215782, 0.103544208906026, 0.11898123759426815, 0.2512285948727241, 0.13128874083874564, 0.12937972569932354, 0.1695892035600517, 0.22188941837910658, 0.0, 0.07845356612191468, 0.486883619316283, 0.5467521014928121, 0.5202138489652561, 0.5013749644794498, 0.4885815210942326, 0.5946436980102183, 0.5091587587324176, 0.5220494343332123, 0.501471529012794, 0.12531386023728863, 0.12394528234331514, 0.11387064475966491, 0.1661819738302569, 0.11185532249491059, 0.08664910648587687, 0.14804733585405594, 0.1445303303076333, 0.10383993926683655, 0.14066654544274482, 0.22420718523089367, 0.17675039460279696, 0.22876769047907053, 0.32808634300199313, 0.14292161576545293, 0.25290750074851087, 0.1837892993093485, 0.19997762932141594, 0.3448546296407806, 0.3844869250481171, 0.31732515906788694, 0.29718124172936244, 0.2370394252360345, 0.3781858963819553, 0.2814366656260757, 0.3908203592000451, 0.28249477723894556, 0.16949600269487564, 0.30489374872153463, 0.18374162952349482, 0.1781741120239123, 0.17682900678073987, 0.27461599768459577, 0.2235719508058852, 0.2661705637928766, 0.25459139460974156, 0.18452882546675142, 0.19230129323587208, 0.17624912942053994, 0.20386915405640216, 0.18282322973590792, 0.18938416429997051, 0.1831824779345097, 0.17928709101190798, 0.21740492427567493, 0.19777791192687166, 0.24273150320754533, 0.36794129896132777, 0.34717082634118146, 0.21415995300706914, 0.20789682209174543, 0.20395990315817014, 0.22769096261271415, 0.17948267470052182, 0.8137422449707588, 0.12594949448851078, 0.15280082897969371, 0.8555774625386846, 0.1982384662250385, 0.8301916145800076, 0.18776293891405527, 0.13561059065453884, 0.8463387621357794, 0.64985076185501, 0.1539966406964386, 0.40996668942679404, 0.4445973822600561, 0.2627106135529018, 0.20759756892561987, 0.20004035539491682, 0.10343806184213933, 0.46934135353666373, 0.1896912352239769, 0.18050092305813592, 0.1749908906386043, 0.17784826053500513, 0.19587566016424574, 0.18083927525408927, 0.1738297535255673, 0.1651510137039255, 0.18789990197666562, 0.09259321406331544, 0.0765812562292929, 0.08593191366991337, 0.07856282266873804, 0.07656905686782534, 0.07222616119546821, 0.09698569838949045, 0.07110581015617357, 0.08445284911645135]}, "mutation_prompt": null}
{"id": "c0b3fed1-8f7f-48bb-8de2-f4651f802d0c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1 = 2.0 * (1 - self.fes / self.budget)  # Dynamic learning factors\n        c2 = 2.0 * self.fes / self.budget\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.local_search(func, i)\n\n    def local_search(self, func, idx):\n        # Local search around the best particle\n        neighborhood = np.random.uniform(-0.1, 0.1, self.dim)\n        candidate = self.particles[idx] + neighborhood\n        candidate = np.clip(candidate, self.lb, self.ub)\n        candidate_score = func(candidate)\n        self.fes += 1\n        if candidate_score < self.pbest_scores[idx]:\n            self.pbest_scores[idx] = candidate_score\n            self.pbest[idx] = candidate", "name": "HybridPSODE", "description": "Hybrid PSO with Dynamic Learning Factors and Local Search to enhance convergence and accuracy.", "configspace": "", "generation": 40, "fitness": 0.2101654781430231, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.16.", "error": "", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.6589516490452192, 0.6735671633880392, 0.5233410403600489, 0.5357125798482546, 0.6660991062213597, 0.5860166451217887, 0.5659500714857131, 0.5096046972686943, 0.6419593870423155, 0.0960228827636671, 0.1477211861920399, 0.016909543264936988, 0.029324447016704336, 0.014733597004212284, 0.007271981057059063, 0.00824691405804956, 0.011074219959426923, 0.004663895382589489, 0.09856696273061549, 0.14026053868536492, 0.1236612595388984, 0.13319709910669553, 0.10865940897406601, 0.396639498041238, 0.08481045919485697, 0.11419907284731434, 0.11787064647194856, 0.11908076299648584, 0.08196760585524787, 0.061860496293678846, 0.09761680224623048, 0.06852965461453098, 0.047296883469143514, 0.10765459612536254, 0.052082418383231355, 0.03704810103871403, 0.3261739169095349, 0.2693170713274028, 0.38875493496856817, 0.16082574157808882, 0.093914962181884, 0.17225091806191617, 0.3968732400613014, 0.15414243022861462, 0.20373313411982552, 0.36552443579865423, 0.29590729702238094, 0.29862871454028417, 0.3232214787381469, 0.31774354390135184, 0.3802710437082727, 0.3007770153038303, 0.24425837243550919, 0.14919824841419826, 0.8074143997682511, 0.20270744523491202, 0.1610521552835933, 0.34360182804962325, 0.2557523180467921, 0.1343157381289004, 0.11798181823112774, 0.17086891023721495, 0.1815018951150601, 0.14934235680937125, 0.3347419265320377, 0.25369129235561083, 0.13596276438362542, 0.17663201838542686, 0.09423314370530711, 0.1817949112602122, 0.24193223714770418, 0.32022498252867826, 0.21186075876115573, 0.21001395852097726, 0.2145237550903798, 0.2665296907908853, 0.18012253535796297, 0.12295099006103571, 0.18980258895462043, 0.14712141898420195, 0.14966138671634854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056763405556082724, 0.03459375969394218, 0.018696797544691224, 9.999999999998899e-05, 9.999999999998899e-05, 0.005788397052872263, 0.17851391833525976, 0.06614028120056847, 0.11482567926458831, 0.03741428114526424, 0.05038908560224098, 0.06642154397216748, 0.10223287761498345, 0.10887188815724402, 0.12041149644950566, 0.16967336833806934, 0.16372027432103475, 0.09783242014215465, 0.08331615221960875, 0.08666437879204336, 0.06708608650213899, 0.25492927958617473, 0.0934087010676441, 0.09395765829387204, 0.1427167155789968, 0.2206074949904392, 0.1704340205457262, 0.09450941103800448, 0.07374769978434215, 0.1358249720270449, 0.08752770067922522, 0.17890140191095305, 0.08212676111443329, 0.4849873118309673, 0.546945072279045, 0.4784194715586053, 0.3987963232390511, 0.4588400362702165, 0.4534527108877554, 0.47424872611883606, 0.5022943960506687, 0.44380589774245316, 0.0929293446632008, 0.056698117024630346, 0.023673081643321492, 0.05453491175858849, 0.0787437590417347, 0.11489793027216832, 0.08380694863709015, 0.10986472820359727, 0.10869943886872224, 0.1396859198502619, 0.19602820197164506, 0.25833032275725043, 0.2174972194806848, 0.19547635349644643, 0.20745637266140904, 0.22149773133383444, 0.20741215047414774, 0.17820987967972146, 0.16498573079704093, 0.2978796780182611, 0.18275698798487428, 0.2570594525216674, 0.20982451178506245, 0.32213356157227746, 0.1945767406255019, 0.2972155733801266, 0.1877539530229847, 0.18594381513760494, 0.22034075788270469, 0.14517008530875597, 0.20853336039567671, 0.22755505199290416, 0.16798867076547375, 0.1809139472231419, 0.22659590676172015, 0.21696692223361713, 0.22315496363053733, 0.21519718952509426, 0.2564559675123341, 0.22502545058923928, 0.2229699577820402, 0.22356261693799284, 0.2208374802187364, 0.21834896300705564, 0.2506155916956423, 0.17457367947351432, 0.16578246601691005, 0.1788998189708827, 0.19279816606630407, 0.20378453492400794, 0.18562758166972093, 0.18264056472680634, 0.18892416489232922, 0.18313979375218092, 0.16468243491044654, 0.18321396761104558, 0.14984217640655406, 0.7613862802582678, 0.19751171464827655, 0.7304929731473754, 0.7363293692522213, 0.16575316379107097, 0.1710958283195918, 0.6239391389538019, 0.46735137292913487, 0.5457412677073719, 0.6395348885756484, 0.16157622060118015, 0.39602211235720464, 0.38346158756587556, 0.14954648772696488, 0.15494151802936507, 0.1749196463602266, 0.1860320535288401, 0.18288554915882627, 0.1993215141975011, 0.1913401957765548, 0.21503650837240185, 0.2066266977338832, 0.19224553750404916, 0.1889781286054969, 0.0724410638226094, 0.07938629262941688, 0.07768824943819908, 0.10698277803512024, 0.09230692453036649, 0.07192442190424975, 0.07045180470289525, 0.07096263920312162, 0.09544784864521283]}, "mutation_prompt": null}
{"id": "ed910f96-915b-49fd-9b6c-6d400e8f880e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.9)  # Adaptive mutation factor\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Adaptive Mutation and Velocity Damping for improved exploration-exploitation balance.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.8028091364700235, 0.8081062099148022, 0.7966487351627463, 0.8047817590191543, 0.7862604449269923, 0.8322669073888598, 0.8288863619799015, 0.8031093983317925, 0.8076985199142841, 0.6905264037225114, 0.03985117407749328, 0.6648503298695665, 0.0, 0.5978660069604083, 0.6243112596186966, 0.6460357912586747, 0.05321114922427228, 0.6721498469990146, 0.1297199287329106, 0.14120676781627572, 0.11966506512416486, 0.11514692056148346, 0.1468373980399763, 0.16700823437180956, 0.16723988475671925, 0.10090065865595721, 0.09568097112414031, 0.11014516635709393, 0.1317443963246615, 0.12628784986758324, 0.1278566619981113, 0.09025256101972301, 0.1297487191100528, 0.12459696852588364, 0.09554730664508193, 0.09401079318593442, 0.9787020580575945, 0.9796603164293017, 0.9814371448109314, 0.9775668314395475, 0.9719945165545476, 0.9687572675225448, 0.9713654195590172, 0.9739851648577372, 0.9673924598508057, 0.45400034901342257, 0.3796143001958401, 0.5088543392516323, 0.44591216200049244, 0.14938983052386612, 0.38793255976219176, 0.12581879795148876, 0.3765952824376382, 0.4041111687696829, 0.32239951758247676, 0.21756951806524327, 0.34713533300483035, 0.2762962466504194, 0.26810002133897437, 0.1917623240991173, 0.2230645004673537, 0.1354416714002844, 0.3270673828047732, 0.24003681636715846, 0.1543765198523812, 0.17468291776517675, 0.09047496423112111, 0.12893448173004762, 0.18600991245693665, 0.14528033837140464, 0.12225788743350008, 0.25650525565273785, 0.18397895219779337, 0.11017838784192557, 0.15339187646707864, 0.20132202464683446, 0.14959961887964768, 0.20276197440123656, 0.16441013329871945, 0.0, 0.29999895840519075, 0.0, 0.0, 0.02438580771615928, 0.0, 0.0, 0.000513416175302539, 0.020260517011336576, 0.0, 0.007472242244628058, 0.036825681693003376, 0.0633211814076633, 0.05197085657458522, 0.09017150138273267, 0.02207106445053708, 0.03192249856171381, 0.09298412122161193, 0.05113046354275175, 0.03474060895680009, 0.12318109236655672, 0.07535385071800793, 0.11671387715172898, 0.09727758997380864, 0.16762223102830698, 0.07510742988681918, 0.06321138738081478, 0.07301456159365627, 0.11236659628402246, 0.10354396660362286, 0.1189767069267762, 0.2704414264117827, 0.13128884381244532, 0.12944136501276404, 0.16953040580138823, 0.22189948150081118, 0.0, 0.07845346685068144, 0.5020667123479734, 0.5433537411224207, 0.533891114350992, 0.5248534751223406, 0.5190273922928943, 0.5712258017597949, 0.5348553597129311, 0.5146006176422329, 0.532006980918726, 0.1257591008285277, 0.11942172103042592, 0.10393009175432999, 0.16663519566268115, 0.11418737729740203, 0.08685235066393904, 0.14804858589317482, 0.13315044073718474, 0.10370440553718652, 0.14788988379236356, 0.20116794136365335, 0.1729394925661374, 0.2572721826350812, 0.3341684247784523, 0.14783199041077355, 0.2527894180881285, 0.20958764107218242, 0.19638878021296646, 0.3462399682276739, 0.389358656110804, 0.31671010979389425, 0.30621055177634027, 0.24100463391670068, 0.37703753064419876, 0.366202652248801, 0.38646238148110346, 0.28223439582630894, 0.16947324839880462, 0.3040718377333358, 0.18354059075798956, 0.17813506155197478, 0.17733872006497609, 0.27360957880936865, 0.22409949835518905, 0.2696837422024039, 0.2560879275342365, 0.19198584147472664, 0.19231686737519482, 0.185482650792972, 0.20382060838680316, 0.19908953216816272, 0.20634976693078622, 0.18982793880239235, 0.18308506194950624, 0.230778522339267, 0.19775052254163272, 0.24273174609781456, 0.5906400932417375, 0.5810294797274485, 0.21417887274000824, 0.20860449350054056, 0.44149379715758164, 0.21867701015768926, 0.17948290167437642, 0.8137422449707588, 0.1259495661070309, 0.15280082898000835, 0.8555774625386846, 0.19823846622379027, 0.8301916145800076, 0.18776091529457062, 0.13561059065193581, 0.8463387621357794, 0.6447697781104909, 0.15399664456119555, 0.4354575246124789, 0.45332678289251793, 0.27036056793750807, 0.20759758080683988, 0.2000403552738842, 0.10343806183850757, 0.4992589831059526, 0.167039775899825, 0.17420894572391132, 0.17159430480118476, 0.17776762727625173, 0.19646846105421667, 0.17898126270682857, 0.17587571893511744, 0.1634114533455039, 0.18800956543087488, 0.0919274848706082, 0.08262809568861085, 0.08531568702038206, 0.07871144964177379, 0.07906023772896265, 0.084261795773518, 0.0884449895829732, 0.07652183509196331, 0.08987272642431254]}, "mutation_prompt": null}
{"id": "0284383f-87d9-4c42-b018-b21ff9443261", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.9)  # Adaptive mutation factor\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Adaptive Mutation and Velocity Damping for improved exploration-exploitation balance.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.8028091364700235, 0.8081062099148022, 0.7966487351627463, 0.8047817590191543, 0.7862604449269923, 0.8322669073888598, 0.8288863619799015, 0.8031093983317925, 0.8076985199142841, 0.6905264037225114, 0.03985117407749328, 0.6648503298695665, 0.0, 0.5978660069604083, 0.6243112596186966, 0.6460357912586747, 0.05321114922427228, 0.6721498469990146, 0.1297199287329106, 0.14120676781627572, 0.11966506512416486, 0.11514692056148346, 0.1468373980399763, 0.16700823437180956, 0.16723988475671925, 0.10090065865595721, 0.09568097112414031, 0.11014516635709393, 0.1317443963246615, 0.12628784986758324, 0.1278566619981113, 0.09025256101972301, 0.1297487191100528, 0.12459696852588364, 0.09554730664508193, 0.09401079318593442, 0.9787020580575945, 0.9796603164293017, 0.9814371448109314, 0.9775668314395475, 0.9719945165545476, 0.9687572675225448, 0.9713654195590172, 0.9739851648577372, 0.9673924598508057, 0.45400034901342257, 0.3796143001958401, 0.5088543392516323, 0.44591216200049244, 0.14938983052386612, 0.38793255976219176, 0.12581879795148876, 0.3765952824376382, 0.4041111687696829, 0.32239951758247676, 0.21756951806524327, 0.34713533300483035, 0.2762962466504194, 0.26810002133897437, 0.1917623240991173, 0.2230645004673537, 0.1354416714002844, 0.3270673828047732, 0.24003681636715846, 0.1543765198523812, 0.17468291776517675, 0.09047496423112111, 0.12893448173004762, 0.18600991245693665, 0.14528033837140464, 0.12225788743350008, 0.25650525565273785, 0.18397895219779337, 0.11017838784192557, 0.15339187646707864, 0.20132202464683446, 0.14959961887964768, 0.20276197440123656, 0.16441013329871945, 0.0, 0.29999895840519075, 0.0, 0.0, 0.02438580771615928, 0.0, 0.0, 0.000513416175302539, 0.020260517011336576, 0.0, 0.007472242244628058, 0.036825681693003376, 0.0633211814076633, 0.05197085657458522, 0.09017150138273267, 0.02207106445053708, 0.03192249856171381, 0.09298412122161193, 0.05113046354275175, 0.03474060895680009, 0.12318109236655672, 0.07535385071800793, 0.11671387715172898, 0.09727758997380864, 0.16762223102830698, 0.07510742988681918, 0.06321138738081478, 0.07301456159365627, 0.11236659628402246, 0.10354396660362286, 0.1189767069267762, 0.2704414264117827, 0.13128884381244532, 0.12944136501276404, 0.16953040580138823, 0.22189948150081118, 0.0, 0.07845346685068144, 0.5020667123479734, 0.5433537411224207, 0.533891114350992, 0.5248534751223406, 0.5190273922928943, 0.5712258017597949, 0.5348553597129311, 0.5146006176422329, 0.532006980918726, 0.1257591008285277, 0.11942172103042592, 0.10393009175432999, 0.16663519566268115, 0.11418737729740203, 0.08685235066393904, 0.14804858589317482, 0.13315044073718474, 0.10370440553718652, 0.14788988379236356, 0.20116794136365335, 0.1729394925661374, 0.2572721826350812, 0.3341684247784523, 0.14783199041077355, 0.2527894180881285, 0.20958764107218242, 0.19638878021296646, 0.3462399682276739, 0.389358656110804, 0.31671010979389425, 0.30621055177634027, 0.24100463391670068, 0.37703753064419876, 0.366202652248801, 0.38646238148110346, 0.28223439582630894, 0.16947324839880462, 0.3040718377333358, 0.18354059075798956, 0.17813506155197478, 0.17733872006497609, 0.27360957880936865, 0.22409949835518905, 0.2696837422024039, 0.2560879275342365, 0.19198584147472664, 0.19231686737519482, 0.185482650792972, 0.20382060838680316, 0.19908953216816272, 0.20634976693078622, 0.18982793880239235, 0.18308506194950624, 0.230778522339267, 0.19775052254163272, 0.24273174609781456, 0.5906400932417375, 0.5810294797274485, 0.21417887274000824, 0.20860449350054056, 0.44149379715758164, 0.21867701015768926, 0.17948290167437642, 0.8137422449707588, 0.1259495661070309, 0.15280082898000835, 0.8555774625386846, 0.19823846622379027, 0.8301916145800076, 0.18776091529457062, 0.13561059065193581, 0.8463387621357794, 0.6447697781104909, 0.15399664456119555, 0.4354575246124789, 0.45332678289251793, 0.27036056793750807, 0.20759758080683988, 0.2000403552738842, 0.10343806183850757, 0.4992589831059526, 0.167039775899825, 0.17420894572391132, 0.17159430480118476, 0.17776762727625173, 0.19646846105421667, 0.17898126270682857, 0.17587571893511744, 0.1634114533455039, 0.18800956543087488, 0.0919274848706082, 0.08262809568861085, 0.08531568702038206, 0.07871144964177379, 0.07906023772896265, 0.084261795773518, 0.0884449895829732, 0.07652183509196331, 0.08987272642431254]}, "mutation_prompt": null}
{"id": "0d0d9e7f-9662-4c49-a759-8c37501d076b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.9)  # Adaptive mutation factor\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Adaptive Mutation and Velocity Damping for improved exploration-exploitation balance.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.8028091364700235, 0.8081062099148022, 0.7966487351627463, 0.8047817590191543, 0.7862604449269923, 0.8322669073888598, 0.8288863619799015, 0.8031093983317925, 0.8076985199142841, 0.6905264037225114, 0.03985117407749328, 0.6648503298695665, 0.0, 0.5978660069604083, 0.6243112596186966, 0.6460357912586747, 0.05321114922427228, 0.6721498469990146, 0.1297199287329106, 0.14120676781627572, 0.11966506512416486, 0.11514692056148346, 0.1468373980399763, 0.16700823437180956, 0.16723988475671925, 0.10090065865595721, 0.09568097112414031, 0.11014516635709393, 0.1317443963246615, 0.12628784986758324, 0.1278566619981113, 0.09025256101972301, 0.1297487191100528, 0.12459696852588364, 0.09554730664508193, 0.09401079318593442, 0.9787020580575945, 0.9796603164293017, 0.9814371448109314, 0.9775668314395475, 0.9719945165545476, 0.9687572675225448, 0.9713654195590172, 0.9739851648577372, 0.9673924598508057, 0.45400034901342257, 0.3796143001958401, 0.5088543392516323, 0.44591216200049244, 0.14938983052386612, 0.38793255976219176, 0.12581879795148876, 0.3765952824376382, 0.4041111687696829, 0.32239951758247676, 0.21756951806524327, 0.34713533300483035, 0.2762962466504194, 0.26810002133897437, 0.1917623240991173, 0.2230645004673537, 0.1354416714002844, 0.3270673828047732, 0.24003681636715846, 0.1543765198523812, 0.17468291776517675, 0.09047496423112111, 0.12893448173004762, 0.18600991245693665, 0.14528033837140464, 0.12225788743350008, 0.25650525565273785, 0.18397895219779337, 0.11017838784192557, 0.15339187646707864, 0.20132202464683446, 0.14959961887964768, 0.20276197440123656, 0.16441013329871945, 0.0, 0.29999895840519075, 0.0, 0.0, 0.02438580771615928, 0.0, 0.0, 0.000513416175302539, 0.020260517011336576, 0.0, 0.007472242244628058, 0.036825681693003376, 0.0633211814076633, 0.05197085657458522, 0.09017150138273267, 0.02207106445053708, 0.03192249856171381, 0.09298412122161193, 0.05113046354275175, 0.03474060895680009, 0.12318109236655672, 0.07535385071800793, 0.11671387715172898, 0.09727758997380864, 0.16762223102830698, 0.07510742988681918, 0.06321138738081478, 0.07301456159365627, 0.11236659628402246, 0.10354396660362286, 0.1189767069267762, 0.2704414264117827, 0.13128884381244532, 0.12944136501276404, 0.16953040580138823, 0.22189948150081118, 0.0, 0.07845346685068144, 0.5020667123479734, 0.5433537411224207, 0.533891114350992, 0.5248534751223406, 0.5190273922928943, 0.5712258017597949, 0.5348553597129311, 0.5146006176422329, 0.532006980918726, 0.1257591008285277, 0.11942172103042592, 0.10393009175432999, 0.16663519566268115, 0.11418737729740203, 0.08685235066393904, 0.14804858589317482, 0.13315044073718474, 0.10370440553718652, 0.14788988379236356, 0.20116794136365335, 0.1729394925661374, 0.2572721826350812, 0.3341684247784523, 0.14783199041077355, 0.2527894180881285, 0.20958764107218242, 0.19638878021296646, 0.3462399682276739, 0.389358656110804, 0.31671010979389425, 0.30621055177634027, 0.24100463391670068, 0.37703753064419876, 0.366202652248801, 0.38646238148110346, 0.28223439582630894, 0.16947324839880462, 0.3040718377333358, 0.18354059075798956, 0.17813506155197478, 0.17733872006497609, 0.27360957880936865, 0.22409949835518905, 0.2696837422024039, 0.2560879275342365, 0.19198584147472664, 0.19231686737519482, 0.185482650792972, 0.20382060838680316, 0.19908953216816272, 0.20634976693078622, 0.18982793880239235, 0.18308506194950624, 0.230778522339267, 0.19775052254163272, 0.24273174609781456, 0.5906400932417375, 0.5810294797274485, 0.21417887274000824, 0.20860449350054056, 0.44149379715758164, 0.21867701015768926, 0.17948290167437642, 0.8137422449707588, 0.1259495661070309, 0.15280082898000835, 0.8555774625386846, 0.19823846622379027, 0.8301916145800076, 0.18776091529457062, 0.13561059065193581, 0.8463387621357794, 0.6447697781104909, 0.15399664456119555, 0.4354575246124789, 0.45332678289251793, 0.27036056793750807, 0.20759758080683988, 0.2000403552738842, 0.10343806183850757, 0.4992589831059526, 0.167039775899825, 0.17420894572391132, 0.17159430480118476, 0.17776762727625173, 0.19646846105421667, 0.17898126270682857, 0.17587571893511744, 0.1634114533455039, 0.18800956543087488, 0.0919274848706082, 0.08262809568861085, 0.08531568702038206, 0.07871144964177379, 0.07906023772896265, 0.084261795773518, 0.0884449895829732, 0.07652183509196331, 0.08987272642431254]}, "mutation_prompt": null}
{"id": "bc49e51e-1c79-4666-9011-cf466e113e3a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.4 + 0.5 * (1 - self.fes / self.budget)  # Updated inertia weight for dynamic adjustment\n        c1, c2 = 1.7, 1.7  # Enhanced acceleration coefficients\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Adaptive mutation factor with a larger range\n        CR = 0.9  # Increased crossover rate for better exploration\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Improved Hybrid PSODE with Differential Evolution-inspired mutation and dynamic velocity adjustment for enhanced convergence.", "configspace": "", "generation": 44, "fitness": 0.1565219600729846, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.3557915133735233, 0.39333422115325634, 0.3034306213568354, 0.4533374075413188, 0.31976135681465967, 0.43451482494071936, 0.350410870813218, 0.29212374094276405, 0.16985367511630534, 0.01626057371377898, 0.0713474509476455, 0.03571687689001524, 0.01966339816085838, 0.07694749954078872, 0.04366113799175486, 0.02795883765879259, 0.11513310112363484, 0.021486067757204186, 0.08962438885423885, 0.0601196863751875, 0.05932516762404516, 0.07213905645880947, 0.060288658061000366, 0.08356716804173503, 0.06742242541820864, 0.06520360268068381, 0.06595641865084545, 0.06916175781699441, 0.058873639948835765, 0.06222584961889843, 0.07905307804597472, 0.032512834236021804, 0.03072072109545898, 0.06322659217319815, 0.06759279374038052, 0.061310979382493636, 0.9842310618131668, 0.9888281458390501, 0.9841107216834688, 0.9735681205961056, 0.9796268983705861, 0.9729041588947589, 0.9801606603631168, 0.9803387566366906, 0.9794686904436466, 0.09166963736869038, 0.0842872014331153, 0.09996163333135477, 0.12705605358661232, 0.07257761349446334, 0.08718494238300423, 0.08364895424417096, 0.08019009190752457, 0.08779787037199371, 0.18724499166464748, 0.1429767889110779, 0.17242688351679658, 0.19771674601121636, 0.19267244816070184, 0.17461648148611242, 0.17723033521972642, 0.11447813720544997, 0.14774379170079377, 0.1415942269788557, 0.08072004520564202, 0.05358467898265351, 0.061357184030630174, 0.039711585439930586, 0.06774597364514867, 0.04429436392950303, 0.05277779749809197, 0.09850411279540638, 0.13524081303870994, 0.041714676120968575, 0.021023414898299952, 0.06542608934063243, 0.05542363508189796, 0.08073231100281575, 0.017079691317488654, 0.037042455682385844, 0.1124409187895653, 0.0, 0.0, 0.0, 0.024701234977352993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.038339535193788854, 0.05106029893576414, 0.021228926552713023, 0.04275036070714999, 0.0, 0.011983837375497353, 0.03212697952754684, 0.03595817644850463, 0.038065857013147575, 0.0, 0.0003352995394739766, 0.0, 0.013886011971997014, 0.018237922495111913, 0.001711774330823701, 0.0, 0.016450276898271166, 0.0, 0.03822788969138635, 0.044115607466740925, 0.024236920656936833, 0.0697396667215413, 0.00230189068804032, 0.0843022408425953, 0.027062326067212372, 0.0, 0.04582930588307221, 0.29250976624638125, 0.3468297303215804, 0.3292587266755568, 0.34486891527415353, 0.33197437449396416, 0.3129516725186162, 0.356161900124493, 0.26067015152532624, 0.32228244667554373, 0.07182269861693547, 0.05909586390851995, 0.05916413954955746, 0.06212707807102302, 0.0512010369748066, 0.0597033197492729, 0.05481366538039312, 0.06820260091846342, 0.0886147395948963, 0.13413886379773654, 0.11472166006661388, 0.14278100226292167, 0.1350420024334762, 0.1530961837030581, 0.14895379970396938, 0.18641059774814295, 0.15216426246916204, 0.13437204016557147, 0.21005802347170544, 0.23550163405779834, 0.20163493415020495, 0.18668793015968332, 0.18648908887178872, 0.20769493252841764, 0.1860925313492816, 0.2148650514434084, 0.23331468371146968, 0.13599046793144265, 0.12254590350582606, 0.15962141906078764, 0.15180547996786153, 0.16439808722344385, 0.1496310740496698, 0.14920677881785138, 0.15805514528980913, 0.1562120851409705, 0.17724660058706754, 0.14647384162724575, 0.16839095510575575, 0.1661438530949717, 0.1551553738686926, 0.1449554434733007, 0.15680492882234975, 0.163007381144606, 0.16156513476421275, 0.16214729382577475, 0.1792486445875653, 0.16565433106369443, 0.09804633399338036, 0.1430394946742486, 0.1744041420323732, 0.1342903183315468, 0.13913642245045743, 0.1611918096096382, 0.20824737004279037, 0.16834018741801304, 0.14889954567274344, 0.34107581615860705, 0.15517631617243877, 0.16188082798229775, 0.1834126208686675, 0.15655361477877083, 0.14320508359417183, 0.22439904469308047, 0.16286761174765307, 0.1583915573918061, 0.16231322823174066, 0.13631331861529583, 0.1280397368878663, 0.20248341237490808, 0.18138769479418715, 0.19976123138284552, 0.1728550529341224, 0.1893149638745485, 0.1901750858511586, 0.19525812237262918, 0.17817130804409465, 0.17840439113794382, 0.1739809795709738, 0.17603634654143496, 0.18098984834235587, 0.04914478513254794, 0.05217368161909253, 0.0556770200436818, 0.05080708002574119, 0.06326078772679089, 0.06430541110889187, 0.053892227979453144, 0.049959519950321774, 0.048105627481149216]}, "mutation_prompt": null}
{"id": "cc377531-0097-4810-895b-f33449166d20", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.9)  # Adaptive mutation factor\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Adaptive Mutation and Velocity Damping for improved exploration-exploitation balance.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.8028091364700235, 0.8081062099148022, 0.7966487351627463, 0.8047817590191543, 0.7862604449269923, 0.8322669073888598, 0.8288863619799015, 0.8031093983317925, 0.8076985199142841, 0.6905264037225114, 0.03985117407749328, 0.6648503298695665, 0.0, 0.5978660069604083, 0.6243112596186966, 0.6460357912586747, 0.05321114922427228, 0.6721498469990146, 0.1297199287329106, 0.14120676781627572, 0.11966506512416486, 0.11514692056148346, 0.1468373980399763, 0.16700823437180956, 0.16723988475671925, 0.10090065865595721, 0.09568097112414031, 0.11014516635709393, 0.1317443963246615, 0.12628784986758324, 0.1278566619981113, 0.09025256101972301, 0.1297487191100528, 0.12459696852588364, 0.09554730664508193, 0.09401079318593442, 0.9787020580575945, 0.9796603164293017, 0.9814371448109314, 0.9775668314395475, 0.9719945165545476, 0.9687572675225448, 0.9713654195590172, 0.9739851648577372, 0.9673924598508057, 0.45400034901342257, 0.3796143001958401, 0.5088543392516323, 0.44591216200049244, 0.14938983052386612, 0.38793255976219176, 0.12581879795148876, 0.3765952824376382, 0.4041111687696829, 0.32239951758247676, 0.21756951806524327, 0.34713533300483035, 0.2762962466504194, 0.26810002133897437, 0.1917623240991173, 0.2230645004673537, 0.1354416714002844, 0.3270673828047732, 0.24003681636715846, 0.1543765198523812, 0.17468291776517675, 0.09047496423112111, 0.12893448173004762, 0.18600991245693665, 0.14528033837140464, 0.12225788743350008, 0.25650525565273785, 0.18397895219779337, 0.11017838784192557, 0.15339187646707864, 0.20132202464683446, 0.14959961887964768, 0.20276197440123656, 0.16441013329871945, 0.0, 0.29999895840519075, 0.0, 0.0, 0.02438580771615928, 0.0, 0.0, 0.000513416175302539, 0.020260517011336576, 0.0, 0.007472242244628058, 0.036825681693003376, 0.0633211814076633, 0.05197085657458522, 0.09017150138273267, 0.02207106445053708, 0.03192249856171381, 0.09298412122161193, 0.05113046354275175, 0.03474060895680009, 0.12318109236655672, 0.07535385071800793, 0.11671387715172898, 0.09727758997380864, 0.16762223102830698, 0.07510742988681918, 0.06321138738081478, 0.07301456159365627, 0.11236659628402246, 0.10354396660362286, 0.1189767069267762, 0.2704414264117827, 0.13128884381244532, 0.12944136501276404, 0.16953040580138823, 0.22189948150081118, 0.0, 0.07845346685068144, 0.5020667123479734, 0.5433537411224207, 0.533891114350992, 0.5248534751223406, 0.5190273922928943, 0.5712258017597949, 0.5348553597129311, 0.5146006176422329, 0.532006980918726, 0.1257591008285277, 0.11942172103042592, 0.10393009175432999, 0.16663519566268115, 0.11418737729740203, 0.08685235066393904, 0.14804858589317482, 0.13315044073718474, 0.10370440553718652, 0.14788988379236356, 0.20116794136365335, 0.1729394925661374, 0.2572721826350812, 0.3341684247784523, 0.14783199041077355, 0.2527894180881285, 0.20958764107218242, 0.19638878021296646, 0.3462399682276739, 0.389358656110804, 0.31671010979389425, 0.30621055177634027, 0.24100463391670068, 0.37703753064419876, 0.366202652248801, 0.38646238148110346, 0.28223439582630894, 0.16947324839880462, 0.3040718377333358, 0.18354059075798956, 0.17813506155197478, 0.17733872006497609, 0.27360957880936865, 0.22409949835518905, 0.2696837422024039, 0.2560879275342365, 0.19198584147472664, 0.19231686737519482, 0.185482650792972, 0.20382060838680316, 0.19908953216816272, 0.20634976693078622, 0.18982793880239235, 0.18308506194950624, 0.230778522339267, 0.19775052254163272, 0.24273174609781456, 0.5906400932417375, 0.5810294797274485, 0.21417887274000824, 0.20860449350054056, 0.44149379715758164, 0.21867701015768926, 0.17948290167437642, 0.8137422449707588, 0.1259495661070309, 0.15280082898000835, 0.8555774625386846, 0.19823846622379027, 0.8301916145800076, 0.18776091529457062, 0.13561059065193581, 0.8463387621357794, 0.6447697781104909, 0.15399664456119555, 0.4354575246124789, 0.45332678289251793, 0.27036056793750807, 0.20759758080683988, 0.2000403552738842, 0.10343806183850757, 0.4992589831059526, 0.167039775899825, 0.17420894572391132, 0.17159430480118476, 0.17776762727625173, 0.19646846105421667, 0.17898126270682857, 0.17587571893511744, 0.1634114533455039, 0.18800956543087488, 0.0919274848706082, 0.08262809568861085, 0.08531568702038206, 0.07871144964177379, 0.07906023772896265, 0.084261795773518, 0.0884449895829732, 0.07652183509196331, 0.08987272642431254]}, "mutation_prompt": null}
{"id": "5a5d58e8-2350-40ad-b385-a943b62ecc89", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.9)  # Adaptive mutation factor\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Adaptive Mutation and Velocity Damping for improved exploration-exploitation balance.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.8028091364700235, 0.8081062099148022, 0.7966487351627463, 0.8047817590191543, 0.7862604449269923, 0.8322669073888598, 0.8288863619799015, 0.8031093983317925, 0.8076985199142841, 0.6905264037225114, 0.03985117407749328, 0.6648503298695665, 0.0, 0.5978660069604083, 0.6243112596186966, 0.6460357912586747, 0.05321114922427228, 0.6721498469990146, 0.1297199287329106, 0.14120676781627572, 0.11966506512416486, 0.11514692056148346, 0.1468373980399763, 0.16700823437180956, 0.16723988475671925, 0.10090065865595721, 0.09568097112414031, 0.11014516635709393, 0.1317443963246615, 0.12628784986758324, 0.1278566619981113, 0.09025256101972301, 0.1297487191100528, 0.12459696852588364, 0.09554730664508193, 0.09401079318593442, 0.9787020580575945, 0.9796603164293017, 0.9814371448109314, 0.9775668314395475, 0.9719945165545476, 0.9687572675225448, 0.9713654195590172, 0.9739851648577372, 0.9673924598508057, 0.45400034901342257, 0.3796143001958401, 0.5088543392516323, 0.44591216200049244, 0.14938983052386612, 0.38793255976219176, 0.12581879795148876, 0.3765952824376382, 0.4041111687696829, 0.32239951758247676, 0.21756951806524327, 0.34713533300483035, 0.2762962466504194, 0.26810002133897437, 0.1917623240991173, 0.2230645004673537, 0.1354416714002844, 0.3270673828047732, 0.24003681636715846, 0.1543765198523812, 0.17468291776517675, 0.09047496423112111, 0.12893448173004762, 0.18600991245693665, 0.14528033837140464, 0.12225788743350008, 0.25650525565273785, 0.18397895219779337, 0.11017838784192557, 0.15339187646707864, 0.20132202464683446, 0.14959961887964768, 0.20276197440123656, 0.16441013329871945, 0.0, 0.29999895840519075, 0.0, 0.0, 0.02438580771615928, 0.0, 0.0, 0.000513416175302539, 0.020260517011336576, 0.0, 0.007472242244628058, 0.036825681693003376, 0.0633211814076633, 0.05197085657458522, 0.09017150138273267, 0.02207106445053708, 0.03192249856171381, 0.09298412122161193, 0.05113046354275175, 0.03474060895680009, 0.12318109236655672, 0.07535385071800793, 0.11671387715172898, 0.09727758997380864, 0.16762223102830698, 0.07510742988681918, 0.06321138738081478, 0.07301456159365627, 0.11236659628402246, 0.10354396660362286, 0.1189767069267762, 0.2704414264117827, 0.13128884381244532, 0.12944136501276404, 0.16953040580138823, 0.22189948150081118, 0.0, 0.07845346685068144, 0.5020667123479734, 0.5433537411224207, 0.533891114350992, 0.5248534751223406, 0.5190273922928943, 0.5712258017597949, 0.5348553597129311, 0.5146006176422329, 0.532006980918726, 0.1257591008285277, 0.11942172103042592, 0.10393009175432999, 0.16663519566268115, 0.11418737729740203, 0.08685235066393904, 0.14804858589317482, 0.13315044073718474, 0.10370440553718652, 0.14788988379236356, 0.20116794136365335, 0.1729394925661374, 0.2572721826350812, 0.3341684247784523, 0.14783199041077355, 0.2527894180881285, 0.20958764107218242, 0.19638878021296646, 0.3462399682276739, 0.389358656110804, 0.31671010979389425, 0.30621055177634027, 0.24100463391670068, 0.37703753064419876, 0.366202652248801, 0.38646238148110346, 0.28223439582630894, 0.16947324839880462, 0.3040718377333358, 0.18354059075798956, 0.17813506155197478, 0.17733872006497609, 0.27360957880936865, 0.22409949835518905, 0.2696837422024039, 0.2560879275342365, 0.19198584147472664, 0.19231686737519482, 0.185482650792972, 0.20382060838680316, 0.19908953216816272, 0.20634976693078622, 0.18982793880239235, 0.18308506194950624, 0.230778522339267, 0.19775052254163272, 0.24273174609781456, 0.5906400932417375, 0.5810294797274485, 0.21417887274000824, 0.20860449350054056, 0.44149379715758164, 0.21867701015768926, 0.17948290167437642, 0.8137422449707588, 0.1259495661070309, 0.15280082898000835, 0.8555774625386846, 0.19823846622379027, 0.8301916145800076, 0.18776091529457062, 0.13561059065193581, 0.8463387621357794, 0.6447697781104909, 0.15399664456119555, 0.4354575246124789, 0.45332678289251793, 0.27036056793750807, 0.20759758080683988, 0.2000403552738842, 0.10343806183850757, 0.4992589831059526, 0.167039775899825, 0.17420894572391132, 0.17159430480118476, 0.17776762727625173, 0.19646846105421667, 0.17898126270682857, 0.17587571893511744, 0.1634114533455039, 0.18800956543087488, 0.0919274848706082, 0.08262809568861085, 0.08531568702038206, 0.07871144964177379, 0.07906023772896265, 0.084261795773518, 0.0884449895829732, 0.07652183509196331, 0.08987272642431254]}, "mutation_prompt": null}
{"id": "08deb3c0-cfb2-4d2d-9883-efd1ee5c4234", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        # Diversified pbest initialization\n        self.pbest = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        # Adaptive inertia weight based on function evaluations\n        w = 0.9 - 0.8 * (self.fes / self.budget)\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.9)  # Adaptive mutation factor\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Improved Hybrid PSO with Diversified Initialization and Adaptive Inertia for enhanced global search capabilities.", "configspace": "", "generation": 47, "fitness": 0.21846778164802905, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.6048234492736673, 0.5971206042289574, 0.5828913732522591, 0.5960023302883435, 0.6159019565746451, 0.6113981942296698, 0.5898555722954819, 0.6166192457902706, 0.5956969446242859, 0.41590417688411385, 0.4460370819652, 0.40625654357045005, 0.4217777222761995, 0.32309087300625383, 0.4459490473603298, 0.035841934888967475, 0.4120361653354746, 0.41528680258996375, 0.09376713980927776, 0.09394002748680963, 0.11238032830320477, 0.10812869923901747, 0.08442656662674908, 0.09705670766739427, 0.0978922524036161, 0.09593870534567905, 0.09583298621249725, 0.08496589230641716, 0.08508514919408339, 0.07822206192427805, 0.1031366080077325, 0.10187449580726793, 0.0661960312911859, 0.08794194828949364, 0.09998530488370938, 0.06840538747440483, 0.9799182436187648, 0.9883699398567618, 0.980667753507185, 0.9795311433016318, 0.9731526792593486, 0.972162402128734, 0.9786399759245703, 0.9807406336090576, 0.9780409220065862, 0.1759554799355838, 0.22289381952539766, 0.16318583535182063, 0.17207651376182698, 0.1433199953363231, 0.24125132939230776, 0.24748398051565657, 0.08583005424741963, 0.07012434920561483, 0.17020091908105328, 0.289170169675516, 0.1622918993908803, 0.310734966622325, 0.17354512756088147, 0.23643469357280766, 0.2502069878977021, 0.4280642411405442, 0.20398126722536614, 0.10442348043237948, 0.11583064581865365, 0.10713971890018603, 0.09724986553096437, 0.13654005743901143, 0.13028678127768145, 0.10851494710709453, 0.13455120209088978, 0.1277796765127518, 0.15284416362656372, 0.015843217912430707, 0.018956090092404843, 0.14227767220735166, 0.0712341324404524, 0.14116564975574275, 0.09561129970332471, 0.09755670066877542, 0.15173431376354252, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05706572015012734, 0.07314483971858221, 0.040152806743839586, 0.04689656772957318, 0.008134728675935898, 0.015649910088472496, 0.039444873236330946, 0.045319742102873484, 0.08324871140521117, 0.020590424847434785, 0.02958691242975131, 0.026548194297885908, 0.10275013000124766, 0.06918840088956235, 0.04611312489087993, 0.11104131189988709, 0.14771224944869732, 0.04810533435411457, 0.03198374550921912, 0.024664952692980524, 0.09432743328566362, 0.07023196655104624, 0.06184513696825966, 0.13729525782174623, 0.08743542724826925, 0.03908587756593784, 0.06289316159595548, 0.4066351219908979, 0.47018728154137657, 0.4492212262509584, 0.44439337347307406, 0.41804973276627, 0.20506548911484956, 0.42435304760171944, 0.4210157357576897, 0.39624278000857327, 0.06632779025088498, 0.09697012139069816, 0.07633391208987195, 0.08257393139120794, 0.0956041236278623, 0.09933678194433337, 0.10689948211140576, 0.11058348066672152, 0.10644121823521258, 0.12298939783774132, 0.1644418715523287, 0.17120244243776273, 0.2006143687323626, 0.16587386561521367, 0.12329689367674324, 0.17780773121721982, 0.13488529433366026, 0.1788511633928549, 0.32095050439277695, 0.2876940093735829, 0.27307400146314176, 0.19970980106734493, 0.24792790596098324, 0.3294538191755807, 0.3478578126760301, 0.3241893513232078, 0.31353220263856574, 0.1889991864774474, 0.15545297094011257, 0.21884912833843584, 0.1637917899983824, 0.16344673860069414, 0.16369543812937049, 0.2237026880463352, 0.24907437095396823, 0.20393563769689116, 0.1839965805723316, 0.16464279846174545, 0.17133512312657528, 0.21901201025847938, 0.18392403222273956, 0.16741487222655793, 0.16124596385152745, 0.17215877788699763, 0.1791573823687007, 0.1725123848037411, 0.19757472425345712, 0.1887567770243973, 0.21180042836615798, 0.1948495320733289, 0.19056071703465838, 0.20017638864826792, 0.1784731150221811, 0.3688697241053841, 0.6371810527901273, 0.16578409686670403, 0.12293932656596285, 0.5521118976905148, 0.18709125027860418, 0.1824003317706926, 0.09812045688711146, 0.16527300311305426, 0.19665448549218245, 0.34646678219983784, 0.24147298800261074, 0.1903884753042877, 0.47038664891600335, 0.16195094537330956, 0.12198231736431264, 0.1941657989354063, 0.20120120911420047, 0.4116122546046912, 0.16740537845494508, 0.17420360735332996, 0.1782435514199464, 0.18260182815998682, 0.16245437208132085, 0.21097421019901308, 0.18043599582662373, 0.18631947962305417, 0.17443530572251398, 0.07751969096128197, 0.06453715635753343, 0.0746319177784448, 0.05746082532222807, 0.07174625761471876, 0.05742684047694624, 0.07558571625560251, 0.07045741775547065, 0.06178342398341885]}, "mutation_prompt": null}
{"id": "9804a57c-a571-4c3c-a310-ccb55f42b51a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.9)  # Adaptive mutation factor\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Adaptive Mutation and Velocity Damping for improved exploration-exploitation balance.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.8028091364700235, 0.8081062099148022, 0.7966487351627463, 0.8047817590191543, 0.7862604449269923, 0.8322669073888598, 0.8288863619799015, 0.8031093983317925, 0.8076985199142841, 0.6905264037225114, 0.03985117407749328, 0.6648503298695665, 0.0, 0.5978660069604083, 0.6243112596186966, 0.6460357912586747, 0.05321114922427228, 0.6721498469990146, 0.1297199287329106, 0.14120676781627572, 0.11966506512416486, 0.11514692056148346, 0.1468373980399763, 0.16700823437180956, 0.16723988475671925, 0.10090065865595721, 0.09568097112414031, 0.11014516635709393, 0.1317443963246615, 0.12628784986758324, 0.1278566619981113, 0.09025256101972301, 0.1297487191100528, 0.12459696852588364, 0.09554730664508193, 0.09401079318593442, 0.9787020580575945, 0.9796603164293017, 0.9814371448109314, 0.9775668314395475, 0.9719945165545476, 0.9687572675225448, 0.9713654195590172, 0.9739851648577372, 0.9673924598508057, 0.45400034901342257, 0.3796143001958401, 0.5088543392516323, 0.44591216200049244, 0.14938983052386612, 0.38793255976219176, 0.12581879795148876, 0.3765952824376382, 0.4041111687696829, 0.32239951758247676, 0.21756951806524327, 0.34713533300483035, 0.2762962466504194, 0.26810002133897437, 0.1917623240991173, 0.2230645004673537, 0.1354416714002844, 0.3270673828047732, 0.24003681636715846, 0.1543765198523812, 0.17468291776517675, 0.09047496423112111, 0.12893448173004762, 0.18600991245693665, 0.14528033837140464, 0.12225788743350008, 0.25650525565273785, 0.18397895219779337, 0.11017838784192557, 0.15339187646707864, 0.20132202464683446, 0.14959961887964768, 0.20276197440123656, 0.16441013329871945, 0.0, 0.29999895840519075, 0.0, 0.0, 0.02438580771615928, 0.0, 0.0, 0.000513416175302539, 0.020260517011336576, 0.0, 0.007472242244628058, 0.036825681693003376, 0.0633211814076633, 0.05197085657458522, 0.09017150138273267, 0.02207106445053708, 0.03192249856171381, 0.09298412122161193, 0.05113046354275175, 0.03474060895680009, 0.12318109236655672, 0.07535385071800793, 0.11671387715172898, 0.09727758997380864, 0.16762223102830698, 0.07510742988681918, 0.06321138738081478, 0.07301456159365627, 0.11236659628402246, 0.10354396660362286, 0.1189767069267762, 0.2704414264117827, 0.13128884381244532, 0.12944136501276404, 0.16953040580138823, 0.22189948150081118, 0.0, 0.07845346685068144, 0.5020667123479734, 0.5433537411224207, 0.533891114350992, 0.5248534751223406, 0.5190273922928943, 0.5712258017597949, 0.5348553597129311, 0.5146006176422329, 0.532006980918726, 0.1257591008285277, 0.11942172103042592, 0.10393009175432999, 0.16663519566268115, 0.11418737729740203, 0.08685235066393904, 0.14804858589317482, 0.13315044073718474, 0.10370440553718652, 0.14788988379236356, 0.20116794136365335, 0.1729394925661374, 0.2572721826350812, 0.3341684247784523, 0.14783199041077355, 0.2527894180881285, 0.20958764107218242, 0.19638878021296646, 0.3462399682276739, 0.389358656110804, 0.31671010979389425, 0.30621055177634027, 0.24100463391670068, 0.37703753064419876, 0.366202652248801, 0.38646238148110346, 0.28223439582630894, 0.16947324839880462, 0.3040718377333358, 0.18354059075798956, 0.17813506155197478, 0.17733872006497609, 0.27360957880936865, 0.22409949835518905, 0.2696837422024039, 0.2560879275342365, 0.19198584147472664, 0.19231686737519482, 0.185482650792972, 0.20382060838680316, 0.19908953216816272, 0.20634976693078622, 0.18982793880239235, 0.18308506194950624, 0.230778522339267, 0.19775052254163272, 0.24273174609781456, 0.5906400932417375, 0.5810294797274485, 0.21417887274000824, 0.20860449350054056, 0.44149379715758164, 0.21867701015768926, 0.17948290167437642, 0.8137422449707588, 0.1259495661070309, 0.15280082898000835, 0.8555774625386846, 0.19823846622379027, 0.8301916145800076, 0.18776091529457062, 0.13561059065193581, 0.8463387621357794, 0.6447697781104909, 0.15399664456119555, 0.4354575246124789, 0.45332678289251793, 0.27036056793750807, 0.20759758080683988, 0.2000403552738842, 0.10343806183850757, 0.4992589831059526, 0.167039775899825, 0.17420894572391132, 0.17159430480118476, 0.17776762727625173, 0.19646846105421667, 0.17898126270682857, 0.17587571893511744, 0.1634114533455039, 0.18800956543087488, 0.0919274848706082, 0.08262809568861085, 0.08531568702038206, 0.07871144964177379, 0.07906023772896265, 0.084261795773518, 0.0884449895829732, 0.07652183509196331, 0.08987272642431254]}, "mutation_prompt": null}
{"id": "4000a2bf-ddea-47d2-aa5a-58bde810e25d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.9)  # Adaptive mutation factor\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Adaptive Mutation and Velocity Damping for improved exploration-exploitation balance.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.8028091364700235, 0.8081062099148022, 0.7966487351627463, 0.8047817590191543, 0.7862604449269923, 0.8322669073888598, 0.8288863619799015, 0.8031093983317925, 0.8076985199142841, 0.6905264037225114, 0.03985117407749328, 0.6648503298695665, 0.0, 0.5978660069604083, 0.6243112596186966, 0.6460357912586747, 0.05321114922427228, 0.6721498469990146, 0.1297199287329106, 0.14120676781627572, 0.11966506512416486, 0.11514692056148346, 0.1468373980399763, 0.16700823437180956, 0.16723988475671925, 0.10090065865595721, 0.09568097112414031, 0.11014516635709393, 0.1317443963246615, 0.12628784986758324, 0.1278566619981113, 0.09025256101972301, 0.1297487191100528, 0.12459696852588364, 0.09554730664508193, 0.09401079318593442, 0.9787020580575945, 0.9796603164293017, 0.9814371448109314, 0.9775668314395475, 0.9719945165545476, 0.9687572675225448, 0.9713654195590172, 0.9739851648577372, 0.9673924598508057, 0.45400034901342257, 0.3796143001958401, 0.5088543392516323, 0.44591216200049244, 0.14938983052386612, 0.38793255976219176, 0.12581879795148876, 0.3765952824376382, 0.4041111687696829, 0.32239951758247676, 0.21756951806524327, 0.34713533300483035, 0.2762962466504194, 0.26810002133897437, 0.1917623240991173, 0.2230645004673537, 0.1354416714002844, 0.3270673828047732, 0.24003681636715846, 0.1543765198523812, 0.17468291776517675, 0.09047496423112111, 0.12893448173004762, 0.18600991245693665, 0.14528033837140464, 0.12225788743350008, 0.25650525565273785, 0.18397895219779337, 0.11017838784192557, 0.15339187646707864, 0.20132202464683446, 0.14959961887964768, 0.20276197440123656, 0.16441013329871945, 0.0, 0.29999895840519075, 0.0, 0.0, 0.02438580771615928, 0.0, 0.0, 0.000513416175302539, 0.020260517011336576, 0.0, 0.007472242244628058, 0.036825681693003376, 0.0633211814076633, 0.05197085657458522, 0.09017150138273267, 0.02207106445053708, 0.03192249856171381, 0.09298412122161193, 0.05113046354275175, 0.03474060895680009, 0.12318109236655672, 0.07535385071800793, 0.11671387715172898, 0.09727758997380864, 0.16762223102830698, 0.07510742988681918, 0.06321138738081478, 0.07301456159365627, 0.11236659628402246, 0.10354396660362286, 0.1189767069267762, 0.2704414264117827, 0.13128884381244532, 0.12944136501276404, 0.16953040580138823, 0.22189948150081118, 0.0, 0.07845346685068144, 0.5020667123479734, 0.5433537411224207, 0.533891114350992, 0.5248534751223406, 0.5190273922928943, 0.5712258017597949, 0.5348553597129311, 0.5146006176422329, 0.532006980918726, 0.1257591008285277, 0.11942172103042592, 0.10393009175432999, 0.16663519566268115, 0.11418737729740203, 0.08685235066393904, 0.14804858589317482, 0.13315044073718474, 0.10370440553718652, 0.14788988379236356, 0.20116794136365335, 0.1729394925661374, 0.2572721826350812, 0.3341684247784523, 0.14783199041077355, 0.2527894180881285, 0.20958764107218242, 0.19638878021296646, 0.3462399682276739, 0.389358656110804, 0.31671010979389425, 0.30621055177634027, 0.24100463391670068, 0.37703753064419876, 0.366202652248801, 0.38646238148110346, 0.28223439582630894, 0.16947324839880462, 0.3040718377333358, 0.18354059075798956, 0.17813506155197478, 0.17733872006497609, 0.27360957880936865, 0.22409949835518905, 0.2696837422024039, 0.2560879275342365, 0.19198584147472664, 0.19231686737519482, 0.185482650792972, 0.20382060838680316, 0.19908953216816272, 0.20634976693078622, 0.18982793880239235, 0.18308506194950624, 0.230778522339267, 0.19775052254163272, 0.24273174609781456, 0.5906400932417375, 0.5810294797274485, 0.21417887274000824, 0.20860449350054056, 0.44149379715758164, 0.21867701015768926, 0.17948290167437642, 0.8137422449707588, 0.1259495661070309, 0.15280082898000835, 0.8555774625386846, 0.19823846622379027, 0.8301916145800076, 0.18776091529457062, 0.13561059065193581, 0.8463387621357794, 0.6447697781104909, 0.15399664456119555, 0.4354575246124789, 0.45332678289251793, 0.27036056793750807, 0.20759758080683988, 0.2000403552738842, 0.10343806183850757, 0.4992589831059526, 0.167039775899825, 0.17420894572391132, 0.17159430480118476, 0.17776762727625173, 0.19646846105421667, 0.17898126270682857, 0.17587571893511744, 0.1634114533455039, 0.18800956543087488, 0.0919274848706082, 0.08262809568861085, 0.08531568702038206, 0.07871144964177379, 0.07906023772896265, 0.084261795773518, 0.0884449895829732, 0.07652183509196331, 0.08987272642431254]}, "mutation_prompt": null}
{"id": "f0f84e72-34bd-4aa0-b8f4-a560f293bd37", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        adaptive_c1 = 2.0  # Initial cognitive component\n        adaptive_c2 = 2.0  # Initial social component\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            adaptive_c1, adaptive_c2 = self.adaptive_components(adaptive_c1, adaptive_c2)\n            self.update_particles(func, adaptive_c1, adaptive_c2)\n\n        return self.gbest\n\n    def update_particles(self, func, adaptive_c1, adaptive_c2):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = adaptive_c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = adaptive_c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_components(self, c1, c2):\n        # Decrease cognitive component and increase social component over time\n        c1 -= 0.001\n        c2 += 0.001\n        return max(1.5, c1), min(2.5, c2)\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.9)  # Adaptive mutation factor\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Incorporate dynamic leadership and adaptive learning rates in enhanced Hybrid PSO for improved convergence.", "configspace": "", "generation": 50, "fitness": 0.23262075660334158, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.6981542764675475, 0.6996225032727257, 0.7144219040289723, 0.7399406960531945, 0.18996282870954873, 0.7039087482165209, 0.7363020705130107, 0.7397413155255561, 0.7344907648862307, 0.5246342953967726, 0.5396712976717267, 0.19450829806538417, 0.2861491278973125, 0.5022264665482066, 0.5304685458483442, 0.5169760792675369, 0.5641516453314499, 0.5311802355427464, 0.09320821583873817, 0.08481462631018166, 0.14964290741154784, 0.09582617595905596, 0.09450463327713299, 0.11685557044327177, 0.1076408433509689, 0.04378028809448897, 0.1298602453226365, 0.08647723403636465, 0.1192348493056139, 0.10169759447978488, 0.09454669655188186, 0.08430295271272148, 0.08484334604515642, 0.12007044589127014, 0.10977474477620763, 0.08961838356995999, 0.9725063263959725, 0.9891009147400175, 0.9888085183015944, 0.9782063163413884, 0.9797379309214954, 0.9779355367285445, 0.9772993720819417, 0.9868273752805441, 0.9803699280637476, 0.20294977321245955, 0.05832391029023731, 0.20399535535230928, 0.23903141502505165, 0.16206732989286188, 0.2134208278377081, 0.11693403576248251, 0.08476878066697935, 0.08684041535616727, 0.2814433872108585, 0.23600625536576925, 0.16243835810692875, 0.2654937617737071, 0.19944003564745294, 0.19111236212468452, 0.2531025129691036, 0.25057503912493995, 0.7999164721534744, 0.09778158230370171, 0.10892098575074649, 0.13611047389502895, 0.09540603609332554, 0.11145654078491685, 0.1517146276644653, 0.15511694405395282, 0.17522443785959985, 0.1372387899389509, 0.15427057294838942, 0.05145549259398863, 0.11140967713855354, 0.15966692913955938, 0.15096726416893158, 0.13237160173992946, 0.2202168561047263, 0.08165561178827851, 0.10458525683137199, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02922432302718536, 0.09818851279141094, 0.02792549220946583, 0.11393141532671158, 0.06955900845006346, 0.017840255872928146, 0.07396487594610512, 0.0750911433787691, 0.03488337689891363, 0.02506017391812998, 0.1307030627107657, 0.028220125523818806, 0.03757885669226457, 0.11959631000898985, 0.06311454409312334, 0.060463892733614744, 0.07480174827121777, 0.053687717381434075, 0.058410267174834773, 0.05007119801353277, 0.05325150888693275, 0.08900603421642395, 0.005425536344916715, 0.07757228566389718, 0.14741004629044596, 0.07507306400913583, 0.05061650576133392, 0.07071138238054187, 0.4323380221221371, 0.4564343361608255, 0.4408754263034347, 0.4503244959256485, 0.42632928235247813, 0.43878754396970576, 0.5214391786001549, 0.4684924353469272, 0.48356596968165333, 0.10569588887606607, 0.09395871332619066, 0.11244471363870068, 0.10304953500642422, 0.09831496146869745, 0.09064708563082391, 0.06786500992922462, 0.08433889527432892, 0.09221584111614778, 0.13301190045229228, 0.13538539523405668, 0.1472718424469982, 0.13456503127878128, 0.17003675854031686, 0.16267787700973235, 0.18249117784119495, 0.2116473798442805, 0.16488141196640171, 0.3556345166165432, 0.2787641395409496, 0.2955409737213468, 0.26638987818608995, 0.24886629503186009, 0.29103603092696484, 0.3191977994837617, 0.35153940193295163, 0.24449351703484368, 0.13956204401906613, 0.1866777105915216, 0.23537460048158787, 0.201122667787221, 0.24689902829889432, 0.20737928935434713, 0.23443721393083172, 0.23783892322261968, 0.2862853338142719, 0.1616971452614292, 0.16860616933548156, 0.17805050248851462, 0.15934374444726185, 0.1586200984752384, 0.18454942470002123, 0.15868202335259973, 0.1904964590566306, 0.18088161862781882, 0.18637869911346483, 0.17726023040561667, 0.19039729476520317, 0.1754273269197294, 0.18659339360197014, 0.19281682370408493, 0.24681379696773886, 0.18283771794147718, 0.1807675654276507, 0.7420410956653548, 0.19969137886603727, 0.1529213139284833, 0.7710427470700794, 0.19595294462775192, 0.19392165411123474, 0.09939198856716791, 0.1662691867505136, 0.2062830002860343, 0.312256016609992, 0.22906442836720708, 0.1631764293255954, 0.23654589742504573, 0.3759765851048936, 0.20521221743228502, 0.20042752622542592, 0.10371906351311644, 0.20070623220614303, 0.19903518700703393, 0.17730603091581887, 0.1814503037220515, 0.19099897817482925, 0.1796890080805611, 0.1734828461345871, 0.1747723167818942, 0.20356857943149964, 0.20530983924366797, 0.06009648257789013, 0.06170531425028025, 0.06435925411385579, 0.06582664772693536, 0.06877685797246791, 0.0649046094516148, 0.059170303665911694, 0.05656676043638076, 0.06930344851738979]}, "mutation_prompt": null}
{"id": "9249e086-63e0-4b1c-9516-d48baad7e0de", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.9)  # Adaptive mutation factor\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Adaptive Mutation and Velocity Damping for improved exploration-exploitation balance.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.8028091364700235, 0.8081062099148022, 0.7966487351627463, 0.8047817590191543, 0.7862604449269923, 0.8322669073888598, 0.8288863619799015, 0.8031093983317925, 0.8076985199142841, 0.6905264037225114, 0.03985117407749328, 0.6648503298695665, 0.0, 0.5978660069604083, 0.6243112596186966, 0.6460357912586747, 0.05321114922427228, 0.6721498469990146, 0.1297199287329106, 0.14120676781627572, 0.11966506512416486, 0.11514692056148346, 0.1468373980399763, 0.16700823437180956, 0.16723988475671925, 0.10090065865595721, 0.09568097112414031, 0.11014516635709393, 0.1317443963246615, 0.12628784986758324, 0.1278566619981113, 0.09025256101972301, 0.1297487191100528, 0.12459696852588364, 0.09554730664508193, 0.09401079318593442, 0.9787020580575945, 0.9796603164293017, 0.9814371448109314, 0.9775668314395475, 0.9719945165545476, 0.9687572675225448, 0.9713654195590172, 0.9739851648577372, 0.9673924598508057, 0.45400034901342257, 0.3796143001958401, 0.5088543392516323, 0.44591216200049244, 0.14938983052386612, 0.38793255976219176, 0.12581879795148876, 0.3765952824376382, 0.4041111687696829, 0.32239951758247676, 0.21756951806524327, 0.34713533300483035, 0.2762962466504194, 0.26810002133897437, 0.1917623240991173, 0.2230645004673537, 0.1354416714002844, 0.3270673828047732, 0.24003681636715846, 0.1543765198523812, 0.17468291776517675, 0.09047496423112111, 0.12893448173004762, 0.18600991245693665, 0.14528033837140464, 0.12225788743350008, 0.25650525565273785, 0.18397895219779337, 0.11017838784192557, 0.15339187646707864, 0.20132202464683446, 0.14959961887964768, 0.20276197440123656, 0.16441013329871945, 0.0, 0.29999895840519075, 0.0, 0.0, 0.02438580771615928, 0.0, 0.0, 0.000513416175302539, 0.020260517011336576, 0.0, 0.007472242244628058, 0.036825681693003376, 0.0633211814076633, 0.05197085657458522, 0.09017150138273267, 0.02207106445053708, 0.03192249856171381, 0.09298412122161193, 0.05113046354275175, 0.03474060895680009, 0.12318109236655672, 0.07535385071800793, 0.11671387715172898, 0.09727758997380864, 0.16762223102830698, 0.07510742988681918, 0.06321138738081478, 0.07301456159365627, 0.11236659628402246, 0.10354396660362286, 0.1189767069267762, 0.2704414264117827, 0.13128884381244532, 0.12944136501276404, 0.16953040580138823, 0.22189948150081118, 0.0, 0.07845346685068144, 0.5020667123479734, 0.5433537411224207, 0.533891114350992, 0.5248534751223406, 0.5190273922928943, 0.5712258017597949, 0.5348553597129311, 0.5146006176422329, 0.532006980918726, 0.1257591008285277, 0.11942172103042592, 0.10393009175432999, 0.16663519566268115, 0.11418737729740203, 0.08685235066393904, 0.14804858589317482, 0.13315044073718474, 0.10370440553718652, 0.14788988379236356, 0.20116794136365335, 0.1729394925661374, 0.2572721826350812, 0.3341684247784523, 0.14783199041077355, 0.2527894180881285, 0.20958764107218242, 0.19638878021296646, 0.3462399682276739, 0.389358656110804, 0.31671010979389425, 0.30621055177634027, 0.24100463391670068, 0.37703753064419876, 0.366202652248801, 0.38646238148110346, 0.28223439582630894, 0.16947324839880462, 0.3040718377333358, 0.18354059075798956, 0.17813506155197478, 0.17733872006497609, 0.27360957880936865, 0.22409949835518905, 0.2696837422024039, 0.2560879275342365, 0.19198584147472664, 0.19231686737519482, 0.185482650792972, 0.20382060838680316, 0.19908953216816272, 0.20634976693078622, 0.18982793880239235, 0.18308506194950624, 0.230778522339267, 0.19775052254163272, 0.24273174609781456, 0.5906400932417375, 0.5810294797274485, 0.21417887274000824, 0.20860449350054056, 0.44149379715758164, 0.21867701015768926, 0.17948290167437642, 0.8137422449707588, 0.1259495661070309, 0.15280082898000835, 0.8555774625386846, 0.19823846622379027, 0.8301916145800076, 0.18776091529457062, 0.13561059065193581, 0.8463387621357794, 0.6447697781104909, 0.15399664456119555, 0.4354575246124789, 0.45332678289251793, 0.27036056793750807, 0.20759758080683988, 0.2000403552738842, 0.10343806183850757, 0.4992589831059526, 0.167039775899825, 0.17420894572391132, 0.17159430480118476, 0.17776762727625173, 0.19646846105421667, 0.17898126270682857, 0.17587571893511744, 0.1634114533455039, 0.18800956543087488, 0.0919274848706082, 0.08262809568861085, 0.08531568702038206, 0.07871144964177379, 0.07906023772896265, 0.084261795773518, 0.0884449895829732, 0.07652183509196331, 0.08987272642431254]}, "mutation_prompt": null}
{"id": "0694abd6-9d85-4d79-9ba5-daeb4e96469d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            social = c2 * r2 * (self.gbest - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.9)  # Adaptive mutation factor\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Adaptive Mutation and Velocity Damping for improved exploration-exploitation balance.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.8028091364700235, 0.8081062099148022, 0.7966487351627463, 0.8047817590191543, 0.7862604449269923, 0.8322669073888598, 0.8288863619799015, 0.8031093983317925, 0.8076985199142841, 0.6905264037225114, 0.03985117407749328, 0.6648503298695665, 0.0, 0.5978660069604083, 0.6243112596186966, 0.6460357912586747, 0.05321114922427228, 0.6721498469990146, 0.1297199287329106, 0.14120676781627572, 0.11966506512416486, 0.11514692056148346, 0.1468373980399763, 0.16700823437180956, 0.16723988475671925, 0.10090065865595721, 0.09568097112414031, 0.11014516635709393, 0.1317443963246615, 0.12628784986758324, 0.1278566619981113, 0.09025256101972301, 0.1297487191100528, 0.12459696852588364, 0.09554730664508193, 0.09401079318593442, 0.9787020580575945, 0.9796603164293017, 0.9814371448109314, 0.9775668314395475, 0.9719945165545476, 0.9687572675225448, 0.9713654195590172, 0.9739851648577372, 0.9673924598508057, 0.45400034901342257, 0.3796143001958401, 0.5088543392516323, 0.44591216200049244, 0.14938983052386612, 0.38793255976219176, 0.12581879795148876, 0.3765952824376382, 0.4041111687696829, 0.32239951758247676, 0.21756951806524327, 0.34713533300483035, 0.2762962466504194, 0.26810002133897437, 0.1917623240991173, 0.2230645004673537, 0.1354416714002844, 0.3270673828047732, 0.24003681636715846, 0.1543765198523812, 0.17468291776517675, 0.09047496423112111, 0.12893448173004762, 0.18600991245693665, 0.14528033837140464, 0.12225788743350008, 0.25650525565273785, 0.18397895219779337, 0.11017838784192557, 0.15339187646707864, 0.20132202464683446, 0.14959961887964768, 0.20276197440123656, 0.16441013329871945, 0.0, 0.29999895840519075, 0.0, 0.0, 0.02438580771615928, 0.0, 0.0, 0.000513416175302539, 0.020260517011336576, 0.0, 0.007472242244628058, 0.036825681693003376, 0.0633211814076633, 0.05197085657458522, 0.09017150138273267, 0.02207106445053708, 0.03192249856171381, 0.09298412122161193, 0.05113046354275175, 0.03474060895680009, 0.12318109236655672, 0.07535385071800793, 0.11671387715172898, 0.09727758997380864, 0.16762223102830698, 0.07510742988681918, 0.06321138738081478, 0.07301456159365627, 0.11236659628402246, 0.10354396660362286, 0.1189767069267762, 0.2704414264117827, 0.13128884381244532, 0.12944136501276404, 0.16953040580138823, 0.22189948150081118, 0.0, 0.07845346685068144, 0.5020667123479734, 0.5433537411224207, 0.533891114350992, 0.5248534751223406, 0.5190273922928943, 0.5712258017597949, 0.5348553597129311, 0.5146006176422329, 0.532006980918726, 0.1257591008285277, 0.11942172103042592, 0.10393009175432999, 0.16663519566268115, 0.11418737729740203, 0.08685235066393904, 0.14804858589317482, 0.13315044073718474, 0.10370440553718652, 0.14788988379236356, 0.20116794136365335, 0.1729394925661374, 0.2572721826350812, 0.3341684247784523, 0.14783199041077355, 0.2527894180881285, 0.20958764107218242, 0.19638878021296646, 0.3462399682276739, 0.389358656110804, 0.31671010979389425, 0.30621055177634027, 0.24100463391670068, 0.37703753064419876, 0.366202652248801, 0.38646238148110346, 0.28223439582630894, 0.16947324839880462, 0.3040718377333358, 0.18354059075798956, 0.17813506155197478, 0.17733872006497609, 0.27360957880936865, 0.22409949835518905, 0.2696837422024039, 0.2560879275342365, 0.19198584147472664, 0.19231686737519482, 0.185482650792972, 0.20382060838680316, 0.19908953216816272, 0.20634976693078622, 0.18982793880239235, 0.18308506194950624, 0.230778522339267, 0.19775052254163272, 0.24273174609781456, 0.5906400932417375, 0.5810294797274485, 0.21417887274000824, 0.20860449350054056, 0.44149379715758164, 0.21867701015768926, 0.17948290167437642, 0.8137422449707588, 0.1259495661070309, 0.15280082898000835, 0.8555774625386846, 0.19823846622379027, 0.8301916145800076, 0.18776091529457062, 0.13561059065193581, 0.8463387621357794, 0.6447697781104909, 0.15399664456119555, 0.4354575246124789, 0.45332678289251793, 0.27036056793750807, 0.20759758080683988, 0.2000403552738842, 0.10343806183850757, 0.4992589831059526, 0.167039775899825, 0.17420894572391132, 0.17159430480118476, 0.17776762727625173, 0.19646846105421667, 0.17898126270682857, 0.17587571893511744, 0.1634114533455039, 0.18800956543087488, 0.0919274848706082, 0.08262809568861085, 0.08531568702038206, 0.07871144964177379, 0.07906023772896265, 0.084261795773518, 0.0884449895829732, 0.07652183509196331, 0.08987272642431254]}, "mutation_prompt": null}
{"id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 53, "fitness": 0.30988818095463316, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.26.", "error": "", "parent_id": "4a14904e-a21d-4cbe-a7a2-33676423de7f", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "4e41d1dd-e928-4020-ad09-ae5c933e9584", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "5da24541-3d55-455e-b0d8-360c85dff7a7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, np.random.randint(3, 7), replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.4 + 0.5 * (1 - self.fes / self.budget)  # Adaptively scaled inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social  # Velocity scaling\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)\n        CR = 0.7\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Modified Enhanced Hybrid PSO incorporating adaptive velocity scaling and dynamic neighborhood size adjustment to enhance convergence speed and solution diversity.", "configspace": "", "generation": 55, "fitness": 0.18973685111994085, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.47421782325443973, 0.5086871547423627, 0.548043974787412, 0.5132638726325123, 0.49296558195892937, 0.502724525541592, 0.5365735873355475, 0.5139056490944804, 0.5255716725554338, 0.22056466922479123, 0.2326997408472845, 0.21975843671272355, 0.2061647483586898, 0.2477934993655112, 0.21210304414844905, 0.20996244652770824, 0.19494843772874815, 0.22202337145570605, 0.07904778966198156, 0.09460441343048309, 0.0919228137563659, 0.09146492437460907, 0.09913045448061386, 0.07293562490276673, 0.08443209234474813, 0.09061833311803225, 0.10669106358434433, 0.09210754806516563, 0.09805614053912082, 0.07572965599008952, 0.07791371439360095, 0.062123332129545794, 0.0787513657177824, 0.09191648372808159, 0.07759247391339263, 0.06127070836755555, 0.9649175431379265, 0.9791100364551848, 0.9649345004682605, 0.9725682544132728, 0.978520884279728, 0.9794435829141347, 0.9771570680312488, 0.9640718040247469, 0.9638864537152961, 0.15441530349351507, 0.18151156407971103, 0.056772827861729436, 0.1793835752122077, 0.1734219369158485, 0.17314925437215611, 0.23330874698707726, 0.17967724484965042, 0.18458048249900338, 0.24844429829239523, 0.22177328560179, 0.18784262397846319, 0.2582809460897212, 0.1829570004944815, 0.20186805497765048, 0.22000521002438278, 0.18698387680322304, 0.21796410165653268, 0.10492592445901572, 0.10034058030152337, 0.11193218100942337, 0.08820085480542872, 0.10508667496548463, 0.11417380043024272, 0.11238165157474356, 0.10616472102003849, 0.10864843887872377, 0.07695117846569377, 0.04636663431907562, 0.03926530558588437, 0.11120015825019325, 0.09362213291285715, 0.11283967932331707, 0.10497300077828553, 0.07637399008385548, 0.0799955951199629, 0.0, 0.0, 0.0, 0.0006251764691358463, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06535394207095724, 0.05216160018970639, 0.05180947891980736, 0.019675897896179184, 0.00795548529728407, 0.053844072477299054, 0.03402964503354122, 0.03693760167317228, 0.04346971386423115, 0.0153042792685395, 0.01222684973130217, 0.0, 0.03449758171678896, 0.03955216156513308, 0.03495208014604645, 0.04568913559508725, 0.04050628126298583, 0.010203114289046744, 0.08090248893745888, 0.04405457192438933, 0.04215399527833574, 0.09218940757764305, 0.08405764452989861, 0.05499326325613618, 0.04219064992761157, 0.04689280623547243, 0.06591984636585002, 0.3925714251244573, 0.36225077707382003, 0.3771462345767206, 0.38006819863586305, 0.3887982138647875, 0.3835327198546432, 0.38553533060543754, 0.3373939736637601, 0.38909531509285045, 0.07942483467038675, 0.08715793856854293, 0.07410253852541193, 0.07911242029815913, 0.07901770469189973, 0.07723564632308988, 0.07155744555766741, 0.07493893660102313, 0.0896689729559319, 0.1345618001405986, 0.1437101781948722, 0.1239304652510127, 0.15154888658671173, 0.16623206270066837, 0.1349830869772548, 0.13807198568555812, 0.1656488820064873, 0.16732253286225018, 0.2564109896520067, 0.25413696566077626, 0.25388006023441034, 0.2554236023678461, 0.2151168823535764, 0.2562835318514223, 0.2674161669708963, 0.2787109030644168, 0.265269890102079, 0.20309237120616996, 0.14795158733549907, 0.16616531468088103, 0.16132603355558917, 0.20116003172122532, 0.15554066410860523, 0.20579863783015584, 0.1789988749844038, 0.19221068874546765, 0.18340551479095468, 0.16417940927521468, 0.16387398990719304, 0.1912272852294329, 0.1563336924947918, 0.16902525923617173, 0.1984640418450575, 0.1630840768797147, 0.18463761933185696, 0.16533469315625593, 0.16975706012198588, 0.18421343194853868, 0.17331249614362754, 0.1685607264891481, 0.184450839800964, 0.17713091112662804, 0.1657124583442261, 0.15426873580188116, 0.16131453208749902, 0.21825527185305216, 0.19342015878387198, 0.17904867276681014, 0.17465384086272828, 0.14823333276825557, 0.15156583424974246, 0.15915067109565606, 0.19189948337126916, 0.17487378951333776, 0.15726565797121184, 0.15389585986533583, 0.15303481353386306, 0.1748157993554641, 0.17858535128243624, 0.1973041343538916, 0.1997046818090057, 0.19855925911833106, 0.18570028888993895, 0.1716334744169139, 0.20027703662303642, 0.18015125580073166, 0.18672768853670263, 0.17401605904527118, 0.17461374920158645, 0.1669909344448246, 0.17644999003686734, 0.066354364457197, 0.06351192560764796, 0.07273517242902783, 0.06417317131141975, 0.07622248508463414, 0.062200269915045237, 0.06429455781526272, 0.06278652362096238, 0.06143290040672367]}, "mutation_prompt": null}
{"id": "cdfe199d-6c04-4047-b7ae-ca1440329416", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "402ba576-deba-486c-8796-f56834a53961", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "79556286-8880-4426-90c3-fedcf9acf464", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "81e9f5fe-5225-4082-9bd2-46d181e78789", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "752132fb-657a-4d36-a402-47d24c76644c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "d2c865ed-7a21-470d-8dd6-7648e99af578", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "d68df1a4-d18d-4ee9-abc0-7071cc897d11", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "bb60290b-62c8-4303-a94c-bce77f9d0223", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "313cc9d5-605e-4cd6-b3a8-dd8c17474d76", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "e3476301-e988-49e3-83df-c2d89b29ab52", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "6ab02aab-0678-4a67-82b4-b6a0d1511df4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.7 - 0.5 * (self.fes / self.budget)  # Improved inertia weight adjustment\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.8)  # Adjusted mutation range\n        CR = 0.6  # Further reduced crossover rate for increased diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "A HybridPSODE variant with improved inertia weight adjustment and adaptive mutation for enhanced exploration and convergence.", "configspace": "", "generation": 66, "fitness": 0.26264422561391565, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.6988140690831752, 0.7156391566827744, 0.727822789580584, 0.7389998860133642, 0.7346831562864911, 0.7336825419188477, 0.7175578300168524, 0.7274963427686161, 0.7116259772875417, 0.4896021702251818, 0.5306084079274482, 0.49261876482007505, 0.5147034189982223, 0.5166307226620382, 0.49636987156182133, 0.5110900564156924, 0.4980942703335818, 0.505100925829838, 0.12493895868938798, 0.10342209704703309, 0.11529021947399432, 0.12393550046231028, 0.12006263589250499, 0.15094180603871266, 0.12406677354180962, 0.11494959008780747, 0.1448539588750195, 0.09896742561897987, 0.10180216527796582, 0.09957286912356611, 0.11650853497392766, 0.1346119501512396, 0.10494265842277051, 0.10887717851198764, 0.1100494265834443, 0.09808567675758639, 0.9777817047898252, 0.9692727697357707, 0.9722776921092402, 0.9704069455730376, 0.9772551253902315, 0.9698187091096259, 0.9663364457174513, 0.9703702029762316, 0.9641739897626599, 0.3632165167390331, 0.057305259417225196, 0.06177447606799469, 0.35861159716410973, 0.3210361510215215, 0.37749269088377746, 0.29960934965219044, 0.3057947609804462, 0.35360635437715393, 0.5322832682978575, 0.2070911156177272, 0.20623284199412528, 0.2588658661487039, 0.32322680155715666, 0.19389072111302863, 0.5561214057946013, 0.25848486172374663, 0.47240865258127673, 0.16997570974532772, 0.12758655523572848, 0.14309109348284543, 0.1636201969389991, 0.15946603021297256, 0.15680744009999048, 0.1553305258180422, 0.13783984523071535, 0.159579639553878, 0.1807986613611181, 0.16187491904992712, 0.16078751375088618, 0.1568952000978001, 0.10287945238458962, 0.17633036562199234, 0.13296356190894643, 0.16925578461280488, 0.20657480524805816, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003806058025447423, 0.0, 0.03234009025043705, 0.04081321345134259, 0.025562132427409567, 0.05251537972228437, 0.038721483336366824, 0.015111111688412948, 0.030762219532872725, 0.06455656433897894, 0.06336118045799155, 0.036153904452359, 0.025390495361815923, 0.12566255085222533, 0.09629227479412983, 0.05621086592971891, 0.03271606714086428, 0.13228471775610084, 0.09639637850626859, 0.07394363044866059, 0.05084604934054804, 0.07038465887586431, 0.035974429817694165, 0.10995315173867515, 0.13036375343913442, 0.14441327246701952, 0.16289695355230638, 0.1712410489455548, 0.04724543079400578, 0.16427317856410661, 0.45991201043537433, 0.44774118597673496, 0.5032484978344406, 0.4347938784084726, 0.49185694619413, 0.4789130220230897, 0.471781728454158, 0.4762826912795026, 0.5306488168363189, 0.0960353434683413, 0.09442943308796603, 0.10229741315789431, 0.08878113171734148, 0.10767472587704074, 0.09500861498831359, 0.10327561941361452, 0.10089222170575485, 0.09923716964074247, 0.16108846484747597, 0.15825100361116962, 0.13995761386795225, 0.14921333886762167, 0.13358726521527442, 0.14524854372499174, 0.15675561094699608, 0.16006450064665245, 0.12930995801314127, 0.25889758437095023, 0.3887299843727309, 0.3252895143054675, 0.3075935785133105, 0.300490954460085, 0.37101463308758964, 0.3910479477924793, 0.38720166154573876, 0.4104347249772756, 0.2736960941231873, 0.19334661241287088, 0.22563057613444815, 0.17419671498947176, 0.19719818995437288, 0.23375649183875802, 0.25748969446149417, 0.24622133872574303, 0.26752030375814306, 0.20462239257853898, 0.19453977209181106, 0.21614671386034234, 0.18543593101942035, 0.182432762817046, 0.17976171037815258, 0.18992306436936923, 0.1743033735002466, 0.21094091271409687, 0.21269571597463743, 0.18814474145670412, 0.22515175865225123, 0.2014992291963661, 0.1808992099699518, 0.1871337059686613, 0.3983722191538025, 0.20786897082895073, 0.2202897818691878, 0.6363046950073219, 0.704348421183087, 0.14926659551522203, 0.7101612680488616, 0.19734042431172527, 0.649485353535118, 0.1476294051736604, 0.6501848245324285, 0.17629191526059784, 0.3260982176761773, 0.21234162718134975, 0.4044969255361929, 0.197977165278179, 0.26157416590783045, 0.24805485715912834, 0.1929981312655925, 0.44694717619925106, 0.19757938256920626, 0.19454589857852667, 0.20370029385182553, 0.19540606958791518, 0.17775568934185082, 0.17482130336318769, 0.1815877905888701, 0.1887638468999182, 0.18530092309922352, 0.19698050549631874, 0.07131228877985363, 0.0897990330218188, 0.07641891537892131, 0.07252012002555985, 0.06892375539137352, 0.07386839985650318, 0.0752712171364519, 0.08486762604969134, 0.07040758175172379]}, "mutation_prompt": null}
{"id": "acd5a393-014b-453d-88b1-9bc325e95489", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "79d5130c-41c7-4202-9f29-d46896400861", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "ff12c709-0c57-4e60-a5a3-024faedb9ab8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.4 + 0.5 * (1 - (self.fes / self.budget))  # Improved adaptive inertia weight\n        c1, c2 = 1.7, 1.7  # Adjusted to improve convergence\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best\n            self.velocities[i] = w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.3, 0.8)  # Adjusted mutation range for diversity\n        CR = 0.65  # Adjusted crossover rate\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        crowding_distance = np.mean(np.linalg.norm(self.particles - target, axis=1))  # Crowding distance\n        mutant = np.clip(a + F * (b - c) * crowding_distance, self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "HybridPSODE-Enhanced with adaptive inertia weight and crowding distance to maintain diversity and convergence.", "configspace": "", "generation": 69, "fitness": 0.17680422562929404, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.4802497912630014, 0.4756797965108769, 0.4777902794354807, 0.4911935965667167, 0.5310251433649122, 0.4624551452778105, 0.4948387126153767, 0.4804873933725289, 0.5165287245640922, 0.14097643047813524, 0.16347246080224886, 0.10629425266990888, 0.11149654760478966, 0.11030971031925652, 0.11106441664059674, 0.15045438565513336, 0.16691255364222202, 0.16003829932973646, 0.08719019078515433, 0.09686527061725703, 0.08166740324553334, 0.071064121419949, 0.07336935275017897, 0.08688128693500297, 0.08793363105562746, 0.0927883245404737, 0.0996195514098035, 0.08311401642294736, 0.062368362624098284, 0.061131612216134834, 0.09188294382828532, 0.06870386850525956, 0.06611865606256928, 0.07750853992335649, 0.058560199571757954, 0.0903757670230867, 0.9799687853342279, 0.9720302198520794, 0.9782966833993938, 0.9810551559785314, 0.9798578425777184, 0.970762912273101, 0.9780483824180815, 0.98850738063988, 0.9856422881060035, 0.050798712491896714, 0.05224072623700371, 0.102585172417485, 0.13075837154207204, 0.11910020067523219, 0.1206620636522372, 0.1872748451498898, 0.08300307287874298, 0.08073549970113214, 0.20089905635068894, 0.21449983778129944, 0.1627320838957036, 0.17846493008019237, 0.1971446592142152, 0.17568443345423168, 0.18116238339420343, 0.12074149274195223, 0.16478042396113035, 0.1019678925984625, 0.10680545991010437, 0.11222346587324461, 0.13083716230508002, 0.08794225634114339, 0.09469103749239616, 0.10584266164452671, 0.11838129298410383, 0.10426008036014067, 0.05098126174921069, 0.08033266313415555, 0.043708888834988247, 0.10156800741004512, 0.1546745333727234, 0.09895525945238037, 0.08570216244475992, 0.04169383251066261, 0.10895437885193715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03756600493191853, 0.04092465074683205, 0.03694591910973, 0.013587153037809219, 0.006853313973909092, 0.014412913416279483, 0.026247364582761668, 0.035192249821552446, 0.015920741025904683, 0.01389254606044521, 0.0009819992621139528, 0.015384259653107968, 0.03788075250053935, 0.0, 0.03404455223852143, 0.012370307912730638, 0.028637167441328715, 0.03734947891378071, 0.04242425212608014, 0.022718441867306094, 0.08067425772191417, 0.003407957805677375, 0.055127870931590994, 0.07652426670617318, 0.03878751395749891, 0.05822826215384902, 0.06484364330991266, 0.34721355902690687, 0.3467104637756505, 0.34814732978041973, 0.37680068924481325, 0.3071141304141147, 0.3515172198042459, 0.3558610011793695, 0.3465822758477287, 0.3911480936792806, 0.08616500221520107, 0.06572336446165405, 0.06431174155607045, 0.06535145303974166, 0.08656545697311957, 0.07627872094533195, 0.07759987881061903, 0.07093612672594174, 0.06275221439945455, 0.14013924091035768, 0.13390817533920396, 0.14628730417485125, 0.136300192519062, 0.14743796608413828, 0.1572491670711208, 0.1360647489914265, 0.14498230095627185, 0.13541942638961935, 0.23678807769908394, 0.2560737509567309, 0.25039445019258855, 0.2594037237093061, 0.2416930349696631, 0.21873799668242222, 0.2579450485629724, 0.2763396949633764, 0.2489956109254856, 0.18145921268331022, 0.1315115915265629, 0.14668796463440392, 0.15374922640216082, 0.1541416645865833, 0.1651014512489284, 0.15433911049833604, 0.16947960216823, 0.17525025256409266, 0.16767275904852375, 0.1795104725644876, 0.17371991120827446, 0.1514713411877152, 0.21198877896618462, 0.16118503566222442, 0.16297954921989366, 0.18224668539995836, 0.1663615576872216, 0.2039956790549856, 0.17168482999481272, 0.17818072869805313, 0.17539464679559624, 0.1643202295749766, 0.17434149031216817, 0.17062499947896226, 0.16930288003696659, 0.16682332682880296, 0.15650508672578312, 0.1562789695713369, 0.1329222498524869, 0.3438217414795647, 0.17953408153014772, 0.14803747563990177, 0.11726778043955888, 0.15356032764387362, 0.1618606821405889, 0.15599434813568946, 0.20788592403540063, 0.15890789162488161, 0.1398275325535957, 0.14088499619703054, 0.17725983298705672, 0.1926387178138339, 0.23835313953384252, 0.18909831028532942, 0.1883560607859429, 0.1756786956181493, 0.17974022368847276, 0.1757906583259501, 0.17142816362487356, 0.1819188833540647, 0.16947052679780916, 0.168682287087899, 0.1588561241691394, 0.05533082410946666, 0.06913218947256972, 0.06947829266206407, 0.07400591457355676, 0.060518506565741315, 0.05856933753084792, 0.05852844610788266, 0.06274361334430123, 0.06008279518215842]}, "mutation_prompt": null}
{"id": "418c489f-bdf2-491d-85c8-b65c018f3697", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "13ceb056-6acd-451a-a144-808059c34022", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "95dd2c6b-3d1c-4fcb-85a4-b0d0018f74ad", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "9ae43c63-36b2-4d7b-84b3-3caba2e0ea80", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "b0983e2d-9be7-4687-ad8c-c4279a5c8c7b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        alpha = 0.2  # New: Firefly algorithm-inspired attractiveness\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])\n            attract = alpha * (self.particles[local_best] - self.particles[i])  # New: Attraction towards local best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social + attract\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)\n        CR = 0.7\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Integrate Firefly Algorithm-inspired attractiveness and repulsion mechanisms to enhance exploration and exploitation balance.", "configspace": "", "generation": 74, "fitness": 0.30162290172482137, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.814416747109109, 0.7855359775207365, 0.7967944646544225, 0.8092294620418872, 0.8054913805359747, 0.8172223758863908, 0.8130020328088803, 0.7924429489231449, 0.8148362318482254, 0.6403695071639033, 0.6552079708756199, 0.6329061420313508, 0.6561514550846212, 0.6211764062446835, 0.6404072427823475, 0.6385745019583626, 0.6533538318710685, 0.6617168273566587, 0.12587914743414352, 0.12519110810232503, 0.14027467011585026, 0.1163579271923687, 0.13786268705767557, 0.1234149839565214, 0.11118717785281673, 0.12208557335275205, 0.1278180454918766, 0.11397332971876462, 0.11145077976735407, 0.09468529770811651, 0.12235967960432104, 0.11065882433581264, 0.09560851962543493, 0.1113917940982756, 0.12512598012518106, 0.10746153730565455, 0.9842536306070376, 0.9730036765013881, 0.9690095619663776, 0.9717859474125059, 0.9790250378045813, 0.9694595640138166, 0.9732812497675023, 0.979948801622104, 0.973124659282532, 0.3826435472780819, 0.38767786414663297, 0.4021010412703777, 0.5014440291011446, 0.5106266197487342, 0.44927612896362756, 0.474589065764933, 0.4494287876444889, 0.40224649886578523, 0.21935332144224795, 0.3209474241540571, 0.3406007798798053, 0.7817058940100886, 0.7211556653793857, 0.6965450217110515, 0.3070723024713642, 0.22513145179964578, 0.7027876567580452, 0.17324275149528834, 0.1890654351527642, 0.17100992340501164, 0.1674287742804701, 0.16092159569577946, 0.1550596985398719, 0.16317125535918386, 0.15899038870097215, 0.15776904984325724, 0.1683132231837704, 0.11043937821570649, 0.18895501889704025, 0.12445237615909299, 0.1417640632718491, 0.15900750851447576, 0.20297281125608257, 0.11929141704767376, 0.17371116864278646, 0.0, 0.0, 0.0, 0.007109381928426806, 0.0, 0.0, 0.02810515914504519, 0.004088285891210353, 0.0, 0.06624169050654949, 0.06789442553165281, 0.06632413517391411, 0.022709855891016706, 0.011659436371609266, 0.02401775717967425, 0.06848022002176402, 0.03617615451494749, 0.0527174843417908, 0.0919564661126544, 0.042783324860121374, 0.25664970190458447, 0.06976312970489562, 0.03979091558043235, 0.16941134729648222, 0.06425796673696027, 0.08243986168281758, 0.057054537281126194, 0.12272698726632114, 0.01034314642381906, 0.1870911231501281, 0.1556756317538266, 0.20364861733953954, 0.15065006857631558, 0.2511816673555428, 0.18063792499471054, 0.08126798285110759, 0.5346529171261164, 0.5031648056723383, 0.5066870284473592, 0.4944533225291067, 0.5309074178123652, 0.5143835285344671, 0.506739611638108, 0.5141206517143733, 0.5417524729154087, 0.07893647710993301, 0.13097546881298694, 0.12221927821162681, 0.09776863151027171, 0.12955387960167153, 0.0996229335210248, 0.09411259294838492, 0.11647012549923252, 0.0967234701776859, 0.1214882393173593, 0.19037669134866386, 0.14763245352914656, 0.12525662424424755, 0.15005384616137396, 0.16609415987727438, 0.19953818357205977, 0.13706551023819302, 0.18190081204826014, 0.4917913697985944, 0.48729850035519306, 0.348232635819124, 0.3346056836893636, 0.46318123743660955, 0.4891063185783736, 0.4584286165709649, 0.4638223103234943, 0.4494870266252957, 0.23854165595089794, 0.2329128625964476, 0.2949131802317584, 0.30582924877739204, 0.2232257122382597, 0.20170507820898276, 0.34442684785629785, 0.3141631215509427, 0.32199338432184466, 0.2074195461631574, 0.21223192710631633, 0.1877828768146892, 0.1924761803315722, 0.19242465628706362, 0.1920815703736254, 0.19109343167199144, 0.1993744191513681, 0.19706750638745707, 0.1982183419597966, 0.2380247176130066, 0.22729339832370832, 0.17942479440604298, 0.18341202184192584, 0.44032041149053824, 0.18743317428566098, 0.19586351909264343, 0.21250654703247807, 0.7184997164806458, 0.8541186521654425, 0.1513451081181273, 0.7835687238484768, 0.19274529795317796, 0.19651728715343275, 0.7316607031516129, 0.7937068799143558, 0.20759944985816903, 0.5124660670111789, 0.15536386916781453, 0.6391543432459286, 0.5957238230199104, 0.2841207067765299, 0.26043762084581523, 0.19823855694707304, 0.1503329872323539, 0.20766970171140997, 0.17842214248172317, 0.1992069528521211, 0.17519377905367606, 0.20951965777895676, 0.18394333625838277, 0.20861949242077926, 0.17499205187380973, 0.17727027337041978, 0.1722054146860491, 0.071216213977492, 0.0966830892740842, 0.07603876662979236, 0.08216792089175573, 0.075918398219053, 0.08282271890920978, 0.07704367480465413, 0.07614573851278472, 0.09083466664325246]}, "mutation_prompt": null}
{"id": "6211d4eb-c646-4702-a58d-8cf18fbc8c55", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "216ade70-f66e-493f-81a4-621a317131a0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "c14aa4d4-5a01-4885-8b1c-0683cc280719", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "58f6c464-6366-4702-aa29-e7f4e5f64dac", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "855e258d-a15a-462e-bc93-8aaa992e544c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "f884a97c-fb4c-4dc1-a9d4-90c36f020216", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "afd6cf7e-5bac-4615-ac78-72f2758530e7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "8d91a111-f996-4abb-a0bc-9ab4f38e8b0d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "e25a2d4a-5b11-4b05-ad39-d8cbd84e3862", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "fc05c440-aee7-4dc7-9b2e-141cd66abb24", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "4045035f-e7f3-4e46-a508-eae07881fd32", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "be0f99c9-2b74-4a9c-b66e-5eb144cacf6a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "70462371-b12f-414f-9935-1efe2db4a7c6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "5c70f659-f261-4df3-bae5-e85f3aea770d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "aef706d0-9c15-45e2-ab74-5a5931691c79", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "1af71746-ab26-4a2f-a45e-78484f2d317e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "48ff8c6d-0a68-4d16-9c4a-3bd5fe2505a2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "e25204a1-04c6-4edf-bd3c-7470c016c182", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "2a73f78f-effd-48a6-ac6a-51a4d0c2048c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.8)  # Adjusted mutation scaling factor\n        CR = 0.6 + 0.2 * np.sin(2 * np.pi * (self.fes / self.budget))  # Dynamic crossover rate\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Adaptive Mutation Strategies to improve exploration and exploitation balance.", "configspace": "", "generation": 93, "fitness": 0.2910091624370713, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8182555484186342, 0.8097883413905642, 0.8224353474831525, 0.8177037719256264, 0.8242920114775896, 0.832724937508256, 0.8113100828879503, 0.8329594465374823, 0.8069546302982495, 0.6491679186742354, 0.6955726305408119, 0.6614460968235554, 0.6759526918615673, 0.6525275106005952, 0.6771565762773999, 0.6694678700438654, 0.6615633127566121, 0.6636791920375751, 0.143346904712238, 0.15043571631263242, 0.12388374186127016, 0.11472017943256652, 0.1469742523772789, 0.13675780170879515, 0.25797564850339194, 0.14760106813936325, 0.1611389783447088, 0.11978099774215956, 0.11204653641271778, 0.11253963660279132, 0.1058780755927462, 0.11208041786781031, 0.11697076670190798, 0.10831374485261691, 0.13108088754464176, 0.10440094058676097, 0.9680784171281754, 0.9656356504354585, 0.9717304451279944, 0.969383955667756, 0.9757758658536402, 0.9692059327931473, 0.9708575575125509, 0.9624453081943947, 0.9495848185122507, 0.4361048438340537, 0.4618579661061618, 0.24520278528205386, 0.43469028231367124, 0.534258136658311, 0.5213809446469378, 0.16120286346743673, 0.33582057055997916, 0.40334374760027003, 0.3434847783350987, 0.34986438253551855, 0.3358332880936098, 0.20954439048233475, 0.2721540716107107, 0.20940003289443399, 0.3656655660904091, 0.6501756028036922, 0.7178619257661297, 0.20329352273866075, 0.15936878433609014, 0.16541270587098533, 0.15986706471778056, 0.22806748602550175, 0.14590860797624305, 0.15731434774362874, 0.1766668214346877, 0.20255582961195562, 0.1789107625780747, 0.11614522595262367, 0.1833125422646592, 0.1377890493556393, 0.17256187343272433, 0.15356988965749374, 0.20339862623894345, 0.144109511090038, 0.18138038409009993, 0.0, 0.0, 0.0017161772115541485, 0.04580330816296485, 0.0, 0.009750029125633053, 0.0, 0.0, 0.012385997590545594, 0.09017651825498907, 0.0703734665712451, 0.06362124342329223, 0.06436971348768239, 0.006266088072171994, 0.02965429723216617, 0.024835878926092292, 0.0856090596170408, 0.06736868959490971, 0.11064370869632056, 0.13391040326275339, 0.08232240730514262, 0.087323707582604, 0.11531942049905342, 0.2967515560109063, 0.0423746744803839, 0.057786214235923894, 0.07760031883769658, 0.12964787714117232, 0.09562922963498821, 0.2580580849333488, 0.18102153452103886, 0.10593691587847154, 0.1336497040184822, 0.07829495924923469, 0.08220595460483715, 0.08480460060173023, 0.49365077715052763, 0.5303782035545523, 0.49528978298119686, 0.5224496810796457, 0.5029900783871135, 0.5446293287259842, 0.46984728130498166, 0.5349023215958497, 0.5340090331978965, 0.11284413414653172, 0.1288509995202658, 0.11357732191135561, 0.09556099652194716, 0.11889817047721063, 0.10940367182753585, 0.12131704173000657, 0.13429523797994025, 0.1353003940974622, 0.17620867478039415, 0.16079263461947357, 0.1492885852565603, 0.16540511656312085, 0.18677306451343856, 0.1450341383813868, 0.14697584858479418, 0.12673850946785237, 0.18192799008469462, 0.29646796006043674, 0.3735262033892872, 0.45395260964703243, 0.39654657988166286, 0.44344033003350003, 0.38914157308809993, 0.46230164625864234, 0.4913232635420618, 0.47587056050012844, 0.28671673002393816, 0.23726078619118363, 0.2838653993454995, 0.24397507470026336, 0.22875870182300562, 0.264905576751568, 0.34562817799156187, 0.26899830603640507, 0.3314539889997228, 0.20056297641981913, 0.18909550263763586, 0.23257650003625363, 0.19215273151888856, 0.18709705094333728, 0.2778360811927326, 0.19508924252041981, 0.18822458526130137, 0.20062911780091797, 0.17670394732059613, 0.2002139144436874, 0.1894977704707348, 0.20269431037234031, 0.1994046875462614, 0.21242676003166872, 0.18245104633193243, 0.5270037092982904, 0.21265005995302877, 0.181534370184116, 0.16558756315473788, 0.3562647906253992, 0.19435579614835063, 0.6910938066508707, 0.1937031102086434, 0.16343613735041085, 0.16756639524873573, 0.5109164154622682, 0.7219113967047456, 0.20430442135167637, 0.27927470472706317, 0.31080482544871524, 0.1646608370884316, 0.2715472602620086, 0.20829229692530649, 0.4275494862937631, 0.5978594471410918, 0.17712355879214703, 0.1899062560055832, 0.16891593263638116, 0.182434853779059, 0.20169802933884862, 0.1779675512871488, 0.17559656468396023, 0.18626533807742862, 0.20075238452883737, 0.0714075628829367, 0.07476645805766347, 0.0819053996586957, 0.0898664538620002, 0.07940736404569049, 0.08296824053432961, 0.09273833841256307, 0.08316817500842555, 0.07837196600730345]}, "mutation_prompt": null}
{"id": "83ff7218-e466-427b-834d-a1678ec17dca", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.initial_neighborhood_size = 5\n        self.neighborhood = [np.random.choice(self.swarm_size, self.initial_neighborhood_size, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)\n        c1, c2 = 1.5, 1.5\n        neighborhood_size = max(2, int(self.initial_neighborhood_size * (1 - self.fes / self.budget)))  # Adaptive neighborhood\n        for i in range(self.swarm_size):\n            self.neighborhood[i] = np.random.choice(self.swarm_size, neighborhood_size, replace=False)  # Update neighborhood\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.2, 0.9 * (1 - self.fes / self.budget))  # Dynamic mutation intensity\n        CR = 0.7\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Introduced adaptive neighborhood size and dynamic mutation intensity to enhance search exploration and exploitation balance.", "configspace": "", "generation": 94, "fitness": 0.2717268919374916, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8166142071688913, 0.7887971175110876, 0.8060031255458854, 0.8117540199703501, 0.8081830181781398, 0.8149674410388201, 0.8112456341263055, 0.8180790271389087, 0.8051755777278207, 0.6469712958293758, 0.6469791688274873, 0.65101090038057, 0.6376475803130388, 0.6262947390103517, 0.6391222728984443, 0.6286378740801383, 0.6388677988793735, 0.6566974805311149, 0.09484204899559079, 0.08927309878618994, 0.10456739050353858, 0.10452889889994188, 0.08750239117606617, 0.0936595305666228, 0.10825591495190678, 0.11803251899779554, 0.10863014156569983, 0.08986221995194177, 0.10354657143234358, 0.10112226941509528, 0.10665424930183487, 0.08822353344410294, 0.09273624552792537, 0.08632550242415105, 0.0834898427350127, 0.09127412109191935, 0.9646607009679847, 0.970519200429488, 0.9567107536211239, 0.9728266582562423, 0.9578829281324791, 0.9693129991495318, 0.9693200525239567, 0.97196853890145, 0.9653319510505792, 0.32878659747938577, 0.05869119509023368, 0.4133964263508557, 0.42921187353434453, 0.4783589012410495, 0.4310771480839197, 0.35817876237408475, 0.3866997142213403, 0.4067064059487, 0.2901330927385658, 0.5817725543211916, 0.5010975969346467, 0.26319705865496157, 0.6294976482044152, 0.5328328938930214, 0.5188043596855798, 0.6077366802271701, 0.31720742646229083, 0.16073399473984917, 0.14767165463208842, 0.15308467288412209, 0.1542366084815756, 0.16373841570224035, 0.1426709632152542, 0.16671711846307402, 0.13780295255605635, 0.14595516816502319, 0.20047491801299888, 0.14758481917430055, 0.0669335683078931, 0.1548321808996599, 0.17282024207189517, 0.15619889903952977, 0.1903075980999802, 0.17288614767882715, 0.18674661494804012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.017257322517195472, 0.10196207433327653, 0.04653939781796723, 0.050962640522623004, 0.04415375609956518, 0.036738418300598985, 0.01097843306791435, 0.05562157786218924, 0.08492186251677081, 0.05967738121852395, 0.018124027903333784, 0.009933891747063939, 0.04567445997864539, 0.046456121930421035, 0.053102073052140764, 0.10629875061491734, 0.06827494539428602, 0.050320212889536586, 0.0, 0.12305270713996119, 0.13296472579634533, 0.12992968386089365, 0.10149584757793495, 0.1831730426046806, 0.15674786660502393, 0.08452623776110268, 0.05081052266624286, 0.11602766117875252, 0.4893855566630675, 0.460748394192825, 0.4863420404819212, 0.5027636970666272, 0.48127805865940243, 0.47924101433510113, 0.48024554755672655, 0.4782189585957882, 0.48160834429171695, 0.08870311940226105, 0.0903081562726531, 0.08669927354462192, 0.09817648272708468, 0.09892970803173962, 0.09273180338206477, 0.08495940485273679, 0.07382273197690026, 0.0802693508192166, 0.12795812343069224, 0.1332980114050708, 0.14659635427953577, 0.1315559779596932, 0.14330336940423005, 0.1262983876616356, 0.1424525399920683, 0.11912074629924829, 0.127367582806159, 0.34502878829483297, 0.36556218322043843, 0.4265821863771182, 0.4082687182272695, 0.3512221975250611, 0.36083038171656934, 0.4382601066224655, 0.4485582784207207, 0.4067870434687385, 0.26406536174437856, 0.21728526897574485, 0.2208141779285795, 0.25276111274551016, 0.18526431986673098, 0.24639491976243932, 0.2854036960548584, 0.30750911683513127, 0.3072743894409198, 0.20868642500564505, 0.17399983218406012, 0.18189270930162404, 0.22496058851852108, 0.21643634994763106, 0.18471194444475791, 0.18656019595977924, 0.17209035112948, 0.1805237254742802, 0.18344106971039154, 0.2040639701580268, 0.1718304091975824, 0.18796912579353453, 0.20511707560136105, 0.18193526223909562, 0.19837776675454388, 0.20709593354006128, 0.1754213701013303, 0.20165369723940885, 0.1620840496593111, 0.14392536685312374, 0.48326781611531644, 0.1913904503453342, 0.19444818954935217, 0.4912007606732509, 0.16756387900732317, 0.7656508925676635, 0.28757232307787073, 0.16461204771699356, 0.22512022267503295, 0.20444235795778742, 0.2587462540888369, 0.1934962105420185, 0.2101606137106794, 0.3057493347131133, 0.20045947981628542, 0.18800793850457675, 0.18325670450513976, 0.1888093428671216, 0.18827624100793672, 0.1899546524059238, 0.19427736894277214, 0.17297285054270328, 0.18134965730438835, 0.19453484899907725, 0.07144009058641931, 0.07007866199061041, 0.08878860930598598, 0.07925409284561225, 0.076952317095493, 0.07125935171483377, 0.08618338637309575, 0.07819989811056716, 0.07788254327453759]}, "mutation_prompt": null}
{"id": "ff802d0c-ec20-4a04-845f-fb17b8a272f4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "c999d94d-846c-40a0-9f6f-eeccde4695b7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "35aabe90-d0b2-45e5-a691-c6ac46fc2616", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)  # Adjusted inertia weight\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])  # Local best instead of global best\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social  # Adjusted learning rate\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.4, 0.9)  # Slightly expanded mutation range\n        CR = 0.7  # Reduced crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO with Dynamic Neighborhood and Adaptive Learning Rate for improved convergence and diversity management.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8101829497730528, 0.8196206200947661, 0.8177131991965239, 0.822946173969866, 0.8215421458389487, 0.8099501868719933, 0.8136665375631603, 0.8049935848579418, 0.8380301481617051, 0.6528992116313299, 0.6653244224635021, 0.6596528129071326, 0.6786540906394041, 0.6868627767354818, 0.6476327735419423, 0.6688178295342768, 0.6730952282646507, 0.6827237529137988, 0.11656070979292743, 0.16397237868877712, 0.2808394494463049, 0.14353341411522347, 0.13764622501434132, 0.26896342443849297, 0.1306494250203174, 0.13179944888930017, 0.13289943286328798, 0.10448820443319295, 0.12779271125855995, 0.1352764615886226, 0.1195512199047516, 0.13049828543362418, 0.10370703415269777, 0.11960818771718151, 0.11429411670492262, 0.1197409785964384, 0.983856655192624, 0.9731382780880322, 0.9640491172249652, 0.9621369426295987, 0.9756145309676213, 0.9617849851437982, 0.9777523671554079, 0.964508555367671, 0.9566440814438494, 0.5015737019186766, 0.4668587849309599, 0.4465662915890313, 0.44477129021319683, 0.3149673261078728, 0.5225421945043768, 0.4451378060382689, 0.4560454648482468, 0.421584846534948, 0.699315368894952, 0.5022720319271519, 0.7132027386384006, 0.2720538942192412, 0.7898440631107938, 0.2033260286726648, 0.34348576380254814, 0.814682391146758, 0.7182193203164464, 0.16022357666828646, 0.1715060975488767, 0.17283617555113995, 0.16366688536611762, 0.2054641460635367, 0.16064287043748116, 0.1780787011647864, 0.17003649380227193, 0.16154714757097188, 0.14474456130229119, 0.15053064072062117, 0.2028209916079743, 0.16016296504154215, 0.13846773610452434, 0.15765719144570833, 0.19688370053365511, 0.21608278065725983, 0.18615492680269885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006632390232636287, 0.0, 0.0, 0.013478320941912703, 0.07051180686950542, 0.07056448519341973, 0.04525635354422941, 0.07561314100588956, 0.029662028017408693, 0.03374987366369098, 0.056195359156416824, 0.07984965646902642, 0.06779063387132922, 0.12204880145375396, 0.07717156987510265, 0.04639464403063798, 0.15274798054002892, 0.06625491361249092, 0.3293454578445282, 0.12979991638850175, 0.08632999509771366, 0.1681856747985606, 0.22233799392237175, 0.25722829782826107, 0.07025437591775696, 0.26238384920412827, 0.22611122716425558, 0.11542889267147871, 0.100337206227463, 0.1580038601132857, 0.07921543217591587, 0.5527159467487666, 0.4686688883767288, 0.5317678666327252, 0.4672409172501828, 0.5094883611799361, 0.5506319955068959, 0.496776565401414, 0.511973026042549, 0.5387762117375907, 0.14336024817459636, 0.12732667989962032, 0.11175149452864974, 0.11422889771448641, 0.10595478619756504, 0.11493773369415394, 0.12211419049240846, 0.13275741041125544, 0.13070929626255234, 0.19277903798316975, 0.15371207743545023, 0.1616663080310543, 0.13492180212903115, 0.12419262301295508, 0.189256839606606, 0.11378859973464917, 0.1280922304329526, 0.13074720073816792, 0.38436953451682143, 0.45007739194063123, 0.41187079383945024, 0.4133012626672329, 0.43288646360018335, 0.42349655757536675, 0.4866196541282618, 0.44976838239226613, 0.4570134797954126, 0.318828677549997, 0.22037013893071167, 0.2896578652721483, 0.1868598187216941, 0.1848685892107792, 0.27076247530931996, 0.22686542750970506, 0.3872754519694096, 0.33566871761244765, 0.17930706930961116, 0.20421544717046636, 0.18397731316987187, 0.22212127795568137, 0.1887067558559643, 0.22262097109778456, 0.20885408582639797, 0.18239172902394163, 0.2070626805867417, 0.19247052075680593, 0.22759475226107573, 0.2162941967776022, 0.20629273437185836, 0.5733393988920938, 0.5663462627369851, 0.2008012452448683, 0.5701750188510843, 0.2242442792496393, 0.18437018845585285, 0.8019694803711632, 0.1498912612688338, 0.26246009759787414, 0.19955292650098166, 0.7659180299595849, 0.764850813428562, 0.16534795001102176, 0.20544151774231645, 0.5549533168663314, 0.3796003114858769, 0.5773351429096965, 0.5297499670380484, 0.1656546497949033, 0.20097287637086836, 0.20823458045785215, 0.1527107681515827, 0.12648753013277292, 0.16757456818120087, 0.17515402387569923, 0.17093186873821598, 0.17220706028036947, 0.18769587005953858, 0.17284750710337882, 0.19395800966629084, 0.19144987562521432, 0.17950868351063687, 0.0754306564431908, 0.07359873198650224, 0.08413017541179069, 0.08233542306630393, 0.07551042956517517, 0.06997955047890458, 0.07309654824588274, 0.08094611923658446, 0.07782081927736073]}, "mutation_prompt": null}
{"id": "0b7cb211-f507-405d-8227-2332d855aa77", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, np.random.randint(3, 8), replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.5 * (1 - self.fes / self.budget)\n        c1, c2 = 1.5, 1.5\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])\n            self.velocities[i] = 0.9 * w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.8)  # Adjusted mutation range\n        CR = 0.5  # Adjusted crossover rate\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Enhanced PSO with Adaptive Mutation and Dynamic Neighborhood Size for efficient exploration and exploitation balance.", "configspace": "", "generation": 98, "fitness": 0.29341017947673903, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.8378917296490596, 0.8250277937442579, 0.8145520418811449, 0.8118177995249392, 0.8074305563105943, 0.8217362367294498, 0.8172595477191742, 0.8164665215968827, 0.8133901807860386, 0.6800626268116678, 0.6516856724552462, 0.6497500446223199, 0.674368031173747, 0.6442900684827657, 0.6669635658188491, 0.6704255297052586, 0.6704361115918361, 0.6825738135158664, 0.15432112886511462, 0.17060192835482701, 0.16377409150883193, 0.16903942799216043, 0.15345910497401072, 0.13040470693809914, 0.15535503257560446, 0.13040464720439182, 0.3070742622352235, 0.12964075560533017, 0.1335576239715065, 0.10557472865194195, 0.09668735569477027, 0.14075429162322584, 0.1328180427579544, 0.12814269864016026, 0.1259355522006843, 0.11998108232888283, 0.9624128385334686, 0.9718199820338345, 0.9709550032473963, 0.9615976803431325, 0.9667655154074294, 0.9724600370291996, 0.9640194000619865, 0.9706274961837245, 0.9646919159644595, 0.516549029574461, 0.4149374105231527, 0.43920055247828294, 0.48889520581820667, 0.4359873134749592, 0.459650933606117, 0.5114860792572758, 0.46892960764555125, 0.25916554021629834, 0.36552558978400096, 0.3115994730331475, 0.22041303382106037, 0.26845222455849815, 0.20559913423860665, 0.21091609526479982, 0.2197808774461827, 0.6858269565292503, 0.22653891792926195, 0.14468336344628607, 0.12442578903162682, 0.1781309108689254, 0.1502574550497855, 0.1521573969711797, 0.14812973008764896, 0.15219932459259622, 0.1563572950080927, 0.14420226637709743, 0.18908598610861005, 0.15284089815057578, 0.11943545641876285, 0.16037104516032707, 0.13446709728000972, 0.15458415189748953, 0.1635537043165023, 0.1715165663782009, 0.15920689376013597, 0.023908452560216342, 0.0, 0.0, 0.0, 0.0, 0.05013997289480321, 0.01423863596985031, 0.0017109989985685248, 0.020261194578836905, 0.0671654303792546, 0.04749389058216258, 0.0488055950859565, 0.08308103752600293, 0.024643947772276076, 0.050050296859699084, 0.08205179385384331, 0.05404465893225585, 0.056630980609263526, 0.11782828034251247, 0.058082235099354174, 0.07599974529840836, 0.0653800001356527, 0.08421627534397635, 0.17197346417035664, 0.12092920385910844, 0.20324550533102825, 0.10811447549641073, 0.14169655561106687, 0.10833787625206914, 0.13291694797271825, 0.16545574684576858, 0.1246534027988706, 0.12548782924572421, 0.20417826172047704, 0.18544181454516262, 0.07873759346154907, 0.4929792397869698, 0.49147648774211616, 0.5233084408978022, 0.5483156927166617, 0.5389870539233577, 0.502682967595099, 0.58050576698503, 0.5111446116859728, 0.5249142113361085, 0.10999928150960037, 0.11814875547532433, 0.12429897873903284, 0.10059093808870911, 0.10502241615367314, 0.09788966524120879, 0.09515353735525534, 0.1259946793804425, 0.14097419180960968, 0.16402671389062928, 0.17734601731521105, 0.14223670705218938, 0.15697115685520457, 0.15854496029724907, 0.16987104607068648, 0.22798284911216782, 0.14556225794053335, 0.13107107900745618, 0.2992586049023276, 0.37670789809503635, 0.40217566634815316, 0.43685577192905434, 0.4190158871094307, 0.3745312325127931, 0.5703045637729678, 0.44279334282620386, 0.45772703508546475, 0.37916180257812726, 0.2267150770510309, 0.27858358523673776, 0.35011766447337767, 0.22087556832298882, 0.3416616438347382, 0.2648754618652711, 0.3380057787786567, 0.31222807246894846, 0.21705711318686194, 0.19792985334755964, 0.1955735617442126, 0.20070006452677647, 0.22778641287056922, 0.1837061719739682, 0.1913902002814365, 0.19911462089169552, 0.21910290509527774, 0.19580565147782092, 0.6178014238792808, 0.21491845890171957, 0.21555269615629158, 0.19239562012621558, 0.550018138306807, 0.2093023193586505, 0.1955087884781671, 0.20501428235088437, 0.7368576656373547, 0.7632688339004006, 0.15096142964435344, 0.17826592075091607, 0.19856770827351378, 0.1895326146965548, 0.1646811398770578, 0.167589854637071, 0.7692680554106883, 0.4716402304579679, 0.3990510325936407, 0.20596456290759768, 0.20450819919887242, 0.1976559135680206, 0.20635505993531122, 0.36903880759756136, 0.3066732690456063, 0.15380988247781424, 0.16882875310949075, 0.1872912124972288, 0.1793409155758796, 0.18274607037911683, 0.1800243828205641, 0.18095596998802277, 0.17648583228266268, 0.18063551762428853, 0.17237739652034356, 0.0791028912869367, 0.09227939266630636, 0.07861598832803052, 0.08118648910153281, 0.07877136692708209, 0.06970242817805306, 0.0916764509854866, 0.09222575731817784, 0.0734235173846991]}, "mutation_prompt": null}
{"id": "09e2e742-7689-404e-8a54-816856816f84", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particles = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.pbest = self.particles.copy() \n        self.pbest_scores = np.full(self.swarm_size, float('inf'))\n        self.gbest = None\n        self.gbest_score = float('inf')\n        self.fes = 0\n        self.neighborhood = [np.random.choice(self.swarm_size, 5, replace=False) for _ in range(self.swarm_size)]\n\n    def __call__(self, func):\n        while self.fes < self.budget:\n            for i in range(self.swarm_size):\n                if self.fes >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.fes += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.particles[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.particles[i]\n            \n            self.update_particles(func)\n\n        return self.gbest\n\n    def update_particles(self, func):\n        w = 0.4 + 0.5 * (1 - self.fes / self.budget)  # Improved adaptive inertia weight\n        c1, c2 = 1.7, 1.7  # Balanced cognitive and social components\n        for i in range(self.swarm_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            cognitive = c1 * r1 * (self.pbest[i] - self.particles[i])\n            local_best = min(self.neighborhood[i], key=lambda idx: self.pbest_scores[idx])\n            social = c2 * r2 * (self.pbest[local_best] - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive + social\n            self.particles[i] = self.particles[i] + self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lb, self.ub)\n\n            if self.fes < self.budget:\n                self.particles[i] = self.adaptive_mutation(func, self.particles[i])\n                self.fes += 1\n\n    def adaptive_mutation(self, func, target):\n        F = np.random.uniform(0.5, 0.8)  # Fine-tuned mutation range\n        CR = 0.6  # Adjusted crossover rate for diversity\n        idxs = np.random.choice(self.swarm_size, 3, replace=False)\n        a, b, c = self.particles[idxs]\n        mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n        trial = np.copy(target)\n\n        for j in range(self.dim):\n            if np.random.rand() < CR:\n                trial[j] = mutant[j]\n\n        trial_score = func(trial)\n        target_score = func(target)\n\n        self.fes += 2\n        return trial if trial_score < target_score else target", "name": "HybridPSODE", "description": "Improved Hybrid PSO with Adaptive Inertia and Enhanced Mutation for better exploration-exploitation balance and diversity.", "configspace": "", "generation": 99, "fitness": 0.17947821899222693, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "490bc1dc-c70a-447a-a1c8-8562f3839659", "metadata": {"aucs": [0.48099015265428025, 0.4369100952743419, 0.44826140212397225, 0.4835416718065837, 0.4519580452278861, 0.48711807935147566, 0.4491466574740598, 0.42725633961511644, 0.49088649211720836, 0.15674384043082068, 0.14675114009897738, 0.12651228743700849, 0.12960877992296538, 0.13517910485827522, 0.1555859429901113, 0.17248682826188, 0.16169745769595756, 0.13069343083762908, 0.07624479057035682, 0.08579617134775308, 0.07453692498557685, 0.07886294834198182, 0.07021735191872613, 0.08361176571453655, 0.07201577330991116, 0.08366762130024619, 0.11195334430574588, 0.06737206586237732, 0.06508234389729273, 0.06306049964318738, 0.078422928479142, 0.06308014766284453, 0.06529915041785095, 0.06334712041623569, 0.06991112040395042, 0.061029072187540945, 0.9783211395618311, 0.9760063759704123, 0.9778033909533672, 0.9709342828336733, 0.9803680921932462, 0.9717377900222832, 0.978011591436241, 0.9797883586308813, 0.9699635187802423, 0.1424722108847325, 0.05685528850637056, 0.15887374165681756, 0.17582638084857083, 0.1637700142050904, 0.16009827489982453, 0.08315971905302744, 0.1647016646399455, 0.16087174731277065, 0.17634369265348182, 0.19333566890741583, 0.14773698613698094, 0.19552009988215135, 0.1802219053252958, 0.16836759093995135, 0.17763080709360934, 0.1888460046417505, 0.19401866467963302, 0.09253963027239587, 0.1074363185887236, 0.08818872645431985, 0.09764637855078306, 0.10365735206347126, 0.07065506996722137, 0.09380212549296085, 0.09928815048752382, 0.10966850493810565, 0.050057319421774826, 0.0403390407399129, 0.08869319491359096, 0.08654077954936146, 0.11397738747460429, 0.10055604495038861, 0.10966647699392085, 0.08031815012429411, 0.08243792373369285, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03801612476420835, 0.05040583860393488, 0.038625245764995264, 0.014795966470674049, 0.0, 0.003368160808231324, 0.033969356305967424, 0.04311259133989076, 0.041058578737956264, 0.011573789946873192, 0.02238424169934805, 0.00508849102871245, 0.03458615914676888, 0.022530142129890685, 0.0, 0.01949663676375224, 0.03167675289169347, 0.0, 0.03807820122178274, 0.045467254581643246, 0.055959290097369, 0.046223494547702804, 0.07396409864802733, 0.05431617072218464, 0.041432427962081464, 0.0444880628202432, 0.07230226882512891, 0.36317495097037766, 0.3496737917787551, 0.35336536981869227, 0.36110158617134125, 0.3644833349842834, 0.37585018951896176, 0.35851031805974365, 0.38253157314162767, 0.36033232322370246, 0.07910157939473883, 0.06988289985144625, 0.06562170095642017, 0.0812252704235249, 0.06710056946074872, 0.08861181887089764, 0.06924614307007937, 0.0753206933642454, 0.08252178354760076, 0.13863605312146288, 0.13611418262265074, 0.17763809356163418, 0.12241254055809347, 0.1835872724760771, 0.11460357802247689, 0.1449315185875666, 0.14512763348966584, 0.1361103477125365, 0.2167926802547211, 0.24627378891815355, 0.21867333303836667, 0.2173340467738073, 0.22687247000957222, 0.23471539740295755, 0.2378630584258732, 0.2448453396494331, 0.23413140864206727, 0.14724820203452305, 0.17636365341687377, 0.17999670571423065, 0.1524182832080767, 0.14474318599772085, 0.15984677249224388, 0.15452322219649217, 0.1771686526692523, 0.17913135840558747, 0.1711794984334425, 0.17460975867765505, 0.173733612649832, 0.1630780001694122, 0.17959245037765337, 0.17290228080941816, 0.16091456453332598, 0.16699085535953384, 0.1760245098515445, 0.1845524665157412, 0.17221435404917262, 0.1632229489466288, 0.1800046362618637, 0.17654242489374705, 0.17916741227361632, 0.16277391122627016, 0.16129547105153375, 0.16242128969528313, 0.33550789380350776, 0.43606137773853104, 0.1469656570475354, 0.17051517247516856, 0.18937802695433348, 0.25356978696275023, 0.22580196129603602, 0.1775129319748452, 0.17161447935483065, 0.15064363277430604, 0.15927988348735322, 0.16228347852948433, 0.15573054137854048, 0.17086689474515493, 0.17984118547537187, 0.19753884293358126, 0.2333719943900493, 0.19562557555078564, 0.1764864782570752, 0.1662319001821534, 0.17931325071620252, 0.17799155768257546, 0.17345557184408866, 0.17584518037012908, 0.19600192975253206, 0.17873641291534625, 0.20536644852833597, 0.05962782290831348, 0.06380241019645272, 0.0688014373243172, 0.0720959506972274, 0.05931708879136399, 0.05747937383142687, 0.06424076100837683, 0.06564257108539917, 0.06295890543304872]}, "mutation_prompt": null}
