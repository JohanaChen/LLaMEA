{"id": "cd4e9f52-d130-4648-a320-66dd48d378b3", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                mutant = x0 + self.F * (x1 - x2)\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1)\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "A hybrid differential evolution with adaptive local search incorporating self-adaptive mutation for improved global and local exploration.", "configspace": "", "generation": 0, "fitness": 0.39813096861256886, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.25.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8175432625202388, 0.7976349314602718, 0.8025679173870077, 0.8200003912016613, 0.8076102078696108, 0.823923924584259, 0.8111895822367194, 0.823056013535565, 0.8132014990873571, 0.624903955722756, 0.6627096933735875, 0.6509867357125592, 0.647961063163156, 0.6313464994868415, 0.6793939271123389, 0.6423889735763595, 0.6377547453668108, 0.6597671425642304, 0.12751648550783956, 0.14589364545241001, 0.14770598331502316, 0.15892548461491862, 0.1741163294464967, 0.12651995838689112, 0.15623226391779121, 0.14164681829241277, 0.1413803643287349, 0.11945621260039585, 0.12805986307802664, 0.1264581675102947, 0.15451487546801868, 0.12037526614935756, 0.11502894977726008, 0.12364136815998772, 0.11164101309014529, 0.11618902820308374, 0.9539624697842929, 0.9111056321513784, 0.9253189138860901, 0.885215751083883, 0.9611022168154046, 0.903945318962894, 0.9311592088591369, 0.9496507101620795, 0.9097819830413614, 0.4887173074683082, 0.47895406522521766, 0.5021194666500148, 0.4433838219725631, 0.4480899072438952, 0.4505128002848241, 0.5087271584856348, 0.5213705660553957, 0.48838508549466253, 0.7501515064020806, 0.7672787487874604, 0.759703476965699, 0.7970504490129127, 0.788938523641497, 0.7759968380955693, 0.7499900933641042, 0.7973030833414856, 0.7538090685228369, 0.30322069800554696, 0.19165337060619136, 0.48850473765186186, 0.43294096091603673, 0.30580755337074705, 0.29643024685813213, 0.23747109729678972, 0.2246685959846948, 0.36366374005946556, 0.3859030963034302, 0.13921134298849336, 0.3577257879924244, 0.29581966840522, 0.3787789863394533, 0.2090676993231314, 0.3212071722345644, 0.19545662049611934, 0.18632815438900896, 0.39103630734759576, 0.3627698799788307, 0.3810547384435934, 0.4088632172766884, 0.3627526912904344, 0.3704424854904176, 0.39576005754206034, 0.38982769304708387, 0.3865295455716281, 0.590391377864664, 0.5091325225512068, 0.5660518954797116, 0.57751200022694, 0.45070805708242156, 0.4554458570703841, 0.5252363421218555, 0.5458323809599215, 0.5420990635550621, 0.16511509950859105, 0.2484827197100875, 0.10223653459632664, 0.2703401161459731, 0.2192525359726003, 0.2328099493333805, 0.1199172199000017, 0.20543016715274276, 0.2126966670282685, 0.3368148100056043, 0.3040141748809011, 0.3138543178481972, 0.32088910127647774, 0.36344117094915696, 0.3510835336048481, 0.33198351629668177, 0.33204953336250187, 0.3031514715269177, 0.709191308007491, 0.7075456538795258, 0.7242918387216875, 0.6883386549169045, 0.6903344809601355, 0.7229589945492882, 0.7288882100353448, 0.6968035376980786, 0.6965617769715775, 0.11371247844023513, 0.12040568223296921, 0.11120020114579565, 0.13713337160767713, 0.12071176036964282, 0.17179601482797713, 0.1563299054836096, 0.11927554583448707, 0.1326531140082432, 0.17730058530707304, 0.2777368087111085, 0.19729328692540216, 0.18811910386240305, 0.1866055028322774, 0.13875263240899005, 0.18375487517417421, 0.16470699443551462, 0.15133845635701348, 0.4151397542639118, 0.416760818392241, 0.394184713457039, 0.40822962209981384, 0.39745374513905396, 0.4185176816011048, 0.44330120140245444, 0.45007929203171515, 0.42286510719036463, 0.3097398971252592, 0.3007489209341415, 0.32694014004932437, 0.3116370276617687, 0.2904787139061247, 0.34812547256819104, 0.3024720057780952, 0.3420877342997696, 0.3270567377310678, 0.2536726630496916, 0.19768557653854502, 0.2382670150938483, 0.20728753055738114, 0.21349686953397473, 0.20457617735529732, 0.22061914326006005, 0.19924421760727296, 0.22554666453924643, 0.2658414237587844, 0.24559528460004498, 0.1938772382678816, 0.22026870578553848, 0.2061052386662895, 0.2904536637738373, 0.25803680392854733, 0.35431987073293836, 0.20210454873841, 0.16245482184254778, 0.16016237811243317, 0.7549125305696276, 0.7140956658143089, 0.8473796682309795, 0.8645292158727911, 0.6284635325503236, 0.6121185930527291, 0.6647650926902203, 0.6977674196278133, 0.5882331798737497, 0.8052194099993895, 0.20097542279102476, 0.16448543512031633, 0.1661712247850241, 0.8079775297246469, 0.20928627008752176, 0.7202158264599363, 0.20476540115644948, 0.19763937791222175, 0.20504676412493672, 0.22079565889919095, 0.20780525341615386, 0.19780880352080754, 0.20827392861688188, 0.21909997316105445, 0.22167456246458117, 0.10192505260482465, 0.09492436329096476, 0.10415253358129029, 0.09789601007027326, 0.08478457881375467, 0.10053148290102143, 0.09422963598163281, 0.08663896114341318, 0.09269066808420012]}, "mutation_prompt": null}
{"id": "e4922eba-fb99-4328-a522-67b7ee7f0785", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = 0.4 + 0.2 * np.random.rand()\n                mutant = x0 + F_dynamic * (x1 - x2)\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                CR_dynamic = self.CR if np.random.rand() < 0.5 else 1 - self.CR\n                crossover = np.random.rand(self.dim) < CR_dynamic\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                perturbation = np.random.normal(0, min(0.1, 0.5 * abs(best_sol[j])))\n                local_sol[j] += perturbation\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Hybrid DE with dynamic crossover and adaptive mutation for improved convergence and exploration.", "configspace": "", "generation": 1, "fitness": 0.3060092394803013, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.21.", "error": "", "parent_id": "cd4e9f52-d130-4648-a320-66dd48d378b3", "metadata": {"aucs": [0.6996659056511896, 0.7385488374716255, 0.7247448637784305, 0.7064430653352953, 0.7724301965765568, 0.737387958593243, 0.7106048197079773, 0.7328606944422335, 0.755138381715369, 0.4131293292518493, 0.45563117063988134, 0.4596608511041732, 0.416960970478811, 0.4359909052417409, 0.4327591230511547, 0.49976628323685335, 0.41957742080077465, 0.461049664218674, 0.15302055245085922, 0.2182223517819739, 0.13947222667392434, 0.19078956399690217, 0.1466742348443737, 0.12794951986033243, 0.1962406998681575, 0.15151061073223082, 0.1469523474530532, 0.13358185341168283, 0.1204068590079389, 0.14965730382524856, 0.13189493665149676, 0.13153224935038488, 0.12057960306322324, 0.15955380042759137, 0.13369336278668886, 0.14712827470698286, 0.8920642482513279, 0.9000630825914238, 0.9011327155741727, 0.9134668289084877, 0.8891311525568399, 0.8843045956920211, 0.954271790415758, 0.936037953697369, 0.8969358567624198, 0.30962197400743463, 0.35434718964014467, 0.30556671334142393, 0.3005556259324784, 0.3237305390794616, 0.35625490438107477, 0.32049074075371264, 0.3249486598467184, 0.31676266739282133, 0.5689573170800835, 0.6392996326029112, 0.5251420884841022, 0.6231702698961581, 0.6649945857016255, 0.5722526005476691, 0.7008731285495273, 0.6491719224006234, 0.5702051973250244, 0.2278984646998502, 0.2767010505518338, 0.30179192903151775, 0.20725958364801556, 0.1559290367441074, 0.2034549963206489, 0.20697464774235874, 0.21980382184187375, 0.24874997102795338, 0.13153504885185308, 0.12440424377231607, 0.14632784646046526, 0.22030586300081934, 0.15736849122729912, 0.24887697267281184, 0.2069951890480769, 0.1422878778855502, 0.1985658703189327, 0.13694581240885617, 0.13695080913615187, 0.11427435073434022, 0.12313497207710367, 0.15458195796051333, 0.10346667233827156, 0.13968455379954825, 0.19411768080702718, 0.13919531586811595, 0.23024758572810955, 0.25861218738238856, 0.2653947418668735, 0.23361010205685473, 0.2804739953566965, 0.2435995297475383, 0.3214149376220865, 0.29869442173429883, 0.26269484048075487, 0.10403326723681072, 0.06921125778951775, 0.082478354723447, 0.08252037649129051, 0.09197291607726144, 0.09734296164596812, 0.10963946469651109, 0.11344981097185625, 0.11121887392281238, 0.18377941602456271, 0.19372258630673578, 0.206787490424181, 0.2155666553156178, 0.20799070174664536, 0.19162868883161788, 0.17574777619548076, 0.17146745147946096, 0.19298006236310128, 0.5306597289871973, 0.5194302218033121, 0.5692892794039583, 0.5202047375200491, 0.5233858030105967, 0.525516282009669, 0.5372249505868497, 0.5183844798514183, 0.5280743581519972, 0.11502644880476676, 0.11599733471636642, 0.13273237465631826, 0.11376000474855241, 0.13655632136041673, 0.10654788080649613, 0.13237407849000882, 0.1729369836874004, 0.13116093032378684, 0.1813265166451985, 0.18831208680857592, 0.19814703754416718, 0.16736637557489353, 0.1736848550570096, 0.14825089526939994, 0.18550056916533875, 0.16429045050715085, 0.15387735004380776, 0.28561328395672936, 0.31351018386393403, 0.3346245728506775, 0.2761056269367016, 0.334250933553069, 0.31086841573161283, 0.3148817568554849, 0.3295187272055743, 0.3355142256660717, 0.23590968260022005, 0.24998028994291221, 0.25329536157682964, 0.24208833513255146, 0.2566852088963726, 0.21903879360159562, 0.2546071227953286, 0.24527257793683743, 0.2394710968808479, 0.23682189550695043, 0.19448731947248987, 0.18787735915801218, 0.19730624512584438, 0.21814856801534388, 0.21890090376338067, 0.19950501030178291, 0.2130853774806568, 0.23288483820020134, 0.23802188879906605, 0.2510975777746799, 0.20713994251205425, 0.28874085482608114, 0.20667315241444684, 0.20167448102188767, 0.22235008010003854, 0.22002083525271643, 0.3373237131227994, 0.19984267671986655, 0.6791440865686512, 0.19652407092527424, 0.6862265141819226, 0.5951777117515751, 0.17680489406389166, 0.5771029554815456, 0.76031553243991, 0.5143503264092754, 0.5321474047334496, 0.19936972300908795, 0.19802882939563637, 0.20073400023104748, 0.16373666617760751, 0.3594735970283677, 0.4753322371700123, 0.2029960640783185, 0.4984712568535934, 0.18909925492242252, 0.18921915190913086, 0.2042280633033592, 0.19078434793067367, 0.19280288257805567, 0.2218416097315551, 0.20395413081295966, 0.21593855870870515, 0.20198002683808414, 0.08027268134735821, 0.08825877831509898, 0.07965069029442151, 0.08299033886713847, 0.08226639251864509, 0.07702597014568324, 0.09747159492095214, 0.09052544048353539, 0.07176443473539262]}, "mutation_prompt": null}
{"id": "b1273d78-83dc-4106-937b-4b65862642a2", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            diversity = np.std(pop, axis=0).mean()  # Measure diversity\n            if diversity < 1.0:  # Dynamically adjust F and CR\n                self.F = 0.7\n                self.CR = 0.8\n\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                mutant = x0 + self.F * (x1 - x2)\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1)\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Incorporating a dynamic adaptation of F and CR based on population diversity to improve convergence.", "configspace": "", "generation": 2, "fitness": 0.3213142250433638, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.23.", "error": "", "parent_id": "cd4e9f52-d130-4648-a320-66dd48d378b3", "metadata": {"aucs": [0.7550196724234995, 0.754386799896442, 0.7364039987735871, 0.748066262968939, 0.7629422528714673, 0.758159173784026, 0.7353166503569947, 0.7441343109303029, 0.7472481141472187, 0.5145758097945943, 0.5361026473033215, 0.5242784526595828, 0.5066139361272237, 0.5195728095884768, 0.5404598656519228, 0.5106354343697749, 0.5024376190353785, 0.5282227057965592, 0.12294648435338729, 0.14496826905769378, 0.14496821276814753, 0.1732512458441694, 0.16289147413451066, 0.1338462623328418, 0.10804560896148763, 0.1337393296137016, 0.13969859078869462, 0.13418731594039257, 0.10698879348582924, 0.13348823124496068, 0.12225697428119309, 0.11258955416335881, 0.11390491000014824, 0.11911311341038855, 0.12536433956836113, 0.10615652718721047, 0.9539624697842929, 0.9227575358846065, 0.9253189138860901, 0.9039197153352652, 0.9611022168154046, 0.9239964774847192, 0.9311592088591369, 0.9450313563476678, 0.9051670660951263, 0.33740874786920094, 0.33314466545196086, 0.3626285558843756, 0.32972372186052934, 0.3664041668658743, 0.3385827573069864, 0.32623648997169263, 0.35590636270207643, 0.3246626437794631, 0.6244666526467104, 0.5383969825866599, 0.5838774543247686, 0.5809082344298658, 0.6387779333014142, 0.6662060805764555, 0.5944557609869696, 0.5994398785246304, 0.5359873044072461, 0.21556605049305655, 0.21117547967433548, 0.3137921729857177, 0.26185005065802325, 0.20872225617028628, 0.22323806669864388, 0.24946871514324165, 0.21941880369739797, 0.28039764850774285, 0.2799985723362187, 0.21678241617504057, 0.1782503669779244, 0.21243672268620917, 0.24397836357158786, 0.21830362718209106, 0.25365349592745623, 0.20399696866313655, 0.2212932622467666, 0.14503112330728185, 0.16562601755656126, 0.17238641130021748, 0.1326290517732166, 0.13231630256379834, 0.1635031878833907, 0.21323698093311816, 0.2090271502766904, 0.1985770725321928, 0.32626868557920874, 0.2841054158100603, 0.3315144623945623, 0.31742298959077764, 0.2772989568210459, 0.23989969345782325, 0.3049346816438607, 0.30574029037224715, 0.3505750487243968, 0.03259182357367141, 0.06653757402207772, 0.0600720991201088, 0.074107205522569, 0.07056144709481582, 0.034202852575967, 0.10827697864553432, 0.13146837561516145, 0.0856407611647092, 0.17107072529421363, 0.17797752242075637, 0.17849717038846336, 0.17189549642229518, 0.17806205666469066, 0.16757202862364118, 0.1600092239877966, 0.16422125093551854, 0.1746692633888699, 0.5270999968913492, 0.5240674846426985, 0.5151941839931736, 0.5002692497773714, 0.5300662447795833, 0.5131578242789835, 0.5231179254650583, 0.5182427842497405, 0.5232735517418481, 0.11009886462653684, 0.13098425250347567, 0.11120020114579565, 0.14020299821379467, 0.12071176036964282, 0.12488277700833372, 0.1563299054836096, 0.10921607736350503, 0.12879230089735316, 0.17730058530707304, 0.29475850766147993, 0.19729328692540216, 0.18811910386240305, 0.1866055028322774, 0.13875263240899005, 0.18375487517417421, 0.1641682956552628, 0.15133845635701348, 0.3230437226818118, 0.3343230185561775, 0.3155792086218374, 0.3050086116709301, 0.30254910891000686, 0.3329372521956634, 0.34707795388253604, 0.3399473491365945, 0.35424501830028443, 0.23102886714178716, 0.23169843578354898, 0.2401398998791776, 0.25041049325335474, 0.2457984432893442, 0.2809943782790326, 0.2510186319440957, 0.2717130913129392, 0.2645203138439066, 0.2536726630496916, 0.19768557653854502, 0.2382670150938483, 0.20728753055738114, 0.21349686953397473, 0.20457617735529732, 0.22061914326006005, 0.19924421760727296, 0.22554666453924643, 0.23628081362192965, 0.20700833863854384, 0.23772918165246903, 0.20722299525468701, 0.200780707876978, 0.20256818387953257, 0.21687419960043886, 0.21172689703419278, 0.20509908674223554, 0.16245479182756184, 0.16015947428484456, 0.7228036103952307, 0.6762849676956926, 0.8302411403014156, 0.82862969405022, 0.6103835701358076, 0.5855261553795272, 0.638257140824432, 0.6090581273556772, 0.20753656047613367, 0.6685198061325739, 0.20092753902243032, 0.16448485992895734, 0.16617057169215754, 0.7171021250837395, 0.20928545942114019, 0.6709547857930565, 0.20476540115644948, 0.19763937791222175, 0.20504676412493672, 0.22079565889919095, 0.20780525341615386, 0.19780880352080754, 0.20827392861688188, 0.21909997316105445, 0.22167456246458117, 0.09067924368296632, 0.09492436329096476, 0.10415253358129029, 0.09789601007027326, 0.08972451567014283, 0.08682361295965202, 0.09422963598163281, 0.08188070747613818, 0.09269066808420012]}, "mutation_prompt": null}
{"id": "661695a1-ba81-4bbd-a072-7cac35780446", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 3, "fitness": 0.4027485689355989, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.25.", "error": "", "parent_id": "cd4e9f52-d130-4648-a320-66dd48d378b3", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "3c9d8cf1-72d3-470f-8051-c20b7a76c744", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2) + np.random.normal(0, 0.1, self.dim)  # Gaussian mutation\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced DE with Adaptive Local Search and Gaussian Mutation for balancing exploration and exploitation with dynamic adjustments.", "configspace": "", "generation": 4, "fitness": 0.27050386473449034, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.7064713497776846, 0.6573133232462531, 0.6732799285037074, 0.691752234878197, 0.672372643074064, 0.6738592686758941, 0.7263308760346435, 0.6506890825323453, 0.6533790757787297, 0.07843702315803147, 0.17603087146675955, 0.20222327653229466, 0.19810870817783366, 0.2226107908865158, 0.10373535909128773, 0.19634844032806809, 0.22933639234550052, 0.19557868165871428, 0.1401958378335637, 0.12808309933408923, 0.123165575165476, 0.1515843274076849, 0.12302225564350244, 0.15959322313735524, 0.14470094133837552, 0.1306226532900846, 0.11950802112848524, 0.12925121689072605, 0.10927207283424611, 0.11529060578769201, 0.11898779804699566, 0.11319181014042501, 0.09763496223182633, 0.12711598227806242, 0.13280479916724885, 0.12495083937944551, 0.912815995401356, 0.9329562675123292, 0.9229085638404368, 0.9024763182935327, 0.957904158921097, 0.9374150406773909, 0.9191605293950225, 0.8861806908896039, 0.9247080045472691, 0.3222506575272456, 0.33358983038567436, 0.3394682796985541, 0.36600134042412447, 0.3483560629482061, 0.33670973127091397, 0.3073226821941417, 0.32412694776648376, 0.330747197058043, 0.43491499007919676, 0.3626463860360797, 0.3522795520354707, 0.5307961591756264, 0.5755630940364063, 0.35836248573949236, 0.5383811044487006, 0.3575460967311128, 0.35962887314708514, 0.16387878359659025, 0.16363033960950557, 0.16915707390916845, 0.16852739691668506, 0.16368354270723262, 0.17577958415852113, 0.1670437289127169, 0.23054519000766693, 0.1658570295924544, 0.18607330308021353, 0.30651456279173106, 0.17189271361518643, 0.17203404149842338, 0.2037411856940713, 0.1901902970166779, 0.2012640929318622, 0.15422442779552226, 0.1729524558672716, 0.0497116267728388, 0.03909982857221561, 0.05026933430874303, 0.04063603891284495, 0.03830064028407654, 0.05492700443504672, 0.08897839046403566, 0.042458772321037785, 0.021187107561848606, 0.10692874281358711, 0.12954672450004256, 0.17589691605351732, 0.09893735462397268, 0.12415021791927539, 0.1049517505107116, 0.12212392851618936, 0.13985769030586748, 0.11485332842701024, 0.16089278564529452, 0.13533462360913995, 0.03636312261955177, 0.08844906271722774, 0.09089514424261103, 0.09740125360115148, 0.06979316987688888, 0.05338418100861386, 0.09651322029752596, 0.13908999337980554, 0.12752275795017054, 0.15324042295401652, 0.12745279363101802, 0.1438225889848651, 0.1978470170437836, 0.2194003934061256, 0.20396088632276654, 0.1821549325766586, 0.4389691061428219, 0.4107131895630771, 0.4372602295351966, 0.4472657502909533, 0.42803048505449415, 0.4292149279027263, 0.45298467125767117, 0.4434825528502765, 0.46621426395385834, 0.12638568627738755, 0.13000424382742481, 0.10981589257554902, 0.18768676938017215, 0.11051550954799749, 0.15567374704052905, 0.12587364680216684, 0.12105900996379093, 0.17249513045800613, 0.24321587519564591, 0.24956548849270443, 0.17192451152752963, 0.1609352287761331, 0.13855465618630847, 0.1438935442469148, 0.2346978678152457, 0.19485753192194566, 0.1518101909548153, 0.2902590150319203, 0.299782695715905, 0.30680194807186567, 0.2932908523322131, 0.29783257492664605, 0.3242679924092664, 0.355662628440116, 0.34953112608718273, 0.3018166787629546, 0.2539683363027724, 0.24939412709798459, 0.23254925332674004, 0.24932884854318382, 0.235386255526569, 0.22048058392909653, 0.2661981887715751, 0.282138493706265, 0.2575062265302491, 0.19806825188106014, 0.23150040040485897, 0.19693553792232876, 0.1959839656189466, 0.20562223060036333, 0.2885327914797835, 0.2596970544854543, 0.2105834061525893, 0.22747821213717467, 0.2292185583741465, 0.2203355002562547, 0.1957221480379765, 0.21474020752622447, 0.2237601467416881, 0.20532365058537339, 0.1931656811242407, 0.20224933380696875, 0.1996869331814357, 0.7077521623836378, 0.6640749304849927, 0.15252514212794865, 0.1567849538311672, 0.47119154906603467, 0.18767732856079034, 0.1832152347338195, 0.7568479177833063, 0.7792638971669452, 0.489026503213838, 0.489934592009895, 0.6386852244804259, 0.199715256394153, 0.2098102024322469, 0.5822211003103137, 0.4767323967031074, 0.2100915460198136, 0.20775585421357323, 0.1889862873771041, 0.21158535088370545, 0.18762097969051061, 0.20458053047864644, 0.21900997317851023, 0.18831534545802753, 0.23404721611142454, 0.19171632647085612, 0.21321520412927253, 0.10033370083778081, 0.08984781831161415, 0.09494924922410952, 0.07919588369812225, 0.08887340843539027, 0.08470810975458776, 0.09372158671475006, 0.09402455377476815, 0.08752403860002811]}, "mutation_prompt": null}
{"id": "1192a8e3-b0a1-4981-9b5e-cbe5cb8ddbf8", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "97d4148c-321c-44f5-94b1-fc385aed56ca", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "30d60d8d-a7b8-431d-a435-80ae5527b537", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "79de7a14-0837-4c44-8458-1694d52c1b0f", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "d80f7411-d0cb-47e7-9961-6fee48df3881", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "5f574f7d-8e44-45a8-8d7f-3219bcc00ab1", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "cce4f2ea-d4a3-4c46-a4d6-219e5326fb29", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "a6ee00b1-f838-456e-ad4d-a0461245025b", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "79c3d043-89de-49b0-bb01-e0f04f7b2ca5", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "aff3c23d-aeeb-417d-9c24-ecc2e1756b92", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation with adaptive F\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                F_adaptive = F_dynamic + 0.2 * np.random.rand()  # Adaptive mutation\n                mutant = x0 + F_adaptive * (x1 - x2)\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection with stochastic ranking\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < 0.1:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced DE with Stochastic Ranking and Adaptive Mutation for improved exploration-exploitation balance.", "configspace": "", "generation": 14, "fitness": 0.2654358127463457, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.20.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.6765373538406723, 0.7075861304812112, 0.728882626275197, 0.6960281723435716, 0.7076419852403933, 0.7062060434928781, 0.6620740362016925, 0.6971575941722885, 0.7058613938094875, 0.41486746339417213, 0.4943236520500005, 0.45623534049851133, 0.47362882707901033, 0.4051441349359016, 0.4541723351774297, 0.4563051628826146, 0.4395981407576972, 0.45854067390773334, 0.12574067084400598, 0.1508529246796052, 0.16785361532555398, 0.13931016992338485, 0.1408888705356498, 0.278224219984173, 0.1533706440398095, 0.11735405592767989, 0.12307586987790964, 0.12539048162245203, 0.11927298045308232, 0.1135773251854898, 0.12536381187439583, 0.13021459659244228, 0.11408011710784904, 0.14474979684240752, 0.10253211502528392, 0.11516550660765112, 0.864044818760244, 0.9255202353350722, 0.9089723261652951, 0.9094660455249597, 0.9315746191766666, 0.9301082198781474, 0.984244327544314, 0.9405159460837372, 0.9207299381984412, 0.31669727085970223, 0.29563038672890873, 0.2553624747999693, 0.33495861616472666, 0.2979120092405948, 0.2976198228974859, 0.3102734501889741, 0.3078186965193942, 0.3125370779257336, 0.44311215738022747, 0.43003061648110874, 0.30495923778369793, 0.5317900225880087, 0.4314166337847667, 0.32693761168556856, 0.4298689884889837, 0.29430812382463123, 0.5260066832472936, 0.20803355056021477, 0.2014646395616031, 0.2251249002003387, 0.263453854497008, 0.21628313185690073, 0.1699256097385825, 0.18830677686410469, 0.20104959785956256, 0.21024256622748838, 0.1798152840330517, 0.15665308880115625, 0.12425061953300232, 0.2014066213303085, 0.18867196473793724, 0.21596369591385056, 0.2073668897282379, 0.20351042298538036, 0.1892900245101663, 0.013655647652926928, 0.03244590097314726, 0.08583292225976202, 0.01360434774351793, 0.04322557777289726, 0.02848957212555947, 0.02337116793771843, 0.051220669029488075, 0.05256642329501793, 0.13249741263691472, 0.09631647220268369, 0.11680244663489303, 0.07819280864238576, 0.11467995134612252, 0.11961524460609763, 0.13596298113118632, 0.18797553709600578, 0.13401011299185772, 0.03985001524663989, 0.07434772566975478, 0.04103959429221993, 0.07511662007977249, 0.05237793367709909, 0.033387300030569556, 0.08146232916137763, 0.061229341452120556, 0.05824523434455697, 0.1651804354550379, 0.1365125629952525, 0.16947838243262758, 0.16959605030697245, 0.16726433281337483, 0.19015964043316724, 0.1646142397880085, 0.1492164450393948, 0.16414988962116528, 0.4894819011164725, 0.5223457302570791, 0.4903332866615363, 0.47980578201372415, 0.4795605934317425, 0.48103329073785595, 0.48456308703079976, 0.4866673661723674, 0.5092223129373327, 0.11429934893361027, 0.13343764673985337, 0.13320064241370255, 0.12568421285493714, 0.128589580382368, 0.11795246144970384, 0.11910753255722717, 0.14958797590197281, 0.12509298252028545, 0.16072756600789895, 0.3418775781692618, 0.18500458569520783, 0.1613678837378547, 0.19547657451941203, 0.18181045754607672, 0.16977969903568468, 0.21784787028267705, 0.18450612462490168, 0.3155409400337559, 0.3001415023890811, 0.31886134073679817, 0.287673608045811, 0.30271923454479566, 0.2837908660860595, 0.31240102990864993, 0.3293279152936964, 0.32112839796800696, 0.215265503573985, 0.23544978737538735, 0.22480669370068285, 0.22606176133785327, 0.18219505126576174, 0.21471485354629882, 0.2679666796546043, 0.22352393630030887, 0.2547771688971314, 0.2221597067977945, 0.21695547330456455, 0.2018658613118346, 0.21979471389919558, 0.26846110858101435, 0.19900892299694584, 0.23075252311675942, 0.2129668799127269, 0.18130401141667263, 0.18349206451445021, 0.20765024650143493, 0.21737212490855984, 0.1934608444063235, 0.20294702958471478, 0.20211129302627373, 0.29270826595282606, 0.19213572375845833, 0.19444792907532005, 0.16420437861763237, 0.5664137655191961, 0.22777188571418372, 0.1785409725706928, 0.18318876081157398, 0.1789046143531834, 0.23554417180006382, 0.16173893908586268, 0.23943936918199948, 0.206576974193037, 0.1677483296707012, 0.1727821678008884, 0.2542503535302988, 0.2961497039065797, 0.19353854019221395, 0.20124883682011885, 0.27275590341965095, 0.2081054323398105, 0.203262539538145, 0.19272593978536257, 0.19512078277874334, 0.19465477681447496, 0.21582186754607502, 0.2286267987262115, 0.2245512329258652, 0.1990425794200743, 0.19064011806986003, 0.07339909927875976, 0.08755329688155467, 0.08575245724003122, 0.08311354161373308, 0.0796503905149808, 0.08492218402036411, 0.08945274956187821, 0.08960446531883992, 0.08830086208981336]}, "mutation_prompt": null}
{"id": "3d5c8fe4-9164-4963-bf94-697cdd3ae782", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "1f0af979-60a7-448c-ad71-648eada26dfc", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "ee15d6f2-b98e-49d3-b449-d04c87362ac9", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "50423c00-9d72-446a-89b9-286db258cc4a", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "8d4ac55e-263a-4c3e-9090-00c77e979dd8", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "0a7f7203-cebc-49cc-8ada-66b0d09b3ca7", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "cfa07ca2-3fcb-4f2e-b5ac-b16b77d14493", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "c6d57370-9a85-4971-b2d3-3230071d2238", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "13cca5d2-40b9-4b9c-83c6-d9e08c158c91", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "fd9829fd-867e-46e8-a3b5-68e90cd1acf1", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "49c7e502-1b2f-42fa-bbee-0035a9d7ea71", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "c2bed70d-16ed-482d-a099-a4c7aded5a12", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        g_best = pop[np.argmin(fitness)]  # Find global best\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget) * np.random.rand()  # Added randomness\n                mutant = x0 + F_dynamic * (x1 - x2) + 0.1 * (g_best - pop[i])  # Swarm influenced\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Update global best\n            g_best = pop[np.argmin(fitness)]\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Hybrid Differential Evolution with Swarm Influenced Mutation for improved diversity and convergence.", "configspace": "", "generation": 26, "fitness": 0.3996795580689794, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.25.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8027257896521091, 0.8253075937286554, 0.8168847598371597, 0.8146552471782955, 0.8087865401919794, 0.8260918208029477, 0.7954978754907049, 0.8057297704381644, 0.8316573302719791, 0.6260789367334135, 0.648861473015095, 0.6357927997729221, 0.6345846123455119, 0.6435654186872557, 0.6476130911552354, 0.6327451399292923, 0.6405606524219727, 0.6524531984800238, 0.14052015660574801, 0.14449669202060667, 0.12389202159480883, 0.12706417834189254, 0.1382780334963274, 0.1147760382776627, 0.1409756900420387, 0.12239539840494995, 0.17666617467376766, 0.13938059075527376, 0.1290352735931205, 0.1310452694634734, 0.1256169802707463, 0.11938631629623342, 0.12497145578971958, 0.10609021608686287, 0.12736923320432103, 0.1359386821768147, 0.9334586137034105, 0.9621483218619555, 0.952251617097737, 0.9727515301665562, 0.9470304493711933, 0.9658478362130327, 0.9357071397492018, 0.9571268725197958, 0.9471655574111016, 0.4758757999931501, 0.5065071114069498, 0.5182184279959097, 0.5304586100929789, 0.5549471156345687, 0.4841276306097878, 0.5101695363402114, 0.4966744768371094, 0.5180005033787578, 0.74815632950435, 0.7728688312698462, 0.7766531537514629, 0.8358558745742368, 0.7796793733383354, 0.7916735976310201, 0.7544257716118323, 0.7673860492426834, 0.7824516433222897, 0.4231775762429151, 0.3597040523870849, 0.44942834132298604, 0.2888196356084022, 0.3406831689777803, 0.41290186587100475, 0.16839522901033888, 0.5123687957620896, 0.4361729944622812, 0.12376029787970855, 0.4223068925791048, 0.4931027462612767, 0.36098076956996406, 0.4790775744551724, 0.3485606511588476, 0.5576550681647587, 0.40116328921568256, 0.445280077729466, 0.35179300688801984, 0.3619259672281607, 0.3596618521043924, 0.45659581814829875, 0.3573313266137518, 0.3720480898226073, 0.37761634990188364, 0.38698284524791593, 0.42032335024764056, 0.5512463839035007, 0.5487185795837315, 0.5345075228925265, 0.5272813316073828, 0.5065807333243371, 0.5004042686302668, 0.5509087997751148, 0.5638713930112836, 0.5361877476384374, 0.0567696321805401, 0.07242062994969001, 0.1428212094067305, 0.30508837438470815, 0.30174641677201963, 0.2635042750885368, 0.1997622990354806, 0.1354173035070284, 0.22493121943379013, 0.3238332926152161, 0.323187705519582, 0.3081487430064841, 0.3417361908836457, 0.3161705732769837, 0.34301002727200225, 0.322599295371923, 0.30747002750205077, 0.3436584074813319, 0.7269051444180032, 0.7009719858209835, 0.7133070415996506, 0.69885745200457, 0.6974767086083822, 0.715997065468067, 0.7134025718042265, 0.6842306980606185, 0.7217569997914804, 0.12555044219996447, 0.12711160959077983, 0.14499785554770261, 0.108838117867467, 0.10859266995848216, 0.10945391834837448, 0.11064256176408271, 0.13003048812836493, 0.28123843359896794, 0.19132602321808578, 0.1750941449929584, 0.1633375056099583, 0.2105874267317296, 0.18935754086727752, 0.14611776219185157, 0.1807161636340061, 0.16344663170636342, 0.2015074472517172, 0.4071344244031718, 0.424899862367457, 0.383213129350622, 0.3836980328578671, 0.390391706314107, 0.38618345064811854, 0.421483805676216, 0.40715110690101297, 0.4537249095593525, 0.328871583451004, 0.3203121279177721, 0.32935400633113554, 0.3067678550919082, 0.30743625237404215, 0.3088399416720887, 0.3507635474612535, 0.34015928773510173, 0.3150862178423097, 0.27067846427152753, 0.20120797316949712, 0.2586862626909874, 0.22075809360625231, 0.21685202079426968, 0.1818430586918779, 0.22047574065617503, 0.21095894245441615, 0.22210029260838182, 0.21129200807160542, 0.27421463419655556, 0.21172884405226555, 0.4316094856897237, 0.20118096890048398, 0.19508366908161046, 0.20260280746541137, 0.22430840240995453, 0.19458142286400215, 0.3335493212229307, 0.18661756107031147, 0.1724541795566067, 0.7707348103597662, 0.5803445324323281, 0.7416353178442445, 0.5885993402547572, 0.5763752962425568, 0.7743772242139633, 0.7320938090785355, 0.4158269970830324, 0.22749385183060733, 0.6046389160777095, 0.2021494097102421, 0.4395934961842437, 0.25576789746455697, 0.20861466391522787, 0.23160997160015317, 0.20950892692483902, 0.21648857314073333, 0.19718764101637576, 0.24155675777121544, 0.21605923641565683, 0.18836163911519532, 0.22207250261282319, 0.21342420364820724, 0.22071044410100216, 0.08702968414275203, 0.08969369418091322, 0.08264263260626026, 0.09714567171217381, 0.0960577743108646, 0.0949873138861107, 0.08379186387625526, 0.09986236935727943, 0.12033202575305135]}, "mutation_prompt": null}
{"id": "7f372599-704c-4dfb-aa65-fc3d46a72a1c", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "a2f3b04e-4548-411c-ad93-1da48b391789", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "dd57a109-8cff-4859-a5ac-61b0c2098205", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "d04bad4b-15e1-43d3-a1ca-597c17bfe73f", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "6c446f46-a305-4cc9-99bb-30b5c6f8d087", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "ec7716a4-8b3e-4c78-b8e9-620e10c4d179", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + 0.5 * (np.min(fitness) / fitness[i])  # Fitness-based dynamic scaling\n                mutant = x0 + F_dynamic * (x1 - x2)\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Stochastic local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.05 * (1 - self.current_budget/self.budget))  # Reduced step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Fitness-Based Adaptive Control and Stochastic Local Search to improve convergence.", "configspace": "", "generation": 32, "fitness": 0.25785176722487413, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.20.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.5553342695522436, 0.6195646522131929, 0.5862218972612787, 0.63529887749267, 0.6891864724809551, 0.637970900727437, 0.5511782763322501, 0.6827524994164667, 0.6254981829930866, 0.32264505466994364, 0.2257780793904497, 0.21983823043181672, 0.25242971696195404, 0.27917857774229116, 0.28253884305454824, 0.2758135864579757, 0.234835627218966, 0.24641856395457185, 0.11294366766178843, 0.10630486759502544, 0.1158411511111408, 0.1443253441634229, 0.12624686170175503, 0.09873369682292255, 0.12050131780855644, 0.13716230503215432, 0.11974358011384245, 0.07416501065088965, 0.0798957536568603, 0.05781234224287457, 0.10944027004347012, 0.14944298401702183, 0.10908201376695159, 0.10184274189932963, 0.12553807531546557, 0.09673349576402634, 0.9552232459194225, 0.9522531729042099, 0.9475943297551659, 0.9578346167469995, 0.9625900401893919, 0.9705813856682713, 0.94060620680055, 0.9510393202560069, 0.9555682964913299, 0.3521253243601463, 0.3119284175147987, 0.2616184966187407, 0.2679784667665034, 0.3823572827212336, 0.2700072513029529, 0.3203690836441192, 0.25506150078428913, 0.34727258917508075, 0.26422920742609235, 0.30312904209026115, 0.262663042070184, 0.29995381374874275, 0.28522041162062883, 0.2901358733231093, 0.43143940355760213, 0.3768704089340572, 0.4586526053804372, 0.19693406473286545, 0.17315825889816883, 0.16539522420787, 0.121882149012986, 0.11066666028236283, 0.11786736267040265, 0.17554274831774253, 0.22075758306746163, 0.20135037070365036, 0.19215810563266056, 0.18662001765531078, 0.18853846078179848, 0.23449869098367726, 0.1895685085550467, 0.2027928677682591, 0.2113958907084037, 0.19516309828194633, 0.27777749393269446, 0.1499457213847103, 0.11284390561704805, 0.11628779026418323, 0.18008118844335153, 0.2118882381299665, 0.14645991623844, 0.048152307853008836, 0.05953976692198648, 0.07562279333634192, 0.23833955774133087, 0.23922728223940093, 0.23808252126116336, 0.2035265995273423, 0.16526955079044237, 0.15124885071615302, 0.28801231437923147, 0.2692430282362509, 0.23776254078010806, 0.05033467126173896, 0.058836999714639515, 0.16163716903192038, 0.08728095705303107, 0.08981789945933782, 0.11977604095315142, 0.1384400566437033, 0.12211296188298926, 0.11833127505537155, 0.17256994051040397, 0.1570286966418606, 0.1747951770969719, 0.11706952091020462, 0.1610504146833286, 0.1558355504707073, 0.1735511428076224, 0.051697032850920865, 0.1547582212874722, 0.4561709143624968, 0.38176434541640236, 0.3751779341613801, 0.39829280476746876, 0.3727279224070642, 0.37883426511576324, 0.3857978533905144, 0.39965934733076636, 0.4193532489289822, 0.10828733329195006, 0.08431862482028807, 0.0864418404517785, 0.11555735509032361, 0.12798997876370655, 0.08718690188559453, 0.09648448159244816, 0.11188853651437092, 0.07264474963379741, 0.19683230928817796, 0.2698770445570946, 0.1727202737328103, 0.19036558002451498, 0.19719138235434297, 0.191212628333997, 0.16815874859893687, 0.17949048553617886, 0.13588646820510608, 0.19085749051623935, 0.17108068887103745, 0.18471832518235431, 0.22429009757084462, 0.22040819267027878, 0.2712736011924006, 0.2505952874840611, 0.24063949403361773, 0.23897562462543187, 0.136357221862485, 0.15800958291876666, 0.1534409405007625, 0.20497581475764803, 0.18347279873074263, 0.18160965912437754, 0.1934592629352031, 0.19754656008076388, 0.19002825842257698, 0.2104990375174821, 0.19805675041832915, 0.1615029025693533, 0.18948808593069466, 0.22050519630206578, 0.17162800333599915, 0.2037051713542748, 0.22066987167813623, 0.17865525413546635, 0.18340395964366907, 0.20322670063441495, 0.18165881675544215, 0.22311986799661732, 0.1943884202243772, 0.18566591861403803, 0.2016873764596172, 0.2026380777413772, 0.1770826764055271, 0.6090017139196622, 0.6321840407171953, 0.7167437079811483, 0.23454645738092694, 0.5545165769283268, 0.1783642208519104, 0.3948813687116629, 0.17921633336130016, 0.8072436601205745, 0.45709597797343593, 0.19785548805409725, 0.28559199288024084, 0.21293406967473139, 0.28868611963477164, 0.259533537474016, 0.20691998950975243, 0.36213925089306265, 0.2077105454342305, 0.18078982485459072, 0.2128527100416332, 0.23002328599599853, 0.24492653192360936, 0.19234705888996362, 0.19542685959163109, 0.2437579694908789, 0.19256099403085913, 0.22972191595920122, 0.09838862640518908, 0.07598443011358436, 0.09970833989705974, 0.07359779384877418, 0.07138685301880465, 0.08602328010420457, 0.07888004310017882, 0.06908503553314094, 0.07465498666066828]}, "mutation_prompt": null}
{"id": "08786b1c-a827-4611-9858-ef8528e042c5", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "fc884316-872c-4a26-8040-38220809af08", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.3 * (1 - fitness[i]/np.max(fitness)))  # Dynamic mutation based on fitness\n                mutant = x0 + F_dynamic * (x1 - x2)\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Enhanced adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * np.exp(-0.5 * (self.current_budget/self.budget)))  # More adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Local Search and Dynamic Mutation Control in Differential Evolution to maximize convergence speed and solution accuracy.", "configspace": "", "generation": 34, "fitness": 0.3714548960647644, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.25.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8082790705538356, 0.8019379894172265, 0.8142909733061563, 0.8079943498507651, 0.8127534306151227, 0.8135198785357198, 0.8202013313297938, 0.8133798205727195, 0.8140346505590216, 0.609906692063491, 0.6139727304514861, 0.5920759875492762, 0.5783376751218077, 0.5967631374993644, 0.6100841227210951, 0.6229044795047232, 0.5909467662148145, 0.6167898018819812, 0.14435760448292345, 0.1420858700194627, 0.12929788559097777, 0.175882344755122, 0.38280353280652557, 0.11894032799259346, 0.13335645819646047, 0.1263888919697025, 0.14584377282241945, 0.1316882332615258, 0.12307907627147763, 0.13249959220529162, 0.12826957755339152, 0.1457802886970485, 0.11526146610839261, 0.12411070646749178, 0.1204174495390622, 0.11753561101469312, 0.9601611123464914, 0.9334095891465193, 0.9350196987143077, 0.9229157914800827, 0.9176052989157997, 0.9456947789176542, 0.932447112726405, 0.9600859054070894, 0.9323613301824298, 0.4480216120225343, 0.4545324968053035, 0.4337083142603354, 0.4404621252191109, 0.39864774168314865, 0.47324741362813894, 0.4844467954497118, 0.47060139441753535, 0.41254993166829756, 0.7660146444072465, 0.7492000227373222, 0.7295880258225498, 0.7330198965872418, 0.753065099112299, 0.7448398623384707, 0.7529197294770948, 0.7116891156459042, 0.7176126975878321, 0.1984943707963973, 0.22554579278073816, 0.2170602066740065, 0.12716901874024167, 0.24052238784888957, 0.19431946097479613, 0.4724446187654836, 0.24374092065670017, 0.24951424742567674, 0.1887037127547314, 0.11299133019495733, 0.3609886443339372, 0.28649538489399073, 0.22491873658923955, 0.31098567015617795, 0.3880084104801691, 0.26303488955969023, 0.21842039177889916, 0.21498279866852654, 0.2389420856827692, 0.2159036254207528, 0.3153650758460316, 0.24886955778676767, 0.26569919490062244, 0.3008718169810307, 0.2363744476862727, 0.26579797290739715, 0.4260850469595341, 0.4793671051521866, 0.43765031230660156, 0.367339400584501, 0.27070165151463765, 0.36980578825031996, 0.43886639378898296, 0.44799064649592246, 0.4400377402198782, 0.15143026513925628, 0.03725237351531374, 0.0972432125612821, 0.10901903505727073, 0.13467262132177615, 0.11107466787824027, 0.07724095027678946, 0.11666922021750292, 0.12162693019461601, 0.3012471793421485, 0.2590514298373854, 0.2785630928709174, 0.2985173608911983, 0.28463895497469627, 0.32283208710862454, 0.330386521332138, 0.29054433000656066, 0.31795489804338406, 0.6969991728543189, 0.7328892355972734, 0.707620607042539, 0.7196504688177385, 0.7178741456608014, 0.7150393005600975, 0.7046107445130902, 0.6998631010617032, 0.6897311411507062, 0.13250778482376568, 0.11707085383591986, 0.1524655858069267, 0.11675664108405803, 0.1310782458655365, 0.15363970987523567, 0.1236787871882119, 0.14523386913100933, 0.12004787790179561, 0.23514427507436053, 0.24056137712491, 0.22849636529652584, 0.16342595326341958, 0.23454107270357416, 0.2016049712387662, 0.24168449009470583, 0.169990542261219, 0.18833993617687128, 0.42888475922386726, 0.40508026052573887, 0.42570010629147903, 0.40548263607145796, 0.38182276242905633, 0.38122374726323516, 0.4603099928747907, 0.4480174933039578, 0.42332126937830095, 0.30458538536107416, 0.3120132187600795, 0.2839287049511092, 0.2990349803432698, 0.31049358775255265, 0.31198296716799934, 0.3464722574267136, 0.33759526822201036, 0.3394197094747181, 0.2099885764508551, 0.2348048281116396, 0.2126875432182015, 0.23177837152939396, 0.26502634794104174, 0.21026955818918736, 0.20311897366002762, 0.30041123644337775, 0.2105730258441627, 0.2018937065418317, 0.23345062577511033, 0.19488259587120227, 0.20632610746252134, 0.2424454185430881, 0.20244534539330705, 0.21852063787980092, 0.22858882274886383, 0.23790139685838452, 0.20451305023899924, 0.16122100743666268, 0.18069473895155574, 0.8111669791373181, 0.5133470423529201, 0.7541191927979357, 0.7176075474683248, 0.6129153934341041, 0.20270864475465444, 0.7238695584655219, 0.7464837813866507, 0.7784522820799831, 0.601559476927696, 0.5247648279689539, 0.16644256215119768, 0.7360646915066905, 0.19919926983448188, 0.21025420362954417, 0.19288313700983994, 0.2019640080396683, 0.18345473773571852, 0.2080058240331204, 0.20017624441810944, 0.20767842381294466, 0.22896735500228116, 0.1964406395030237, 0.19852135105136393, 0.09797279146975069, 0.09427147992200913, 0.08023456411837537, 0.08485398704309355, 0.08891856792400832, 0.0878561856452541, 0.08199922540411775, 0.09270066542518274, 0.09733252928318248]}, "mutation_prompt": null}
{"id": "01665d4f-abe9-42f2-a89f-dd21f89c94ee", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                # Adaptive step size\n                step_size = np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))\n                local_sol[j] += step_size * np.sign(np.random.rand() - 0.5)  # Directional adjustment\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Hybrid DE with Adaptive Control Parameters to improve exploration and convergence balance.", "configspace": "", "generation": 35, "fitness": 0.3935802292210848, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8133620615261523, 0.7950278260094209, 0.8004610769986827, 0.8204752191406545, 0.8082765507989755, 0.8312080340913073, 0.8096863028875292, 0.8187074761276083, 0.8171299764235411, 0.6580181128502449, 0.6484456539620538, 0.6450592740164656, 0.6758713311848867, 0.6105760986401365, 0.6582530271248783, 0.6592960550975863, 0.6490955981401914, 0.6495832241208317, 0.15700742819246516, 0.13648490643159916, 0.10774262118349709, 0.16594870049218502, 0.35856645829419054, 0.14097658504472277, 0.1521099733933119, 0.15057673101071634, 0.12809427547584962, 0.13618581065949242, 0.12256170020977353, 0.12727489350649723, 0.12137919997228508, 0.12502234068305407, 0.13990031614666443, 0.15217997917415504, 0.09857764540998581, 0.17614785334817407, 0.9428787982699063, 0.9259282901020625, 0.9359320326919939, 0.9285468351488991, 0.9367519289564443, 0.9356139003763879, 0.9110601589247331, 0.959955642465947, 0.9546455396389596, 0.4817242588423495, 0.5008884924203102, 0.5223615311956602, 0.5378408248168719, 0.4896524924458485, 0.5025606085567904, 0.5592983467690587, 0.49931492257661136, 0.47508281355886584, 0.7556036386870488, 0.7914231547290699, 0.7535335596083869, 0.7912767103765732, 0.8172594960103015, 0.7834477715449913, 0.7922056045784004, 0.7860807844088329, 0.784781933007364, 0.25954148838389013, 0.2705962481116678, 0.32645094772462935, 0.30521310649669253, 0.2283403194412782, 0.20050571042380982, 0.22077293734943537, 0.5254063168276448, 0.29524353423995187, 0.3547349775566002, 0.18410182339962178, 0.28667327156097167, 0.2582527021330382, 0.3201643076139403, 0.2907147402244613, 0.5355980425703771, 0.3471853345662118, 0.21649850251559988, 0.40511551195476436, 0.3761806528979518, 0.373430731893751, 0.39458863680544487, 0.40110714966110883, 0.3352980374398581, 0.41433167647223634, 0.3435125599406096, 0.43492907861626195, 0.5214019572331658, 0.491408955172865, 0.5071433468287991, 0.5145394883614138, 0.4534285828165906, 0.5002030419527292, 0.5692063297358949, 0.564622755868293, 0.5343193269634701, 0.09916443578859913, 0.15032201574071946, 0.19770147304896868, 0.30781604891493, 0.28023211470231135, 0.21924597543733193, 0.20144937348609004, 0.15712696454042396, 0.16539585946385793, 0.3227943479221924, 0.32794221861894657, 0.318127611807708, 0.3436729801135453, 0.33240181786225576, 0.34531732802965076, 0.3262819612159664, 0.32667190210393215, 0.3049992776317184, 0.7005937357323221, 0.6965624450453898, 0.7205367770508553, 0.6818271792188729, 0.7089561170273051, 0.7213303079416703, 0.7201577203163883, 0.7041621642260232, 0.6961775948839629, 0.13928757257735236, 0.12108916677682302, 0.13777025177680569, 0.13896379341782705, 0.11216685256144387, 0.1545547631282923, 0.11890028145475462, 0.17972280858669587, 0.14642721766038647, 0.1859339780494984, 0.18119046725414034, 0.16518199174343373, 0.16065022703778997, 0.18974823813884234, 0.1570272168248179, 0.24660779975414715, 0.15303790565825526, 0.195096835624039, 0.41653275187308947, 0.3978656985291389, 0.40439466998448104, 0.4383070350087055, 0.386935772506821, 0.4111917461528636, 0.4222672980267619, 0.4624135538989266, 0.44458829704431035, 0.3300484804243805, 0.3146266974482549, 0.3245943592092436, 0.3462530410829201, 0.32953220883423606, 0.32658972902642913, 0.344380943853701, 0.3574675173111319, 0.3500217845492821, 0.1986146052386183, 0.20874355957481106, 0.22451352303439043, 0.23618916144006186, 0.19666383321157188, 0.21332114458922347, 0.2545051157767352, 0.21925298918034208, 0.2381849301805472, 0.2191073341579477, 0.32099844590981186, 0.22962464614086986, 0.20759991798620248, 0.19549929379087239, 0.20062100953027007, 0.19668561883511837, 0.2145592708808305, 0.24035182986542725, 0.7986845946326206, 0.8077174491350151, 0.7954926895868204, 0.1757851787623742, 0.19874556954059486, 0.19668012315641137, 0.7585275162039732, 0.16880666353769413, 0.6926600186772385, 0.7775273449477642, 0.2064457000315162, 0.7384168764474648, 0.19998417781616318, 0.20625648292390286, 0.7025389117218743, 0.20593283201752155, 0.1531849027800839, 0.2109349007331367, 0.21372808582123337, 0.19461332051302105, 0.21795444625046834, 0.20555308347210033, 0.20387667511030894, 0.18869832593857083, 0.20762219894002865, 0.22994932273778557, 0.20735721867632806, 0.08988905755673093, 0.09995853226889029, 0.10218444225986367, 0.09045909468349633, 0.10145221137135763, 0.10276854711450722, 0.10053973062166188, 0.11359419175126584, 0.08375364379544958]}, "mutation_prompt": null}
{"id": "28fc3779-abe3-42ec-9187-255b66f9974f", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "c5f94c4a-d1af-44d9-9350-f7735232be80", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "fed4f97d-9f05-4805-bc80-a7786f72f5dd", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                # Introduce fitness diversity preservation\n                if np.random.rand() < 0.1:\n                    mutant = (mutant + np.random.normal(0, 0.5, self.dim)) / 2\n                    mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Improved Hybrid Differential Evolution with Dynamic Scaling and Adaptive Local Search incorporating Fitness Diversity Preservation.", "configspace": "", "generation": 38, "fitness": 0.39226053702670344, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.7972755015341849, 0.8155534709929843, 0.8119395521267665, 0.7922068510572151, 0.8095654143027335, 0.789984267801359, 0.8126635178810243, 0.8031895768497136, 0.7927270160784452, 0.6617503004019084, 0.6291600954465218, 0.6063525372045492, 0.615159831288566, 0.6454413304106026, 0.6380544591623383, 0.5999666035940476, 0.6149643471948543, 0.6107483034302346, 0.11027290475989926, 0.14396246920127376, 0.1224086288700792, 0.13392514315958415, 0.11467759784718345, 0.14760419407605518, 0.12350080946037756, 0.1363547805673606, 0.15419166947003082, 0.10259533486874262, 0.17535116871268897, 0.11850571278284971, 0.15212423260815744, 0.10801278600006758, 0.11286840664409925, 0.11899551328837732, 0.16268859700681715, 0.18361304399145972, 0.8867896305480055, 0.9141652315732267, 0.8864232023186424, 0.9061491992631345, 0.8897657720873735, 0.9037714448424521, 0.9518126650288605, 0.8901197504762229, 0.9029914325933468, 0.48184000935408444, 0.4544499801592571, 0.4474566104472121, 0.4412184498889036, 0.43769715389443387, 0.49174695378900646, 0.4559123810067812, 0.44927182673563637, 0.461935394494952, 0.7969113986400072, 0.7853467834922732, 0.7421305701119219, 0.7726286232591856, 0.7446637814976151, 0.7633456242419361, 0.7711419515135018, 0.7165453468045153, 0.7442388691391957, 0.38931347904703884, 0.20229575111510578, 0.29845570618582185, 0.28855890431511466, 0.2963849444387907, 0.20349674612163748, 0.3704346458504326, 0.22341056296039885, 0.44456598777070944, 0.2836570447958625, 0.23476632048949442, 0.2265262966486279, 0.2353440609361157, 0.34008101704993976, 0.3180332696358459, 0.4952207044738913, 0.2640523170098922, 0.25056549078452184, 0.355737352445877, 0.280759315187742, 0.34157882608958545, 0.3582666993767861, 0.3710023320672442, 0.34382252833297366, 0.38625628769035214, 0.35984016758816395, 0.40457128971106726, 0.4753093802995981, 0.4683289364346962, 0.46128828997396154, 0.4593741038423693, 0.49188733955154074, 0.5130141110396244, 0.5034783080736038, 0.527833103729038, 0.5075584348746853, 0.1192763019432268, 0.1287595814481154, 0.19474976119859744, 0.12307708322168598, 0.19381560088896432, 0.22501000430634188, 0.18645396986500595, 0.2100069953226108, 0.1423668598064427, 0.281276675369312, 0.30753183842419984, 0.30881782199542274, 0.3100943180317699, 0.3204818044446236, 0.303316348911815, 0.27917067693801223, 0.3118083390051316, 0.30465091422086643, 0.659902154723262, 0.6833396402938798, 0.6832800317691521, 0.704699538569669, 0.6655903530016054, 0.679135796369569, 0.662327959127818, 0.6955588775163544, 0.7234245986040013, 0.11621050510063347, 0.11637414441229799, 0.18270244768098265, 0.16808580659201766, 0.11140668722542746, 0.1073343456812137, 0.14432801081288804, 0.10762044942072813, 0.13497374156650543, 0.15429644315515012, 0.16130771175865788, 0.16083704086432737, 0.17607674440699717, 0.17448716563128697, 0.1927166339350167, 0.19399646655569036, 0.16245626904328092, 0.15846026049871875, 0.3708724385290737, 0.36163657146443406, 0.38434444915035604, 0.4291519559617606, 0.415980110455366, 0.37956205961773104, 0.4186223662127684, 0.3931523088576543, 0.4028456847427564, 0.3094881125344032, 0.3113949627053485, 0.3010349289684028, 0.2879742198016719, 0.2926905580870304, 0.33265697126815585, 0.30584613403952576, 0.31995720388804616, 0.3265498599249419, 0.23335287518488235, 0.22087372874084232, 0.19648792538009885, 0.22075699644525093, 0.22007922754583087, 0.21372035645660337, 0.21732055307558196, 0.2572873807984798, 0.24188263605243987, 0.2201804178509985, 0.20260086150679046, 0.2088704559735558, 0.38450577426078714, 0.38258946663264515, 0.2047298247418906, 0.20779177017909456, 0.20414709291667388, 0.25705513768191846, 0.7362282202804608, 0.7676641400959886, 0.8189195070676263, 0.7931072311600786, 0.722976464223227, 0.7795698422737225, 0.20116781149762364, 0.682444962717323, 0.7554838626493191, 0.7544030666112169, 0.7050680991777007, 0.6977012251453545, 0.516701464921289, 0.5995074560995601, 0.1645760994265656, 0.20757548379370672, 0.7925324741801169, 0.20892450247492422, 0.19601192586412552, 0.20623429055448472, 0.19630199448584185, 0.19888606161258782, 0.1820464418541352, 0.22237705023278198, 0.20698708017223477, 0.21248720824499956, 0.21693468180868636, 0.09102999840238413, 0.09805379734514064, 0.09643259322543041, 0.08402803005939186, 0.09105337681881043, 0.09287590598047646, 0.09477344539486343, 0.1026460887186238, 0.13107995269108053]}, "mutation_prompt": null}
{"id": "d04f42e4-2521-4ba2-a005-1c85788a5796", "solution": "import numpy as np\n\nclass HybridDELevyFlight:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def levy_flight(self, Lmbda):\n        sigma = (np.math.gamma(1 + Lmbda) * np.sin(np.pi * Lmbda / 2) /\n                 (np.math.gamma((1 + Lmbda) / 2) * Lmbda * 2**((Lmbda - 1) / 2)))**(1 / Lmbda)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / abs(v)**(1 / Lmbda)\n        return step\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search with Lévy flight\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n            levy_step = self.levy_flight(1.5)\n\n            local_sol = best_sol + levy_step * (1 - self.current_budget/self.budget)  # Using Lévy flight\n            local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n            local_fitness = func(local_sol)\n            self.current_budget += 1\n\n            if local_fitness < fitness[best_idx]:\n                pop[best_idx] = local_sol\n                fitness[best_idx] = local_fitness\n\n            if self.current_budget >= self.budget:\n                break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDELevyFlight", "description": "Integrating Lévy flight for enhanced exploration in the Differential Evolution framework.", "configspace": "", "generation": 39, "fitness": 0.3868319594339095, "feedback": "The algorithm HybridDELevyFlight got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8193149171922542, 0.7835475884205588, 0.8049111045698335, 0.7985128068413554, 0.8215565779659264, 0.8131332772623943, 0.8229233648935793, 0.8050293840349423, 0.8196463873550003, 0.6636565617460993, 0.6526202292338223, 0.6811920321436736, 0.6410777312402272, 0.6844727455752861, 0.6452697593119056, 0.6570705664258507, 0.6565537641685741, 0.676660142945527, 0.12100836676798721, 0.10291536983625083, 0.11023359748840589, 0.11818341549082256, 0.14912050543984645, 0.1171164051797654, 0.11033491340627422, 0.11502488454894932, 0.13320303821386492, 0.11492548813046777, 0.11183736707646841, 0.11033146375383551, 0.11380184398998716, 0.12256648489651456, 0.11514164916334835, 0.10283230430275125, 0.11420542792259458, 0.11822394410564518, 0.9669538358702559, 0.9263564843256283, 0.9345591363610969, 0.9087290128114466, 0.8796285003203821, 0.9446294009386156, 0.8684421036027932, 0.8640269901175079, 0.9445976704706719, 0.48832822299747014, 0.47129240337322686, 0.439568657355645, 0.4410810730676793, 0.5095412545985452, 0.5051792185127406, 0.47614670787428515, 0.499367283447836, 0.5154976381917629, 0.7673910661090588, 0.7755975549348677, 0.7804325791567462, 0.7862531298009452, 0.7870800549463618, 0.7857442211236076, 0.7933112710340738, 0.7703332064304893, 0.7782275250076344, 0.28506534757443236, 0.16348153407253796, 0.276066152215554, 0.2181750834011006, 0.3066031945493066, 0.39930106116547315, 0.20825520828709843, 0.17042193677571793, 0.3469103930876971, 0.1449758238754293, 0.12430391037094923, 0.22812781047011, 0.3057915928092111, 0.21797309573346946, 0.14590895939197712, 0.23450169153542288, 0.21222239301087897, 0.22934914575658671, 0.46451665058007974, 0.4000474293940607, 0.4156104433685601, 0.37876263335368365, 0.42116854508964585, 0.39857848362956716, 0.40655475457605306, 0.3810667158620983, 0.36782605952216896, 0.5224155200000185, 0.5630990532365838, 0.5489791725323601, 0.5788129218817377, 0.505749755225289, 0.5045820130109508, 0.6033693793152108, 0.5694167488679565, 0.5599690741580079, 0.2235013106759801, 0.13616728440986203, 0.2289656401819511, 0.23088448046842758, 0.26729553772172243, 0.1810686324820373, 0.2048181332873089, 0.13055223748591083, 0.1226587000398971, 0.340480212153211, 0.323915628617651, 0.3159224268339209, 0.3493406468938457, 0.32847619939577277, 0.34926532306928226, 0.3459862031009797, 0.3331658895985211, 0.3183101528783151, 0.7281630700958706, 0.7103129609608687, 0.7164921814044665, 0.7171654096083933, 0.7117543895666185, 0.7213343973011801, 0.735310414366912, 0.7281955992444915, 0.7388002190047107, 0.08692759466054578, 0.10257753611256193, 0.11111024270682679, 0.10586583601961264, 0.10841052559241593, 0.1092117233404164, 0.11321545950395517, 0.09960012470240376, 0.10653362291769986, 0.1835170100762723, 0.1490839393240505, 0.15342433099308272, 0.1333809591446874, 0.1458011177666756, 0.14228887879593421, 0.1925981647982864, 0.14669619870414785, 0.1412749168454538, 0.41886665824738123, 0.40294020338906034, 0.4315793276813221, 0.4502867741040826, 0.4216130288735238, 0.4321697294579414, 0.4432448395448143, 0.4441944665411194, 0.4571264153767377, 0.32330701282909136, 0.31212956723803587, 0.3295953887874732, 0.3536611904338042, 0.3365659924476214, 0.3526497239971337, 0.36758167146888343, 0.3578456152459637, 0.3495977996006071, 0.19558557913847108, 0.19905405649388996, 0.19103856301614497, 0.20659715372416, 0.2177641632643751, 0.19752363921367422, 0.22879083981100423, 0.1960748336964312, 0.2195810674055133, 0.20334305266093922, 0.1959229482616096, 0.22309700944062816, 0.35871436669431844, 0.19262579978038252, 0.19186561015572168, 0.20574075907200307, 0.18989812541606133, 0.23253029465548214, 0.7239275519439132, 0.20221010465098954, 0.7259416725676757, 0.7495821711921007, 0.7521320971464291, 0.7103844803390897, 0.5550255996751788, 0.19714717832319673, 0.7598812559155257, 0.6594122028084688, 0.6700055926917734, 0.7125915099668724, 0.16240480033574967, 0.19816596299634393, 0.19445959865278473, 0.5281350744689295, 0.20369309929573143, 0.20938326398673457, 0.1990527949531311, 0.19042428350797458, 0.19315519037707174, 0.19329615136090694, 0.1819227991833926, 0.21979071104948966, 0.19559522527001516, 0.18993879149967163, 0.1748648136378551, 0.08184519877688168, 0.07896582235027949, 0.09115846607794664, 0.08397729995770353, 0.08303365733956802, 0.08147096876354554, 0.07472782128695066, 0.0906979153356886, 0.07236607851141419]}, "mutation_prompt": null}
{"id": "d4e4de70-3fd0-4e0c-b55e-f70db84996df", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n        self.memory_archive = []  # Memory archive to store best solutions\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget) * (0.5 if np.random.rand() > 0.5 else 1.5)  # Dynamic scaling with learning rate adaptation\n                mutant = x0 + F_dynamic * (x1 - x2)\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    self.memory_archive.append((trial, trial_fitness))  # Store successful trials\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        # Leverage memory archive to improve final solution\n        if self.memory_archive:\n            archive_best = min(self.memory_archive, key=lambda x: x[1])\n            if archive_best[1] < fitness[best_idx]:\n                best_sol, fitness[best_idx] = archive_best\n\n        return best_sol, fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Introduce a Learning Rate Adaptation and Memory Archive to enhance convergence by dynamically adjusting exploration and retaining best solutions.", "configspace": "", "generation": 40, "fitness": 0.39623860040467374, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.25.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8143538292437564, 0.7932826315561271, 0.8241662188195599, 0.8104660742929868, 0.8177506299752222, 0.8271617990053793, 0.8061467951915655, 0.811444327045374, 0.8165080455555668, 0.6510027668182761, 0.6613993738109951, 0.6714653333702222, 0.6212380387769745, 0.6412100194546154, 0.6614193721239418, 0.635856581986652, 0.6502662433219226, 0.6566617554994462, 0.13469540498938082, 0.13059976451859368, 0.13519122729357513, 0.15982821753735932, 0.14913237869290608, 0.1184213258272464, 0.14903623497314056, 0.13754219331693107, 0.13970256073868859, 0.1294003856504432, 0.11878676089307516, 0.13686663809796695, 0.14254062596653805, 0.12237562332990637, 0.13154719754255262, 0.3466925286466308, 0.11365831130616766, 0.11332944170399428, 0.9361292630698941, 0.8874892143378414, 0.933413478962664, 0.9402837655394264, 0.9209992572048642, 0.9517320607292408, 0.9303919462074658, 0.9299801036356368, 0.9825048156010594, 0.4813321572219784, 0.46984786356091623, 0.4838486101836095, 0.48452012623885565, 0.502670356125691, 0.473339686688961, 0.5242868162781477, 0.4863939615281805, 0.46305245077907486, 0.7777675722725393, 0.7695945474108385, 0.7753418601772719, 0.8004704302857414, 0.8415828590328618, 0.7655100370299981, 0.806983723562339, 0.8100159173192242, 0.7870856731284845, 0.3390025546316108, 0.20591213961901433, 0.32704419846800603, 0.2727630241004686, 0.20900105259642854, 0.25912312642436963, 0.5576492984893, 0.3199485617188903, 0.25787899930982605, 0.4629631488164303, 0.22038470381536712, 0.24997417616467754, 0.4578822250433131, 0.19644633392029398, 0.286931343508521, 0.23553478073135958, 0.308378516840046, 0.22651935893028852, 0.362781156217417, 0.3737983261776744, 0.3375727530778182, 0.34227951662025, 0.34912205982771793, 0.3806177464478756, 0.39374262061105747, 0.3659162964321493, 0.38929592938479984, 0.5535631457608583, 0.5788935455692759, 0.5230190555468219, 0.5323952133164604, 0.47841251116507166, 0.5122166701463573, 0.5181951705627685, 0.5882897370778721, 0.5488487232620948, 0.09343854620550374, 0.170420593040422, 0.14722330015378704, 0.2475989020780961, 0.24220055018705478, 0.2821799308314077, 0.16947325948740322, 0.1872468476090724, 0.10587806769666819, 0.3414373236202012, 0.28954228401689674, 0.30223904502230703, 0.34270373642702634, 0.32075279155023917, 0.3288603765680881, 0.31251262913607847, 0.34284597899752467, 0.34856670325368344, 0.735132556365026, 0.6967027636738081, 0.7133189405802581, 0.708051698642648, 0.7273014971573099, 0.7047478249043817, 0.7036465523003179, 0.7072107996497057, 0.701603934480804, 0.09413879977034612, 0.10108664012421653, 0.1211787113444831, 0.14496767062160876, 0.12743187348182983, 0.13462900063017114, 0.1495872808460934, 0.15455518598259987, 0.12191212946075158, 0.1458288919038363, 0.18628440365639531, 0.1633375056099583, 0.1650380307334528, 0.23393157462757186, 0.17561555674027862, 0.21356468377772198, 0.2254553875982479, 0.22777101290803103, 0.4243903061193428, 0.3949757338598895, 0.43419527403936453, 0.37950903081481246, 0.40955004031323783, 0.3948567253298223, 0.3959357167814618, 0.43647388027581124, 0.43757733513189945, 0.3436071546104068, 0.30715592057130536, 0.3076245951385428, 0.32228501550281985, 0.3042097489307486, 0.3081002780459201, 0.309341231293493, 0.34975811412558966, 0.3315389519717463, 0.20233361539174022, 0.23518834278592005, 0.20643126849942028, 0.20630943255112355, 0.2478401984947085, 0.24401424045212594, 0.23650238515392674, 0.23712499416743227, 0.22396865015060885, 0.2095577302038819, 0.2047837997009868, 0.2027363442639757, 0.21203867775545637, 0.265038512096221, 0.27008433021915457, 0.21144979397406083, 0.2145810773979704, 0.305555910601631, 0.16268328368346452, 0.7519624146097819, 0.17095283455053378, 0.68088096187615, 0.20757331085208175, 0.8111272103063387, 0.7099546356898296, 0.4577992830479186, 0.6498725126014573, 0.7012432147301897, 0.805318031354131, 0.2043513938899355, 0.6805194048694723, 0.2628910572901295, 0.685937989629423, 0.20533985111421882, 0.6584477028936901, 0.20354741887768135, 0.19782427361823618, 0.19605377972397853, 0.20851442928162023, 0.22089559737480313, 0.22688829420220213, 0.2258413642557634, 0.20500679778473918, 0.19819139860889423, 0.22557972401774518, 0.09236334897856135, 0.09228087164099774, 0.09542852767836207, 0.11044760524259378, 0.09822288406167301, 0.10856529159023431, 0.09080155772044074, 0.09109174465259617, 0.0873486236207478]}, "mutation_prompt": null}
{"id": "b5aca285-12db-4c5e-96d6-7c10a528541e", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.current_budget = 0\n        self.alpha = 0.1  # New parameter for dynamic mutation\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = (self.F + (0.5 / self.current_budget)) * (1 - self.alpha * min(fitness))\n                mutant = x0 + F_dynamic * (x1 - x2)\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Mutation and Adaptive Exploration-Exploitation Balancing.", "configspace": "", "generation": 41, "fitness": 0.19016264983649464, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.22.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.5488736048423244, 0.5149994699980647, 0.5497032017343243, 0.5726157874115518, 0.6244515441619056, 0.5763257040831924, 0.5192841208309893, 0.45662675373140216, 0.4899856854997151, 0.12017525666600393, 0.0028587986562984558, 0.02859505080201563, 0.14416717196636397, 0.10734608312642047, 9.999999999998899e-05, 0.05247030923724183, 0.01712174013692036, 0.253891106922168, 0.06267456779612712, 0.040925917817952406, 0.04004782168689758, 0.04596017582297718, 0.045629653800512315, 0.037012699045149366, 0.04284208086836827, 0.1419529733920093, 0.0765032561684984, 0.013902773342689634, 9.999999999998899e-05, 0.018808999384940073, 0.06257101078653537, 0.01726835762026313, 0.0061031013661578815, 0.043455565964618637, 0.015918314905049913, 0.003825361564550267, 0.9021876230553927, 0.950989389362533, 0.9419624639634498, 0.9913431238401793, 0.9838849759498745, 0.9726840532510885, 0.9791582564316299, 0.9648104569879181, 0.9938360117452453, 0.18893117843926588, 0.22083681572479286, 0.1500810839001444, 0.11982032998688086, 0.16205013508271715, 0.1281222387057387, 0.07523862340385368, 0.09044609165962214, 0.07908807207492119, 0.12628194455734587, 0.18738906209140183, 0.09696301560499399, 0.15527903833467405, 0.26603479890485227, 0.15140954078236613, 0.23325992568989617, 0.22542371484449764, 0.8084835060207141, 0.19478722425231565, 0.11265284234515582, 9.999999999998899e-05, 0.008500502823286848, 0.11122800127875421, 9.999999999998899e-05, 0.12790059360792616, 9.999999999998899e-05, 0.10504478786102878, 0.09927956499721713, 0.10341883431149768, 0.10391245070307542, 0.12893164216144481, 9.999999999998899e-05, 0.09228095093764732, 0.16806846226742966, 0.09555161780257548, 0.09890000483004291, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005284185927099672, 0.0519068558303305, 0.05160766290736807, 0.08613601996059694, 0.16775409071162195, 0.030182479936821993, 0.06639106387641491, 0.025229757854765, 0.1963023032798079, 0.03902933473998693, 0.09127335442371909, 0.022698902284806755, 0.015632472009298404, 0.08630190810836524, 0.024402304338728253, 0.04916286631199196, 0.059844021083897636, 0.07460133521553702, 0.05147448243638719, 0.08031466492946204, 0.06394688950147642, 0.09277951837661036, 0.1220024600605113, 0.10628490307458538, 0.06509647943499663, 0.043141372727628524, 0.0444198389781979, 0.04280297913708242, 0.2708124167568703, 0.34154095147980557, 0.3729742100422837, 0.3548271197185451, 0.35797491217875854, 0.3673416558684438, 0.39520279025654437, 0.31834802256952555, 0.3117419805826511, 0.06040020836360749, 0.07122544122339136, 0.05761738754203982, 0.06668267980433173, 0.03787604830763358, 0.050329411659401524, 0.10293066043099752, 0.08087095312473136, 0.07220813269780357, 0.16707194697484318, 0.12331315990349956, 0.18096130582385273, 0.14425414576433337, 0.14331949298981472, 0.144915184082411, 0.17491009849129657, 0.22888644715524042, 0.13405739508816805, 0.2051640651253005, 0.18828830236364202, 0.19490130253951776, 0.43648093399909016, 0.4231984737070479, 0.3831418292868183, 0.18695225883991884, 0.19323830380201368, 0.1661083896320522, 0.17587623688797105, 0.15103703138709001, 0.15603360977091763, 0.2936747902817206, 0.302321304107648, 0.2991681992962072, 0.16408381901718094, 0.12051925245884465, 0.12211934531811042, 0.1790634637211077, 0.1340533779208467, 0.14836172123507918, 0.1682862040821672, 0.16143468368107772, 0.14190160599370027, 0.18126871590103244, 0.14483340391525124, 0.14981085957152773, 0.16279554609893343, 0.1469301884214076, 0.13568244734487833, 0.1899860578309127, 0.12683966360767485, 0.1620863889258538, 0.16318630431998105, 0.1778967468443563, 0.14197500174529942, 0.16169493658298428, 0.14905282744523551, 0.40617856862940727, 0.7129654142852766, 0.7602059429380694, 0.19918702459222237, 0.15259997398909186, 0.1462931405579666, 0.1842551876654358, 0.3696464283962294, 0.20211928919379174, 0.16445695025758267, 0.11748971468670621, 0.1522386620824394, 0.13950731763232338, 0.3072350365245383, 0.19297766120050353, 0.2613437266488695, 0.20179210962942495, 0.20491401977793522, 0.21003211598735294, 0.21378885040226403, 0.19593347391275795, 0.19229718445110733, 0.21297379364689628, 0.23153696630899, 0.2186420755852957, 0.03519310505809192, 0.028042421565376396, 0.06086449895362389, 0.045030629218300255, 0.07062482296648664, 0.06469822337602249, 0.03884741557216298, 0.06477502957211578, 0.045652358353275635]}, "mutation_prompt": null}
{"id": "16ea20c4-1eae-40b2-971d-29307c05b79b", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "9ea38f19-0493-485c-8407-bd7e601a6840", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "fc3d2fd3-c06e-4492-ad60-644998c3b599", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "f943c632-5e57-470a-b43b-f05d0674adcd", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "306e7800-9f23-4eb6-977a-dbc27da40f8f", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "987c5078-e0e7-4ffb-87ed-243031f3d111", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "b7d1d684-e989-4551-9edc-2bed71ad5c72", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "96e9c1ba-1e61-4814-86ad-de4755fa3d8c", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "6f9d1479-1815-4ad9-9b14-a2d2e45bfa1f", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Self-adaptive control for F and CR\n            self.F = np.random.uniform(0.4, 0.9)\n            self.CR = np.random.uniform(0.5, 1.0)\n\n            # Neighborhood-based local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                for _ in range(3):  # Neighborhood exploration\n                    neighbor = local_sol + np.random.uniform(-0.1, 0.1, self.dim)\n                    neighbor = np.clip(neighbor, self.bounds[0], self.bounds[1])\n                    neighbor_fitness = func(neighbor)\n                    self.current_budget += 1\n\n                    if neighbor_fitness < fitness[best_idx]:\n                        pop[best_idx] = neighbor\n                        fitness[best_idx] = neighbor_fitness\n\n                    if self.current_budget >= self.budget:\n                        break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Integration of self-adaptive parameter control and neighborhood-based search to enhance convergence and diversity.", "configspace": "", "generation": 50, "fitness": 0.290237387416394, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.22.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.7153588792702366, 0.6756372322825908, 0.7100491002697089, 0.7106955241150913, 0.711633037967018, 0.7483889601092797, 0.6951422597910362, 0.6996288244975581, 0.7078944859208829, 0.4363010099454566, 0.4174978607862294, 0.46793942283370427, 0.43011905183918486, 0.3976185326822965, 0.44719551043526573, 0.4360863964488073, 0.43653095684133136, 0.47292875365668174, 0.13928039988733165, 0.13000092784030748, 0.12398936941067662, 0.13450082567322585, 0.13516064594320631, 0.13150733337165088, 0.13722088493083462, 0.13406129240587072, 0.1679646956066172, 0.12887334059883737, 0.1126890010028132, 0.11878351683705457, 0.11469523232646484, 0.11333907567257628, 0.1169206980593408, 0.11209450824084866, 0.10802680347834559, 0.12005803913686264, 0.9256652586499577, 0.9601887177788937, 0.947634559499465, 0.9562197946915003, 0.9460991066018681, 0.9579918784077156, 0.9239818034467217, 0.9557182295906423, 0.9356382351048975, 0.353330915825922, 0.3203532022083214, 0.3473877277971231, 0.3460647491282587, 0.3491820645876079, 0.3451069663095464, 0.36162790865553174, 0.3203540347617664, 0.3538846162802155, 0.5131641443468524, 0.5473797267010831, 0.731861263838065, 0.6645429421286579, 0.4771678504075313, 0.5622619063933468, 0.5387327545543381, 0.7992038775010348, 0.5950730468893342, 0.23486161536205985, 0.16476614205511597, 0.2276314455306876, 0.18384857034919277, 0.20018925952117705, 0.20301575818958195, 0.17707201519892246, 0.228167646428041, 0.2053007919267098, 0.21078615195110373, 0.18478493783506167, 0.23922968669072775, 0.18664522453144217, 0.21012650456421045, 0.19488844470456657, 0.19202732486393292, 0.17624992845686915, 0.18516826536529307, 0.07612823469624763, 0.05612817085235711, 0.08931560265726934, 0.05314165718144048, 0.04065397948335814, 0.08028096056388456, 0.062822954645255, 0.06651181981469889, 0.06849815636406198, 0.18897358500635708, 0.18337474548680177, 0.20103319732260316, 0.19192214322219125, 0.16845192260936803, 0.15984085786386604, 0.2073700016647303, 0.19053169831235583, 0.20300482274179776, 0.002842118727993337, 0.004472895823434686, 0.02815052318641631, 0.043104523354186686, 0.019136205452739863, 0.026808182339867037, 0.022469569488134056, 0.01764183103500727, 0.030622225852347418, 0.13378650336591347, 0.14123527431219796, 0.15030767837014625, 0.16181548190063133, 0.15965586689101852, 0.177379583649931, 0.13622993596649613, 0.1362304317532551, 0.1543465330125604, 0.5221856167982468, 0.47293884861883706, 0.5364371375259247, 0.4845039167835473, 0.48215305429471167, 0.5350586735442793, 0.5141408661278755, 0.4909171893423, 0.5167776144654134, 0.13159099982805877, 0.11731535809240379, 0.11020112465367127, 0.10103190993605893, 0.11960895011284278, 0.11512036937086556, 0.11170476043966848, 0.11427268549879377, 0.12367185687332694, 0.18380984847863713, 0.2301029295900393, 0.19674932183096538, 0.3228669000986091, 0.30668622769331, 0.17975810150617366, 0.18181971018345555, 0.1763834664485434, 0.18876086310963736, 0.2612740671856204, 0.2944056343464355, 0.2874828257476404, 0.2865422741990924, 0.2776184302511949, 0.32121236163965494, 0.3164108671207, 0.2939798345144884, 0.3344094807034841, 0.2107399938203527, 0.22595220936208282, 0.26460015926018854, 0.22730770042474835, 0.22456217751417928, 0.208493994252255, 0.2113323478677247, 0.22263793771937213, 0.24523284075115503, 0.20340727343554177, 0.1989829093203792, 0.2056811402620634, 0.1844802794985111, 0.18518309466008542, 0.19507953537739697, 0.2306202817738252, 0.1972425301013715, 0.20363526567304746, 0.3075095364828587, 0.2026142504094237, 0.1906479449172156, 0.19743513375701116, 0.19016169753589973, 0.21710266674386924, 0.20211236553942769, 0.20828812309570888, 0.19571573806079556, 0.5518737531338426, 0.1889498022553614, 0.4931948774866819, 0.6971679836589721, 0.5123440131640626, 0.26732139178041825, 0.42101880774971767, 0.1757406558809218, 0.3515363622611102, 0.5794179209222545, 0.6367903579019909, 0.5019471988097239, 0.2065448529326568, 0.16865943576331122, 0.2092641468789629, 0.5610991690269478, 0.4156808001089467, 0.2073353827730341, 0.19111135422944103, 0.1912505995161249, 0.1987513118506874, 0.19194475423088686, 0.18597139899984572, 0.1812436477858439, 0.18444627932714408, 0.20069135697470908, 0.1880536891850917, 0.08299022229084263, 0.08315940816193546, 0.0944654548723145, 0.08589599807227166, 0.08330146434974561, 0.08420902140856201, 0.08352599805969818, 0.07941253723607111, 0.08769180763293116]}, "mutation_prompt": null}
{"id": "cc9c9cdd-8b48-4fe7-ac23-3290d4c7a256", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "edd9ea74-d3df-463a-988f-96353c7aaa20", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "65f90b35-c7d5-4b20-ae26-d9ea6af5f3e6", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "05300224-6825-47fe-bba5-b29244ac7708", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "5e4efc2c-01c0-45fc-b3cd-c1487419d363", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "7aa2c0ab-43b8-45f6-b516-208b412d4d6f", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "b89b2491-a3c0-4483-8ba0-8a41cf0db519", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "cd3686a0-5d48-4062-a60a-61e46f69cc39", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "1f2101d3-3021-40d2-a451-bbe29aa22c90", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "36508ea1-7760-4699-9525-973f8f4a0cca", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "1785250d-3d5d-4c6f-aafe-f84a83b51961", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "53ce8733-99e8-42a2-b71e-1d7c94f3d028", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "a1d817ba-72ed-4804-8ec4-f87a587fb67e", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "49e2b0d2-6ef3-4d5e-816c-6f1c0d824b95", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "51469a94-2e0a-4dfe-8ac6-eaa377d723dc", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "205eab04-f72e-4de2-be33-0987ce3eaa60", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "509daacd-93e1-4c4f-8be3-f42902b5d6d1", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                # Adaptive multi-strategy crossover\n                if np.random.rand() < 0.5:\n                    crossover = np.random.rand(self.dim) < self.CR\n                else:\n                    crossover = np.random.permutation(self.dim) < int(self.dim * self.CR)\n                \n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Enhanced local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                # Use Cauchy distribution for perturbation\n                local_sol[j] += np.random.standard_cauchy() * 0.1 * (1 - self.current_budget/self.budget)\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Hybrid Differential Evolution with Adaptive Multi-Strategy Crossover and Enhanced Local Search for improved exploration-exploitation balance.", "configspace": "", "generation": 67, "fitness": 0.3445113767976188, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8047039989676523, 0.8027153128504187, 0.8184292231159074, 0.8005653028711193, 0.8039030962463506, 0.8170732598163966, 0.808499360035607, 0.8099543452727876, 0.807688160431199, 0.6542503950436556, 0.6286665472508273, 0.6606932727445131, 0.6127416587978152, 0.6460932219134524, 0.6236719658056369, 0.6452086368836951, 0.6258160032800761, 0.6337881186207822, 0.18769916750720927, 0.22829572600404713, 0.13183547679967955, 0.14502169651002694, 0.19818594993731542, 0.27929996792273537, 0.14609542488485217, 0.16597438791023889, 0.14400729739314033, 0.16315739029292342, 0.13671837270634402, 0.126516983919282, 0.11555347507184288, 0.13922152406116328, 0.13701489930354382, 0.14741951636616346, 0.1752797270156028, 0.2041097841940097, 0.9679150759080455, 0.9667155272076834, 0.9126591112566721, 0.9432225145126869, 0.9215472313022377, 0.948481727333421, 0.9450833524244878, 0.9666007130021173, 0.9439713773793184, 0.4281230897427102, 0.4240521912906635, 0.4307828561035063, 0.4500651241870136, 0.4063511652238604, 0.46513819547832536, 0.4359949746651044, 0.4730199805138049, 0.48666743082124875, 0.6362990234616703, 0.7394505469508481, 0.6666412540592271, 0.7218303048622678, 0.7123272096512521, 0.6486963424987306, 0.7166905270854378, 0.6939967184456053, 0.7054177983404737, 0.23348416342375, 0.31921184185800655, 0.22777485028023914, 0.2018540413671317, 0.2223363328970609, 0.20564991824240464, 0.27365735346208564, 0.20613786289960867, 0.2458928293163969, 0.16597211018809066, 0.2132040723644636, 0.19436070713499887, 0.292549050344858, 0.193977888423005, 0.24973975528745906, 0.2082197909636898, 0.2489217701368165, 0.20655923751913874, 0.2035306049316159, 0.09690331767434313, 0.16181667301049651, 0.16720427912377323, 0.13509810340749973, 0.11959785430790648, 0.17658838657042852, 0.18543808582518928, 0.17303239746427856, 0.3321983245301281, 0.31562605861377924, 0.3099800859407531, 0.2617267195478289, 0.28586392924175286, 0.23732473540715304, 0.3740437121883574, 0.3561865690044469, 0.32922842735846225, 0.08378396588785852, 0.07293318230977841, 0.1064901244813844, 0.11831835678349545, 0.11232221309987767, 0.0900872279359124, 0.14733781798679668, 0.11621336790734427, 0.1196833761590429, 0.20785552158180365, 0.22182924599229004, 0.22799233129379126, 0.2294232129280519, 0.24652349369109716, 0.26288636788456465, 0.20843365252153134, 0.22120379925193245, 0.21845681751713442, 0.6253420377762191, 0.6073325781792863, 0.6259416091966169, 0.5821918235286715, 0.568336947155252, 0.5754699863722679, 0.6138047979851904, 0.5810334715978777, 0.595311224383414, 0.10424593670977078, 0.11716315443836389, 0.12892785343421254, 0.1568715197905176, 0.14990198707284141, 0.11619678877853168, 0.10324793288196576, 0.11663570017582447, 0.12248008597717941, 0.14988947281064158, 0.1832193172757023, 0.17976138323740365, 0.3106685240953403, 0.1641769576157096, 0.23301252615297274, 0.15344654425860604, 0.17970149791765766, 0.15614653479430984, 0.4186197315702551, 0.35677092727753357, 0.3787220987429859, 0.3861635384554294, 0.3845530570120119, 0.414876905869097, 0.3990957796684794, 0.4067592383382286, 0.43416705677485257, 0.28906017649944316, 0.2919813850103541, 0.28660763872460293, 0.28327925072411386, 0.24644929575736718, 0.2742334298172524, 0.2875527246959404, 0.32166592633387703, 0.28464064772623754, 0.26854194330044034, 0.20892345837134962, 0.21508594308127682, 0.1891661403267385, 0.19128029444050676, 0.19282589245083592, 0.20751235377570942, 0.2380704770406532, 0.2215847537392326, 0.2569468470749553, 0.207253363467092, 0.31166784794526703, 0.19877182415277528, 0.23931888959133707, 0.3199848737319436, 0.33345749900092236, 0.1899216225921615, 0.4120387288397743, 0.5412179865422578, 0.6225145408458791, 0.19700072573725136, 0.1741438505476397, 0.5850059742007522, 0.19814802458040326, 0.6577154335399404, 0.6168193147349263, 0.6776202342769064, 0.6693502967579625, 0.20404675799474825, 0.2077830343687911, 0.1944064116031895, 0.20981250604987345, 0.20589593461972067, 0.20452905912308028, 0.20775168415552758, 0.511277888175514, 0.20517107531482381, 0.20286638127818213, 0.20733814650288818, 0.1961851934637151, 0.2012733844724801, 0.21860485661566076, 0.22068534324012712, 0.21809825021612506, 0.19363069958421952, 0.09021414751741363, 0.09785249063484391, 0.0858623770698338, 0.091481424217011, 0.09565011474313956, 0.09684642388080522, 0.09084349652458845, 0.10049309232322723, 0.09203515039129484]}, "mutation_prompt": null}
{"id": "24c2f07f-89a3-4a5d-b48f-64d7cb7003c9", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "42c5b6c5-ca5a-49d9-b30e-c1a836c5ded3", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR_initial = 0.9  # Initial crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Dynamic crossover probability\n                CR_dynamic = self.CR_initial * (1 - self.current_budget/self.budget)\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < CR_dynamic\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Multi-trial selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                else:\n                    trial_2 = x0 + F_dynamic * (pop[np.random.randint(self.population_size)] - x2)\n                    trial_2 = np.clip(trial_2, self.bounds[0], self.bounds[1])\n                    trial_2_fitness = func(trial_2)\n                    self.current_budget += 1\n                    if trial_2_fitness < fitness[i]:\n                        pop[i] = trial_2\n                        fitness[i] = trial_2_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Introduce adaptive crossover probability and integrate a multi-trial selection mechanism to enhance exploration and exploitation.", "configspace": "", "generation": 69, "fitness": 0.37346760495663484, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.23.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.7607282317728467, 0.7422835306204111, 0.7819595751486919, 0.7485813236181948, 0.7612851822100255, 0.7419172119675393, 0.7398400308051317, 0.7506379481477877, 0.776076575111276, 0.5566590017890367, 0.5603019737653359, 0.5480766674253166, 0.544838941545303, 0.5347275996266936, 0.5341098029612021, 0.5477411788764829, 0.5632025594410722, 0.5640059174607832, 0.18423292451562567, 0.3272753374282201, 0.19683471997465574, 0.15523669526857753, 0.22533686081169313, 0.22343373369416863, 0.19880603019440946, 0.21659322666241754, 0.20499640256499174, 0.1556177346700086, 0.14312442910632162, 0.13879676485805081, 0.14380894507672615, 0.1372926497107052, 0.13351290836068985, 0.1465205804292805, 0.13720844821937772, 0.23712069867348196, 0.9431613324894018, 0.9677845502338974, 0.8631445798239208, 0.8754943719631828, 0.9494706698544403, 0.8775371241322021, 0.93858280490388, 0.9071610373474307, 0.9209556799402682, 0.3815088686857778, 0.375694176419354, 0.3986588175478344, 0.4132916525237059, 0.3986715682822499, 0.43143526130324883, 0.35153025653079417, 0.39992841867553797, 0.38891749823570865, 0.7525893100624935, 0.7260391383307816, 0.7285600203454028, 0.7545922107061989, 0.7350517376976546, 0.7869245572810308, 0.7341129661673096, 0.7259057561314288, 0.768333150842279, 0.17589794805012693, 0.21812613950772963, 0.19705483722708472, 0.12594881816288395, 0.3658365463771812, 0.46521606913681324, 0.19936750969483474, 0.24338362977643335, 0.2791275896901041, 0.15562635359915444, 0.12295859632966999, 0.27507705766622836, 0.38166220819906416, 0.29774257820723526, 0.19520606885887581, 0.2392696997672309, 0.19708399628318107, 0.17776297366481553, 0.3742046954106403, 0.3662801920974552, 0.32544702991385244, 0.3538335524740921, 0.36136426635554064, 0.2366518197899521, 0.3714194916469158, 0.3873872004097382, 0.3511069330458013, 0.5531360729172083, 0.46897435543946964, 0.4817821507599471, 0.563154121235747, 0.51395895874795, 0.5322461965428145, 0.49536982140484165, 0.5895114479416697, 0.5608899025278744, 0.13909871447666777, 0.12988651840197252, 0.17262733116616769, 0.2321059738921275, 0.1412828325554849, 0.1728773704916483, 0.09162351093076737, 0.16123254900512218, 0.1803186634974867, 0.27469910444119483, 0.28611050495013735, 0.2662287460323126, 0.32224958350183197, 0.27207771909499556, 0.2844884629918015, 0.27071135710661975, 0.28542886994314565, 0.2853306691170373, 0.623990272227277, 0.65117718021909, 0.6574672534366894, 0.652450411873998, 0.6519058942408658, 0.6611802505403203, 0.6775086533186495, 0.6309791148492601, 0.6788366677925743, 0.15404772328622607, 0.11611105143590306, 0.1479575837629269, 0.13310696777889985, 0.13004520971424594, 0.18805489824312627, 0.12053845027094323, 0.1409756461477133, 0.12836497164156213, 0.18041416074016237, 0.21245921502231946, 0.16021389520392948, 0.20878764012370543, 0.2640599016891775, 0.2324074375998687, 0.2391920863705259, 0.19375148518748964, 0.18631361585678774, 0.37652834387022793, 0.3692336803004299, 0.38742001404061066, 0.36580826077062345, 0.3593661618866424, 0.3621176263559911, 0.38519467670625007, 0.379259372107161, 0.38180170687439663, 0.29882307389888274, 0.2940801581713156, 0.2974222966107728, 0.29806601121099396, 0.3141908932284122, 0.30293262964713763, 0.29632757003915344, 0.31199206891017983, 0.3245394340254949, 0.24054588155031464, 0.20384157798712432, 0.2614552685411581, 0.241185624189163, 0.18914282923789483, 0.20695397935486426, 0.24095634401192567, 0.2095385297089568, 0.18445149157175145, 0.23850867593434577, 0.22766415263037532, 0.22998301126489373, 0.33975860119342627, 0.29451034905276563, 0.2294427719299016, 0.3239852735087828, 0.34233943516212084, 0.3651770356576295, 0.7160140180704824, 0.75877761810099, 0.1762308116317396, 0.16664035962326507, 0.19662835914908106, 0.7335688882518532, 0.7861101122962005, 0.6274488577783207, 0.17009945646706115, 0.7086576262322077, 0.21146950934243247, 0.5675886372019732, 0.6441887503218793, 0.1593026486140754, 0.29468978932619905, 0.6920270580575895, 0.20769324105600795, 0.7080752332762668, 0.22216286092971727, 0.23025658477183708, 0.20987820532479295, 0.1958535958580796, 0.2126826450730268, 0.1961372847122148, 0.20112001812978197, 0.20057461777327135, 0.21628138226828586, 0.08906080136100625, 0.10116627076476636, 0.10657847049243041, 0.07952292640188807, 0.09170425632095047, 0.0889151952431585, 0.09946644489326828, 0.09087515304130334, 0.0895073633327782]}, "mutation_prompt": null}
{"id": "05bc4d3e-01a4-4c38-8389-114066f0ee94", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "592ed20a-22e6-4f34-b221-1c8bdfcf904f", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "9a47c0e6-ebbc-4ae1-b074-dccadfa12f93", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "34c230be-23cc-4f62-9d43-94e05954ce01", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "ad3d9fe0-8270-42ff-b2f5-91736103d2b1", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "5e053400-fa55-4545-a117-44bf41d1aef5", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "001e1443-5f54-4b11-8d2d-9ee06edbe396", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "b84c1abc-920d-4029-98d8-afff287757d2", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "e63026e3-060b-487b-89f3-35105582a2f0", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "7cf809b0-3cb7-4e98-8902-ee9187d945c4", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            # Enhanced local search\n            for j in range(self.dim):\n                for _ in range(2):  # Additional local search iterations\n                    local_sol = best_sol.copy()\n                    step_size = 0.05 * (1 - self.current_budget/self.budget)  # Adjusted step size\n                    local_sol[j] += np.random.normal(0, step_size)\n                    local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                    local_fitness = func(local_sol)\n                    self.current_budget += 1\n\n                    if local_fitness < fitness[best_idx]:\n                        pop[best_idx] = local_sol\n                        fitness[best_idx] = local_fitness\n\n                    if self.current_budget >= self.budget:\n                        break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Optimized Hybrid Differential Evolution with Adaptive Divergence Control and Enhanced Local Search.", "configspace": "", "generation": 79, "fitness": 0.38765589304373294, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8430425214047544, 0.8096821420570188, 0.7968338373629253, 0.8315558043756286, 0.818560142240036, 0.8194040066169592, 0.8286269125351889, 0.8318140891540435, 0.8464624315645581, 0.6288881250635888, 0.6336064663993216, 0.6066946827024162, 0.6506952024413148, 0.6191302619202246, 0.6151880326047086, 0.6284561345326257, 0.6080807779286734, 0.6223389212992118, 0.15396485058376197, 0.1312778455321597, 0.12797600538113674, 0.14360846166042907, 0.4725709239725703, 0.12810623150840605, 0.1228123546725659, 0.13244405379948165, 0.14469150930222408, 0.12136603461679829, 0.12300069150077708, 0.14504728424076307, 0.1119498026195106, 0.11855461277931523, 0.12917667219799, 0.12321971322385672, 0.1193553226195887, 0.11335816086201955, 0.9376942953408001, 0.944769586458322, 0.9235308930758276, 0.9205904854959838, 0.9445257729938352, 0.9368347585493312, 0.8967599918718708, 0.924081262771422, 0.9219777203053892, 0.42516543822222874, 0.41708377702981514, 0.48230524763026306, 0.5345346705960097, 0.4939526308580683, 0.5281616283222015, 0.4438284162888332, 0.4697062287415159, 0.4336069561475647, 0.7584558351899978, 0.807291999196015, 0.7760269864406478, 0.7807841528679377, 0.7896265946500163, 0.7809261895636173, 0.7585183524964996, 0.7869918089042777, 0.7368017533843076, 0.27647005097733013, 0.22284495495715706, 0.5197125227249104, 0.2687269347955503, 0.26739599618613363, 0.33501782732347074, 0.26865410352845676, 0.40826953031003554, 0.3789350530939616, 0.12286437459372879, 0.14770116835346325, 0.23321421417960553, 0.2733568378575054, 0.2380964599992108, 0.22111962589882117, 0.40668087256642294, 0.21200489114547216, 0.24192671854329606, 0.3410750457242778, 0.30422637413272746, 0.3244878586416112, 0.33943462793400114, 0.3035011064534068, 0.3413393756404488, 0.3760022692273336, 0.37453433727909025, 0.3838130011551125, 0.4658944230737476, 0.515290745836585, 0.4761164673838023, 0.5470628535160329, 0.45411571968490627, 0.4841721631750463, 0.5483676953497691, 0.5360209803960788, 0.5311430262097409, 0.1384837220805193, 0.08777551429428154, 0.15621856585923144, 0.2962382066757613, 0.28635725935636636, 0.2466167404918559, 0.15898667205560124, 0.18132262178963487, 0.13056731414031875, 0.31516162442590057, 0.30639285911120473, 0.3045617455141443, 0.3002328224686459, 0.27823106909825257, 0.28625679530922754, 0.3414895653505522, 0.28873659786871, 0.3133325316146436, 0.6754072895209298, 0.715827150055909, 0.6694017032072109, 0.6801173700761672, 0.6807330045446726, 0.678652783294113, 0.7041828598300994, 0.6845692993482124, 0.7054123229706875, 0.10800674499071816, 0.11798288623854769, 0.1445577655575624, 0.12651386005785736, 0.13558046444471095, 0.10827751235428751, 0.36942280926946924, 0.11205583522564067, 0.11308884402742292, 0.20701678850970717, 0.14734214511538812, 0.1999435558194409, 0.21236462277791435, 0.14514714760883818, 0.2345094995443059, 0.1965042649697275, 0.14812960610154202, 0.1919491941668774, 0.39428770855795703, 0.3808047515909092, 0.3848914267360162, 0.3857483742794936, 0.36792037187935567, 0.39307193841765753, 0.4202430356107497, 0.43820172714394046, 0.41306780362599227, 0.29982799172481567, 0.30870913859166604, 0.2908759625094802, 0.3180762979251377, 0.2810346894448199, 0.32476001240142494, 0.33744706452195583, 0.3507391197573435, 0.3574646036217669, 0.2226991182165925, 0.27203801211233347, 0.23602565683864796, 0.21291483879010742, 0.29805384274199387, 0.20725723673416208, 0.21839151950858915, 0.2336515519991742, 0.2332485158985208, 0.20821010552545693, 0.20960432464251322, 0.2065219870566981, 0.20671025506264917, 0.1825490331856514, 0.21574170317704022, 0.2467514485846909, 0.19550232559738034, 0.19989647763499274, 0.16807053748957823, 0.6403964406482189, 0.763506407302114, 0.17544766653808985, 0.7220312281797452, 0.6606468780905208, 0.7455516277343386, 0.6287754684088761, 0.781728429622501, 0.6896638295061446, 0.7122895415615041, 0.12715843349428635, 0.16163524353148928, 0.20086732643422467, 0.6319530477720627, 0.747012865995083, 0.20713571504689043, 0.2092493001815423, 0.20843364880075899, 0.20406617182127806, 0.19733241678654212, 0.22037386209966014, 0.18588161351358035, 0.20551988455062797, 0.22548066684084656, 0.24854136324249898, 0.2330811198654963, 0.08433843380005424, 0.07879301005849515, 0.09629465679554339, 0.09608295859971983, 0.09612599699604996, 0.09399757080246196, 0.08808226316091206, 0.08832121675038618, 0.0815418621262961]}, "mutation_prompt": null}
{"id": "3e88a39b-1931-4a45-984b-3a734a30d11c", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "90a21df7-4b55-4ce0-b838-164af37f2b98", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "5936c020-6f5d-4524-9fd4-89e35574d250", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "1f90deb4-f32a-48e4-ac72-b8650bb47e5e", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "5e6e19fc-587d-451e-b76b-9683f50a5f84", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "d8e19260-40c1-4bbb-8037-3e776febe90b", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "60e2d340-8be8-472e-8794-6ce2676ca11f", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "fb7142bb-da5a-40d4-892e-a13c1c36ff99", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Stochastic perturbation to enhance diversity\n                if np.random.rand() < 0.1:\n                    trial += np.random.normal(0, 0.1, self.dim)\n                trial = np.clip(trial, self.bounds[0], self.bounds[1])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Improved Hybrid Differential Evolution with Dynamic Scaling and Adaptive Local Search using Stochastic Operators for Enhanced Diversity.", "configspace": "", "generation": 87, "fitness": 0.39279681088138574, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8009559885016284, 0.7965460168220875, 0.8094008233533622, 0.7929481753498638, 0.7933048264760076, 0.7967609231154006, 0.8106470077319181, 0.822041418190339, 0.806032597135134, 0.624211801242945, 0.6101549728424882, 0.5928199129790108, 0.5948866299145521, 0.6322232011934619, 0.621584230419962, 0.6243297655310011, 0.6118554902272509, 0.6210729956244948, 0.13477618068880037, 0.1509493279050348, 0.1571841028228167, 0.14267783310139237, 0.14245971796185664, 0.1717357557473077, 0.13102758414827964, 0.12938247963999128, 0.136380433308948, 0.2786554612091884, 0.11166952200111158, 0.11323373647005974, 0.1330253992948789, 0.12805589780937932, 0.12418132120192371, 0.13356977164370532, 0.13943574293380845, 0.11624324045361811, 0.9022157900656279, 0.912121392185917, 0.9321576494674451, 0.9351880243987644, 0.9729123619840128, 0.9501495199846585, 0.9238572019116359, 0.9453984649415269, 0.9481972077278003, 0.46390528224196004, 0.4541044427048643, 0.49357198199404717, 0.42329262863996253, 0.4508985158479274, 0.47546885375456127, 0.45580493010263523, 0.42565333038665576, 0.45855095541624535, 0.7769044661937513, 0.7812090778774422, 0.7191400806235138, 0.7813236268556761, 0.768954931011151, 0.7662067566528961, 0.7756938811582363, 0.7260336090215687, 0.7897492731405941, 0.24870520879818847, 0.16879525032512033, 0.45975870006596165, 0.35757651663986856, 0.2461255540937758, 0.38046594762212593, 0.21372601146723536, 0.374575641785334, 0.5757288689861663, 0.18805533474670144, 0.34318000359104506, 0.23570922646968817, 0.23748088673226342, 0.2988622972448396, 0.3627856300891882, 0.24828760648665904, 0.2587613797697078, 0.2186656552306564, 0.34141454171109087, 0.3328843973230793, 0.25769233770799893, 0.37270424246014844, 0.32123726896995053, 0.34162915195611654, 0.3339645542500881, 0.32276530470454123, 0.3520136765514661, 0.45056036428826496, 0.4582315605336924, 0.45273101377152114, 0.47757136553185564, 0.4740045783743032, 0.4179697909314969, 0.5447323280412804, 0.5192559463010659, 0.5056152487283407, 0.12466178141426354, 0.12606782039638909, 0.17149994731552232, 0.19131515755668194, 0.20161419609473386, 0.15455358306884537, 0.2022021780514025, 0.11570887079730541, 0.16968495631802794, 0.2811060298242062, 0.2906776200610599, 0.28533360695429244, 0.3171374792531678, 0.3137435887570462, 0.3247262710926546, 0.29552128204230343, 0.2540345468952121, 0.29742686497765025, 0.6735659604841272, 0.6646359954081955, 0.6866678488087941, 0.6844610888496592, 0.703867033035096, 0.693416659329744, 0.7254743275703992, 0.6741233588429905, 0.6823907533994134, 0.12514076832902976, 0.18208824418574898, 0.14010311823234423, 0.15030836636387868, 0.12661848937892717, 0.1217129669085465, 0.14580847049632117, 0.15274951187261343, 0.13094352715769342, 0.16801508849069846, 0.19558281781209963, 0.21643416566229057, 0.18296770211075863, 0.18501453813518998, 0.15528644071254016, 0.2905744058393459, 0.16536543183249997, 0.1633891127761835, 0.40082615637146735, 0.37208410575299666, 0.4005913559238675, 0.3885636183444596, 0.3954776329958628, 0.38708705910430885, 0.44279323997300035, 0.4368671895826002, 0.4141910957795464, 0.3085278236019342, 0.3559260775392472, 0.2842587379675038, 0.30031737237967493, 0.2996161192480553, 0.3032565313279292, 0.3442644782516985, 0.34126278178914804, 0.35182705751490195, 0.2102326067860355, 0.21695193386950606, 0.252955403856332, 0.26668520102299575, 0.2215564949462292, 0.21204319725131193, 0.2338605891393325, 0.24301075899950764, 0.22267889580060507, 0.19254863376532416, 0.2649736841338902, 0.18411130225209815, 0.3273587006712877, 0.3180808390687392, 0.2949874607447919, 0.20160150902064766, 0.21260192893400232, 0.28064038551282566, 0.8451751613292473, 0.7986157987009193, 0.20290498209293029, 0.7608239072474363, 0.7509381488293916, 0.6571435214170419, 0.6643856970063512, 0.198121500364694, 0.7538293170029748, 0.7430693397550363, 0.6366918982379657, 0.5097572329985479, 0.5803837644719707, 0.5689370095809325, 0.731809446830822, 0.15415760605055928, 0.7069796872149625, 0.20376608559897502, 0.20413314034304408, 0.19293999015719077, 0.19632892524917478, 0.18498741239070782, 0.20453424163748646, 0.21162706042470358, 0.24312338878970474, 0.22771006921046655, 0.21815386820997829, 0.10198711197472365, 0.08982589050673417, 0.10518621601354627, 0.10256336643652197, 0.08838790944218033, 0.10085992076407801, 0.08719500939471114, 0.09566384770460923, 0.09376583131451899]}, "mutation_prompt": null}
{"id": "7d5d8aab-5a7e-479a-af59-50ac5dbab6fa", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "d6bff2e6-d76f-4299-aaf8-4fcfd2d1b7b9", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "c51a46ba-cde6-4bd5-a194-7cbc65fbaee5", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "517999b6-c782-4e1a-b87b-12af17177a9a", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Preserve elite solution\n            elite_idx = np.argmin(fitness)\n            elite_sol = pop[elite_idx].copy()\n\n            # Adaptive local search\n            for j in range(self.dim):\n                local_sol = elite_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[elite_idx]:\n                    pop[elite_idx] = local_sol\n                    fitness[elite_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling, Adaptive Local Search, and Elite Preservation for improved convergence and robustness.", "configspace": "", "generation": 91, "fitness": 0.3967209675842309, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.25.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8078163191014605, 0.7835476770575511, 0.8136855870598964, 0.8081335331090647, 0.8043502164053264, 0.8193026586003337, 0.8120456887939186, 0.8114257398799031, 0.8112791688962471, 0.6701089238022307, 0.6505307811664953, 0.6474133360231858, 0.6239792344916875, 0.6531242808131466, 0.6432354791832792, 0.6644836558418008, 0.640064953074024, 0.6696471743368249, 0.1162623265771967, 0.13732783041159013, 0.13431694658977378, 0.13349947199761047, 0.16192841001717329, 0.14098633231977986, 0.2580710995694008, 0.14161041309157174, 0.1239332990958163, 0.1536830169633624, 0.1193873627349884, 0.11764040842381507, 0.13771454059190769, 0.12605727087052765, 0.1122533040726923, 0.12277124408610707, 0.1522954370134143, 0.12778622644491355, 0.960100978871667, 0.9159949327733711, 0.9084875767524438, 0.9026406577009767, 0.9574708994915796, 0.8995219852225669, 0.9002050545379772, 0.9355069753477495, 0.9404690867148071, 0.48486259352822303, 0.49148452592759273, 0.48115460290763457, 0.518567682255962, 0.5032024800089416, 0.5072177615745048, 0.5126031103496727, 0.49168818624855926, 0.4733137010179632, 0.7586167251796188, 0.8107099251793015, 0.7603702464486394, 0.7855761710957881, 0.8390430716321785, 0.8408249727533921, 0.7399098973354348, 0.793308382633136, 0.7349708005706515, 0.234380215955049, 0.21434271316173248, 0.2742327985673656, 0.38591674777065943, 0.1794177985826183, 0.23705946574640224, 0.4641661504787893, 0.23255233031870703, 0.49671670363987774, 0.4764353606310736, 0.1875808526794981, 0.22167596084700125, 0.18641349153925324, 0.2483985975798041, 0.22059845146927148, 0.2360040043888988, 0.37590145925539986, 0.2474309110318892, 0.4230360958856533, 0.41980713667288416, 0.40292445618625694, 0.3756012038183669, 0.37259105841562934, 0.3529505508102566, 0.37178050252473993, 0.43099749833059864, 0.38658300413523816, 0.528834171916841, 0.5098254850407529, 0.5286786015830307, 0.5213736183814033, 0.4988691225351837, 0.5453566767979183, 0.5825577790140264, 0.5153980126277973, 0.5356961273345207, 0.09070603952361211, 0.1354794437357496, 0.18365627174311117, 0.16782325817478394, 0.28873512164661674, 0.2975226298595405, 0.2103183489220939, 0.13388040072502905, 0.14559892865326096, 0.319234516065667, 0.29652921885741, 0.302817910808725, 0.3334534816358683, 0.328647492472529, 0.34696002428900163, 0.31065214529918206, 0.3151134722262994, 0.32579230563289685, 0.6949122956930329, 0.7042465780027403, 0.7220260739238145, 0.6961530552025587, 0.6763188534403928, 0.703195733792325, 0.6947192956155486, 0.7066995730723646, 0.7297644132249004, 0.1009711371152976, 0.13934391405715107, 0.1270478787353413, 0.14646122263829042, 0.11745644442822756, 0.13324801014863774, 0.1491474169046607, 0.16935907653973337, 0.13676390001905636, 0.17677809418759227, 0.18298737152550315, 0.17566968358759438, 0.16609645913871884, 0.15112495307986118, 0.1890470214144282, 0.2063859624285156, 0.14962538399206837, 0.14142116630861257, 0.41538322434727504, 0.3962013190757897, 0.413460713530041, 0.38870983478699905, 0.40520949427163455, 0.4254769591668658, 0.44077186530872525, 0.4406465940279408, 0.446273296547261, 0.30622664002349564, 0.33381684261612377, 0.3323644848919355, 0.36976428175592624, 0.3018473786338681, 0.3215393517720341, 0.3719928662626292, 0.3368022109743122, 0.32714911044452366, 0.21203085009888523, 0.24561732750849286, 0.2705078103428673, 0.20199053215388307, 0.2273875229408463, 0.1951694282943759, 0.2164597261191764, 0.2543287657229415, 0.19980313170549036, 0.20129055092821957, 0.20126497186572967, 0.20823192271395885, 0.20622930725279653, 0.27889005875663153, 0.24722090132525432, 0.22508657869979143, 0.25034321884932664, 0.3060716973156148, 0.18992273950099348, 0.7653277104068845, 0.7189346960903995, 0.5685543208030566, 0.7454145064487316, 0.8603594481939539, 0.6301702872774748, 0.7078817356859548, 0.7243026319122241, 0.7433045166681642, 0.3107109069319879, 0.7839559262051725, 0.16189171675243685, 0.18562648299234474, 0.16780128694449503, 0.1990320893780242, 0.2093748870304094, 0.8034866672596942, 0.209122609679516, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19322835701083663, 0.2090915620224969, 0.2097484395691428, 0.2088652629301334, 0.08455988548120497, 0.09666566454068981, 0.08850863044159718, 0.0920056193005303, 0.10087548101638788, 0.10724569434074183, 0.12364249426068163, 0.09123650703590624, 0.09312934043424081]}, "mutation_prompt": null}
{"id": "179e9b52-4f57-4e51-a7b7-3ecc08fb6302", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                dynamic_CR = self.CR * (1 - (self.current_budget / self.budget))  # Adaptive crossover probability\n                crossover = np.random.rand(self.dim) < dynamic_CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Enhanced local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                if np.random.rand() < 0.5:  # Selective mutation\n                    local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Improved Dynamic Differential Evolution with Enhanced Local Search through adaptive crossover and selective mutation.", "configspace": "", "generation": 92, "fitness": 0.30132400914873014, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.22.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8029839947625912, 0.7750898083782747, 0.7996515492250579, 0.8232643965023081, 0.7823962947002947, 0.812678870167028, 0.8049247380447616, 0.7938039217959845, 0.7974531938300126, 0.6299229764237015, 0.6024026523071206, 0.6271501454514031, 0.6193180820699022, 0.5902847490126413, 0.6181471347498371, 0.6161803195353232, 0.602012889404993, 0.6303210610803589, 0.2677929771558909, 0.253900566524215, 0.277652342139846, 0.2543579083531595, 0.24932158442646835, 0.23749803469906738, 0.24597867151958197, 0.2682347086731899, 0.22491559306594, 0.19404068944342256, 0.14547275830358086, 0.23301135607437606, 0.20155177287113946, 0.20810571138294753, 0.23669587170738293, 0.1952854700869795, 0.19203267557502668, 0.15051482337814304, 0.9099630313093944, 0.9311511133399698, 0.9043170962863035, 0.9224469434514174, 0.917722398863761, 0.8903196672643139, 0.9421785019815208, 0.958284651239685, 0.9216108478857323, 0.3662925084550288, 0.30599173548380654, 0.3499892199878095, 0.34677430501503337, 0.3489722291094025, 0.32903394563711563, 0.31645774068493926, 0.3417805899021146, 0.3276354509680648, 0.4977518942584912, 0.3483393790670142, 0.7041205990525543, 0.5347683705750492, 0.7420901313767485, 0.5137599778411396, 0.3325032388482596, 0.35282064969873095, 0.3221229769846624, 0.16730223325488291, 0.16575458459250947, 0.20713157544308347, 0.1802262651639872, 0.1583640921633549, 0.1805953176091296, 0.18339456468501025, 0.15650993869625962, 0.19324653111397416, 0.15302614230221245, 0.17753860241614217, 0.15449231834256538, 0.16514137532352635, 0.15290539065571962, 0.1588727202243585, 0.15935450597959222, 0.16372497434939937, 0.18155311131810292, 0.049079266180934944, 0.011206259618673386, 0.04181296446648297, 0.03278915816303929, 0.00014255854806399793, 0.005418967312662115, 0.013912220223583072, 0.05547777040108626, 0.0017048139828973463, 0.19204052320425358, 0.2309413981534051, 0.16018472561720132, 0.17505955450750155, 0.0782249901787816, 0.11106330045829149, 0.18413485258866724, 0.18177584132661628, 0.11600632877997119, 0.011107721521414704, 0.07804270961251569, 0.06699447572544526, 0.03914175883944737, 0.06782892062834711, 0.06874544577246855, 0.045568021390282265, 0.10746808062197566, 0.07503005057118406, 0.1637393253479309, 0.17703446559995717, 0.15035382102719486, 0.16163542401176856, 0.18547757242130491, 0.2004818469337346, 0.16170054266056288, 0.16692332177864433, 0.14535419650621462, 0.48262019233166153, 0.47618411907559166, 0.5243753148814583, 0.5309194658467056, 0.4857485018392106, 0.5154464479949352, 0.5201451831331739, 0.5022043492117593, 0.5145922557329479, 0.13024047501166258, 0.10437022300508214, 0.12505172039803825, 0.16586674811258895, 0.12579018031427291, 0.13281455445629076, 0.1553899962057158, 0.10275776168547723, 0.13773457742293194, 0.1699296064507012, 0.16191772295659468, 0.14715570549538026, 0.19499964088654842, 0.18011366195268907, 0.14602114867180938, 0.16693742801929223, 0.1598017832626809, 0.1465149241513456, 0.34507951504559664, 0.31597578292485107, 0.32543422679540324, 0.3060350453976838, 0.30805492267376167, 0.347181554390086, 0.3520981493855292, 0.3651128613167439, 0.3561574371053311, 0.24191141729614196, 0.23606615936628494, 0.24334949171613152, 0.23845575886076176, 0.24089422509085612, 0.2154163692251505, 0.29112012740666116, 0.30812315909067933, 0.2643085569546513, 0.20694321591963116, 0.2014405512271631, 0.206272550301004, 0.20041815005935737, 0.20956350774029953, 0.23362644975547742, 0.19574583038259608, 0.22872214173466787, 0.21250057178294357, 0.2934825432583896, 0.3281108284116724, 0.28968899722642394, 0.21314916999708844, 0.29020112139860654, 0.3910884444443361, 0.3082422512877422, 0.3400612730765824, 0.32819803487402144, 0.18704064256794717, 0.24272441117495058, 0.3479197629146519, 0.6920034155811161, 0.3082759985430432, 0.5283785779621619, 0.3135793362831224, 0.5526762032488254, 0.42831533632149654, 0.34397219474227736, 0.3153126203840094, 0.32293967645180854, 0.2277522756034911, 0.20304618241555272, 0.3847237675007523, 0.20886065969072698, 0.2099502257040231, 0.20856213222259312, 0.1868425742821639, 0.1980034996938802, 0.1844633564239494, 0.2023902316757351, 0.2187232161602608, 0.2143226396675264, 0.19827585638606027, 0.22661369841788537, 0.2150187134377669, 0.09510763085271867, 0.09099543764578466, 0.09107359488716171, 0.0888377549701238, 0.08321605999289072, 0.090852558673716, 0.09329481557620689, 0.09223139959769755, 0.0895285113384593]}, "mutation_prompt": null}
{"id": "c3cfa0ae-e6d8-4f5e-8297-03bfa3557f05", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "6867976d-364f-44a3-a075-4acbec456851", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "bd7b39ec-5085-4885-bf79-9f6ed9184000", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                # Variable crossover probability\n                CR_dynamic = self.CR * (1 - self.current_budget / self.budget)\n                crossover = np.random.rand(self.dim) < CR_dynamic\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive population size\n            if self.current_budget < self.budget and self.current_budget % (self.population_size * 10) == 0:\n                self.population_size = max(4, int(self.population_size * 0.9))  # Ensure minimum population size\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Adaptive Population Size and Variable Crossover to improve convergence speed and solution accuracy.", "configspace": "", "generation": 95, "fitness": 0.32217854336804275, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.23.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8174385514325845, 0.7980790358578523, 0.7956051039156968, 0.7913821493465489, 0.8066718159575932, 0.8314323425681823, 0.8171767333725385, 0.8207488428014074, 0.8058996923020055, 0.6248269043161343, 0.615301681775972, 0.6102704395601662, 0.6206338150053708, 0.5999296608570286, 0.6314639853504243, 0.599842307754894, 0.6229049332704013, 0.6405113773204405, 0.2842642173535732, 0.2979380037041842, 0.25452121417986395, 0.29359803177055055, 0.29222589993998205, 0.23965637599956724, 0.3381051267713501, 0.2551003719724788, 0.2702819875706226, 0.2470638241801325, 0.25222854527722616, 0.245878381596358, 0.2343526092050362, 0.2560887179088932, 0.2224126171696339, 0.2386339528271948, 0.24261169976068542, 0.28994659297352077, 0.9470824926162237, 0.9087611550601158, 0.9170239413900043, 0.9667324424423962, 0.9254595614668932, 0.8972856658773405, 0.9340264420759614, 0.9571425716467741, 0.9548891294924438, 0.3592955016111832, 0.35846497782695963, 0.400327471803932, 0.3765901682279664, 0.40859716830997217, 0.40664996941044984, 0.3700940685270123, 0.3908972308676868, 0.35669770476896656, 0.6043812124070984, 0.5262223071115284, 0.6272742064928616, 0.3235283405960441, 0.41213944611075726, 0.3197148923766818, 0.4882373522829355, 0.41893691841639447, 0.6830275184538126, 0.35713466842077324, 0.16075517037874054, 0.18316565568971832, 0.1829232934026218, 0.161271315194914, 0.37083270089353404, 0.20977158690586117, 0.20381774802207087, 0.1960144103381909, 0.11955321316252199, 0.14666528129424206, 0.17100461649096466, 0.2143389650881542, 0.16451311361832033, 0.15440052423534012, 0.20245604535490813, 0.18522985130660174, 0.1801031790077624, 0.04088601713824824, 0.03021419650602275, 0.01548614508305346, 0.04250541757714277, 0.037957139510415794, 0.025177169739011518, 0.07240681783738823, 0.07198775119690004, 0.06997910419334952, 0.18106887321906684, 0.1767377113062768, 0.18589128156289003, 0.11484535416920283, 0.09355864345875597, 0.12390906191704198, 0.16725234583829607, 0.15643628378326158, 0.17880369088390613, 0.1004170306223594, 0.03949144902735713, 0.07645321017060558, 0.08610386683167248, 0.10815451390909636, 0.03210311889065942, 0.09137409525500606, 0.1645646699896397, 0.04680810567892968, 0.1524341219600538, 0.17499355394068083, 0.1935590613532744, 0.20363813120521568, 0.20149177716421307, 0.16420052906245908, 0.21422174480399192, 0.19101856940933482, 0.1700858464936933, 0.4914913841908366, 0.5308744254358959, 0.5001528247276565, 0.5029893349516483, 0.4848658265485739, 0.5046211258361604, 0.5115770921540556, 0.4758148115352513, 0.5235528154006613, 0.14130199613500571, 0.10963959890798614, 0.14213480744844686, 0.1443142049544338, 0.12126184613954083, 0.11417248536851854, 0.11443820256419279, 0.12352096467553497, 0.1552953006388812, 0.15854823472946422, 0.24924648946769445, 0.18431718722345913, 0.1477303814423141, 0.14679638331531497, 0.18291982962002096, 0.17502232085450575, 0.16246508222974332, 0.2077929946200815, 0.3226139266287964, 0.32460689763055006, 0.35633893934762373, 0.343735918493396, 0.340532175711153, 0.3351758036520215, 0.37457785168640023, 0.3783126660530365, 0.3646238714842138, 0.24300170742742733, 0.25507022106672106, 0.28504986277953626, 0.2689216373317066, 0.20800836068854933, 0.2422490046351592, 0.29026477834225217, 0.2691664912052756, 0.2640875352036264, 0.20588037251018654, 0.21114352805310488, 0.2708692066113796, 0.2118713428016198, 0.22097073707446058, 0.21073117862681978, 0.22254693258347302, 0.2192484550470133, 0.2336766092875311, 0.23885522739228604, 0.3111159358410127, 0.21104278350284844, 0.3082278825658735, 0.22924108448678504, 0.2091413164471937, 0.22106301503792758, 0.35146814993567654, 0.21523199203409948, 0.17967636330400183, 0.7470547653047318, 0.563458225750363, 0.740285653585611, 0.6336697775105917, 0.8115567867403286, 0.7737270876555252, 0.42523060891030906, 0.7659078763232698, 0.3679386795047249, 0.5533648440812395, 0.19346310468648986, 0.2563622061458942, 0.256220400338777, 0.2012826603145511, 0.36362529335799165, 0.2092796819752255, 0.2105306143121728, 0.18623167739181, 0.22807408911857174, 0.19726336089553265, 0.22905892780187298, 0.20519951603179531, 0.1852199770885009, 0.21303360672351923, 0.2099660170307236, 0.18764434868874968, 0.09145281263337679, 0.08122201062128986, 0.08997735740938806, 0.10510430639415136, 0.08051226599690331, 0.0871710532935498, 0.09179834386743879, 0.09618432593492177, 0.09262025036051913]}, "mutation_prompt": null}
{"id": "5c08ae73-a2d8-4092-bdb9-457141b93d7d", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "e245a0af-0f49-4ab1-8f5d-e6f405fe9161", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "b857e6a5-5d87-4f9e-a5eb-54e175d32463", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                F_dynamic = self.F + (0.5/self.current_budget)\n                mutant = x0 + F_dynamic * (x1 - x2)  # Dynamic scaling\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive local search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            for j in range(self.dim):\n                local_sol = best_sol.copy()\n                local_sol[j] += np.random.normal(0, 0.1 * (1 - self.current_budget/self.budget))  # Adaptive step size\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Enhanced Differential Evolution with Dynamic Scaling and Adaptive Local Search to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.8005116796010886, 0.808994707204723, 0.8106658034974472, 0.809239452697567, 0.809921542802151, 0.8170739898667093, 0.8047155755862486, 0.8268518750503089, 0.8233046731904998, 0.6640728638548887, 0.6417002451977165, 0.6414849625201626, 0.6238261357352546, 0.6597777907841162, 0.6719935200611742, 0.6669676025522177, 0.6448549175440067, 0.6199981749173619, 0.13087589505086195, 0.14443413379113135, 0.14993463236420934, 0.12652618579313168, 0.23087158865900792, 0.1575370002426585, 0.14973438857380694, 0.15959242093476733, 0.12969488055130118, 0.11684460062600188, 0.13952133916584886, 0.11469853302005173, 0.12026134278230272, 0.1252838979170794, 0.14110775060248748, 0.125047238752106, 0.11662433505085334, 0.13869284236318113, 0.9601032152384938, 0.9159659039641902, 0.9124282185961856, 0.9120130473544531, 0.9610048510129853, 0.8898930825571119, 0.8591796325962324, 0.9303133986676758, 0.8882689754987306, 0.49890394486561995, 0.5026125952276381, 0.48237704811371385, 0.4815235878077687, 0.4741683442207454, 0.4988374844274954, 0.45560491089441957, 0.4949928296950016, 0.482564522239037, 0.8102874420020761, 0.8036342823434911, 0.735153766164029, 0.7566852524231117, 0.7993406009276989, 0.7469843292960752, 0.780150533950198, 0.7810707184561699, 0.7935817631577978, 0.3770082293870616, 0.2847964588247821, 0.20439944574533775, 0.3129462341170961, 0.3024696959418395, 0.3561370839065904, 0.24130565990506725, 0.3341108467252495, 0.5864532627037926, 0.28492837933864024, 0.17282027274686207, 0.24608170539400187, 0.2282043078817615, 0.26266046216797057, 0.27817619313157127, 0.27532345225455346, 0.2492586740808732, 0.25879963354381785, 0.43377797927839523, 0.3894775256437415, 0.3648112074652551, 0.4426513370967351, 0.3576153488164566, 0.39157245926859396, 0.38932303017119163, 0.3893444635145169, 0.374321981252852, 0.5661344121671353, 0.4975320230120581, 0.5420047236445491, 0.5153907878705075, 0.4794968937246269, 0.49628770289575697, 0.5483478398881234, 0.5286566067321576, 0.5272588024061956, 0.11067011919331127, 0.15520268625049993, 0.12622823187071497, 0.2827242235723567, 0.28692562436450886, 0.24653007788595183, 0.11418299828060663, 0.15720468778140007, 0.11673482288556403, 0.30279862902030175, 0.30710838979204735, 0.3334328972026287, 0.32538720132874577, 0.34236056924226754, 0.3613212230012999, 0.32161457675935157, 0.3023406291304499, 0.31143146021792145, 0.7149277620119483, 0.7122448113531938, 0.7164175262853378, 0.6962286257742867, 0.7077440585321118, 0.6987061634874314, 0.7348131041010997, 0.704253706628658, 0.7130241248933644, 0.1131157102344007, 0.12716112705392368, 0.11771066399928898, 0.09910713745373301, 0.1183122309675495, 0.129750528470716, 0.13464833734331494, 0.1263680174776377, 0.12957430868949282, 0.19372739956241103, 0.1836215229733742, 0.1711085867088934, 0.15194755683681616, 0.2058428135722281, 0.1600337981734159, 0.17347348656000117, 0.20493452529554002, 0.13750554750469657, 0.39120124853058114, 0.39362512597595345, 0.3907973881873875, 0.3978804156860084, 0.39688613066853073, 0.3838115852687949, 0.45039543729209697, 0.4347345373970013, 0.4341444667762072, 0.32769248922347427, 0.3064551542353162, 0.35164062851972333, 0.30746373905860325, 0.33796571147559684, 0.31221713814031404, 0.3622386588912945, 0.3474298132876299, 0.3529933698320128, 0.2204445793906098, 0.2221283350528439, 0.2707336825155816, 0.2025508870372763, 0.20343612056684435, 0.195202909579122, 0.22836960315684296, 0.25435950359569026, 0.21421645890784002, 0.33821958340558556, 0.3118682037970324, 0.28995059630903053, 0.1993651361166502, 0.35861885548710404, 0.2498567849564729, 0.3379803958875285, 0.2630044821163213, 0.37904728152734757, 0.18691663679888726, 0.7400235862791781, 0.7715070142419007, 0.7194607314852308, 0.7538660630566608, 0.8512220150389432, 0.6630581435926445, 0.761505110222715, 0.6618056021566692, 0.7426725575460456, 0.5977991384808257, 0.7885564006954574, 0.20112527456175078, 0.1975515944908276, 0.16822627674135548, 0.7447797370758433, 0.2094461421461039, 0.7682266694754314, 0.20912969841356455, 0.20540579031684958, 0.21765562182308118, 0.22787124915911305, 0.19375803460557584, 0.19362098751666423, 0.2090915620224969, 0.20975055765839856, 0.2056009992352964, 0.08349282186540474, 0.09954251917637214, 0.08381676621550882, 0.09530616387842361, 0.09760712903669178, 0.10729946945663926, 0.08429101118576654, 0.0898966049888924, 0.09260861862282]}, "mutation_prompt": null}
{"id": "dc6f35fe-f256-4d23-a77a-28fa0e7aae4d", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.F = 0.6  # Differential weight increased slightly for more exploration\n        self.CR = 0.8  # Reduced crossover probability for diversity\n        self.current_budget = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        self.current_budget += self.population_size\n\n        # Main loop\n        while self.current_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation and recombination\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                mutant = x0 + self.F * (x1 - x2)\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n            # Adaptive neighborhood search\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n            neighbors = np.random.uniform(-0.2, 0.2, self.dim)  # Diversified local search\n            for j in range(self.dim):\n                local_sol = best_sol + neighbors\n                local_sol = np.clip(local_sol, self.bounds[0], self.bounds[1])\n\n                local_fitness = func(local_sol)\n                self.current_budget += 1\n\n                if local_fitness < fitness[best_idx]:\n                    pop[best_idx] = local_sol\n                    fitness[best_idx] = local_fitness\n\n                if self.current_budget >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDEAdaptiveLocalSearch", "description": "Improved Differential Evolution with Adaptive Neighborhood Search for diversified exploration and intensified local refinement.", "configspace": "", "generation": 99, "fitness": 0.2993638465692622, "feedback": "The algorithm HybridDEAdaptiveLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "661695a1-ba81-4bbd-a072-7cac35780446", "metadata": {"aucs": [0.7641463683072582, 0.7414391622052259, 0.744427444436917, 0.7555264316905088, 0.7403157303910477, 0.7674424308205688, 0.7538397242789188, 0.7508175254053291, 0.7630919904074787, 0.5578679664120001, 0.5283446469130351, 0.553445374954999, 0.5327384253010597, 0.5331244843651574, 0.540802852752734, 0.5685317426644909, 0.5557414665153403, 0.5290614389122545, 0.11467950088712953, 0.11715355623899337, 0.12201605610217192, 0.11506580120996346, 0.1160908946196012, 0.11601915429523746, 0.11956847578850027, 0.1143302354984227, 0.11421222643104378, 0.12272169879814776, 0.10922461736231148, 0.10177701543006645, 0.10081211509911359, 0.10293335252378433, 0.10404379401607677, 0.10210140548983326, 0.10477408277485889, 0.11128757316013094, 0.9645363295308822, 0.9316139020415047, 0.918708705815482, 0.9124955834525204, 0.9516055591320823, 0.9458053506947826, 0.9569992905812577, 0.9481280874997432, 0.9305066366472864, 0.34145754175171283, 0.3545675323335178, 0.34788959206998205, 0.35222374453628535, 0.35015840771034257, 0.3752571357939586, 0.3918371315476321, 0.3663876924626117, 0.36194663624924306, 0.5646441068843799, 0.5736249543307627, 0.6853978462967174, 0.6075119076376458, 0.6394143702764878, 0.6090332901800329, 0.5689426233574448, 0.658339544393151, 0.607006732845191, 0.20186931161101695, 0.21899525267704267, 0.22538906786485358, 0.19829932740872336, 0.1896788604399935, 0.16867144499003206, 0.21586437751190302, 0.23696541673726335, 0.2759486510319018, 0.17119535710026668, 0.12208031192157365, 0.190142664380879, 0.26284440625296357, 0.23297385459677633, 0.20578368306086203, 0.20873007205373928, 0.20059968011635143, 0.1662158372376913, 0.11422668135710046, 0.09762139861401231, 0.11577677026120692, 0.11265907253656571, 0.08184471686437134, 0.12056984106769231, 0.1371373217026841, 0.1310712300527206, 0.1044678313026387, 0.2232277479789878, 0.2428721608737784, 0.2513764970748583, 0.18904101427306552, 0.2307880800440767, 0.24818153501740248, 0.2564497202083207, 0.26201069121104026, 0.23057960005443634, 0.036716698588035945, 0.04080205964890227, 0.03914978765496635, 0.03022013904058074, 0.026648400280356532, 0.048021488502687504, 0.03388784678383949, 0.0665759468406304, 0.03757294728374949, 0.17064977791284652, 0.15819253743272987, 0.15505535020075456, 0.1836724361520623, 0.18314587821623374, 0.17347410273349584, 0.18629708056100702, 0.1649294828296486, 0.170090900969477, 0.5426013668968606, 0.5325900981036904, 0.5650337083625296, 0.5269797222660471, 0.5265733027687368, 0.541701637674591, 0.5366855777808693, 0.5232140395568314, 0.5537193452224252, 0.09098498319720949, 0.09218108680902315, 0.09079013294630456, 0.0864406701256667, 0.09219687095301576, 0.08292788308991916, 0.09751675649131375, 0.09978906779167651, 0.10411522222581793, 0.1767617394259654, 0.18199876784207614, 0.18297847166096814, 0.18885953665216826, 0.15373189686832434, 0.15703589176710608, 0.15095315157619138, 0.17049802945648185, 0.19628980597579582, 0.3523717140521737, 0.3339003673446529, 0.3442809739269094, 0.31362823627764524, 0.3134976213977624, 0.2966814314642079, 0.36117446143202225, 0.3443649625772416, 0.3511812278968377, 0.22731964454391418, 0.22180758306971882, 0.23386528971310072, 0.25175583311048544, 0.22699138068726654, 0.2164375327935616, 0.24053588557395256, 0.25639796507339174, 0.2695535831620628, 0.1951140863544506, 0.20319387407604073, 0.1860039241367586, 0.18503204400454065, 0.19779414168185372, 0.1916696640732285, 0.2038056747383642, 0.19448315575834174, 0.18728042966260572, 0.19730236375032817, 0.20200139544720142, 0.1993069171072397, 0.20003207880614204, 0.20432428527490798, 0.1946967214322508, 0.18200134682979285, 0.18314718521686169, 0.2056136268011619, 0.45125493159361807, 0.18166663596601096, 0.5190602753672499, 0.6246444648736531, 0.5886570845685593, 0.554611719824184, 0.510098485599894, 0.1620292466954958, 0.2316101970369976, 0.5573844213609861, 0.20365220939176687, 0.2063157166938273, 0.32461117316087174, 0.19926371723299785, 0.49550596312078776, 0.504720218261719, 0.20553388952821505, 0.20529281071520833, 0.18361381702660406, 0.19559647473995956, 0.18957274452401496, 0.18592171913523226, 0.1784521597709796, 0.18929329556124874, 0.1969449641320512, 0.18659767065591581, 0.19081789765671242, 0.07184353281915756, 0.06814694545658362, 0.07047680502484333, 0.06743262520573678, 0.07958644566285222, 0.07615006856239814, 0.07696700557183445, 0.07813054879015802, 0.08462625730256312]}, "mutation_prompt": null}
