{"id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to effectively explore and exploit the search space for diverse black-box optimization tasks.", "configspace": "", "generation": 0, "fitness": 0.31763817108751263, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.23.", "error": "", "parent_id": null, "metadata": {"aucs": [0.7277708479472665, 0.7203685752072952, 0.7592234670981438, 0.7270060762945723, 0.7223901348236126, 0.7242485996825256, 0.7421371717417691, 0.7299076153451518, 0.7094162303521239, 0.4296726600596913, 0.41074883258345496, 0.42588408605962613, 0.39951016742800516, 0.3903370181241913, 0.41058409408197405, 0.43147271506892293, 0.42206789542362155, 0.41873312460062695, 0.10284063601978066, 0.11457928335076872, 0.10319522463229236, 0.1325338907259298, 0.11254320357379743, 0.11729588517516054, 0.10344178764629419, 0.10310373984390464, 0.10876788512707791, 0.0875219073896546, 0.0895957288036312, 0.09696825329481906, 0.10295546322778282, 0.10511877021066396, 0.08885357670890992, 0.10047441267872326, 0.09074566671245543, 0.10506960329275372, 0.8923805994833915, 0.8899558754892319, 0.9258474176922777, 0.9165075340901212, 0.9037999664934113, 0.9126100151783798, 0.8933153605984264, 0.8790822325777695, 0.9190269894340513, 0.4107297643401787, 0.3631601485785292, 0.3543306074468643, 0.3689063130308887, 0.34696582325186986, 0.3615241847961028, 0.3709060597046109, 0.34451097220528326, 0.3730522206616408, 0.7159969178281116, 0.6729669777343324, 0.6927350954489695, 0.7688169758557002, 0.6762354708370318, 0.841934891859444, 0.7217780891896532, 0.7157374599021664, 0.7753408939133453, 0.23922658864292357, 0.25627337935314476, 0.1877440921124438, 0.16729150455174802, 0.18366881810180224, 0.18278956944927882, 0.19440909074305268, 0.18034951200479954, 0.1713547232599214, 0.16512018546369422, 0.275753252214197, 0.16353054879021833, 0.1746304573435269, 0.20808947499590857, 0.20458938339619637, 0.24682555750562518, 0.22303785237133678, 0.24432449610214857, 0.19348023198535025, 0.15795019981072456, 0.22715143597330212, 0.19400375309585838, 0.2289098317097067, 0.2344091481115994, 0.23450100304176735, 0.21424619297311354, 0.22346883391265449, 0.3367990232889364, 0.38363317614211756, 0.3229745312613973, 0.3379784991695577, 0.3374361407558446, 0.32019840055611193, 0.3609083165770548, 0.3371717107743637, 0.3551413863047075, 0.05427620174354819, 0.06750394251445668, 0.05765211120099323, 0.10493010904971523, 0.09295742295581166, 0.0779542660477015, 0.084859331629489, 0.04904254888434767, 0.08820846870941335, 0.22865489816926066, 0.2105613828636167, 0.22236842322674977, 0.21499023517351512, 0.2106288990155767, 0.23542506898465154, 0.21018861856021454, 0.21452044637445333, 0.20822222331715434, 0.5654539632334072, 0.5782295405535143, 0.5590233028742844, 0.5510383693190649, 0.5458444836410068, 0.5656540049384062, 0.57811885170791, 0.5901135290971724, 0.5911511848871402, 0.11009664543252584, 0.10720313272932125, 0.10095689690847087, 0.09296317242242513, 0.10727361768622579, 0.09990705085599916, 0.10291592082132739, 0.10558999958323856, 0.08872726869907677, 0.1522313431115112, 0.12800611029681108, 0.13521220542051016, 0.15171955036357376, 0.19238959679178402, 0.14910728556390462, 0.15670765500787698, 0.17016961656217955, 0.174453207059176, 0.35258634599635275, 0.3458598511718748, 0.34658808629422544, 0.34361148318312373, 0.3435947104360897, 0.35224154129176233, 0.34693487293204484, 0.37309570038556616, 0.3553815586932424, 0.25790552831420466, 0.27443434819529977, 0.2570722711238246, 0.2467130972270305, 0.2590148325152606, 0.2627228183635252, 0.2863799186644407, 0.28024826176498585, 0.2679791101348604, 0.2264174916620375, 0.18471763729355206, 0.2085505679819475, 0.21148795569359247, 0.19012017123822156, 0.21869860701364596, 0.21946723314360084, 0.1968562322516676, 0.18834523997803487, 0.18920118830908017, 0.20137779470827089, 0.18665617438779136, 0.18297252388184726, 0.18929384756406076, 0.18069021503118032, 0.18405419037548276, 0.19655858753750322, 0.20247686149956212, 0.7044727888673262, 0.6746093927749737, 0.19909067349021736, 0.6396132982582976, 0.5235278246696712, 0.5782441456195337, 0.4883575966469529, 0.5997582821100547, 0.7111748434036029, 0.16601783032592543, 0.16546162587767466, 0.7298962339745761, 0.6791644822156938, 0.19096122358535927, 0.19896360354762355, 0.5134993917872052, 0.20745921580583404, 0.20524653427616468, 0.1906920099971534, 0.18811330744644605, 0.1898725054277799, 0.18049728372398144, 0.17981926503594092, 0.1844415446160096, 0.18300461036418314, 0.189426036750466, 0.19761447221813178, 0.08175204366441635, 0.07543054826886542, 0.08525431773039904, 0.08042009276453232, 0.08041064747960458, 0.07340812212597136, 0.08361415005623873, 0.07271281252717166, 0.0797238474365447]}, "mutation_prompt": null}
{"id": "499f6abb-702b-4d63-b34f-e8e2df3ca50a", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to effectively explore and exploit the search space for diverse black-box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.7277708479472665, 0.7203685752072952, 0.7592234670981438, 0.7270060762945723, 0.7223901348236126, 0.7242485996825256, 0.7421371717417691, 0.7299076153451518, 0.7094162303521239, 0.4296726600596913, 0.41074883258345496, 0.42588408605962613, 0.39951016742800516, 0.3903370181241913, 0.41058409408197405, 0.43147271506892293, 0.42206789542362155, 0.41873312460062695, 0.10284063601978066, 0.11457928335076872, 0.10319522463229236, 0.1325338907259298, 0.11254320357379743, 0.11729588517516054, 0.10344178764629419, 0.10310373984390464, 0.10876788512707791, 0.0875219073896546, 0.0895957288036312, 0.09696825329481906, 0.10295546322778282, 0.10511877021066396, 0.08885357670890992, 0.10047441267872326, 0.09074566671245543, 0.10506960329275372, 0.8923805994833915, 0.8899558754892319, 0.9258474176922777, 0.9165075340901212, 0.9037999664934113, 0.9126100151783798, 0.8933153605984264, 0.8790822325777695, 0.9190269894340513, 0.4107297643401787, 0.3631601485785292, 0.3543306074468643, 0.3689063130308887, 0.34696582325186986, 0.3615241847961028, 0.3709060597046109, 0.34451097220528326, 0.3730522206616408, 0.7159969178281116, 0.6729669777343324, 0.6927350954489695, 0.7688169758557002, 0.6762354708370318, 0.841934891859444, 0.7217780891896532, 0.7157374599021664, 0.7753408939133453, 0.23922658864292357, 0.25627337935314476, 0.1877440921124438, 0.16729150455174802, 0.18366881810180224, 0.18278956944927882, 0.19440909074305268, 0.18034951200479954, 0.1713547232599214, 0.16512018546369422, 0.275753252214197, 0.16353054879021833, 0.1746304573435269, 0.20808947499590857, 0.20458938339619637, 0.24682555750562518, 0.22303785237133678, 0.24432449610214857, 0.19348023198535025, 0.15795019981072456, 0.22715143597330212, 0.19400375309585838, 0.2289098317097067, 0.2344091481115994, 0.23450100304176735, 0.21424619297311354, 0.22346883391265449, 0.3367990232889364, 0.38363317614211756, 0.3229745312613973, 0.3379784991695577, 0.3374361407558446, 0.32019840055611193, 0.3609083165770548, 0.3371717107743637, 0.3551413863047075, 0.05427620174354819, 0.06750394251445668, 0.05765211120099323, 0.10493010904971523, 0.09295742295581166, 0.0779542660477015, 0.084859331629489, 0.04904254888434767, 0.08820846870941335, 0.22865489816926066, 0.2105613828636167, 0.22236842322674977, 0.21499023517351512, 0.2106288990155767, 0.23542506898465154, 0.21018861856021454, 0.21452044637445333, 0.20822222331715434, 0.5654539632334072, 0.5782295405535143, 0.5590233028742844, 0.5510383693190649, 0.5458444836410068, 0.5656540049384062, 0.57811885170791, 0.5901135290971724, 0.5911511848871402, 0.11009664543252584, 0.10720313272932125, 0.10095689690847087, 0.09296317242242513, 0.10727361768622579, 0.09990705085599916, 0.10291592082132739, 0.10558999958323856, 0.08872726869907677, 0.1522313431115112, 0.12800611029681108, 0.13521220542051016, 0.15171955036357376, 0.19238959679178402, 0.14910728556390462, 0.15670765500787698, 0.17016961656217955, 0.174453207059176, 0.35258634599635275, 0.3458598511718748, 0.34658808629422544, 0.34361148318312373, 0.3435947104360897, 0.35224154129176233, 0.34693487293204484, 0.37309570038556616, 0.3553815586932424, 0.25790552831420466, 0.27443434819529977, 0.2570722711238246, 0.2467130972270305, 0.2590148325152606, 0.2627228183635252, 0.2863799186644407, 0.28024826176498585, 0.2679791101348604, 0.2264174916620375, 0.18471763729355206, 0.2085505679819475, 0.21148795569359247, 0.19012017123822156, 0.21869860701364596, 0.21946723314360084, 0.1968562322516676, 0.18834523997803487, 0.18920118830908017, 0.20137779470827089, 0.18665617438779136, 0.18297252388184726, 0.18929384756406076, 0.18069021503118032, 0.18405419037548276, 0.19655858753750322, 0.20247686149956212, 0.7044727888673262, 0.6746093927749737, 0.19909067349021736, 0.6396132982582976, 0.5235278246696712, 0.5782441456195337, 0.4883575966469529, 0.5997582821100547, 0.7111748434036029, 0.16601783032592543, 0.16546162587767466, 0.7298962339745761, 0.6791644822156938, 0.19096122358535927, 0.19896360354762355, 0.5134993917872052, 0.20745921580583404, 0.20524653427616468, 0.1906920099971534, 0.18811330744644605, 0.1898725054277799, 0.18049728372398144, 0.17981926503594092, 0.1844415446160096, 0.18300461036418314, 0.189426036750466, 0.19761447221813178, 0.08175204366441635, 0.07543054826886542, 0.08525431773039904, 0.08042009276453232, 0.08041064747960458, 0.07340812212597136, 0.08361415005623873, 0.07271281252717166, 0.0797238474365447]}, "mutation_prompt": null}
{"id": "5f094e28-2e73-4b10-a7f8-ab4fe7e43400", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Dynamic Crossover\n                self.CR = 0.9 - 0.8 * (evaluations / self.budget)  # Adjust CR dynamically\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Adaptive Lévy Flight using dynamic crossover rate adjustment for improved exploration and exploitation balance.", "configspace": "", "generation": 2, "fitness": 0.2508103278678849, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.7154804697552177, 0.7113723088826213, 0.7000440912215478, 0.7304237335333061, 0.6912317185114984, 0.7128954897002233, 0.71590963867488, 0.7119964585500942, 0.6921245771206972, 0.39450125916413625, 0.3412552802612351, 0.3822816290830131, 0.3777734345575233, 0.3960547800799582, 0.39388715259174956, 0.36170433004875213, 0.3839587881312304, 0.3686171775839864, 0.12410272130798838, 0.15125568047233406, 0.14425595747556874, 0.13032879383577178, 0.1309529167071205, 0.14798301179945716, 0.14738270168165746, 0.13177109113462104, 0.14597368308978453, 0.13183674879119367, 0.11975939887309905, 0.12472919603469068, 0.13379799137897375, 0.1499842225604583, 0.13003391518596286, 0.1159429306591857, 0.13019624971923027, 0.12575120632238612, 0.9138779680991735, 0.8975635264997254, 0.8801873493662438, 0.9176138900535479, 0.8758770020764264, 0.9088729321425433, 0.9078852409233221, 0.9117773311003317, 0.8857687372173335, 0.29664728009868846, 0.30726094254628, 0.3091820613967643, 0.2883793549225694, 0.3149556314163664, 0.3099753018740715, 0.3205664712450501, 0.3082786014590816, 0.27784970986677104, 0.31856968062773816, 0.5595945412526877, 0.31079454571470855, 0.527422779633838, 0.3183831601406718, 0.3157463066144609, 0.34904778753417853, 0.6490597510129077, 0.3232825121027547, 0.14471929345679668, 0.15452346038639275, 0.1553076354197307, 0.17060350285132153, 0.16500630556698093, 0.16244855672909708, 0.1523680774706656, 0.15333462128340836, 0.15221827031357438, 0.16254094771736505, 0.18835667406426415, 0.15657374150011383, 0.14552395050040046, 0.16865071557375233, 0.19139049208353132, 0.16286130148698508, 0.1417405717891883, 0.1926630033392921, 0.008202641066668237, 0.00975171699511701, 9.999999999998899e-05, 0.001984779408359061, 0.0023774175847361967, 0.004388359961888688, 0.02677453834618959, 0.00010293100074398875, 0.0001850181109679383, 0.12534643492277486, 0.08493507695900948, 0.13256618589907687, 0.10427727891765048, 0.08183362503742952, 0.11892922257012228, 0.1656275790976346, 0.13872525114904988, 0.13243330278057253, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002457437589544087, 0.00876393462750058, 0.1289173415037287, 0.1021912919026281, 0.12445034302645563, 0.13401565976821517, 0.12217089033018036, 0.13158808515882026, 0.10236334067954345, 0.12760958512357135, 0.11933909835273993, 0.4525878645464916, 0.459837661005859, 0.4800042746290466, 0.4551369879752527, 0.43008553768175306, 0.4719060160612013, 0.4608169958277083, 0.4778521491566853, 0.47324480165145855, 0.10415521385649151, 0.10034567941550054, 0.10877164016382812, 0.0926220317454699, 0.09931021198426992, 0.09321224550006013, 0.14371481669454422, 0.09800583654689976, 0.10374359678243616, 0.14775969043393722, 0.16846147517765508, 0.147949001039981, 0.1473850326303645, 0.15400654189310792, 0.156204978938689, 0.13578776112144864, 0.15317555310439745, 0.17208736774458044, 0.3056554015132129, 0.2946760964131976, 0.2980696770199054, 0.2955658889990591, 0.3152619933333377, 0.2909597973446477, 0.3253321983241072, 0.33303348680971845, 0.3293923099907031, 0.23822231341917977, 0.24109740557801085, 0.2307031894110816, 0.20262215545329343, 0.23053030179634215, 0.21127877446694654, 0.2289686694477805, 0.2598525483085278, 0.23012871690926628, 0.2259910690438528, 0.193595283161756, 0.18858504709736357, 0.19255704476576907, 0.1903152009472019, 0.20684149470463442, 0.2046255458091213, 0.18391383818793383, 0.22865943764189345, 0.20530012249286633, 0.20273407496919094, 0.2022633030986638, 0.20990715659091452, 0.21874626932479613, 0.2122979597055361, 0.20269082483145517, 0.19483438376473683, 0.20585692518613952, 0.1691507416471888, 0.2139755577674033, 0.15802602983898484, 0.27188066393538024, 0.5179661530410514, 0.3818949916702429, 0.19495470993010489, 0.19174878688803787, 0.3076608407342165, 0.16402664111005483, 0.4432145009743299, 0.4719324276644079, 0.25223205971731444, 0.19298094362793006, 0.2028562515279555, 0.28672642392927483, 0.2016205371820936, 0.2540743423262043, 0.20942675523418808, 0.17566503776742814, 0.18151626206405902, 0.20124539754694248, 0.1849184919897049, 0.18135740108683607, 0.18553457596138523, 0.18479773709747327, 0.1784244923801418, 0.08072782822415525, 0.08141062720510706, 0.0899909664420564, 0.08162590357892063, 0.08196901478321683, 0.08037604342428639, 0.08193948283874031, 0.07061422281509733, 0.0814204855167815]}, "mutation_prompt": null}
{"id": "561c75f5-2993-403d-848a-6e9a39ba0b1a", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to effectively explore and exploit the search space for diverse black-box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.7277708479472665, 0.7203685752072952, 0.7592234670981438, 0.7270060762945723, 0.7223901348236126, 0.7242485996825256, 0.7421371717417691, 0.7299076153451518, 0.7094162303521239, 0.4296726600596913, 0.41074883258345496, 0.42588408605962613, 0.39951016742800516, 0.3903370181241913, 0.41058409408197405, 0.43147271506892293, 0.42206789542362155, 0.41873312460062695, 0.10284063601978066, 0.11457928335076872, 0.10319522463229236, 0.1325338907259298, 0.11254320357379743, 0.11729588517516054, 0.10344178764629419, 0.10310373984390464, 0.10876788512707791, 0.0875219073896546, 0.0895957288036312, 0.09696825329481906, 0.10295546322778282, 0.10511877021066396, 0.08885357670890992, 0.10047441267872326, 0.09074566671245543, 0.10506960329275372, 0.8923805994833915, 0.8899558754892319, 0.9258474176922777, 0.9165075340901212, 0.9037999664934113, 0.9126100151783798, 0.8933153605984264, 0.8790822325777695, 0.9190269894340513, 0.4107297643401787, 0.3631601485785292, 0.3543306074468643, 0.3689063130308887, 0.34696582325186986, 0.3615241847961028, 0.3709060597046109, 0.34451097220528326, 0.3730522206616408, 0.7159969178281116, 0.6729669777343324, 0.6927350954489695, 0.7688169758557002, 0.6762354708370318, 0.841934891859444, 0.7217780891896532, 0.7157374599021664, 0.7753408939133453, 0.23922658864292357, 0.25627337935314476, 0.1877440921124438, 0.16729150455174802, 0.18366881810180224, 0.18278956944927882, 0.19440909074305268, 0.18034951200479954, 0.1713547232599214, 0.16512018546369422, 0.275753252214197, 0.16353054879021833, 0.1746304573435269, 0.20808947499590857, 0.20458938339619637, 0.24682555750562518, 0.22303785237133678, 0.24432449610214857, 0.19348023198535025, 0.15795019981072456, 0.22715143597330212, 0.19400375309585838, 0.2289098317097067, 0.2344091481115994, 0.23450100304176735, 0.21424619297311354, 0.22346883391265449, 0.3367990232889364, 0.38363317614211756, 0.3229745312613973, 0.3379784991695577, 0.3374361407558446, 0.32019840055611193, 0.3609083165770548, 0.3371717107743637, 0.3551413863047075, 0.05427620174354819, 0.06750394251445668, 0.05765211120099323, 0.10493010904971523, 0.09295742295581166, 0.0779542660477015, 0.084859331629489, 0.04904254888434767, 0.08820846870941335, 0.22865489816926066, 0.2105613828636167, 0.22236842322674977, 0.21499023517351512, 0.2106288990155767, 0.23542506898465154, 0.21018861856021454, 0.21452044637445333, 0.20822222331715434, 0.5654539632334072, 0.5782295405535143, 0.5590233028742844, 0.5510383693190649, 0.5458444836410068, 0.5656540049384062, 0.57811885170791, 0.5901135290971724, 0.5911511848871402, 0.11009664543252584, 0.10720313272932125, 0.10095689690847087, 0.09296317242242513, 0.10727361768622579, 0.09990705085599916, 0.10291592082132739, 0.10558999958323856, 0.08872726869907677, 0.1522313431115112, 0.12800611029681108, 0.13521220542051016, 0.15171955036357376, 0.19238959679178402, 0.14910728556390462, 0.15670765500787698, 0.17016961656217955, 0.174453207059176, 0.35258634599635275, 0.3458598511718748, 0.34658808629422544, 0.34361148318312373, 0.3435947104360897, 0.35224154129176233, 0.34693487293204484, 0.37309570038556616, 0.3553815586932424, 0.25790552831420466, 0.27443434819529977, 0.2570722711238246, 0.2467130972270305, 0.2590148325152606, 0.2627228183635252, 0.2863799186644407, 0.28024826176498585, 0.2679791101348604, 0.2264174916620375, 0.18471763729355206, 0.2085505679819475, 0.21148795569359247, 0.19012017123822156, 0.21869860701364596, 0.21946723314360084, 0.1968562322516676, 0.18834523997803487, 0.18920118830908017, 0.20137779470827089, 0.18665617438779136, 0.18297252388184726, 0.18929384756406076, 0.18069021503118032, 0.18405419037548276, 0.19655858753750322, 0.20247686149956212, 0.7044727888673262, 0.6746093927749737, 0.19909067349021736, 0.6396132982582976, 0.5235278246696712, 0.5782441456195337, 0.4883575966469529, 0.5997582821100547, 0.7111748434036029, 0.16601783032592543, 0.16546162587767466, 0.7298962339745761, 0.6791644822156938, 0.19096122358535927, 0.19896360354762355, 0.5134993917872052, 0.20745921580583404, 0.20524653427616468, 0.1906920099971534, 0.18811330744644605, 0.1898725054277799, 0.18049728372398144, 0.17981926503594092, 0.1844415446160096, 0.18300461036418314, 0.189426036750466, 0.19761447221813178, 0.08175204366441635, 0.07543054826886542, 0.08525431773039904, 0.08042009276453232, 0.08041064747960458, 0.07340812212597136, 0.08361415005623873, 0.07271281252717166, 0.0797238474365447]}, "mutation_prompt": null}
{"id": "e59e5161-9c2e-4f45-af04-7fcd59f70ae9", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to effectively explore and exploit the search space for diverse black-box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.7277708479472665, 0.7203685752072952, 0.7592234670981438, 0.7270060762945723, 0.7223901348236126, 0.7242485996825256, 0.7421371717417691, 0.7299076153451518, 0.7094162303521239, 0.4296726600596913, 0.41074883258345496, 0.42588408605962613, 0.39951016742800516, 0.3903370181241913, 0.41058409408197405, 0.43147271506892293, 0.42206789542362155, 0.41873312460062695, 0.10284063601978066, 0.11457928335076872, 0.10319522463229236, 0.1325338907259298, 0.11254320357379743, 0.11729588517516054, 0.10344178764629419, 0.10310373984390464, 0.10876788512707791, 0.0875219073896546, 0.0895957288036312, 0.09696825329481906, 0.10295546322778282, 0.10511877021066396, 0.08885357670890992, 0.10047441267872326, 0.09074566671245543, 0.10506960329275372, 0.8923805994833915, 0.8899558754892319, 0.9258474176922777, 0.9165075340901212, 0.9037999664934113, 0.9126100151783798, 0.8933153605984264, 0.8790822325777695, 0.9190269894340513, 0.4107297643401787, 0.3631601485785292, 0.3543306074468643, 0.3689063130308887, 0.34696582325186986, 0.3615241847961028, 0.3709060597046109, 0.34451097220528326, 0.3730522206616408, 0.7159969178281116, 0.6729669777343324, 0.6927350954489695, 0.7688169758557002, 0.6762354708370318, 0.841934891859444, 0.7217780891896532, 0.7157374599021664, 0.7753408939133453, 0.23922658864292357, 0.25627337935314476, 0.1877440921124438, 0.16729150455174802, 0.18366881810180224, 0.18278956944927882, 0.19440909074305268, 0.18034951200479954, 0.1713547232599214, 0.16512018546369422, 0.275753252214197, 0.16353054879021833, 0.1746304573435269, 0.20808947499590857, 0.20458938339619637, 0.24682555750562518, 0.22303785237133678, 0.24432449610214857, 0.19348023198535025, 0.15795019981072456, 0.22715143597330212, 0.19400375309585838, 0.2289098317097067, 0.2344091481115994, 0.23450100304176735, 0.21424619297311354, 0.22346883391265449, 0.3367990232889364, 0.38363317614211756, 0.3229745312613973, 0.3379784991695577, 0.3374361407558446, 0.32019840055611193, 0.3609083165770548, 0.3371717107743637, 0.3551413863047075, 0.05427620174354819, 0.06750394251445668, 0.05765211120099323, 0.10493010904971523, 0.09295742295581166, 0.0779542660477015, 0.084859331629489, 0.04904254888434767, 0.08820846870941335, 0.22865489816926066, 0.2105613828636167, 0.22236842322674977, 0.21499023517351512, 0.2106288990155767, 0.23542506898465154, 0.21018861856021454, 0.21452044637445333, 0.20822222331715434, 0.5654539632334072, 0.5782295405535143, 0.5590233028742844, 0.5510383693190649, 0.5458444836410068, 0.5656540049384062, 0.57811885170791, 0.5901135290971724, 0.5911511848871402, 0.11009664543252584, 0.10720313272932125, 0.10095689690847087, 0.09296317242242513, 0.10727361768622579, 0.09990705085599916, 0.10291592082132739, 0.10558999958323856, 0.08872726869907677, 0.1522313431115112, 0.12800611029681108, 0.13521220542051016, 0.15171955036357376, 0.19238959679178402, 0.14910728556390462, 0.15670765500787698, 0.17016961656217955, 0.174453207059176, 0.35258634599635275, 0.3458598511718748, 0.34658808629422544, 0.34361148318312373, 0.3435947104360897, 0.35224154129176233, 0.34693487293204484, 0.37309570038556616, 0.3553815586932424, 0.25790552831420466, 0.27443434819529977, 0.2570722711238246, 0.2467130972270305, 0.2590148325152606, 0.2627228183635252, 0.2863799186644407, 0.28024826176498585, 0.2679791101348604, 0.2264174916620375, 0.18471763729355206, 0.2085505679819475, 0.21148795569359247, 0.19012017123822156, 0.21869860701364596, 0.21946723314360084, 0.1968562322516676, 0.18834523997803487, 0.18920118830908017, 0.20137779470827089, 0.18665617438779136, 0.18297252388184726, 0.18929384756406076, 0.18069021503118032, 0.18405419037548276, 0.19655858753750322, 0.20247686149956212, 0.7044727888673262, 0.6746093927749737, 0.19909067349021736, 0.6396132982582976, 0.5235278246696712, 0.5782441456195337, 0.4883575966469529, 0.5997582821100547, 0.7111748434036029, 0.16601783032592543, 0.16546162587767466, 0.7298962339745761, 0.6791644822156938, 0.19096122358535927, 0.19896360354762355, 0.5134993917872052, 0.20745921580583404, 0.20524653427616468, 0.1906920099971534, 0.18811330744644605, 0.1898725054277799, 0.18049728372398144, 0.17981926503594092, 0.1844415446160096, 0.18300461036418314, 0.189426036750466, 0.19761447221813178, 0.08175204366441635, 0.07543054826886542, 0.08525431773039904, 0.08042009276453232, 0.08041064747960458, 0.07340812212597136, 0.08361415005623873, 0.07271281252717166, 0.0797238474365447]}, "mutation_prompt": null}
{"id": "4860c272-1dd1-4947-ac93-9298ecb14f3c", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                self.CR = 0.8 + 0.2 * np.random.rand()  # Dynamic Crossover Probability\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Differential Evolution with Adaptive Lévy Flight by integrating dynamic crossover and scaling parameters to improve convergence.", "configspace": "", "generation": 5, "fitness": 0.31413564899387575, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.724701219606572, 0.7030094305876485, 0.7229778257406767, 0.6887792815827285, 0.7054922961441248, 0.7165132240755535, 0.7377322328367064, 0.7197194316598092, 0.7227626889343708, 0.40463619382145166, 0.4231483121884526, 0.41770838853879844, 0.42174443499666503, 0.40813833480231354, 0.3610037800579533, 0.4449376441644318, 0.4012615780491188, 0.42003531262795646, 0.11249049063674266, 0.12548589576928404, 0.10762346761897512, 0.11921122299650966, 0.11908085146299219, 0.10714340219242025, 0.111100053470085, 0.12409621498774326, 0.12222958298887521, 0.11016966912396764, 0.09841552730467706, 0.09130715151608126, 0.09247932919984325, 0.10811903119522281, 0.09883376391346033, 0.09914818326461794, 0.10891803867703109, 0.10003553860774395, 0.8981365317309955, 0.9457075705570097, 0.8857866482981346, 0.912858413564382, 0.8848626099364859, 0.9080482080511747, 0.889119109787468, 0.8954947786572247, 0.8778018902911259, 0.35838005428591446, 0.3663873109804163, 0.3675276262291556, 0.37410119678098164, 0.36609457312445515, 0.3778549545086627, 0.3540120180234084, 0.36243469702030773, 0.3419851443070857, 0.6784353131591361, 0.714584267604132, 0.767436929710718, 0.7615028058036046, 0.7729448289304699, 0.7428412058360443, 0.7127596017943227, 0.7563333429521697, 0.7240183113811325, 0.20411580680912633, 0.17121409053673176, 0.2753882397612981, 0.18454686370581053, 0.24873427041940877, 0.16167576390529048, 0.16364232375180487, 0.18401934042911627, 0.21260709811840228, 0.20550699943569084, 0.1771392889931127, 0.19100726852344363, 0.17433832666470006, 0.1753198077303164, 0.19076186457412225, 0.17886880792098891, 0.19780449726047733, 0.20397212114344887, 0.21044551071916595, 0.18421984657589596, 0.1851728676740625, 0.21050939589134865, 0.21392759933965955, 0.2093433154502562, 0.1925584579045705, 0.21987702074137705, 0.2262381483782686, 0.2980644367214752, 0.3193264842356319, 0.2922359543797518, 0.3442125942843208, 0.36104967346678507, 0.357908873749043, 0.36231362472709294, 0.3187372506285998, 0.3181600894899598, 0.12779680095035817, 0.06255229941604845, 0.06671026760698207, 0.0915291182575313, 0.07224900432852033, 0.09591980095792807, 0.08112800429224898, 0.08654220297109372, 0.11865460214878187, 0.2120024792254005, 0.22217511091575315, 0.19836159439697376, 0.2015340767626217, 0.22584814671868292, 0.23290255136289217, 0.20813224474254444, 0.2074125773696801, 0.20275148474144944, 0.5848827811835984, 0.6009193119933591, 0.555293755096766, 0.5978912529827669, 0.558496359147922, 0.5595597956107075, 0.5597005584091365, 0.5496795434257236, 0.5685194623495189, 0.1009045384203513, 0.09634803682322868, 0.11002781590213939, 0.10348083164431443, 0.11485666349651569, 0.09750903348113038, 0.08781505633097608, 0.10102706571831643, 0.10550324884171824, 0.157899972432763, 0.14759515873039508, 0.16154731404075517, 0.12684062692698606, 0.183915168833524, 0.14775144338343071, 0.17017818296396747, 0.13173531917394465, 0.15130698017903965, 0.33799302762789973, 0.33991623742227506, 0.3614048424248725, 0.3409640067948271, 0.35705072569881857, 0.32988296096842995, 0.352332504284382, 0.3722390276429619, 0.3656070587569127, 0.2793109780129919, 0.28098618786983476, 0.26095138950238994, 0.2722211173366317, 0.2746941422485717, 0.263295000385388, 0.27756210349024224, 0.2892196894992184, 0.2899993663882239, 0.2095962309260614, 0.20193406236412015, 0.21090800811629773, 0.20726250130327872, 0.19961390270912593, 0.21975352616217902, 0.17341942804346056, 0.1946084850693598, 0.20723405108667237, 0.18185493310855283, 0.18153125728551345, 0.19855375912744244, 0.18893628724575529, 0.19169247451465865, 0.25032690264362567, 0.18929072988756612, 0.1917262517927396, 0.19619286518501144, 0.16998099275916267, 0.1860599838048782, 0.18517365847690148, 0.7601517753404957, 0.7329957521666866, 0.18652590236726097, 0.5115885794589378, 0.7440280218947664, 0.7266757609862109, 0.7207409654757768, 0.19998235528009245, 0.5773159402027307, 0.18795559000039208, 0.560673564413231, 0.1616467389850419, 0.21002841650274162, 0.20422971501428588, 0.5909471179486518, 0.19637412450996095, 0.1924339454326055, 0.19463114882926036, 0.1833954271218916, 0.18184932706860313, 0.18305613328458203, 0.19157803944292084, 0.1937047830118801, 0.17957223168510594, 0.07824891097180975, 0.08702768142017181, 0.07897258371907734, 0.08398299351130623, 0.08037926776208537, 0.07610529044857484, 0.08567131277669271, 0.08228234145991808, 0.07927724883940879]}, "mutation_prompt": null}
{"id": "a38f9b23-f083-4673-b4f6-49526333cb4e", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to effectively explore and exploit the search space for diverse black-box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.7277708479472665, 0.7203685752072952, 0.7592234670981438, 0.7270060762945723, 0.7223901348236126, 0.7242485996825256, 0.7421371717417691, 0.7299076153451518, 0.7094162303521239, 0.4296726600596913, 0.41074883258345496, 0.42588408605962613, 0.39951016742800516, 0.3903370181241913, 0.41058409408197405, 0.43147271506892293, 0.42206789542362155, 0.41873312460062695, 0.10284063601978066, 0.11457928335076872, 0.10319522463229236, 0.1325338907259298, 0.11254320357379743, 0.11729588517516054, 0.10344178764629419, 0.10310373984390464, 0.10876788512707791, 0.0875219073896546, 0.0895957288036312, 0.09696825329481906, 0.10295546322778282, 0.10511877021066396, 0.08885357670890992, 0.10047441267872326, 0.09074566671245543, 0.10506960329275372, 0.8923805994833915, 0.8899558754892319, 0.9258474176922777, 0.9165075340901212, 0.9037999664934113, 0.9126100151783798, 0.8933153605984264, 0.8790822325777695, 0.9190269894340513, 0.4107297643401787, 0.3631601485785292, 0.3543306074468643, 0.3689063130308887, 0.34696582325186986, 0.3615241847961028, 0.3709060597046109, 0.34451097220528326, 0.3730522206616408, 0.7159969178281116, 0.6729669777343324, 0.6927350954489695, 0.7688169758557002, 0.6762354708370318, 0.841934891859444, 0.7217780891896532, 0.7157374599021664, 0.7753408939133453, 0.23922658864292357, 0.25627337935314476, 0.1877440921124438, 0.16729150455174802, 0.18366881810180224, 0.18278956944927882, 0.19440909074305268, 0.18034951200479954, 0.1713547232599214, 0.16512018546369422, 0.275753252214197, 0.16353054879021833, 0.1746304573435269, 0.20808947499590857, 0.20458938339619637, 0.24682555750562518, 0.22303785237133678, 0.24432449610214857, 0.19348023198535025, 0.15795019981072456, 0.22715143597330212, 0.19400375309585838, 0.2289098317097067, 0.2344091481115994, 0.23450100304176735, 0.21424619297311354, 0.22346883391265449, 0.3367990232889364, 0.38363317614211756, 0.3229745312613973, 0.3379784991695577, 0.3374361407558446, 0.32019840055611193, 0.3609083165770548, 0.3371717107743637, 0.3551413863047075, 0.05427620174354819, 0.06750394251445668, 0.05765211120099323, 0.10493010904971523, 0.09295742295581166, 0.0779542660477015, 0.084859331629489, 0.04904254888434767, 0.08820846870941335, 0.22865489816926066, 0.2105613828636167, 0.22236842322674977, 0.21499023517351512, 0.2106288990155767, 0.23542506898465154, 0.21018861856021454, 0.21452044637445333, 0.20822222331715434, 0.5654539632334072, 0.5782295405535143, 0.5590233028742844, 0.5510383693190649, 0.5458444836410068, 0.5656540049384062, 0.57811885170791, 0.5901135290971724, 0.5911511848871402, 0.11009664543252584, 0.10720313272932125, 0.10095689690847087, 0.09296317242242513, 0.10727361768622579, 0.09990705085599916, 0.10291592082132739, 0.10558999958323856, 0.08872726869907677, 0.1522313431115112, 0.12800611029681108, 0.13521220542051016, 0.15171955036357376, 0.19238959679178402, 0.14910728556390462, 0.15670765500787698, 0.17016961656217955, 0.174453207059176, 0.35258634599635275, 0.3458598511718748, 0.34658808629422544, 0.34361148318312373, 0.3435947104360897, 0.35224154129176233, 0.34693487293204484, 0.37309570038556616, 0.3553815586932424, 0.25790552831420466, 0.27443434819529977, 0.2570722711238246, 0.2467130972270305, 0.2590148325152606, 0.2627228183635252, 0.2863799186644407, 0.28024826176498585, 0.2679791101348604, 0.2264174916620375, 0.18471763729355206, 0.2085505679819475, 0.21148795569359247, 0.19012017123822156, 0.21869860701364596, 0.21946723314360084, 0.1968562322516676, 0.18834523997803487, 0.18920118830908017, 0.20137779470827089, 0.18665617438779136, 0.18297252388184726, 0.18929384756406076, 0.18069021503118032, 0.18405419037548276, 0.19655858753750322, 0.20247686149956212, 0.7044727888673262, 0.6746093927749737, 0.19909067349021736, 0.6396132982582976, 0.5235278246696712, 0.5782441456195337, 0.4883575966469529, 0.5997582821100547, 0.7111748434036029, 0.16601783032592543, 0.16546162587767466, 0.7298962339745761, 0.6791644822156938, 0.19096122358535927, 0.19896360354762355, 0.5134993917872052, 0.20745921580583404, 0.20524653427616468, 0.1906920099971534, 0.18811330744644605, 0.1898725054277799, 0.18049728372398144, 0.17981926503594092, 0.1844415446160096, 0.18300461036418314, 0.189426036750466, 0.19761447221813178, 0.08175204366441635, 0.07543054826886542, 0.08525431773039904, 0.08042009276453232, 0.08041064747960458, 0.07340812212597136, 0.08361415005623873, 0.07271281252717166, 0.0797238474365447]}, "mutation_prompt": null}
{"id": "fa7bee75-37b5-4b7b-ae4e-23e934582a27", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to effectively explore and exploit the search space for diverse black-box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.7277708479472665, 0.7203685752072952, 0.7592234670981438, 0.7270060762945723, 0.7223901348236126, 0.7242485996825256, 0.7421371717417691, 0.7299076153451518, 0.7094162303521239, 0.4296726600596913, 0.41074883258345496, 0.42588408605962613, 0.39951016742800516, 0.3903370181241913, 0.41058409408197405, 0.43147271506892293, 0.42206789542362155, 0.41873312460062695, 0.10284063601978066, 0.11457928335076872, 0.10319522463229236, 0.1325338907259298, 0.11254320357379743, 0.11729588517516054, 0.10344178764629419, 0.10310373984390464, 0.10876788512707791, 0.0875219073896546, 0.0895957288036312, 0.09696825329481906, 0.10295546322778282, 0.10511877021066396, 0.08885357670890992, 0.10047441267872326, 0.09074566671245543, 0.10506960329275372, 0.8923805994833915, 0.8899558754892319, 0.9258474176922777, 0.9165075340901212, 0.9037999664934113, 0.9126100151783798, 0.8933153605984264, 0.8790822325777695, 0.9190269894340513, 0.4107297643401787, 0.3631601485785292, 0.3543306074468643, 0.3689063130308887, 0.34696582325186986, 0.3615241847961028, 0.3709060597046109, 0.34451097220528326, 0.3730522206616408, 0.7159969178281116, 0.6729669777343324, 0.6927350954489695, 0.7688169758557002, 0.6762354708370318, 0.841934891859444, 0.7217780891896532, 0.7157374599021664, 0.7753408939133453, 0.23922658864292357, 0.25627337935314476, 0.1877440921124438, 0.16729150455174802, 0.18366881810180224, 0.18278956944927882, 0.19440909074305268, 0.18034951200479954, 0.1713547232599214, 0.16512018546369422, 0.275753252214197, 0.16353054879021833, 0.1746304573435269, 0.20808947499590857, 0.20458938339619637, 0.24682555750562518, 0.22303785237133678, 0.24432449610214857, 0.19348023198535025, 0.15795019981072456, 0.22715143597330212, 0.19400375309585838, 0.2289098317097067, 0.2344091481115994, 0.23450100304176735, 0.21424619297311354, 0.22346883391265449, 0.3367990232889364, 0.38363317614211756, 0.3229745312613973, 0.3379784991695577, 0.3374361407558446, 0.32019840055611193, 0.3609083165770548, 0.3371717107743637, 0.3551413863047075, 0.05427620174354819, 0.06750394251445668, 0.05765211120099323, 0.10493010904971523, 0.09295742295581166, 0.0779542660477015, 0.084859331629489, 0.04904254888434767, 0.08820846870941335, 0.22865489816926066, 0.2105613828636167, 0.22236842322674977, 0.21499023517351512, 0.2106288990155767, 0.23542506898465154, 0.21018861856021454, 0.21452044637445333, 0.20822222331715434, 0.5654539632334072, 0.5782295405535143, 0.5590233028742844, 0.5510383693190649, 0.5458444836410068, 0.5656540049384062, 0.57811885170791, 0.5901135290971724, 0.5911511848871402, 0.11009664543252584, 0.10720313272932125, 0.10095689690847087, 0.09296317242242513, 0.10727361768622579, 0.09990705085599916, 0.10291592082132739, 0.10558999958323856, 0.08872726869907677, 0.1522313431115112, 0.12800611029681108, 0.13521220542051016, 0.15171955036357376, 0.19238959679178402, 0.14910728556390462, 0.15670765500787698, 0.17016961656217955, 0.174453207059176, 0.35258634599635275, 0.3458598511718748, 0.34658808629422544, 0.34361148318312373, 0.3435947104360897, 0.35224154129176233, 0.34693487293204484, 0.37309570038556616, 0.3553815586932424, 0.25790552831420466, 0.27443434819529977, 0.2570722711238246, 0.2467130972270305, 0.2590148325152606, 0.2627228183635252, 0.2863799186644407, 0.28024826176498585, 0.2679791101348604, 0.2264174916620375, 0.18471763729355206, 0.2085505679819475, 0.21148795569359247, 0.19012017123822156, 0.21869860701364596, 0.21946723314360084, 0.1968562322516676, 0.18834523997803487, 0.18920118830908017, 0.20137779470827089, 0.18665617438779136, 0.18297252388184726, 0.18929384756406076, 0.18069021503118032, 0.18405419037548276, 0.19655858753750322, 0.20247686149956212, 0.7044727888673262, 0.6746093927749737, 0.19909067349021736, 0.6396132982582976, 0.5235278246696712, 0.5782441456195337, 0.4883575966469529, 0.5997582821100547, 0.7111748434036029, 0.16601783032592543, 0.16546162587767466, 0.7298962339745761, 0.6791644822156938, 0.19096122358535927, 0.19896360354762355, 0.5134993917872052, 0.20745921580583404, 0.20524653427616468, 0.1906920099971534, 0.18811330744644605, 0.1898725054277799, 0.18049728372398144, 0.17981926503594092, 0.1844415446160096, 0.18300461036418314, 0.189426036750466, 0.19761447221813178, 0.08175204366441635, 0.07543054826886542, 0.08525431773039904, 0.08042009276453232, 0.08041064747960458, 0.07340812212597136, 0.08361415005623873, 0.07271281252717166, 0.0797238474365447]}, "mutation_prompt": null}
{"id": "13ff721a-9dbf-4fd7-8503-dc4d28c279b7", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamically adapt F and CR\n                self.F = 0.5 + 0.3 * np.random.rand()\n                self.CR = 0.8 + 0.2 * np.random.rand()\n                \n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Lévy Flight incorporating dynamic adaptation of crossover and mutation rates.", "configspace": "", "generation": 8, "fitness": 0.276781894237694, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.6026475557547717, 0.6195611572162578, 0.6224543461510492, 0.5915843616134017, 0.6305404964961006, 0.6555166814748968, 0.58903784359687, 0.6463219862227927, 0.6276306831843346, 0.2704556098446146, 0.2675851338478863, 0.3051162245196436, 0.2725788634972146, 0.32570114661465155, 0.2608667147529893, 0.28833579190485814, 0.28944376157301244, 0.3482927341743055, 0.09605009228710837, 0.10033332329862588, 0.10889633813644883, 0.10061954276487484, 0.10527103465374599, 0.09728046137868585, 0.10544569209685328, 0.10588836636141585, 0.1123444051188548, 0.09832124757725635, 0.10406018239812143, 0.08745792509477102, 0.09367205949874569, 0.10079476121478415, 0.08685106641497309, 0.08372411177441808, 0.10000354259690014, 0.09341935296206305, 0.9192536934426826, 0.8918730869957368, 0.8852917008166713, 0.9289234101395291, 0.9224193093074677, 0.8702542626231745, 0.8763450262370825, 0.8852209270638846, 0.888972328242803, 0.3208232981007082, 0.2909644096046212, 0.30003015203933925, 0.29555367970778, 0.295169653066953, 0.30898174145757473, 0.2920124090238875, 0.3182454861848737, 0.3037621178885471, 0.6101118652906172, 0.5746926151142869, 0.596960903106494, 0.6337952353592777, 0.6506531647534382, 0.6063474057681628, 0.5759876971884372, 0.6370108799229157, 0.6249764304847505, 0.22943190238226563, 0.19048292559118496, 0.1959634946417409, 0.19107212979645838, 0.21007579110470065, 0.17368421194385608, 0.21539399307032758, 0.20800799720535823, 0.21526115201336438, 0.18137738358046662, 0.2016344041499396, 0.16708706057933342, 0.16669841375181782, 0.204947069683045, 0.21739659355781005, 0.2121483245659206, 0.18841430376397306, 0.20357520585726985, 0.12719886661270652, 0.10928245634071776, 0.12635042100983662, 0.09606579181048658, 0.11163162008414251, 0.12539120183415886, 0.12218722114766023, 0.1365135947080227, 0.13091263380838825, 0.2500085590456055, 0.2496258011464868, 0.2472355296924833, 0.2439066548363389, 0.24599995821355425, 0.2763489655954834, 0.2496146966868198, 0.23465179848678752, 0.2640972664342064, 0.016310878037373744, 0.031437350220644866, 0.023579460398952867, 0.04099705976640455, 0.030263480377750285, 0.02473248262075356, 0.03895442053686293, 0.04683392715771317, 0.03580736288184139, 0.16358196920940993, 0.16205636062117645, 0.16130217111141176, 0.15882333041520413, 0.17659502605356792, 0.15909754497102713, 0.17090630959111786, 0.15618673091118218, 0.14728894339460097, 0.4975600486866505, 0.48655668227222926, 0.5085557769470572, 0.5104560154214742, 0.49209733358718655, 0.49683810918566707, 0.49327366573312925, 0.4859905943358054, 0.4984404248037543, 0.08482227538198517, 0.08555511637019808, 0.08564987285939629, 0.0875429755658006, 0.09741265620465223, 0.08553637769814526, 0.09747971077932094, 0.10934023130927928, 0.0842768257610953, 0.30082338302786105, 0.13725117022408106, 0.16042731315795677, 0.1628653164750583, 0.13236363122439287, 0.19183756510597327, 0.13996080741888528, 0.13412681453868447, 0.16377219723396252, 0.29754790035395084, 0.29282612571707645, 0.2924162175346626, 0.27827201960440373, 0.28422732690532304, 0.2878789288638366, 0.31554071677495754, 0.2986207353667112, 0.3273488277072094, 0.22970334744759846, 0.24965166096078806, 0.23508296868312795, 0.2115775779050273, 0.22338487082509595, 0.21915254036848553, 0.2363677478522106, 0.24515476974162398, 0.25755767634747917, 0.19404562723541563, 0.20232395057126518, 0.20103636805943548, 0.1880270162322819, 0.19758582027164684, 0.19325515475739652, 0.1807633959317041, 0.1886611432188755, 0.20026835915550034, 0.18640510710987435, 0.1804928003609757, 0.1736822490413148, 0.18594329635334716, 0.18343199666379428, 0.18503362525329436, 0.1867967960934367, 0.18705507806931632, 0.18123680921742724, 0.6191090824883366, 0.5884360573484481, 0.4465959243830342, 0.1975273031400434, 0.4413566036441984, 0.576930913513323, 0.33492863972795706, 0.23522310337045516, 0.3553529650251894, 0.5871885869794878, 0.20077148499196829, 0.4802441706157702, 0.19979412356023685, 0.33424677329754815, 0.5434316594778519, 0.2065834694406099, 0.5388006012332871, 0.590393514224423, 0.18838300301843114, 0.20052790707424972, 0.1806803905060056, 0.17570120290805646, 0.18535467425502072, 0.17784146103911025, 0.1837193055432731, 0.1871437091157755, 0.18006949103571201, 0.07233510254656417, 0.07685851189947224, 0.07892052468027067, 0.07250188021839599, 0.08274100221343939, 0.08050655372754356, 0.07687524151998582, 0.07146558842819284, 0.08401149527497787]}, "mutation_prompt": null}
{"id": "1e38b849-5713-42a0-9d4b-91dfe9b85c90", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to effectively explore and exploit the search space for diverse black-box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.7277708479472665, 0.7203685752072952, 0.7592234670981438, 0.7270060762945723, 0.7223901348236126, 0.7242485996825256, 0.7421371717417691, 0.7299076153451518, 0.7094162303521239, 0.4296726600596913, 0.41074883258345496, 0.42588408605962613, 0.39951016742800516, 0.3903370181241913, 0.41058409408197405, 0.43147271506892293, 0.42206789542362155, 0.41873312460062695, 0.10284063601978066, 0.11457928335076872, 0.10319522463229236, 0.1325338907259298, 0.11254320357379743, 0.11729588517516054, 0.10344178764629419, 0.10310373984390464, 0.10876788512707791, 0.0875219073896546, 0.0895957288036312, 0.09696825329481906, 0.10295546322778282, 0.10511877021066396, 0.08885357670890992, 0.10047441267872326, 0.09074566671245543, 0.10506960329275372, 0.8923805994833915, 0.8899558754892319, 0.9258474176922777, 0.9165075340901212, 0.9037999664934113, 0.9126100151783798, 0.8933153605984264, 0.8790822325777695, 0.9190269894340513, 0.4107297643401787, 0.3631601485785292, 0.3543306074468643, 0.3689063130308887, 0.34696582325186986, 0.3615241847961028, 0.3709060597046109, 0.34451097220528326, 0.3730522206616408, 0.7159969178281116, 0.6729669777343324, 0.6927350954489695, 0.7688169758557002, 0.6762354708370318, 0.841934891859444, 0.7217780891896532, 0.7157374599021664, 0.7753408939133453, 0.23922658864292357, 0.25627337935314476, 0.1877440921124438, 0.16729150455174802, 0.18366881810180224, 0.18278956944927882, 0.19440909074305268, 0.18034951200479954, 0.1713547232599214, 0.16512018546369422, 0.275753252214197, 0.16353054879021833, 0.1746304573435269, 0.20808947499590857, 0.20458938339619637, 0.24682555750562518, 0.22303785237133678, 0.24432449610214857, 0.19348023198535025, 0.15795019981072456, 0.22715143597330212, 0.19400375309585838, 0.2289098317097067, 0.2344091481115994, 0.23450100304176735, 0.21424619297311354, 0.22346883391265449, 0.3367990232889364, 0.38363317614211756, 0.3229745312613973, 0.3379784991695577, 0.3374361407558446, 0.32019840055611193, 0.3609083165770548, 0.3371717107743637, 0.3551413863047075, 0.05427620174354819, 0.06750394251445668, 0.05765211120099323, 0.10493010904971523, 0.09295742295581166, 0.0779542660477015, 0.084859331629489, 0.04904254888434767, 0.08820846870941335, 0.22865489816926066, 0.2105613828636167, 0.22236842322674977, 0.21499023517351512, 0.2106288990155767, 0.23542506898465154, 0.21018861856021454, 0.21452044637445333, 0.20822222331715434, 0.5654539632334072, 0.5782295405535143, 0.5590233028742844, 0.5510383693190649, 0.5458444836410068, 0.5656540049384062, 0.57811885170791, 0.5901135290971724, 0.5911511848871402, 0.11009664543252584, 0.10720313272932125, 0.10095689690847087, 0.09296317242242513, 0.10727361768622579, 0.09990705085599916, 0.10291592082132739, 0.10558999958323856, 0.08872726869907677, 0.1522313431115112, 0.12800611029681108, 0.13521220542051016, 0.15171955036357376, 0.19238959679178402, 0.14910728556390462, 0.15670765500787698, 0.17016961656217955, 0.174453207059176, 0.35258634599635275, 0.3458598511718748, 0.34658808629422544, 0.34361148318312373, 0.3435947104360897, 0.35224154129176233, 0.34693487293204484, 0.37309570038556616, 0.3553815586932424, 0.25790552831420466, 0.27443434819529977, 0.2570722711238246, 0.2467130972270305, 0.2590148325152606, 0.2627228183635252, 0.2863799186644407, 0.28024826176498585, 0.2679791101348604, 0.2264174916620375, 0.18471763729355206, 0.2085505679819475, 0.21148795569359247, 0.19012017123822156, 0.21869860701364596, 0.21946723314360084, 0.1968562322516676, 0.18834523997803487, 0.18920118830908017, 0.20137779470827089, 0.18665617438779136, 0.18297252388184726, 0.18929384756406076, 0.18069021503118032, 0.18405419037548276, 0.19655858753750322, 0.20247686149956212, 0.7044727888673262, 0.6746093927749737, 0.19909067349021736, 0.6396132982582976, 0.5235278246696712, 0.5782441456195337, 0.4883575966469529, 0.5997582821100547, 0.7111748434036029, 0.16601783032592543, 0.16546162587767466, 0.7298962339745761, 0.6791644822156938, 0.19096122358535927, 0.19896360354762355, 0.5134993917872052, 0.20745921580583404, 0.20524653427616468, 0.1906920099971534, 0.18811330744644605, 0.1898725054277799, 0.18049728372398144, 0.17981926503594092, 0.1844415446160096, 0.18300461036418314, 0.189426036750466, 0.19761447221813178, 0.08175204366441635, 0.07543054826886542, 0.08525431773039904, 0.08042009276453232, 0.08041064747960458, 0.07340812212597136, 0.08361415005623873, 0.07271281252717166, 0.0797238474365447]}, "mutation_prompt": null}
{"id": "861c1d0d-1a0f-4aa9-a1d8-5dcabac7053a", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to effectively explore and exploit the search space for diverse black-box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.7277708479472665, 0.7203685752072952, 0.7592234670981438, 0.7270060762945723, 0.7223901348236126, 0.7242485996825256, 0.7421371717417691, 0.7299076153451518, 0.7094162303521239, 0.4296726600596913, 0.41074883258345496, 0.42588408605962613, 0.39951016742800516, 0.3903370181241913, 0.41058409408197405, 0.43147271506892293, 0.42206789542362155, 0.41873312460062695, 0.10284063601978066, 0.11457928335076872, 0.10319522463229236, 0.1325338907259298, 0.11254320357379743, 0.11729588517516054, 0.10344178764629419, 0.10310373984390464, 0.10876788512707791, 0.0875219073896546, 0.0895957288036312, 0.09696825329481906, 0.10295546322778282, 0.10511877021066396, 0.08885357670890992, 0.10047441267872326, 0.09074566671245543, 0.10506960329275372, 0.8923805994833915, 0.8899558754892319, 0.9258474176922777, 0.9165075340901212, 0.9037999664934113, 0.9126100151783798, 0.8933153605984264, 0.8790822325777695, 0.9190269894340513, 0.4107297643401787, 0.3631601485785292, 0.3543306074468643, 0.3689063130308887, 0.34696582325186986, 0.3615241847961028, 0.3709060597046109, 0.34451097220528326, 0.3730522206616408, 0.7159969178281116, 0.6729669777343324, 0.6927350954489695, 0.7688169758557002, 0.6762354708370318, 0.841934891859444, 0.7217780891896532, 0.7157374599021664, 0.7753408939133453, 0.23922658864292357, 0.25627337935314476, 0.1877440921124438, 0.16729150455174802, 0.18366881810180224, 0.18278956944927882, 0.19440909074305268, 0.18034951200479954, 0.1713547232599214, 0.16512018546369422, 0.275753252214197, 0.16353054879021833, 0.1746304573435269, 0.20808947499590857, 0.20458938339619637, 0.24682555750562518, 0.22303785237133678, 0.24432449610214857, 0.19348023198535025, 0.15795019981072456, 0.22715143597330212, 0.19400375309585838, 0.2289098317097067, 0.2344091481115994, 0.23450100304176735, 0.21424619297311354, 0.22346883391265449, 0.3367990232889364, 0.38363317614211756, 0.3229745312613973, 0.3379784991695577, 0.3374361407558446, 0.32019840055611193, 0.3609083165770548, 0.3371717107743637, 0.3551413863047075, 0.05427620174354819, 0.06750394251445668, 0.05765211120099323, 0.10493010904971523, 0.09295742295581166, 0.0779542660477015, 0.084859331629489, 0.04904254888434767, 0.08820846870941335, 0.22865489816926066, 0.2105613828636167, 0.22236842322674977, 0.21499023517351512, 0.2106288990155767, 0.23542506898465154, 0.21018861856021454, 0.21452044637445333, 0.20822222331715434, 0.5654539632334072, 0.5782295405535143, 0.5590233028742844, 0.5510383693190649, 0.5458444836410068, 0.5656540049384062, 0.57811885170791, 0.5901135290971724, 0.5911511848871402, 0.11009664543252584, 0.10720313272932125, 0.10095689690847087, 0.09296317242242513, 0.10727361768622579, 0.09990705085599916, 0.10291592082132739, 0.10558999958323856, 0.08872726869907677, 0.1522313431115112, 0.12800611029681108, 0.13521220542051016, 0.15171955036357376, 0.19238959679178402, 0.14910728556390462, 0.15670765500787698, 0.17016961656217955, 0.174453207059176, 0.35258634599635275, 0.3458598511718748, 0.34658808629422544, 0.34361148318312373, 0.3435947104360897, 0.35224154129176233, 0.34693487293204484, 0.37309570038556616, 0.3553815586932424, 0.25790552831420466, 0.27443434819529977, 0.2570722711238246, 0.2467130972270305, 0.2590148325152606, 0.2627228183635252, 0.2863799186644407, 0.28024826176498585, 0.2679791101348604, 0.2264174916620375, 0.18471763729355206, 0.2085505679819475, 0.21148795569359247, 0.19012017123822156, 0.21869860701364596, 0.21946723314360084, 0.1968562322516676, 0.18834523997803487, 0.18920118830908017, 0.20137779470827089, 0.18665617438779136, 0.18297252388184726, 0.18929384756406076, 0.18069021503118032, 0.18405419037548276, 0.19655858753750322, 0.20247686149956212, 0.7044727888673262, 0.6746093927749737, 0.19909067349021736, 0.6396132982582976, 0.5235278246696712, 0.5782441456195337, 0.4883575966469529, 0.5997582821100547, 0.7111748434036029, 0.16601783032592543, 0.16546162587767466, 0.7298962339745761, 0.6791644822156938, 0.19096122358535927, 0.19896360354762355, 0.5134993917872052, 0.20745921580583404, 0.20524653427616468, 0.1906920099971534, 0.18811330744644605, 0.1898725054277799, 0.18049728372398144, 0.17981926503594092, 0.1844415446160096, 0.18300461036418314, 0.189426036750466, 0.19761447221813178, 0.08175204366441635, 0.07543054826886542, 0.08525431773039904, 0.08042009276453232, 0.08041064747960458, 0.07340812212597136, 0.08361415005623873, 0.07271281252717166, 0.0797238474365447]}, "mutation_prompt": null}
{"id": "a1b191f6-f0c8-43e6-a4cb-826832ce62fb", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to effectively explore and exploit the search space for diverse black-box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.7277708479472665, 0.7203685752072952, 0.7592234670981438, 0.7270060762945723, 0.7223901348236126, 0.7242485996825256, 0.7421371717417691, 0.7299076153451518, 0.7094162303521239, 0.4296726600596913, 0.41074883258345496, 0.42588408605962613, 0.39951016742800516, 0.3903370181241913, 0.41058409408197405, 0.43147271506892293, 0.42206789542362155, 0.41873312460062695, 0.10284063601978066, 0.11457928335076872, 0.10319522463229236, 0.1325338907259298, 0.11254320357379743, 0.11729588517516054, 0.10344178764629419, 0.10310373984390464, 0.10876788512707791, 0.0875219073896546, 0.0895957288036312, 0.09696825329481906, 0.10295546322778282, 0.10511877021066396, 0.08885357670890992, 0.10047441267872326, 0.09074566671245543, 0.10506960329275372, 0.8923805994833915, 0.8899558754892319, 0.9258474176922777, 0.9165075340901212, 0.9037999664934113, 0.9126100151783798, 0.8933153605984264, 0.8790822325777695, 0.9190269894340513, 0.4107297643401787, 0.3631601485785292, 0.3543306074468643, 0.3689063130308887, 0.34696582325186986, 0.3615241847961028, 0.3709060597046109, 0.34451097220528326, 0.3730522206616408, 0.7159969178281116, 0.6729669777343324, 0.6927350954489695, 0.7688169758557002, 0.6762354708370318, 0.841934891859444, 0.7217780891896532, 0.7157374599021664, 0.7753408939133453, 0.23922658864292357, 0.25627337935314476, 0.1877440921124438, 0.16729150455174802, 0.18366881810180224, 0.18278956944927882, 0.19440909074305268, 0.18034951200479954, 0.1713547232599214, 0.16512018546369422, 0.275753252214197, 0.16353054879021833, 0.1746304573435269, 0.20808947499590857, 0.20458938339619637, 0.24682555750562518, 0.22303785237133678, 0.24432449610214857, 0.19348023198535025, 0.15795019981072456, 0.22715143597330212, 0.19400375309585838, 0.2289098317097067, 0.2344091481115994, 0.23450100304176735, 0.21424619297311354, 0.22346883391265449, 0.3367990232889364, 0.38363317614211756, 0.3229745312613973, 0.3379784991695577, 0.3374361407558446, 0.32019840055611193, 0.3609083165770548, 0.3371717107743637, 0.3551413863047075, 0.05427620174354819, 0.06750394251445668, 0.05765211120099323, 0.10493010904971523, 0.09295742295581166, 0.0779542660477015, 0.084859331629489, 0.04904254888434767, 0.08820846870941335, 0.22865489816926066, 0.2105613828636167, 0.22236842322674977, 0.21499023517351512, 0.2106288990155767, 0.23542506898465154, 0.21018861856021454, 0.21452044637445333, 0.20822222331715434, 0.5654539632334072, 0.5782295405535143, 0.5590233028742844, 0.5510383693190649, 0.5458444836410068, 0.5656540049384062, 0.57811885170791, 0.5901135290971724, 0.5911511848871402, 0.11009664543252584, 0.10720313272932125, 0.10095689690847087, 0.09296317242242513, 0.10727361768622579, 0.09990705085599916, 0.10291592082132739, 0.10558999958323856, 0.08872726869907677, 0.1522313431115112, 0.12800611029681108, 0.13521220542051016, 0.15171955036357376, 0.19238959679178402, 0.14910728556390462, 0.15670765500787698, 0.17016961656217955, 0.174453207059176, 0.35258634599635275, 0.3458598511718748, 0.34658808629422544, 0.34361148318312373, 0.3435947104360897, 0.35224154129176233, 0.34693487293204484, 0.37309570038556616, 0.3553815586932424, 0.25790552831420466, 0.27443434819529977, 0.2570722711238246, 0.2467130972270305, 0.2590148325152606, 0.2627228183635252, 0.2863799186644407, 0.28024826176498585, 0.2679791101348604, 0.2264174916620375, 0.18471763729355206, 0.2085505679819475, 0.21148795569359247, 0.19012017123822156, 0.21869860701364596, 0.21946723314360084, 0.1968562322516676, 0.18834523997803487, 0.18920118830908017, 0.20137779470827089, 0.18665617438779136, 0.18297252388184726, 0.18929384756406076, 0.18069021503118032, 0.18405419037548276, 0.19655858753750322, 0.20247686149956212, 0.7044727888673262, 0.6746093927749737, 0.19909067349021736, 0.6396132982582976, 0.5235278246696712, 0.5782441456195337, 0.4883575966469529, 0.5997582821100547, 0.7111748434036029, 0.16601783032592543, 0.16546162587767466, 0.7298962339745761, 0.6791644822156938, 0.19096122358535927, 0.19896360354762355, 0.5134993917872052, 0.20745921580583404, 0.20524653427616468, 0.1906920099971534, 0.18811330744644605, 0.1898725054277799, 0.18049728372398144, 0.17981926503594092, 0.1844415446160096, 0.18300461036418314, 0.189426036750466, 0.19761447221813178, 0.08175204366441635, 0.07543054826886542, 0.08525431773039904, 0.08042009276453232, 0.08041064747960458, 0.07340812212597136, 0.08361415005623873, 0.07271281252717166, 0.0797238474365447]}, "mutation_prompt": null}
{"id": "0388f6dd-4914-49fa-869c-ff990b8a2b86", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to effectively explore and exploit the search space for diverse black-box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.7277708479472665, 0.7203685752072952, 0.7592234670981438, 0.7270060762945723, 0.7223901348236126, 0.7242485996825256, 0.7421371717417691, 0.7299076153451518, 0.7094162303521239, 0.4296726600596913, 0.41074883258345496, 0.42588408605962613, 0.39951016742800516, 0.3903370181241913, 0.41058409408197405, 0.43147271506892293, 0.42206789542362155, 0.41873312460062695, 0.10284063601978066, 0.11457928335076872, 0.10319522463229236, 0.1325338907259298, 0.11254320357379743, 0.11729588517516054, 0.10344178764629419, 0.10310373984390464, 0.10876788512707791, 0.0875219073896546, 0.0895957288036312, 0.09696825329481906, 0.10295546322778282, 0.10511877021066396, 0.08885357670890992, 0.10047441267872326, 0.09074566671245543, 0.10506960329275372, 0.8923805994833915, 0.8899558754892319, 0.9258474176922777, 0.9165075340901212, 0.9037999664934113, 0.9126100151783798, 0.8933153605984264, 0.8790822325777695, 0.9190269894340513, 0.4107297643401787, 0.3631601485785292, 0.3543306074468643, 0.3689063130308887, 0.34696582325186986, 0.3615241847961028, 0.3709060597046109, 0.34451097220528326, 0.3730522206616408, 0.7159969178281116, 0.6729669777343324, 0.6927350954489695, 0.7688169758557002, 0.6762354708370318, 0.841934891859444, 0.7217780891896532, 0.7157374599021664, 0.7753408939133453, 0.23922658864292357, 0.25627337935314476, 0.1877440921124438, 0.16729150455174802, 0.18366881810180224, 0.18278956944927882, 0.19440909074305268, 0.18034951200479954, 0.1713547232599214, 0.16512018546369422, 0.275753252214197, 0.16353054879021833, 0.1746304573435269, 0.20808947499590857, 0.20458938339619637, 0.24682555750562518, 0.22303785237133678, 0.24432449610214857, 0.19348023198535025, 0.15795019981072456, 0.22715143597330212, 0.19400375309585838, 0.2289098317097067, 0.2344091481115994, 0.23450100304176735, 0.21424619297311354, 0.22346883391265449, 0.3367990232889364, 0.38363317614211756, 0.3229745312613973, 0.3379784991695577, 0.3374361407558446, 0.32019840055611193, 0.3609083165770548, 0.3371717107743637, 0.3551413863047075, 0.05427620174354819, 0.06750394251445668, 0.05765211120099323, 0.10493010904971523, 0.09295742295581166, 0.0779542660477015, 0.084859331629489, 0.04904254888434767, 0.08820846870941335, 0.22865489816926066, 0.2105613828636167, 0.22236842322674977, 0.21499023517351512, 0.2106288990155767, 0.23542506898465154, 0.21018861856021454, 0.21452044637445333, 0.20822222331715434, 0.5654539632334072, 0.5782295405535143, 0.5590233028742844, 0.5510383693190649, 0.5458444836410068, 0.5656540049384062, 0.57811885170791, 0.5901135290971724, 0.5911511848871402, 0.11009664543252584, 0.10720313272932125, 0.10095689690847087, 0.09296317242242513, 0.10727361768622579, 0.09990705085599916, 0.10291592082132739, 0.10558999958323856, 0.08872726869907677, 0.1522313431115112, 0.12800611029681108, 0.13521220542051016, 0.15171955036357376, 0.19238959679178402, 0.14910728556390462, 0.15670765500787698, 0.17016961656217955, 0.174453207059176, 0.35258634599635275, 0.3458598511718748, 0.34658808629422544, 0.34361148318312373, 0.3435947104360897, 0.35224154129176233, 0.34693487293204484, 0.37309570038556616, 0.3553815586932424, 0.25790552831420466, 0.27443434819529977, 0.2570722711238246, 0.2467130972270305, 0.2590148325152606, 0.2627228183635252, 0.2863799186644407, 0.28024826176498585, 0.2679791101348604, 0.2264174916620375, 0.18471763729355206, 0.2085505679819475, 0.21148795569359247, 0.19012017123822156, 0.21869860701364596, 0.21946723314360084, 0.1968562322516676, 0.18834523997803487, 0.18920118830908017, 0.20137779470827089, 0.18665617438779136, 0.18297252388184726, 0.18929384756406076, 0.18069021503118032, 0.18405419037548276, 0.19655858753750322, 0.20247686149956212, 0.7044727888673262, 0.6746093927749737, 0.19909067349021736, 0.6396132982582976, 0.5235278246696712, 0.5782441456195337, 0.4883575966469529, 0.5997582821100547, 0.7111748434036029, 0.16601783032592543, 0.16546162587767466, 0.7298962339745761, 0.6791644822156938, 0.19096122358535927, 0.19896360354762355, 0.5134993917872052, 0.20745921580583404, 0.20524653427616468, 0.1906920099971534, 0.18811330744644605, 0.1898725054277799, 0.18049728372398144, 0.17981926503594092, 0.1844415446160096, 0.18300461036418314, 0.189426036750466, 0.19761447221813178, 0.08175204366441635, 0.07543054826886542, 0.08525431773039904, 0.08042009276453232, 0.08041064747960458, 0.07340812212597136, 0.08361415005623873, 0.07271281252717166, 0.0797238474365447]}, "mutation_prompt": null}
{"id": "0e06b83f-4049-41eb-8c30-002c590043b2", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to effectively explore and exploit the search space for diverse black-box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.7277708479472665, 0.7203685752072952, 0.7592234670981438, 0.7270060762945723, 0.7223901348236126, 0.7242485996825256, 0.7421371717417691, 0.7299076153451518, 0.7094162303521239, 0.4296726600596913, 0.41074883258345496, 0.42588408605962613, 0.39951016742800516, 0.3903370181241913, 0.41058409408197405, 0.43147271506892293, 0.42206789542362155, 0.41873312460062695, 0.10284063601978066, 0.11457928335076872, 0.10319522463229236, 0.1325338907259298, 0.11254320357379743, 0.11729588517516054, 0.10344178764629419, 0.10310373984390464, 0.10876788512707791, 0.0875219073896546, 0.0895957288036312, 0.09696825329481906, 0.10295546322778282, 0.10511877021066396, 0.08885357670890992, 0.10047441267872326, 0.09074566671245543, 0.10506960329275372, 0.8923805994833915, 0.8899558754892319, 0.9258474176922777, 0.9165075340901212, 0.9037999664934113, 0.9126100151783798, 0.8933153605984264, 0.8790822325777695, 0.9190269894340513, 0.4107297643401787, 0.3631601485785292, 0.3543306074468643, 0.3689063130308887, 0.34696582325186986, 0.3615241847961028, 0.3709060597046109, 0.34451097220528326, 0.3730522206616408, 0.7159969178281116, 0.6729669777343324, 0.6927350954489695, 0.7688169758557002, 0.6762354708370318, 0.841934891859444, 0.7217780891896532, 0.7157374599021664, 0.7753408939133453, 0.23922658864292357, 0.25627337935314476, 0.1877440921124438, 0.16729150455174802, 0.18366881810180224, 0.18278956944927882, 0.19440909074305268, 0.18034951200479954, 0.1713547232599214, 0.16512018546369422, 0.275753252214197, 0.16353054879021833, 0.1746304573435269, 0.20808947499590857, 0.20458938339619637, 0.24682555750562518, 0.22303785237133678, 0.24432449610214857, 0.19348023198535025, 0.15795019981072456, 0.22715143597330212, 0.19400375309585838, 0.2289098317097067, 0.2344091481115994, 0.23450100304176735, 0.21424619297311354, 0.22346883391265449, 0.3367990232889364, 0.38363317614211756, 0.3229745312613973, 0.3379784991695577, 0.3374361407558446, 0.32019840055611193, 0.3609083165770548, 0.3371717107743637, 0.3551413863047075, 0.05427620174354819, 0.06750394251445668, 0.05765211120099323, 0.10493010904971523, 0.09295742295581166, 0.0779542660477015, 0.084859331629489, 0.04904254888434767, 0.08820846870941335, 0.22865489816926066, 0.2105613828636167, 0.22236842322674977, 0.21499023517351512, 0.2106288990155767, 0.23542506898465154, 0.21018861856021454, 0.21452044637445333, 0.20822222331715434, 0.5654539632334072, 0.5782295405535143, 0.5590233028742844, 0.5510383693190649, 0.5458444836410068, 0.5656540049384062, 0.57811885170791, 0.5901135290971724, 0.5911511848871402, 0.11009664543252584, 0.10720313272932125, 0.10095689690847087, 0.09296317242242513, 0.10727361768622579, 0.09990705085599916, 0.10291592082132739, 0.10558999958323856, 0.08872726869907677, 0.1522313431115112, 0.12800611029681108, 0.13521220542051016, 0.15171955036357376, 0.19238959679178402, 0.14910728556390462, 0.15670765500787698, 0.17016961656217955, 0.174453207059176, 0.35258634599635275, 0.3458598511718748, 0.34658808629422544, 0.34361148318312373, 0.3435947104360897, 0.35224154129176233, 0.34693487293204484, 0.37309570038556616, 0.3553815586932424, 0.25790552831420466, 0.27443434819529977, 0.2570722711238246, 0.2467130972270305, 0.2590148325152606, 0.2627228183635252, 0.2863799186644407, 0.28024826176498585, 0.2679791101348604, 0.2264174916620375, 0.18471763729355206, 0.2085505679819475, 0.21148795569359247, 0.19012017123822156, 0.21869860701364596, 0.21946723314360084, 0.1968562322516676, 0.18834523997803487, 0.18920118830908017, 0.20137779470827089, 0.18665617438779136, 0.18297252388184726, 0.18929384756406076, 0.18069021503118032, 0.18405419037548276, 0.19655858753750322, 0.20247686149956212, 0.7044727888673262, 0.6746093927749737, 0.19909067349021736, 0.6396132982582976, 0.5235278246696712, 0.5782441456195337, 0.4883575966469529, 0.5997582821100547, 0.7111748434036029, 0.16601783032592543, 0.16546162587767466, 0.7298962339745761, 0.6791644822156938, 0.19096122358535927, 0.19896360354762355, 0.5134993917872052, 0.20745921580583404, 0.20524653427616468, 0.1906920099971534, 0.18811330744644605, 0.1898725054277799, 0.18049728372398144, 0.17981926503594092, 0.1844415446160096, 0.18300461036418314, 0.189426036750466, 0.19761447221813178, 0.08175204366441635, 0.07543054826886542, 0.08525431773039904, 0.08042009276453232, 0.08041064747960458, 0.07340812212597136, 0.08361415005623873, 0.07271281252717166, 0.0797238474365447]}, "mutation_prompt": null}
{"id": "6ec662ad-7075-4605-8adf-4a6b6ca5331e", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to effectively explore and exploit the search space for diverse black-box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.7277708479472665, 0.7203685752072952, 0.7592234670981438, 0.7270060762945723, 0.7223901348236126, 0.7242485996825256, 0.7421371717417691, 0.7299076153451518, 0.7094162303521239, 0.4296726600596913, 0.41074883258345496, 0.42588408605962613, 0.39951016742800516, 0.3903370181241913, 0.41058409408197405, 0.43147271506892293, 0.42206789542362155, 0.41873312460062695, 0.10284063601978066, 0.11457928335076872, 0.10319522463229236, 0.1325338907259298, 0.11254320357379743, 0.11729588517516054, 0.10344178764629419, 0.10310373984390464, 0.10876788512707791, 0.0875219073896546, 0.0895957288036312, 0.09696825329481906, 0.10295546322778282, 0.10511877021066396, 0.08885357670890992, 0.10047441267872326, 0.09074566671245543, 0.10506960329275372, 0.8923805994833915, 0.8899558754892319, 0.9258474176922777, 0.9165075340901212, 0.9037999664934113, 0.9126100151783798, 0.8933153605984264, 0.8790822325777695, 0.9190269894340513, 0.4107297643401787, 0.3631601485785292, 0.3543306074468643, 0.3689063130308887, 0.34696582325186986, 0.3615241847961028, 0.3709060597046109, 0.34451097220528326, 0.3730522206616408, 0.7159969178281116, 0.6729669777343324, 0.6927350954489695, 0.7688169758557002, 0.6762354708370318, 0.841934891859444, 0.7217780891896532, 0.7157374599021664, 0.7753408939133453, 0.23922658864292357, 0.25627337935314476, 0.1877440921124438, 0.16729150455174802, 0.18366881810180224, 0.18278956944927882, 0.19440909074305268, 0.18034951200479954, 0.1713547232599214, 0.16512018546369422, 0.275753252214197, 0.16353054879021833, 0.1746304573435269, 0.20808947499590857, 0.20458938339619637, 0.24682555750562518, 0.22303785237133678, 0.24432449610214857, 0.19348023198535025, 0.15795019981072456, 0.22715143597330212, 0.19400375309585838, 0.2289098317097067, 0.2344091481115994, 0.23450100304176735, 0.21424619297311354, 0.22346883391265449, 0.3367990232889364, 0.38363317614211756, 0.3229745312613973, 0.3379784991695577, 0.3374361407558446, 0.32019840055611193, 0.3609083165770548, 0.3371717107743637, 0.3551413863047075, 0.05427620174354819, 0.06750394251445668, 0.05765211120099323, 0.10493010904971523, 0.09295742295581166, 0.0779542660477015, 0.084859331629489, 0.04904254888434767, 0.08820846870941335, 0.22865489816926066, 0.2105613828636167, 0.22236842322674977, 0.21499023517351512, 0.2106288990155767, 0.23542506898465154, 0.21018861856021454, 0.21452044637445333, 0.20822222331715434, 0.5654539632334072, 0.5782295405535143, 0.5590233028742844, 0.5510383693190649, 0.5458444836410068, 0.5656540049384062, 0.57811885170791, 0.5901135290971724, 0.5911511848871402, 0.11009664543252584, 0.10720313272932125, 0.10095689690847087, 0.09296317242242513, 0.10727361768622579, 0.09990705085599916, 0.10291592082132739, 0.10558999958323856, 0.08872726869907677, 0.1522313431115112, 0.12800611029681108, 0.13521220542051016, 0.15171955036357376, 0.19238959679178402, 0.14910728556390462, 0.15670765500787698, 0.17016961656217955, 0.174453207059176, 0.35258634599635275, 0.3458598511718748, 0.34658808629422544, 0.34361148318312373, 0.3435947104360897, 0.35224154129176233, 0.34693487293204484, 0.37309570038556616, 0.3553815586932424, 0.25790552831420466, 0.27443434819529977, 0.2570722711238246, 0.2467130972270305, 0.2590148325152606, 0.2627228183635252, 0.2863799186644407, 0.28024826176498585, 0.2679791101348604, 0.2264174916620375, 0.18471763729355206, 0.2085505679819475, 0.21148795569359247, 0.19012017123822156, 0.21869860701364596, 0.21946723314360084, 0.1968562322516676, 0.18834523997803487, 0.18920118830908017, 0.20137779470827089, 0.18665617438779136, 0.18297252388184726, 0.18929384756406076, 0.18069021503118032, 0.18405419037548276, 0.19655858753750322, 0.20247686149956212, 0.7044727888673262, 0.6746093927749737, 0.19909067349021736, 0.6396132982582976, 0.5235278246696712, 0.5782441456195337, 0.4883575966469529, 0.5997582821100547, 0.7111748434036029, 0.16601783032592543, 0.16546162587767466, 0.7298962339745761, 0.6791644822156938, 0.19096122358535927, 0.19896360354762355, 0.5134993917872052, 0.20745921580583404, 0.20524653427616468, 0.1906920099971534, 0.18811330744644605, 0.1898725054277799, 0.18049728372398144, 0.17981926503594092, 0.1844415446160096, 0.18300461036418314, 0.189426036750466, 0.19761447221813178, 0.08175204366441635, 0.07543054826886542, 0.08525431773039904, 0.08042009276453232, 0.08041064747960458, 0.07340812212597136, 0.08361415005623873, 0.07271281252717166, 0.0797238474365447]}, "mutation_prompt": null}
{"id": "367e9a62-5b93-459e-bf17-56f51b74acf9", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to effectively explore and exploit the search space for diverse black-box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.7277708479472665, 0.7203685752072952, 0.7592234670981438, 0.7270060762945723, 0.7223901348236126, 0.7242485996825256, 0.7421371717417691, 0.7299076153451518, 0.7094162303521239, 0.4296726600596913, 0.41074883258345496, 0.42588408605962613, 0.39951016742800516, 0.3903370181241913, 0.41058409408197405, 0.43147271506892293, 0.42206789542362155, 0.41873312460062695, 0.10284063601978066, 0.11457928335076872, 0.10319522463229236, 0.1325338907259298, 0.11254320357379743, 0.11729588517516054, 0.10344178764629419, 0.10310373984390464, 0.10876788512707791, 0.0875219073896546, 0.0895957288036312, 0.09696825329481906, 0.10295546322778282, 0.10511877021066396, 0.08885357670890992, 0.10047441267872326, 0.09074566671245543, 0.10506960329275372, 0.8923805994833915, 0.8899558754892319, 0.9258474176922777, 0.9165075340901212, 0.9037999664934113, 0.9126100151783798, 0.8933153605984264, 0.8790822325777695, 0.9190269894340513, 0.4107297643401787, 0.3631601485785292, 0.3543306074468643, 0.3689063130308887, 0.34696582325186986, 0.3615241847961028, 0.3709060597046109, 0.34451097220528326, 0.3730522206616408, 0.7159969178281116, 0.6729669777343324, 0.6927350954489695, 0.7688169758557002, 0.6762354708370318, 0.841934891859444, 0.7217780891896532, 0.7157374599021664, 0.7753408939133453, 0.23922658864292357, 0.25627337935314476, 0.1877440921124438, 0.16729150455174802, 0.18366881810180224, 0.18278956944927882, 0.19440909074305268, 0.18034951200479954, 0.1713547232599214, 0.16512018546369422, 0.275753252214197, 0.16353054879021833, 0.1746304573435269, 0.20808947499590857, 0.20458938339619637, 0.24682555750562518, 0.22303785237133678, 0.24432449610214857, 0.19348023198535025, 0.15795019981072456, 0.22715143597330212, 0.19400375309585838, 0.2289098317097067, 0.2344091481115994, 0.23450100304176735, 0.21424619297311354, 0.22346883391265449, 0.3367990232889364, 0.38363317614211756, 0.3229745312613973, 0.3379784991695577, 0.3374361407558446, 0.32019840055611193, 0.3609083165770548, 0.3371717107743637, 0.3551413863047075, 0.05427620174354819, 0.06750394251445668, 0.05765211120099323, 0.10493010904971523, 0.09295742295581166, 0.0779542660477015, 0.084859331629489, 0.04904254888434767, 0.08820846870941335, 0.22865489816926066, 0.2105613828636167, 0.22236842322674977, 0.21499023517351512, 0.2106288990155767, 0.23542506898465154, 0.21018861856021454, 0.21452044637445333, 0.20822222331715434, 0.5654539632334072, 0.5782295405535143, 0.5590233028742844, 0.5510383693190649, 0.5458444836410068, 0.5656540049384062, 0.57811885170791, 0.5901135290971724, 0.5911511848871402, 0.11009664543252584, 0.10720313272932125, 0.10095689690847087, 0.09296317242242513, 0.10727361768622579, 0.09990705085599916, 0.10291592082132739, 0.10558999958323856, 0.08872726869907677, 0.1522313431115112, 0.12800611029681108, 0.13521220542051016, 0.15171955036357376, 0.19238959679178402, 0.14910728556390462, 0.15670765500787698, 0.17016961656217955, 0.174453207059176, 0.35258634599635275, 0.3458598511718748, 0.34658808629422544, 0.34361148318312373, 0.3435947104360897, 0.35224154129176233, 0.34693487293204484, 0.37309570038556616, 0.3553815586932424, 0.25790552831420466, 0.27443434819529977, 0.2570722711238246, 0.2467130972270305, 0.2590148325152606, 0.2627228183635252, 0.2863799186644407, 0.28024826176498585, 0.2679791101348604, 0.2264174916620375, 0.18471763729355206, 0.2085505679819475, 0.21148795569359247, 0.19012017123822156, 0.21869860701364596, 0.21946723314360084, 0.1968562322516676, 0.18834523997803487, 0.18920118830908017, 0.20137779470827089, 0.18665617438779136, 0.18297252388184726, 0.18929384756406076, 0.18069021503118032, 0.18405419037548276, 0.19655858753750322, 0.20247686149956212, 0.7044727888673262, 0.6746093927749737, 0.19909067349021736, 0.6396132982582976, 0.5235278246696712, 0.5782441456195337, 0.4883575966469529, 0.5997582821100547, 0.7111748434036029, 0.16601783032592543, 0.16546162587767466, 0.7298962339745761, 0.6791644822156938, 0.19096122358535927, 0.19896360354762355, 0.5134993917872052, 0.20745921580583404, 0.20524653427616468, 0.1906920099971534, 0.18811330744644605, 0.1898725054277799, 0.18049728372398144, 0.17981926503594092, 0.1844415446160096, 0.18300461036418314, 0.189426036750466, 0.19761447221813178, 0.08175204366441635, 0.07543054826886542, 0.08525431773039904, 0.08042009276453232, 0.08041064747960458, 0.07340812212597136, 0.08361415005623873, 0.07271281252717166, 0.0797238474365447]}, "mutation_prompt": null}
{"id": "a6d406d8-ef10-41b6-ad35-46f58e033ffa", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.6  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.7:\n                    trial += self.levy_flight(0.02 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Improved Hybrid Differential Evolution with Enhanced Adaptive Lévy Flight for superior exploration and exploitation balance.", "configspace": "", "generation": 16, "fitness": 0.234173794782596, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.502663617530056, 0.5002062960579023, 0.5201864736470208, 0.5254995483205741, 0.4979311885698916, 0.5189628580914484, 0.5270215996580447, 0.5063408270068812, 0.5192105111794132, 0.17460545926304205, 0.18723987467693315, 0.1858320039660898, 0.1662197430308856, 0.19230406444487402, 0.1470399840339114, 0.19000307013275586, 0.16940228767716148, 0.18226197612421502, 0.09706417759711239, 0.11108387846870116, 0.09879214186247665, 0.09188291145450278, 0.0958803025882009, 0.1090499079607089, 0.1065105121960116, 0.10714914570648693, 0.09437516492425624, 0.08106772364920112, 0.08754181115956072, 0.08287030713423171, 0.09504515849647976, 0.0931096019226092, 0.08734358237595474, 0.08589472265086662, 0.08858386956847031, 0.08962815805468449, 0.8681165605050523, 0.8926707710021496, 0.9150703410893074, 0.9625117950278849, 0.9260863574784354, 0.879472195925681, 0.9427320236328993, 0.9019841228206994, 0.9249994369119425, 0.2631566028062068, 0.25055413553367467, 0.24980427531386118, 0.24669621784684648, 0.26909370302980273, 0.25815310647512246, 0.2819447785539645, 0.27226523677110426, 0.26440794987228533, 0.40150546359266404, 0.3245302733463826, 0.3717656713843981, 0.3946891166453459, 0.558708834558516, 0.46692734692120974, 0.39417932437974446, 0.5367942567042276, 0.30802886150238784, 0.190764309063722, 0.1494201637331164, 0.16857102358291864, 0.1600310461477895, 0.15642811895514186, 0.15692462023173903, 0.16758031805153428, 0.1658829147471249, 0.1715343546882957, 0.16026672552838717, 0.17146157536535067, 0.1519301818672808, 0.17447574954819278, 0.18160628332987372, 0.15360285601322854, 0.1755422542318854, 0.1689134517002041, 0.16666225817439118, 0.07238803988286402, 0.04553437192557108, 0.04061842575840324, 0.06299212903262963, 0.06397547379839164, 0.08002264235451606, 0.05907465017803892, 0.06664413442255479, 0.06689764208113724, 0.17942783859781553, 0.16571267045073035, 0.15293200008010865, 0.1657329137696334, 0.18624623734483714, 0.1864246967590939, 0.20531906095470287, 0.17868569671203238, 0.17412022369614555, 0.0016802459502165412, 0.0005408020553991921, 0.009053262923664818, 0.0208722316718164, 0.003543074389275147, 0.021896123625366304, 0.008777569142216057, 0.0008964339670359811, 0.007229711938002814, 0.11469456513022647, 0.1290890811161446, 0.12764475055959268, 0.12242779528813807, 0.12483706196800626, 0.13998784683521937, 0.1330588199120195, 0.13099808005470914, 0.13905446083671613, 0.4247243518380923, 0.4368418083101675, 0.4472459537992688, 0.4743737380601939, 0.4436161786581211, 0.4432541972370887, 0.435623144268488, 0.4365531047208471, 0.4321700506592331, 0.09797154509750139, 0.1028108055930248, 0.09474112702670123, 0.08464556409129198, 0.08661091035541013, 0.09877679668010919, 0.10953379014978604, 0.09186549216889328, 0.10576420515995233, 0.1264064264967929, 0.17938192378624096, 0.15790804360365907, 0.14142474264483207, 0.14432824222284157, 0.13382099052492125, 0.1475839564457434, 0.19793022860271248, 0.11967643583453647, 0.2700143545644793, 0.27180364799665724, 0.2761187960017485, 0.2709625249398676, 0.2755198286017261, 0.2746234306113903, 0.27267863418171423, 0.2931148190939944, 0.2788669836405242, 0.20944629082799193, 0.22958245273809152, 0.20426116333225686, 0.2176833937954511, 0.21142431700261144, 0.2017666092185083, 0.23021498064885482, 0.22771109648822485, 0.21168885789864023, 0.17829313588485607, 0.17520513005244598, 0.1753962807702012, 0.1965952741183552, 0.1905440032345901, 0.19839881373901636, 0.18931983587649737, 0.18537322628682118, 0.18099354412184698, 0.18191227321616965, 0.18181809688635686, 0.17485445888936846, 0.182040436967438, 0.18009316287890798, 0.19152761652190264, 0.18552223774222865, 0.18230508873967377, 0.1769172485125159, 0.5446542536622045, 0.554792390002507, 0.1822320616931803, 0.4356263033789888, 0.17595464056932908, 0.4748030202657928, 0.22020383518914277, 0.42558833076440616, 0.16329884761871294, 0.19953103363959224, 0.19868354121381282, 0.1943038083849391, 0.27855310019394575, 0.3962558585696736, 0.18774533000449467, 0.5730343474525604, 0.20445722690233858, 0.20991380442134278, 0.20461124604035752, 0.19270770888114253, 0.1995745535291168, 0.1885612139184123, 0.20845316298057792, 0.1811608870883724, 0.17800738722249265, 0.1941050709691854, 0.17712466571484708, 0.07398925782813481, 0.07060155519029498, 0.07248252760317442, 0.08392859908141559, 0.06923389017037207, 0.08213307082825627, 0.07912069412189937, 0.08050050955672927, 0.07215394739405179]}, "mutation_prompt": null}
{"id": "69a77b14-b806-436c-9e8f-a341dd5df3d1", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to effectively explore and exploit the search space for diverse black-box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.7277708479472665, 0.7203685752072952, 0.7592234670981438, 0.7270060762945723, 0.7223901348236126, 0.7242485996825256, 0.7421371717417691, 0.7299076153451518, 0.7094162303521239, 0.4296726600596913, 0.41074883258345496, 0.42588408605962613, 0.39951016742800516, 0.3903370181241913, 0.41058409408197405, 0.43147271506892293, 0.42206789542362155, 0.41873312460062695, 0.10284063601978066, 0.11457928335076872, 0.10319522463229236, 0.1325338907259298, 0.11254320357379743, 0.11729588517516054, 0.10344178764629419, 0.10310373984390464, 0.10876788512707791, 0.0875219073896546, 0.0895957288036312, 0.09696825329481906, 0.10295546322778282, 0.10511877021066396, 0.08885357670890992, 0.10047441267872326, 0.09074566671245543, 0.10506960329275372, 0.8923805994833915, 0.8899558754892319, 0.9258474176922777, 0.9165075340901212, 0.9037999664934113, 0.9126100151783798, 0.8933153605984264, 0.8790822325777695, 0.9190269894340513, 0.4107297643401787, 0.3631601485785292, 0.3543306074468643, 0.3689063130308887, 0.34696582325186986, 0.3615241847961028, 0.3709060597046109, 0.34451097220528326, 0.3730522206616408, 0.7159969178281116, 0.6729669777343324, 0.6927350954489695, 0.7688169758557002, 0.6762354708370318, 0.841934891859444, 0.7217780891896532, 0.7157374599021664, 0.7753408939133453, 0.23922658864292357, 0.25627337935314476, 0.1877440921124438, 0.16729150455174802, 0.18366881810180224, 0.18278956944927882, 0.19440909074305268, 0.18034951200479954, 0.1713547232599214, 0.16512018546369422, 0.275753252214197, 0.16353054879021833, 0.1746304573435269, 0.20808947499590857, 0.20458938339619637, 0.24682555750562518, 0.22303785237133678, 0.24432449610214857, 0.19348023198535025, 0.15795019981072456, 0.22715143597330212, 0.19400375309585838, 0.2289098317097067, 0.2344091481115994, 0.23450100304176735, 0.21424619297311354, 0.22346883391265449, 0.3367990232889364, 0.38363317614211756, 0.3229745312613973, 0.3379784991695577, 0.3374361407558446, 0.32019840055611193, 0.3609083165770548, 0.3371717107743637, 0.3551413863047075, 0.05427620174354819, 0.06750394251445668, 0.05765211120099323, 0.10493010904971523, 0.09295742295581166, 0.0779542660477015, 0.084859331629489, 0.04904254888434767, 0.08820846870941335, 0.22865489816926066, 0.2105613828636167, 0.22236842322674977, 0.21499023517351512, 0.2106288990155767, 0.23542506898465154, 0.21018861856021454, 0.21452044637445333, 0.20822222331715434, 0.5654539632334072, 0.5782295405535143, 0.5590233028742844, 0.5510383693190649, 0.5458444836410068, 0.5656540049384062, 0.57811885170791, 0.5901135290971724, 0.5911511848871402, 0.11009664543252584, 0.10720313272932125, 0.10095689690847087, 0.09296317242242513, 0.10727361768622579, 0.09990705085599916, 0.10291592082132739, 0.10558999958323856, 0.08872726869907677, 0.1522313431115112, 0.12800611029681108, 0.13521220542051016, 0.15171955036357376, 0.19238959679178402, 0.14910728556390462, 0.15670765500787698, 0.17016961656217955, 0.174453207059176, 0.35258634599635275, 0.3458598511718748, 0.34658808629422544, 0.34361148318312373, 0.3435947104360897, 0.35224154129176233, 0.34693487293204484, 0.37309570038556616, 0.3553815586932424, 0.25790552831420466, 0.27443434819529977, 0.2570722711238246, 0.2467130972270305, 0.2590148325152606, 0.2627228183635252, 0.2863799186644407, 0.28024826176498585, 0.2679791101348604, 0.2264174916620375, 0.18471763729355206, 0.2085505679819475, 0.21148795569359247, 0.19012017123822156, 0.21869860701364596, 0.21946723314360084, 0.1968562322516676, 0.18834523997803487, 0.18920118830908017, 0.20137779470827089, 0.18665617438779136, 0.18297252388184726, 0.18929384756406076, 0.18069021503118032, 0.18405419037548276, 0.19655858753750322, 0.20247686149956212, 0.7044727888673262, 0.6746093927749737, 0.19909067349021736, 0.6396132982582976, 0.5235278246696712, 0.5782441456195337, 0.4883575966469529, 0.5997582821100547, 0.7111748434036029, 0.16601783032592543, 0.16546162587767466, 0.7298962339745761, 0.6791644822156938, 0.19096122358535927, 0.19896360354762355, 0.5134993917872052, 0.20745921580583404, 0.20524653427616468, 0.1906920099971534, 0.18811330744644605, 0.1898725054277799, 0.18049728372398144, 0.17981926503594092, 0.1844415446160096, 0.18300461036418314, 0.189426036750466, 0.19761447221813178, 0.08175204366441635, 0.07543054826886542, 0.08525431773039904, 0.08042009276453232, 0.08041064747960458, 0.07340812212597136, 0.08361415005623873, 0.07271281252717166, 0.0797238474365447]}, "mutation_prompt": null}
{"id": "c0c505d7-e311-481c-bec4-375bdf2c441d", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to effectively explore and exploit the search space for diverse black-box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.7277708479472665, 0.7203685752072952, 0.7592234670981438, 0.7270060762945723, 0.7223901348236126, 0.7242485996825256, 0.7421371717417691, 0.7299076153451518, 0.7094162303521239, 0.4296726600596913, 0.41074883258345496, 0.42588408605962613, 0.39951016742800516, 0.3903370181241913, 0.41058409408197405, 0.43147271506892293, 0.42206789542362155, 0.41873312460062695, 0.10284063601978066, 0.11457928335076872, 0.10319522463229236, 0.1325338907259298, 0.11254320357379743, 0.11729588517516054, 0.10344178764629419, 0.10310373984390464, 0.10876788512707791, 0.0875219073896546, 0.0895957288036312, 0.09696825329481906, 0.10295546322778282, 0.10511877021066396, 0.08885357670890992, 0.10047441267872326, 0.09074566671245543, 0.10506960329275372, 0.8923805994833915, 0.8899558754892319, 0.9258474176922777, 0.9165075340901212, 0.9037999664934113, 0.9126100151783798, 0.8933153605984264, 0.8790822325777695, 0.9190269894340513, 0.4107297643401787, 0.3631601485785292, 0.3543306074468643, 0.3689063130308887, 0.34696582325186986, 0.3615241847961028, 0.3709060597046109, 0.34451097220528326, 0.3730522206616408, 0.7159969178281116, 0.6729669777343324, 0.6927350954489695, 0.7688169758557002, 0.6762354708370318, 0.841934891859444, 0.7217780891896532, 0.7157374599021664, 0.7753408939133453, 0.23922658864292357, 0.25627337935314476, 0.1877440921124438, 0.16729150455174802, 0.18366881810180224, 0.18278956944927882, 0.19440909074305268, 0.18034951200479954, 0.1713547232599214, 0.16512018546369422, 0.275753252214197, 0.16353054879021833, 0.1746304573435269, 0.20808947499590857, 0.20458938339619637, 0.24682555750562518, 0.22303785237133678, 0.24432449610214857, 0.19348023198535025, 0.15795019981072456, 0.22715143597330212, 0.19400375309585838, 0.2289098317097067, 0.2344091481115994, 0.23450100304176735, 0.21424619297311354, 0.22346883391265449, 0.3367990232889364, 0.38363317614211756, 0.3229745312613973, 0.3379784991695577, 0.3374361407558446, 0.32019840055611193, 0.3609083165770548, 0.3371717107743637, 0.3551413863047075, 0.05427620174354819, 0.06750394251445668, 0.05765211120099323, 0.10493010904971523, 0.09295742295581166, 0.0779542660477015, 0.084859331629489, 0.04904254888434767, 0.08820846870941335, 0.22865489816926066, 0.2105613828636167, 0.22236842322674977, 0.21499023517351512, 0.2106288990155767, 0.23542506898465154, 0.21018861856021454, 0.21452044637445333, 0.20822222331715434, 0.5654539632334072, 0.5782295405535143, 0.5590233028742844, 0.5510383693190649, 0.5458444836410068, 0.5656540049384062, 0.57811885170791, 0.5901135290971724, 0.5911511848871402, 0.11009664543252584, 0.10720313272932125, 0.10095689690847087, 0.09296317242242513, 0.10727361768622579, 0.09990705085599916, 0.10291592082132739, 0.10558999958323856, 0.08872726869907677, 0.1522313431115112, 0.12800611029681108, 0.13521220542051016, 0.15171955036357376, 0.19238959679178402, 0.14910728556390462, 0.15670765500787698, 0.17016961656217955, 0.174453207059176, 0.35258634599635275, 0.3458598511718748, 0.34658808629422544, 0.34361148318312373, 0.3435947104360897, 0.35224154129176233, 0.34693487293204484, 0.37309570038556616, 0.3553815586932424, 0.25790552831420466, 0.27443434819529977, 0.2570722711238246, 0.2467130972270305, 0.2590148325152606, 0.2627228183635252, 0.2863799186644407, 0.28024826176498585, 0.2679791101348604, 0.2264174916620375, 0.18471763729355206, 0.2085505679819475, 0.21148795569359247, 0.19012017123822156, 0.21869860701364596, 0.21946723314360084, 0.1968562322516676, 0.18834523997803487, 0.18920118830908017, 0.20137779470827089, 0.18665617438779136, 0.18297252388184726, 0.18929384756406076, 0.18069021503118032, 0.18405419037548276, 0.19655858753750322, 0.20247686149956212, 0.7044727888673262, 0.6746093927749737, 0.19909067349021736, 0.6396132982582976, 0.5235278246696712, 0.5782441456195337, 0.4883575966469529, 0.5997582821100547, 0.7111748434036029, 0.16601783032592543, 0.16546162587767466, 0.7298962339745761, 0.6791644822156938, 0.19096122358535927, 0.19896360354762355, 0.5134993917872052, 0.20745921580583404, 0.20524653427616468, 0.1906920099971534, 0.18811330744644605, 0.1898725054277799, 0.18049728372398144, 0.17981926503594092, 0.1844415446160096, 0.18300461036418314, 0.189426036750466, 0.19761447221813178, 0.08175204366441635, 0.07543054826886542, 0.08525431773039904, 0.08042009276453232, 0.08041064747960458, 0.07340812212597136, 0.08361415005623873, 0.07271281252717166, 0.0797238474365447]}, "mutation_prompt": null}
{"id": "aa9728f4-f47a-40a2-a841-09d7c2e825e5", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Stochastic mutation factors\n                F = np.random.uniform(0.4, 0.9)\n                CR = np.random.uniform(0.7, 0.95)\n\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Adaptive Lévy Flight, introducing stochastic F and CR for improved diversity and adaptability in exploration-exploitation balance.", "configspace": "", "generation": 19, "fitness": 0.2575066416802651, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.6416664486490706, 0.6354550117920799, 0.6320969861611365, 0.6460946946893826, 0.6517692530814416, 0.6509308231715571, 0.6445666982332945, 0.614961175987903, 0.6353089592560359, 0.28671595762170177, 0.3114598527746584, 0.2745742512420225, 0.323309801851026, 0.27129697261964814, 0.308426479259745, 0.34556964361166387, 0.32277014206299204, 0.3414814400934587, 0.12143699590994095, 0.1161301776858572, 0.10318504185309396, 0.10554904437365242, 0.10831258718763526, 0.1164830191601064, 0.11492026083660456, 0.10283375865980693, 0.10652848838643203, 0.09419903420048681, 0.09879487911486684, 0.09246964511906464, 0.09583409076646932, 0.0826951043293217, 0.10416056657783068, 0.09988005884827511, 0.09375071042245531, 0.09633624736300228, 0.9118703559566763, 0.9179916844700571, 0.9140548976133496, 0.9141121106493895, 0.9365827552827324, 0.9187140403898709, 0.9611105869677958, 0.9222195208774523, 0.9061001096091236, 0.30499378428408475, 0.2797576725746185, 0.27892037133596925, 0.290200131743956, 0.2895444863524461, 0.2903792775883207, 0.3061190285904015, 0.2921456559224086, 0.3105397698264958, 0.48626351239050525, 0.4386459936041751, 0.5166827408539592, 0.599052709223064, 0.5228365760779539, 0.4250131909602438, 0.47848307987982275, 0.49368205967434897, 0.5518905092818558, 0.17226006871283228, 0.15843662342790887, 0.18209717519301116, 0.1481020992772577, 0.18859872826252688, 0.16671206623591095, 0.14605078797275017, 0.1882955882795, 0.18411123841872923, 0.15340165327340705, 0.17206133897847553, 0.1641694500663119, 0.1801338903227574, 0.1606524579994546, 0.17380885849251082, 0.16246452938240197, 0.1833120867327711, 0.16570839855309294, 0.06413154367582974, 0.05944021750823736, 0.06202656187576083, 0.0856856108550943, 0.10889526843828112, 0.0811416440177829, 0.07864447791406437, 0.05662028251928064, 0.07022751716838738, 0.16689711267137464, 0.1571669824648818, 0.15615730791636584, 0.1816582983528927, 0.16169707888865048, 0.14472035296792474, 0.18371252995127174, 0.21613335788728827, 0.16480652231466897, 0.009042047958096155, 0.016464096577527787, 0.002809534672860381, 0.011594033061778641, 0.03449003810238915, 0.005410208593832566, 0.02429838014314012, 0.007078582077013507, 0.010714072355918147, 0.13932937336955653, 0.13742955777620613, 0.1289380496076099, 0.15140927239414648, 0.1538581679961568, 0.14323816446494753, 0.14254823210332002, 0.1302260164493848, 0.143930238076046, 0.48634903185990874, 0.46431319916184466, 0.4674970267562022, 0.47075733809712406, 0.469100839548934, 0.4875420719661111, 0.4652647956122251, 0.47619377952744657, 0.47780412464749855, 0.08656174349760115, 0.08834706864577291, 0.09629097824446886, 0.10149572551222463, 0.10035654856161913, 0.08530035335139763, 0.10333775642853338, 0.08560339097305592, 0.11477176503015851, 0.1477271582948666, 0.14240110950370966, 0.15833791301553268, 0.14907778607580457, 0.16579556461934009, 0.14450644565734727, 0.13791697878166032, 0.1627134994355811, 0.1426877256073631, 0.2906498993626274, 0.2814748304989112, 0.3036749734155696, 0.29012728941376476, 0.288392912695425, 0.2838169771897503, 0.3309527897821716, 0.3108091641576929, 0.30529929821638047, 0.21486343569193145, 0.23604023062116686, 0.22859279276807432, 0.21801458102078386, 0.21643251564049726, 0.21243572314150838, 0.22917721617502762, 0.22863187420916187, 0.23079029112427574, 0.19313579802087388, 0.1770972582205248, 0.19061299746733917, 0.22848897375833133, 0.19443865124244053, 0.19207430609162235, 0.18725997247747472, 0.18757452944386022, 0.1862445721985726, 0.17416680933669726, 0.17770374548073575, 0.20960771305801185, 0.1824618582733728, 0.18467063825212482, 0.1874595715181392, 0.19568708007273516, 0.20728667393783773, 0.1800344213351316, 0.5886159217232442, 0.5155825166565063, 0.18693914986834226, 0.18064828244369668, 0.3341058540975995, 0.3669709513965521, 0.26653679357102156, 0.4406450462745083, 0.5204532752067444, 0.43624901872673094, 0.46636745241852706, 0.4024004855128426, 0.2243343886533149, 0.2652912215472476, 0.18740768691862975, 0.2081131403861609, 0.20009444175602364, 0.38275890900088416, 0.1777622256738991, 0.18457241496890597, 0.19605618312835182, 0.18193016087826852, 0.20233523319604318, 0.17420162721672805, 0.19563261991247805, 0.18210175058991818, 0.17678139111152336, 0.0708108555196566, 0.07486820711731379, 0.06713073562267724, 0.08079090577113057, 0.07394746219111326, 0.0753001565299628, 0.07951574018601881, 0.0755375744665755, 0.0716020512898593]}, "mutation_prompt": null}
{"id": "4fdf2d2b-97a4-4224-8e67-bb6f09624aec", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F_min = 0.4  # New minimum differential weight\n        self.F_max = 0.9  # New maximum differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced HybridDELevy incorporating an adaptive mutation strategy to dynamically adjust the differential weight for improved convergence efficiency.", "configspace": "", "generation": 20, "fitness": 0.27531249512619665, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.631619279326011, 0.6338692237134478, 0.6195016181974806, 0.6428179105270427, 0.6478584431076679, 0.6272888899573483, 0.6351371128976719, 0.6168491222907759, 0.6158315146495692, 0.3154110848556154, 0.3170281524748453, 0.31825666215202986, 0.26173048625454487, 0.3035422718930286, 0.265546973925762, 0.28457378676748235, 0.2841478847172103, 0.3173204456174692, 0.09977959777294221, 0.10377251024889644, 0.09895792901202471, 0.10095773413167553, 0.1322747177570489, 0.10123905673216305, 0.10179402399188331, 0.09914016432626027, 0.10948040113548374, 0.09211515691907424, 0.09367149508844685, 0.09174913458965095, 0.08783153476501138, 0.0949056904194624, 0.13453048912836707, 0.09755490222251484, 0.0932120870539298, 0.09808818494006932, 0.9280947589479915, 0.9771737250023437, 0.8919983666676154, 0.9620599194910128, 0.9157800181669669, 0.8960774225934328, 0.932747812607158, 0.9494748908149595, 0.9214860773926208, 0.326360300940958, 0.3024370515035867, 0.2859864091533889, 0.27407753066468254, 0.3049866401038789, 0.30318089662096825, 0.3125106218891678, 0.31065636258465645, 0.3437517708782811, 0.606931990552585, 0.600544387161019, 0.700529703836604, 0.6770521977150483, 0.563365336729089, 0.5857618758046146, 0.6227896959271578, 0.6358144957632696, 0.6816901244659179, 0.1706929949770909, 0.23067888396202407, 0.19149165942113278, 0.21855827209610035, 0.17893578015021772, 0.18150257400181125, 0.1945151640997166, 0.19081572986781659, 0.1570002672941977, 0.17494461092497582, 0.18179616623313144, 0.21915207217583088, 0.18821981078940908, 0.16706961340577597, 0.21351454197827602, 0.17655454224417166, 0.18529198155500703, 0.19791194319720107, 0.101267215403963, 0.1175884484455797, 0.117291498737785, 0.10875427301127327, 0.13336860049018162, 0.13124129319885147, 0.12355441927360244, 0.11818320353199219, 0.11284889371144213, 0.2355941072611074, 0.25526492641351994, 0.19267997408719229, 0.25196468969736174, 0.22583464613797077, 0.2348050776234789, 0.2674928694019716, 0.25319141241803156, 0.23693602018342874, 0.022625505221336217, 0.05522065849871871, 0.02769305241211495, 0.08475462431875291, 0.03933559961768329, 0.03984501443133792, 0.0469254976020802, 0.04779043542845307, 0.037286280759808665, 0.15851023003473996, 0.16171337437250766, 0.1787357900278701, 0.15297072148612656, 0.18692691697819364, 0.17024480015723453, 0.15587479378794578, 0.1606040487810858, 0.15421928121006478, 0.4796338156264969, 0.497776079037354, 0.4902884637179935, 0.4758998623599411, 0.48381765899928153, 0.4970667186886377, 0.5143989740469062, 0.512360206053677, 0.4968453668872529, 0.10366137907941686, 0.10369436364446116, 0.0907171704297236, 0.09759568458548051, 0.08824709386826801, 0.10418414571116408, 0.09109925655478124, 0.08444893986753954, 0.09606895485009959, 0.1289803295597931, 0.17411455994487368, 0.25201517691476516, 0.13349578057423972, 0.1792290188233182, 0.16477758064234893, 0.1379234850967419, 0.13425244386217527, 0.13725308663118918, 0.3133275442756749, 0.29491270020251803, 0.2986611421607923, 0.3036930208854254, 0.29640975051695173, 0.2852503651644802, 0.2794306881523423, 0.3021587304282124, 0.331515535294439, 0.23701654918372372, 0.24025333461619713, 0.23828504108889637, 0.23965510707651716, 0.2303462722749362, 0.23447622965877535, 0.23935141089623213, 0.22200791997907443, 0.2501089479932497, 0.18749468197412666, 0.1844309135719664, 0.18681894130339993, 0.1990632352384566, 0.19148353902645865, 0.18290135481803094, 0.17624874602881702, 0.17582293327525567, 0.1813124866456829, 0.1895594274565482, 0.20484168686618076, 0.19750722757851158, 0.19985010688332572, 0.1888603684483101, 0.17362888606767646, 0.18291124281092064, 0.17459046751771234, 0.18055139411028753, 0.6474564636196308, 0.6623565981394861, 0.16747701930005665, 0.4903516726406043, 0.19677853766954045, 0.6582835677155652, 0.182667787315422, 0.5705920131805697, 0.5337958471787405, 0.44173109798214294, 0.20293801964116998, 0.16116086486054282, 0.37297329458529516, 0.19632692977011534, 0.48685360566694835, 0.20631135753586627, 0.2045774328318002, 0.19938793364443907, 0.17691133668223558, 0.18601163251622588, 0.18493361133875663, 0.20015610662712913, 0.1849547536674626, 0.1837992387505334, 0.18518111939390747, 0.18805146168588183, 0.23280903580412837, 0.07368711976701159, 0.07753728305270946, 0.08555397150805766, 0.08082597537989, 0.07677088708003843, 0.07511569996629364, 0.06857902481627898, 0.10183330058695261, 0.07769295976146207]}, "mutation_prompt": null}
{"id": "5b1c734b-4584-4f26-b6f4-92a9859aa9ce", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic Mutation Scaling\n                self.F = 0.5 + 0.5 * (1 - evaluations / self.budget)\n\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = 0.9 * (fitness[i] / fitness.min())\n\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Dynamic Mutation Scaling and Adaptive Crossover for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": 0.1964090627254434, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.4941260361927592, 0.4620371734269185, 0.4493937612272575, 0.49647599056215386, 0.4979322834748826, 0.5042212717274841, 0.5041879248810432, 0.47003003122276454, 0.4990240262719431, 0.03732611187221446, 0.030012272955235897, 0.034329835622681326, 0.017310525814627553, 0.04931672098614781, 0.041624059050642814, 0.028655119180667654, 0.017644575190907008, 0.02993341260376381, 0.08403797592967566, 0.08908761671734433, 0.09324766321252431, 0.0933490665163117, 0.080902021974946, 0.0787465396140049, 0.08083589530639657, 0.08588883499496247, 0.08129778211288108, 0.06228957320818118, 0.04935733268077169, 0.07975646054641106, 0.06792639099838993, 0.07239287709991749, 0.0786178377183453, 0.07212982376999078, 0.06970914262358785, 0.07548271198721446, 0.4900141319216874, 0.41804076283877467, 0.15031688898318318, 0.9288411995558582, 0.8966072647460477, 0.8975887365375724, 0.964624565606717, 0.875810736277243, 0.9692843157656986, 0.24431012859669843, 0.25717631311020694, 0.26292443438025437, 0.24138094242088814, 0.24761062995472571, 0.2476716841980513, 0.06734278818385941, 0.0603085658699174, 0.09516599411205606, 0.4462163092968092, 0.4515829556129701, 0.4327689965283308, 0.4627563848531423, 0.43231445293173965, 0.49186164384822006, 0.44346862138979115, 0.44396127901866134, 0.4906351418231195, 0.15169902851603534, 0.15278659747446677, 0.14378513923618907, 0.012681391877874204, 0.0378706554621151, 0.002658586660841178, 0.13822645033015069, 0.1396384984055623, 0.1382199753886334, 0.25773456554518936, 0.14410143656502894, 0.15781278890028028, 0.14629572884818465, 0.1666101013443847, 0.14231531847619228, 0.1304980007744052, 0.13302180881941716, 0.1574662809786902, 0.035401745984359856, 0.014821354021352984, 0.027046654591350694, 0.11845318066894073, 0.14068277155435194, 0.1226882160550955, 9.999999999998899e-05, 0.004281036638400071, 9.999999999998899e-05, 0.20353147801030302, 0.2309195031676594, 0.19563840140714306, 0.08045211189550483, 0.07179488103438203, 0.08760943893476092, 0.23191985405244808, 0.2404027276162507, 0.24773462096601628, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027213868820345488, 0.021141615192465713, 0.02634620565809076, 0.12624966654180259, 0.13097925928110143, 0.1456889903465528, 0.06154712521442163, 0.06308277342398105, 0.08343207622349436, 0.031518310748514744, 0.015455134365407686, 0.029635189497961956, 0.29141034862584336, 0.28733278789847005, 0.29901532740062886, 0.3558256915351462, 0.36643204757665837, 0.349798556696194, 0.40437901687364297, 0.4047089249436966, 0.394528677604036, 0.07478821779531186, 0.08620597681740416, 0.09524570736916171, 0.08136747297519031, 0.08806268977884102, 0.08442245416062111, 0.04863172110380998, 0.05959223912579514, 0.04868430786229727, 0.15233581867982482, 0.14816949884435904, 0.14979473360356332, 0.14289341902565034, 0.22893177284969535, 0.12799649891318554, 0.1767110193053384, 0.20979123800219868, 0.21975880007434379, 0.18308750178123134, 0.16796406698438981, 0.18135523859941405, 0.2490801481101087, 0.24698594230631066, 0.22738888562692205, 0.26444737237705107, 0.2661415487514549, 0.2650981088454363, 0.0893688139763188, 0.09915609670539649, 0.09215142002574372, 0.19831719666759817, 0.19832902271252628, 0.20502901886993818, 0.1908327365915078, 0.19287176430726904, 0.1927229836970138, 0.1649951432083231, 0.1624346033490116, 0.18287770211078747, 0.17733020627288565, 0.183276731559058, 0.1742532804213106, 0.19414616485697522, 0.18836144406284128, 0.16297127404755996, 0.13616054598827776, 0.1219631353025945, 0.13079394619641516, 0.17736979388681795, 0.16727779068019244, 0.16339158396707576, 0.17144605630033094, 0.1705857454715255, 0.1683283278030947, 0.1683870047119721, 0.6356122712201686, 0.5693436836479677, 0.17683684107968145, 0.1730063235656769, 0.23652483924876921, 0.16932997627630453, 0.17214815828129126, 0.4949474707976558, 0.18859519375041112, 0.18904634512493657, 0.19033712023072336, 0.4309708729996943, 0.17396740360096152, 0.18187299848447291, 0.12934344894358196, 0.138695244880776, 0.17460022542532772, 0.20029885498726807, 0.1797159301359772, 0.18646688895670127, 0.18599291179449962, 0.18076556337539418, 0.18573638497503597, 0.18827012874942173, 0.17891664318887612, 0.19871437180524254, 0.0735413200892161, 0.07512536361883271, 0.07660011746890583, 0.06693897744871846, 0.07139576319958763, 0.06917156788838197, 0.06691162072688928, 0.06183274562311414, 0.06017757137744284]}, "mutation_prompt": null}
{"id": "044a1c53-4639-4627-9a10-4e1aa9942525", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to effectively explore and exploit the search space for diverse black-box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.7277708479472665, 0.7203685752072952, 0.7592234670981438, 0.7270060762945723, 0.7223901348236126, 0.7242485996825256, 0.7421371717417691, 0.7299076153451518, 0.7094162303521239, 0.4296726600596913, 0.41074883258345496, 0.42588408605962613, 0.39951016742800516, 0.3903370181241913, 0.41058409408197405, 0.43147271506892293, 0.42206789542362155, 0.41873312460062695, 0.10284063601978066, 0.11457928335076872, 0.10319522463229236, 0.1325338907259298, 0.11254320357379743, 0.11729588517516054, 0.10344178764629419, 0.10310373984390464, 0.10876788512707791, 0.0875219073896546, 0.0895957288036312, 0.09696825329481906, 0.10295546322778282, 0.10511877021066396, 0.08885357670890992, 0.10047441267872326, 0.09074566671245543, 0.10506960329275372, 0.8923805994833915, 0.8899558754892319, 0.9258474176922777, 0.9165075340901212, 0.9037999664934113, 0.9126100151783798, 0.8933153605984264, 0.8790822325777695, 0.9190269894340513, 0.4107297643401787, 0.3631601485785292, 0.3543306074468643, 0.3689063130308887, 0.34696582325186986, 0.3615241847961028, 0.3709060597046109, 0.34451097220528326, 0.3730522206616408, 0.7159969178281116, 0.6729669777343324, 0.6927350954489695, 0.7688169758557002, 0.6762354708370318, 0.841934891859444, 0.7217780891896532, 0.7157374599021664, 0.7753408939133453, 0.23922658864292357, 0.25627337935314476, 0.1877440921124438, 0.16729150455174802, 0.18366881810180224, 0.18278956944927882, 0.19440909074305268, 0.18034951200479954, 0.1713547232599214, 0.16512018546369422, 0.275753252214197, 0.16353054879021833, 0.1746304573435269, 0.20808947499590857, 0.20458938339619637, 0.24682555750562518, 0.22303785237133678, 0.24432449610214857, 0.19348023198535025, 0.15795019981072456, 0.22715143597330212, 0.19400375309585838, 0.2289098317097067, 0.2344091481115994, 0.23450100304176735, 0.21424619297311354, 0.22346883391265449, 0.3367990232889364, 0.38363317614211756, 0.3229745312613973, 0.3379784991695577, 0.3374361407558446, 0.32019840055611193, 0.3609083165770548, 0.3371717107743637, 0.3551413863047075, 0.05427620174354819, 0.06750394251445668, 0.05765211120099323, 0.10493010904971523, 0.09295742295581166, 0.0779542660477015, 0.084859331629489, 0.04904254888434767, 0.08820846870941335, 0.22865489816926066, 0.2105613828636167, 0.22236842322674977, 0.21499023517351512, 0.2106288990155767, 0.23542506898465154, 0.21018861856021454, 0.21452044637445333, 0.20822222331715434, 0.5654539632334072, 0.5782295405535143, 0.5590233028742844, 0.5510383693190649, 0.5458444836410068, 0.5656540049384062, 0.57811885170791, 0.5901135290971724, 0.5911511848871402, 0.11009664543252584, 0.10720313272932125, 0.10095689690847087, 0.09296317242242513, 0.10727361768622579, 0.09990705085599916, 0.10291592082132739, 0.10558999958323856, 0.08872726869907677, 0.1522313431115112, 0.12800611029681108, 0.13521220542051016, 0.15171955036357376, 0.19238959679178402, 0.14910728556390462, 0.15670765500787698, 0.17016961656217955, 0.174453207059176, 0.35258634599635275, 0.3458598511718748, 0.34658808629422544, 0.34361148318312373, 0.3435947104360897, 0.35224154129176233, 0.34693487293204484, 0.37309570038556616, 0.3553815586932424, 0.25790552831420466, 0.27443434819529977, 0.2570722711238246, 0.2467130972270305, 0.2590148325152606, 0.2627228183635252, 0.2863799186644407, 0.28024826176498585, 0.2679791101348604, 0.2264174916620375, 0.18471763729355206, 0.2085505679819475, 0.21148795569359247, 0.19012017123822156, 0.21869860701364596, 0.21946723314360084, 0.1968562322516676, 0.18834523997803487, 0.18920118830908017, 0.20137779470827089, 0.18665617438779136, 0.18297252388184726, 0.18929384756406076, 0.18069021503118032, 0.18405419037548276, 0.19655858753750322, 0.20247686149956212, 0.7044727888673262, 0.6746093927749737, 0.19909067349021736, 0.6396132982582976, 0.5235278246696712, 0.5782441456195337, 0.4883575966469529, 0.5997582821100547, 0.7111748434036029, 0.16601783032592543, 0.16546162587767466, 0.7298962339745761, 0.6791644822156938, 0.19096122358535927, 0.19896360354762355, 0.5134993917872052, 0.20745921580583404, 0.20524653427616468, 0.1906920099971534, 0.18811330744644605, 0.1898725054277799, 0.18049728372398144, 0.17981926503594092, 0.1844415446160096, 0.18300461036418314, 0.189426036750466, 0.19761447221813178, 0.08175204366441635, 0.07543054826886542, 0.08525431773039904, 0.08042009276453232, 0.08041064747960458, 0.07340812212597136, 0.08361415005623873, 0.07271281252717166, 0.0797238474365447]}, "mutation_prompt": null}
{"id": "3154232d-a77b-4658-a715-186765bb0e3e", "solution": "# Description: Enhanced Hybrid Differential Evolution with Dynamic Lévy Flight Scaling to improve exploration and convergence efficiency.\n# Code:\nimport numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n        levy_scale = 0.01 * (self.upper_bound - self.lower_bound)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(levy_scale)\n                    levy_scale *= 1.01  # Increase scale\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Dynamic Lévy Flight Scaling to improve exploration and convergence efficiency.", "configspace": "", "generation": 23, "fitness": 0.2758160612815092, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.6348304464900263, 0.6180924540515969, 0.6724715359975432, 0.6704373231639749, 0.637236861823856, 0.6823579068311866, 0.650363527766408, 0.6690408357921815, 0.6393425628491651, 0.35859053956356435, 0.3952733273927044, 0.37418586510973617, 0.329126977596936, 0.3646262003902486, 0.3894928474056788, 0.38484497202484336, 0.3630137886236967, 0.3718568011070619, 0.09531552405866972, 0.09028217974252306, 0.12446360652176902, 0.09887774896920676, 0.09615432566461335, 0.10308374151016686, 0.10678836085361887, 0.1022166268814011, 0.09556187060421018, 0.09475601254619725, 0.1080598108354438, 0.09069195702181332, 0.08197367646470721, 0.08644936993400865, 0.09235302141272861, 0.08553487791364656, 0.08536068234537686, 0.087210047209756, 0.9360303273998518, 0.9421096003761761, 0.9139501434839443, 0.9262569925892734, 0.9437156129265185, 0.9308779134101086, 0.9429193108439344, 0.9361762802219996, 0.9356814073588036, 0.2871265500754464, 0.2833688054542721, 0.27843659109356944, 0.27024244951016363, 0.26943004634593004, 0.2803066351589516, 0.28915682926712427, 0.3049207144081467, 0.28976215184688536, 0.6604507627496, 0.5586199943406399, 0.49462761657563203, 0.5954707840223932, 0.5948406141231803, 0.6714530917191686, 0.5076971420983292, 0.5849638616407888, 0.5859875462406952, 0.15812123203623651, 0.23089273143754707, 0.18093411839950946, 0.17319247744382416, 0.11921315146373168, 0.15965336269937946, 0.1980855511910914, 0.18141035478970435, 0.19711251974153854, 0.1627437044027894, 0.1255012070190178, 0.21788062466907, 0.16448435998788113, 0.13564682763417912, 0.18350709012635502, 0.21403249410141412, 0.15178647621915775, 0.14365598697840964, 0.1408452910532193, 0.15738905981203444, 0.14011560825893354, 0.17833141591900836, 0.18428571872884236, 0.146957553199207, 0.14954696460605987, 0.23587359809844244, 0.16442439673329734, 0.30723884279942026, 0.27562734204102424, 0.28281288863968623, 0.2437116845765378, 0.28249749430445903, 0.2748190552555049, 0.28656657466831437, 0.31837020949566663, 0.32195751071055134, 0.020751514259488624, 0.06478874483336206, 0.07508082033332542, 0.06239716499932024, 0.025418987111761604, 0.04931489868195238, 0.07192420439277869, 0.058291369901270484, 0.08610016542506038, 0.1758715086208653, 0.1748765052520559, 0.17109801036469385, 0.17151115427583585, 0.17542518191350887, 0.17921160212622766, 0.17331727013514409, 0.18149252783709713, 0.19649416969404343, 0.5076617758304014, 0.5254126854749674, 0.5389503315212048, 0.5203766256581172, 0.526463007712107, 0.502372422338071, 0.55934015526737, 0.49648658646279775, 0.5148515177542896, 0.07892062025897117, 0.09193395184285602, 0.09933862531466553, 0.09610127022618742, 0.09772109235996518, 0.08445671513856301, 0.08687337812414042, 0.0993301055763568, 0.08644342909964597, 0.13862422244349093, 0.15687426240783464, 0.1642006338438874, 0.1890041894075437, 0.17228218847098486, 0.18478838998160796, 0.1531858243457147, 0.11866461746325185, 0.15803027414294124, 0.29799211291408356, 0.3185848390832824, 0.3273359264899699, 0.2854648069245579, 0.30576707778452306, 0.29485627113679924, 0.3245538125497235, 0.3311447702281619, 0.3332505575873689, 0.22740764421786053, 0.24316350180180224, 0.2316454122220417, 0.2202577749567225, 0.22164316808359885, 0.2167363381782934, 0.24352024441772924, 0.23779573211488791, 0.20995403757717446, 0.18042347759306854, 0.1826387079005396, 0.17887034768134968, 0.2389101233075993, 0.17042079257195286, 0.19499100286202498, 0.20762994856974415, 0.1955443384790433, 0.20698960925149346, 0.18674804238099363, 0.17844613100207118, 0.1904877734265671, 0.17251212329978483, 0.1842134623157401, 0.1813060912264628, 0.18098455103710487, 0.17706262635408898, 0.17885004929123316, 0.5690142269814309, 0.17748235998725181, 0.26439420031282956, 0.4824920313838499, 0.4803163665732473, 0.5073395842899409, 0.1660472714517307, 0.37585786481094463, 0.5132581711892907, 0.25973207265722287, 0.5207747835835255, 0.12422676863652837, 0.19437985012996073, 0.17766403068573222, 0.17802458512469743, 0.1964656833480264, 0.20563885967217155, 0.20644239332761216, 0.18172877475195026, 0.18359852822031797, 0.19300264305244785, 0.17285699047889103, 0.19255879492812333, 0.18301145049927325, 0.19036454426907223, 0.19888185358501398, 0.17719332108580688, 0.06422429152062814, 0.0687369829085206, 0.08332080612240245, 0.07296218737273463, 0.07447997629435554, 0.07116451715371563, 0.07439184314576819, 0.0695556689025918, 0.07040356393037106]}, "mutation_prompt": null}
{"id": "c40bee35-85e5-4e02-983b-ba4762c66e49", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to effectively explore and exploit the search space for diverse black-box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.7277708479472665, 0.7203685752072952, 0.7592234670981438, 0.7270060762945723, 0.7223901348236126, 0.7242485996825256, 0.7421371717417691, 0.7299076153451518, 0.7094162303521239, 0.4296726600596913, 0.41074883258345496, 0.42588408605962613, 0.39951016742800516, 0.3903370181241913, 0.41058409408197405, 0.43147271506892293, 0.42206789542362155, 0.41873312460062695, 0.10284063601978066, 0.11457928335076872, 0.10319522463229236, 0.1325338907259298, 0.11254320357379743, 0.11729588517516054, 0.10344178764629419, 0.10310373984390464, 0.10876788512707791, 0.0875219073896546, 0.0895957288036312, 0.09696825329481906, 0.10295546322778282, 0.10511877021066396, 0.08885357670890992, 0.10047441267872326, 0.09074566671245543, 0.10506960329275372, 0.8923805994833915, 0.8899558754892319, 0.9258474176922777, 0.9165075340901212, 0.9037999664934113, 0.9126100151783798, 0.8933153605984264, 0.8790822325777695, 0.9190269894340513, 0.4107297643401787, 0.3631601485785292, 0.3543306074468643, 0.3689063130308887, 0.34696582325186986, 0.3615241847961028, 0.3709060597046109, 0.34451097220528326, 0.3730522206616408, 0.7159969178281116, 0.6729669777343324, 0.6927350954489695, 0.7688169758557002, 0.6762354708370318, 0.841934891859444, 0.7217780891896532, 0.7157374599021664, 0.7753408939133453, 0.23922658864292357, 0.25627337935314476, 0.1877440921124438, 0.16729150455174802, 0.18366881810180224, 0.18278956944927882, 0.19440909074305268, 0.18034951200479954, 0.1713547232599214, 0.16512018546369422, 0.275753252214197, 0.16353054879021833, 0.1746304573435269, 0.20808947499590857, 0.20458938339619637, 0.24682555750562518, 0.22303785237133678, 0.24432449610214857, 0.19348023198535025, 0.15795019981072456, 0.22715143597330212, 0.19400375309585838, 0.2289098317097067, 0.2344091481115994, 0.23450100304176735, 0.21424619297311354, 0.22346883391265449, 0.3367990232889364, 0.38363317614211756, 0.3229745312613973, 0.3379784991695577, 0.3374361407558446, 0.32019840055611193, 0.3609083165770548, 0.3371717107743637, 0.3551413863047075, 0.05427620174354819, 0.06750394251445668, 0.05765211120099323, 0.10493010904971523, 0.09295742295581166, 0.0779542660477015, 0.084859331629489, 0.04904254888434767, 0.08820846870941335, 0.22865489816926066, 0.2105613828636167, 0.22236842322674977, 0.21499023517351512, 0.2106288990155767, 0.23542506898465154, 0.21018861856021454, 0.21452044637445333, 0.20822222331715434, 0.5654539632334072, 0.5782295405535143, 0.5590233028742844, 0.5510383693190649, 0.5458444836410068, 0.5656540049384062, 0.57811885170791, 0.5901135290971724, 0.5911511848871402, 0.11009664543252584, 0.10720313272932125, 0.10095689690847087, 0.09296317242242513, 0.10727361768622579, 0.09990705085599916, 0.10291592082132739, 0.10558999958323856, 0.08872726869907677, 0.1522313431115112, 0.12800611029681108, 0.13521220542051016, 0.15171955036357376, 0.19238959679178402, 0.14910728556390462, 0.15670765500787698, 0.17016961656217955, 0.174453207059176, 0.35258634599635275, 0.3458598511718748, 0.34658808629422544, 0.34361148318312373, 0.3435947104360897, 0.35224154129176233, 0.34693487293204484, 0.37309570038556616, 0.3553815586932424, 0.25790552831420466, 0.27443434819529977, 0.2570722711238246, 0.2467130972270305, 0.2590148325152606, 0.2627228183635252, 0.2863799186644407, 0.28024826176498585, 0.2679791101348604, 0.2264174916620375, 0.18471763729355206, 0.2085505679819475, 0.21148795569359247, 0.19012017123822156, 0.21869860701364596, 0.21946723314360084, 0.1968562322516676, 0.18834523997803487, 0.18920118830908017, 0.20137779470827089, 0.18665617438779136, 0.18297252388184726, 0.18929384756406076, 0.18069021503118032, 0.18405419037548276, 0.19655858753750322, 0.20247686149956212, 0.7044727888673262, 0.6746093927749737, 0.19909067349021736, 0.6396132982582976, 0.5235278246696712, 0.5782441456195337, 0.4883575966469529, 0.5997582821100547, 0.7111748434036029, 0.16601783032592543, 0.16546162587767466, 0.7298962339745761, 0.6791644822156938, 0.19096122358535927, 0.19896360354762355, 0.5134993917872052, 0.20745921580583404, 0.20524653427616468, 0.1906920099971534, 0.18811330744644605, 0.1898725054277799, 0.18049728372398144, 0.17981926503594092, 0.1844415446160096, 0.18300461036418314, 0.189426036750466, 0.19761447221813178, 0.08175204366441635, 0.07543054826886542, 0.08525431773039904, 0.08042009276453232, 0.08041064747960458, 0.07340812212597136, 0.08361415005623873, 0.07271281252717166, 0.0797238474365447]}, "mutation_prompt": null}
{"id": "57eb252c-1932-49d8-b4ef-75bef71987a7", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Adaptive Lévy Flight using Adaptive Crossover to balance exploration and exploitation.", "configspace": "", "generation": 25, "fitness": 0.3281644466460485, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.23.", "error": "", "parent_id": "f7bba1cd-1649-4b03-863e-a4cc5073d28a", "metadata": {"aucs": [0.7189991636163604, 0.7289203557762369, 0.7315138839952812, 0.7151379010133825, 0.71651968988284, 0.7451980584096978, 0.7008481351888508, 0.7419222099720622, 0.7359334757690116, 0.43572069348115594, 0.4123743780749103, 0.46176674451437394, 0.41605345771074853, 0.4418562903423301, 0.4471258142275859, 0.43562856262455907, 0.44279574636062136, 0.41207796659173934, 0.10426023644197757, 0.10497496628457903, 0.10971029391308473, 0.1110866459230716, 0.11281587088260636, 0.11124483858622769, 0.12669892420710516, 0.1205975524177213, 0.12061379889919677, 0.10941138994156718, 0.10664870306271201, 0.11004564062661726, 0.10969763793140663, 0.10851692062678009, 0.11306844678371542, 0.10630022856835186, 0.13796790187557895, 0.10615366195813947, 0.9594824543459614, 0.8914626236479772, 0.8777901678021918, 0.8647976153223185, 0.9087075634470687, 0.8833193769658536, 0.9475166831950698, 0.944092340861552, 0.9203777945001614, 0.39342149637563784, 0.3440985019137395, 0.38516200017523683, 0.38830539891605353, 0.37459184310048255, 0.40470831271671026, 0.4058199602150384, 0.38696777485370004, 0.349839624029223, 0.7512956676166443, 0.6493791425012359, 0.7274085778298038, 0.7418623149205279, 0.7544310425200345, 0.7564318704358277, 0.7155389040599904, 0.7005271102071828, 0.6763970365882582, 0.1861382042795956, 0.2991295295548855, 0.19405934849758233, 0.21717084010136856, 0.2078806483323441, 0.17485723015092314, 0.20533846701148717, 0.23569032057684602, 0.2277930699588646, 0.25656059345325344, 0.23653545057574543, 0.1716741994651214, 0.1809327199855747, 0.17502824490747715, 0.1824140160657094, 0.17580417950912075, 0.19964929948307408, 0.20115582559563683, 0.22074147687227663, 0.21734561915784112, 0.21973769538839494, 0.2143239994606574, 0.2791251986492479, 0.19925355385259613, 0.18914997514968157, 0.2559174849532292, 0.23458640235528005, 0.43618277547135464, 0.36199147058407577, 0.373883116814973, 0.2777551973784822, 0.3076313790869185, 0.3726114519921677, 0.354581147651737, 0.40138102969122536, 0.3833729199517866, 0.061666458157776605, 0.11515424256217033, 0.06210369678012195, 0.10815359627357668, 0.09231045318360687, 0.10883657862030982, 0.10619843064470624, 0.09422396663740706, 0.13033308254007714, 0.22105011374319639, 0.20661175173966229, 0.21974954641063427, 0.2505351936138229, 0.21447749535347582, 0.2186636517311391, 0.2324285499733032, 0.23076289005563577, 0.22983244579289908, 0.6027391082549669, 0.5610413717427409, 0.623567057709738, 0.5491704987139134, 0.558674112009912, 0.5874817306722179, 0.6136604253437086, 0.581189199749078, 0.6170786330274525, 0.09194082844189866, 0.09488876173534444, 0.0997805519335363, 0.10273536666292671, 0.10278281283739621, 0.10917655600050569, 0.09450756229152668, 0.11260057735180784, 0.09944818183848836, 0.15263670540702334, 0.14150896562551696, 0.23818805323294423, 0.14873000491701693, 0.12947173568928705, 0.1287138041671877, 0.16210882459385845, 0.1352248430916454, 0.14010576931915475, 0.37193630744175776, 0.3397918809698196, 0.34326794641703506, 0.32789010427642407, 0.3441065242251954, 0.3498167253186295, 0.37470983604161645, 0.3935486482157148, 0.3773414262988214, 0.28580599875272095, 0.2789059242317087, 0.2779474666597753, 0.26031540530144326, 0.26384453281127285, 0.26426807400249375, 0.281288236625041, 0.2771840919380254, 0.28525854573971976, 0.20543250083296494, 0.20150812118311856, 0.19610180955160827, 0.25416786248849965, 0.19740127606721936, 0.1944271023232368, 0.18685000002220153, 0.1926515285067648, 0.2156532095153214, 0.2088260251531291, 0.2059872727699893, 0.19616981102656672, 0.21743329217477536, 0.1879621780988625, 0.22392268560581374, 0.20808656409198734, 0.19441866044242717, 0.195400861887282, 0.707143995336388, 0.5578112203118981, 0.7554726968968795, 0.6191751388745184, 0.6723227079996803, 0.6321754785836933, 0.169756978688544, 0.16486441555525666, 0.6693903700908764, 0.7361373393725879, 0.20223681613103506, 0.6349603286088743, 0.6037117000753107, 0.18752785632765878, 0.7017752380184341, 0.19759918321158843, 0.2063978451740761, 0.5643664936708827, 0.19435286388309037, 0.17790390921275756, 0.20033552899489315, 0.20364059884218166, 0.18252124187916108, 0.18385750509556442, 0.18580802059560642, 0.18386159035126914, 0.1967096411045357, 0.07700480264024645, 0.07853579053647541, 0.07881534829842163, 0.08003626175096301, 0.08599246980320929, 0.08431401477168965, 0.08484475249771517, 0.08144871278165444, 0.07751552888335667]}, "mutation_prompt": null}
{"id": "3584d081-3bb1-4a14-8285-342c6944f349", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Adaptive Lévy Flight using Adaptive Crossover to balance exploration and exploitation.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "57eb252c-1932-49d8-b4ef-75bef71987a7", "metadata": {"aucs": [0.7189991636163604, 0.7289203557762369, 0.7315138839952812, 0.7151379010133825, 0.71651968988284, 0.7451980584096978, 0.7008481351888508, 0.7419222099720622, 0.7359334757690116, 0.43572069348115594, 0.4123743780749103, 0.46176674451437394, 0.41605345771074853, 0.4418562903423301, 0.4471258142275859, 0.43562856262455907, 0.44279574636062136, 0.41207796659173934, 0.10426023644197757, 0.10497496628457903, 0.10971029391308473, 0.1110866459230716, 0.11281587088260636, 0.11124483858622769, 0.12669892420710516, 0.1205975524177213, 0.12061379889919677, 0.10941138994156718, 0.10664870306271201, 0.11004564062661726, 0.10969763793140663, 0.10851692062678009, 0.11306844678371542, 0.10630022856835186, 0.13796790187557895, 0.10615366195813947, 0.9594824543459614, 0.8914626236479772, 0.8777901678021918, 0.8647976153223185, 0.9087075634470687, 0.8833193769658536, 0.9475166831950698, 0.944092340861552, 0.9203777945001614, 0.39342149637563784, 0.3440985019137395, 0.38516200017523683, 0.38830539891605353, 0.37459184310048255, 0.40470831271671026, 0.4058199602150384, 0.38696777485370004, 0.349839624029223, 0.7512956676166443, 0.6493791425012359, 0.7274085778298038, 0.7418623149205279, 0.7544310425200345, 0.7564318704358277, 0.7155389040599904, 0.7005271102071828, 0.6763970365882582, 0.1861382042795956, 0.2991295295548855, 0.19405934849758233, 0.21717084010136856, 0.2078806483323441, 0.17485723015092314, 0.20533846701148717, 0.23569032057684602, 0.2277930699588646, 0.25656059345325344, 0.23653545057574543, 0.1716741994651214, 0.1809327199855747, 0.17502824490747715, 0.1824140160657094, 0.17580417950912075, 0.19964929948307408, 0.20115582559563683, 0.22074147687227663, 0.21734561915784112, 0.21973769538839494, 0.2143239994606574, 0.2791251986492479, 0.19925355385259613, 0.18914997514968157, 0.2559174849532292, 0.23458640235528005, 0.43618277547135464, 0.36199147058407577, 0.373883116814973, 0.2777551973784822, 0.3076313790869185, 0.3726114519921677, 0.354581147651737, 0.40138102969122536, 0.3833729199517866, 0.061666458157776605, 0.11515424256217033, 0.06210369678012195, 0.10815359627357668, 0.09231045318360687, 0.10883657862030982, 0.10619843064470624, 0.09422396663740706, 0.13033308254007714, 0.22105011374319639, 0.20661175173966229, 0.21974954641063427, 0.2505351936138229, 0.21447749535347582, 0.2186636517311391, 0.2324285499733032, 0.23076289005563577, 0.22983244579289908, 0.6027391082549669, 0.5610413717427409, 0.623567057709738, 0.5491704987139134, 0.558674112009912, 0.5874817306722179, 0.6136604253437086, 0.581189199749078, 0.6170786330274525, 0.09194082844189866, 0.09488876173534444, 0.0997805519335363, 0.10273536666292671, 0.10278281283739621, 0.10917655600050569, 0.09450756229152668, 0.11260057735180784, 0.09944818183848836, 0.15263670540702334, 0.14150896562551696, 0.23818805323294423, 0.14873000491701693, 0.12947173568928705, 0.1287138041671877, 0.16210882459385845, 0.1352248430916454, 0.14010576931915475, 0.37193630744175776, 0.3397918809698196, 0.34326794641703506, 0.32789010427642407, 0.3441065242251954, 0.3498167253186295, 0.37470983604161645, 0.3935486482157148, 0.3773414262988214, 0.28580599875272095, 0.2789059242317087, 0.2779474666597753, 0.26031540530144326, 0.26384453281127285, 0.26426807400249375, 0.281288236625041, 0.2771840919380254, 0.28525854573971976, 0.20543250083296494, 0.20150812118311856, 0.19610180955160827, 0.25416786248849965, 0.19740127606721936, 0.1944271023232368, 0.18685000002220153, 0.1926515285067648, 0.2156532095153214, 0.2088260251531291, 0.2059872727699893, 0.19616981102656672, 0.21743329217477536, 0.1879621780988625, 0.22392268560581374, 0.20808656409198734, 0.19441866044242717, 0.195400861887282, 0.707143995336388, 0.5578112203118981, 0.7554726968968795, 0.6191751388745184, 0.6723227079996803, 0.6321754785836933, 0.169756978688544, 0.16486441555525666, 0.6693903700908764, 0.7361373393725879, 0.20223681613103506, 0.6349603286088743, 0.6037117000753107, 0.18752785632765878, 0.7017752380184341, 0.19759918321158843, 0.2063978451740761, 0.5643664936708827, 0.19435286388309037, 0.17790390921275756, 0.20033552899489315, 0.20364059884218166, 0.18252124187916108, 0.18385750509556442, 0.18580802059560642, 0.18386159035126914, 0.1967096411045357, 0.07700480264024645, 0.07853579053647541, 0.07881534829842163, 0.08003626175096301, 0.08599246980320929, 0.08431401477168965, 0.08484475249771517, 0.08144871278165444, 0.07751552888335667]}, "mutation_prompt": null}
{"id": "6235e606-ac6c-447c-bfd2-a1c8fd752c0e", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Adaptive Lévy Flight using Adaptive Crossover to balance exploration and exploitation.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "57eb252c-1932-49d8-b4ef-75bef71987a7", "metadata": {"aucs": [0.7189991636163604, 0.7289203557762369, 0.7315138839952812, 0.7151379010133825, 0.71651968988284, 0.7451980584096978, 0.7008481351888508, 0.7419222099720622, 0.7359334757690116, 0.43572069348115594, 0.4123743780749103, 0.46176674451437394, 0.41605345771074853, 0.4418562903423301, 0.4471258142275859, 0.43562856262455907, 0.44279574636062136, 0.41207796659173934, 0.10426023644197757, 0.10497496628457903, 0.10971029391308473, 0.1110866459230716, 0.11281587088260636, 0.11124483858622769, 0.12669892420710516, 0.1205975524177213, 0.12061379889919677, 0.10941138994156718, 0.10664870306271201, 0.11004564062661726, 0.10969763793140663, 0.10851692062678009, 0.11306844678371542, 0.10630022856835186, 0.13796790187557895, 0.10615366195813947, 0.9594824543459614, 0.8914626236479772, 0.8777901678021918, 0.8647976153223185, 0.9087075634470687, 0.8833193769658536, 0.9475166831950698, 0.944092340861552, 0.9203777945001614, 0.39342149637563784, 0.3440985019137395, 0.38516200017523683, 0.38830539891605353, 0.37459184310048255, 0.40470831271671026, 0.4058199602150384, 0.38696777485370004, 0.349839624029223, 0.7512956676166443, 0.6493791425012359, 0.7274085778298038, 0.7418623149205279, 0.7544310425200345, 0.7564318704358277, 0.7155389040599904, 0.7005271102071828, 0.6763970365882582, 0.1861382042795956, 0.2991295295548855, 0.19405934849758233, 0.21717084010136856, 0.2078806483323441, 0.17485723015092314, 0.20533846701148717, 0.23569032057684602, 0.2277930699588646, 0.25656059345325344, 0.23653545057574543, 0.1716741994651214, 0.1809327199855747, 0.17502824490747715, 0.1824140160657094, 0.17580417950912075, 0.19964929948307408, 0.20115582559563683, 0.22074147687227663, 0.21734561915784112, 0.21973769538839494, 0.2143239994606574, 0.2791251986492479, 0.19925355385259613, 0.18914997514968157, 0.2559174849532292, 0.23458640235528005, 0.43618277547135464, 0.36199147058407577, 0.373883116814973, 0.2777551973784822, 0.3076313790869185, 0.3726114519921677, 0.354581147651737, 0.40138102969122536, 0.3833729199517866, 0.061666458157776605, 0.11515424256217033, 0.06210369678012195, 0.10815359627357668, 0.09231045318360687, 0.10883657862030982, 0.10619843064470624, 0.09422396663740706, 0.13033308254007714, 0.22105011374319639, 0.20661175173966229, 0.21974954641063427, 0.2505351936138229, 0.21447749535347582, 0.2186636517311391, 0.2324285499733032, 0.23076289005563577, 0.22983244579289908, 0.6027391082549669, 0.5610413717427409, 0.623567057709738, 0.5491704987139134, 0.558674112009912, 0.5874817306722179, 0.6136604253437086, 0.581189199749078, 0.6170786330274525, 0.09194082844189866, 0.09488876173534444, 0.0997805519335363, 0.10273536666292671, 0.10278281283739621, 0.10917655600050569, 0.09450756229152668, 0.11260057735180784, 0.09944818183848836, 0.15263670540702334, 0.14150896562551696, 0.23818805323294423, 0.14873000491701693, 0.12947173568928705, 0.1287138041671877, 0.16210882459385845, 0.1352248430916454, 0.14010576931915475, 0.37193630744175776, 0.3397918809698196, 0.34326794641703506, 0.32789010427642407, 0.3441065242251954, 0.3498167253186295, 0.37470983604161645, 0.3935486482157148, 0.3773414262988214, 0.28580599875272095, 0.2789059242317087, 0.2779474666597753, 0.26031540530144326, 0.26384453281127285, 0.26426807400249375, 0.281288236625041, 0.2771840919380254, 0.28525854573971976, 0.20543250083296494, 0.20150812118311856, 0.19610180955160827, 0.25416786248849965, 0.19740127606721936, 0.1944271023232368, 0.18685000002220153, 0.1926515285067648, 0.2156532095153214, 0.2088260251531291, 0.2059872727699893, 0.19616981102656672, 0.21743329217477536, 0.1879621780988625, 0.22392268560581374, 0.20808656409198734, 0.19441866044242717, 0.195400861887282, 0.707143995336388, 0.5578112203118981, 0.7554726968968795, 0.6191751388745184, 0.6723227079996803, 0.6321754785836933, 0.169756978688544, 0.16486441555525666, 0.6693903700908764, 0.7361373393725879, 0.20223681613103506, 0.6349603286088743, 0.6037117000753107, 0.18752785632765878, 0.7017752380184341, 0.19759918321158843, 0.2063978451740761, 0.5643664936708827, 0.19435286388309037, 0.17790390921275756, 0.20033552899489315, 0.20364059884218166, 0.18252124187916108, 0.18385750509556442, 0.18580802059560642, 0.18386159035126914, 0.1967096411045357, 0.07700480264024645, 0.07853579053647541, 0.07881534829842163, 0.08003626175096301, 0.08599246980320929, 0.08431401477168965, 0.08484475249771517, 0.08144871278165444, 0.07751552888335667]}, "mutation_prompt": null}
{"id": "e49095c0-324d-40dd-856f-18bd9cd06dca", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Adaptive Lévy Flight using Adaptive Crossover to balance exploration and exploitation.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "57eb252c-1932-49d8-b4ef-75bef71987a7", "metadata": {"aucs": [0.7189991636163604, 0.7289203557762369, 0.7315138839952812, 0.7151379010133825, 0.71651968988284, 0.7451980584096978, 0.7008481351888508, 0.7419222099720622, 0.7359334757690116, 0.43572069348115594, 0.4123743780749103, 0.46176674451437394, 0.41605345771074853, 0.4418562903423301, 0.4471258142275859, 0.43562856262455907, 0.44279574636062136, 0.41207796659173934, 0.10426023644197757, 0.10497496628457903, 0.10971029391308473, 0.1110866459230716, 0.11281587088260636, 0.11124483858622769, 0.12669892420710516, 0.1205975524177213, 0.12061379889919677, 0.10941138994156718, 0.10664870306271201, 0.11004564062661726, 0.10969763793140663, 0.10851692062678009, 0.11306844678371542, 0.10630022856835186, 0.13796790187557895, 0.10615366195813947, 0.9594824543459614, 0.8914626236479772, 0.8777901678021918, 0.8647976153223185, 0.9087075634470687, 0.8833193769658536, 0.9475166831950698, 0.944092340861552, 0.9203777945001614, 0.39342149637563784, 0.3440985019137395, 0.38516200017523683, 0.38830539891605353, 0.37459184310048255, 0.40470831271671026, 0.4058199602150384, 0.38696777485370004, 0.349839624029223, 0.7512956676166443, 0.6493791425012359, 0.7274085778298038, 0.7418623149205279, 0.7544310425200345, 0.7564318704358277, 0.7155389040599904, 0.7005271102071828, 0.6763970365882582, 0.1861382042795956, 0.2991295295548855, 0.19405934849758233, 0.21717084010136856, 0.2078806483323441, 0.17485723015092314, 0.20533846701148717, 0.23569032057684602, 0.2277930699588646, 0.25656059345325344, 0.23653545057574543, 0.1716741994651214, 0.1809327199855747, 0.17502824490747715, 0.1824140160657094, 0.17580417950912075, 0.19964929948307408, 0.20115582559563683, 0.22074147687227663, 0.21734561915784112, 0.21973769538839494, 0.2143239994606574, 0.2791251986492479, 0.19925355385259613, 0.18914997514968157, 0.2559174849532292, 0.23458640235528005, 0.43618277547135464, 0.36199147058407577, 0.373883116814973, 0.2777551973784822, 0.3076313790869185, 0.3726114519921677, 0.354581147651737, 0.40138102969122536, 0.3833729199517866, 0.061666458157776605, 0.11515424256217033, 0.06210369678012195, 0.10815359627357668, 0.09231045318360687, 0.10883657862030982, 0.10619843064470624, 0.09422396663740706, 0.13033308254007714, 0.22105011374319639, 0.20661175173966229, 0.21974954641063427, 0.2505351936138229, 0.21447749535347582, 0.2186636517311391, 0.2324285499733032, 0.23076289005563577, 0.22983244579289908, 0.6027391082549669, 0.5610413717427409, 0.623567057709738, 0.5491704987139134, 0.558674112009912, 0.5874817306722179, 0.6136604253437086, 0.581189199749078, 0.6170786330274525, 0.09194082844189866, 0.09488876173534444, 0.0997805519335363, 0.10273536666292671, 0.10278281283739621, 0.10917655600050569, 0.09450756229152668, 0.11260057735180784, 0.09944818183848836, 0.15263670540702334, 0.14150896562551696, 0.23818805323294423, 0.14873000491701693, 0.12947173568928705, 0.1287138041671877, 0.16210882459385845, 0.1352248430916454, 0.14010576931915475, 0.37193630744175776, 0.3397918809698196, 0.34326794641703506, 0.32789010427642407, 0.3441065242251954, 0.3498167253186295, 0.37470983604161645, 0.3935486482157148, 0.3773414262988214, 0.28580599875272095, 0.2789059242317087, 0.2779474666597753, 0.26031540530144326, 0.26384453281127285, 0.26426807400249375, 0.281288236625041, 0.2771840919380254, 0.28525854573971976, 0.20543250083296494, 0.20150812118311856, 0.19610180955160827, 0.25416786248849965, 0.19740127606721936, 0.1944271023232368, 0.18685000002220153, 0.1926515285067648, 0.2156532095153214, 0.2088260251531291, 0.2059872727699893, 0.19616981102656672, 0.21743329217477536, 0.1879621780988625, 0.22392268560581374, 0.20808656409198734, 0.19441866044242717, 0.195400861887282, 0.707143995336388, 0.5578112203118981, 0.7554726968968795, 0.6191751388745184, 0.6723227079996803, 0.6321754785836933, 0.169756978688544, 0.16486441555525666, 0.6693903700908764, 0.7361373393725879, 0.20223681613103506, 0.6349603286088743, 0.6037117000753107, 0.18752785632765878, 0.7017752380184341, 0.19759918321158843, 0.2063978451740761, 0.5643664936708827, 0.19435286388309037, 0.17790390921275756, 0.20033552899489315, 0.20364059884218166, 0.18252124187916108, 0.18385750509556442, 0.18580802059560642, 0.18386159035126914, 0.1967096411045357, 0.07700480264024645, 0.07853579053647541, 0.07881534829842163, 0.08003626175096301, 0.08599246980320929, 0.08431401477168965, 0.08484475249771517, 0.08144871278165444, 0.07751552888335667]}, "mutation_prompt": null}
{"id": "869f532e-7a77-48a0-9268-9263ff68d816", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Adaptive Lévy Flight using Adaptive Crossover to balance exploration and exploitation.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "57eb252c-1932-49d8-b4ef-75bef71987a7", "metadata": {"aucs": [0.7189991636163604, 0.7289203557762369, 0.7315138839952812, 0.7151379010133825, 0.71651968988284, 0.7451980584096978, 0.7008481351888508, 0.7419222099720622, 0.7359334757690116, 0.43572069348115594, 0.4123743780749103, 0.46176674451437394, 0.41605345771074853, 0.4418562903423301, 0.4471258142275859, 0.43562856262455907, 0.44279574636062136, 0.41207796659173934, 0.10426023644197757, 0.10497496628457903, 0.10971029391308473, 0.1110866459230716, 0.11281587088260636, 0.11124483858622769, 0.12669892420710516, 0.1205975524177213, 0.12061379889919677, 0.10941138994156718, 0.10664870306271201, 0.11004564062661726, 0.10969763793140663, 0.10851692062678009, 0.11306844678371542, 0.10630022856835186, 0.13796790187557895, 0.10615366195813947, 0.9594824543459614, 0.8914626236479772, 0.8777901678021918, 0.8647976153223185, 0.9087075634470687, 0.8833193769658536, 0.9475166831950698, 0.944092340861552, 0.9203777945001614, 0.39342149637563784, 0.3440985019137395, 0.38516200017523683, 0.38830539891605353, 0.37459184310048255, 0.40470831271671026, 0.4058199602150384, 0.38696777485370004, 0.349839624029223, 0.7512956676166443, 0.6493791425012359, 0.7274085778298038, 0.7418623149205279, 0.7544310425200345, 0.7564318704358277, 0.7155389040599904, 0.7005271102071828, 0.6763970365882582, 0.1861382042795956, 0.2991295295548855, 0.19405934849758233, 0.21717084010136856, 0.2078806483323441, 0.17485723015092314, 0.20533846701148717, 0.23569032057684602, 0.2277930699588646, 0.25656059345325344, 0.23653545057574543, 0.1716741994651214, 0.1809327199855747, 0.17502824490747715, 0.1824140160657094, 0.17580417950912075, 0.19964929948307408, 0.20115582559563683, 0.22074147687227663, 0.21734561915784112, 0.21973769538839494, 0.2143239994606574, 0.2791251986492479, 0.19925355385259613, 0.18914997514968157, 0.2559174849532292, 0.23458640235528005, 0.43618277547135464, 0.36199147058407577, 0.373883116814973, 0.2777551973784822, 0.3076313790869185, 0.3726114519921677, 0.354581147651737, 0.40138102969122536, 0.3833729199517866, 0.061666458157776605, 0.11515424256217033, 0.06210369678012195, 0.10815359627357668, 0.09231045318360687, 0.10883657862030982, 0.10619843064470624, 0.09422396663740706, 0.13033308254007714, 0.22105011374319639, 0.20661175173966229, 0.21974954641063427, 0.2505351936138229, 0.21447749535347582, 0.2186636517311391, 0.2324285499733032, 0.23076289005563577, 0.22983244579289908, 0.6027391082549669, 0.5610413717427409, 0.623567057709738, 0.5491704987139134, 0.558674112009912, 0.5874817306722179, 0.6136604253437086, 0.581189199749078, 0.6170786330274525, 0.09194082844189866, 0.09488876173534444, 0.0997805519335363, 0.10273536666292671, 0.10278281283739621, 0.10917655600050569, 0.09450756229152668, 0.11260057735180784, 0.09944818183848836, 0.15263670540702334, 0.14150896562551696, 0.23818805323294423, 0.14873000491701693, 0.12947173568928705, 0.1287138041671877, 0.16210882459385845, 0.1352248430916454, 0.14010576931915475, 0.37193630744175776, 0.3397918809698196, 0.34326794641703506, 0.32789010427642407, 0.3441065242251954, 0.3498167253186295, 0.37470983604161645, 0.3935486482157148, 0.3773414262988214, 0.28580599875272095, 0.2789059242317087, 0.2779474666597753, 0.26031540530144326, 0.26384453281127285, 0.26426807400249375, 0.281288236625041, 0.2771840919380254, 0.28525854573971976, 0.20543250083296494, 0.20150812118311856, 0.19610180955160827, 0.25416786248849965, 0.19740127606721936, 0.1944271023232368, 0.18685000002220153, 0.1926515285067648, 0.2156532095153214, 0.2088260251531291, 0.2059872727699893, 0.19616981102656672, 0.21743329217477536, 0.1879621780988625, 0.22392268560581374, 0.20808656409198734, 0.19441866044242717, 0.195400861887282, 0.707143995336388, 0.5578112203118981, 0.7554726968968795, 0.6191751388745184, 0.6723227079996803, 0.6321754785836933, 0.169756978688544, 0.16486441555525666, 0.6693903700908764, 0.7361373393725879, 0.20223681613103506, 0.6349603286088743, 0.6037117000753107, 0.18752785632765878, 0.7017752380184341, 0.19759918321158843, 0.2063978451740761, 0.5643664936708827, 0.19435286388309037, 0.17790390921275756, 0.20033552899489315, 0.20364059884218166, 0.18252124187916108, 0.18385750509556442, 0.18580802059560642, 0.18386159035126914, 0.1967096411045357, 0.07700480264024645, 0.07853579053647541, 0.07881534829842163, 0.08003626175096301, 0.08599246980320929, 0.08431401477168965, 0.08484475249771517, 0.08144871278165444, 0.07751552888335667]}, "mutation_prompt": null}
{"id": "e20d57e0-bbb8-4e7c-86ee-82bee5d4448f", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                # Adaptive Scaling Factor\n                self.F = 0.5 + 0.5 * np.random.rand()  \n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Dynamic Scaling Factor and Lévy Flight for improved exploration and convergence.", "configspace": "", "generation": 30, "fitness": 0.2509031769667242, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.20.", "error": "", "parent_id": "57eb252c-1932-49d8-b4ef-75bef71987a7", "metadata": {"aucs": [0.5336412149087323, 0.5539880815999856, 0.5736410494688959, 0.5605901091278424, 0.5664654639985478, 0.5833378542490706, 0.579429456200659, 0.5909240149049462, 0.5782271992738999, 0.2723503000134244, 0.2454585171020739, 0.22616316327688457, 0.2505670312815226, 0.26170453164566765, 0.250991018153535, 0.2551341421336707, 0.2362583838481821, 0.24706654673431516, 0.09191968258286143, 0.08831902874270414, 0.09326699911313441, 0.08800399392712277, 0.1162545877240504, 0.1048470573640723, 0.0993464985905923, 0.12741013612988827, 0.09607282043284449, 0.09012289085948888, 0.09375997627257948, 0.09349047561814294, 0.09102514107921944, 0.09586469438323253, 0.08014650361530262, 0.0866256905528453, 0.08701978449675785, 0.08864463908830222, 0.89821081530264, 0.9686959063166887, 0.9100650069550104, 0.9107439440487466, 0.9705598771712043, 0.9509300800024503, 0.9018270782645856, 0.9313762515448515, 0.9799084608925702, 0.27560909490767505, 0.26684473636462813, 0.27379535334891014, 0.28121051870996594, 0.2644506772306936, 0.29353800387196183, 0.26793662421327424, 0.29030280902263716, 0.2887564859694767, 0.5054693704566013, 0.463468472327597, 0.46867807114155735, 0.5205951890016702, 0.5490957162266181, 0.5283178907366846, 0.5168893947060564, 0.6646557866083808, 0.4793195770833961, 0.17267988420870717, 0.1902016920745354, 0.20220606704354582, 0.17748684379833468, 0.189034024124345, 0.17621665952884868, 0.1680100703339854, 0.15515778483073805, 0.16677714798121068, 0.1741292694847767, 0.17386752992028798, 0.20923185142575984, 0.16951913695655607, 0.18485647330564092, 0.20260476281083672, 0.19466886931866179, 0.20377055201587413, 0.176821133838428, 0.08638445875009582, 0.0920050797431744, 0.10793735758248568, 0.12290150604230221, 0.1262940242171502, 0.07137571126734932, 0.07917639126158227, 0.09128250190676024, 0.07673847432540515, 0.22242598031542948, 0.18053239407070942, 0.20767053148504921, 0.2155362090517251, 0.21647967505710153, 0.16664555125114644, 0.19869921384464362, 0.20564010196614924, 0.24403795172378207, 0.007692784090464699, 0.018057815610342032, 0.008355466243270326, 0.015319522417395981, 0.014210491265193359, 0.010010236177901088, 0.01619842909391267, 0.015135721115226652, 0.02802597119879724, 0.1508084593661173, 0.1308254511196617, 0.12332891751042263, 0.14916563123828386, 0.1561985069063585, 0.14621571279715861, 0.13792275694724754, 0.14009458905725336, 0.13326781986563452, 0.4769575951631938, 0.4392880310255093, 0.47651274916391617, 0.4670254168338539, 0.46508754636114735, 0.47103680566728057, 0.4665425011820322, 0.4721202595618402, 0.4633515781816747, 0.08575238314212896, 0.09060694129486602, 0.0809209572340609, 0.08105496302108584, 0.08364955725037349, 0.08800192614003188, 0.07990894390191605, 0.0831401438472914, 0.09546903575205634, 0.19219099251959848, 0.12123845765997665, 0.1486680267364322, 0.17866784608416952, 0.1726248616399504, 0.16489932257623408, 0.15106514833966356, 0.14974127584392594, 0.13929228490428847, 0.2794155709731658, 0.2725459368404314, 0.2673090787323561, 0.27667721905240517, 0.27313148216578476, 0.27505368632690175, 0.28049769372659417, 0.29663412133195677, 0.2718957671052358, 0.19462427444578856, 0.21948606678545823, 0.21463095877158012, 0.19007818494654005, 0.2112321152447335, 0.21953880002058546, 0.20475876181889818, 0.2188919785338972, 0.2110051486266099, 0.17751509441060787, 0.17059745133108917, 0.20216534602152025, 0.18910381120827313, 0.18845749790906852, 0.18228019998196532, 0.21409402284428458, 0.20054352586493873, 0.17686443823316045, 0.18153835343654057, 0.17737715911170493, 0.18242765170752895, 0.19511505361150683, 0.1722395958231675, 0.1865710239533117, 0.17876667673998758, 0.18385071344395332, 0.19204507816074146, 0.16532707004808145, 0.17503241129336633, 0.6363397593072613, 0.606537722515516, 0.3338462715053552, 0.18975807322003313, 0.18071057096284038, 0.3803255468323339, 0.17451547325428984, 0.16116544035335523, 0.19881296401746085, 0.38349509899924006, 0.4323150190970426, 0.31582063447021247, 0.24229494792574013, 0.20593755725297702, 0.20571147874180784, 0.642262067851687, 0.1938599031922248, 0.1755666594405666, 0.1938166056713715, 0.18000522878388092, 0.1871158320233638, 0.18423271898753035, 0.20665877444138847, 0.19839412229865105, 0.1933641939568581, 0.07178799384150136, 0.06999849081585341, 0.06866716039373677, 0.06509176120118432, 0.07312473139200903, 0.07484513038006557, 0.0711707694765702, 0.07518139222386266, 0.06905453856715571]}, "mutation_prompt": null}
{"id": "06fcece6-11f1-4d34-98ce-630f5b7e89b2", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Adaptive Lévy Flight using Adaptive Crossover to balance exploration and exploitation.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "57eb252c-1932-49d8-b4ef-75bef71987a7", "metadata": {"aucs": [0.7189991636163604, 0.7289203557762369, 0.7315138839952812, 0.7151379010133825, 0.71651968988284, 0.7451980584096978, 0.7008481351888508, 0.7419222099720622, 0.7359334757690116, 0.43572069348115594, 0.4123743780749103, 0.46176674451437394, 0.41605345771074853, 0.4418562903423301, 0.4471258142275859, 0.43562856262455907, 0.44279574636062136, 0.41207796659173934, 0.10426023644197757, 0.10497496628457903, 0.10971029391308473, 0.1110866459230716, 0.11281587088260636, 0.11124483858622769, 0.12669892420710516, 0.1205975524177213, 0.12061379889919677, 0.10941138994156718, 0.10664870306271201, 0.11004564062661726, 0.10969763793140663, 0.10851692062678009, 0.11306844678371542, 0.10630022856835186, 0.13796790187557895, 0.10615366195813947, 0.9594824543459614, 0.8914626236479772, 0.8777901678021918, 0.8647976153223185, 0.9087075634470687, 0.8833193769658536, 0.9475166831950698, 0.944092340861552, 0.9203777945001614, 0.39342149637563784, 0.3440985019137395, 0.38516200017523683, 0.38830539891605353, 0.37459184310048255, 0.40470831271671026, 0.4058199602150384, 0.38696777485370004, 0.349839624029223, 0.7512956676166443, 0.6493791425012359, 0.7274085778298038, 0.7418623149205279, 0.7544310425200345, 0.7564318704358277, 0.7155389040599904, 0.7005271102071828, 0.6763970365882582, 0.1861382042795956, 0.2991295295548855, 0.19405934849758233, 0.21717084010136856, 0.2078806483323441, 0.17485723015092314, 0.20533846701148717, 0.23569032057684602, 0.2277930699588646, 0.25656059345325344, 0.23653545057574543, 0.1716741994651214, 0.1809327199855747, 0.17502824490747715, 0.1824140160657094, 0.17580417950912075, 0.19964929948307408, 0.20115582559563683, 0.22074147687227663, 0.21734561915784112, 0.21973769538839494, 0.2143239994606574, 0.2791251986492479, 0.19925355385259613, 0.18914997514968157, 0.2559174849532292, 0.23458640235528005, 0.43618277547135464, 0.36199147058407577, 0.373883116814973, 0.2777551973784822, 0.3076313790869185, 0.3726114519921677, 0.354581147651737, 0.40138102969122536, 0.3833729199517866, 0.061666458157776605, 0.11515424256217033, 0.06210369678012195, 0.10815359627357668, 0.09231045318360687, 0.10883657862030982, 0.10619843064470624, 0.09422396663740706, 0.13033308254007714, 0.22105011374319639, 0.20661175173966229, 0.21974954641063427, 0.2505351936138229, 0.21447749535347582, 0.2186636517311391, 0.2324285499733032, 0.23076289005563577, 0.22983244579289908, 0.6027391082549669, 0.5610413717427409, 0.623567057709738, 0.5491704987139134, 0.558674112009912, 0.5874817306722179, 0.6136604253437086, 0.581189199749078, 0.6170786330274525, 0.09194082844189866, 0.09488876173534444, 0.0997805519335363, 0.10273536666292671, 0.10278281283739621, 0.10917655600050569, 0.09450756229152668, 0.11260057735180784, 0.09944818183848836, 0.15263670540702334, 0.14150896562551696, 0.23818805323294423, 0.14873000491701693, 0.12947173568928705, 0.1287138041671877, 0.16210882459385845, 0.1352248430916454, 0.14010576931915475, 0.37193630744175776, 0.3397918809698196, 0.34326794641703506, 0.32789010427642407, 0.3441065242251954, 0.3498167253186295, 0.37470983604161645, 0.3935486482157148, 0.3773414262988214, 0.28580599875272095, 0.2789059242317087, 0.2779474666597753, 0.26031540530144326, 0.26384453281127285, 0.26426807400249375, 0.281288236625041, 0.2771840919380254, 0.28525854573971976, 0.20543250083296494, 0.20150812118311856, 0.19610180955160827, 0.25416786248849965, 0.19740127606721936, 0.1944271023232368, 0.18685000002220153, 0.1926515285067648, 0.2156532095153214, 0.2088260251531291, 0.2059872727699893, 0.19616981102656672, 0.21743329217477536, 0.1879621780988625, 0.22392268560581374, 0.20808656409198734, 0.19441866044242717, 0.195400861887282, 0.707143995336388, 0.5578112203118981, 0.7554726968968795, 0.6191751388745184, 0.6723227079996803, 0.6321754785836933, 0.169756978688544, 0.16486441555525666, 0.6693903700908764, 0.7361373393725879, 0.20223681613103506, 0.6349603286088743, 0.6037117000753107, 0.18752785632765878, 0.7017752380184341, 0.19759918321158843, 0.2063978451740761, 0.5643664936708827, 0.19435286388309037, 0.17790390921275756, 0.20033552899489315, 0.20364059884218166, 0.18252124187916108, 0.18385750509556442, 0.18580802059560642, 0.18386159035126914, 0.1967096411045357, 0.07700480264024645, 0.07853579053647541, 0.07881534829842163, 0.08003626175096301, 0.08599246980320929, 0.08431401477168965, 0.08484475249771517, 0.08144871278165444, 0.07751552888335667]}, "mutation_prompt": null}
{"id": "9978e6ff-9846-4347-88dd-27d67d534f06", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                # Enhanced mutation strategy with scaled difference vector\n                mutant = population[a] + self.F * (population[b] - population[c]) + 0.1 * (population[a] - population[i])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Improved Hybrid Differential Evolution with Adaptive Lévy Flight by enhancing mutation strategy and incorporating dynamic scaling.", "configspace": "", "generation": 32, "fitness": 0.2815876982456676, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "57eb252c-1932-49d8-b4ef-75bef71987a7", "metadata": {"aucs": [0.6488496544240346, 0.6377456274244541, 0.6693285883022431, 0.698735124347054, 0.6691858256191789, 0.6866735090787238, 0.6857839534271009, 0.6877965987865378, 0.6353065486635603, 0.33225242498466667, 0.3545065502053246, 0.340268091412385, 0.3520834915272608, 0.3139238146474155, 0.33886088783219626, 0.3401755458221364, 0.3784310897833211, 0.3314015187624836, 0.1124961088390386, 0.09325459402516623, 0.10316321969848652, 0.10018170807109816, 0.10371211112713297, 0.11548968387968728, 0.09708845849704506, 0.1145510696432901, 0.1088931501544319, 0.09391750450480207, 0.0937777401025931, 0.09940577350354363, 0.09161762015818353, 0.09155484084873755, 0.09615493102074923, 0.09874261766829273, 0.09459131252962671, 0.09387806236273755, 0.9457201987059662, 0.9244416726352991, 0.9339712796706333, 0.9311427221958308, 0.9605280767414732, 0.9158445636289803, 0.9076675065809058, 0.9799586945894234, 0.9045082474731254, 0.3308362656307188, 0.3265985954075149, 0.33015187185736117, 0.3524234399180608, 0.3141471567738682, 0.32725109425067467, 0.34368004441527844, 0.34925799416004, 0.342243638556018, 0.6549316253931062, 0.5860822242359864, 0.7307211394343194, 0.696974985686911, 0.5731176484646396, 0.6392882315806994, 0.6643450815104359, 0.6565313600091851, 0.6702984613323782, 0.19428519799419375, 0.20139975510502306, 0.23448046312007798, 0.18025365963637108, 0.17061136364480756, 0.16220768224449855, 0.17253406923107195, 0.21537417555794458, 0.234229776655957, 0.15910085933046247, 0.17158580246936872, 0.11617093106814991, 0.19170420259291332, 0.23554424868293267, 0.22893142872549133, 0.2416418808764632, 0.1886456934027958, 0.20303327446192665, 0.18810145380669896, 0.16212983045756368, 0.14890438813747464, 0.13513090755384727, 0.14411847228487917, 0.17307310132674225, 0.19515763031747901, 0.13374671141369365, 0.14304798123758233, 0.25515845268746296, 0.2345415590061306, 0.2828700413909432, 0.25043310386178574, 0.2798437544032083, 0.23260818128028093, 0.30474598556272936, 0.28903993079089163, 0.2937431632713102, 0.06498250858775156, 0.06974131143588147, 0.046721668976985486, 0.02716531650801135, 0.06635777917063845, 0.06323779925341277, 0.061498952230476744, 0.0841457678058195, 0.051889582383592314, 0.1587847543252472, 0.17037828586987236, 0.18566049028225173, 0.160247920041931, 0.1875259537625391, 0.17942450377053032, 0.1644437611484727, 0.18732398275994944, 0.19405951176521197, 0.5494538367419441, 0.5190281743006606, 0.4994041349216528, 0.5212800004862963, 0.5421010260736638, 0.5035855346548241, 0.5210151589235734, 0.5154294744750757, 0.5367109731252723, 0.09037461144964021, 0.09541768715406984, 0.0877731208805369, 0.09343943559105705, 0.09290864165364232, 0.10297046410939514, 0.11529295758064562, 0.09064405624162242, 0.09432369965435772, 0.13395922666780802, 0.14877611716069727, 0.1738078113354542, 0.1713716017008412, 0.13480250443784425, 0.14818225939033292, 0.14026255914587005, 0.13525214194617496, 0.13472939493357994, 0.3201083891880099, 0.2983224081330046, 0.3317984154922059, 0.3280925489151997, 0.3250629202761933, 0.28890982243651975, 0.34550500640684556, 0.3364459122439857, 0.32071136483945817, 0.2347797481307864, 0.24162672495407556, 0.2519428347128201, 0.2614241656759294, 0.2204772137822376, 0.21879137613019195, 0.23794047266957075, 0.25825810942832117, 0.29121642604773756, 0.17951777161226268, 0.19506583176286918, 0.19595825765894237, 0.1824212908795706, 0.1911338666498099, 0.18046265673005013, 0.17915313585390724, 0.1959642400613747, 0.18964955608754708, 0.267621520016758, 0.1831305324201371, 0.20463645224091576, 0.17947204630564406, 0.18825770314083734, 0.20032079970175887, 0.18581295897852002, 0.18776566411743, 0.18663156575296247, 0.5693988912070223, 0.18871275563475276, 0.15155406051292852, 0.5787979230229068, 0.23370395004609368, 0.16081251505586858, 0.17303449983933883, 0.17476826761205388, 0.42200294022820484, 0.5231651033595512, 0.20237783940443033, 0.17574717722116706, 0.27548490187582697, 0.18702595198585514, 0.6688218865336792, 0.20896297961993093, 0.20618150496373489, 0.20616098533577587, 0.17701693136127739, 0.18287059554925789, 0.17071114823572442, 0.19009461647498704, 0.19135540934997664, 0.20153982846168317, 0.18269424486968688, 0.1779972164580469, 0.17111225110607886, 0.08259964174162215, 0.08014451598970607, 0.0768071594281382, 0.07983564893760609, 0.08715517825800467, 0.08207684413904104, 0.08006342366637087, 0.07779918416065035, 0.07950639905300527]}, "mutation_prompt": null}
{"id": "384f177f-de6e-4590-a3aa-7931e4f03780", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Adaptive Lévy Flight using Adaptive Crossover to balance exploration and exploitation.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "57eb252c-1932-49d8-b4ef-75bef71987a7", "metadata": {"aucs": [0.7189991636163604, 0.7289203557762369, 0.7315138839952812, 0.7151379010133825, 0.71651968988284, 0.7451980584096978, 0.7008481351888508, 0.7419222099720622, 0.7359334757690116, 0.43572069348115594, 0.4123743780749103, 0.46176674451437394, 0.41605345771074853, 0.4418562903423301, 0.4471258142275859, 0.43562856262455907, 0.44279574636062136, 0.41207796659173934, 0.10426023644197757, 0.10497496628457903, 0.10971029391308473, 0.1110866459230716, 0.11281587088260636, 0.11124483858622769, 0.12669892420710516, 0.1205975524177213, 0.12061379889919677, 0.10941138994156718, 0.10664870306271201, 0.11004564062661726, 0.10969763793140663, 0.10851692062678009, 0.11306844678371542, 0.10630022856835186, 0.13796790187557895, 0.10615366195813947, 0.9594824543459614, 0.8914626236479772, 0.8777901678021918, 0.8647976153223185, 0.9087075634470687, 0.8833193769658536, 0.9475166831950698, 0.944092340861552, 0.9203777945001614, 0.39342149637563784, 0.3440985019137395, 0.38516200017523683, 0.38830539891605353, 0.37459184310048255, 0.40470831271671026, 0.4058199602150384, 0.38696777485370004, 0.349839624029223, 0.7512956676166443, 0.6493791425012359, 0.7274085778298038, 0.7418623149205279, 0.7544310425200345, 0.7564318704358277, 0.7155389040599904, 0.7005271102071828, 0.6763970365882582, 0.1861382042795956, 0.2991295295548855, 0.19405934849758233, 0.21717084010136856, 0.2078806483323441, 0.17485723015092314, 0.20533846701148717, 0.23569032057684602, 0.2277930699588646, 0.25656059345325344, 0.23653545057574543, 0.1716741994651214, 0.1809327199855747, 0.17502824490747715, 0.1824140160657094, 0.17580417950912075, 0.19964929948307408, 0.20115582559563683, 0.22074147687227663, 0.21734561915784112, 0.21973769538839494, 0.2143239994606574, 0.2791251986492479, 0.19925355385259613, 0.18914997514968157, 0.2559174849532292, 0.23458640235528005, 0.43618277547135464, 0.36199147058407577, 0.373883116814973, 0.2777551973784822, 0.3076313790869185, 0.3726114519921677, 0.354581147651737, 0.40138102969122536, 0.3833729199517866, 0.061666458157776605, 0.11515424256217033, 0.06210369678012195, 0.10815359627357668, 0.09231045318360687, 0.10883657862030982, 0.10619843064470624, 0.09422396663740706, 0.13033308254007714, 0.22105011374319639, 0.20661175173966229, 0.21974954641063427, 0.2505351936138229, 0.21447749535347582, 0.2186636517311391, 0.2324285499733032, 0.23076289005563577, 0.22983244579289908, 0.6027391082549669, 0.5610413717427409, 0.623567057709738, 0.5491704987139134, 0.558674112009912, 0.5874817306722179, 0.6136604253437086, 0.581189199749078, 0.6170786330274525, 0.09194082844189866, 0.09488876173534444, 0.0997805519335363, 0.10273536666292671, 0.10278281283739621, 0.10917655600050569, 0.09450756229152668, 0.11260057735180784, 0.09944818183848836, 0.15263670540702334, 0.14150896562551696, 0.23818805323294423, 0.14873000491701693, 0.12947173568928705, 0.1287138041671877, 0.16210882459385845, 0.1352248430916454, 0.14010576931915475, 0.37193630744175776, 0.3397918809698196, 0.34326794641703506, 0.32789010427642407, 0.3441065242251954, 0.3498167253186295, 0.37470983604161645, 0.3935486482157148, 0.3773414262988214, 0.28580599875272095, 0.2789059242317087, 0.2779474666597753, 0.26031540530144326, 0.26384453281127285, 0.26426807400249375, 0.281288236625041, 0.2771840919380254, 0.28525854573971976, 0.20543250083296494, 0.20150812118311856, 0.19610180955160827, 0.25416786248849965, 0.19740127606721936, 0.1944271023232368, 0.18685000002220153, 0.1926515285067648, 0.2156532095153214, 0.2088260251531291, 0.2059872727699893, 0.19616981102656672, 0.21743329217477536, 0.1879621780988625, 0.22392268560581374, 0.20808656409198734, 0.19441866044242717, 0.195400861887282, 0.707143995336388, 0.5578112203118981, 0.7554726968968795, 0.6191751388745184, 0.6723227079996803, 0.6321754785836933, 0.169756978688544, 0.16486441555525666, 0.6693903700908764, 0.7361373393725879, 0.20223681613103506, 0.6349603286088743, 0.6037117000753107, 0.18752785632765878, 0.7017752380184341, 0.19759918321158843, 0.2063978451740761, 0.5643664936708827, 0.19435286388309037, 0.17790390921275756, 0.20033552899489315, 0.20364059884218166, 0.18252124187916108, 0.18385750509556442, 0.18580802059560642, 0.18386159035126914, 0.1967096411045357, 0.07700480264024645, 0.07853579053647541, 0.07881534829842163, 0.08003626175096301, 0.08599246980320929, 0.08431401477168965, 0.08484475249771517, 0.08144871278165444, 0.07751552888335667]}, "mutation_prompt": null}
{"id": "d827cb13-c849-4c77-8c9c-5cfd30455d58", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Adaptive Lévy Flight using Adaptive Crossover to balance exploration and exploitation.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "57eb252c-1932-49d8-b4ef-75bef71987a7", "metadata": {"aucs": [0.7189991636163604, 0.7289203557762369, 0.7315138839952812, 0.7151379010133825, 0.71651968988284, 0.7451980584096978, 0.7008481351888508, 0.7419222099720622, 0.7359334757690116, 0.43572069348115594, 0.4123743780749103, 0.46176674451437394, 0.41605345771074853, 0.4418562903423301, 0.4471258142275859, 0.43562856262455907, 0.44279574636062136, 0.41207796659173934, 0.10426023644197757, 0.10497496628457903, 0.10971029391308473, 0.1110866459230716, 0.11281587088260636, 0.11124483858622769, 0.12669892420710516, 0.1205975524177213, 0.12061379889919677, 0.10941138994156718, 0.10664870306271201, 0.11004564062661726, 0.10969763793140663, 0.10851692062678009, 0.11306844678371542, 0.10630022856835186, 0.13796790187557895, 0.10615366195813947, 0.9594824543459614, 0.8914626236479772, 0.8777901678021918, 0.8647976153223185, 0.9087075634470687, 0.8833193769658536, 0.9475166831950698, 0.944092340861552, 0.9203777945001614, 0.39342149637563784, 0.3440985019137395, 0.38516200017523683, 0.38830539891605353, 0.37459184310048255, 0.40470831271671026, 0.4058199602150384, 0.38696777485370004, 0.349839624029223, 0.7512956676166443, 0.6493791425012359, 0.7274085778298038, 0.7418623149205279, 0.7544310425200345, 0.7564318704358277, 0.7155389040599904, 0.7005271102071828, 0.6763970365882582, 0.1861382042795956, 0.2991295295548855, 0.19405934849758233, 0.21717084010136856, 0.2078806483323441, 0.17485723015092314, 0.20533846701148717, 0.23569032057684602, 0.2277930699588646, 0.25656059345325344, 0.23653545057574543, 0.1716741994651214, 0.1809327199855747, 0.17502824490747715, 0.1824140160657094, 0.17580417950912075, 0.19964929948307408, 0.20115582559563683, 0.22074147687227663, 0.21734561915784112, 0.21973769538839494, 0.2143239994606574, 0.2791251986492479, 0.19925355385259613, 0.18914997514968157, 0.2559174849532292, 0.23458640235528005, 0.43618277547135464, 0.36199147058407577, 0.373883116814973, 0.2777551973784822, 0.3076313790869185, 0.3726114519921677, 0.354581147651737, 0.40138102969122536, 0.3833729199517866, 0.061666458157776605, 0.11515424256217033, 0.06210369678012195, 0.10815359627357668, 0.09231045318360687, 0.10883657862030982, 0.10619843064470624, 0.09422396663740706, 0.13033308254007714, 0.22105011374319639, 0.20661175173966229, 0.21974954641063427, 0.2505351936138229, 0.21447749535347582, 0.2186636517311391, 0.2324285499733032, 0.23076289005563577, 0.22983244579289908, 0.6027391082549669, 0.5610413717427409, 0.623567057709738, 0.5491704987139134, 0.558674112009912, 0.5874817306722179, 0.6136604253437086, 0.581189199749078, 0.6170786330274525, 0.09194082844189866, 0.09488876173534444, 0.0997805519335363, 0.10273536666292671, 0.10278281283739621, 0.10917655600050569, 0.09450756229152668, 0.11260057735180784, 0.09944818183848836, 0.15263670540702334, 0.14150896562551696, 0.23818805323294423, 0.14873000491701693, 0.12947173568928705, 0.1287138041671877, 0.16210882459385845, 0.1352248430916454, 0.14010576931915475, 0.37193630744175776, 0.3397918809698196, 0.34326794641703506, 0.32789010427642407, 0.3441065242251954, 0.3498167253186295, 0.37470983604161645, 0.3935486482157148, 0.3773414262988214, 0.28580599875272095, 0.2789059242317087, 0.2779474666597753, 0.26031540530144326, 0.26384453281127285, 0.26426807400249375, 0.281288236625041, 0.2771840919380254, 0.28525854573971976, 0.20543250083296494, 0.20150812118311856, 0.19610180955160827, 0.25416786248849965, 0.19740127606721936, 0.1944271023232368, 0.18685000002220153, 0.1926515285067648, 0.2156532095153214, 0.2088260251531291, 0.2059872727699893, 0.19616981102656672, 0.21743329217477536, 0.1879621780988625, 0.22392268560581374, 0.20808656409198734, 0.19441866044242717, 0.195400861887282, 0.707143995336388, 0.5578112203118981, 0.7554726968968795, 0.6191751388745184, 0.6723227079996803, 0.6321754785836933, 0.169756978688544, 0.16486441555525666, 0.6693903700908764, 0.7361373393725879, 0.20223681613103506, 0.6349603286088743, 0.6037117000753107, 0.18752785632765878, 0.7017752380184341, 0.19759918321158843, 0.2063978451740761, 0.5643664936708827, 0.19435286388309037, 0.17790390921275756, 0.20033552899489315, 0.20364059884218166, 0.18252124187916108, 0.18385750509556442, 0.18580802059560642, 0.18386159035126914, 0.1967096411045357, 0.07700480264024645, 0.07853579053647541, 0.07881534829842163, 0.08003626175096301, 0.08599246980320929, 0.08431401477168965, 0.08484475249771517, 0.08144871278165444, 0.07751552888335667]}, "mutation_prompt": null}
{"id": "d1bb6f95-f421-4c09-ab1b-737aecef085b", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Adaptive Lévy Flight using Adaptive Crossover to balance exploration and exploitation.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "57eb252c-1932-49d8-b4ef-75bef71987a7", "metadata": {"aucs": [0.7189991636163604, 0.7289203557762369, 0.7315138839952812, 0.7151379010133825, 0.71651968988284, 0.7451980584096978, 0.7008481351888508, 0.7419222099720622, 0.7359334757690116, 0.43572069348115594, 0.4123743780749103, 0.46176674451437394, 0.41605345771074853, 0.4418562903423301, 0.4471258142275859, 0.43562856262455907, 0.44279574636062136, 0.41207796659173934, 0.10426023644197757, 0.10497496628457903, 0.10971029391308473, 0.1110866459230716, 0.11281587088260636, 0.11124483858622769, 0.12669892420710516, 0.1205975524177213, 0.12061379889919677, 0.10941138994156718, 0.10664870306271201, 0.11004564062661726, 0.10969763793140663, 0.10851692062678009, 0.11306844678371542, 0.10630022856835186, 0.13796790187557895, 0.10615366195813947, 0.9594824543459614, 0.8914626236479772, 0.8777901678021918, 0.8647976153223185, 0.9087075634470687, 0.8833193769658536, 0.9475166831950698, 0.944092340861552, 0.9203777945001614, 0.39342149637563784, 0.3440985019137395, 0.38516200017523683, 0.38830539891605353, 0.37459184310048255, 0.40470831271671026, 0.4058199602150384, 0.38696777485370004, 0.349839624029223, 0.7512956676166443, 0.6493791425012359, 0.7274085778298038, 0.7418623149205279, 0.7544310425200345, 0.7564318704358277, 0.7155389040599904, 0.7005271102071828, 0.6763970365882582, 0.1861382042795956, 0.2991295295548855, 0.19405934849758233, 0.21717084010136856, 0.2078806483323441, 0.17485723015092314, 0.20533846701148717, 0.23569032057684602, 0.2277930699588646, 0.25656059345325344, 0.23653545057574543, 0.1716741994651214, 0.1809327199855747, 0.17502824490747715, 0.1824140160657094, 0.17580417950912075, 0.19964929948307408, 0.20115582559563683, 0.22074147687227663, 0.21734561915784112, 0.21973769538839494, 0.2143239994606574, 0.2791251986492479, 0.19925355385259613, 0.18914997514968157, 0.2559174849532292, 0.23458640235528005, 0.43618277547135464, 0.36199147058407577, 0.373883116814973, 0.2777551973784822, 0.3076313790869185, 0.3726114519921677, 0.354581147651737, 0.40138102969122536, 0.3833729199517866, 0.061666458157776605, 0.11515424256217033, 0.06210369678012195, 0.10815359627357668, 0.09231045318360687, 0.10883657862030982, 0.10619843064470624, 0.09422396663740706, 0.13033308254007714, 0.22105011374319639, 0.20661175173966229, 0.21974954641063427, 0.2505351936138229, 0.21447749535347582, 0.2186636517311391, 0.2324285499733032, 0.23076289005563577, 0.22983244579289908, 0.6027391082549669, 0.5610413717427409, 0.623567057709738, 0.5491704987139134, 0.558674112009912, 0.5874817306722179, 0.6136604253437086, 0.581189199749078, 0.6170786330274525, 0.09194082844189866, 0.09488876173534444, 0.0997805519335363, 0.10273536666292671, 0.10278281283739621, 0.10917655600050569, 0.09450756229152668, 0.11260057735180784, 0.09944818183848836, 0.15263670540702334, 0.14150896562551696, 0.23818805323294423, 0.14873000491701693, 0.12947173568928705, 0.1287138041671877, 0.16210882459385845, 0.1352248430916454, 0.14010576931915475, 0.37193630744175776, 0.3397918809698196, 0.34326794641703506, 0.32789010427642407, 0.3441065242251954, 0.3498167253186295, 0.37470983604161645, 0.3935486482157148, 0.3773414262988214, 0.28580599875272095, 0.2789059242317087, 0.2779474666597753, 0.26031540530144326, 0.26384453281127285, 0.26426807400249375, 0.281288236625041, 0.2771840919380254, 0.28525854573971976, 0.20543250083296494, 0.20150812118311856, 0.19610180955160827, 0.25416786248849965, 0.19740127606721936, 0.1944271023232368, 0.18685000002220153, 0.1926515285067648, 0.2156532095153214, 0.2088260251531291, 0.2059872727699893, 0.19616981102656672, 0.21743329217477536, 0.1879621780988625, 0.22392268560581374, 0.20808656409198734, 0.19441866044242717, 0.195400861887282, 0.707143995336388, 0.5578112203118981, 0.7554726968968795, 0.6191751388745184, 0.6723227079996803, 0.6321754785836933, 0.169756978688544, 0.16486441555525666, 0.6693903700908764, 0.7361373393725879, 0.20223681613103506, 0.6349603286088743, 0.6037117000753107, 0.18752785632765878, 0.7017752380184341, 0.19759918321158843, 0.2063978451740761, 0.5643664936708827, 0.19435286388309037, 0.17790390921275756, 0.20033552899489315, 0.20364059884218166, 0.18252124187916108, 0.18385750509556442, 0.18580802059560642, 0.18386159035126914, 0.1967096411045357, 0.07700480264024645, 0.07853579053647541, 0.07881534829842163, 0.08003626175096301, 0.08599246980320929, 0.08431401477168965, 0.08484475249771517, 0.08144871278165444, 0.07751552888335667]}, "mutation_prompt": null}
{"id": "4040be23-f9df-4dd4-b9b1-de095db67613", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.6  # Adjusted differential weight for better exploration\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def resize_population(self, evaluations):\n        if evaluations > 0.5 * self.budget:\n            return int(0.5 * self.population_size)  # Reduce population size dynamically\n        return self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.population_size = self.resize_population(evaluations)\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced exploration by adjusting mutation strategy and employing dynamic population resizing for improved diversity.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "57eb252c-1932-49d8-b4ef-75bef71987a7", "metadata": {}, "mutation_prompt": null}
{"id": "dff7b121-509b-4cea-b230-9eef841438af", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Adaptive Lévy Flight using Adaptive Crossover to balance exploration and exploitation.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "57eb252c-1932-49d8-b4ef-75bef71987a7", "metadata": {"aucs": [0.7189991636163604, 0.7289203557762369, 0.7315138839952812, 0.7151379010133825, 0.71651968988284, 0.7451980584096978, 0.7008481351888508, 0.7419222099720622, 0.7359334757690116, 0.43572069348115594, 0.4123743780749103, 0.46176674451437394, 0.41605345771074853, 0.4418562903423301, 0.4471258142275859, 0.43562856262455907, 0.44279574636062136, 0.41207796659173934, 0.10426023644197757, 0.10497496628457903, 0.10971029391308473, 0.1110866459230716, 0.11281587088260636, 0.11124483858622769, 0.12669892420710516, 0.1205975524177213, 0.12061379889919677, 0.10941138994156718, 0.10664870306271201, 0.11004564062661726, 0.10969763793140663, 0.10851692062678009, 0.11306844678371542, 0.10630022856835186, 0.13796790187557895, 0.10615366195813947, 0.9594824543459614, 0.8914626236479772, 0.8777901678021918, 0.8647976153223185, 0.9087075634470687, 0.8833193769658536, 0.9475166831950698, 0.944092340861552, 0.9203777945001614, 0.39342149637563784, 0.3440985019137395, 0.38516200017523683, 0.38830539891605353, 0.37459184310048255, 0.40470831271671026, 0.4058199602150384, 0.38696777485370004, 0.349839624029223, 0.7512956676166443, 0.6493791425012359, 0.7274085778298038, 0.7418623149205279, 0.7544310425200345, 0.7564318704358277, 0.7155389040599904, 0.7005271102071828, 0.6763970365882582, 0.1861382042795956, 0.2991295295548855, 0.19405934849758233, 0.21717084010136856, 0.2078806483323441, 0.17485723015092314, 0.20533846701148717, 0.23569032057684602, 0.2277930699588646, 0.25656059345325344, 0.23653545057574543, 0.1716741994651214, 0.1809327199855747, 0.17502824490747715, 0.1824140160657094, 0.17580417950912075, 0.19964929948307408, 0.20115582559563683, 0.22074147687227663, 0.21734561915784112, 0.21973769538839494, 0.2143239994606574, 0.2791251986492479, 0.19925355385259613, 0.18914997514968157, 0.2559174849532292, 0.23458640235528005, 0.43618277547135464, 0.36199147058407577, 0.373883116814973, 0.2777551973784822, 0.3076313790869185, 0.3726114519921677, 0.354581147651737, 0.40138102969122536, 0.3833729199517866, 0.061666458157776605, 0.11515424256217033, 0.06210369678012195, 0.10815359627357668, 0.09231045318360687, 0.10883657862030982, 0.10619843064470624, 0.09422396663740706, 0.13033308254007714, 0.22105011374319639, 0.20661175173966229, 0.21974954641063427, 0.2505351936138229, 0.21447749535347582, 0.2186636517311391, 0.2324285499733032, 0.23076289005563577, 0.22983244579289908, 0.6027391082549669, 0.5610413717427409, 0.623567057709738, 0.5491704987139134, 0.558674112009912, 0.5874817306722179, 0.6136604253437086, 0.581189199749078, 0.6170786330274525, 0.09194082844189866, 0.09488876173534444, 0.0997805519335363, 0.10273536666292671, 0.10278281283739621, 0.10917655600050569, 0.09450756229152668, 0.11260057735180784, 0.09944818183848836, 0.15263670540702334, 0.14150896562551696, 0.23818805323294423, 0.14873000491701693, 0.12947173568928705, 0.1287138041671877, 0.16210882459385845, 0.1352248430916454, 0.14010576931915475, 0.37193630744175776, 0.3397918809698196, 0.34326794641703506, 0.32789010427642407, 0.3441065242251954, 0.3498167253186295, 0.37470983604161645, 0.3935486482157148, 0.3773414262988214, 0.28580599875272095, 0.2789059242317087, 0.2779474666597753, 0.26031540530144326, 0.26384453281127285, 0.26426807400249375, 0.281288236625041, 0.2771840919380254, 0.28525854573971976, 0.20543250083296494, 0.20150812118311856, 0.19610180955160827, 0.25416786248849965, 0.19740127606721936, 0.1944271023232368, 0.18685000002220153, 0.1926515285067648, 0.2156532095153214, 0.2088260251531291, 0.2059872727699893, 0.19616981102656672, 0.21743329217477536, 0.1879621780988625, 0.22392268560581374, 0.20808656409198734, 0.19441866044242717, 0.195400861887282, 0.707143995336388, 0.5578112203118981, 0.7554726968968795, 0.6191751388745184, 0.6723227079996803, 0.6321754785836933, 0.169756978688544, 0.16486441555525666, 0.6693903700908764, 0.7361373393725879, 0.20223681613103506, 0.6349603286088743, 0.6037117000753107, 0.18752785632765878, 0.7017752380184341, 0.19759918321158843, 0.2063978451740761, 0.5643664936708827, 0.19435286388309037, 0.17790390921275756, 0.20033552899489315, 0.20364059884218166, 0.18252124187916108, 0.18385750509556442, 0.18580802059560642, 0.18386159035126914, 0.1967096411045357, 0.07700480264024645, 0.07853579053647541, 0.07881534829842163, 0.08003626175096301, 0.08599246980320929, 0.08431401477168965, 0.08484475249771517, 0.08144871278165444, 0.07751552888335667]}, "mutation_prompt": null}
{"id": "aff886ec-787a-455b-88bb-4c6eecd9d3ea", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Adaptive Lévy Flight using Adaptive Crossover to balance exploration and exploitation.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "57eb252c-1932-49d8-b4ef-75bef71987a7", "metadata": {"aucs": [0.7189991636163604, 0.7289203557762369, 0.7315138839952812, 0.7151379010133825, 0.71651968988284, 0.7451980584096978, 0.7008481351888508, 0.7419222099720622, 0.7359334757690116, 0.43572069348115594, 0.4123743780749103, 0.46176674451437394, 0.41605345771074853, 0.4418562903423301, 0.4471258142275859, 0.43562856262455907, 0.44279574636062136, 0.41207796659173934, 0.10426023644197757, 0.10497496628457903, 0.10971029391308473, 0.1110866459230716, 0.11281587088260636, 0.11124483858622769, 0.12669892420710516, 0.1205975524177213, 0.12061379889919677, 0.10941138994156718, 0.10664870306271201, 0.11004564062661726, 0.10969763793140663, 0.10851692062678009, 0.11306844678371542, 0.10630022856835186, 0.13796790187557895, 0.10615366195813947, 0.9594824543459614, 0.8914626236479772, 0.8777901678021918, 0.8647976153223185, 0.9087075634470687, 0.8833193769658536, 0.9475166831950698, 0.944092340861552, 0.9203777945001614, 0.39342149637563784, 0.3440985019137395, 0.38516200017523683, 0.38830539891605353, 0.37459184310048255, 0.40470831271671026, 0.4058199602150384, 0.38696777485370004, 0.349839624029223, 0.7512956676166443, 0.6493791425012359, 0.7274085778298038, 0.7418623149205279, 0.7544310425200345, 0.7564318704358277, 0.7155389040599904, 0.7005271102071828, 0.6763970365882582, 0.1861382042795956, 0.2991295295548855, 0.19405934849758233, 0.21717084010136856, 0.2078806483323441, 0.17485723015092314, 0.20533846701148717, 0.23569032057684602, 0.2277930699588646, 0.25656059345325344, 0.23653545057574543, 0.1716741994651214, 0.1809327199855747, 0.17502824490747715, 0.1824140160657094, 0.17580417950912075, 0.19964929948307408, 0.20115582559563683, 0.22074147687227663, 0.21734561915784112, 0.21973769538839494, 0.2143239994606574, 0.2791251986492479, 0.19925355385259613, 0.18914997514968157, 0.2559174849532292, 0.23458640235528005, 0.43618277547135464, 0.36199147058407577, 0.373883116814973, 0.2777551973784822, 0.3076313790869185, 0.3726114519921677, 0.354581147651737, 0.40138102969122536, 0.3833729199517866, 0.061666458157776605, 0.11515424256217033, 0.06210369678012195, 0.10815359627357668, 0.09231045318360687, 0.10883657862030982, 0.10619843064470624, 0.09422396663740706, 0.13033308254007714, 0.22105011374319639, 0.20661175173966229, 0.21974954641063427, 0.2505351936138229, 0.21447749535347582, 0.2186636517311391, 0.2324285499733032, 0.23076289005563577, 0.22983244579289908, 0.6027391082549669, 0.5610413717427409, 0.623567057709738, 0.5491704987139134, 0.558674112009912, 0.5874817306722179, 0.6136604253437086, 0.581189199749078, 0.6170786330274525, 0.09194082844189866, 0.09488876173534444, 0.0997805519335363, 0.10273536666292671, 0.10278281283739621, 0.10917655600050569, 0.09450756229152668, 0.11260057735180784, 0.09944818183848836, 0.15263670540702334, 0.14150896562551696, 0.23818805323294423, 0.14873000491701693, 0.12947173568928705, 0.1287138041671877, 0.16210882459385845, 0.1352248430916454, 0.14010576931915475, 0.37193630744175776, 0.3397918809698196, 0.34326794641703506, 0.32789010427642407, 0.3441065242251954, 0.3498167253186295, 0.37470983604161645, 0.3935486482157148, 0.3773414262988214, 0.28580599875272095, 0.2789059242317087, 0.2779474666597753, 0.26031540530144326, 0.26384453281127285, 0.26426807400249375, 0.281288236625041, 0.2771840919380254, 0.28525854573971976, 0.20543250083296494, 0.20150812118311856, 0.19610180955160827, 0.25416786248849965, 0.19740127606721936, 0.1944271023232368, 0.18685000002220153, 0.1926515285067648, 0.2156532095153214, 0.2088260251531291, 0.2059872727699893, 0.19616981102656672, 0.21743329217477536, 0.1879621780988625, 0.22392268560581374, 0.20808656409198734, 0.19441866044242717, 0.195400861887282, 0.707143995336388, 0.5578112203118981, 0.7554726968968795, 0.6191751388745184, 0.6723227079996803, 0.6321754785836933, 0.169756978688544, 0.16486441555525666, 0.6693903700908764, 0.7361373393725879, 0.20223681613103506, 0.6349603286088743, 0.6037117000753107, 0.18752785632765878, 0.7017752380184341, 0.19759918321158843, 0.2063978451740761, 0.5643664936708827, 0.19435286388309037, 0.17790390921275756, 0.20033552899489315, 0.20364059884218166, 0.18252124187916108, 0.18385750509556442, 0.18580802059560642, 0.18386159035126914, 0.1967096411045357, 0.07700480264024645, 0.07853579053647541, 0.07881534829842163, 0.08003626175096301, 0.08599246980320929, 0.08431401477168965, 0.08484475249771517, 0.08144871278165444, 0.07751552888335667]}, "mutation_prompt": null}
{"id": "e9a70c79-b34b-4798-8cba-edfb2faffdfb", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Dynamic Population Resizing and Adaptive Lévy Flight for improved exploration and exploitation balance.", "configspace": "", "generation": 39, "fitness": 0.33098407383227063, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "57eb252c-1932-49d8-b4ef-75bef71987a7", "metadata": {"aucs": [0.8423083104552814, 0.8414894853452665, 0.7572757087526804, 0.8501869575436714, 0.8490598733915985, 0.8514482915327664, 0.8501605542866961, 0.6326767482914248, 0.7437307147580567, 0.7447674794428918, 0.18804445968121464, 0.39585215038079846, 0.3672404931304364, 0.3156835659858841, 0.3833439073535997, 0.4617098990269456, 0.7612102724436802, 0.26835818743387807, 0.155580244188661, 0.16850350574148, 0.19444066099134838, 0.13259319908600387, 0.13433035367414892, 0.1558059763390549, 0.16255414856443529, 0.3804730968869955, 0.16920011394430134, 0.13047054205320874, 0.11950024410057247, 0.15205038462428278, 0.10585870100767147, 0.11823552186695996, 0.12528044611016775, 0.12745419227815746, 0.14129883329606396, 0.14429126368762735, 0.9594824543459614, 0.88980684948649, 0.897391741777074, 0.9020519339975598, 0.8820040634032221, 0.9070440060636102, 0.9475166831950698, 0.944092340861552, 0.9075774645702067, 0.3311356794235415, 0.37076343449615967, 0.41525098117908454, 0.31400073310363463, 0.3355144325756302, 0.3732667324414596, 0.42996541193234883, 0.3827696997970791, 0.4268685029387924, 0.8300002097971663, 0.8315129210936966, 0.38112136007384645, 0.8308408079731613, 0.8065275977357724, 0.2653742477171289, 0.8210915024241701, 0.36430698895704305, 0.8281936441030181, 0.18955992883762762, 0.2387532213526562, 0.185871919394903, 0.1656109315434916, 0.19721358105357223, 0.1854100637491124, 0.15589744189225951, 0.17753695371042377, 0.21448530938547505, 0.2147746757431559, 0.17357080511639633, 0.16290610589248078, 0.19069884459112363, 0.2544527841881684, 0.17891289659951448, 0.12784591410367863, 0.2087533074617003, 0.1832245451819754, 0.14965784182241282, 0.11619960335969304, 0.11958211247230333, 0.1533803981834495, 0.15187297874803518, 0.10207895903749231, 0.09179113533559735, 0.18823004591199066, 0.0910899491556818, 0.2630188986625772, 0.26715019539248996, 0.20140577951865535, 0.1121684517760656, 0.14825970656791687, 0.24895746789702944, 0.32309597419913794, 0.19199160806473514, 0.28758937030065335, 0.14251083334519787, 0.10214210216362951, 0.0775136024204357, 0.10357789713776833, 0.16245943965245546, 0.15445863050968933, 0.12294786072553887, 0.11556059667761143, 0.19435301995510867, 0.26865795462561537, 0.3379438053058581, 0.41807798011147856, 0.2783848712246708, 0.3001627841716652, 0.24858000095693444, 0.3077937408252813, 0.28124529320948877, 0.2989944098857241, 0.5229135819398076, 0.5197362420445923, 0.6079537755029729, 0.4668000193258036, 0.5166453714937405, 0.6091593635612211, 0.5327931923209295, 0.49707995280921846, 0.5883385228054315, 0.13759369669359256, 0.11548231060407887, 0.11139242571412722, 0.15255331527000848, 0.14520634093503582, 0.12880333092008134, 0.10376731321720922, 0.14303745967569303, 0.1264717941302006, 0.29110282656718844, 0.21983260433121288, 0.33136968415812285, 0.20461955857542757, 0.16494108094775695, 0.24056306110151626, 0.24249700390772855, 0.1833718358394988, 0.2369439206949635, 0.454137779507125, 0.4360569117018934, 0.3607238085214921, 0.43475495065005876, 0.4192135950192559, 0.46322032865037255, 0.3345050182746442, 0.3841067525634475, 0.40871186837821827, 0.332292734840373, 0.3259414127428557, 0.3661991826386064, 0.3470622071225289, 0.3598538042699403, 0.35676982010794234, 0.3588826094858414, 0.3638111635324961, 0.33563448852708777, 0.2088078428351715, 0.21763854587987985, 0.1802475308613284, 0.25416786248849965, 0.2210873085473537, 0.24214315431894762, 0.22588711275519568, 0.1928996285654142, 0.23951541474071414, 0.21788030282360504, 0.20787757822499286, 0.523177981213969, 0.44063792834456605, 0.2155660284757014, 0.2058826100027037, 0.36779178156248415, 0.23360268005028806, 0.4380056732283988, 0.7524733402234386, 0.17705222811276, 0.6894775008311387, 0.7701134356446881, 0.585469564924999, 0.7495331783584536, 0.1677398663664802, 0.2063041391033933, 0.7937067066134693, 0.16595762566754235, 0.2023653061743652, 0.2068227362142403, 0.20200473581553546, 0.1984055001560956, 0.18987948730504045, 0.15190658860262085, 0.20651517790779195, 0.6816901112483296, 0.18083666506253948, 0.18010381227514372, 0.19209026228623194, 0.20762579982382756, 0.19133005582123863, 0.1905240807280253, 0.2047667531297711, 0.19386125513477026, 0.2296979267958269, 0.08517837821890006, 0.09567252724684694, 0.0863133963634165, 0.08836877393363862, 0.08782624714873821, 0.0894545370918679, 0.08106642794469188, 0.07832600209439644, 0.09012938861046937]}, "mutation_prompt": null}
{"id": "232868d4-02af-40f1-b80c-c926638e88c5", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Dynamic Population Resizing and Adaptive Lévy Flight for improved exploration and exploitation balance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e9a70c79-b34b-4798-8cba-edfb2faffdfb", "metadata": {"aucs": [0.8423083104552814, 0.8414894853452665, 0.7572757087526804, 0.8501869575436714, 0.8490598733915985, 0.8514482915327664, 0.8501605542866961, 0.6326767482914248, 0.7437307147580567, 0.7447674794428918, 0.18804445968121464, 0.39585215038079846, 0.3672404931304364, 0.3156835659858841, 0.3833439073535997, 0.4617098990269456, 0.7612102724436802, 0.26835818743387807, 0.155580244188661, 0.16850350574148, 0.19444066099134838, 0.13259319908600387, 0.13433035367414892, 0.1558059763390549, 0.16255414856443529, 0.3804730968869955, 0.16920011394430134, 0.13047054205320874, 0.11950024410057247, 0.15205038462428278, 0.10585870100767147, 0.11823552186695996, 0.12528044611016775, 0.12745419227815746, 0.14129883329606396, 0.14429126368762735, 0.9594824543459614, 0.88980684948649, 0.897391741777074, 0.9020519339975598, 0.8820040634032221, 0.9070440060636102, 0.9475166831950698, 0.944092340861552, 0.9075774645702067, 0.3311356794235415, 0.37076343449615967, 0.41525098117908454, 0.31400073310363463, 0.3355144325756302, 0.3732667324414596, 0.42996541193234883, 0.3827696997970791, 0.4268685029387924, 0.8300002097971663, 0.8315129210936966, 0.38112136007384645, 0.8308408079731613, 0.8065275977357724, 0.2653742477171289, 0.8210915024241701, 0.36430698895704305, 0.8281936441030181, 0.18955992883762762, 0.2387532213526562, 0.185871919394903, 0.1656109315434916, 0.19721358105357223, 0.1854100637491124, 0.15589744189225951, 0.17753695371042377, 0.21448530938547505, 0.2147746757431559, 0.17357080511639633, 0.16290610589248078, 0.19069884459112363, 0.2544527841881684, 0.17891289659951448, 0.12784591410367863, 0.2087533074617003, 0.1832245451819754, 0.14965784182241282, 0.11619960335969304, 0.11958211247230333, 0.1533803981834495, 0.15187297874803518, 0.10207895903749231, 0.09179113533559735, 0.18823004591199066, 0.0910899491556818, 0.2630188986625772, 0.26715019539248996, 0.20140577951865535, 0.1121684517760656, 0.14825970656791687, 0.24895746789702944, 0.32309597419913794, 0.19199160806473514, 0.28758937030065335, 0.14251083334519787, 0.10214210216362951, 0.0775136024204357, 0.10357789713776833, 0.16245943965245546, 0.15445863050968933, 0.12294786072553887, 0.11556059667761143, 0.19435301995510867, 0.26865795462561537, 0.3379438053058581, 0.41807798011147856, 0.2783848712246708, 0.3001627841716652, 0.24858000095693444, 0.3077937408252813, 0.28124529320948877, 0.2989944098857241, 0.5229135819398076, 0.5197362420445923, 0.6079537755029729, 0.4668000193258036, 0.5166453714937405, 0.6091593635612211, 0.5327931923209295, 0.49707995280921846, 0.5883385228054315, 0.13759369669359256, 0.11548231060407887, 0.11139242571412722, 0.15255331527000848, 0.14520634093503582, 0.12880333092008134, 0.10376731321720922, 0.14303745967569303, 0.1264717941302006, 0.29110282656718844, 0.21983260433121288, 0.33136968415812285, 0.20461955857542757, 0.16494108094775695, 0.24056306110151626, 0.24249700390772855, 0.1833718358394988, 0.2369439206949635, 0.454137779507125, 0.4360569117018934, 0.3607238085214921, 0.43475495065005876, 0.4192135950192559, 0.46322032865037255, 0.3345050182746442, 0.3841067525634475, 0.40871186837821827, 0.332292734840373, 0.3259414127428557, 0.3661991826386064, 0.3470622071225289, 0.3598538042699403, 0.35676982010794234, 0.3588826094858414, 0.3638111635324961, 0.33563448852708777, 0.2088078428351715, 0.21763854587987985, 0.1802475308613284, 0.25416786248849965, 0.2210873085473537, 0.24214315431894762, 0.22588711275519568, 0.1928996285654142, 0.23951541474071414, 0.21788030282360504, 0.20787757822499286, 0.523177981213969, 0.44063792834456605, 0.2155660284757014, 0.2058826100027037, 0.36779178156248415, 0.23360268005028806, 0.4380056732283988, 0.7524733402234386, 0.17705222811276, 0.6894775008311387, 0.7701134356446881, 0.585469564924999, 0.7495331783584536, 0.1677398663664802, 0.2063041391033933, 0.7937067066134693, 0.16595762566754235, 0.2023653061743652, 0.2068227362142403, 0.20200473581553546, 0.1984055001560956, 0.18987948730504045, 0.15190658860262085, 0.20651517790779195, 0.6816901112483296, 0.18083666506253948, 0.18010381227514372, 0.19209026228623194, 0.20762579982382756, 0.19133005582123863, 0.1905240807280253, 0.2047667531297711, 0.19386125513477026, 0.2296979267958269, 0.08517837821890006, 0.09567252724684694, 0.0863133963634165, 0.08836877393363862, 0.08782624714873821, 0.0894545370918679, 0.08106642794469188, 0.07832600209439644, 0.09012938861046937]}, "mutation_prompt": null}
{"id": "2ed24acf-0458-494b-aad0-9d0c52e7a575", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Dynamic Population Resizing and Adaptive Lévy Flight for improved exploration and exploitation balance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e9a70c79-b34b-4798-8cba-edfb2faffdfb", "metadata": {"aucs": [0.8423083104552814, 0.8414894853452665, 0.7572757087526804, 0.8501869575436714, 0.8490598733915985, 0.8514482915327664, 0.8501605542866961, 0.6326767482914248, 0.7437307147580567, 0.7447674794428918, 0.18804445968121464, 0.39585215038079846, 0.3672404931304364, 0.3156835659858841, 0.3833439073535997, 0.4617098990269456, 0.7612102724436802, 0.26835818743387807, 0.155580244188661, 0.16850350574148, 0.19444066099134838, 0.13259319908600387, 0.13433035367414892, 0.1558059763390549, 0.16255414856443529, 0.3804730968869955, 0.16920011394430134, 0.13047054205320874, 0.11950024410057247, 0.15205038462428278, 0.10585870100767147, 0.11823552186695996, 0.12528044611016775, 0.12745419227815746, 0.14129883329606396, 0.14429126368762735, 0.9594824543459614, 0.88980684948649, 0.897391741777074, 0.9020519339975598, 0.8820040634032221, 0.9070440060636102, 0.9475166831950698, 0.944092340861552, 0.9075774645702067, 0.3311356794235415, 0.37076343449615967, 0.41525098117908454, 0.31400073310363463, 0.3355144325756302, 0.3732667324414596, 0.42996541193234883, 0.3827696997970791, 0.4268685029387924, 0.8300002097971663, 0.8315129210936966, 0.38112136007384645, 0.8308408079731613, 0.8065275977357724, 0.2653742477171289, 0.8210915024241701, 0.36430698895704305, 0.8281936441030181, 0.18955992883762762, 0.2387532213526562, 0.185871919394903, 0.1656109315434916, 0.19721358105357223, 0.1854100637491124, 0.15589744189225951, 0.17753695371042377, 0.21448530938547505, 0.2147746757431559, 0.17357080511639633, 0.16290610589248078, 0.19069884459112363, 0.2544527841881684, 0.17891289659951448, 0.12784591410367863, 0.2087533074617003, 0.1832245451819754, 0.14965784182241282, 0.11619960335969304, 0.11958211247230333, 0.1533803981834495, 0.15187297874803518, 0.10207895903749231, 0.09179113533559735, 0.18823004591199066, 0.0910899491556818, 0.2630188986625772, 0.26715019539248996, 0.20140577951865535, 0.1121684517760656, 0.14825970656791687, 0.24895746789702944, 0.32309597419913794, 0.19199160806473514, 0.28758937030065335, 0.14251083334519787, 0.10214210216362951, 0.0775136024204357, 0.10357789713776833, 0.16245943965245546, 0.15445863050968933, 0.12294786072553887, 0.11556059667761143, 0.19435301995510867, 0.26865795462561537, 0.3379438053058581, 0.41807798011147856, 0.2783848712246708, 0.3001627841716652, 0.24858000095693444, 0.3077937408252813, 0.28124529320948877, 0.2989944098857241, 0.5229135819398076, 0.5197362420445923, 0.6079537755029729, 0.4668000193258036, 0.5166453714937405, 0.6091593635612211, 0.5327931923209295, 0.49707995280921846, 0.5883385228054315, 0.13759369669359256, 0.11548231060407887, 0.11139242571412722, 0.15255331527000848, 0.14520634093503582, 0.12880333092008134, 0.10376731321720922, 0.14303745967569303, 0.1264717941302006, 0.29110282656718844, 0.21983260433121288, 0.33136968415812285, 0.20461955857542757, 0.16494108094775695, 0.24056306110151626, 0.24249700390772855, 0.1833718358394988, 0.2369439206949635, 0.454137779507125, 0.4360569117018934, 0.3607238085214921, 0.43475495065005876, 0.4192135950192559, 0.46322032865037255, 0.3345050182746442, 0.3841067525634475, 0.40871186837821827, 0.332292734840373, 0.3259414127428557, 0.3661991826386064, 0.3470622071225289, 0.3598538042699403, 0.35676982010794234, 0.3588826094858414, 0.3638111635324961, 0.33563448852708777, 0.2088078428351715, 0.21763854587987985, 0.1802475308613284, 0.25416786248849965, 0.2210873085473537, 0.24214315431894762, 0.22588711275519568, 0.1928996285654142, 0.23951541474071414, 0.21788030282360504, 0.20787757822499286, 0.523177981213969, 0.44063792834456605, 0.2155660284757014, 0.2058826100027037, 0.36779178156248415, 0.23360268005028806, 0.4380056732283988, 0.7524733402234386, 0.17705222811276, 0.6894775008311387, 0.7701134356446881, 0.585469564924999, 0.7495331783584536, 0.1677398663664802, 0.2063041391033933, 0.7937067066134693, 0.16595762566754235, 0.2023653061743652, 0.2068227362142403, 0.20200473581553546, 0.1984055001560956, 0.18987948730504045, 0.15190658860262085, 0.20651517790779195, 0.6816901112483296, 0.18083666506253948, 0.18010381227514372, 0.19209026228623194, 0.20762579982382756, 0.19133005582123863, 0.1905240807280253, 0.2047667531297711, 0.19386125513477026, 0.2296979267958269, 0.08517837821890006, 0.09567252724684694, 0.0863133963634165, 0.08836877393363862, 0.08782624714873821, 0.0894545370918679, 0.08106642794469188, 0.07832600209439644, 0.09012938861046937]}, "mutation_prompt": null}
{"id": "9975e889-7566-4a74-b16f-3e21416cd429", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                F_adaptive = self.F + 0.1 * (np.random.rand() - 0.5)  # Adaptive Mutation Scale\n                mutant = population[a] + F_adaptive * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    L_adaptive = 0.01 + 0.01 * evaluations / self.budget  # Enhanced Lévy Parameter\n                    trial += self.levy_flight(L_adaptive * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Introducing Adaptive Mutation Scale and Enhanced Lévy Parameter Tuning in Hybrid Differential Evolution for improved exploration and convergence.", "configspace": "", "generation": 42, "fitness": 0.3262169759730445, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.23.", "error": "", "parent_id": "e9a70c79-b34b-4798-8cba-edfb2faffdfb", "metadata": {"aucs": [0.6963010266429033, 0.7552865721411752, 0.6475311496326686, 0.8471160075561177, 0.6550270798429003, 0.840627775196212, 0.7488452411773197, 0.6575968501714531, 0.7861520837691718, 0.23191278541152205, 0.3661434571545932, 0.3750635364438464, 0.6108439705984163, 0.5859984387233855, 0.5433916712146727, 0.4857844945317188, 0.3207948521974766, 0.23969614208299816, 0.1557733519331157, 0.15736383424729616, 0.14467349060775248, 0.14916490375664215, 0.21004944841565898, 0.13786717943292148, 0.14553422438908525, 0.19786688962897703, 0.12806600955766367, 0.12831851570168606, 0.13857608412853373, 0.1394530197177657, 0.1223537224588519, 0.1363549947671885, 0.1328597881186624, 0.12377147794337162, 0.11952267738010047, 0.13991799195986676, 0.9232493010588302, 0.9335294537763386, 0.9051475567112187, 0.9308618670674152, 0.9405053751768939, 0.911171014559292, 0.9058390720440357, 0.9220473425648958, 0.9796356935678072, 0.3630567892784812, 0.3334250747426669, 0.323014427879858, 0.34601934245555055, 0.34708138449856907, 0.3615088456802148, 0.3889554534849857, 0.3220801326813627, 0.31110035653718116, 0.8536980550948746, 0.8318912505383468, 0.8263794493483632, 0.8276541885017072, 0.38489845324130356, 0.2667484114081311, 0.37444848011697907, 0.35717095423058665, 0.8251472380020236, 0.20465666478525368, 0.20182727678848855, 0.1653742661015507, 0.23253397501085815, 0.15603968276085745, 0.15410216198761684, 0.1545609047165306, 0.17603716262525104, 0.22798226362305352, 0.3262129073801324, 0.18930472354933991, 0.18284602060023314, 0.18599374666876756, 0.2346870583295848, 0.17413022553564783, 0.1688520839032519, 0.16304483958899507, 0.1602094790514409, 0.09944256502376536, 0.1426029842421982, 0.17958691132692584, 0.226826232821282, 0.11187927407662823, 0.1327658268040286, 0.15304103273292002, 0.182943061192686, 0.13237270225638498, 0.24708206537562194, 0.20394923303379298, 0.19635552483908425, 0.20601558205533033, 0.30966765395803575, 0.23349810512372127, 0.1830463825699593, 0.3901076843682032, 0.18667398178294747, 0.14944468260256905, 0.2845121706227143, 0.07533878628009805, 0.1244793920179591, 0.07373766748642097, 0.0927979924010246, 0.14827606061973952, 0.11009019287110422, 0.12276610721933723, 0.26480696740630094, 0.25783305291410485, 0.28867127494953115, 0.17974129334389377, 0.21673960215381005, 0.1941131873788532, 0.2584235729186646, 0.2979640936884438, 0.39805769418552106, 0.59041301837949, 0.5154928153320804, 0.5527328230110273, 0.509479083633863, 0.560608921741206, 0.5817751118289001, 0.6011918499578509, 0.5429643639685569, 0.5704299946238853, 0.11223938512558884, 0.13768094652736962, 0.12618251986292983, 0.12855180857496784, 0.12753807612269175, 0.12814468658598344, 0.12365423419080002, 0.1257946461335694, 0.1415442074676797, 0.18717381055242444, 0.18097498280249125, 0.228552669177032, 0.22221467744040946, 0.27176577587082573, 0.19739044538070583, 0.23436986109203384, 0.5223792974044922, 0.21618589507416952, 0.39782760374132065, 0.4041483557887616, 0.39774421165434537, 0.49672994561019024, 0.39830653109389613, 0.4170944430301776, 0.35081011764731285, 0.40249914067805526, 0.44285154693550854, 0.31983772290198165, 0.2829181212382246, 0.3805724851436536, 0.32500686323082684, 0.28978046329170026, 0.3151098088214854, 0.3028454571170891, 0.45385072581955355, 0.3250356097301378, 0.2137643973385439, 0.19436849048205784, 0.1910021182780679, 0.20101638108609243, 0.21186622232894758, 0.20453095552538536, 0.24449054756752764, 0.23232987274802686, 0.2015960342861547, 0.45486864386684733, 0.3242551609726372, 0.20290791359595883, 0.3129419834174795, 0.20050519647313847, 0.22473515780304432, 0.279195868580852, 0.22622565977104847, 0.21503821444434457, 0.1689484907976666, 0.1814909852533737, 0.8528262647887754, 0.8165979733457334, 0.7680225793168376, 0.6262119443525336, 0.7891507916138221, 0.15943083728339535, 0.1645023931301266, 0.8550699476953626, 0.20348920178325136, 0.6325801107260511, 0.2042749923471877, 0.2041002699409089, 0.5865112861678257, 0.20564263031317154, 0.21045530654536648, 0.2089464867494386, 0.1919580064966614, 0.18923153114619296, 0.17919192888217783, 0.18777175111718225, 0.17272550184645752, 0.19343444128185028, 0.18370405599209538, 0.38226301264897167, 0.1910672587504123, 0.07730831564171547, 0.08148668455971331, 0.08510303364041427, 0.08627661848155677, 0.08977288341615475, 0.09242746909620181, 0.08652579741569466, 0.08109792941628491, 0.08532247776159751]}, "mutation_prompt": null}
{"id": "967e7517-b926-45fd-8b76-d7445d453481", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Dynamic Population Resizing and Adaptive Lévy Flight for improved exploration and exploitation balance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e9a70c79-b34b-4798-8cba-edfb2faffdfb", "metadata": {"aucs": [0.8423083104552814, 0.8414894853452665, 0.7572757087526804, 0.8501869575436714, 0.8490598733915985, 0.8514482915327664, 0.8501605542866961, 0.6326767482914248, 0.7437307147580567, 0.7447674794428918, 0.18804445968121464, 0.39585215038079846, 0.3672404931304364, 0.3156835659858841, 0.3833439073535997, 0.4617098990269456, 0.7612102724436802, 0.26835818743387807, 0.155580244188661, 0.16850350574148, 0.19444066099134838, 0.13259319908600387, 0.13433035367414892, 0.1558059763390549, 0.16255414856443529, 0.3804730968869955, 0.16920011394430134, 0.13047054205320874, 0.11950024410057247, 0.15205038462428278, 0.10585870100767147, 0.11823552186695996, 0.12528044611016775, 0.12745419227815746, 0.14129883329606396, 0.14429126368762735, 0.9594824543459614, 0.88980684948649, 0.897391741777074, 0.9020519339975598, 0.8820040634032221, 0.9070440060636102, 0.9475166831950698, 0.944092340861552, 0.9075774645702067, 0.3311356794235415, 0.37076343449615967, 0.41525098117908454, 0.31400073310363463, 0.3355144325756302, 0.3732667324414596, 0.42996541193234883, 0.3827696997970791, 0.4268685029387924, 0.8300002097971663, 0.8315129210936966, 0.38112136007384645, 0.8308408079731613, 0.8065275977357724, 0.2653742477171289, 0.8210915024241701, 0.36430698895704305, 0.8281936441030181, 0.18955992883762762, 0.2387532213526562, 0.185871919394903, 0.1656109315434916, 0.19721358105357223, 0.1854100637491124, 0.15589744189225951, 0.17753695371042377, 0.21448530938547505, 0.2147746757431559, 0.17357080511639633, 0.16290610589248078, 0.19069884459112363, 0.2544527841881684, 0.17891289659951448, 0.12784591410367863, 0.2087533074617003, 0.1832245451819754, 0.14965784182241282, 0.11619960335969304, 0.11958211247230333, 0.1533803981834495, 0.15187297874803518, 0.10207895903749231, 0.09179113533559735, 0.18823004591199066, 0.0910899491556818, 0.2630188986625772, 0.26715019539248996, 0.20140577951865535, 0.1121684517760656, 0.14825970656791687, 0.24895746789702944, 0.32309597419913794, 0.19199160806473514, 0.28758937030065335, 0.14251083334519787, 0.10214210216362951, 0.0775136024204357, 0.10357789713776833, 0.16245943965245546, 0.15445863050968933, 0.12294786072553887, 0.11556059667761143, 0.19435301995510867, 0.26865795462561537, 0.3379438053058581, 0.41807798011147856, 0.2783848712246708, 0.3001627841716652, 0.24858000095693444, 0.3077937408252813, 0.28124529320948877, 0.2989944098857241, 0.5229135819398076, 0.5197362420445923, 0.6079537755029729, 0.4668000193258036, 0.5166453714937405, 0.6091593635612211, 0.5327931923209295, 0.49707995280921846, 0.5883385228054315, 0.13759369669359256, 0.11548231060407887, 0.11139242571412722, 0.15255331527000848, 0.14520634093503582, 0.12880333092008134, 0.10376731321720922, 0.14303745967569303, 0.1264717941302006, 0.29110282656718844, 0.21983260433121288, 0.33136968415812285, 0.20461955857542757, 0.16494108094775695, 0.24056306110151626, 0.24249700390772855, 0.1833718358394988, 0.2369439206949635, 0.454137779507125, 0.4360569117018934, 0.3607238085214921, 0.43475495065005876, 0.4192135950192559, 0.46322032865037255, 0.3345050182746442, 0.3841067525634475, 0.40871186837821827, 0.332292734840373, 0.3259414127428557, 0.3661991826386064, 0.3470622071225289, 0.3598538042699403, 0.35676982010794234, 0.3588826094858414, 0.3638111635324961, 0.33563448852708777, 0.2088078428351715, 0.21763854587987985, 0.1802475308613284, 0.25416786248849965, 0.2210873085473537, 0.24214315431894762, 0.22588711275519568, 0.1928996285654142, 0.23951541474071414, 0.21788030282360504, 0.20787757822499286, 0.523177981213969, 0.44063792834456605, 0.2155660284757014, 0.2058826100027037, 0.36779178156248415, 0.23360268005028806, 0.4380056732283988, 0.7524733402234386, 0.17705222811276, 0.6894775008311387, 0.7701134356446881, 0.585469564924999, 0.7495331783584536, 0.1677398663664802, 0.2063041391033933, 0.7937067066134693, 0.16595762566754235, 0.2023653061743652, 0.2068227362142403, 0.20200473581553546, 0.1984055001560956, 0.18987948730504045, 0.15190658860262085, 0.20651517790779195, 0.6816901112483296, 0.18083666506253948, 0.18010381227514372, 0.19209026228623194, 0.20762579982382756, 0.19133005582123863, 0.1905240807280253, 0.2047667531297711, 0.19386125513477026, 0.2296979267958269, 0.08517837821890006, 0.09567252724684694, 0.0863133963634165, 0.08836877393363862, 0.08782624714873821, 0.0894545370918679, 0.08106642794469188, 0.07832600209439644, 0.09012938861046937]}, "mutation_prompt": null}
{"id": "17ceb580-1e3c-48e3-8125-ebf81b0ed746", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Dynamic Population Resizing and Adaptive Lévy Flight for improved exploration and exploitation balance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e9a70c79-b34b-4798-8cba-edfb2faffdfb", "metadata": {"aucs": [0.8423083104552814, 0.8414894853452665, 0.7572757087526804, 0.8501869575436714, 0.8490598733915985, 0.8514482915327664, 0.8501605542866961, 0.6326767482914248, 0.7437307147580567, 0.7447674794428918, 0.18804445968121464, 0.39585215038079846, 0.3672404931304364, 0.3156835659858841, 0.3833439073535997, 0.4617098990269456, 0.7612102724436802, 0.26835818743387807, 0.155580244188661, 0.16850350574148, 0.19444066099134838, 0.13259319908600387, 0.13433035367414892, 0.1558059763390549, 0.16255414856443529, 0.3804730968869955, 0.16920011394430134, 0.13047054205320874, 0.11950024410057247, 0.15205038462428278, 0.10585870100767147, 0.11823552186695996, 0.12528044611016775, 0.12745419227815746, 0.14129883329606396, 0.14429126368762735, 0.9594824543459614, 0.88980684948649, 0.897391741777074, 0.9020519339975598, 0.8820040634032221, 0.9070440060636102, 0.9475166831950698, 0.944092340861552, 0.9075774645702067, 0.3311356794235415, 0.37076343449615967, 0.41525098117908454, 0.31400073310363463, 0.3355144325756302, 0.3732667324414596, 0.42996541193234883, 0.3827696997970791, 0.4268685029387924, 0.8300002097971663, 0.8315129210936966, 0.38112136007384645, 0.8308408079731613, 0.8065275977357724, 0.2653742477171289, 0.8210915024241701, 0.36430698895704305, 0.8281936441030181, 0.18955992883762762, 0.2387532213526562, 0.185871919394903, 0.1656109315434916, 0.19721358105357223, 0.1854100637491124, 0.15589744189225951, 0.17753695371042377, 0.21448530938547505, 0.2147746757431559, 0.17357080511639633, 0.16290610589248078, 0.19069884459112363, 0.2544527841881684, 0.17891289659951448, 0.12784591410367863, 0.2087533074617003, 0.1832245451819754, 0.14965784182241282, 0.11619960335969304, 0.11958211247230333, 0.1533803981834495, 0.15187297874803518, 0.10207895903749231, 0.09179113533559735, 0.18823004591199066, 0.0910899491556818, 0.2630188986625772, 0.26715019539248996, 0.20140577951865535, 0.1121684517760656, 0.14825970656791687, 0.24895746789702944, 0.32309597419913794, 0.19199160806473514, 0.28758937030065335, 0.14251083334519787, 0.10214210216362951, 0.0775136024204357, 0.10357789713776833, 0.16245943965245546, 0.15445863050968933, 0.12294786072553887, 0.11556059667761143, 0.19435301995510867, 0.26865795462561537, 0.3379438053058581, 0.41807798011147856, 0.2783848712246708, 0.3001627841716652, 0.24858000095693444, 0.3077937408252813, 0.28124529320948877, 0.2989944098857241, 0.5229135819398076, 0.5197362420445923, 0.6079537755029729, 0.4668000193258036, 0.5166453714937405, 0.6091593635612211, 0.5327931923209295, 0.49707995280921846, 0.5883385228054315, 0.13759369669359256, 0.11548231060407887, 0.11139242571412722, 0.15255331527000848, 0.14520634093503582, 0.12880333092008134, 0.10376731321720922, 0.14303745967569303, 0.1264717941302006, 0.29110282656718844, 0.21983260433121288, 0.33136968415812285, 0.20461955857542757, 0.16494108094775695, 0.24056306110151626, 0.24249700390772855, 0.1833718358394988, 0.2369439206949635, 0.454137779507125, 0.4360569117018934, 0.3607238085214921, 0.43475495065005876, 0.4192135950192559, 0.46322032865037255, 0.3345050182746442, 0.3841067525634475, 0.40871186837821827, 0.332292734840373, 0.3259414127428557, 0.3661991826386064, 0.3470622071225289, 0.3598538042699403, 0.35676982010794234, 0.3588826094858414, 0.3638111635324961, 0.33563448852708777, 0.2088078428351715, 0.21763854587987985, 0.1802475308613284, 0.25416786248849965, 0.2210873085473537, 0.24214315431894762, 0.22588711275519568, 0.1928996285654142, 0.23951541474071414, 0.21788030282360504, 0.20787757822499286, 0.523177981213969, 0.44063792834456605, 0.2155660284757014, 0.2058826100027037, 0.36779178156248415, 0.23360268005028806, 0.4380056732283988, 0.7524733402234386, 0.17705222811276, 0.6894775008311387, 0.7701134356446881, 0.585469564924999, 0.7495331783584536, 0.1677398663664802, 0.2063041391033933, 0.7937067066134693, 0.16595762566754235, 0.2023653061743652, 0.2068227362142403, 0.20200473581553546, 0.1984055001560956, 0.18987948730504045, 0.15190658860262085, 0.20651517790779195, 0.6816901112483296, 0.18083666506253948, 0.18010381227514372, 0.19209026228623194, 0.20762579982382756, 0.19133005582123863, 0.1905240807280253, 0.2047667531297711, 0.19386125513477026, 0.2296979267958269, 0.08517837821890006, 0.09567252724684694, 0.0863133963634165, 0.08836877393363862, 0.08782624714873821, 0.0894545370918679, 0.08106642794469188, 0.07832600209439644, 0.09012938861046937]}, "mutation_prompt": null}
{"id": "0eb1a7a4-4858-48d3-9934-a00e4d0009f9", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                # Improved mutation weight adjustment approach\n                self.F = 0.5 + 0.3 * np.random.rand()  # Variable mutation factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                if fitness[i] < np.median(fitness):\n                    self.CR = 0.8\n                else:\n                    self.CR = 0.95\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                # Strategic reinitialization for diversity\n                elif np.random.rand() < 0.1:\n                    population[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    fitness[i] = func(population[i])\n                    evaluations += 1\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution leveraging adaptive mutation control and strategic reinitialization to maintain diversity and improve convergence.", "configspace": "", "generation": 45, "fitness": 0.1749031084748998, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "e9a70c79-b34b-4798-8cba-edfb2faffdfb", "metadata": {"aucs": [0.3795330314262769, 0.3655799115687671, 0.3573761536527541, 0.3682066418955745, 0.38640322371126123, 0.3619977992221671, 0.3644146361036147, 0.37125296634986227, 0.3758571605093711, 0.02769211249756809, 0.053833634947601405, 0.023800933450921713, 0.04655809501973418, 0.03770047580799696, 0.028964042179439264, 0.057372673656993944, 0.0471385257106669, 0.03419800109059523, 0.08741563683586484, 0.07831806979755096, 0.09459028183888607, 0.07443550875397764, 0.10878127522995451, 0.07122442168841503, 0.08867931746560553, 0.09676180800293444, 0.08768394449779804, 0.08430316694801165, 0.06025055175562888, 0.0661180068679218, 0.07229910406587281, 0.07385397506959912, 0.0667867202481941, 0.08887314312831862, 0.07018214336134154, 0.06211230033848769, 0.9460574095448148, 0.9462532229549643, 0.9413792189860064, 0.9503759139225689, 0.9454720662232667, 0.950861164966753, 0.9418604885355495, 0.9556274783666554, 0.9631194705699079, 0.15545599089096107, 0.14090763891586155, 0.12381655011337012, 0.16052350171049568, 0.14206352047619364, 0.14126034890245953, 0.18298211018403876, 0.1532525553416495, 0.16618425358917266, 0.2089352457136059, 0.2417963346178571, 0.22253512815470877, 0.28348275591470873, 0.2668551895643061, 0.22437750396294665, 0.22423178649675723, 0.22392530876817818, 0.21986178549382351, 0.09809593871583389, 0.1098143613223983, 0.09502418872372231, 0.12230913533446186, 0.10185054935184978, 0.11313904772740158, 0.12019404510027543, 0.10684304421329449, 0.11744241425710022, 0.08360672173479688, 0.10373627743943636, 0.06632029297641129, 0.11964911773067377, 0.09417474595085829, 0.09777015362385177, 0.11101016058925028, 0.09148446912335562, 0.09449026559206064, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006274882398789039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06612307128403905, 0.08588889571517122, 0.07685870618059021, 0.05865066509736405, 0.0890681240225113, 0.0757135628101856, 0.0596487338275119, 0.07273576293350237, 0.09179991830737433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053827965116465926, 0.04972390287742745, 0.055847936381590246, 0.058195349168241095, 0.0635057575490442, 0.06988557018224495, 0.061985532619315054, 0.06711484224507913, 0.06086251842901835, 0.3598654597942368, 0.33644405823829293, 0.34538080427126283, 0.3413565267833777, 0.35665546392735226, 0.36905414299433514, 0.3330206374969834, 0.35732006244249925, 0.3460876207622269, 0.09822738547346088, 0.06990473611246473, 0.08165559636461273, 0.08813939759631662, 0.07108661383804316, 0.07493623029984953, 0.08393971373912612, 0.0781181596058026, 0.08927687185517319, 0.15544469721712417, 0.1284318897137562, 0.1470866416818417, 0.17745530115300223, 0.13285584876324996, 0.1798861387507914, 0.1448516992162887, 0.15125763566760397, 0.15516042886200943, 0.2316391113742764, 0.22072013985370253, 0.20474464195127307, 0.19691571032331034, 0.21074966887305968, 0.2310833637830345, 0.2388756273648991, 0.2445903522924987, 0.2275049153127574, 0.1569300915400761, 0.16686679833937956, 0.17773875862853838, 0.16396074301885766, 0.15291239247016675, 0.14196730478219655, 0.1598042003603194, 0.146236393691635, 0.1673098068001726, 0.17074274620939522, 0.1945168204212403, 0.1687923467072262, 0.18169407552604977, 0.1778694326152498, 0.22650085318770163, 0.2028288534223811, 0.17717061212348761, 0.17967672592642991, 0.16866937667581683, 0.17251295553194956, 0.1785501087740906, 0.18228222455465037, 0.17317613461197712, 0.1696275679539957, 0.1625494363396066, 0.1689600490759533, 0.16982619543283894, 0.24763990763332722, 0.16198926398968905, 0.18968360939333784, 0.16430449208118736, 0.17544115878140032, 0.17161765342391577, 0.1641056324677186, 0.24306387651577643, 0.1827970357022416, 0.15834442107622526, 0.16314200266163315, 0.2665906627599004, 0.16668694938736894, 0.16592048880563925, 0.16045953499554055, 0.2049728867521694, 0.2028864499284675, 0.18468049181200086, 0.1816762678415873, 0.1976215749069452, 0.19497030274224247, 0.18945518266789485, 0.18938453937313626, 0.20053070758634695, 0.18274994454446258, 0.189415969520066, 0.1769277946888429, 0.06091790332114799, 0.06081693159076318, 0.06035609365506811, 0.07068102752211802, 0.06326465707151951, 0.0596660184997283, 0.06324786740535204, 0.07003173180000555, 0.06291152913161024]}, "mutation_prompt": null}
{"id": "ce8a0fbe-a531-42ff-ab0c-955ad9ed1336", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy and Dynamic Crossover for improved convergence and diversity.", "configspace": "", "generation": 46, "fitness": 0.35185082497701686, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.25.", "error": "", "parent_id": "e9a70c79-b34b-4798-8cba-edfb2faffdfb", "metadata": {"aucs": [0.8096507518649521, 0.813318935885595, 0.8122375907736888, 0.8257517900753883, 0.8196400894828141, 0.8084249661398321, 0.8088409679691506, 0.8240369631427326, 0.7902372805082454, 0.66381185903946, 0.701456508464277, 0.6984961941263754, 0.6509714447440842, 0.6997345578088278, 0.6901876655672707, 0.6739776835170982, 0.6985744506251496, 0.7121134309308549, 0.11924838789668923, 0.20116212143021073, 0.12652914877057264, 0.14686603696859601, 0.15051028796938282, 0.14246063060948577, 0.2836017150633834, 0.1635198152899091, 0.11652282482993082, 0.11973965613724957, 0.10784507187937675, 0.14972440783101937, 0.13900657418536488, 0.12915839916043037, 0.12527976425839715, 0.1237843102573859, 0.15240213537054348, 0.13276731911014372, 0.9080120710650176, 0.9062747208065304, 0.8673093545396973, 0.9229063165852986, 0.9053061924413935, 0.9271086243294806, 0.9135190927238376, 0.8857481544203647, 0.8995782693076636, 0.5583643875177833, 0.44438672170069304, 0.4066794372408131, 0.47718039367429343, 0.4054766873155611, 0.3681239941482003, 0.3886552558837988, 0.4576557710614485, 0.4278510034041525, 0.8043900301475598, 0.5634470940599078, 0.7950948399519562, 0.7881298299372228, 0.8098368203076736, 0.7921020053078649, 0.7664735107118753, 0.7952992403499166, 0.8174201118434439, 0.17931502136205058, 0.16897922202579352, 0.19832185742277963, 0.17034780770806845, 0.1734374094993555, 0.2080173811793562, 0.20774010329001946, 0.1596936004175612, 0.17900429930181905, 0.1661690287602844, 0.18803070447824777, 0.20841287591137536, 0.16769562431511098, 0.15595402618738985, 0.19083918386432241, 0.22972245204964126, 0.18325751519079336, 0.22053140345423627, 0.11956624382180658, 0.1264460694501941, 0.19109403372623568, 0.30162287208366667, 0.09006204257264616, 0.21584683964061668, 0.19731053451047265, 0.05542795906327169, 0.20034803169855053, 0.26181757673938977, 0.28890549828470424, 0.2033329257675961, 0.21607894030875185, 0.25978469013168537, 0.19780360960813936, 0.19121391071333682, 0.31283294035894493, 0.4153657478307409, 0.1987628042059173, 0.1889926368168251, 0.2147930858912237, 0.11395619939910684, 0.14468239682834028, 0.1357101266287798, 0.07086797128617695, 0.15614693666906498, 0.14813522574459637, 0.30160989563009954, 0.20610057455065522, 0.2728492532673822, 0.3398595039495905, 0.2889613464547627, 0.27603397776364735, 0.3205269408738787, 0.2457131912340732, 0.2922995545594508, 0.5405365018579538, 0.5984122970002732, 0.5619977773086899, 0.5194389802091627, 0.481717431464722, 0.6067915554329127, 0.5680243627929642, 0.5624142356651678, 0.5606533982694659, 0.12263259955455219, 0.16524465233169217, 0.12925864334139292, 0.1257887834607203, 0.10483693914724079, 0.11596980137413448, 0.09462565487439845, 0.1207418240960535, 0.12293950960381861, 0.20103853509329161, 0.40386068554455756, 0.23040346204002293, 0.29047859665549625, 0.42620693001518495, 0.1698065732827405, 0.43766844421215634, 0.17779722339344228, 0.4408097165789818, 0.4663537968514716, 0.464899962176363, 0.4022330472698611, 0.42169817450553226, 0.4302557049158596, 0.4226796354220178, 0.4412541659617616, 0.4825964665582342, 0.39570110463163966, 0.342663658466721, 0.31689423514719917, 0.35929903212708547, 0.307845850436527, 0.3815003118617012, 0.3440855725625941, 0.24675386258701826, 0.37518072939113334, 0.3442974482507213, 0.2070177903999897, 0.21524201723576097, 0.19203323934394656, 0.1984882565374696, 0.18718303425984228, 0.20825776096949433, 0.22071613775497778, 0.18981480478656265, 0.1947508383822797, 0.2828787540074539, 0.19949249432146066, 0.2127848843937955, 0.222944683308119, 0.6720773119046659, 0.49036732889260826, 0.5639705464222646, 0.2209798050799513, 0.21795711870582868, 0.7899345625753653, 0.1600389874314867, 0.17984929125627436, 0.7771864996720276, 0.7928283865706001, 0.16892786644617463, 0.17924948337478164, 0.2019140026755667, 0.8089081148633732, 0.6076117865306951, 0.16812625256524227, 0.6971851107988827, 0.1965055866305565, 0.16061965843811354, 0.1916793623217925, 0.20968764791969918, 0.1500857040145258, 0.2012449876808725, 0.17731458805569777, 0.18060990158499912, 0.18598418100642278, 0.17815075252702395, 0.18241714326047032, 0.17286577681912807, 0.18693461844827186, 0.19249418965240328, 0.1822015353315003, 0.09857954320225248, 0.0829235182812299, 0.07451734700522938, 0.07912701788410559, 0.07829591623127874, 0.08060297645175996, 0.08203195752860082, 0.08464344063362317, 0.08500254598467105]}, "mutation_prompt": null}
{"id": "af8eb85d-9aa5-4992-bbd1-0137aac009af", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy and Dynamic Crossover for improved convergence and diversity.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ce8a0fbe-a531-42ff-ab0c-955ad9ed1336", "metadata": {"aucs": [0.8096507518649521, 0.813318935885595, 0.8122375907736888, 0.8257517900753883, 0.8196400894828141, 0.8084249661398321, 0.8088409679691506, 0.8240369631427326, 0.7902372805082454, 0.66381185903946, 0.701456508464277, 0.6984961941263754, 0.6509714447440842, 0.6997345578088278, 0.6901876655672707, 0.6739776835170982, 0.6985744506251496, 0.7121134309308549, 0.11924838789668923, 0.20116212143021073, 0.12652914877057264, 0.14686603696859601, 0.15051028796938282, 0.14246063060948577, 0.2836017150633834, 0.1635198152899091, 0.11652282482993082, 0.11973965613724957, 0.10784507187937675, 0.14972440783101937, 0.13900657418536488, 0.12915839916043037, 0.12527976425839715, 0.1237843102573859, 0.15240213537054348, 0.13276731911014372, 0.9080120710650176, 0.9062747208065304, 0.8673093545396973, 0.9229063165852986, 0.9053061924413935, 0.9271086243294806, 0.9135190927238376, 0.8857481544203647, 0.8995782693076636, 0.5583643875177833, 0.44438672170069304, 0.4066794372408131, 0.47718039367429343, 0.4054766873155611, 0.3681239941482003, 0.3886552558837988, 0.4576557710614485, 0.4278510034041525, 0.8043900301475598, 0.5634470940599078, 0.7950948399519562, 0.7881298299372228, 0.8098368203076736, 0.7921020053078649, 0.7664735107118753, 0.7952992403499166, 0.8174201118434439, 0.17931502136205058, 0.16897922202579352, 0.19832185742277963, 0.17034780770806845, 0.1734374094993555, 0.2080173811793562, 0.20774010329001946, 0.1596936004175612, 0.17900429930181905, 0.1661690287602844, 0.18803070447824777, 0.20841287591137536, 0.16769562431511098, 0.15595402618738985, 0.19083918386432241, 0.22972245204964126, 0.18325751519079336, 0.22053140345423627, 0.11956624382180658, 0.1264460694501941, 0.19109403372623568, 0.30162287208366667, 0.09006204257264616, 0.21584683964061668, 0.19731053451047265, 0.05542795906327169, 0.20034803169855053, 0.26181757673938977, 0.28890549828470424, 0.2033329257675961, 0.21607894030875185, 0.25978469013168537, 0.19780360960813936, 0.19121391071333682, 0.31283294035894493, 0.4153657478307409, 0.1987628042059173, 0.1889926368168251, 0.2147930858912237, 0.11395619939910684, 0.14468239682834028, 0.1357101266287798, 0.07086797128617695, 0.15614693666906498, 0.14813522574459637, 0.30160989563009954, 0.20610057455065522, 0.2728492532673822, 0.3398595039495905, 0.2889613464547627, 0.27603397776364735, 0.3205269408738787, 0.2457131912340732, 0.2922995545594508, 0.5405365018579538, 0.5984122970002732, 0.5619977773086899, 0.5194389802091627, 0.481717431464722, 0.6067915554329127, 0.5680243627929642, 0.5624142356651678, 0.5606533982694659, 0.12263259955455219, 0.16524465233169217, 0.12925864334139292, 0.1257887834607203, 0.10483693914724079, 0.11596980137413448, 0.09462565487439845, 0.1207418240960535, 0.12293950960381861, 0.20103853509329161, 0.40386068554455756, 0.23040346204002293, 0.29047859665549625, 0.42620693001518495, 0.1698065732827405, 0.43766844421215634, 0.17779722339344228, 0.4408097165789818, 0.4663537968514716, 0.464899962176363, 0.4022330472698611, 0.42169817450553226, 0.4302557049158596, 0.4226796354220178, 0.4412541659617616, 0.4825964665582342, 0.39570110463163966, 0.342663658466721, 0.31689423514719917, 0.35929903212708547, 0.307845850436527, 0.3815003118617012, 0.3440855725625941, 0.24675386258701826, 0.37518072939113334, 0.3442974482507213, 0.2070177903999897, 0.21524201723576097, 0.19203323934394656, 0.1984882565374696, 0.18718303425984228, 0.20825776096949433, 0.22071613775497778, 0.18981480478656265, 0.1947508383822797, 0.2828787540074539, 0.19949249432146066, 0.2127848843937955, 0.222944683308119, 0.6720773119046659, 0.49036732889260826, 0.5639705464222646, 0.2209798050799513, 0.21795711870582868, 0.7899345625753653, 0.1600389874314867, 0.17984929125627436, 0.7771864996720276, 0.7928283865706001, 0.16892786644617463, 0.17924948337478164, 0.2019140026755667, 0.8089081148633732, 0.6076117865306951, 0.16812625256524227, 0.6971851107988827, 0.1965055866305565, 0.16061965843811354, 0.1916793623217925, 0.20968764791969918, 0.1500857040145258, 0.2012449876808725, 0.17731458805569777, 0.18060990158499912, 0.18598418100642278, 0.17815075252702395, 0.18241714326047032, 0.17286577681912807, 0.18693461844827186, 0.19249418965240328, 0.1822015353315003, 0.09857954320225248, 0.0829235182812299, 0.07451734700522938, 0.07912701788410559, 0.07829591623127874, 0.08060297645175996, 0.08203195752860082, 0.08464344063362317, 0.08500254598467105]}, "mutation_prompt": null}
{"id": "ae631a3e-dc1e-413a-9ce1-1d121901daed", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            # Periodic reinitialization for exploration\n            if evaluations % (self.budget // 4) == 0:\n                reinit_idx = np.random.choice(range(self.population_size), size=self.population_size // 4, replace=False)\n                population[reinit_idx] = np.random.uniform(self.lower_bound, self.upper_bound, (len(reinit_idx), self.dim))\n                for idx in reinit_idx:\n                    fitness[idx] = func(population[idx])\n                evaluations += len(reinit_idx)\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.3 + 0.4 * np.random.rand()  # Adaptive dynamic scaling\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Refined Hybrid DE leveraging adaptive dynamic scaling and periodic reinitialization for enhanced exploration-exploitation balance.", "configspace": "", "generation": 48, "fitness": 0.32418006943476346, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "ce8a0fbe-a531-42ff-ab0c-955ad9ed1336", "metadata": {"aucs": [0.5628758597671152, 0.7170388780621457, 0.8359509478011752, 0.8369883020024593, 0.761165295045821, 0.8453091427773335, 0.8371445451566486, 0.6838589482876749, 0.8191472326739861, 0.6577258333156435, 0.35565904994703446, 0.7418835971792008, 0.31317833593523303, 0.18325606136962902, 0.45795310665172206, 0.23535855248560533, 0.4107679381895062, 0.28736382640887104, 0.24043824974183814, 0.16317029535363203, 0.1452683029790307, 0.1334427355225769, 0.1485842491815329, 0.16280233695628943, 0.19081172059325635, 0.14095024561249048, 0.20938687266878164, 0.14391286478051046, 0.1416014037447767, 0.14549610691907677, 0.13433387596007562, 0.11594891788268147, 0.13494821243861987, 0.15932289915174314, 0.10713560895544927, 0.13114366943586353, 0.9102762926883997, 0.8985857434651948, 0.8840211980320779, 0.9100990604883666, 0.91150194185553, 0.8921909442386319, 0.9057154598553887, 0.9189130954215926, 0.8862797050940097, 0.3669850864248134, 0.36494433427005335, 0.3238486334331666, 0.37561024936425025, 0.38430033240979633, 0.3557088597409491, 0.35391815518053804, 0.3182302651363814, 0.33148651208648616, 0.8426916271698099, 0.8443117378204831, 0.852410789869357, 0.8261280849281039, 0.8120079452001755, 0.8286946834037433, 0.5050096116565883, 0.5802504847948982, 0.8144438782604277, 0.15639497445504735, 0.15224257729212953, 0.18165210893630135, 0.1903720649415913, 0.19667286643825077, 0.16785564932571584, 0.17158663412771935, 0.1596723760928055, 0.20214293772167857, 0.121684612859142, 0.16039966615880408, 0.15083567906684292, 0.14094111577682966, 0.15307552609656827, 0.2014579189746526, 0.17505055719331797, 0.2036830736960079, 0.17254055770901355, 0.1169579977408044, 0.10732701683263368, 0.1518891470444278, 0.07618167703085965, 0.11828532519370205, 0.19342438559064012, 0.09157974767568411, 0.14161238029950252, 0.12038280287687686, 0.2775573593092755, 0.24176313391301107, 0.2534232014409815, 0.18806530212247274, 0.2711872453339025, 0.1314384011615517, 0.2923872408917967, 0.11190108449068992, 0.24553705305776452, 0.16220190308739535, 0.06190624733448713, 0.058082751646255426, 0.10770766439404666, 0.14180727524386572, 0.16231558909110466, 0.13654487035746043, 0.13154365251687627, 0.2608612164211953, 0.21216351485166807, 0.2591581806547256, 0.2757462099341288, 0.1688705198128504, 0.21037956099437605, 0.16135010302396746, 0.34282679942398764, 0.2882893689157061, 0.12861203924918863, 0.5087368109635626, 0.5654717479606819, 0.590675629515917, 0.491111978712355, 0.533237223924653, 0.5736127473357671, 0.5192066263420851, 0.5570446007237979, 0.5429493400417018, 0.10208410291472514, 0.13919069560428976, 0.12400706991829613, 0.12064463276023218, 0.11059982759044451, 0.1612161011494131, 0.09823138714075352, 0.11935290481038596, 0.12631685077725618, 0.45697685026625046, 0.17072848469243362, 0.2226984531342664, 0.19419226749855545, 0.6504079576872079, 0.23440112093503984, 0.2468421773867574, 0.30173975637565364, 0.21067911911923187, 0.3593507707852214, 0.40166080650133584, 0.48712234531756315, 0.5001870422808352, 0.3070377376472532, 0.439770971680011, 0.34267216482646456, 0.46008684987601367, 0.37188162571130123, 0.33561425950657, 0.34002682897144854, 0.31250035532217524, 0.33532323889152815, 0.32778606622763595, 0.32559498708485757, 0.3108846587207863, 0.3445864534075559, 0.4081965917106537, 0.2241974064615384, 0.20174674986700836, 0.20491088678004343, 0.19649830886514408, 0.22388459056918342, 0.19301872354010674, 0.2112861767377341, 0.21022648375222708, 0.2299531297854266, 0.21242451752667169, 0.3248752261977649, 0.20149814162323476, 0.2296057215929843, 0.2534274293529706, 0.22686932783435998, 0.23124941917838027, 0.29372066269101227, 0.5587109790679684, 0.8046311762689033, 0.1631332602837927, 0.18214899065365242, 0.8305545702772011, 0.18393275203751824, 0.17018009684351365, 0.7542747333477904, 0.19989696485009256, 0.7858838027893598, 0.5038563441998408, 0.2095508929888712, 0.8226114573323378, 0.16755952650302441, 0.16252886751170337, 0.2025893518694245, 0.20578286120237854, 0.20728225380655996, 0.20503848800845148, 0.18508708007656738, 0.19537375821955139, 0.2125812083121036, 0.20070121858604684, 0.19501481388582131, 0.19239336821663422, 0.17933747592113558, 0.18020847140596197, 0.1920682566484364, 0.08404511412928517, 0.07200774932028109, 0.07687555321542472, 0.09570468971085844, 0.09169483676297119, 0.08711357196877634, 0.09409275839081566, 0.08132027964808153, 0.08567670249453418]}, "mutation_prompt": null}
{"id": "db50049f-d8ec-4bf2-92e4-82906bb4bbaf", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                # Self-Adaptive Mutation Factor adjusted by Diversity-based scaling\n                diversity = np.std(population, axis=0).mean()\n                self.F = 0.4 + 0.6 * np.random.rand() * (1.0 / (1.0 + np.exp(-diversity)))\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Introduce adaptive mutation scaling and population diversity-based exploration to balance exploration and exploitation.", "configspace": "", "generation": 49, "fitness": 0.3254874626347484, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "ce8a0fbe-a531-42ff-ab0c-955ad9ed1336", "metadata": {"aucs": [0.8294476993991866, 0.6493309586516514, 0.8292935036912832, 0.827916219141902, 0.8297239082763317, 0.8233029959055259, 0.8161620371185168, 0.7175451875521297, 0.8213126878599369, 0.4651213264952129, 0.7137877540969426, 0.417909851795392, 0.6646412934794916, 0.6898427302643612, 0.6741083728263972, 0.47107576625686753, 0.3323592101747399, 0.5746414021837161, 0.14383095956141656, 0.12480077615632601, 0.12496596903120794, 0.13263388333092885, 0.5387667780296136, 0.1491559433443106, 0.14919607942312396, 0.1244157610488168, 0.25087636403124636, 0.12351682380211859, 0.12485252583438211, 0.1231505776078966, 0.1277779615259237, 0.12625868536826224, 0.18796410953275589, 0.12620455060003455, 0.1277360211473635, 0.13607383504756432, 0.9273725929410681, 0.9004977032141946, 0.8800857253516965, 0.943609300857236, 0.9167446411145875, 0.9099585173474147, 0.9066859162498558, 0.8977981347419729, 0.9067598196677727, 0.3275609028963923, 0.3329135688878575, 0.49568149723471533, 0.41928082900678054, 0.3760143415582776, 0.4174756338908536, 0.32032008102038845, 0.31037747953721195, 0.35649163759355995, 0.3761507506632985, 0.5635091841358401, 0.7927136379564769, 0.3608027163061117, 0.8200013720383117, 0.7884576319242154, 0.404021985418726, 0.8082980772560295, 0.7883311118802397, 0.17309012093573162, 0.18643257945915392, 0.18297552196625988, 0.1665148547732952, 0.1522531581981561, 0.12234475162038527, 0.1765941036821036, 0.16522174790503996, 0.17370636606940992, 0.16514788355533838, 0.15608232886404816, 0.16088785051638133, 0.18952586147769446, 0.16219055013766703, 0.15697248394846974, 0.1876657804583196, 0.17504831255026276, 0.17625035871591477, 0.17938632010977984, 0.19900783628039853, 0.1563945517428027, 0.09915028832776118, 0.1914361203031162, 0.14409161825318173, 0.11312207328773516, 0.09267721340005541, 0.15967541021991383, 0.20920692285832143, 0.17621581142422316, 0.2638981805999083, 0.3227023941942728, 0.17636419674224635, 0.2839389132249823, 0.20537474434591463, 0.2132403177427986, 0.3126025089859603, 0.1025158535466999, 0.05661031258894511, 0.10207144243097066, 0.15649575797884185, 0.12484535392843243, 0.1381842010831852, 0.10550309610565345, 0.18821860069204066, 0.16655099544028906, 0.32320724895888864, 0.21375385426023796, 0.2031736973511794, 0.23396799935829493, 0.19967085187936795, 0.23974582536248668, 0.19323770885353353, 0.24602052921093998, 0.34896861628272224, 0.5082766773348193, 0.5123512255003142, 0.5283608536198139, 0.47738114171386803, 0.5237830573345577, 0.4953699499137363, 0.496890263451669, 0.5327248944526195, 0.5355214902141445, 0.12439593577056207, 0.14018702919200499, 0.09736560779618264, 0.12147938148585213, 0.12335038723915581, 0.09046697580227303, 0.11657998105985279, 0.13493201926121634, 0.15519288688084565, 0.15145145419588357, 0.20350890537296418, 0.46794948328120256, 0.14610927678294716, 0.4268980459271249, 0.17919899585675225, 0.17496785010049642, 0.24667769519763838, 0.20594842432684624, 0.4736413754370027, 0.42755467796051794, 0.456073939088796, 0.477991032906258, 0.32961441676425096, 0.5028168740911558, 0.5062391847580449, 0.3578932024029132, 0.4437694514819771, 0.34814830965776844, 0.3484506498809765, 0.347782403640306, 0.36612521554198896, 0.3153375928444999, 0.2963948140564463, 0.30573216927690705, 0.3971272649893043, 0.29022540046936196, 0.1756842599567342, 0.17318312446353645, 0.2245127003346029, 0.18887555029597092, 0.2020557210460312, 0.2110090090636536, 0.22248856066336276, 0.196218894959451, 0.2175605516103305, 0.21466685334485647, 0.21307607464937295, 0.2246920578136774, 0.22861597063310424, 0.48969680325976805, 0.3461741881115188, 0.2886453654100134, 0.20568935377730346, 0.20667714520315406, 0.1665840404223864, 0.16042585000954002, 0.18267369586450954, 0.7991631123856772, 0.7939669917294568, 0.8046581064845093, 0.16056358452228547, 0.18427542513666972, 0.7583693290646508, 0.20167716864365604, 0.20536328639392187, 0.8163201940840458, 0.16206454292995875, 0.15983830200353477, 0.4083142319460791, 0.20720500198759872, 0.2034728397053972, 0.2043394926303943, 0.1808123804253593, 0.1813496421874191, 0.18952312799241355, 0.1802870197946892, 0.19232858853589052, 0.17373399589719196, 0.18047385109048186, 0.1881130169682016, 0.1942545303082518, 0.072855676032472, 0.0837648848477176, 0.08025056297173394, 0.08080188585455195, 0.08296965855013583, 0.07262887739483559, 0.08534147156114558, 0.08114066829849487, 0.07987956306646915]}, "mutation_prompt": null}
{"id": "5323437c-8a42-4918-9b92-ffade55cbf76", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Levy Flight for exploration\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(0.01 * (self.upper_bound - self.lower_bound))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy and Dynamic Crossover for improved convergence and diversity.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ce8a0fbe-a531-42ff-ab0c-955ad9ed1336", "metadata": {"aucs": [0.8096507518649521, 0.813318935885595, 0.8122375907736888, 0.8257517900753883, 0.8196400894828141, 0.8084249661398321, 0.8088409679691506, 0.8240369631427326, 0.7902372805082454, 0.66381185903946, 0.701456508464277, 0.6984961941263754, 0.6509714447440842, 0.6997345578088278, 0.6901876655672707, 0.6739776835170982, 0.6985744506251496, 0.7121134309308549, 0.11924838789668923, 0.20116212143021073, 0.12652914877057264, 0.14686603696859601, 0.15051028796938282, 0.14246063060948577, 0.2836017150633834, 0.1635198152899091, 0.11652282482993082, 0.11973965613724957, 0.10784507187937675, 0.14972440783101937, 0.13900657418536488, 0.12915839916043037, 0.12527976425839715, 0.1237843102573859, 0.15240213537054348, 0.13276731911014372, 0.9080120710650176, 0.9062747208065304, 0.8673093545396973, 0.9229063165852986, 0.9053061924413935, 0.9271086243294806, 0.9135190927238376, 0.8857481544203647, 0.8995782693076636, 0.5583643875177833, 0.44438672170069304, 0.4066794372408131, 0.47718039367429343, 0.4054766873155611, 0.3681239941482003, 0.3886552558837988, 0.4576557710614485, 0.4278510034041525, 0.8043900301475598, 0.5634470940599078, 0.7950948399519562, 0.7881298299372228, 0.8098368203076736, 0.7921020053078649, 0.7664735107118753, 0.7952992403499166, 0.8174201118434439, 0.17931502136205058, 0.16897922202579352, 0.19832185742277963, 0.17034780770806845, 0.1734374094993555, 0.2080173811793562, 0.20774010329001946, 0.1596936004175612, 0.17900429930181905, 0.1661690287602844, 0.18803070447824777, 0.20841287591137536, 0.16769562431511098, 0.15595402618738985, 0.19083918386432241, 0.22972245204964126, 0.18325751519079336, 0.22053140345423627, 0.11956624382180658, 0.1264460694501941, 0.19109403372623568, 0.30162287208366667, 0.09006204257264616, 0.21584683964061668, 0.19731053451047265, 0.05542795906327169, 0.20034803169855053, 0.26181757673938977, 0.28890549828470424, 0.2033329257675961, 0.21607894030875185, 0.25978469013168537, 0.19780360960813936, 0.19121391071333682, 0.31283294035894493, 0.4153657478307409, 0.1987628042059173, 0.1889926368168251, 0.2147930858912237, 0.11395619939910684, 0.14468239682834028, 0.1357101266287798, 0.07086797128617695, 0.15614693666906498, 0.14813522574459637, 0.30160989563009954, 0.20610057455065522, 0.2728492532673822, 0.3398595039495905, 0.2889613464547627, 0.27603397776364735, 0.3205269408738787, 0.2457131912340732, 0.2922995545594508, 0.5405365018579538, 0.5984122970002732, 0.5619977773086899, 0.5194389802091627, 0.481717431464722, 0.6067915554329127, 0.5680243627929642, 0.5624142356651678, 0.5606533982694659, 0.12263259955455219, 0.16524465233169217, 0.12925864334139292, 0.1257887834607203, 0.10483693914724079, 0.11596980137413448, 0.09462565487439845, 0.1207418240960535, 0.12293950960381861, 0.20103853509329161, 0.40386068554455756, 0.23040346204002293, 0.29047859665549625, 0.42620693001518495, 0.1698065732827405, 0.43766844421215634, 0.17779722339344228, 0.4408097165789818, 0.4663537968514716, 0.464899962176363, 0.4022330472698611, 0.42169817450553226, 0.4302557049158596, 0.4226796354220178, 0.4412541659617616, 0.4825964665582342, 0.39570110463163966, 0.342663658466721, 0.31689423514719917, 0.35929903212708547, 0.307845850436527, 0.3815003118617012, 0.3440855725625941, 0.24675386258701826, 0.37518072939113334, 0.3442974482507213, 0.2070177903999897, 0.21524201723576097, 0.19203323934394656, 0.1984882565374696, 0.18718303425984228, 0.20825776096949433, 0.22071613775497778, 0.18981480478656265, 0.1947508383822797, 0.2828787540074539, 0.19949249432146066, 0.2127848843937955, 0.222944683308119, 0.6720773119046659, 0.49036732889260826, 0.5639705464222646, 0.2209798050799513, 0.21795711870582868, 0.7899345625753653, 0.1600389874314867, 0.17984929125627436, 0.7771864996720276, 0.7928283865706001, 0.16892786644617463, 0.17924948337478164, 0.2019140026755667, 0.8089081148633732, 0.6076117865306951, 0.16812625256524227, 0.6971851107988827, 0.1965055866305565, 0.16061965843811354, 0.1916793623217925, 0.20968764791969918, 0.1500857040145258, 0.2012449876808725, 0.17731458805569777, 0.18060990158499912, 0.18598418100642278, 0.17815075252702395, 0.18241714326047032, 0.17286577681912807, 0.18693461844827186, 0.19249418965240328, 0.1822015353315003, 0.09857954320225248, 0.0829235182812299, 0.07451734700522938, 0.07912701788410559, 0.07829591623127874, 0.08060297645175996, 0.08203195752860082, 0.08464344063362317, 0.08500254598467105]}, "mutation_prompt": null}
{"id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 51, "fitness": 0.36170897450127854, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "ce8a0fbe-a531-42ff-ab0c-955ad9ed1336", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "7575f9c0-a908-4ccc-8b16-b7528fdf6435", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, int(self.population_size * (0.5 + 0.1 * np.random.rand())))\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.4 * np.random.rand()  # Self-Adaptive Mutation Factor adjustment\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.8, 0.2), 0.5, 1.0)  # Adjusted CR variance\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Improved Adaptive Parameters and Randomized Population Resizing for robust exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": 0.33450103019816546, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.7509299386706041, 0.7996693435441844, 0.7212706071897019, 0.7508472042638864, 0.8033590354602085, 0.7492995405477347, 0.763383972585081, 0.788907398196113, 0.7238495059813129, 0.4921367787856529, 0.6429624837846412, 0.44894834024023467, 0.49196299898024676, 0.647775498304022, 0.38864273650155956, 0.46151224589722784, 0.6301820988670819, 0.47954378224651906, 0.13020780326882286, 0.3404964712382803, 0.12409517574606999, 0.12741660437036917, 0.3827779817298529, 0.13027834848466624, 0.12562628655495212, 0.4280189122257697, 0.13216158075871898, 0.13830092273053363, 0.2520682958439566, 0.10376575460153348, 0.11074488343854405, 0.19800583589584986, 0.10682987977150737, 0.12958856934030138, 0.3097267423996001, 0.11295696413894274, 0.9390047640271019, 0.9033185791930657, 0.9028826698337915, 0.9424113821621074, 0.9645926578922814, 0.9576972750520638, 0.9137544924589508, 0.9408128237774301, 0.9105998205512615, 0.3763745386521987, 0.5354215186799972, 0.38998184666514346, 0.37625044609961356, 0.5583154196665643, 0.3881404499259543, 0.4430576038883821, 0.47475420267146096, 0.3989501379841761, 0.6467946120908465, 0.7196198757605645, 0.7070674201223615, 0.6993727339593427, 0.7275781395835031, 0.6519542390767963, 0.6933840942416916, 0.745693562914533, 0.7320754520762607, 0.29463539135992134, 0.2505856860839557, 0.21369535143553986, 0.25585398771589074, 0.21507659660402745, 0.22761861385837223, 0.2612056358338266, 0.24464426861380517, 0.2542767458008237, 0.2129603178886036, 0.11431342347718532, 0.2252768296538613, 0.20827692776969708, 0.24773296067968043, 0.24271739004242043, 0.26528489656589016, 0.2690774626232043, 0.22339996762001846, 0.12726374101242288, 0.23989363878517156, 0.13606388672442304, 0.1661275168370615, 0.17692785670279187, 0.1299650867852129, 0.14575855681978833, 0.0839322859164906, 0.16185983705274865, 0.2637582986949305, 0.2995170807529447, 0.25896954088327073, 0.26742504671293854, 0.15306881183974852, 0.17163737340758978, 0.30002885898732345, 0.33246867193253415, 0.2703573638412249, 0.05460193335559471, 0.0680052229893765, 0.026559776415037595, 0.07967772012305196, 0.13141270042239284, 0.05923028678680076, 0.07467767524435964, 0.1779494114190706, 0.0388230334508608, 0.19153130271462748, 0.2446978152405752, 0.17874683954141546, 0.19796325088935107, 0.25017410382166927, 0.20401948830269, 0.20835654106019663, 0.2719407777022048, 0.17331025173195702, 0.5749932670966407, 0.5595670365923386, 0.5234100988944674, 0.5762128280033654, 0.5717736160825033, 0.5101458082504041, 0.545850242358962, 0.5488175986393256, 0.5454020061882736, 0.09137914147751469, 0.13747695413533, 0.1134942744091082, 0.10869372940943212, 0.1095993412654439, 0.09628954842703674, 0.1350452492948947, 0.09701636099402311, 0.08950148599560603, 0.17041221300912424, 0.24614946722638176, 0.14657318596197422, 0.16315517771006616, 0.1857474156766764, 0.153109752926346, 0.16870053587046208, 0.18787722670395102, 0.15512971715257284, 0.3716155044423781, 0.41468735308122273, 0.339859204481035, 0.3058721433030066, 0.41078424199672203, 0.3383166136629321, 0.33451724713756426, 0.4149911467521047, 0.3449466216179665, 0.24727333597987022, 0.3055961082148799, 0.22858419674578834, 0.26268853244826296, 0.2846646815708441, 0.23744637157242554, 0.27626394454354997, 0.3254974304993461, 0.25312460741740195, 0.21716723523523074, 0.19623932778478548, 0.1992317727756331, 0.21253020312313942, 0.18379510145171418, 0.18432962595316427, 0.20464088666357727, 0.1653370610102476, 0.20177726156912545, 0.2290937825077758, 0.6096661832071327, 0.2104413297925808, 0.292260519307338, 0.4968253324864663, 0.23597478106248182, 0.23293711730950828, 0.45609712972950434, 0.27226839002942815, 0.6352015068931895, 0.7840518338929463, 0.1492560982019039, 0.7112534543923601, 0.19010604637342532, 0.7336316982926254, 0.6426707255455393, 0.6557256132473112, 0.19919138248479118, 0.6417244207810793, 0.2066923172989793, 0.6211743776848266, 0.16060912996714727, 0.1979641108446094, 0.5817767546336907, 0.20337995922619, 0.20682149402967376, 0.200341849762815, 0.18266079196900287, 0.20588613415150236, 0.17517896404619093, 0.21104319479316713, 0.20806018614113442, 0.18424511533422405, 0.19060256374363993, 0.17514462269623143, 0.19077100095772737, 0.07746623249416462, 0.07212431441840694, 0.07561837978549157, 0.0767736192046794, 0.08109853810473144, 0.08023152597907024, 0.07328322751139427, 0.07814328542396631, 0.08200712615924444]}, "mutation_prompt": null}
{"id": "0b792c48-e0fd-4d77-96c2-f4b1417b43a9", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "fd17e822-74ff-429f-9f0f-aa9bf97d1037", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, int(self.population_size * 0.75))  # Change line\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.02 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)  # Change line\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Dynamic Population Resizing and Adaptive Levy Flight Scaling for further improved convergence and diversity maintenance.", "configspace": "", "generation": 54, "fitness": 0.29892209523037655, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.22.", "error": "", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.6690028604126934, 0.6593846473531648, 0.6745326471602355, 0.7134604342029987, 0.6794286227854012, 0.7032157073434149, 0.6975833173402637, 0.6645309509775512, 0.6459110359041702, 0.3704360774397608, 0.3770839424267324, 0.3815133812997944, 0.3842980105100934, 0.37980766796297494, 0.39626464300274944, 0.36355759971944224, 0.39317276427458203, 0.41772793460980895, 0.10570105458718115, 0.12066550972202816, 0.12424235030174569, 0.102689402677, 0.11392209744020054, 0.10069914173528671, 0.09316210154411697, 0.09489374621113278, 0.11044741662231006, 0.09521842362631616, 0.09161919036833566, 0.09604686054554534, 0.11121423868324332, 0.10348917725197038, 0.0959477446481275, 0.10395287291308364, 0.08880577145882484, 0.1003739656875503, 0.9244459556158332, 0.8886628404633428, 0.8921034007954185, 0.9385986214889666, 0.9295969751312513, 0.9089315303499667, 0.9484581092759792, 0.884258275249697, 0.9431282424068224, 0.3346836552111576, 0.3479299487612022, 0.32075274799449127, 0.34293688794245736, 0.3478384352027347, 0.3217455910139303, 0.33067719474561275, 0.37761035415680355, 0.3614963400022322, 0.6408682762632416, 0.6225652906397324, 0.6054619671273893, 0.6783274771243735, 0.6791926752292927, 0.6260008036013783, 0.6119105864150297, 0.6562667981577956, 0.6862906512981808, 0.24091935408144316, 0.19408328526222385, 0.25934121873290283, 0.16981116036385724, 0.1881520050477935, 0.18874640189729153, 0.1903012634674206, 0.2023394319258588, 0.21745730740051294, 0.21201900321484168, 0.22680139417878087, 0.21421643931988887, 0.2284528098612545, 0.2158135691454035, 0.28969627588169655, 0.2464067669131358, 0.21799983624908492, 0.26078388195483193, 0.1771287211519239, 0.2111421603466045, 0.14467353178818776, 0.20515875788106241, 0.15656916577482716, 0.13913574819747587, 0.1643824100373107, 0.21492852759496817, 0.12523203561444574, 0.3212021375681007, 0.28933769141676924, 0.24650005879420134, 0.2963700518932666, 0.29017678554665294, 0.2866021091411358, 0.32584578193881375, 0.33022420693143417, 0.3541737112525931, 0.05362186606792041, 0.05751530847686426, 0.07666855906054715, 0.08009584308021567, 0.07540083437765843, 0.05836105961552562, 0.07600045027524427, 0.11453299077435264, 0.09688129824976366, 0.19230500937802242, 0.17757252376893518, 0.18895197165394995, 0.20665005728168095, 0.17868430927869217, 0.20936203794244834, 0.15574143171367227, 0.19881121860808615, 0.1812237407317422, 0.5359809113520944, 0.5349037785402547, 0.5796476196802123, 0.5426362118836592, 0.5373301195775941, 0.5510419111585496, 0.5339604926714483, 0.5070793443786421, 0.5397983865295166, 0.094754228169465, 0.1048694995350532, 0.08921189858949397, 0.08877566320407382, 0.08525100110436812, 0.09117777892947854, 0.09957762191211261, 0.0998098816015145, 0.08598063848519055, 0.16933393026211563, 0.17916165340422407, 0.14526007102587501, 0.1756435410963877, 0.14650238699977092, 0.1404382650257261, 0.15690085256816078, 0.19500847710014435, 0.15031453092640856, 0.3016414833749562, 0.3197099750621435, 0.32162299567976893, 0.3107043620461306, 0.3096565664616012, 0.3163427149472846, 0.3317641904012768, 0.3194980119872376, 0.333638310638287, 0.2373418981712101, 0.25956303000386716, 0.2575277399261603, 0.23901004610205645, 0.22819218450153544, 0.26246405837606357, 0.24869709118302363, 0.26623168252719176, 0.2596070688790555, 0.18966252969339092, 0.1963117357282328, 0.18145218970366228, 0.18118389095158083, 0.19022089792863506, 0.1912197360697715, 0.19549498644828334, 0.19918280304271874, 0.18824498955018842, 0.1813523787619563, 0.19904582600440446, 0.1825637246318098, 0.20433537882111608, 0.19054867703301948, 0.2000797186319695, 0.18575768119217795, 0.21498082604447954, 0.1824015326621754, 0.17384474201887912, 0.19603246717147327, 0.618904589160276, 0.6727383677256602, 0.1848432941130227, 0.6092618443937381, 0.6101269377298919, 0.20321584095329237, 0.20254197307001287, 0.6594807661981803, 0.20508490347924735, 0.5344364156667427, 0.4695839666761431, 0.636201087109415, 0.19403219827432094, 0.20584569740705305, 0.2085281961398695, 0.6501284504508276, 0.19864564073708146, 0.1798875641898383, 0.17903111989350584, 0.20334225862787414, 0.18903681169379627, 0.17841415399347638, 0.17982765743994478, 0.20386409363213998, 0.18876227475653307, 0.07152069843125719, 0.08530305974936003, 0.07763169835520367, 0.07444171104917952, 0.07907817973470044, 0.07973337260264235, 0.07147455991528895, 0.08691729522918035, 0.07257662259487752]}, "mutation_prompt": null}
{"id": "ab7c3df2-3f34-4376-9d74-dc95c98b5bcd", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "522c7902-2a13-465d-b294-916d3da4cb2c", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                population_diversity = np.std(population, axis=0).mean()  # Diversity-based resizing\n                if population_diversity < 0.1:\n                    self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.4 + 0.4 * np.random.rand()  # Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.7:  # Stochastic Levy Flight\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Adaptive Mutation, Diversity-based Population Resizing, and Stochastic Levy Flight for improved convergence and exploration.", "configspace": "", "generation": 56, "fitness": 0.27960823217415687, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.7454207807663066, 0.7425780991351841, 0.7261382639960641, 0.7141441169115558, 0.7560997374814863, 0.7275348089239575, 0.7597646626474261, 0.7003769529145667, 0.7267513041430755, 0.24875141893632247, 0.2407417665695073, 0.24103067589862093, 0.21201880700634934, 0.2348140545032007, 0.2525177148845955, 0.23971081196730537, 0.25593946280409396, 0.22286714519260986, 0.12035654563553422, 0.10346740604794591, 0.10505804242008121, 0.10373760733682413, 0.10526289609436157, 0.10762388904047726, 0.09865682405091392, 0.09989343434759579, 0.10307245783508656, 0.10910443406622528, 0.10439346959103057, 0.08303173065166647, 0.1023001687838383, 0.10246772748761546, 0.09641815284709443, 0.1053627422874377, 0.09020543005010184, 0.0977523728549895, 0.8928525687319919, 0.887169639468929, 0.9093130342970497, 0.8728592604672993, 0.8845333022783589, 0.9509735449410605, 0.8779102189189287, 0.8688259390337452, 0.8807238022605054, 0.3722488247868082, 0.40381253802785255, 0.3473962991443661, 0.3797656635845863, 0.37726933233989857, 0.34820079358912126, 0.3673125177994576, 0.3674544102618733, 0.3921468778040469, 0.6640970328576619, 0.5959043839688971, 0.6519107358855658, 0.5625388336935941, 0.6073884406361543, 0.6480118315507087, 0.5263123860644207, 0.5428109351006076, 0.6270104742750473, 0.24372407611550728, 0.23923438686320286, 0.21951698029987887, 0.23545566042590327, 0.19992560410205085, 0.17704806682516772, 0.19382783380881852, 0.19080116526049995, 0.2544752278395259, 0.19847232848639362, 0.19449416844178946, 0.19918474251520113, 0.19598355056764016, 0.21984653157570322, 0.20052619607816058, 0.22969768367961774, 0.19322809157526522, 0.17506765006918124, 0.09191128994131903, 0.09887775451190117, 0.10986948445861944, 0.09788739875429275, 0.10268998541453822, 0.10086130402953408, 0.0879905574994636, 0.12377455962455974, 0.088504149967501, 0.20905732947482325, 0.2193005502680877, 0.19456519137479944, 0.16850580270157456, 0.2236372043075141, 0.20568603005309316, 0.21726990086852127, 0.25332642615597956, 0.2334458375069567, 0.01826488931414716, 0.01148658390984636, 0.02977213713574478, 0.019136678922026862, 0.03752321511598, 0.008282427624852207, 0.011005003754971598, 0.01394044969492858, 0.014301395724269916, 0.14149757081445258, 0.15440799766356772, 0.13915439155566978, 0.21135633617356608, 0.18625029592195674, 0.16471817158583746, 0.1448734890877793, 0.14213431889058303, 0.14869595385165868, 0.49399446015925896, 0.5343603704980024, 0.468049453846617, 0.49217376395860635, 0.5395798914541393, 0.5682666569433592, 0.5984449956612947, 0.5284383155965484, 0.5143036772203727, 0.09965889033936182, 0.1050613317181569, 0.09158715136615558, 0.1146976463450381, 0.08512796140783974, 0.10360863368907869, 0.09509902510474277, 0.0991092275122506, 0.08125139779289947, 0.14398973814950145, 0.14464798556791725, 0.1495550490256754, 0.13762920246681498, 0.13070437390813727, 0.13169967255092874, 0.13260719414244415, 0.13179809681230636, 0.13359246060028074, 0.3532691852215244, 0.32736715898859114, 0.31508521802764156, 0.3590586162690378, 0.3615213083975205, 0.3736052085615784, 0.36327150944911746, 0.39044380843263515, 0.32561440455830126, 0.23086453504398197, 0.241915865028849, 0.24351434353862234, 0.2360970832692968, 0.24710819108977222, 0.24595339382207637, 0.2660907722564171, 0.25550241698672704, 0.2643618690580306, 0.18093607863331151, 0.180566360376195, 0.19746909058952, 0.18680040139057585, 0.22238887434384125, 0.19871101290656557, 0.18327545691230074, 0.19818716700797312, 0.20422151651162124, 0.17971878883519443, 0.1878757646464646, 0.18458684119188296, 0.1899816557203533, 0.1825126782501707, 0.19727651673630475, 0.18766111671293795, 0.19701181705873183, 0.18293136034381519, 0.1623728595911712, 0.5874253696925464, 0.7395317384866475, 0.5885672700936591, 0.5564550311435569, 0.6725231314950257, 0.6631279344233837, 0.4499382361747306, 0.19071271214398888, 0.19818459168535774, 0.20204467263511983, 0.20099115029290737, 0.15642654397206757, 0.5036710565319191, 0.19579687794751954, 0.2048228434694772, 0.20498041446900495, 0.2012201154270712, 0.19617985544918404, 0.19441948949044885, 0.18234702203958264, 0.17902864493885795, 0.21201878591645174, 0.20541462771959584, 0.18057881804579679, 0.18797759247288903, 0.19246869860864213, 0.07318697221882686, 0.07770752812699189, 0.08322699388297516, 0.0781310027409523, 0.08598874828630576, 0.08063128946417852, 0.0777050814633431, 0.07897818568638615, 0.08221070732209956]}, "mutation_prompt": null}
{"id": "3b449988-aabd-4c13-9df8-61df4e511268", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population with opposition-based learning\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        opposition_pop = self.lower_bound + self.upper_bound - population\n        full_population = np.vstack((population, opposition_pop))\n        fitness = np.array([func(ind) for ind in full_population])\n        population = full_population[np.argsort(fitness)][:self.population_size]\n        fitness = np.sort(fitness)[:self.population_size]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection with elitism\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Dynamic Crossover and Adaptive Levy Flight Scaling, plus opposition-based initialization and elitism for improved convergence.", "configspace": "", "generation": 57, "fitness": 0.35079448550442976, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.25.", "error": "", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.802265573634414, 0.8092900377705596, 0.8116142750039679, 0.801800638452579, 0.8030938935728167, 0.8147691109361314, 0.8110146137761473, 0.8103233914065077, 0.8156329812188013, 0.6775440753809285, 0.6530161046204868, 0.4970064701035414, 0.3415404096895933, 0.42067750262690773, 0.6381816325889005, 0.6615410387852738, 0.706438417683301, 0.6867238846652284, 0.13298125071164413, 0.12804334069746315, 0.15073610845130425, 0.1168510837233655, 0.13993372962363715, 0.35011533289751917, 0.15545599851048952, 0.14034815209060802, 0.15861196502698582, 0.12649659365362165, 0.12712280024912614, 0.13202108987152283, 0.13675327366664092, 0.11444734873609885, 0.11510289465907897, 0.13104677773196105, 0.13206032716189442, 0.13904329428755735, 0.8954312043111641, 0.9357717275963545, 0.9239197651391615, 0.9030660002539281, 0.9402684356772203, 0.872291241005131, 0.8836774483226048, 0.8806980558115705, 0.9073882075602455, 0.45254521317038254, 0.4881843895111859, 0.5039966772562423, 0.4365660351175492, 0.40982492302693263, 0.532757101457773, 0.46469070455172945, 0.5007781451814313, 0.5575253054062512, 0.7914464404567225, 0.8083811867238515, 0.8033357886196655, 0.7640201619790433, 0.8240447611131856, 0.7955265828428861, 0.7513365481814338, 0.7767468434818976, 0.7946584613537142, 0.1899589319369933, 0.20190531377023968, 0.1769955370404961, 0.2183144695688659, 0.21006944329599841, 0.2697187428807505, 0.18949285985670072, 0.19298769068121469, 0.17173719604074245, 0.15797834776075215, 0.1949967424854423, 0.18691311658559695, 0.20292848210605408, 0.24154835402523733, 0.23435709063958243, 0.2227616364785474, 0.18576755112949972, 0.186151350452479, 0.11839582912532642, 0.08359776615642389, 0.12458431049191854, 0.19469560383662465, 0.2293327358135181, 0.06095732498340933, 0.24959477016577525, 0.19432766592454442, 0.14107113809336058, 0.2722745941299639, 0.2795211727480772, 0.300850265962861, 0.1972577163889665, 0.20446899650891737, 0.3417992763366986, 0.2599121250917188, 0.25751121044688174, 0.3773825829915217, 0.12337570825361377, 0.17048595483499307, 0.11761652720702154, 0.10767981126453274, 0.11906738907209602, 0.1347735982716235, 0.09454423917315602, 0.2081584679925943, 0.07662891930252136, 0.26649175655760304, 0.33317698472341206, 0.2924293790773158, 0.2736328450460451, 0.22050752571364174, 0.3044446254992391, 0.21880175851236106, 0.2586373482880857, 0.2346516845607599, 0.4927456780270998, 0.537868303555826, 0.7170127907912802, 0.4798369304975404, 0.5141770930956138, 0.5048457221084264, 0.49870476154752363, 0.49868346062026236, 0.5309972474518807, 0.10908455138678308, 0.11232363420091918, 0.12245642109676103, 0.1322924745981502, 0.15918504814880508, 0.11592179862542684, 0.1051506367580225, 0.13896084917673202, 0.12375095442601503, 0.15704269437812401, 0.3176799283074867, 0.31670388542144323, 0.22937400839805056, 0.3055470374736141, 0.16659918952145603, 0.18711853037742876, 0.19744015819293226, 0.15004700878986477, 0.4188751762889944, 0.38375840228322033, 0.4143039911220455, 0.41559040578400064, 0.36797002897886977, 0.38822639979716156, 0.4313447954016506, 0.434826263985425, 0.39420831948960855, 0.3122618420355694, 0.3075146542174837, 0.3489173910185215, 0.323453646883995, 0.37671855682721833, 0.3954032141724316, 0.3178314625873746, 0.3879851491652867, 0.4145349040567128, 0.20758586687147584, 0.19782931821243355, 0.19000540012342926, 0.19526496921558, 0.19392951854812512, 0.20962406463447425, 0.20017102257705277, 0.1796780362033722, 0.19616641852241123, 0.3230913687846212, 0.23140122119238404, 0.429920457347021, 0.5022229750260474, 0.19873009411051012, 0.22425965727320385, 0.22475252445052252, 0.2162007929108739, 0.6393225253732115, 0.8101198111499398, 0.7828890780091631, 0.17925989697321243, 0.7908140716430241, 0.18628836636097335, 0.7543276059576991, 0.7790500362244063, 0.8010751359463328, 0.17636260731629794, 0.7335619818082256, 0.6274797390466254, 0.16292337992143713, 0.20308140846262235, 0.19847073659902414, 0.16337955138910787, 0.20389955641401758, 0.20789743911999992, 0.21079632378060287, 0.20193732529329977, 0.1846660800936989, 0.2085220565154393, 0.17260819700279995, 0.18763918385269462, 0.1880887931998534, 0.18988543297153138, 0.17029289526460767, 0.1904110023256833, 0.07988570932830918, 0.07785113480412731, 0.08635745518455917, 0.07925174970857929, 0.07929732588009397, 0.08025213063488024, 0.08332272925570217, 0.08843606555853545, 0.0700500094557639]}, "mutation_prompt": null}
{"id": "35dc65f3-f238-4a46-baf9-049546354adc", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "ea861f2f-6a94-4aec-9382-87781191f0a0", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "847efd48-f500-49b8-a159-be4ca5348967", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "6fb6d3bf-18cd-4cc3-a885-fb48bf8d1f1f", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "42107d86-83e6-4a4c-8445-bedfb8ede5dd", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "7a51a999-6628-4cd6-bcee-dc1d9a68f3c0", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.chaotic_sequence = self.generate_chaotic_sequence(self.budget)\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def generate_chaotic_sequence(self, length):\n        sequence = np.zeros(length)\n        sequence[0] = 0.7  # Chaotic map initial value\n        for i in range(1, length):\n            sequence[i] = 4 * sequence[i-1] * (1 - sequence[i-1])  # Logistic map\n        return sequence\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(self.chaotic_sequence[evaluations], 0.5, 1.0)  # Use chaotic sequence\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Improve exploration by introducing chaotic map-based parameter tuning for enhanced convergence.", "configspace": "", "generation": 63, "fitness": 0.3575331449922397, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.8227238232105492, 0.8199264185181412, 0.8028609462717481, 0.8034872370361228, 0.8117549068528194, 0.8202049391852999, 0.8056515862536044, 0.8140994391965064, 0.809413105322622, 0.688172167652479, 0.6871799438553918, 0.6424966646288925, 0.6911825438520114, 0.6694795882799122, 0.6613019948439038, 0.6762149775208283, 0.6879778300715189, 0.6863083071326401, 0.47447684702963655, 0.3897107886882928, 0.15696793165574396, 0.40524755444628735, 0.5604082299785818, 0.26171618802490093, 0.4704569137452157, 0.1591163325844711, 0.31497675724182317, 0.13666080923140977, 0.408802042298296, 0.2517743298789755, 0.13074896976933725, 0.2937091421455984, 0.22472117803996683, 0.41062607109097027, 0.2516257939907868, 0.12683590636296116, 0.9290619713312184, 0.9550971574473078, 0.9223392374513746, 0.9537931579746242, 0.965316451722227, 0.918638939923698, 0.9440155416532784, 0.9408106696558824, 0.9267084131894824, 0.47443932987920534, 0.4984142990415791, 0.47364028960908733, 0.4707514672741696, 0.47184226925251727, 0.5131413236418032, 0.44315129142612497, 0.40378774040482135, 0.41376681076381505, 0.6763906761948382, 0.7317144696707087, 0.7504120995556871, 0.7561807146210823, 0.7524280785806359, 0.7428607464188556, 0.703132565390225, 0.7181958421107009, 0.6378297582554822, 0.17637782274320468, 0.21503451103458338, 0.1830975683598548, 0.21536484785786414, 0.23315550492515058, 0.1767190308736042, 0.2020493347610135, 0.21463516094713575, 0.17908286037567034, 0.19801257529281424, 0.10943127590554924, 0.34699002076532337, 0.19869053213807064, 0.18969995204848633, 0.18055713913785554, 0.24020724339830857, 0.17945503619503123, 0.22560735944047206, 0.1173069850577414, 0.06607916150105553, 0.07507402148983078, 0.0638518020101081, 0.09605438568832181, 0.0470372717544606, 0.13512894322346625, 0.105017672801343, 0.11330459218627698, 0.21694927182854995, 0.1703245186996022, 0.2112113009265877, 0.13780431774764623, 0.20994583856874482, 0.12344288731849307, 0.18688192593498587, 0.11148484489668808, 0.2579568993415666, 0.1001946154666693, 0.08302410342051048, 0.11860858211191438, 0.17453695352765353, 0.10794555561984975, 0.08959788963703719, 0.16426826648067183, 0.22206649251523358, 0.15767783840976257, 0.20740485069223347, 0.16037596044014313, 0.21564205809945625, 0.22921614248305822, 0.28717597768280134, 0.3181491758095931, 0.3012534832974957, 0.23390009102295795, 0.17592903568685792, 0.6124823459093477, 0.4891908745547141, 0.5503062227510047, 0.56231153251897, 0.5763556198743105, 0.5233443881807321, 0.6225051220129231, 0.5444559645584783, 0.5328978822756469, 0.10294419891508877, 0.11305926311908299, 0.11416648438897903, 0.1181847513839901, 0.11117024459655456, 0.10020448349718158, 0.10875454454253564, 0.10404034881421231, 0.11078002265684317, 0.1427728628297471, 0.46869829761232695, 0.19042773057386186, 0.3648032373084684, 0.27479605437438226, 0.1966849940506138, 0.19445031454301942, 0.2110987239589831, 0.16063334538785223, 0.392690959725864, 0.4067028672019859, 0.4582713415772758, 0.41599182804144463, 0.37938314798332495, 0.3878268502915442, 0.44946051676070276, 0.449591719663216, 0.4178984747919279, 0.33022835606164314, 0.2743176950577868, 0.2921716701777719, 0.31282438064429885, 0.2955562081829216, 0.32461893416459475, 0.30077999479914175, 0.3016642599587289, 0.32412899679784835, 0.20521384654731212, 0.18242721223646896, 0.19490628683579525, 0.18962228510216972, 0.19941710707881244, 0.21272905172523549, 0.19923355864672843, 0.18791779930539154, 0.2160888698394008, 0.37127891961733095, 0.20918544611859258, 0.40178347355057165, 0.3597321882517722, 0.5954679071513141, 0.3300419623850507, 0.5684398664315298, 0.343701812248697, 0.209944832660526, 0.1996357476094821, 0.6532961735095064, 0.16322049013798334, 0.7409931261079988, 0.18088863306394487, 0.7995786260545144, 0.622807964465639, 0.18266590488431889, 0.7324337279543613, 0.709645216566721, 0.7331912462815915, 0.1964632416695935, 0.1990909132685278, 0.16467435893705407, 0.19653958706745966, 0.20936250457093708, 0.20878421573770667, 0.643871671295807, 0.17704106062174674, 0.18849426756137633, 0.1810701668627296, 0.19351047004645539, 0.20041917657093544, 0.18289057387276764, 0.18796603165524262, 0.18328965621080817, 0.17970396963074275, 0.08429520860664941, 0.08502241288048296, 0.0963429066432735, 0.08661409866695935, 0.08123639501202273, 0.07746540244955047, 0.07686528238118173, 0.07816474048227051, 0.08399265827281999]}, "mutation_prompt": null}
{"id": "fcd7838b-fcfb-4c35-92f3-6ca6c171ed9f", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "ff63212c-f2c0-4e64-a3ec-7aba6e2fac4f", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "2fcbad70-7ac2-4493-bfb6-37f5ee90418c", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "4f2600e5-99d2-4b24-aa13-5d89ce56daf1", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "2e3b56f8-b11b-42f4-9b16-709dd228d287", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "1e094f5b-31bc-4960-83e0-558560113a89", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population with elite initialization\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        best_init = np.mean([func(np.random.uniform(self.lower_bound, self.upper_bound, self.dim)) for _ in range(5)])\n        population[0] = best_init\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.4 + 0.2 * np.random.rand()  # Slightly adjusted adaptive scaling factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Refined Hybrid DE with Adaptive Scaling Factor and Improved Global Search Strategy using Elite Initialization.", "configspace": "", "generation": 69, "fitness": 0.3291391406968849, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.8332700997663534, 0.6192148048152256, 0.6577992665987709, 0.7118279172111135, 0.7670112618053365, 0.7088252358643804, 0.8355277311372475, 0.6763531998453273, 0.843838529668878, 0.41293536920752294, 0.2439202600794238, 0.7244226865866317, 0.3694991172514428, 0.47020283446299693, 0.45270181107170315, 0.3396967003321314, 0.5224467802093185, 0.3272071098024145, 0.1556400805347945, 0.13639888312941728, 0.21217283814516108, 0.13463027919050186, 0.15225072584987887, 0.16482581115684958, 0.1626986588805841, 0.22410590561430377, 0.15487944740728254, 0.11910845164923867, 0.13922462149810266, 0.13541145213065264, 0.15464980999570221, 0.13918113507648322, 0.12647560832966498, 0.10569586345677195, 0.11752958879639086, 0.10762744378634781, 0.9305893986202576, 0.907893119062454, 0.9204081291225708, 0.8890105910159251, 0.8995638691862672, 0.8952351599422278, 0.9265786196010442, 0.9030943292813266, 0.8989780007727016, 0.37934408482515136, 0.3628809381297772, 0.4295566288570306, 0.37499989316530924, 0.40641519854807073, 0.4807514730374838, 0.3787089682301925, 0.4310918222511686, 0.3907777555080938, 0.3742801710536984, 0.8074435667986316, 0.834352694412237, 0.8320575561521164, 0.8792206842111531, 0.8209035130454165, 0.6999937642551308, 0.8252820880367404, 0.7206993367040221, 0.17643966517495047, 0.17184827098074096, 0.20575711280535003, 0.2250269578921995, 0.1258652969090268, 0.1726783132134837, 0.17521969367173174, 0.17661927994393323, 0.20518937502749923, 0.1744557630380792, 0.20404489535006087, 0.16076084780573385, 0.19031248674624646, 0.21176812708409132, 0.20798982625357965, 0.20077137011601265, 0.172842465316022, 0.2220585765984726, 0.1715812145323753, 0.008855835236029064, 0.14221543533569003, 0.06044030410038337, 0.047166757444889074, 0.07062250469707565, 0.22855663827133188, 0.19066560818946232, 0.15357129465810426, 0.19695787898086514, 0.21576138388019128, 0.1738683327649001, 0.22944573479223607, 0.22119734596647922, 0.27021064322459964, 0.2636307323717054, 0.313306244804469, 0.2637849704471763, 0.14669650259650246, 0.11873623281435608, 0.04524287512021141, 0.12927689685885557, 0.09671514610668042, 0.11039995380169654, 0.14049756998985174, 0.28345451178858094, 0.19608595661037675, 0.17685681822720034, 0.17625289473963346, 0.19549275280364364, 0.17012357694214675, 0.3445732061785657, 0.3674885104080927, 0.29542072654275175, 0.21709065441174757, 0.12738023061800008, 0.47877190062832253, 0.5058595386173426, 0.5370359747994357, 0.5224413843658569, 0.5509050284565112, 0.5238932195160593, 0.565596408765008, 0.49762405167727164, 0.5515891560230317, 0.13476850735289625, 0.15573860691075225, 0.15724623377241764, 0.1380223879183997, 0.10651981607234595, 0.1580283580155155, 0.11369058253623676, 0.1115083714707289, 0.14175347927713577, 0.22457443667209054, 0.2057295716600288, 0.2933654829483211, 0.18169747315861984, 0.27177471963018207, 0.4194713229637066, 0.24344081684907526, 0.349732231665839, 0.1776191270219144, 0.42332210851152163, 0.39064186347724617, 0.3677790879133137, 0.38451828977131963, 0.36364710082276375, 0.6343781142992, 0.39464856226533107, 0.38171650294341775, 0.4697072546082177, 0.300762365190833, 0.3367961074164809, 0.3477370585250674, 0.34346298730587843, 0.41140877014949395, 0.4067733566036523, 0.35148267470210137, 0.42912215772453954, 0.30424845661400235, 0.2244811573395865, 0.1865865927041057, 0.21375389580071769, 0.2099185167706057, 0.21528092876505178, 0.18782665030208867, 0.20621867387179094, 0.19485357044866536, 0.20153033565624756, 0.514000305985415, 0.39273645211966546, 0.37123911471293114, 0.19795083706027106, 0.21877737104911865, 0.21172877137539814, 0.2384463371371578, 0.21758836309256768, 0.19295189227051068, 0.1697527467560691, 0.8401604648462422, 0.8084738243176806, 0.17195905506306752, 0.18119746662691072, 0.1885716746525289, 0.8222909539177119, 0.7435527451200787, 0.2067999960425545, 0.5345455075274037, 0.22282535704739026, 0.7351378300404776, 0.20175732750680697, 0.5376433710288225, 0.2014365073053016, 0.2091526576070467, 0.2063366131793276, 0.20333152472708538, 0.1825413403831707, 0.17371670948052087, 0.19954680855736784, 0.1909606117899718, 0.19718864964046567, 0.18871200106958796, 0.1773883245986002, 0.18048982655744983, 0.17924032559885905, 0.08625621151382634, 0.09021859085682249, 0.07572182023154672, 0.08812958695924955, 0.08107280787128279, 0.10254530977981335, 0.08536748931022353, 0.08550672884776744, 0.08951397576216769]}, "mutation_prompt": null}
{"id": "32f14bfb-2103-4f79-b877-a1f29be5feb4", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "64420163-7f2c-4f89-812b-47df8345a59e", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population more diversely\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        # Evaluate initial fitness\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.4 + 0.2 * np.random.rand()  # More adaptive mutation factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.015 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "An improved Hybrid DE with more adaptive mutation scaling and enhanced exploration through diversified population seeding.", "configspace": "", "generation": 71, "fitness": 0.33762048273359446, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.7931844915325272, 0.7344400139252607, 0.8112925900847856, 0.8362826260320035, 0.669016968947708, 0.6801556283330707, 0.7991457434623368, 0.8299904886156333, 0.6998231088175091, 0.6334510969306832, 0.4717584825637069, 0.42141189494385933, 0.42282730766513077, 0.233918349361655, 0.49333713881380226, 0.5236321097584439, 0.6427919040230083, 0.3713188551604808, 0.14664346624587288, 0.1693601474755957, 0.20593092578978334, 0.14178995030263464, 0.1386675811189716, 0.15207643329021991, 0.14436412127305953, 0.12223618943455405, 0.1367958617416185, 0.14310333982545453, 0.12284894907252741, 0.12970488974520633, 0.1704207433931022, 0.12288446167887301, 0.1326538627091126, 0.15680899090721445, 0.12506092080028008, 0.18049930181042984, 0.9034455749802794, 0.9372450426779583, 0.8973053561610619, 0.8958070043362798, 0.9145918874246854, 0.9030491528028767, 0.9086900899636329, 0.9166593884610348, 0.9022043550068054, 0.4580344131860664, 0.3425533621807966, 0.4169512478215718, 0.351690789019938, 0.35547551350182416, 0.3762614694330433, 0.3822515065989601, 0.3530719854681523, 0.4064180371213115, 0.7992437531272696, 0.8096808624380157, 0.825860246015092, 0.8340094925394211, 0.8530088605318632, 0.8202489988784423, 0.805318006627584, 0.342210365461766, 0.8108847915688224, 0.2185545482284954, 0.18558208883638572, 0.17513885484314906, 0.16560121926596805, 0.18900319516385455, 0.17764408752622007, 0.180848317887639, 0.16841120660350006, 0.17202408876027397, 0.15066493848300655, 0.17830557761952182, 0.170867831998873, 0.1862060074780557, 0.216111591212521, 0.20898020518580174, 0.1799619123233258, 0.23749740582800838, 0.20114346648211479, 0.1864313542261612, 0.17039573559661259, 0.11912549834687325, 0.12251991345860447, 0.1902924494923811, 0.16811584437880267, 0.17936022492028036, 0.07998095518136195, 0.07370023029937167, 0.2179359931307694, 0.30123992898719365, 0.3238805253464778, 0.2608173542651584, 0.1589577933704318, 0.1784402187255022, 0.25039097907910124, 0.16518343917801703, 0.31110125302753955, 0.1396057825796999, 0.19247098891935388, 0.07459272603966327, 0.10401847609162729, 0.20207838034494585, 0.148950382163619, 0.1684184724942286, 0.10200504222051043, 0.20561213492905495, 0.2526946129378159, 0.2653565630024356, 0.23224023598133148, 0.2549505280448062, 0.15711900556224412, 0.2875080526925826, 0.23247172932908644, 0.39524363540034124, 0.1802802989776967, 0.5044229043354524, 0.4871060678953222, 0.5407039761292995, 0.5049880783020517, 0.5080170069876986, 0.5432668459149926, 0.5711967421007491, 0.5238463901094208, 0.6164660186130839, 0.1328871880751853, 0.13484658013978734, 0.13553152712677352, 0.14172682710379014, 0.09231774188262876, 0.12646215535672223, 0.14053274030339924, 0.11675501804582, 0.10148551527365202, 0.21338497254241284, 0.30740402821541035, 0.18272432891628354, 0.1858812926015615, 0.1981595114535889, 0.2639904906026316, 0.30031990358279603, 0.2863415498310635, 0.2272548960189935, 0.3968049008687512, 0.4551350752381551, 0.4288827370399684, 0.3247550784744493, 0.40439839274732114, 0.4605008041382487, 0.49973910928992804, 0.44706716734405616, 0.3484901882878221, 0.37312222583394905, 0.2989284254087875, 0.2915343994422208, 0.3084316867960213, 0.2977711544656315, 0.40107336268960914, 0.324866789483628, 0.32397369932081566, 0.3258367190922069, 0.20657763384591699, 0.2078853455727403, 0.1993692169955853, 0.20095411161061572, 0.20889020756861276, 0.2146667140036015, 0.20997749526249532, 0.19856912873903942, 0.231063877779625, 0.23155152918676447, 0.20236223582369206, 0.23743650734187105, 0.35271309773796233, 0.23096962798578846, 0.2355670645217962, 0.19852334257633508, 0.40364618901302496, 0.5618013234326292, 0.16632170319767536, 0.8072411272295461, 0.14969108055927904, 0.8274661916162418, 0.8394647005776126, 0.8374671627337588, 0.17991634422726288, 0.80228877661214, 0.7612510363978886, 0.6480438122350295, 0.20745485717520618, 0.1622300336146496, 0.20763053784816088, 0.6040389282666889, 0.6995303532557832, 0.20768444575560197, 0.207283698939963, 0.2092248481240887, 0.1812923808132627, 0.18512653189169614, 0.17851254651434045, 0.1802248418884248, 0.18665117994365932, 0.19203403066511782, 0.18698448931963585, 0.17129065930632825, 0.18881014238021931, 0.093189964055296, 0.09106285431016337, 0.07696855332551311, 0.08822665853302736, 0.08101066163844006, 0.08773793554839282, 0.07801143655021792, 0.08975700097229633, 0.08521213064449662]}, "mutation_prompt": null}
{"id": "80e88a0d-7d90-4107-a07a-ce5a7f638d0e", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "ddd41f7e-1f02-4bc0-8d7b-b483f6998364", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "b403d169-4223-4e32-b708-57c7c70d22b1", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "7def67da-94e8-4011-966a-de549a67eaad", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "cc36ff29-1c4a-4ee8-9780-922ddc7d4f51", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "055a6564-530e-4761-8525-9b1919b0e65f", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "9f9b9f7b-96fa-4688-9b2f-ac558984db6b", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "d0f58625-2ea5-4024-a6a1-5dd251bca1bc", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "97618252-bd44-4d8e-bd9b-5727873af903", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "90588813-068f-4f2a-93ed-b8ff941ef20c", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "eeb3c76a-287b-4cde-9c66-c62edcacc0b0", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "122514fa-de6d-40fc-bb56-e31c5db23726", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "d9a2e060-b4dd-4df8-85a5-3ad221c884fa", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "ae16548b-4618-4b09-b488-81030c734705", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand() * (1 - evaluations / self.budget)  # Adjusted Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.05), 0.5, 1.0)  # Reduced variance\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced exploration and convergence by introducing a dynamic differential weight and adaptive crossover variance reduction.", "configspace": "", "generation": 85, "fitness": 0.34071344968852196, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.6427036355989868, 0.571498745129529, 0.822820047652547, 0.828679007070626, 0.8018245098661771, 0.8220608003028242, 0.8208128973755955, 0.8136747506248334, 0.7714182798531282, 0.5182759535124088, 0.2710556695944101, 0.686767716142993, 0.6802549044778894, 0.6661119918285174, 0.5998666624839252, 0.6299281216374844, 0.7006574128346088, 0.5596426127361069, 0.15423478164583393, 0.1551263478106255, 0.12380501622995566, 0.1268727285259349, 0.1375362826069466, 0.23288176906619817, 0.15938610942338471, 0.13056128767835795, 0.13161686264598538, 0.15616392922418376, 0.12779938813291702, 0.12303202507069999, 0.11762741299090307, 0.11819517221144582, 0.13325338078594973, 0.11476015831295427, 0.1195590263805667, 0.15143625966992535, 0.9712067686266724, 0.9585800103754145, 0.9012749419555862, 0.9068534117835152, 0.9511021720512419, 0.8932264062475085, 0.9072422785712517, 0.9084151513402653, 0.9032455688466527, 0.43602951044437344, 0.3726634321340524, 0.49929377201168157, 0.4642015374904187, 0.4061785545399249, 0.4251437815700593, 0.5130215859432987, 0.476657221784469, 0.5461015535448035, 0.7969352592888617, 0.7929058630161909, 0.8051181116404682, 0.34631890189413006, 0.8122881677825229, 0.7944465497877434, 0.8057072982811699, 0.740878596439832, 0.8065186749883957, 0.2100965122482218, 0.17875303912125595, 0.19724661851825576, 0.20118879794757794, 0.1851283722980429, 0.21355363777085667, 0.21175449864109774, 0.19392408612786827, 0.16652360209517925, 0.23511792367580298, 0.1571914420011411, 0.1972391741535181, 0.17667756713356375, 0.1625270768260889, 0.23452236602251952, 0.19792742839333655, 0.19718511428289298, 0.1958962632191752, 0.11979879449070518, 0.13953875925693005, 0.18135802107295174, 0.18711371339645122, 0.16295162530456841, 0.1665725282477717, 0.20544402727506894, 0.11554277937003044, 0.04535655763234936, 0.2682139766735503, 0.346314984716366, 0.2726626738358179, 0.3240328576764113, 0.23860166730897114, 0.24994662359669084, 0.477803261310083, 0.2737827989915371, 0.2781111977305474, 0.18213268566405683, 0.03667817686550712, 0.16536261067835845, 0.1102507798223471, 0.13067428101708756, 0.17336669468686783, 0.11579461942478952, 0.1119658094626268, 0.11128740573937324, 0.2468575061371967, 0.21861120112168597, 0.24488337770636126, 0.3007697116898579, 0.25749526734234884, 0.16474179477733486, 0.21356590077546111, 0.33182444758387397, 0.36347565294629103, 0.5351613470112285, 0.6952044484759905, 0.5574374507201434, 0.4773453429993586, 0.552497023954704, 0.6496657160450552, 0.5254890490914211, 0.5073735898126848, 0.5800761464582217, 0.16997882770047068, 0.11345526657348126, 0.1331547230253376, 0.1374758572916206, 0.09964558454398598, 0.089576376632581, 0.12912407606222243, 0.33283217139694665, 0.14315052160831454, 0.19912984693247626, 0.3073491775384294, 0.2714096709231262, 0.23804322187315197, 0.259303117787275, 0.1807283580546517, 0.257511348837432, 0.26159468933805674, 0.18396132823250988, 0.3790746155533169, 0.4361385462485199, 0.44020136279206823, 0.3816555268714178, 0.4045435584324938, 0.4293756120776189, 0.4721005391318033, 0.5327023780416162, 0.43840964715220043, 0.3466826899627552, 0.31476318809354686, 0.34027199167082456, 0.3211505675113775, 0.31662943581370684, 0.3631219084748212, 0.330211412609688, 0.3525189588860028, 0.3391560157451845, 0.20441503396192062, 0.21256549651162615, 0.19014686433550965, 0.1811911013142048, 0.2108665744604693, 0.21680127490769985, 0.196842436450408, 0.22328426424932546, 0.2033598768772299, 0.22995569990452092, 0.21692619610114938, 0.23503771455713307, 0.3932640177078772, 0.21842994284935646, 0.2168300294941199, 0.22492144694051774, 0.21637636545752803, 0.2983998980245597, 0.2104807943348459, 0.162123018798488, 0.8025330926848344, 0.7785532790331949, 0.19093766444237037, 0.8135696740387249, 0.1534215160147756, 0.1769452607567935, 0.1663055821477768, 0.6808880838182163, 0.20586819692149616, 0.15919793980609498, 0.1672350780109768, 0.6248395155874209, 0.7949327304854364, 0.20684072018128785, 0.2056406132674412, 0.14885587299810066, 0.174313816938791, 0.18720032130738973, 0.1685198144697999, 0.176536462347747, 0.1952464003345985, 0.18198414148902897, 0.19909103612188173, 0.17918287423774182, 0.18215454172621126, 0.08560291603087966, 0.0844516188012705, 0.08391402555080019, 0.07936887584342345, 0.09215498308534531, 0.08136570326203707, 0.09327907678463365, 0.0896046597289023, 0.08617373191650746]}, "mutation_prompt": null}
{"id": "d8f44fd2-1447-4c12-8892-66522f9d9ecc", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "714533c6-bfbd-4057-b112-933341d1724e", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "159febd1-45db-4d3d-bcb2-94e00dc7a1c6", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "9f02880d-3a10-4ab1-83a9-f9a8775678c3", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "4ecceffc-d4ea-4878-a16b-31252a2ce65b", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "e8f16f78-5afa-456d-9450-780477b636c8", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "7edaf64c-9262-4ff5-9d49-8cee6acc3222", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "604f7b03-d3e1-42ac-8bb0-dd0646f25c08", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "9301c82b-9a84-4215-9ccd-9fc5610dfc17", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "8df2a2d6-2346-4304-9b47-79dda70302b4", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "b867726e-be2f-4a0d-911c-aedf2319bf4b", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "f71c9b1b-fc2d-40ca-b8dd-3fe12cffa7c6", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "94cb2c2a-f97b-4407-b851-5755ac25e3be", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
{"id": "d4e0ecbb-58ff-4a9c-836a-6144a3f8c406", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            if evaluations % (self.budget // 10) == 0:  # Dynamic Population Resizing\n                self.population_size = max(self.dim, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.random.rand()  # Self-Adaptive Mutation Factor\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                self.CR = np.clip(np.random.normal(0.9, 0.1), 0.5, 1.0)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i][j] \n                                  for j in range(self.dim)])\n\n                # Adaptively scaled Levy Flight for exploration\n                L_scale = 0.01 * (self.upper_bound - self.lower_bound) * (1 - evaluations / self.budget)\n                if np.random.rand() < 0.5:\n                    trial += self.levy_flight(L_scale)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELevy", "description": "Enhanced Hybrid DE with Self-Adaptive Mutation Strategy, Dynamic Crossover, and Adaptive Levy Flight Scaling for improved convergence and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60913189-0651-4d9f-8f9e-cae1fbc7c2ff", "metadata": {"aucs": [0.812438570459165, 0.817554070177209, 0.8195898374225561, 0.8008437766958264, 0.8019540970941217, 0.8113786026380054, 0.808308554281864, 0.8163698034031731, 0.8210473639287965, 0.696207391131619, 0.6969498761994333, 0.6975777136939618, 0.6822298636346404, 0.6083413199918141, 0.4475403955928686, 0.6807386801770275, 0.5314172173571623, 0.6896761699166902, 0.131908032511312, 0.14807585920254474, 0.15304697652818378, 0.14721243939001105, 0.14213405183182914, 0.12888285929192955, 0.1346342698764592, 0.13266525010531827, 0.1482477192549566, 0.1135036418709342, 0.14305208362065536, 0.16730775256639574, 0.12417880154096783, 0.14661837128538824, 0.14368648309357157, 0.12411586972228306, 0.13968162227677072, 0.11650403407299292, 0.9035300970161703, 0.9095075806308186, 0.8657451885494754, 0.9357723784664407, 0.9161230787963905, 0.9270336821560229, 0.9065891715413229, 0.8739040959368497, 0.9101364261596433, 0.4872005555156236, 0.5609574992938392, 0.4728323855109937, 0.4466004392136427, 0.3643661769009765, 0.5518410893320012, 0.4747525981163161, 0.39717606543878525, 0.5182760435025242, 0.7771312071272071, 0.7724524440276704, 0.8153215080501844, 0.7942326237620199, 0.8090572529214043, 0.7815123843814289, 0.8075101440332239, 0.8411979713058806, 0.8058006761442013, 0.18484529076521472, 0.17775270252638053, 0.17086005190606357, 0.18362360041315817, 0.2098334835210247, 0.18557558110290817, 0.198055390325108, 0.22254513447613467, 0.18987398958671553, 0.1163541242475743, 0.11707127643483872, 0.18990571130485145, 0.18172322791649775, 0.21419349472690752, 0.2501271015457408, 0.1878078012981207, 0.16083720464007145, 0.20193580150624324, 0.2175931171319644, 0.09762719619226368, 0.2272846455707005, 0.20933193744857248, 0.17412891264844443, 0.17735443612077195, 0.15680891376163053, 0.12634038096468303, 0.22510706457397833, 0.2574632886288728, 0.28379021165681106, 0.2997223912787078, 0.4156091138584175, 0.16309863063957997, 0.17893392979888745, 0.2737313667496073, 0.2561145278844329, 0.30011938868081556, 0.10678525196735134, 0.2194076694081758, 0.20182329347292494, 0.21641497766151518, 0.1491299096567147, 0.17122063165882795, 0.15899076288095781, 0.12595798269112723, 0.2642690991030824, 0.2690050410751331, 0.18047961412803015, 0.2380877295776328, 0.3001506107479669, 0.31448944301323567, 0.39017159094873155, 0.2823321646924192, 0.151511748685633, 0.24945579114913596, 0.48963132404723175, 0.6243561685630965, 0.575638238438285, 0.5910687764603346, 0.5360985824784772, 0.5947307776721611, 0.48839006492701287, 0.5802335349638079, 0.5964577900377299, 0.11760660863664785, 0.11880794901873537, 0.11935508877263223, 0.14237578451465638, 0.10967218314898675, 0.13427755484806436, 0.09991897775807779, 0.11902612779851007, 0.09490713785014182, 0.23346349086612184, 0.19591336103960244, 0.35694401726213487, 0.40656686857725144, 0.2817425990942226, 0.1919089366949368, 0.29419559661387984, 0.2979926953261851, 0.16134049420997565, 0.481108242476724, 0.42494120973121363, 0.36060249481711515, 0.4165770034975941, 0.534332566997019, 0.3897444418117426, 0.4375221487266221, 0.4464607231331158, 0.43753590233649, 0.31357827997900334, 0.28141524679828667, 0.35899986414564566, 0.3254218361516269, 0.3465360242233031, 0.33703838772278827, 0.3836058268775151, 0.3417152559293736, 0.32091129832525545, 0.1904365629364635, 0.21521526757945797, 0.19122246524755093, 0.18649791847291297, 0.21010365160538136, 0.20338034141738137, 0.19538214287180433, 0.2088709847629009, 0.23075413740676842, 0.1957875995821431, 0.22536365932294733, 0.23361475581196478, 0.5495412823832948, 0.19382428843645516, 0.6902660083014058, 0.3544787558627044, 0.22082535667460912, 0.39908176913439397, 0.16558143472432751, 0.17782990352953343, 0.1518120140497602, 0.8182108538895632, 0.7949253207676574, 0.781252442842905, 0.7888042997216628, 0.20132697972335178, 0.8175541030675084, 0.7586015400549944, 0.1681432742508001, 0.7874634516070831, 0.19651229472622322, 0.16015838420329798, 0.751378301788002, 0.2096969212130737, 0.8117268017949513, 0.2000077261186315, 0.17953761728658868, 0.1862136607993049, 0.1961474123582312, 0.18964587449832415, 0.22599805156746977, 0.18860018476849483, 0.18080281526883368, 0.18197183997927768, 0.21289029011670568, 0.08113260666610678, 0.0902163414243885, 0.08320406515887047, 0.08276986051726909, 0.0871006605124327, 0.07050527513490068, 0.07534690769036878, 0.08207217815099499, 0.08373845117361911]}, "mutation_prompt": null}
