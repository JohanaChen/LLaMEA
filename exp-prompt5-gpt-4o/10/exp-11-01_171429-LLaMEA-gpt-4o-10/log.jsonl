{"id": "80e28854-64f8-4ec7-b0d3-69d21ad3fa8a", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.crossover_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridGADifferentialEvolution", "description": "Hybrid Genetic Algorithm with Differential Evolution mutation for diverse exploration and efficient convergence.", "configspace": "", "generation": 0, "fitness": 0.29514102538383197, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6987376822990776, 0.6741298813413815, 0.7073914528777259, 0.7051000222042355, 0.7204808693702898, 0.7214937301147204, 0.6925678459487936, 0.7018094272643566, 0.6917471457388696, 0.5041960979467954, 0.4712907367009206, 0.5357849891755215, 0.49579227877059073, 0.5003644186008043, 0.5132238531979574, 0.48965597967164187, 0.5108302901584574, 0.5184696692722998, 0.10699133864902266, 0.10130509842441549, 0.11436814716560717, 0.09419775919972284, 0.1076482389649247, 0.11240718557067142, 0.1191613319031758, 0.1499386488771861, 0.1025369539213623, 0.0974728881221838, 0.0927809352179142, 0.08855559565019955, 0.12001446508377955, 0.0927879110077019, 0.09580402184946857, 0.10090772729349262, 0.09254357936308932, 0.12279238270234749, 0.9495198476630846, 0.9450246825964396, 0.9572244146320835, 0.9504253719718878, 0.9710696093383018, 0.9580469548472611, 0.9608470217835581, 0.9726193681265658, 0.9836885133080541, 0.33083272842475575, 0.36039453634102103, 0.34827934732279864, 0.36109822837660865, 0.3344619222391222, 0.33373260323994003, 0.32610072744953145, 0.3486081674531276, 0.3814885982025993, 0.6237398935220314, 0.6022458354130674, 0.600204995713004, 0.5888805725293599, 0.5880900302526559, 0.6303697122733232, 0.6434674669119252, 0.5967038360969432, 0.5546429078948796, 0.23552688488914542, 0.23789908555691786, 0.2387496285275139, 0.2839730554724511, 0.3078007829756294, 0.28705536199808135, 0.25707487292196574, 0.2501281273507592, 0.23694340714871753, 0.021731906959677194, 0.05206494193240685, 0.2615244897075111, 0.22788903155613893, 0.28728818374231346, 0.2269942862597243, 0.2212689157509995, 0.24295368240467674, 0.22098898584881932, 0.14873945630394847, 0.10433283987091835, 0.12349237875349939, 0.1554449537756949, 0.15316934321924403, 0.12022753746293036, 0.14163341392175877, 0.13604348497129537, 0.1218772424696184, 0.25719654497852007, 0.25641085983446854, 0.2558932164164658, 0.21003800067677236, 0.22016209435393586, 0.24321638949050073, 0.2734515977448646, 0.2711813349531714, 0.27272674885516457, 0.034355848697450564, 0.046955598038386226, 0.04032276898376419, 0.04481120628054647, 0.026183229843530165, 0.06582756784313437, 0.07370092491035374, 0.062491843209715126, 0.05533721353479559, 0.17383598976800718, 0.17504188931521092, 0.17515198103024088, 0.18802910825118258, 0.17851727270339957, 0.19248332155107462, 0.16898302213996086, 0.16727432179745394, 0.17721988555216817, 0.5146956881258187, 0.49160971678550747, 0.5165227849683143, 0.5209961480850626, 0.525088415501821, 0.5051116772285372, 0.522395077727731, 0.50828786845699, 0.5186945320035234, 0.09136379955643892, 0.08441720952096965, 0.07689978168901601, 0.0883127150173334, 0.1013316839129117, 0.10438395005671353, 0.10438652212012567, 0.08609317163061603, 0.0840368801876793, 0.16625278478750183, 0.18943152367921134, 0.16666353223164365, 0.14039679936846627, 0.18051724875468333, 0.1473019992386999, 0.14261220168735056, 0.22366099746254797, 0.1438774509153118, 0.3007176892926001, 0.3095745514206002, 0.29704641958405087, 0.29130896703588616, 0.28502271160078685, 0.2870309937893608, 0.3324144981520407, 0.3386321755445233, 0.3422600139745914, 0.2193993271527419, 0.22584319379373674, 0.2232598955056443, 0.20525232056092824, 0.20331988713565396, 0.19817182466876204, 0.2461537229406694, 0.27131625718241936, 0.25728967060311514, 0.17546545282972348, 0.19276186182632205, 0.17987611307122875, 0.16855056895006204, 0.19761156494670262, 0.17542950806452795, 0.1909806429200812, 0.2133039674720768, 0.18395496007072065, 0.19276289981826011, 0.18425676700226545, 0.17097123967890604, 0.17867363555905336, 0.17846319446272374, 0.1766563230865913, 0.1807925146774858, 0.19645573568230779, 0.1865889062853615, 0.7220653048025831, 0.1799353417731503, 0.7217970129837901, 0.5892419689508737, 0.18250253599421007, 0.17957753669960153, 0.1778517431542206, 0.17946514625893084, 0.16471703694504536, 0.6378476163638525, 0.16512297491576378, 0.19066109000304632, 0.4889741996524748, 0.6159716108682276, 0.45111371236795617, 0.20160581402498923, 0.2079565195329507, 0.7061512437348667, 0.17939765170136757, 0.17917587025429382, 0.18008471616876576, 0.18516349084633088, 0.17063552148509442, 0.1915930133514514, 0.17719723927766484, 0.19681447939295893, 0.17733470684435237, 0.08315188474428725, 0.07773002414761665, 0.06839069998846303, 0.07410082146094099, 0.07814007880340923, 0.062380245348572894, 0.0743677484587717, 0.08491074845426816, 0.06771746005829371]}, "mutation_prompt": null}
{"id": "fc2b9a2c-436f-418f-aaf3-81716edd1af4", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.crossover_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridGADifferentialEvolution", "description": "Hybrid Genetic Algorithm with Differential Evolution mutation for diverse exploration and efficient convergence.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "80e28854-64f8-4ec7-b0d3-69d21ad3fa8a", "metadata": {"aucs": [0.6987376822990776, 0.6741298813413815, 0.7073914528777259, 0.7051000222042355, 0.7204808693702898, 0.7214937301147204, 0.6925678459487936, 0.7018094272643566, 0.6917471457388696, 0.5041960979467954, 0.4712907367009206, 0.5357849891755215, 0.49579227877059073, 0.5003644186008043, 0.5132238531979574, 0.48965597967164187, 0.5108302901584574, 0.5184696692722998, 0.10699133864902266, 0.10130509842441549, 0.11436814716560717, 0.09419775919972284, 0.1076482389649247, 0.11240718557067142, 0.1191613319031758, 0.1499386488771861, 0.1025369539213623, 0.0974728881221838, 0.0927809352179142, 0.08855559565019955, 0.12001446508377955, 0.0927879110077019, 0.09580402184946857, 0.10090772729349262, 0.09254357936308932, 0.12279238270234749, 0.9495198476630846, 0.9450246825964396, 0.9572244146320835, 0.9504253719718878, 0.9710696093383018, 0.9580469548472611, 0.9608470217835581, 0.9726193681265658, 0.9836885133080541, 0.33083272842475575, 0.36039453634102103, 0.34827934732279864, 0.36109822837660865, 0.3344619222391222, 0.33373260323994003, 0.32610072744953145, 0.3486081674531276, 0.3814885982025993, 0.6237398935220314, 0.6022458354130674, 0.600204995713004, 0.5888805725293599, 0.5880900302526559, 0.6303697122733232, 0.6434674669119252, 0.5967038360969432, 0.5546429078948796, 0.23552688488914542, 0.23789908555691786, 0.2387496285275139, 0.2839730554724511, 0.3078007829756294, 0.28705536199808135, 0.25707487292196574, 0.2501281273507592, 0.23694340714871753, 0.021731906959677194, 0.05206494193240685, 0.2615244897075111, 0.22788903155613893, 0.28728818374231346, 0.2269942862597243, 0.2212689157509995, 0.24295368240467674, 0.22098898584881932, 0.14873945630394847, 0.10433283987091835, 0.12349237875349939, 0.1554449537756949, 0.15316934321924403, 0.12022753746293036, 0.14163341392175877, 0.13604348497129537, 0.1218772424696184, 0.25719654497852007, 0.25641085983446854, 0.2558932164164658, 0.21003800067677236, 0.22016209435393586, 0.24321638949050073, 0.2734515977448646, 0.2711813349531714, 0.27272674885516457, 0.034355848697450564, 0.046955598038386226, 0.04032276898376419, 0.04481120628054647, 0.026183229843530165, 0.06582756784313437, 0.07370092491035374, 0.062491843209715126, 0.05533721353479559, 0.17383598976800718, 0.17504188931521092, 0.17515198103024088, 0.18802910825118258, 0.17851727270339957, 0.19248332155107462, 0.16898302213996086, 0.16727432179745394, 0.17721988555216817, 0.5146956881258187, 0.49160971678550747, 0.5165227849683143, 0.5209961480850626, 0.525088415501821, 0.5051116772285372, 0.522395077727731, 0.50828786845699, 0.5186945320035234, 0.09136379955643892, 0.08441720952096965, 0.07689978168901601, 0.0883127150173334, 0.1013316839129117, 0.10438395005671353, 0.10438652212012567, 0.08609317163061603, 0.0840368801876793, 0.16625278478750183, 0.18943152367921134, 0.16666353223164365, 0.14039679936846627, 0.18051724875468333, 0.1473019992386999, 0.14261220168735056, 0.22366099746254797, 0.1438774509153118, 0.3007176892926001, 0.3095745514206002, 0.29704641958405087, 0.29130896703588616, 0.28502271160078685, 0.2870309937893608, 0.3324144981520407, 0.3386321755445233, 0.3422600139745914, 0.2193993271527419, 0.22584319379373674, 0.2232598955056443, 0.20525232056092824, 0.20331988713565396, 0.19817182466876204, 0.2461537229406694, 0.27131625718241936, 0.25728967060311514, 0.17546545282972348, 0.19276186182632205, 0.17987611307122875, 0.16855056895006204, 0.19761156494670262, 0.17542950806452795, 0.1909806429200812, 0.2133039674720768, 0.18395496007072065, 0.19276289981826011, 0.18425676700226545, 0.17097123967890604, 0.17867363555905336, 0.17846319446272374, 0.1766563230865913, 0.1807925146774858, 0.19645573568230779, 0.1865889062853615, 0.7220653048025831, 0.1799353417731503, 0.7217970129837901, 0.5892419689508737, 0.18250253599421007, 0.17957753669960153, 0.1778517431542206, 0.17946514625893084, 0.16471703694504536, 0.6378476163638525, 0.16512297491576378, 0.19066109000304632, 0.4889741996524748, 0.6159716108682276, 0.45111371236795617, 0.20160581402498923, 0.2079565195329507, 0.7061512437348667, 0.17939765170136757, 0.17917587025429382, 0.18008471616876576, 0.18516349084633088, 0.17063552148509442, 0.1915930133514514, 0.17719723927766484, 0.19681447939295893, 0.17733470684435237, 0.08315188474428725, 0.07773002414761665, 0.06839069998846303, 0.07410082146094099, 0.07814007880340923, 0.062380245348572894, 0.0743677484587717, 0.08491074845426816, 0.06771746005829371]}, "mutation_prompt": null}
{"id": "2a121e50-e614-453b-9d75-7eba04393128", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.crossover_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridGADifferentialEvolution", "description": "Hybrid Genetic Algorithm with Differential Evolution mutation for diverse exploration and efficient convergence.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "80e28854-64f8-4ec7-b0d3-69d21ad3fa8a", "metadata": {"aucs": [0.6987376822990776, 0.6741298813413815, 0.7073914528777259, 0.7051000222042355, 0.7204808693702898, 0.7214937301147204, 0.6925678459487936, 0.7018094272643566, 0.6917471457388696, 0.5041960979467954, 0.4712907367009206, 0.5357849891755215, 0.49579227877059073, 0.5003644186008043, 0.5132238531979574, 0.48965597967164187, 0.5108302901584574, 0.5184696692722998, 0.10699133864902266, 0.10130509842441549, 0.11436814716560717, 0.09419775919972284, 0.1076482389649247, 0.11240718557067142, 0.1191613319031758, 0.1499386488771861, 0.1025369539213623, 0.0974728881221838, 0.0927809352179142, 0.08855559565019955, 0.12001446508377955, 0.0927879110077019, 0.09580402184946857, 0.10090772729349262, 0.09254357936308932, 0.12279238270234749, 0.9495198476630846, 0.9450246825964396, 0.9572244146320835, 0.9504253719718878, 0.9710696093383018, 0.9580469548472611, 0.9608470217835581, 0.9726193681265658, 0.9836885133080541, 0.33083272842475575, 0.36039453634102103, 0.34827934732279864, 0.36109822837660865, 0.3344619222391222, 0.33373260323994003, 0.32610072744953145, 0.3486081674531276, 0.3814885982025993, 0.6237398935220314, 0.6022458354130674, 0.600204995713004, 0.5888805725293599, 0.5880900302526559, 0.6303697122733232, 0.6434674669119252, 0.5967038360969432, 0.5546429078948796, 0.23552688488914542, 0.23789908555691786, 0.2387496285275139, 0.2839730554724511, 0.3078007829756294, 0.28705536199808135, 0.25707487292196574, 0.2501281273507592, 0.23694340714871753, 0.021731906959677194, 0.05206494193240685, 0.2615244897075111, 0.22788903155613893, 0.28728818374231346, 0.2269942862597243, 0.2212689157509995, 0.24295368240467674, 0.22098898584881932, 0.14873945630394847, 0.10433283987091835, 0.12349237875349939, 0.1554449537756949, 0.15316934321924403, 0.12022753746293036, 0.14163341392175877, 0.13604348497129537, 0.1218772424696184, 0.25719654497852007, 0.25641085983446854, 0.2558932164164658, 0.21003800067677236, 0.22016209435393586, 0.24321638949050073, 0.2734515977448646, 0.2711813349531714, 0.27272674885516457, 0.034355848697450564, 0.046955598038386226, 0.04032276898376419, 0.04481120628054647, 0.026183229843530165, 0.06582756784313437, 0.07370092491035374, 0.062491843209715126, 0.05533721353479559, 0.17383598976800718, 0.17504188931521092, 0.17515198103024088, 0.18802910825118258, 0.17851727270339957, 0.19248332155107462, 0.16898302213996086, 0.16727432179745394, 0.17721988555216817, 0.5146956881258187, 0.49160971678550747, 0.5165227849683143, 0.5209961480850626, 0.525088415501821, 0.5051116772285372, 0.522395077727731, 0.50828786845699, 0.5186945320035234, 0.09136379955643892, 0.08441720952096965, 0.07689978168901601, 0.0883127150173334, 0.1013316839129117, 0.10438395005671353, 0.10438652212012567, 0.08609317163061603, 0.0840368801876793, 0.16625278478750183, 0.18943152367921134, 0.16666353223164365, 0.14039679936846627, 0.18051724875468333, 0.1473019992386999, 0.14261220168735056, 0.22366099746254797, 0.1438774509153118, 0.3007176892926001, 0.3095745514206002, 0.29704641958405087, 0.29130896703588616, 0.28502271160078685, 0.2870309937893608, 0.3324144981520407, 0.3386321755445233, 0.3422600139745914, 0.2193993271527419, 0.22584319379373674, 0.2232598955056443, 0.20525232056092824, 0.20331988713565396, 0.19817182466876204, 0.2461537229406694, 0.27131625718241936, 0.25728967060311514, 0.17546545282972348, 0.19276186182632205, 0.17987611307122875, 0.16855056895006204, 0.19761156494670262, 0.17542950806452795, 0.1909806429200812, 0.2133039674720768, 0.18395496007072065, 0.19276289981826011, 0.18425676700226545, 0.17097123967890604, 0.17867363555905336, 0.17846319446272374, 0.1766563230865913, 0.1807925146774858, 0.19645573568230779, 0.1865889062853615, 0.7220653048025831, 0.1799353417731503, 0.7217970129837901, 0.5892419689508737, 0.18250253599421007, 0.17957753669960153, 0.1778517431542206, 0.17946514625893084, 0.16471703694504536, 0.6378476163638525, 0.16512297491576378, 0.19066109000304632, 0.4889741996524748, 0.6159716108682276, 0.45111371236795617, 0.20160581402498923, 0.2079565195329507, 0.7061512437348667, 0.17939765170136757, 0.17917587025429382, 0.18008471616876576, 0.18516349084633088, 0.17063552148509442, 0.1915930133514514, 0.17719723927766484, 0.19681447939295893, 0.17733470684435237, 0.08315188474428725, 0.07773002414761665, 0.06839069998846303, 0.07410082146094099, 0.07814007880340923, 0.062380245348572894, 0.0743677484587717, 0.08491074845426816, 0.06771746005829371]}, "mutation_prompt": null}
{"id": "a1accae1-a489-40a4-b1bb-7558e90bb405", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.crossover_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (evaluations / self.budget)  # Adaptive mutation\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < func(best_global):  # Elitism\n                        best_global = trial.copy()\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Adaptive mutation and elitism are introduced to enhance exploration and convergence stability.", "configspace": "", "generation": 3, "fitness": 0.34266142527806887, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.23.", "error": "", "parent_id": "80e28854-64f8-4ec7-b0d3-69d21ad3fa8a", "metadata": {"aucs": [0.7767047718569924, 0.7470759973614182, 0.7569108644180599, 0.7572437461487804, 0.7667260513834276, 0.7771480516089992, 0.7716700255512745, 0.7544327299936427, 0.7649310248020292, 0.562479280000191, 0.5645797016146725, 0.5796765147526173, 0.5866755682179787, 0.5775731471662756, 0.5552362848166583, 0.581790291615425, 0.5576945301154284, 0.5712288685752087, 0.11517068767075123, 0.12802639183662923, 0.11337422564849042, 0.11516502946287333, 0.11249100344053897, 0.11221481357532559, 0.12773414115303416, 0.11993737366790724, 0.11901641603779078, 0.09915400980120215, 0.10302790301993225, 0.10993954329956235, 0.11742353711392128, 0.11330145527686186, 0.11318508675983718, 0.11558440103006873, 0.119616282557516, 0.11256184368190714, 0.8488586786079456, 0.866170115418993, 0.8219535736942664, 0.925363863819641, 0.7010902004448372, 0.9385122246396864, 0.8587633102824422, 0.8606598761793749, 0.9323801289896073, 0.47885464728512483, 0.4761819498613111, 0.4206405659559751, 0.4329429927943804, 0.41688818990308396, 0.4210108041008892, 0.3696925509972646, 0.3957550348826461, 0.4461906285788737, 0.753798392151162, 0.7409091377933611, 0.6898319888951774, 0.777150424711298, 0.718103913360097, 0.7320493117034738, 0.7424540344123548, 0.7148121736271995, 0.733730311568775, 0.27937505106299076, 0.346349509240112, 0.24467528792656068, 0.2588778481560604, 0.2835506210481047, 0.34828370732805314, 0.23541814645066383, 0.2958037806591327, 0.23686717207552244, 0.048743579755743505, 0.2944834173591937, 0.2985251229189205, 0.1992478107984602, 0.25987592097675827, 0.2816311154626179, 0.3145906712506761, 0.2227221129622068, 0.2360585000933907, 0.2819216098997014, 0.23787854375908468, 0.2540179719368555, 0.2715466039926948, 0.21199275752284596, 0.21970571478407497, 0.27778352438182974, 0.2554752926896531, 0.27499277284263235, 0.42151429601976287, 0.39140700390397265, 0.4047124564358028, 0.3998389914095961, 0.4026052998883902, 0.42497538487566033, 0.4394462267746222, 0.41933941686559817, 0.43220998811592004, 0.11663196929760611, 0.06835361358494196, 0.12919478366186954, 0.11565933569339337, 0.160320633441561, 0.11410678227995763, 0.10873453091321916, 0.11989869344010917, 0.17739060615209523, 0.2188034758822195, 0.25064034971759697, 0.23758698653382393, 0.24423234734733257, 0.2693508765903916, 0.2697837148828782, 0.23920543928485027, 0.22876036134236488, 0.2616614129581639, 0.6179925085603439, 0.6184202922819748, 0.6341741954075808, 0.6212745450838077, 0.6373906627595709, 0.6125123100821217, 0.6120064243489136, 0.6308441045509725, 0.5922043129441626, 0.095956153182577, 0.1003700759677233, 0.10030293826852921, 0.09150633716863199, 0.1037772310212306, 0.10520207839005502, 0.08556840649363406, 0.10342304512551515, 0.09651550212124838, 0.1444373043049667, 0.1377752873957776, 0.14780713364905695, 0.20242455281202731, 0.15224763033879607, 0.17708811527230173, 0.15401610902189755, 0.13607037121485988, 0.15212594804540136, 0.3847931540647941, 0.3761139221473083, 0.3800212689905855, 0.40071689563949275, 0.38880644220324667, 0.38251210316382145, 0.39306513626912487, 0.4105755820288788, 0.3990508645491282, 0.2866669035815713, 0.268681415645049, 0.28509769252916684, 0.28315970060948625, 0.2781579433159803, 0.29451236460964214, 0.3183297537624581, 0.3146778453650604, 0.34862643708307217, 0.19522801990136518, 0.1853955745785434, 0.19807430983847785, 0.18547010744191317, 0.18202612547166785, 0.21580191932263915, 0.17780061803399672, 0.19969584439521304, 0.17931045701006532, 0.19155083167389864, 0.2760137114423883, 0.196949774729255, 0.21075270107923993, 0.24766660443394506, 0.20451149358858156, 0.17593504955445205, 0.21516124122068747, 0.1941146535546805, 0.755630222957085, 0.18014755183762832, 0.7276036692823896, 0.7677252873948397, 0.7601901970724787, 0.1846716132994125, 0.5674661133139345, 0.6330442059547756, 0.17997451949545606, 0.7354688664544042, 0.20241024648000983, 0.5994862820327851, 0.3566454870461927, 0.1973635425155701, 0.16565199610751113, 0.1494945569600582, 0.2066748151346972, 0.20540566398621962, 0.1829207788242727, 0.18311781186199994, 0.19012358335435897, 0.18126632992444325, 0.19875088331855928, 0.1803882629375948, 0.18885669682715223, 0.19949979727916567, 0.19574648673398254, 0.0832231158378054, 0.08169175753465463, 0.08124328907168876, 0.08612193628252485, 0.07599457534890042, 0.07749361807563326, 0.07431042415297084, 0.0748599716325421, 0.08753590077591467]}, "mutation_prompt": null}
{"id": "789739f5-d256-4783-b8f1-552e82d0ae30", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)  # Self-adaptive crossover rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (evaluations / self.budget)  # Adaptive mutation\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:  # Enhanced elitism\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce self-adaptive crossover rate and enhance elitism with a global best update.", "configspace": "", "generation": 4, "fitness": 0.386998079814044, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "a1accae1-a489-40a4-b1bb-7558e90bb405", "metadata": {"aucs": [0.8427445685615514, 0.8532599012536988, 0.8499649203289497, 0.8505705500577839, 0.8614249066544631, 0.851552492308643, 0.8561536678904079, 0.8384312613585068, 0.8587274041493829, 0.7218290994060832, 0.7182846901094748, 0.7178509376456236, 0.7283970536905975, 0.7238275473442313, 0.7603534593922039, 0.7476214694574772, 0.7372197623604886, 0.7289188635127037, 0.1803032117104102, 0.14505063777720384, 0.13430549584487295, 0.13641618784945386, 0.1667707635768364, 0.15979957197343608, 0.14311152785065528, 0.266531186133537, 0.4249939418555223, 0.12477995559197408, 0.12492488963252779, 0.11348500516827387, 0.1450492020472971, 0.14401560655318646, 0.1347591825370993, 0.1505078087268219, 0.1338649778665778, 0.13239699929410964, 0.8740632922587899, 0.9465904961343125, 0.8902459565519891, 0.9145603152058426, 0.9417676967592238, 0.9191078700479489, 0.9129924283496739, 0.9483497994470649, 0.9702832204318784, 0.5445671137663846, 0.5116156498578346, 0.5637455735050623, 0.5408204758357322, 0.5450935246435776, 0.5780119891492559, 0.5590508049279803, 0.5193482684602464, 0.4816023071875982, 0.785254291382177, 0.7521446343951562, 0.753833789930687, 0.8039032251407409, 0.820856796649226, 0.7955728671934901, 0.7598014351225385, 0.8086942360663121, 0.7711594056013353, 0.2443246383053279, 0.23998589030042927, 0.430226441805459, 0.2792668883984327, 0.4314542620114383, 0.3733071419534998, 0.3126734255020147, 0.2730083104998716, 0.38851689463202976, 0.2485367652135151, 0.34642109165812474, 0.22169629575350558, 0.23212092707428233, 0.29019622769405584, 0.2515536554721617, 0.3581248280697886, 0.30987393831765, 0.3381290073122425, 0.23140052620681728, 0.2415872092800715, 0.25082423335500925, 0.2905317456042388, 0.20490391834175725, 0.26678492539278964, 0.2579525105839918, 0.2507297457512715, 0.25583415456974856, 0.3463804755588421, 0.38321276426864237, 0.3953168641985493, 0.3688738617830881, 0.4343257691925765, 0.41941184849418434, 0.445339226170565, 0.42607158769093334, 0.433919547428507, 0.08189931637329351, 0.11301155583870026, 0.08819637045481232, 0.17476581289524895, 0.0798064331029753, 0.10816692322105703, 0.14254157408045953, 0.19977739501020475, 0.1187044781369625, 0.23803762875357093, 0.23187071925925506, 0.29135045124824566, 0.27801336474572513, 0.31122792927158827, 0.2819435837601393, 0.26279697055472806, 0.26471948509780874, 0.28621961900908766, 0.6545199308178672, 0.669651113714899, 0.677746262623939, 0.6532449563410037, 0.6500320484715763, 0.6544396878041795, 0.6665483527065615, 0.6676302630679567, 0.6796643427380775, 0.11965809733522459, 0.09483506486446791, 0.1013651228574769, 0.10255113741304522, 0.08750237041348918, 0.10115667395043115, 0.12948445387655505, 0.09688343787462095, 0.09518399663422328, 0.14717806175593795, 0.14771072285840037, 0.1650492115588893, 0.1555285832445623, 0.15575989643033294, 0.19902595197235673, 0.2578067882244761, 0.14745012046189054, 0.16888427942851358, 0.4414173048588712, 0.4488717522409653, 0.4762239408892345, 0.38878728752751146, 0.4509095500544421, 0.44864986170972654, 0.5226409155657092, 0.5300615994972395, 0.49032825595665674, 0.29904672030609003, 0.29738342172401167, 0.30093948588903086, 0.34458556179859345, 0.3380059200976644, 0.3202885892597288, 0.3689270453361464, 0.33103015525742385, 0.3497882798237898, 0.1951643028571426, 0.2023399568464337, 0.2114614141781027, 0.1896988948154813, 0.19365825514877033, 0.1876395607651854, 0.19832108368165347, 0.21121079206469495, 0.18836725928935094, 0.3405468143055679, 0.45752384389436074, 0.4802295509146153, 0.5619368037256878, 0.5606400693853244, 0.611792194446837, 0.47744563950625796, 0.2014541116897942, 0.21908714751176883, 0.19631210005376132, 0.701410273847928, 0.15148252121167438, 0.8256165578801931, 0.6974393203868419, 0.6776648808032173, 0.18708421829227262, 0.16607707892452495, 0.6851989153506883, 0.20220028418722935, 0.20388624045703796, 0.7464696634965904, 0.7427512683408237, 0.564786728725035, 0.16524402064927435, 0.2113875375260308, 0.20701873499335077, 0.10455780583762009, 0.18532087766259453, 0.18858555354855933, 0.21330186250008065, 0.1775607742372538, 0.17622217306704824, 0.20075153138034796, 0.19294860377754164, 0.17797964963243484, 0.17745562422517613, 0.08096181013371384, 0.08108647906118271, 0.08014265791878239, 0.07639187439237671, 0.07760376214515685, 0.08597445503242085, 0.0823277685610776, 0.08859241941440488, 0.0817916137850383]}, "mutation_prompt": null}
{"id": "7538c737-e968-440a-82b3-8020ff14ccc1", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)  # Self-adaptive crossover rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (evaluations / self.budget)  # Adaptive mutation\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:  # Enhanced elitism\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce self-adaptive crossover rate and enhance elitism with a global best update.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "789739f5-d256-4783-b8f1-552e82d0ae30", "metadata": {"aucs": [0.8427445685615514, 0.8532599012536988, 0.8499649203289497, 0.8505705500577839, 0.8614249066544631, 0.851552492308643, 0.8561536678904079, 0.8384312613585068, 0.8587274041493829, 0.7218290994060832, 0.7182846901094748, 0.7178509376456236, 0.7283970536905975, 0.7238275473442313, 0.7603534593922039, 0.7476214694574772, 0.7372197623604886, 0.7289188635127037, 0.1803032117104102, 0.14505063777720384, 0.13430549584487295, 0.13641618784945386, 0.1667707635768364, 0.15979957197343608, 0.14311152785065528, 0.266531186133537, 0.4249939418555223, 0.12477995559197408, 0.12492488963252779, 0.11348500516827387, 0.1450492020472971, 0.14401560655318646, 0.1347591825370993, 0.1505078087268219, 0.1338649778665778, 0.13239699929410964, 0.8740632922587899, 0.9465904961343125, 0.8902459565519891, 0.9145603152058426, 0.9417676967592238, 0.9191078700479489, 0.9129924283496739, 0.9483497994470649, 0.9702832204318784, 0.5445671137663846, 0.5116156498578346, 0.5637455735050623, 0.5408204758357322, 0.5450935246435776, 0.5780119891492559, 0.5590508049279803, 0.5193482684602464, 0.4816023071875982, 0.785254291382177, 0.7521446343951562, 0.753833789930687, 0.8039032251407409, 0.820856796649226, 0.7955728671934901, 0.7598014351225385, 0.8086942360663121, 0.7711594056013353, 0.2443246383053279, 0.23998589030042927, 0.430226441805459, 0.2792668883984327, 0.4314542620114383, 0.3733071419534998, 0.3126734255020147, 0.2730083104998716, 0.38851689463202976, 0.2485367652135151, 0.34642109165812474, 0.22169629575350558, 0.23212092707428233, 0.29019622769405584, 0.2515536554721617, 0.3581248280697886, 0.30987393831765, 0.3381290073122425, 0.23140052620681728, 0.2415872092800715, 0.25082423335500925, 0.2905317456042388, 0.20490391834175725, 0.26678492539278964, 0.2579525105839918, 0.2507297457512715, 0.25583415456974856, 0.3463804755588421, 0.38321276426864237, 0.3953168641985493, 0.3688738617830881, 0.4343257691925765, 0.41941184849418434, 0.445339226170565, 0.42607158769093334, 0.433919547428507, 0.08189931637329351, 0.11301155583870026, 0.08819637045481232, 0.17476581289524895, 0.0798064331029753, 0.10816692322105703, 0.14254157408045953, 0.19977739501020475, 0.1187044781369625, 0.23803762875357093, 0.23187071925925506, 0.29135045124824566, 0.27801336474572513, 0.31122792927158827, 0.2819435837601393, 0.26279697055472806, 0.26471948509780874, 0.28621961900908766, 0.6545199308178672, 0.669651113714899, 0.677746262623939, 0.6532449563410037, 0.6500320484715763, 0.6544396878041795, 0.6665483527065615, 0.6676302630679567, 0.6796643427380775, 0.11965809733522459, 0.09483506486446791, 0.1013651228574769, 0.10255113741304522, 0.08750237041348918, 0.10115667395043115, 0.12948445387655505, 0.09688343787462095, 0.09518399663422328, 0.14717806175593795, 0.14771072285840037, 0.1650492115588893, 0.1555285832445623, 0.15575989643033294, 0.19902595197235673, 0.2578067882244761, 0.14745012046189054, 0.16888427942851358, 0.4414173048588712, 0.4488717522409653, 0.4762239408892345, 0.38878728752751146, 0.4509095500544421, 0.44864986170972654, 0.5226409155657092, 0.5300615994972395, 0.49032825595665674, 0.29904672030609003, 0.29738342172401167, 0.30093948588903086, 0.34458556179859345, 0.3380059200976644, 0.3202885892597288, 0.3689270453361464, 0.33103015525742385, 0.3497882798237898, 0.1951643028571426, 0.2023399568464337, 0.2114614141781027, 0.1896988948154813, 0.19365825514877033, 0.1876395607651854, 0.19832108368165347, 0.21121079206469495, 0.18836725928935094, 0.3405468143055679, 0.45752384389436074, 0.4802295509146153, 0.5619368037256878, 0.5606400693853244, 0.611792194446837, 0.47744563950625796, 0.2014541116897942, 0.21908714751176883, 0.19631210005376132, 0.701410273847928, 0.15148252121167438, 0.8256165578801931, 0.6974393203868419, 0.6776648808032173, 0.18708421829227262, 0.16607707892452495, 0.6851989153506883, 0.20220028418722935, 0.20388624045703796, 0.7464696634965904, 0.7427512683408237, 0.564786728725035, 0.16524402064927435, 0.2113875375260308, 0.20701873499335077, 0.10455780583762009, 0.18532087766259453, 0.18858555354855933, 0.21330186250008065, 0.1775607742372538, 0.17622217306704824, 0.20075153138034796, 0.19294860377754164, 0.17797964963243484, 0.17745562422517613, 0.08096181013371384, 0.08108647906118271, 0.08014265791878239, 0.07639187439237671, 0.07760376214515685, 0.08597445503242085, 0.0823277685610776, 0.08859241941440488, 0.0817916137850383]}, "mutation_prompt": null}
{"id": "3afd372e-4e04-4861-97e7-23862fb6193f", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)  # Self-adaptive crossover rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (evaluations / self.budget)  # Adaptive mutation\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:  # Enhanced elitism\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce self-adaptive crossover rate and enhance elitism with a global best update.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "789739f5-d256-4783-b8f1-552e82d0ae30", "metadata": {"aucs": [0.8427445685615514, 0.8532599012536988, 0.8499649203289497, 0.8505705500577839, 0.8614249066544631, 0.851552492308643, 0.8561536678904079, 0.8384312613585068, 0.8587274041493829, 0.7218290994060832, 0.7182846901094748, 0.7178509376456236, 0.7283970536905975, 0.7238275473442313, 0.7603534593922039, 0.7476214694574772, 0.7372197623604886, 0.7289188635127037, 0.1803032117104102, 0.14505063777720384, 0.13430549584487295, 0.13641618784945386, 0.1667707635768364, 0.15979957197343608, 0.14311152785065528, 0.266531186133537, 0.4249939418555223, 0.12477995559197408, 0.12492488963252779, 0.11348500516827387, 0.1450492020472971, 0.14401560655318646, 0.1347591825370993, 0.1505078087268219, 0.1338649778665778, 0.13239699929410964, 0.8740632922587899, 0.9465904961343125, 0.8902459565519891, 0.9145603152058426, 0.9417676967592238, 0.9191078700479489, 0.9129924283496739, 0.9483497994470649, 0.9702832204318784, 0.5445671137663846, 0.5116156498578346, 0.5637455735050623, 0.5408204758357322, 0.5450935246435776, 0.5780119891492559, 0.5590508049279803, 0.5193482684602464, 0.4816023071875982, 0.785254291382177, 0.7521446343951562, 0.753833789930687, 0.8039032251407409, 0.820856796649226, 0.7955728671934901, 0.7598014351225385, 0.8086942360663121, 0.7711594056013353, 0.2443246383053279, 0.23998589030042927, 0.430226441805459, 0.2792668883984327, 0.4314542620114383, 0.3733071419534998, 0.3126734255020147, 0.2730083104998716, 0.38851689463202976, 0.2485367652135151, 0.34642109165812474, 0.22169629575350558, 0.23212092707428233, 0.29019622769405584, 0.2515536554721617, 0.3581248280697886, 0.30987393831765, 0.3381290073122425, 0.23140052620681728, 0.2415872092800715, 0.25082423335500925, 0.2905317456042388, 0.20490391834175725, 0.26678492539278964, 0.2579525105839918, 0.2507297457512715, 0.25583415456974856, 0.3463804755588421, 0.38321276426864237, 0.3953168641985493, 0.3688738617830881, 0.4343257691925765, 0.41941184849418434, 0.445339226170565, 0.42607158769093334, 0.433919547428507, 0.08189931637329351, 0.11301155583870026, 0.08819637045481232, 0.17476581289524895, 0.0798064331029753, 0.10816692322105703, 0.14254157408045953, 0.19977739501020475, 0.1187044781369625, 0.23803762875357093, 0.23187071925925506, 0.29135045124824566, 0.27801336474572513, 0.31122792927158827, 0.2819435837601393, 0.26279697055472806, 0.26471948509780874, 0.28621961900908766, 0.6545199308178672, 0.669651113714899, 0.677746262623939, 0.6532449563410037, 0.6500320484715763, 0.6544396878041795, 0.6665483527065615, 0.6676302630679567, 0.6796643427380775, 0.11965809733522459, 0.09483506486446791, 0.1013651228574769, 0.10255113741304522, 0.08750237041348918, 0.10115667395043115, 0.12948445387655505, 0.09688343787462095, 0.09518399663422328, 0.14717806175593795, 0.14771072285840037, 0.1650492115588893, 0.1555285832445623, 0.15575989643033294, 0.19902595197235673, 0.2578067882244761, 0.14745012046189054, 0.16888427942851358, 0.4414173048588712, 0.4488717522409653, 0.4762239408892345, 0.38878728752751146, 0.4509095500544421, 0.44864986170972654, 0.5226409155657092, 0.5300615994972395, 0.49032825595665674, 0.29904672030609003, 0.29738342172401167, 0.30093948588903086, 0.34458556179859345, 0.3380059200976644, 0.3202885892597288, 0.3689270453361464, 0.33103015525742385, 0.3497882798237898, 0.1951643028571426, 0.2023399568464337, 0.2114614141781027, 0.1896988948154813, 0.19365825514877033, 0.1876395607651854, 0.19832108368165347, 0.21121079206469495, 0.18836725928935094, 0.3405468143055679, 0.45752384389436074, 0.4802295509146153, 0.5619368037256878, 0.5606400693853244, 0.611792194446837, 0.47744563950625796, 0.2014541116897942, 0.21908714751176883, 0.19631210005376132, 0.701410273847928, 0.15148252121167438, 0.8256165578801931, 0.6974393203868419, 0.6776648808032173, 0.18708421829227262, 0.16607707892452495, 0.6851989153506883, 0.20220028418722935, 0.20388624045703796, 0.7464696634965904, 0.7427512683408237, 0.564786728725035, 0.16524402064927435, 0.2113875375260308, 0.20701873499335077, 0.10455780583762009, 0.18532087766259453, 0.18858555354855933, 0.21330186250008065, 0.1775607742372538, 0.17622217306704824, 0.20075153138034796, 0.19294860377754164, 0.17797964963243484, 0.17745562422517613, 0.08096181013371384, 0.08108647906118271, 0.08014265791878239, 0.07639187439237671, 0.07760376214515685, 0.08597445503242085, 0.0823277685610776, 0.08859241941440488, 0.0817916137850383]}, "mutation_prompt": null}
{"id": "d34b3ee2-b337-4b7c-a91f-e2c7c513e6e6", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)  # Self-adaptive crossover rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)  # Further adaptive mutation\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:  # Enhanced elitism\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce a dynamic population size adjustment and further exploit adaptive mutation for improved exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": 0.4393896705752114, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.29.", "error": "", "parent_id": "789739f5-d256-4783-b8f1-552e82d0ae30", "metadata": {"aucs": [0.8842960483434956, 0.8884497225963567, 0.8859791094345304, 0.8855864041390247, 0.881227036647301, 0.8912662476036733, 0.8911921474579316, 0.8848743747650946, 0.88535193729927, 0.8191150086980806, 0.8083100582216552, 0.8156492751609488, 0.8145392441648744, 0.8319142591686488, 0.8178241250016751, 0.8110117463308744, 0.8458651581657654, 0.8092700288128846, 0.14858166258834393, 0.58191244304167, 0.5490288831729893, 0.5466451536316018, 0.6521077645399298, 0.12986375363900693, 0.6872904132116497, 0.6921556920127876, 0.1787354006293983, 0.14432212405587397, 0.10279828609636132, 0.13429979399328895, 0.4721253956153102, 0.14519330309923484, 0.14598884667081424, 0.14336417822713343, 0.1462750528000939, 0.16912000713294906, 0.9789655812023536, 0.9892367663302726, 0.9604338114432406, 0.9809656876882947, 0.990054499504763, 0.9788236570090519, 0.9734384174894825, 0.969119407059507, 0.9860276360430709, 0.7484159925383959, 0.5962083892469354, 0.7468616433850322, 0.501327450889125, 0.6968646189419787, 0.5945929615246688, 0.6407370551756975, 0.7680324860517604, 0.0882624649577699, 0.8605939883965101, 0.8450719391612254, 0.828570798785959, 0.8730686454676834, 0.804453687695593, 0.8554017367479411, 0.8656779438439597, 0.8200086187017084, 0.8027918410861673, 0.21904051346546882, 0.16718355638383908, 0.2935079890950204, 0.25322714276354996, 0.17892151872016926, 0.13081597692762026, 0.19319136513384771, 0.2515952745635376, 0.19177602134007365, 0.009743910217530405, 0.14679497039921097, 0.20590738356417482, 0.3337715925744691, 0.15464815951980693, 0.20453167748123224, 0.2067260430942769, 0.19820276710632956, 0.21884729133624747, 0.5884273621117049, 9.999999999998899e-05, 0.5216166900068917, 0.5158391963692328, 0.5982441117021621, 0.5570437856660689, 0.5934269719177319, 0.5771717005067816, 0.22535534407207902, 0.6701326798748206, 0.6052567459536837, 0.6662999759303574, 0.6810716229159293, 0.6261072859875121, 0.6323734562543096, 0.6926289186457355, 0.6577816606590102, 0.6897174647446735, 0.13979860775673036, 0.32723923617425155, 0.061510462297545754, 0.1182062388136288, 0.28209210450529376, 0.22018585811788305, 0.2759783668587076, 0.10040338760267709, 0.2876034063937092, 0.37422372554156114, 0.4937056021646242, 0.4511225698604744, 0.4651188772561311, 0.4726439197378167, 0.5215445228735265, 0.4508779436100009, 0.45152866975252437, 0.08383693677141091, 0.8176114144078166, 0.8161907394072195, 0.7968174129428451, 0.753119584244274, 0.7672806265639771, 0.7835281728470171, 0.8062094423971421, 0.7929923020003843, 0.8077044938376118, 0.10036010713959709, 0.1417635731678225, 0.13154889365540856, 0.1336410084250279, 0.11476608609820982, 0.129337606454345, 0.10566284084074484, 0.11797383685710083, 0.12657605414426576, 0.164478873529056, 0.21538730908996595, 0.12740774303533198, 0.18104353140911533, 0.18841845802612134, 0.2331045370756687, 0.2708677576729367, 0.2047862210919149, 0.20743041882035107, 0.47533358483239196, 0.554532693981487, 0.6755434507168936, 0.6109057375282381, 0.6527565646556783, 0.5040962500172803, 0.7223283345451347, 0.619840796022538, 0.592011691239424, 0.5006262912214565, 0.4317820229993993, 0.424394339316689, 0.3914781953164451, 0.4308215919861965, 0.47227840486847195, 0.5541941640842272, 0.5256733075204271, 0.4751309967940269, 0.19244771462774635, 0.20253500525751178, 0.1974280604330394, 0.1918032454358889, 0.18510688448894919, 0.18503016176819365, 0.1920861058915837, 0.18617807147468057, 0.19024428440945773, 0.23469325333776825, 0.6936920198691623, 0.21317833092389427, 0.6857414404235234, 0.7341016822429325, 0.6406791389056883, 0.21541279215758413, 0.23807152146769683, 0.26297410661106335, 0.16966245545620695, 0.8521341163925039, 0.1514367527582965, 0.18302485063860818, 0.18288874521440912, 0.19703938737622306, 0.17529867977536429, 0.1646464988859172, 0.16454202905929505, 0.165663777411865, 0.1673838951332175, 0.2065867276845924, 0.7981745987014196, 0.16295026041726146, 0.7566687363376157, 0.20790382992546863, 0.20931399538713258, 0.21070414955197592, 0.18020424355146114, 0.1836103717329517, 0.1876422986147368, 0.17541532588535502, 0.18133647816847287, 0.1932844024698266, 0.18315902374738424, 0.1710490785194677, 0.19628573758945744, 0.08524331303490895, 0.07813950604065267, 0.08145774423277508, 0.08461514472658904, 0.07941922515818645, 0.07508130399787638, 0.08687491767588251, 0.08213959133954418, 0.0858599934664579]}, "mutation_prompt": null}
{"id": "2d2aa0f5-c8f8-456a-aa7d-c65e6576e06c", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)  # Self-adaptive crossover rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)  # Further adaptive mutation\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:  # Enhanced elitism\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce a dynamic population size adjustment and further exploit adaptive mutation for improved exploration-exploitation balance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d34b3ee2-b337-4b7c-a91f-e2c7c513e6e6", "metadata": {"aucs": [0.8842960483434956, 0.8884497225963567, 0.8859791094345304, 0.8855864041390247, 0.881227036647301, 0.8912662476036733, 0.8911921474579316, 0.8848743747650946, 0.88535193729927, 0.8191150086980806, 0.8083100582216552, 0.8156492751609488, 0.8145392441648744, 0.8319142591686488, 0.8178241250016751, 0.8110117463308744, 0.8458651581657654, 0.8092700288128846, 0.14858166258834393, 0.58191244304167, 0.5490288831729893, 0.5466451536316018, 0.6521077645399298, 0.12986375363900693, 0.6872904132116497, 0.6921556920127876, 0.1787354006293983, 0.14432212405587397, 0.10279828609636132, 0.13429979399328895, 0.4721253956153102, 0.14519330309923484, 0.14598884667081424, 0.14336417822713343, 0.1462750528000939, 0.16912000713294906, 0.9789655812023536, 0.9892367663302726, 0.9604338114432406, 0.9809656876882947, 0.990054499504763, 0.9788236570090519, 0.9734384174894825, 0.969119407059507, 0.9860276360430709, 0.7484159925383959, 0.5962083892469354, 0.7468616433850322, 0.501327450889125, 0.6968646189419787, 0.5945929615246688, 0.6407370551756975, 0.7680324860517604, 0.0882624649577699, 0.8605939883965101, 0.8450719391612254, 0.828570798785959, 0.8730686454676834, 0.804453687695593, 0.8554017367479411, 0.8656779438439597, 0.8200086187017084, 0.8027918410861673, 0.21904051346546882, 0.16718355638383908, 0.2935079890950204, 0.25322714276354996, 0.17892151872016926, 0.13081597692762026, 0.19319136513384771, 0.2515952745635376, 0.19177602134007365, 0.009743910217530405, 0.14679497039921097, 0.20590738356417482, 0.3337715925744691, 0.15464815951980693, 0.20453167748123224, 0.2067260430942769, 0.19820276710632956, 0.21884729133624747, 0.5884273621117049, 9.999999999998899e-05, 0.5216166900068917, 0.5158391963692328, 0.5982441117021621, 0.5570437856660689, 0.5934269719177319, 0.5771717005067816, 0.22535534407207902, 0.6701326798748206, 0.6052567459536837, 0.6662999759303574, 0.6810716229159293, 0.6261072859875121, 0.6323734562543096, 0.6926289186457355, 0.6577816606590102, 0.6897174647446735, 0.13979860775673036, 0.32723923617425155, 0.061510462297545754, 0.1182062388136288, 0.28209210450529376, 0.22018585811788305, 0.2759783668587076, 0.10040338760267709, 0.2876034063937092, 0.37422372554156114, 0.4937056021646242, 0.4511225698604744, 0.4651188772561311, 0.4726439197378167, 0.5215445228735265, 0.4508779436100009, 0.45152866975252437, 0.08383693677141091, 0.8176114144078166, 0.8161907394072195, 0.7968174129428451, 0.753119584244274, 0.7672806265639771, 0.7835281728470171, 0.8062094423971421, 0.7929923020003843, 0.8077044938376118, 0.10036010713959709, 0.1417635731678225, 0.13154889365540856, 0.1336410084250279, 0.11476608609820982, 0.129337606454345, 0.10566284084074484, 0.11797383685710083, 0.12657605414426576, 0.164478873529056, 0.21538730908996595, 0.12740774303533198, 0.18104353140911533, 0.18841845802612134, 0.2331045370756687, 0.2708677576729367, 0.2047862210919149, 0.20743041882035107, 0.47533358483239196, 0.554532693981487, 0.6755434507168936, 0.6109057375282381, 0.6527565646556783, 0.5040962500172803, 0.7223283345451347, 0.619840796022538, 0.592011691239424, 0.5006262912214565, 0.4317820229993993, 0.424394339316689, 0.3914781953164451, 0.4308215919861965, 0.47227840486847195, 0.5541941640842272, 0.5256733075204271, 0.4751309967940269, 0.19244771462774635, 0.20253500525751178, 0.1974280604330394, 0.1918032454358889, 0.18510688448894919, 0.18503016176819365, 0.1920861058915837, 0.18617807147468057, 0.19024428440945773, 0.23469325333776825, 0.6936920198691623, 0.21317833092389427, 0.6857414404235234, 0.7341016822429325, 0.6406791389056883, 0.21541279215758413, 0.23807152146769683, 0.26297410661106335, 0.16966245545620695, 0.8521341163925039, 0.1514367527582965, 0.18302485063860818, 0.18288874521440912, 0.19703938737622306, 0.17529867977536429, 0.1646464988859172, 0.16454202905929505, 0.165663777411865, 0.1673838951332175, 0.2065867276845924, 0.7981745987014196, 0.16295026041726146, 0.7566687363376157, 0.20790382992546863, 0.20931399538713258, 0.21070414955197592, 0.18020424355146114, 0.1836103717329517, 0.1876422986147368, 0.17541532588535502, 0.18133647816847287, 0.1932844024698266, 0.18315902374738424, 0.1710490785194677, 0.19628573758945744, 0.08524331303490895, 0.07813950604065267, 0.08145774423277508, 0.08461514472658904, 0.07941922515818645, 0.07508130399787638, 0.08687491767588251, 0.08213959133954418, 0.0858599934664579]}, "mutation_prompt": null}
{"id": "c360a9fc-2f50-498a-b389-b28d28809ec5", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)  # Self-adaptive crossover rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)  # Further adaptive mutation\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:  # Enhanced elitism\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce a dynamic population size adjustment and further exploit adaptive mutation for improved exploration-exploitation balance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d34b3ee2-b337-4b7c-a91f-e2c7c513e6e6", "metadata": {"aucs": [0.8842960483434956, 0.8884497225963567, 0.8859791094345304, 0.8855864041390247, 0.881227036647301, 0.8912662476036733, 0.8911921474579316, 0.8848743747650946, 0.88535193729927, 0.8191150086980806, 0.8083100582216552, 0.8156492751609488, 0.8145392441648744, 0.8319142591686488, 0.8178241250016751, 0.8110117463308744, 0.8458651581657654, 0.8092700288128846, 0.14858166258834393, 0.58191244304167, 0.5490288831729893, 0.5466451536316018, 0.6521077645399298, 0.12986375363900693, 0.6872904132116497, 0.6921556920127876, 0.1787354006293983, 0.14432212405587397, 0.10279828609636132, 0.13429979399328895, 0.4721253956153102, 0.14519330309923484, 0.14598884667081424, 0.14336417822713343, 0.1462750528000939, 0.16912000713294906, 0.9789655812023536, 0.9892367663302726, 0.9604338114432406, 0.9809656876882947, 0.990054499504763, 0.9788236570090519, 0.9734384174894825, 0.969119407059507, 0.9860276360430709, 0.7484159925383959, 0.5962083892469354, 0.7468616433850322, 0.501327450889125, 0.6968646189419787, 0.5945929615246688, 0.6407370551756975, 0.7680324860517604, 0.0882624649577699, 0.8605939883965101, 0.8450719391612254, 0.828570798785959, 0.8730686454676834, 0.804453687695593, 0.8554017367479411, 0.8656779438439597, 0.8200086187017084, 0.8027918410861673, 0.21904051346546882, 0.16718355638383908, 0.2935079890950204, 0.25322714276354996, 0.17892151872016926, 0.13081597692762026, 0.19319136513384771, 0.2515952745635376, 0.19177602134007365, 0.009743910217530405, 0.14679497039921097, 0.20590738356417482, 0.3337715925744691, 0.15464815951980693, 0.20453167748123224, 0.2067260430942769, 0.19820276710632956, 0.21884729133624747, 0.5884273621117049, 9.999999999998899e-05, 0.5216166900068917, 0.5158391963692328, 0.5982441117021621, 0.5570437856660689, 0.5934269719177319, 0.5771717005067816, 0.22535534407207902, 0.6701326798748206, 0.6052567459536837, 0.6662999759303574, 0.6810716229159293, 0.6261072859875121, 0.6323734562543096, 0.6926289186457355, 0.6577816606590102, 0.6897174647446735, 0.13979860775673036, 0.32723923617425155, 0.061510462297545754, 0.1182062388136288, 0.28209210450529376, 0.22018585811788305, 0.2759783668587076, 0.10040338760267709, 0.2876034063937092, 0.37422372554156114, 0.4937056021646242, 0.4511225698604744, 0.4651188772561311, 0.4726439197378167, 0.5215445228735265, 0.4508779436100009, 0.45152866975252437, 0.08383693677141091, 0.8176114144078166, 0.8161907394072195, 0.7968174129428451, 0.753119584244274, 0.7672806265639771, 0.7835281728470171, 0.8062094423971421, 0.7929923020003843, 0.8077044938376118, 0.10036010713959709, 0.1417635731678225, 0.13154889365540856, 0.1336410084250279, 0.11476608609820982, 0.129337606454345, 0.10566284084074484, 0.11797383685710083, 0.12657605414426576, 0.164478873529056, 0.21538730908996595, 0.12740774303533198, 0.18104353140911533, 0.18841845802612134, 0.2331045370756687, 0.2708677576729367, 0.2047862210919149, 0.20743041882035107, 0.47533358483239196, 0.554532693981487, 0.6755434507168936, 0.6109057375282381, 0.6527565646556783, 0.5040962500172803, 0.7223283345451347, 0.619840796022538, 0.592011691239424, 0.5006262912214565, 0.4317820229993993, 0.424394339316689, 0.3914781953164451, 0.4308215919861965, 0.47227840486847195, 0.5541941640842272, 0.5256733075204271, 0.4751309967940269, 0.19244771462774635, 0.20253500525751178, 0.1974280604330394, 0.1918032454358889, 0.18510688448894919, 0.18503016176819365, 0.1920861058915837, 0.18617807147468057, 0.19024428440945773, 0.23469325333776825, 0.6936920198691623, 0.21317833092389427, 0.6857414404235234, 0.7341016822429325, 0.6406791389056883, 0.21541279215758413, 0.23807152146769683, 0.26297410661106335, 0.16966245545620695, 0.8521341163925039, 0.1514367527582965, 0.18302485063860818, 0.18288874521440912, 0.19703938737622306, 0.17529867977536429, 0.1646464988859172, 0.16454202905929505, 0.165663777411865, 0.1673838951332175, 0.2065867276845924, 0.7981745987014196, 0.16295026041726146, 0.7566687363376157, 0.20790382992546863, 0.20931399538713258, 0.21070414955197592, 0.18020424355146114, 0.1836103717329517, 0.1876422986147368, 0.17541532588535502, 0.18133647816847287, 0.1932844024698266, 0.18315902374738424, 0.1710490785194677, 0.19628573758945744, 0.08524331303490895, 0.07813950604065267, 0.08145774423277508, 0.08461514472658904, 0.07941922515818645, 0.07508130399787638, 0.08687491767588251, 0.08213959133954418, 0.0858599934664579]}, "mutation_prompt": null}
{"id": "112a76b2-2933-481e-8600-b19a315e1499", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate local search-based neighborhood exploration to refine solutions once the population converges for enhanced local optima discovery.", "configspace": "", "generation": 10, "fitness": 0.4412815527734011, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.29.", "error": "", "parent_id": "d34b3ee2-b337-4b7c-a91f-e2c7c513e6e6", "metadata": {"aucs": [0.8662493656457821, 0.8619691909237055, 0.8709302812730607, 0.8748717297870441, 0.8859510775980282, 0.8720649590966179, 0.8733838313802355, 0.8757950871932697, 0.8675581342889982, 0.8191929316699507, 0.8015490306515359, 0.8022440015769752, 0.805676781912002, 0.8196194271775713, 0.8214529713153749, 0.8058111026926837, 0.8224808468705438, 0.797946944976379, 0.5639363757478342, 0.17129113588047162, 0.5576600162880956, 0.17013431451196648, 0.17031093792146768, 0.15934386131196365, 0.6925128150787838, 0.15082444481083168, 0.12658601339196363, 0.17252314946498448, 0.14961248012256367, 0.14585823724830138, 0.17894798210229568, 0.17279913262398972, 0.6287757494604024, 0.17243757042273977, 0.13704461463389328, 0.1629146484393883, 0.9872297186947867, 0.9773868669653037, 0.9817455250112088, 0.9813289604840796, 0.975270343325193, 0.9846505456747011, 0.9818562956460403, 0.9842338620574949, 0.9795595452817505, 0.6360161932685617, 0.6980573100317047, 0.6716650870497105, 0.7163171189484105, 0.6930524099512487, 0.6595415454788923, 0.6321352160682847, 0.6125102708441964, 0.6450876085594408, 0.857015423386958, 0.8532643816367312, 0.820681851697664, 0.8551670067746713, 0.2716538882951911, 0.8473487209875636, 0.8570059467526765, 0.812085878289617, 0.8566751587756091, 0.189880252497443, 0.12344250000667778, 0.18343855274680787, 0.20804841896839965, 0.2932983284803178, 0.20834223275058228, 0.20318742755191344, 0.30432235595766055, 0.20098757797690725, 0.7298071025386694, 0.05957569202832469, 0.12328077590047737, 0.21262889059628087, 0.19803870786690259, 0.3113719181777118, 0.2352138338463744, 0.1884744133456715, 0.25209819025073066, 0.5844116962989399, 0.5809967827255309, 0.32524926185613945, 0.46857036445479494, 0.5569175148887234, 0.019023001017252295, 0.4026725746336359, 0.5599849635912513, 0.5433194904380585, 0.5936964315945281, 0.606686548339077, 0.6473323529693549, 0.6469202124156941, 0.5950922041894955, 0.6626073304434053, 0.6876283751709185, 0.6574613751234404, 0.6757786597741684, 0.06910830185415784, 0.06669841331557236, 0.25177455655653613, 0.1871287785588951, 0.21669349184641995, 0.17005737836390777, 0.19734324002308812, 0.16884588915880117, 0.1324949331953621, 0.4196734171254848, 0.4973163258169825, 0.4783063472226933, 0.42166383977816635, 0.4449098238108038, 0.4767757950805025, 0.4431384670826536, 0.3161637444754676, 0.44558202652782053, 0.7324376714326744, 0.813983216570429, 0.8053977750625168, 0.8070664890827522, 0.801413183126958, 0.7898097605630805, 0.7950486832907574, 0.8134382404044601, 0.7898193958137745, 0.1526650403294516, 0.12487052447143521, 0.10185799708666876, 0.10666310207360707, 0.13543730768619844, 0.12076315167576779, 0.10718894783528143, 0.14696586585170768, 0.10776760185205514, 0.1558027020844044, 0.15630476210246613, 0.20176461376372878, 0.19410186829837983, 0.18617595354386518, 0.15819848003333392, 0.23995539387513565, 0.19744015975023543, 0.2082013194660911, 0.4229613979882534, 0.5645394972834085, 0.6442224175481019, 0.6861757917761218, 0.6458377339910735, 0.6768949200878625, 0.7021752780866464, 0.6813524229170073, 0.6581036872843865, 0.4658773010500735, 0.4437687145628123, 0.4623114776889502, 0.47283253296630856, 0.37878771039226755, 0.44278187381420875, 0.5619494892539747, 0.5589174698410764, 0.5890768710158811, 0.18873994882226486, 0.18859727728297893, 0.21497982066530053, 0.22368375411254116, 0.1875375580033417, 0.19445524663689384, 0.20546162788490663, 0.20147793565591265, 0.20678045649687715, 0.23379811456108257, 0.24138699793875407, 0.713642890094057, 0.2353983089218531, 0.22938292540391514, 0.759717414800901, 0.7236391742698172, 0.6537169398869608, 0.23337016140520617, 0.16757949714913956, 0.20460381375755743, 0.13296777895979628, 0.1682356210270094, 0.18507175355753913, 0.8631748016028501, 0.15672199682485566, 0.19378939208047452, 0.20908582740139126, 0.19985039344691669, 0.20818163625021846, 0.8449243424873454, 0.20664763707589495, 0.16341722909031542, 0.1994181842628101, 0.8780294366284318, 0.8060022205693541, 0.20517393310460896, 0.20591350385562524, 0.18591796530597882, 0.17992265605312585, 0.1654112322320076, 0.1499904799154248, 0.1872214310472613, 0.18363471790857588, 0.19470965246123328, 0.18198327896350386, 0.09008895925600302, 0.08236066132268283, 0.07614002522752328, 0.0844187354402477, 0.08303528274477534, 0.07920831454630661, 0.08534602731750707, 0.07777324640046723, 0.08572644962571829]}, "mutation_prompt": null}
{"id": "4366831e-db84-42ae-9531-4f55798a74e4", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate local search-based neighborhood exploration to refine solutions once the population converges for enhanced local optima discovery.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8662493656457821, 0.8619691909237055, 0.8709302812730607, 0.8748717297870441, 0.8859510775980282, 0.8720649590966179, 0.8733838313802355, 0.8757950871932697, 0.8675581342889982, 0.8191929316699507, 0.8015490306515359, 0.8022440015769752, 0.805676781912002, 0.8196194271775713, 0.8214529713153749, 0.8058111026926837, 0.8224808468705438, 0.797946944976379, 0.5639363757478342, 0.17129113588047162, 0.5576600162880956, 0.17013431451196648, 0.17031093792146768, 0.15934386131196365, 0.6925128150787838, 0.15082444481083168, 0.12658601339196363, 0.17252314946498448, 0.14961248012256367, 0.14585823724830138, 0.17894798210229568, 0.17279913262398972, 0.6287757494604024, 0.17243757042273977, 0.13704461463389328, 0.1629146484393883, 0.9872297186947867, 0.9773868669653037, 0.9817455250112088, 0.9813289604840796, 0.975270343325193, 0.9846505456747011, 0.9818562956460403, 0.9842338620574949, 0.9795595452817505, 0.6360161932685617, 0.6980573100317047, 0.6716650870497105, 0.7163171189484105, 0.6930524099512487, 0.6595415454788923, 0.6321352160682847, 0.6125102708441964, 0.6450876085594408, 0.857015423386958, 0.8532643816367312, 0.820681851697664, 0.8551670067746713, 0.2716538882951911, 0.8473487209875636, 0.8570059467526765, 0.812085878289617, 0.8566751587756091, 0.189880252497443, 0.12344250000667778, 0.18343855274680787, 0.20804841896839965, 0.2932983284803178, 0.20834223275058228, 0.20318742755191344, 0.30432235595766055, 0.20098757797690725, 0.7298071025386694, 0.05957569202832469, 0.12328077590047737, 0.21262889059628087, 0.19803870786690259, 0.3113719181777118, 0.2352138338463744, 0.1884744133456715, 0.25209819025073066, 0.5844116962989399, 0.5809967827255309, 0.32524926185613945, 0.46857036445479494, 0.5569175148887234, 0.019023001017252295, 0.4026725746336359, 0.5599849635912513, 0.5433194904380585, 0.5936964315945281, 0.606686548339077, 0.6473323529693549, 0.6469202124156941, 0.5950922041894955, 0.6626073304434053, 0.6876283751709185, 0.6574613751234404, 0.6757786597741684, 0.06910830185415784, 0.06669841331557236, 0.25177455655653613, 0.1871287785588951, 0.21669349184641995, 0.17005737836390777, 0.19734324002308812, 0.16884588915880117, 0.1324949331953621, 0.4196734171254848, 0.4973163258169825, 0.4783063472226933, 0.42166383977816635, 0.4449098238108038, 0.4767757950805025, 0.4431384670826536, 0.3161637444754676, 0.44558202652782053, 0.7324376714326744, 0.813983216570429, 0.8053977750625168, 0.8070664890827522, 0.801413183126958, 0.7898097605630805, 0.7950486832907574, 0.8134382404044601, 0.7898193958137745, 0.1526650403294516, 0.12487052447143521, 0.10185799708666876, 0.10666310207360707, 0.13543730768619844, 0.12076315167576779, 0.10718894783528143, 0.14696586585170768, 0.10776760185205514, 0.1558027020844044, 0.15630476210246613, 0.20176461376372878, 0.19410186829837983, 0.18617595354386518, 0.15819848003333392, 0.23995539387513565, 0.19744015975023543, 0.2082013194660911, 0.4229613979882534, 0.5645394972834085, 0.6442224175481019, 0.6861757917761218, 0.6458377339910735, 0.6768949200878625, 0.7021752780866464, 0.6813524229170073, 0.6581036872843865, 0.4658773010500735, 0.4437687145628123, 0.4623114776889502, 0.47283253296630856, 0.37878771039226755, 0.44278187381420875, 0.5619494892539747, 0.5589174698410764, 0.5890768710158811, 0.18873994882226486, 0.18859727728297893, 0.21497982066530053, 0.22368375411254116, 0.1875375580033417, 0.19445524663689384, 0.20546162788490663, 0.20147793565591265, 0.20678045649687715, 0.23379811456108257, 0.24138699793875407, 0.713642890094057, 0.2353983089218531, 0.22938292540391514, 0.759717414800901, 0.7236391742698172, 0.6537169398869608, 0.23337016140520617, 0.16757949714913956, 0.20460381375755743, 0.13296777895979628, 0.1682356210270094, 0.18507175355753913, 0.8631748016028501, 0.15672199682485566, 0.19378939208047452, 0.20908582740139126, 0.19985039344691669, 0.20818163625021846, 0.8449243424873454, 0.20664763707589495, 0.16341722909031542, 0.1994181842628101, 0.8780294366284318, 0.8060022205693541, 0.20517393310460896, 0.20591350385562524, 0.18591796530597882, 0.17992265605312585, 0.1654112322320076, 0.1499904799154248, 0.1872214310472613, 0.18363471790857588, 0.19470965246123328, 0.18198327896350386, 0.09008895925600302, 0.08236066132268283, 0.07614002522752328, 0.0844187354402477, 0.08303528274477534, 0.07920831454630661, 0.08534602731750707, 0.07777324640046723, 0.08572644962571829]}, "mutation_prompt": null}
{"id": "fadb7acb-fe22-43aa-bb81-61b4224ada93", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate local search-based neighborhood exploration to refine solutions once the population converges for enhanced local optima discovery.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8662493656457821, 0.8619691909237055, 0.8709302812730607, 0.8748717297870441, 0.8859510775980282, 0.8720649590966179, 0.8733838313802355, 0.8757950871932697, 0.8675581342889982, 0.8191929316699507, 0.8015490306515359, 0.8022440015769752, 0.805676781912002, 0.8196194271775713, 0.8214529713153749, 0.8058111026926837, 0.8224808468705438, 0.797946944976379, 0.5639363757478342, 0.17129113588047162, 0.5576600162880956, 0.17013431451196648, 0.17031093792146768, 0.15934386131196365, 0.6925128150787838, 0.15082444481083168, 0.12658601339196363, 0.17252314946498448, 0.14961248012256367, 0.14585823724830138, 0.17894798210229568, 0.17279913262398972, 0.6287757494604024, 0.17243757042273977, 0.13704461463389328, 0.1629146484393883, 0.9872297186947867, 0.9773868669653037, 0.9817455250112088, 0.9813289604840796, 0.975270343325193, 0.9846505456747011, 0.9818562956460403, 0.9842338620574949, 0.9795595452817505, 0.6360161932685617, 0.6980573100317047, 0.6716650870497105, 0.7163171189484105, 0.6930524099512487, 0.6595415454788923, 0.6321352160682847, 0.6125102708441964, 0.6450876085594408, 0.857015423386958, 0.8532643816367312, 0.820681851697664, 0.8551670067746713, 0.2716538882951911, 0.8473487209875636, 0.8570059467526765, 0.812085878289617, 0.8566751587756091, 0.189880252497443, 0.12344250000667778, 0.18343855274680787, 0.20804841896839965, 0.2932983284803178, 0.20834223275058228, 0.20318742755191344, 0.30432235595766055, 0.20098757797690725, 0.7298071025386694, 0.05957569202832469, 0.12328077590047737, 0.21262889059628087, 0.19803870786690259, 0.3113719181777118, 0.2352138338463744, 0.1884744133456715, 0.25209819025073066, 0.5844116962989399, 0.5809967827255309, 0.32524926185613945, 0.46857036445479494, 0.5569175148887234, 0.019023001017252295, 0.4026725746336359, 0.5599849635912513, 0.5433194904380585, 0.5936964315945281, 0.606686548339077, 0.6473323529693549, 0.6469202124156941, 0.5950922041894955, 0.6626073304434053, 0.6876283751709185, 0.6574613751234404, 0.6757786597741684, 0.06910830185415784, 0.06669841331557236, 0.25177455655653613, 0.1871287785588951, 0.21669349184641995, 0.17005737836390777, 0.19734324002308812, 0.16884588915880117, 0.1324949331953621, 0.4196734171254848, 0.4973163258169825, 0.4783063472226933, 0.42166383977816635, 0.4449098238108038, 0.4767757950805025, 0.4431384670826536, 0.3161637444754676, 0.44558202652782053, 0.7324376714326744, 0.813983216570429, 0.8053977750625168, 0.8070664890827522, 0.801413183126958, 0.7898097605630805, 0.7950486832907574, 0.8134382404044601, 0.7898193958137745, 0.1526650403294516, 0.12487052447143521, 0.10185799708666876, 0.10666310207360707, 0.13543730768619844, 0.12076315167576779, 0.10718894783528143, 0.14696586585170768, 0.10776760185205514, 0.1558027020844044, 0.15630476210246613, 0.20176461376372878, 0.19410186829837983, 0.18617595354386518, 0.15819848003333392, 0.23995539387513565, 0.19744015975023543, 0.2082013194660911, 0.4229613979882534, 0.5645394972834085, 0.6442224175481019, 0.6861757917761218, 0.6458377339910735, 0.6768949200878625, 0.7021752780866464, 0.6813524229170073, 0.6581036872843865, 0.4658773010500735, 0.4437687145628123, 0.4623114776889502, 0.47283253296630856, 0.37878771039226755, 0.44278187381420875, 0.5619494892539747, 0.5589174698410764, 0.5890768710158811, 0.18873994882226486, 0.18859727728297893, 0.21497982066530053, 0.22368375411254116, 0.1875375580033417, 0.19445524663689384, 0.20546162788490663, 0.20147793565591265, 0.20678045649687715, 0.23379811456108257, 0.24138699793875407, 0.713642890094057, 0.2353983089218531, 0.22938292540391514, 0.759717414800901, 0.7236391742698172, 0.6537169398869608, 0.23337016140520617, 0.16757949714913956, 0.20460381375755743, 0.13296777895979628, 0.1682356210270094, 0.18507175355753913, 0.8631748016028501, 0.15672199682485566, 0.19378939208047452, 0.20908582740139126, 0.19985039344691669, 0.20818163625021846, 0.8449243424873454, 0.20664763707589495, 0.16341722909031542, 0.1994181842628101, 0.8780294366284318, 0.8060022205693541, 0.20517393310460896, 0.20591350385562524, 0.18591796530597882, 0.17992265605312585, 0.1654112322320076, 0.1499904799154248, 0.1872214310472613, 0.18363471790857588, 0.19470965246123328, 0.18198327896350386, 0.09008895925600302, 0.08236066132268283, 0.07614002522752328, 0.0844187354402477, 0.08303528274477534, 0.07920831454630661, 0.08534602731750707, 0.07777324640046723, 0.08572644962571829]}, "mutation_prompt": null}
{"id": "800d66a6-afdc-4d56-97da-bf4482ba1ec3", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate local search-based neighborhood exploration to refine solutions once the population converges for enhanced local optima discovery.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8662493656457821, 0.8619691909237055, 0.8709302812730607, 0.8748717297870441, 0.8859510775980282, 0.8720649590966179, 0.8733838313802355, 0.8757950871932697, 0.8675581342889982, 0.8191929316699507, 0.8015490306515359, 0.8022440015769752, 0.805676781912002, 0.8196194271775713, 0.8214529713153749, 0.8058111026926837, 0.8224808468705438, 0.797946944976379, 0.5639363757478342, 0.17129113588047162, 0.5576600162880956, 0.17013431451196648, 0.17031093792146768, 0.15934386131196365, 0.6925128150787838, 0.15082444481083168, 0.12658601339196363, 0.17252314946498448, 0.14961248012256367, 0.14585823724830138, 0.17894798210229568, 0.17279913262398972, 0.6287757494604024, 0.17243757042273977, 0.13704461463389328, 0.1629146484393883, 0.9872297186947867, 0.9773868669653037, 0.9817455250112088, 0.9813289604840796, 0.975270343325193, 0.9846505456747011, 0.9818562956460403, 0.9842338620574949, 0.9795595452817505, 0.6360161932685617, 0.6980573100317047, 0.6716650870497105, 0.7163171189484105, 0.6930524099512487, 0.6595415454788923, 0.6321352160682847, 0.6125102708441964, 0.6450876085594408, 0.857015423386958, 0.8532643816367312, 0.820681851697664, 0.8551670067746713, 0.2716538882951911, 0.8473487209875636, 0.8570059467526765, 0.812085878289617, 0.8566751587756091, 0.189880252497443, 0.12344250000667778, 0.18343855274680787, 0.20804841896839965, 0.2932983284803178, 0.20834223275058228, 0.20318742755191344, 0.30432235595766055, 0.20098757797690725, 0.7298071025386694, 0.05957569202832469, 0.12328077590047737, 0.21262889059628087, 0.19803870786690259, 0.3113719181777118, 0.2352138338463744, 0.1884744133456715, 0.25209819025073066, 0.5844116962989399, 0.5809967827255309, 0.32524926185613945, 0.46857036445479494, 0.5569175148887234, 0.019023001017252295, 0.4026725746336359, 0.5599849635912513, 0.5433194904380585, 0.5936964315945281, 0.606686548339077, 0.6473323529693549, 0.6469202124156941, 0.5950922041894955, 0.6626073304434053, 0.6876283751709185, 0.6574613751234404, 0.6757786597741684, 0.06910830185415784, 0.06669841331557236, 0.25177455655653613, 0.1871287785588951, 0.21669349184641995, 0.17005737836390777, 0.19734324002308812, 0.16884588915880117, 0.1324949331953621, 0.4196734171254848, 0.4973163258169825, 0.4783063472226933, 0.42166383977816635, 0.4449098238108038, 0.4767757950805025, 0.4431384670826536, 0.3161637444754676, 0.44558202652782053, 0.7324376714326744, 0.813983216570429, 0.8053977750625168, 0.8070664890827522, 0.801413183126958, 0.7898097605630805, 0.7950486832907574, 0.8134382404044601, 0.7898193958137745, 0.1526650403294516, 0.12487052447143521, 0.10185799708666876, 0.10666310207360707, 0.13543730768619844, 0.12076315167576779, 0.10718894783528143, 0.14696586585170768, 0.10776760185205514, 0.1558027020844044, 0.15630476210246613, 0.20176461376372878, 0.19410186829837983, 0.18617595354386518, 0.15819848003333392, 0.23995539387513565, 0.19744015975023543, 0.2082013194660911, 0.4229613979882534, 0.5645394972834085, 0.6442224175481019, 0.6861757917761218, 0.6458377339910735, 0.6768949200878625, 0.7021752780866464, 0.6813524229170073, 0.6581036872843865, 0.4658773010500735, 0.4437687145628123, 0.4623114776889502, 0.47283253296630856, 0.37878771039226755, 0.44278187381420875, 0.5619494892539747, 0.5589174698410764, 0.5890768710158811, 0.18873994882226486, 0.18859727728297893, 0.21497982066530053, 0.22368375411254116, 0.1875375580033417, 0.19445524663689384, 0.20546162788490663, 0.20147793565591265, 0.20678045649687715, 0.23379811456108257, 0.24138699793875407, 0.713642890094057, 0.2353983089218531, 0.22938292540391514, 0.759717414800901, 0.7236391742698172, 0.6537169398869608, 0.23337016140520617, 0.16757949714913956, 0.20460381375755743, 0.13296777895979628, 0.1682356210270094, 0.18507175355753913, 0.8631748016028501, 0.15672199682485566, 0.19378939208047452, 0.20908582740139126, 0.19985039344691669, 0.20818163625021846, 0.8449243424873454, 0.20664763707589495, 0.16341722909031542, 0.1994181842628101, 0.8780294366284318, 0.8060022205693541, 0.20517393310460896, 0.20591350385562524, 0.18591796530597882, 0.17992265605312585, 0.1654112322320076, 0.1499904799154248, 0.1872214310472613, 0.18363471790857588, 0.19470965246123328, 0.18198327896350386, 0.09008895925600302, 0.08236066132268283, 0.07614002522752328, 0.0844187354402477, 0.08303528274477534, 0.07920831454630661, 0.08534602731750707, 0.07777324640046723, 0.08572644962571829]}, "mutation_prompt": null}
{"id": "aa3efeb4-7bc6-4a73-8463-c6f4bbbe2981", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate local search-based neighborhood exploration to refine solutions once the population converges for enhanced local optima discovery.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8662493656457821, 0.8619691909237055, 0.8709302812730607, 0.8748717297870441, 0.8859510775980282, 0.8720649590966179, 0.8733838313802355, 0.8757950871932697, 0.8675581342889982, 0.8191929316699507, 0.8015490306515359, 0.8022440015769752, 0.805676781912002, 0.8196194271775713, 0.8214529713153749, 0.8058111026926837, 0.8224808468705438, 0.797946944976379, 0.5639363757478342, 0.17129113588047162, 0.5576600162880956, 0.17013431451196648, 0.17031093792146768, 0.15934386131196365, 0.6925128150787838, 0.15082444481083168, 0.12658601339196363, 0.17252314946498448, 0.14961248012256367, 0.14585823724830138, 0.17894798210229568, 0.17279913262398972, 0.6287757494604024, 0.17243757042273977, 0.13704461463389328, 0.1629146484393883, 0.9872297186947867, 0.9773868669653037, 0.9817455250112088, 0.9813289604840796, 0.975270343325193, 0.9846505456747011, 0.9818562956460403, 0.9842338620574949, 0.9795595452817505, 0.6360161932685617, 0.6980573100317047, 0.6716650870497105, 0.7163171189484105, 0.6930524099512487, 0.6595415454788923, 0.6321352160682847, 0.6125102708441964, 0.6450876085594408, 0.857015423386958, 0.8532643816367312, 0.820681851697664, 0.8551670067746713, 0.2716538882951911, 0.8473487209875636, 0.8570059467526765, 0.812085878289617, 0.8566751587756091, 0.189880252497443, 0.12344250000667778, 0.18343855274680787, 0.20804841896839965, 0.2932983284803178, 0.20834223275058228, 0.20318742755191344, 0.30432235595766055, 0.20098757797690725, 0.7298071025386694, 0.05957569202832469, 0.12328077590047737, 0.21262889059628087, 0.19803870786690259, 0.3113719181777118, 0.2352138338463744, 0.1884744133456715, 0.25209819025073066, 0.5844116962989399, 0.5809967827255309, 0.32524926185613945, 0.46857036445479494, 0.5569175148887234, 0.019023001017252295, 0.4026725746336359, 0.5599849635912513, 0.5433194904380585, 0.5936964315945281, 0.606686548339077, 0.6473323529693549, 0.6469202124156941, 0.5950922041894955, 0.6626073304434053, 0.6876283751709185, 0.6574613751234404, 0.6757786597741684, 0.06910830185415784, 0.06669841331557236, 0.25177455655653613, 0.1871287785588951, 0.21669349184641995, 0.17005737836390777, 0.19734324002308812, 0.16884588915880117, 0.1324949331953621, 0.4196734171254848, 0.4973163258169825, 0.4783063472226933, 0.42166383977816635, 0.4449098238108038, 0.4767757950805025, 0.4431384670826536, 0.3161637444754676, 0.44558202652782053, 0.7324376714326744, 0.813983216570429, 0.8053977750625168, 0.8070664890827522, 0.801413183126958, 0.7898097605630805, 0.7950486832907574, 0.8134382404044601, 0.7898193958137745, 0.1526650403294516, 0.12487052447143521, 0.10185799708666876, 0.10666310207360707, 0.13543730768619844, 0.12076315167576779, 0.10718894783528143, 0.14696586585170768, 0.10776760185205514, 0.1558027020844044, 0.15630476210246613, 0.20176461376372878, 0.19410186829837983, 0.18617595354386518, 0.15819848003333392, 0.23995539387513565, 0.19744015975023543, 0.2082013194660911, 0.4229613979882534, 0.5645394972834085, 0.6442224175481019, 0.6861757917761218, 0.6458377339910735, 0.6768949200878625, 0.7021752780866464, 0.6813524229170073, 0.6581036872843865, 0.4658773010500735, 0.4437687145628123, 0.4623114776889502, 0.47283253296630856, 0.37878771039226755, 0.44278187381420875, 0.5619494892539747, 0.5589174698410764, 0.5890768710158811, 0.18873994882226486, 0.18859727728297893, 0.21497982066530053, 0.22368375411254116, 0.1875375580033417, 0.19445524663689384, 0.20546162788490663, 0.20147793565591265, 0.20678045649687715, 0.23379811456108257, 0.24138699793875407, 0.713642890094057, 0.2353983089218531, 0.22938292540391514, 0.759717414800901, 0.7236391742698172, 0.6537169398869608, 0.23337016140520617, 0.16757949714913956, 0.20460381375755743, 0.13296777895979628, 0.1682356210270094, 0.18507175355753913, 0.8631748016028501, 0.15672199682485566, 0.19378939208047452, 0.20908582740139126, 0.19985039344691669, 0.20818163625021846, 0.8449243424873454, 0.20664763707589495, 0.16341722909031542, 0.1994181842628101, 0.8780294366284318, 0.8060022205693541, 0.20517393310460896, 0.20591350385562524, 0.18591796530597882, 0.17992265605312585, 0.1654112322320076, 0.1499904799154248, 0.1872214310472613, 0.18363471790857588, 0.19470965246123328, 0.18198327896350386, 0.09008895925600302, 0.08236066132268283, 0.07614002522752328, 0.0844187354402477, 0.08303528274477534, 0.07920831454630661, 0.08534602731750707, 0.07777324640046723, 0.08572644962571829]}, "mutation_prompt": null}
{"id": "162b8add-a460-4349-80b7-07c813173eee", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n        self.successful_trials = []\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def update_mutation_factor(self):\n        if self.successful_trials:\n            self.mutation_factor = 0.6 + 0.2 * np.tanh(len(self.successful_trials) / self.population_size)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            self.update_mutation_factor()  # Update mutation factor dynamically\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    self.successful_trials.append(trial)  # Record successful trials\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Enhance the exploitation phase by dynamically adapting the mutation factor based on the history of successful trials to improve convergence.", "configspace": "", "generation": 15, "fitness": 0.4267262631802486, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.27.", "error": "", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8589569251906367, 0.8594521176257791, 0.8738059488726854, 0.8735466367025135, 0.8649221855214333, 0.8825347739268639, 0.8892530170733132, 0.8726684685587209, 0.8843685104821707, 0.7702381137631166, 0.7819987339227608, 0.7624253129771488, 0.7647471602707377, 0.7881059669824195, 0.7882310991546944, 0.7894031332123271, 0.7815891760462195, 0.7769469135587529, 0.14626343595136437, 0.17212066766627943, 0.17384960942369143, 0.518409246577115, 0.17938627497738469, 0.14156608778828617, 0.6911653124628174, 0.12887845353932148, 0.5245867102761463, 0.13060507043705127, 0.17438239554121227, 0.4520737275186272, 0.12818737978314398, 0.1441890229520928, 0.1535537810423151, 0.16477133680519385, 0.14383316279059777, 0.16831776092945605, 0.9893076586370353, 0.984218703045147, 0.9546936327123181, 0.9736322036162866, 0.9848885472787146, 0.9754566668269727, 0.9704370925137769, 0.9645981456352257, 0.9821323618720317, 0.6986487519138356, 0.6655914581004793, 0.6404107620950099, 0.6548710548453662, 0.6334304683860219, 0.6612781909624021, 0.5982432984267245, 0.6639248797942402, 0.7052843646165525, 0.8085799827578792, 0.7256154225702001, 0.7688778855575276, 0.808565957190047, 0.7890085966191571, 0.8186870006508242, 0.845075150193661, 0.8130862158631464, 0.7914947973963182, 0.5026828407382058, 0.596672416991852, 0.5688505430646893, 0.5497991165787482, 0.5490315534041886, 0.49714555195191734, 0.48227113128272614, 0.5354326365399584, 0.48783692171266, 0.5283633435258612, 0.06350456942483795, 0.04337668575204767, 0.5865282387158708, 0.42956489550004073, 0.5066098715054992, 0.5073505994820023, 0.5148814055148414, 0.12468765577010776, 0.3370388152275563, 0.29843083933869574, 0.36566558762728263, 0.3359114186545077, 0.34687619197950137, 0.33712409520113173, 0.35121117065981333, 0.2963218642666515, 0.2996663573852182, 0.47454559643515715, 0.5304597256470428, 0.42836365191614967, 0.45620780602652644, 0.3880263054512103, 0.47584093386910375, 0.6075656305311928, 0.4871206279694066, 0.5433360967937304, 0.1415011356358149, 0.178718337216641, 0.12022925727484923, 0.20587014919844016, 0.2458656418317996, 0.22945758378854786, 0.22656291292863295, 0.1594499849552714, 0.1581133309351248, 0.29907017246743683, 0.341614594141994, 0.3033087288813734, 0.3604368214043312, 0.3363239240089553, 0.33657878280380993, 0.30051450153355574, 0.3090682407857199, 0.29965456565897897, 0.6939961770425425, 0.7378915845366008, 0.7049966033955124, 0.7242473513447792, 0.7213975222632758, 0.7298134130028379, 0.7584297073284154, 0.7144059886815959, 0.7517521536079468, 0.11836454011274056, 0.11342173046697479, 0.12164738168026867, 0.0889576320397999, 0.09978305238776863, 0.12951589624723692, 0.1267845492161943, 0.09137130561212958, 0.11355363647824035, 0.19605088134590987, 0.21223818459558152, 0.14327217024272976, 0.19388569224894303, 0.20493633744188156, 0.1691539611299857, 0.1784459861353629, 0.1976992016741107, 0.1851959246314685, 0.4595805275306588, 0.5406719277806935, 0.4718420879315084, 0.5127955413011346, 0.5134271600962814, 0.4856732319564825, 0.5881051253670793, 0.5367082270982426, 0.5825373995906865, 0.37714906584667673, 0.2877231600552971, 0.30998477296970084, 0.3803976999066153, 0.32663839910216175, 0.31156600721341765, 0.3185299014651306, 0.3689988017878796, 0.43981515672037896, 0.2126408928203567, 0.18069298121606447, 0.19441869198773898, 0.18448895125877063, 0.21518203926980373, 0.22265587099910478, 0.20561306659869238, 0.21307261694240376, 0.20270067282312565, 0.21401177626781243, 0.5281539819542018, 0.550599282906687, 0.6646801079074597, 0.22536059074545867, 0.5821151289159656, 0.23739455997061665, 0.6998385947055045, 0.2454649967458733, 0.7862472367302189, 0.20633287083873164, 0.15197173257143715, 0.8826764037542258, 0.2060000392324962, 0.8443122297021325, 0.16463396492407267, 0.16774099211211635, 0.21079468616986397, 0.7745530048099222, 0.1686095592668696, 0.205310062054193, 0.21629604487913112, 0.16334443859546177, 0.20314936355825908, 0.1520116302998462, 0.12685090762481088, 0.21151851223967777, 0.16464471005472114, 0.19191648334924472, 0.17253504170584477, 0.1896071598065301, 0.2919483699331198, 0.1881433451977238, 0.20878288354969066, 0.18278639097805194, 0.1783691562606753, 0.07938918374935366, 0.09207100500217058, 0.07408158434388645, 0.07610507186637483, 0.08466028655798419, 0.07113755009588618, 0.07026067560218818, 0.06774436419079721, 0.07788410441096982]}, "mutation_prompt": null}
{"id": "2f960187-74da-4ee6-bda6-9af13e770f38", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate local search-based neighborhood exploration to refine solutions once the population converges for enhanced local optima discovery.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8662493656457821, 0.8619691909237055, 0.8709302812730607, 0.8748717297870441, 0.8859510775980282, 0.8720649590966179, 0.8733838313802355, 0.8757950871932697, 0.8675581342889982, 0.8191929316699507, 0.8015490306515359, 0.8022440015769752, 0.805676781912002, 0.8196194271775713, 0.8214529713153749, 0.8058111026926837, 0.8224808468705438, 0.797946944976379, 0.5639363757478342, 0.17129113588047162, 0.5576600162880956, 0.17013431451196648, 0.17031093792146768, 0.15934386131196365, 0.6925128150787838, 0.15082444481083168, 0.12658601339196363, 0.17252314946498448, 0.14961248012256367, 0.14585823724830138, 0.17894798210229568, 0.17279913262398972, 0.6287757494604024, 0.17243757042273977, 0.13704461463389328, 0.1629146484393883, 0.9872297186947867, 0.9773868669653037, 0.9817455250112088, 0.9813289604840796, 0.975270343325193, 0.9846505456747011, 0.9818562956460403, 0.9842338620574949, 0.9795595452817505, 0.6360161932685617, 0.6980573100317047, 0.6716650870497105, 0.7163171189484105, 0.6930524099512487, 0.6595415454788923, 0.6321352160682847, 0.6125102708441964, 0.6450876085594408, 0.857015423386958, 0.8532643816367312, 0.820681851697664, 0.8551670067746713, 0.2716538882951911, 0.8473487209875636, 0.8570059467526765, 0.812085878289617, 0.8566751587756091, 0.189880252497443, 0.12344250000667778, 0.18343855274680787, 0.20804841896839965, 0.2932983284803178, 0.20834223275058228, 0.20318742755191344, 0.30432235595766055, 0.20098757797690725, 0.7298071025386694, 0.05957569202832469, 0.12328077590047737, 0.21262889059628087, 0.19803870786690259, 0.3113719181777118, 0.2352138338463744, 0.1884744133456715, 0.25209819025073066, 0.5844116962989399, 0.5809967827255309, 0.32524926185613945, 0.46857036445479494, 0.5569175148887234, 0.019023001017252295, 0.4026725746336359, 0.5599849635912513, 0.5433194904380585, 0.5936964315945281, 0.606686548339077, 0.6473323529693549, 0.6469202124156941, 0.5950922041894955, 0.6626073304434053, 0.6876283751709185, 0.6574613751234404, 0.6757786597741684, 0.06910830185415784, 0.06669841331557236, 0.25177455655653613, 0.1871287785588951, 0.21669349184641995, 0.17005737836390777, 0.19734324002308812, 0.16884588915880117, 0.1324949331953621, 0.4196734171254848, 0.4973163258169825, 0.4783063472226933, 0.42166383977816635, 0.4449098238108038, 0.4767757950805025, 0.4431384670826536, 0.3161637444754676, 0.44558202652782053, 0.7324376714326744, 0.813983216570429, 0.8053977750625168, 0.8070664890827522, 0.801413183126958, 0.7898097605630805, 0.7950486832907574, 0.8134382404044601, 0.7898193958137745, 0.1526650403294516, 0.12487052447143521, 0.10185799708666876, 0.10666310207360707, 0.13543730768619844, 0.12076315167576779, 0.10718894783528143, 0.14696586585170768, 0.10776760185205514, 0.1558027020844044, 0.15630476210246613, 0.20176461376372878, 0.19410186829837983, 0.18617595354386518, 0.15819848003333392, 0.23995539387513565, 0.19744015975023543, 0.2082013194660911, 0.4229613979882534, 0.5645394972834085, 0.6442224175481019, 0.6861757917761218, 0.6458377339910735, 0.6768949200878625, 0.7021752780866464, 0.6813524229170073, 0.6581036872843865, 0.4658773010500735, 0.4437687145628123, 0.4623114776889502, 0.47283253296630856, 0.37878771039226755, 0.44278187381420875, 0.5619494892539747, 0.5589174698410764, 0.5890768710158811, 0.18873994882226486, 0.18859727728297893, 0.21497982066530053, 0.22368375411254116, 0.1875375580033417, 0.19445524663689384, 0.20546162788490663, 0.20147793565591265, 0.20678045649687715, 0.23379811456108257, 0.24138699793875407, 0.713642890094057, 0.2353983089218531, 0.22938292540391514, 0.759717414800901, 0.7236391742698172, 0.6537169398869608, 0.23337016140520617, 0.16757949714913956, 0.20460381375755743, 0.13296777895979628, 0.1682356210270094, 0.18507175355753913, 0.8631748016028501, 0.15672199682485566, 0.19378939208047452, 0.20908582740139126, 0.19985039344691669, 0.20818163625021846, 0.8449243424873454, 0.20664763707589495, 0.16341722909031542, 0.1994181842628101, 0.8780294366284318, 0.8060022205693541, 0.20517393310460896, 0.20591350385562524, 0.18591796530597882, 0.17992265605312585, 0.1654112322320076, 0.1499904799154248, 0.1872214310472613, 0.18363471790857588, 0.19470965246123328, 0.18198327896350386, 0.09008895925600302, 0.08236066132268283, 0.07614002522752328, 0.0844187354402477, 0.08303528274477534, 0.07920831454630661, 0.08534602731750707, 0.07777324640046723, 0.08572644962571829]}, "mutation_prompt": null}
{"id": "c31a2816-989f-41c2-91a9-44391226c265", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        self.mutation_factor = 0.7 + 0.3 * np.random.rand()  # Adaptive mutation scaling\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = self.crossover_rate * (1 - np.exp(-5 * np.random.rand()))  # Dynamic crossover probability\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive mutation scaling and dynamic crossover probability to better exploit and explore the search space.", "configspace": "", "generation": 17, "fitness": 0.39811725112348, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.29.", "error": "", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8901266405597769, 0.8935977555244763, 0.9024737233817561, 0.9133271325864035, 0.8910300970221843, 0.9015590672474774, 0.9017514380590305, 0.9031879144378749, 0.8746159354472005, 0.8363245768082834, 0.8259710616773731, 0.8128914551741915, 0.8280429811301718, 0.7423245715579311, 0.8109192591536525, 0.8250865259960639, 0.00677147529713551, 0.08606534056137394, 0.16042213825832585, 0.14422464319111983, 0.1613297365788685, 0.1660292962836184, 0.817564896775665, 0.27592126726720234, 0.15749234856277106, 0.06193109969918331, 0.1414240995651166, 0.15923806041178612, 0.18449680380968336, 0.15459426195152481, 0.16434361163868816, 0.13162265888121805, 0.13316477012382988, 0.18081239586776232, 0.17944249312948957, 0.18167956773137495, 0.9792105978141342, 0.9821896042737996, 0.9820071437000384, 0.9727329073339201, 0.9762206921949859, 0.9837419554098631, 0.9817748681003706, 0.9761416504534702, 0.9723311680766579, 0.7592066557028628, 0.7187667734072211, 0.7523493403572918, 0.7424563938717057, 0.7236948342082745, 0.7313371624956749, 0.7584294263630023, 0.6874215026942275, 0.738050588310773, 0.22437592351889035, 0.16917088198046693, 0.8302198714225895, 0.8334772944535134, 0.15966047893827562, 0.2124790686660437, 0.7754630248377511, 0.6962521882610364, 0.8524801279407754, 0.5176189632583876, 0.542271815805174, 0.6798804728871908, 0.4836173137622882, 0.4893712946409987, 0.4603121669528115, 0.6693021572252296, 0.6196792873016717, 0.2902429957431989, 0.4344537255250074, 0.023567050042129667, 0.28657160833618156, 0.6718240802856915, 0.40186140014118055, 0.25850283736912183, 0.5138510065318698, 0.4397758422842357, 0.36709606718793786, 0.26441060355755985, 0.2226128606474037, 0.17004252727402724, 0.2678735986617127, 0.22052844575304853, 0.20316884450657058, 0.2294370113413554, 0.16696806907018436, 0.19448246372562006, 0.33658872468391887, 0.3248337564694843, 0.3295676109452573, 0.2812981452217558, 0.2819770042328915, 0.23906693098205312, 0.41862774408349546, 0.3617985618586146, 0.4565021027757459, 0.11764095777235506, 9.999999999998899e-05, 0.13063705131278913, 0.09308017152175452, 0.12206869953462751, 0.17677132325910294, 0.13367950693077146, 0.26753869339879743, 0.15150806306506548, 0.28648810751574716, 0.22519864435953119, 0.27866693092943806, 0.33335214125383805, 0.3582210447195926, 0.36890273952345376, 0.003995971257853115, 0.24067380340041133, 0.2678547846942677, 0.7288710746865559, 0.6798921850360651, 0.67704154384623, 0.6834888716156307, 0.7036852088551555, 0.6750212573291533, 0.6620780541785976, 0.6776542015783453, 0.7656182009537673, 0.1031419922659228, 0.11234073028194147, 0.12681931636597932, 0.1402148833087633, 0.08849728052005135, 0.14897016088465298, 0.09101992702427064, 0.11618029361870319, 0.12794110930778801, 0.14289506172467592, 0.22442740110332038, 0.7763577254960337, 0.1676118607069087, 0.22123553355659864, 0.1681530237279274, 0.2085208717128536, 0.26724466942391634, 0.2327298640963461, 0.505227955056859, 0.549114470016544, 0.31916036501367606, 0.4952253181651337, 0.6936830155363576, 0.5071083118043733, 0.7305095883658377, 0.7008848574928608, 0.4947204058865118, 0.3351096931278471, 0.3671016626193616, 0.28064600992848476, 0.1928237492566085, 0.3537172844448818, 0.4042724251729992, 0.31127521787565915, 0.4955798798061073, 0.3937138431056447, 0.19049365951150066, 0.22705133336811267, 0.2043684611130414, 0.2499174122999912, 0.18680942010581114, 0.19640238576910163, 0.17305828391400113, 0.19266044155527484, 0.18600217861663804, 0.21934194654595196, 0.1995598232922, 0.7865862739126305, 0.20878832916863, 0.22241870264415264, 0.2488946372055042, 0.2466023612137156, 0.8206339716249503, 0.8326928092593231, 0.16081920434993624, 0.16385225608014675, 0.15373021159076894, 0.9259969072436124, 0.1985370330990065, 0.16838206834599623, 0.18589802024860946, 0.9080064057921038, 0.17600596342717056, 0.14855370626962972, 0.16849865950582354, 0.1678483382704684, 0.209260296139698, 0.1640232285985428, 0.210357599335665, 0.8128036250611921, 0.859453748079347, 0.12775083429274714, 0.16284713144110796, 0.17158219345298475, 0.18831087165610394, 0.14973301592010868, 0.18193957238670477, 0.16473728185151704, 0.19608059942394762, 0.16783342103889176, 0.18706737861086753, 0.09092994392867282, 0.14408869457136986, 0.0854694902700398, 0.08370286258145898, 0.08090471464009019, 0.08872328805173635, 0.088354939624528, 0.07451039871441101, 0.08751660011664264]}, "mutation_prompt": null}
{"id": "7ed9f238-f82a-40c3-9179-cfe23f23f22a", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        diversity = np.std(population, axis=0).mean()\n        adaptive_crossover_rate = 0.9 - 0.3 * (diversity / 5.0)\n        cross_points = np.random.rand(self.dim) < adaptive_crossover_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive mutation factor and incorporate adaptive crossover rate based on the diversity of the population to enhance exploration and exploitation balance.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'population' is not defined\").", "error": "NameError(\"name 'population' is not defined\")", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {}, "mutation_prompt": null}
{"id": "ad8a8ee9-6d56-4c7c-a605-90f6d4940c3e", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate local search-based neighborhood exploration to refine solutions once the population converges for enhanced local optima discovery.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8662493656457821, 0.8619691909237055, 0.8709302812730607, 0.8748717297870441, 0.8859510775980282, 0.8720649590966179, 0.8733838313802355, 0.8757950871932697, 0.8675581342889982, 0.8191929316699507, 0.8015490306515359, 0.8022440015769752, 0.805676781912002, 0.8196194271775713, 0.8214529713153749, 0.8058111026926837, 0.8224808468705438, 0.797946944976379, 0.5639363757478342, 0.17129113588047162, 0.5576600162880956, 0.17013431451196648, 0.17031093792146768, 0.15934386131196365, 0.6925128150787838, 0.15082444481083168, 0.12658601339196363, 0.17252314946498448, 0.14961248012256367, 0.14585823724830138, 0.17894798210229568, 0.17279913262398972, 0.6287757494604024, 0.17243757042273977, 0.13704461463389328, 0.1629146484393883, 0.9872297186947867, 0.9773868669653037, 0.9817455250112088, 0.9813289604840796, 0.975270343325193, 0.9846505456747011, 0.9818562956460403, 0.9842338620574949, 0.9795595452817505, 0.6360161932685617, 0.6980573100317047, 0.6716650870497105, 0.7163171189484105, 0.6930524099512487, 0.6595415454788923, 0.6321352160682847, 0.6125102708441964, 0.6450876085594408, 0.857015423386958, 0.8532643816367312, 0.820681851697664, 0.8551670067746713, 0.2716538882951911, 0.8473487209875636, 0.8570059467526765, 0.812085878289617, 0.8566751587756091, 0.189880252497443, 0.12344250000667778, 0.18343855274680787, 0.20804841896839965, 0.2932983284803178, 0.20834223275058228, 0.20318742755191344, 0.30432235595766055, 0.20098757797690725, 0.7298071025386694, 0.05957569202832469, 0.12328077590047737, 0.21262889059628087, 0.19803870786690259, 0.3113719181777118, 0.2352138338463744, 0.1884744133456715, 0.25209819025073066, 0.5844116962989399, 0.5809967827255309, 0.32524926185613945, 0.46857036445479494, 0.5569175148887234, 0.019023001017252295, 0.4026725746336359, 0.5599849635912513, 0.5433194904380585, 0.5936964315945281, 0.606686548339077, 0.6473323529693549, 0.6469202124156941, 0.5950922041894955, 0.6626073304434053, 0.6876283751709185, 0.6574613751234404, 0.6757786597741684, 0.06910830185415784, 0.06669841331557236, 0.25177455655653613, 0.1871287785588951, 0.21669349184641995, 0.17005737836390777, 0.19734324002308812, 0.16884588915880117, 0.1324949331953621, 0.4196734171254848, 0.4973163258169825, 0.4783063472226933, 0.42166383977816635, 0.4449098238108038, 0.4767757950805025, 0.4431384670826536, 0.3161637444754676, 0.44558202652782053, 0.7324376714326744, 0.813983216570429, 0.8053977750625168, 0.8070664890827522, 0.801413183126958, 0.7898097605630805, 0.7950486832907574, 0.8134382404044601, 0.7898193958137745, 0.1526650403294516, 0.12487052447143521, 0.10185799708666876, 0.10666310207360707, 0.13543730768619844, 0.12076315167576779, 0.10718894783528143, 0.14696586585170768, 0.10776760185205514, 0.1558027020844044, 0.15630476210246613, 0.20176461376372878, 0.19410186829837983, 0.18617595354386518, 0.15819848003333392, 0.23995539387513565, 0.19744015975023543, 0.2082013194660911, 0.4229613979882534, 0.5645394972834085, 0.6442224175481019, 0.6861757917761218, 0.6458377339910735, 0.6768949200878625, 0.7021752780866464, 0.6813524229170073, 0.6581036872843865, 0.4658773010500735, 0.4437687145628123, 0.4623114776889502, 0.47283253296630856, 0.37878771039226755, 0.44278187381420875, 0.5619494892539747, 0.5589174698410764, 0.5890768710158811, 0.18873994882226486, 0.18859727728297893, 0.21497982066530053, 0.22368375411254116, 0.1875375580033417, 0.19445524663689384, 0.20546162788490663, 0.20147793565591265, 0.20678045649687715, 0.23379811456108257, 0.24138699793875407, 0.713642890094057, 0.2353983089218531, 0.22938292540391514, 0.759717414800901, 0.7236391742698172, 0.6537169398869608, 0.23337016140520617, 0.16757949714913956, 0.20460381375755743, 0.13296777895979628, 0.1682356210270094, 0.18507175355753913, 0.8631748016028501, 0.15672199682485566, 0.19378939208047452, 0.20908582740139126, 0.19985039344691669, 0.20818163625021846, 0.8449243424873454, 0.20664763707589495, 0.16341722909031542, 0.1994181842628101, 0.8780294366284318, 0.8060022205693541, 0.20517393310460896, 0.20591350385562524, 0.18591796530597882, 0.17992265605312585, 0.1654112322320076, 0.1499904799154248, 0.1872214310472613, 0.18363471790857588, 0.19470965246123328, 0.18198327896350386, 0.09008895925600302, 0.08236066132268283, 0.07614002522752328, 0.0844187354402477, 0.08303528274477534, 0.07920831454630661, 0.08534602731750707, 0.07777324640046723, 0.08572644962571829]}, "mutation_prompt": null}
{"id": "c91d4893-f623-492d-8a2c-6d4afaaa5b6e", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        perturbation = np.random.normal(0, 0.01, self.dim)  # Add slight randomness\n        mutant = mutant + perturbation\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        self.crossover_rate = 0.6 + 0.4 * np.random.rand()  # Adaptive crossover\n        cross_points = np.random.rand(self.dim) < self.crossover_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive crossover rates and enhanced mutation to improve exploration and exploitation balance.", "configspace": "", "generation": 20, "fitness": 0.3423783570865195, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.25.", "error": "", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.693063658915131, 0.7577452799915851, 0.6901850950765813, 0.6724141093492185, 0.6757817768264787, 0.723498362339418, 0.6889527168271483, 0.6883712085462816, 0.6872208450407006, 0.35589454742918714, 0.34104910552464196, 0.31417427978702706, 0.36161600648306425, 0.3516588475301954, 0.33824740728514524, 0.329718467739589, 0.3325801919535769, 0.32640484681289494, 0.35078524997278016, 0.15808637710565976, 0.14137084826752633, 0.3449161448066316, 0.1635899996519109, 0.1800830042058431, 0.15908089062257424, 0.15590712524733985, 0.1742663264814197, 0.1372051776916614, 0.33225832715455017, 0.17957318128483546, 0.1407843836650312, 0.1260747770010352, 0.15326272552991582, 0.1705066299872675, 0.14380907960719247, 0.29279196206461033, 0.9708088741763283, 0.9819301082178611, 0.9803038137722027, 0.9731909020817548, 0.9821765419058686, 0.9774835500148925, 0.9824662400589559, 0.9638100383856861, 0.9638447102092671, 0.4846643508015156, 0.46726946538549863, 0.4658698144549478, 0.4555738291246937, 0.4724908454080943, 0.457036963166095, 0.4651608150616148, 0.4672257331475771, 0.4566130688909523, 0.8513709336833546, 0.8323379665357409, 0.8543785693181176, 0.8399263261421952, 0.846077821426494, 0.26721605536307536, 0.8564583461545112, 0.8845671179808398, 0.8261041008573171, 0.22233225501928355, 0.23761535968121184, 0.2639950659411022, 0.28407787103021986, 0.2373449021088272, 0.23194819283901313, 0.2899122451527346, 0.2704455194090791, 0.21381217928136242, 0.12059574885799906, 0.2458381947293794, 0.11797790478093773, 0.29194288898448084, 0.2562793770225241, 0.24841939665787294, 0.24455960864819004, 0.3301655293984307, 0.24932841405433515, 0.15411116276006687, 0.10595942744492237, 0.12437219596555638, 0.03445826577629285, 0.15329110237882015, 0.15912049893858604, 0.15296165011270935, 0.1336108925284054, 0.1266614576136852, 0.1985697987192684, 0.17956286794192133, 0.20593002247775205, 0.2153698471825103, 0.19392918632013967, 0.23646358595328298, 0.21626226398592485, 0.18877529602803578, 0.19635052074328874, 0.06411424995196724, 0.09623054965218247, 0.056707175162148404, 0.07920177497265724, 0.05879859804647036, 0.0684061242343712, 0.05919023123231948, 0.08896190108604929, 0.0859817424952436, 0.19212567663618818, 0.1842033032755691, 0.19318840035699159, 0.19313358375356526, 0.18846787903642903, 0.1995937425166625, 0.19116635741362165, 0.20111361682623374, 0.1880941499654898, 0.5361089181929107, 0.5367772744983369, 0.5362227586039854, 0.5428113432202875, 0.5491354970406956, 0.5473666227188902, 0.5344585015289804, 0.581094631512027, 0.5778997306650712, 0.1290460855887775, 0.12213715946441628, 0.25603934809359374, 0.12119934413332556, 0.1311699234613385, 0.12444138555289519, 0.15745650089607588, 0.1471364226475287, 0.13957928640341122, 0.3653444186512844, 0.3674924813687067, 0.16306051986370107, 0.2027427299933241, 0.44398043582478, 0.18738331629737315, 0.2635906987123703, 0.19534391700215503, 0.34837823561122994, 0.3818380143052019, 0.39273343333110056, 0.3891302383894304, 0.40322651807400633, 0.39342110547639664, 0.40233993922241085, 0.4060138727834476, 0.40838817440161357, 0.39478993030951337, 0.3146963865326471, 0.3079673323454267, 0.31580849258258425, 0.31618013285873425, 0.31578674779904625, 0.27537014327245146, 0.32192858751078224, 0.32403212532904613, 0.34890032620569567, 0.1935261627957332, 0.21746151404016034, 0.18254384902323217, 0.19890536623360966, 0.21507164407076673, 0.21494354306976682, 0.21878878536292445, 0.1943913079085735, 0.20559931608817272, 0.49690696207778007, 0.24189237030490385, 0.20623584421383367, 0.24787458401953422, 0.2419351448104622, 0.46079565871534356, 0.24944917864692095, 0.48307402456575066, 0.19209512803766737, 0.16495166933040328, 0.16855746477842437, 0.8686851876958122, 0.8908633090154495, 0.8663665925851839, 0.8155885686681879, 0.1694621841257724, 0.8505400758085513, 0.8943617810666022, 0.15419715372857357, 0.602327897785762, 0.20738214192293325, 0.20913026320395778, 0.210726038749254, 0.5363928796511885, 0.7653246295978282, 0.21035127952250798, 0.21203535484554514, 0.2088001272943535, 0.1906078731720855, 0.22668702430624366, 0.2115340295845226, 0.21923683340168287, 0.21249715905606148, 0.2204717089356253, 0.21374081822551627, 0.1961322577600697, 0.09999074179328094, 0.09078117307742306, 0.08774094064073268, 0.08510175735085468, 0.0865366864804904, 0.08606160980867739, 0.09424010306620989, 0.08372032991131984, 0.08084449386557502]}, "mutation_prompt": null}
{"id": "5029890c-f73b-45d8-bf5d-cafe902a7f09", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        # Adaptive mutation factor based on budget utilization\n        self.mutation_factor = 0.5 + 0.5 * (1 - (self.budget - evaluations) / self.budget)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Integrate adaptive mutation factor scaling to enhance exploration and exploitation balance dynamically.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'evaluations' is not defined\").", "error": "NameError(\"name 'evaluations' is not defined\")", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {}, "mutation_prompt": null}
{"id": "e2063f64-6bd6-481e-951f-3cd1906007cc", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate local search-based neighborhood exploration to refine solutions once the population converges for enhanced local optima discovery.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8662493656457821, 0.8619691909237055, 0.8709302812730607, 0.8748717297870441, 0.8859510775980282, 0.8720649590966179, 0.8733838313802355, 0.8757950871932697, 0.8675581342889982, 0.8191929316699507, 0.8015490306515359, 0.8022440015769752, 0.805676781912002, 0.8196194271775713, 0.8214529713153749, 0.8058111026926837, 0.8224808468705438, 0.797946944976379, 0.5639363757478342, 0.17129113588047162, 0.5576600162880956, 0.17013431451196648, 0.17031093792146768, 0.15934386131196365, 0.6925128150787838, 0.15082444481083168, 0.12658601339196363, 0.17252314946498448, 0.14961248012256367, 0.14585823724830138, 0.17894798210229568, 0.17279913262398972, 0.6287757494604024, 0.17243757042273977, 0.13704461463389328, 0.1629146484393883, 0.9872297186947867, 0.9773868669653037, 0.9817455250112088, 0.9813289604840796, 0.975270343325193, 0.9846505456747011, 0.9818562956460403, 0.9842338620574949, 0.9795595452817505, 0.6360161932685617, 0.6980573100317047, 0.6716650870497105, 0.7163171189484105, 0.6930524099512487, 0.6595415454788923, 0.6321352160682847, 0.6125102708441964, 0.6450876085594408, 0.857015423386958, 0.8532643816367312, 0.820681851697664, 0.8551670067746713, 0.2716538882951911, 0.8473487209875636, 0.8570059467526765, 0.812085878289617, 0.8566751587756091, 0.189880252497443, 0.12344250000667778, 0.18343855274680787, 0.20804841896839965, 0.2932983284803178, 0.20834223275058228, 0.20318742755191344, 0.30432235595766055, 0.20098757797690725, 0.7298071025386694, 0.05957569202832469, 0.12328077590047737, 0.21262889059628087, 0.19803870786690259, 0.3113719181777118, 0.2352138338463744, 0.1884744133456715, 0.25209819025073066, 0.5844116962989399, 0.5809967827255309, 0.32524926185613945, 0.46857036445479494, 0.5569175148887234, 0.019023001017252295, 0.4026725746336359, 0.5599849635912513, 0.5433194904380585, 0.5936964315945281, 0.606686548339077, 0.6473323529693549, 0.6469202124156941, 0.5950922041894955, 0.6626073304434053, 0.6876283751709185, 0.6574613751234404, 0.6757786597741684, 0.06910830185415784, 0.06669841331557236, 0.25177455655653613, 0.1871287785588951, 0.21669349184641995, 0.17005737836390777, 0.19734324002308812, 0.16884588915880117, 0.1324949331953621, 0.4196734171254848, 0.4973163258169825, 0.4783063472226933, 0.42166383977816635, 0.4449098238108038, 0.4767757950805025, 0.4431384670826536, 0.3161637444754676, 0.44558202652782053, 0.7324376714326744, 0.813983216570429, 0.8053977750625168, 0.8070664890827522, 0.801413183126958, 0.7898097605630805, 0.7950486832907574, 0.8134382404044601, 0.7898193958137745, 0.1526650403294516, 0.12487052447143521, 0.10185799708666876, 0.10666310207360707, 0.13543730768619844, 0.12076315167576779, 0.10718894783528143, 0.14696586585170768, 0.10776760185205514, 0.1558027020844044, 0.15630476210246613, 0.20176461376372878, 0.19410186829837983, 0.18617595354386518, 0.15819848003333392, 0.23995539387513565, 0.19744015975023543, 0.2082013194660911, 0.4229613979882534, 0.5645394972834085, 0.6442224175481019, 0.6861757917761218, 0.6458377339910735, 0.6768949200878625, 0.7021752780866464, 0.6813524229170073, 0.6581036872843865, 0.4658773010500735, 0.4437687145628123, 0.4623114776889502, 0.47283253296630856, 0.37878771039226755, 0.44278187381420875, 0.5619494892539747, 0.5589174698410764, 0.5890768710158811, 0.18873994882226486, 0.18859727728297893, 0.21497982066530053, 0.22368375411254116, 0.1875375580033417, 0.19445524663689384, 0.20546162788490663, 0.20147793565591265, 0.20678045649687715, 0.23379811456108257, 0.24138699793875407, 0.713642890094057, 0.2353983089218531, 0.22938292540391514, 0.759717414800901, 0.7236391742698172, 0.6537169398869608, 0.23337016140520617, 0.16757949714913956, 0.20460381375755743, 0.13296777895979628, 0.1682356210270094, 0.18507175355753913, 0.8631748016028501, 0.15672199682485566, 0.19378939208047452, 0.20908582740139126, 0.19985039344691669, 0.20818163625021846, 0.8449243424873454, 0.20664763707589495, 0.16341722909031542, 0.1994181842628101, 0.8780294366284318, 0.8060022205693541, 0.20517393310460896, 0.20591350385562524, 0.18591796530597882, 0.17992265605312585, 0.1654112322320076, 0.1499904799154248, 0.1872214310472613, 0.18363471790857588, 0.19470965246123328, 0.18198327896350386, 0.09008895925600302, 0.08236066132268283, 0.07614002522752328, 0.0844187354402477, 0.08303528274477534, 0.07920831454630661, 0.08534602731750707, 0.07777324640046723, 0.08572644962571829]}, "mutation_prompt": null}
{"id": "2f7f9a0c-6e59-4444-b79d-100b7a1a4991", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate local search-based neighborhood exploration to refine solutions once the population converges for enhanced local optima discovery.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8662493656457821, 0.8619691909237055, 0.8709302812730607, 0.8748717297870441, 0.8859510775980282, 0.8720649590966179, 0.8733838313802355, 0.8757950871932697, 0.8675581342889982, 0.8191929316699507, 0.8015490306515359, 0.8022440015769752, 0.805676781912002, 0.8196194271775713, 0.8214529713153749, 0.8058111026926837, 0.8224808468705438, 0.797946944976379, 0.5639363757478342, 0.17129113588047162, 0.5576600162880956, 0.17013431451196648, 0.17031093792146768, 0.15934386131196365, 0.6925128150787838, 0.15082444481083168, 0.12658601339196363, 0.17252314946498448, 0.14961248012256367, 0.14585823724830138, 0.17894798210229568, 0.17279913262398972, 0.6287757494604024, 0.17243757042273977, 0.13704461463389328, 0.1629146484393883, 0.9872297186947867, 0.9773868669653037, 0.9817455250112088, 0.9813289604840796, 0.975270343325193, 0.9846505456747011, 0.9818562956460403, 0.9842338620574949, 0.9795595452817505, 0.6360161932685617, 0.6980573100317047, 0.6716650870497105, 0.7163171189484105, 0.6930524099512487, 0.6595415454788923, 0.6321352160682847, 0.6125102708441964, 0.6450876085594408, 0.857015423386958, 0.8532643816367312, 0.820681851697664, 0.8551670067746713, 0.2716538882951911, 0.8473487209875636, 0.8570059467526765, 0.812085878289617, 0.8566751587756091, 0.189880252497443, 0.12344250000667778, 0.18343855274680787, 0.20804841896839965, 0.2932983284803178, 0.20834223275058228, 0.20318742755191344, 0.30432235595766055, 0.20098757797690725, 0.7298071025386694, 0.05957569202832469, 0.12328077590047737, 0.21262889059628087, 0.19803870786690259, 0.3113719181777118, 0.2352138338463744, 0.1884744133456715, 0.25209819025073066, 0.5844116962989399, 0.5809967827255309, 0.32524926185613945, 0.46857036445479494, 0.5569175148887234, 0.019023001017252295, 0.4026725746336359, 0.5599849635912513, 0.5433194904380585, 0.5936964315945281, 0.606686548339077, 0.6473323529693549, 0.6469202124156941, 0.5950922041894955, 0.6626073304434053, 0.6876283751709185, 0.6574613751234404, 0.6757786597741684, 0.06910830185415784, 0.06669841331557236, 0.25177455655653613, 0.1871287785588951, 0.21669349184641995, 0.17005737836390777, 0.19734324002308812, 0.16884588915880117, 0.1324949331953621, 0.4196734171254848, 0.4973163258169825, 0.4783063472226933, 0.42166383977816635, 0.4449098238108038, 0.4767757950805025, 0.4431384670826536, 0.3161637444754676, 0.44558202652782053, 0.7324376714326744, 0.813983216570429, 0.8053977750625168, 0.8070664890827522, 0.801413183126958, 0.7898097605630805, 0.7950486832907574, 0.8134382404044601, 0.7898193958137745, 0.1526650403294516, 0.12487052447143521, 0.10185799708666876, 0.10666310207360707, 0.13543730768619844, 0.12076315167576779, 0.10718894783528143, 0.14696586585170768, 0.10776760185205514, 0.1558027020844044, 0.15630476210246613, 0.20176461376372878, 0.19410186829837983, 0.18617595354386518, 0.15819848003333392, 0.23995539387513565, 0.19744015975023543, 0.2082013194660911, 0.4229613979882534, 0.5645394972834085, 0.6442224175481019, 0.6861757917761218, 0.6458377339910735, 0.6768949200878625, 0.7021752780866464, 0.6813524229170073, 0.6581036872843865, 0.4658773010500735, 0.4437687145628123, 0.4623114776889502, 0.47283253296630856, 0.37878771039226755, 0.44278187381420875, 0.5619494892539747, 0.5589174698410764, 0.5890768710158811, 0.18873994882226486, 0.18859727728297893, 0.21497982066530053, 0.22368375411254116, 0.1875375580033417, 0.19445524663689384, 0.20546162788490663, 0.20147793565591265, 0.20678045649687715, 0.23379811456108257, 0.24138699793875407, 0.713642890094057, 0.2353983089218531, 0.22938292540391514, 0.759717414800901, 0.7236391742698172, 0.6537169398869608, 0.23337016140520617, 0.16757949714913956, 0.20460381375755743, 0.13296777895979628, 0.1682356210270094, 0.18507175355753913, 0.8631748016028501, 0.15672199682485566, 0.19378939208047452, 0.20908582740139126, 0.19985039344691669, 0.20818163625021846, 0.8449243424873454, 0.20664763707589495, 0.16341722909031542, 0.1994181842628101, 0.8780294366284318, 0.8060022205693541, 0.20517393310460896, 0.20591350385562524, 0.18591796530597882, 0.17992265605312585, 0.1654112322320076, 0.1499904799154248, 0.1872214310472613, 0.18363471790857588, 0.19470965246123328, 0.18198327896350386, 0.09008895925600302, 0.08236066132268283, 0.07614002522752328, 0.0844187354402477, 0.08303528274477534, 0.07920831454630661, 0.08534602731750707, 0.07777324640046723, 0.08572644962571829]}, "mutation_prompt": null}
{"id": "7d7544aa-08fc-4538-ada0-cd7830a36d9a", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate local search-based neighborhood exploration to refine solutions once the population converges for enhanced local optima discovery.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8662493656457821, 0.8619691909237055, 0.8709302812730607, 0.8748717297870441, 0.8859510775980282, 0.8720649590966179, 0.8733838313802355, 0.8757950871932697, 0.8675581342889982, 0.8191929316699507, 0.8015490306515359, 0.8022440015769752, 0.805676781912002, 0.8196194271775713, 0.8214529713153749, 0.8058111026926837, 0.8224808468705438, 0.797946944976379, 0.5639363757478342, 0.17129113588047162, 0.5576600162880956, 0.17013431451196648, 0.17031093792146768, 0.15934386131196365, 0.6925128150787838, 0.15082444481083168, 0.12658601339196363, 0.17252314946498448, 0.14961248012256367, 0.14585823724830138, 0.17894798210229568, 0.17279913262398972, 0.6287757494604024, 0.17243757042273977, 0.13704461463389328, 0.1629146484393883, 0.9872297186947867, 0.9773868669653037, 0.9817455250112088, 0.9813289604840796, 0.975270343325193, 0.9846505456747011, 0.9818562956460403, 0.9842338620574949, 0.9795595452817505, 0.6360161932685617, 0.6980573100317047, 0.6716650870497105, 0.7163171189484105, 0.6930524099512487, 0.6595415454788923, 0.6321352160682847, 0.6125102708441964, 0.6450876085594408, 0.857015423386958, 0.8532643816367312, 0.820681851697664, 0.8551670067746713, 0.2716538882951911, 0.8473487209875636, 0.8570059467526765, 0.812085878289617, 0.8566751587756091, 0.189880252497443, 0.12344250000667778, 0.18343855274680787, 0.20804841896839965, 0.2932983284803178, 0.20834223275058228, 0.20318742755191344, 0.30432235595766055, 0.20098757797690725, 0.7298071025386694, 0.05957569202832469, 0.12328077590047737, 0.21262889059628087, 0.19803870786690259, 0.3113719181777118, 0.2352138338463744, 0.1884744133456715, 0.25209819025073066, 0.5844116962989399, 0.5809967827255309, 0.32524926185613945, 0.46857036445479494, 0.5569175148887234, 0.019023001017252295, 0.4026725746336359, 0.5599849635912513, 0.5433194904380585, 0.5936964315945281, 0.606686548339077, 0.6473323529693549, 0.6469202124156941, 0.5950922041894955, 0.6626073304434053, 0.6876283751709185, 0.6574613751234404, 0.6757786597741684, 0.06910830185415784, 0.06669841331557236, 0.25177455655653613, 0.1871287785588951, 0.21669349184641995, 0.17005737836390777, 0.19734324002308812, 0.16884588915880117, 0.1324949331953621, 0.4196734171254848, 0.4973163258169825, 0.4783063472226933, 0.42166383977816635, 0.4449098238108038, 0.4767757950805025, 0.4431384670826536, 0.3161637444754676, 0.44558202652782053, 0.7324376714326744, 0.813983216570429, 0.8053977750625168, 0.8070664890827522, 0.801413183126958, 0.7898097605630805, 0.7950486832907574, 0.8134382404044601, 0.7898193958137745, 0.1526650403294516, 0.12487052447143521, 0.10185799708666876, 0.10666310207360707, 0.13543730768619844, 0.12076315167576779, 0.10718894783528143, 0.14696586585170768, 0.10776760185205514, 0.1558027020844044, 0.15630476210246613, 0.20176461376372878, 0.19410186829837983, 0.18617595354386518, 0.15819848003333392, 0.23995539387513565, 0.19744015975023543, 0.2082013194660911, 0.4229613979882534, 0.5645394972834085, 0.6442224175481019, 0.6861757917761218, 0.6458377339910735, 0.6768949200878625, 0.7021752780866464, 0.6813524229170073, 0.6581036872843865, 0.4658773010500735, 0.4437687145628123, 0.4623114776889502, 0.47283253296630856, 0.37878771039226755, 0.44278187381420875, 0.5619494892539747, 0.5589174698410764, 0.5890768710158811, 0.18873994882226486, 0.18859727728297893, 0.21497982066530053, 0.22368375411254116, 0.1875375580033417, 0.19445524663689384, 0.20546162788490663, 0.20147793565591265, 0.20678045649687715, 0.23379811456108257, 0.24138699793875407, 0.713642890094057, 0.2353983089218531, 0.22938292540391514, 0.759717414800901, 0.7236391742698172, 0.6537169398869608, 0.23337016140520617, 0.16757949714913956, 0.20460381375755743, 0.13296777895979628, 0.1682356210270094, 0.18507175355753913, 0.8631748016028501, 0.15672199682485566, 0.19378939208047452, 0.20908582740139126, 0.19985039344691669, 0.20818163625021846, 0.8449243424873454, 0.20664763707589495, 0.16341722909031542, 0.1994181842628101, 0.8780294366284318, 0.8060022205693541, 0.20517393310460896, 0.20591350385562524, 0.18591796530597882, 0.17992265605312585, 0.1654112322320076, 0.1499904799154248, 0.1872214310472613, 0.18363471790857588, 0.19470965246123328, 0.18198327896350386, 0.09008895925600302, 0.08236066132268283, 0.07614002522752328, 0.0844187354402477, 0.08303528274477534, 0.07920831454630661, 0.08534602731750707, 0.07777324640046723, 0.08572644962571829]}, "mutation_prompt": null}
{"id": "076d05b2-c259-45fe-83ef-a66ca6200b6f", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate local search-based neighborhood exploration to refine solutions once the population converges for enhanced local optima discovery.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8662493656457821, 0.8619691909237055, 0.8709302812730607, 0.8748717297870441, 0.8859510775980282, 0.8720649590966179, 0.8733838313802355, 0.8757950871932697, 0.8675581342889982, 0.8191929316699507, 0.8015490306515359, 0.8022440015769752, 0.805676781912002, 0.8196194271775713, 0.8214529713153749, 0.8058111026926837, 0.8224808468705438, 0.797946944976379, 0.5639363757478342, 0.17129113588047162, 0.5576600162880956, 0.17013431451196648, 0.17031093792146768, 0.15934386131196365, 0.6925128150787838, 0.15082444481083168, 0.12658601339196363, 0.17252314946498448, 0.14961248012256367, 0.14585823724830138, 0.17894798210229568, 0.17279913262398972, 0.6287757494604024, 0.17243757042273977, 0.13704461463389328, 0.1629146484393883, 0.9872297186947867, 0.9773868669653037, 0.9817455250112088, 0.9813289604840796, 0.975270343325193, 0.9846505456747011, 0.9818562956460403, 0.9842338620574949, 0.9795595452817505, 0.6360161932685617, 0.6980573100317047, 0.6716650870497105, 0.7163171189484105, 0.6930524099512487, 0.6595415454788923, 0.6321352160682847, 0.6125102708441964, 0.6450876085594408, 0.857015423386958, 0.8532643816367312, 0.820681851697664, 0.8551670067746713, 0.2716538882951911, 0.8473487209875636, 0.8570059467526765, 0.812085878289617, 0.8566751587756091, 0.189880252497443, 0.12344250000667778, 0.18343855274680787, 0.20804841896839965, 0.2932983284803178, 0.20834223275058228, 0.20318742755191344, 0.30432235595766055, 0.20098757797690725, 0.7298071025386694, 0.05957569202832469, 0.12328077590047737, 0.21262889059628087, 0.19803870786690259, 0.3113719181777118, 0.2352138338463744, 0.1884744133456715, 0.25209819025073066, 0.5844116962989399, 0.5809967827255309, 0.32524926185613945, 0.46857036445479494, 0.5569175148887234, 0.019023001017252295, 0.4026725746336359, 0.5599849635912513, 0.5433194904380585, 0.5936964315945281, 0.606686548339077, 0.6473323529693549, 0.6469202124156941, 0.5950922041894955, 0.6626073304434053, 0.6876283751709185, 0.6574613751234404, 0.6757786597741684, 0.06910830185415784, 0.06669841331557236, 0.25177455655653613, 0.1871287785588951, 0.21669349184641995, 0.17005737836390777, 0.19734324002308812, 0.16884588915880117, 0.1324949331953621, 0.4196734171254848, 0.4973163258169825, 0.4783063472226933, 0.42166383977816635, 0.4449098238108038, 0.4767757950805025, 0.4431384670826536, 0.3161637444754676, 0.44558202652782053, 0.7324376714326744, 0.813983216570429, 0.8053977750625168, 0.8070664890827522, 0.801413183126958, 0.7898097605630805, 0.7950486832907574, 0.8134382404044601, 0.7898193958137745, 0.1526650403294516, 0.12487052447143521, 0.10185799708666876, 0.10666310207360707, 0.13543730768619844, 0.12076315167576779, 0.10718894783528143, 0.14696586585170768, 0.10776760185205514, 0.1558027020844044, 0.15630476210246613, 0.20176461376372878, 0.19410186829837983, 0.18617595354386518, 0.15819848003333392, 0.23995539387513565, 0.19744015975023543, 0.2082013194660911, 0.4229613979882534, 0.5645394972834085, 0.6442224175481019, 0.6861757917761218, 0.6458377339910735, 0.6768949200878625, 0.7021752780866464, 0.6813524229170073, 0.6581036872843865, 0.4658773010500735, 0.4437687145628123, 0.4623114776889502, 0.47283253296630856, 0.37878771039226755, 0.44278187381420875, 0.5619494892539747, 0.5589174698410764, 0.5890768710158811, 0.18873994882226486, 0.18859727728297893, 0.21497982066530053, 0.22368375411254116, 0.1875375580033417, 0.19445524663689384, 0.20546162788490663, 0.20147793565591265, 0.20678045649687715, 0.23379811456108257, 0.24138699793875407, 0.713642890094057, 0.2353983089218531, 0.22938292540391514, 0.759717414800901, 0.7236391742698172, 0.6537169398869608, 0.23337016140520617, 0.16757949714913956, 0.20460381375755743, 0.13296777895979628, 0.1682356210270094, 0.18507175355753913, 0.8631748016028501, 0.15672199682485566, 0.19378939208047452, 0.20908582740139126, 0.19985039344691669, 0.20818163625021846, 0.8449243424873454, 0.20664763707589495, 0.16341722909031542, 0.1994181842628101, 0.8780294366284318, 0.8060022205693541, 0.20517393310460896, 0.20591350385562524, 0.18591796530597882, 0.17992265605312585, 0.1654112322320076, 0.1499904799154248, 0.1872214310472613, 0.18363471790857588, 0.19470965246123328, 0.18198327896350386, 0.09008895925600302, 0.08236066132268283, 0.07614002522752328, 0.0844187354402477, 0.08303528274477534, 0.07920831454630661, 0.08534602731750707, 0.07777324640046723, 0.08572644962571829]}, "mutation_prompt": null}
{"id": "a16c6628-97d0-4292-a56e-c52d4d0c2d1b", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate local search-based neighborhood exploration to refine solutions once the population converges for enhanced local optima discovery.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8662493656457821, 0.8619691909237055, 0.8709302812730607, 0.8748717297870441, 0.8859510775980282, 0.8720649590966179, 0.8733838313802355, 0.8757950871932697, 0.8675581342889982, 0.8191929316699507, 0.8015490306515359, 0.8022440015769752, 0.805676781912002, 0.8196194271775713, 0.8214529713153749, 0.8058111026926837, 0.8224808468705438, 0.797946944976379, 0.5639363757478342, 0.17129113588047162, 0.5576600162880956, 0.17013431451196648, 0.17031093792146768, 0.15934386131196365, 0.6925128150787838, 0.15082444481083168, 0.12658601339196363, 0.17252314946498448, 0.14961248012256367, 0.14585823724830138, 0.17894798210229568, 0.17279913262398972, 0.6287757494604024, 0.17243757042273977, 0.13704461463389328, 0.1629146484393883, 0.9872297186947867, 0.9773868669653037, 0.9817455250112088, 0.9813289604840796, 0.975270343325193, 0.9846505456747011, 0.9818562956460403, 0.9842338620574949, 0.9795595452817505, 0.6360161932685617, 0.6980573100317047, 0.6716650870497105, 0.7163171189484105, 0.6930524099512487, 0.6595415454788923, 0.6321352160682847, 0.6125102708441964, 0.6450876085594408, 0.857015423386958, 0.8532643816367312, 0.820681851697664, 0.8551670067746713, 0.2716538882951911, 0.8473487209875636, 0.8570059467526765, 0.812085878289617, 0.8566751587756091, 0.189880252497443, 0.12344250000667778, 0.18343855274680787, 0.20804841896839965, 0.2932983284803178, 0.20834223275058228, 0.20318742755191344, 0.30432235595766055, 0.20098757797690725, 0.7298071025386694, 0.05957569202832469, 0.12328077590047737, 0.21262889059628087, 0.19803870786690259, 0.3113719181777118, 0.2352138338463744, 0.1884744133456715, 0.25209819025073066, 0.5844116962989399, 0.5809967827255309, 0.32524926185613945, 0.46857036445479494, 0.5569175148887234, 0.019023001017252295, 0.4026725746336359, 0.5599849635912513, 0.5433194904380585, 0.5936964315945281, 0.606686548339077, 0.6473323529693549, 0.6469202124156941, 0.5950922041894955, 0.6626073304434053, 0.6876283751709185, 0.6574613751234404, 0.6757786597741684, 0.06910830185415784, 0.06669841331557236, 0.25177455655653613, 0.1871287785588951, 0.21669349184641995, 0.17005737836390777, 0.19734324002308812, 0.16884588915880117, 0.1324949331953621, 0.4196734171254848, 0.4973163258169825, 0.4783063472226933, 0.42166383977816635, 0.4449098238108038, 0.4767757950805025, 0.4431384670826536, 0.3161637444754676, 0.44558202652782053, 0.7324376714326744, 0.813983216570429, 0.8053977750625168, 0.8070664890827522, 0.801413183126958, 0.7898097605630805, 0.7950486832907574, 0.8134382404044601, 0.7898193958137745, 0.1526650403294516, 0.12487052447143521, 0.10185799708666876, 0.10666310207360707, 0.13543730768619844, 0.12076315167576779, 0.10718894783528143, 0.14696586585170768, 0.10776760185205514, 0.1558027020844044, 0.15630476210246613, 0.20176461376372878, 0.19410186829837983, 0.18617595354386518, 0.15819848003333392, 0.23995539387513565, 0.19744015975023543, 0.2082013194660911, 0.4229613979882534, 0.5645394972834085, 0.6442224175481019, 0.6861757917761218, 0.6458377339910735, 0.6768949200878625, 0.7021752780866464, 0.6813524229170073, 0.6581036872843865, 0.4658773010500735, 0.4437687145628123, 0.4623114776889502, 0.47283253296630856, 0.37878771039226755, 0.44278187381420875, 0.5619494892539747, 0.5589174698410764, 0.5890768710158811, 0.18873994882226486, 0.18859727728297893, 0.21497982066530053, 0.22368375411254116, 0.1875375580033417, 0.19445524663689384, 0.20546162788490663, 0.20147793565591265, 0.20678045649687715, 0.23379811456108257, 0.24138699793875407, 0.713642890094057, 0.2353983089218531, 0.22938292540391514, 0.759717414800901, 0.7236391742698172, 0.6537169398869608, 0.23337016140520617, 0.16757949714913956, 0.20460381375755743, 0.13296777895979628, 0.1682356210270094, 0.18507175355753913, 0.8631748016028501, 0.15672199682485566, 0.19378939208047452, 0.20908582740139126, 0.19985039344691669, 0.20818163625021846, 0.8449243424873454, 0.20664763707589495, 0.16341722909031542, 0.1994181842628101, 0.8780294366284318, 0.8060022205693541, 0.20517393310460896, 0.20591350385562524, 0.18591796530597882, 0.17992265605312585, 0.1654112322320076, 0.1499904799154248, 0.1872214310472613, 0.18363471790857588, 0.19470965246123328, 0.18198327896350386, 0.09008895925600302, 0.08236066132268283, 0.07614002522752328, 0.0844187354402477, 0.08303528274477534, 0.07920831454630661, 0.08534602731750707, 0.07777324640046723, 0.08572644962571829]}, "mutation_prompt": null}
{"id": "f1e554c5-c488-40c0-af9c-8f0d333b6787", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate local search-based neighborhood exploration to refine solutions once the population converges for enhanced local optima discovery.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8662493656457821, 0.8619691909237055, 0.8709302812730607, 0.8748717297870441, 0.8859510775980282, 0.8720649590966179, 0.8733838313802355, 0.8757950871932697, 0.8675581342889982, 0.8191929316699507, 0.8015490306515359, 0.8022440015769752, 0.805676781912002, 0.8196194271775713, 0.8214529713153749, 0.8058111026926837, 0.8224808468705438, 0.797946944976379, 0.5639363757478342, 0.17129113588047162, 0.5576600162880956, 0.17013431451196648, 0.17031093792146768, 0.15934386131196365, 0.6925128150787838, 0.15082444481083168, 0.12658601339196363, 0.17252314946498448, 0.14961248012256367, 0.14585823724830138, 0.17894798210229568, 0.17279913262398972, 0.6287757494604024, 0.17243757042273977, 0.13704461463389328, 0.1629146484393883, 0.9872297186947867, 0.9773868669653037, 0.9817455250112088, 0.9813289604840796, 0.975270343325193, 0.9846505456747011, 0.9818562956460403, 0.9842338620574949, 0.9795595452817505, 0.6360161932685617, 0.6980573100317047, 0.6716650870497105, 0.7163171189484105, 0.6930524099512487, 0.6595415454788923, 0.6321352160682847, 0.6125102708441964, 0.6450876085594408, 0.857015423386958, 0.8532643816367312, 0.820681851697664, 0.8551670067746713, 0.2716538882951911, 0.8473487209875636, 0.8570059467526765, 0.812085878289617, 0.8566751587756091, 0.189880252497443, 0.12344250000667778, 0.18343855274680787, 0.20804841896839965, 0.2932983284803178, 0.20834223275058228, 0.20318742755191344, 0.30432235595766055, 0.20098757797690725, 0.7298071025386694, 0.05957569202832469, 0.12328077590047737, 0.21262889059628087, 0.19803870786690259, 0.3113719181777118, 0.2352138338463744, 0.1884744133456715, 0.25209819025073066, 0.5844116962989399, 0.5809967827255309, 0.32524926185613945, 0.46857036445479494, 0.5569175148887234, 0.019023001017252295, 0.4026725746336359, 0.5599849635912513, 0.5433194904380585, 0.5936964315945281, 0.606686548339077, 0.6473323529693549, 0.6469202124156941, 0.5950922041894955, 0.6626073304434053, 0.6876283751709185, 0.6574613751234404, 0.6757786597741684, 0.06910830185415784, 0.06669841331557236, 0.25177455655653613, 0.1871287785588951, 0.21669349184641995, 0.17005737836390777, 0.19734324002308812, 0.16884588915880117, 0.1324949331953621, 0.4196734171254848, 0.4973163258169825, 0.4783063472226933, 0.42166383977816635, 0.4449098238108038, 0.4767757950805025, 0.4431384670826536, 0.3161637444754676, 0.44558202652782053, 0.7324376714326744, 0.813983216570429, 0.8053977750625168, 0.8070664890827522, 0.801413183126958, 0.7898097605630805, 0.7950486832907574, 0.8134382404044601, 0.7898193958137745, 0.1526650403294516, 0.12487052447143521, 0.10185799708666876, 0.10666310207360707, 0.13543730768619844, 0.12076315167576779, 0.10718894783528143, 0.14696586585170768, 0.10776760185205514, 0.1558027020844044, 0.15630476210246613, 0.20176461376372878, 0.19410186829837983, 0.18617595354386518, 0.15819848003333392, 0.23995539387513565, 0.19744015975023543, 0.2082013194660911, 0.4229613979882534, 0.5645394972834085, 0.6442224175481019, 0.6861757917761218, 0.6458377339910735, 0.6768949200878625, 0.7021752780866464, 0.6813524229170073, 0.6581036872843865, 0.4658773010500735, 0.4437687145628123, 0.4623114776889502, 0.47283253296630856, 0.37878771039226755, 0.44278187381420875, 0.5619494892539747, 0.5589174698410764, 0.5890768710158811, 0.18873994882226486, 0.18859727728297893, 0.21497982066530053, 0.22368375411254116, 0.1875375580033417, 0.19445524663689384, 0.20546162788490663, 0.20147793565591265, 0.20678045649687715, 0.23379811456108257, 0.24138699793875407, 0.713642890094057, 0.2353983089218531, 0.22938292540391514, 0.759717414800901, 0.7236391742698172, 0.6537169398869608, 0.23337016140520617, 0.16757949714913956, 0.20460381375755743, 0.13296777895979628, 0.1682356210270094, 0.18507175355753913, 0.8631748016028501, 0.15672199682485566, 0.19378939208047452, 0.20908582740139126, 0.19985039344691669, 0.20818163625021846, 0.8449243424873454, 0.20664763707589495, 0.16341722909031542, 0.1994181842628101, 0.8780294366284318, 0.8060022205693541, 0.20517393310460896, 0.20591350385562524, 0.18591796530597882, 0.17992265605312585, 0.1654112322320076, 0.1499904799154248, 0.1872214310472613, 0.18363471790857588, 0.19470965246123328, 0.18198327896350386, 0.09008895925600302, 0.08236066132268283, 0.07614002522752328, 0.0844187354402477, 0.08303528274477534, 0.07920831454630661, 0.08534602731750707, 0.07777324640046723, 0.08572644962571829]}, "mutation_prompt": null}
{"id": "6697b022-b6e9-4824-b409-b967afddf6b9", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate local search-based neighborhood exploration to refine solutions once the population converges for enhanced local optima discovery.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8662493656457821, 0.8619691909237055, 0.8709302812730607, 0.8748717297870441, 0.8859510775980282, 0.8720649590966179, 0.8733838313802355, 0.8757950871932697, 0.8675581342889982, 0.8191929316699507, 0.8015490306515359, 0.8022440015769752, 0.805676781912002, 0.8196194271775713, 0.8214529713153749, 0.8058111026926837, 0.8224808468705438, 0.797946944976379, 0.5639363757478342, 0.17129113588047162, 0.5576600162880956, 0.17013431451196648, 0.17031093792146768, 0.15934386131196365, 0.6925128150787838, 0.15082444481083168, 0.12658601339196363, 0.17252314946498448, 0.14961248012256367, 0.14585823724830138, 0.17894798210229568, 0.17279913262398972, 0.6287757494604024, 0.17243757042273977, 0.13704461463389328, 0.1629146484393883, 0.9872297186947867, 0.9773868669653037, 0.9817455250112088, 0.9813289604840796, 0.975270343325193, 0.9846505456747011, 0.9818562956460403, 0.9842338620574949, 0.9795595452817505, 0.6360161932685617, 0.6980573100317047, 0.6716650870497105, 0.7163171189484105, 0.6930524099512487, 0.6595415454788923, 0.6321352160682847, 0.6125102708441964, 0.6450876085594408, 0.857015423386958, 0.8532643816367312, 0.820681851697664, 0.8551670067746713, 0.2716538882951911, 0.8473487209875636, 0.8570059467526765, 0.812085878289617, 0.8566751587756091, 0.189880252497443, 0.12344250000667778, 0.18343855274680787, 0.20804841896839965, 0.2932983284803178, 0.20834223275058228, 0.20318742755191344, 0.30432235595766055, 0.20098757797690725, 0.7298071025386694, 0.05957569202832469, 0.12328077590047737, 0.21262889059628087, 0.19803870786690259, 0.3113719181777118, 0.2352138338463744, 0.1884744133456715, 0.25209819025073066, 0.5844116962989399, 0.5809967827255309, 0.32524926185613945, 0.46857036445479494, 0.5569175148887234, 0.019023001017252295, 0.4026725746336359, 0.5599849635912513, 0.5433194904380585, 0.5936964315945281, 0.606686548339077, 0.6473323529693549, 0.6469202124156941, 0.5950922041894955, 0.6626073304434053, 0.6876283751709185, 0.6574613751234404, 0.6757786597741684, 0.06910830185415784, 0.06669841331557236, 0.25177455655653613, 0.1871287785588951, 0.21669349184641995, 0.17005737836390777, 0.19734324002308812, 0.16884588915880117, 0.1324949331953621, 0.4196734171254848, 0.4973163258169825, 0.4783063472226933, 0.42166383977816635, 0.4449098238108038, 0.4767757950805025, 0.4431384670826536, 0.3161637444754676, 0.44558202652782053, 0.7324376714326744, 0.813983216570429, 0.8053977750625168, 0.8070664890827522, 0.801413183126958, 0.7898097605630805, 0.7950486832907574, 0.8134382404044601, 0.7898193958137745, 0.1526650403294516, 0.12487052447143521, 0.10185799708666876, 0.10666310207360707, 0.13543730768619844, 0.12076315167576779, 0.10718894783528143, 0.14696586585170768, 0.10776760185205514, 0.1558027020844044, 0.15630476210246613, 0.20176461376372878, 0.19410186829837983, 0.18617595354386518, 0.15819848003333392, 0.23995539387513565, 0.19744015975023543, 0.2082013194660911, 0.4229613979882534, 0.5645394972834085, 0.6442224175481019, 0.6861757917761218, 0.6458377339910735, 0.6768949200878625, 0.7021752780866464, 0.6813524229170073, 0.6581036872843865, 0.4658773010500735, 0.4437687145628123, 0.4623114776889502, 0.47283253296630856, 0.37878771039226755, 0.44278187381420875, 0.5619494892539747, 0.5589174698410764, 0.5890768710158811, 0.18873994882226486, 0.18859727728297893, 0.21497982066530053, 0.22368375411254116, 0.1875375580033417, 0.19445524663689384, 0.20546162788490663, 0.20147793565591265, 0.20678045649687715, 0.23379811456108257, 0.24138699793875407, 0.713642890094057, 0.2353983089218531, 0.22938292540391514, 0.759717414800901, 0.7236391742698172, 0.6537169398869608, 0.23337016140520617, 0.16757949714913956, 0.20460381375755743, 0.13296777895979628, 0.1682356210270094, 0.18507175355753913, 0.8631748016028501, 0.15672199682485566, 0.19378939208047452, 0.20908582740139126, 0.19985039344691669, 0.20818163625021846, 0.8449243424873454, 0.20664763707589495, 0.16341722909031542, 0.1994181842628101, 0.8780294366284318, 0.8060022205693541, 0.20517393310460896, 0.20591350385562524, 0.18591796530597882, 0.17992265605312585, 0.1654112322320076, 0.1499904799154248, 0.1872214310472613, 0.18363471790857588, 0.19470965246123328, 0.18198327896350386, 0.09008895925600302, 0.08236066132268283, 0.07614002522752328, 0.0844187354402477, 0.08303528274477534, 0.07920831454630661, 0.08534602731750707, 0.07777324640046723, 0.08572644962571829]}, "mutation_prompt": null}
{"id": "6dc23c1a-7326-4da7-9e91-d045f5f0f661", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate local search-based neighborhood exploration to refine solutions once the population converges for enhanced local optima discovery.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8662493656457821, 0.8619691909237055, 0.8709302812730607, 0.8748717297870441, 0.8859510775980282, 0.8720649590966179, 0.8733838313802355, 0.8757950871932697, 0.8675581342889982, 0.8191929316699507, 0.8015490306515359, 0.8022440015769752, 0.805676781912002, 0.8196194271775713, 0.8214529713153749, 0.8058111026926837, 0.8224808468705438, 0.797946944976379, 0.5639363757478342, 0.17129113588047162, 0.5576600162880956, 0.17013431451196648, 0.17031093792146768, 0.15934386131196365, 0.6925128150787838, 0.15082444481083168, 0.12658601339196363, 0.17252314946498448, 0.14961248012256367, 0.14585823724830138, 0.17894798210229568, 0.17279913262398972, 0.6287757494604024, 0.17243757042273977, 0.13704461463389328, 0.1629146484393883, 0.9872297186947867, 0.9773868669653037, 0.9817455250112088, 0.9813289604840796, 0.975270343325193, 0.9846505456747011, 0.9818562956460403, 0.9842338620574949, 0.9795595452817505, 0.6360161932685617, 0.6980573100317047, 0.6716650870497105, 0.7163171189484105, 0.6930524099512487, 0.6595415454788923, 0.6321352160682847, 0.6125102708441964, 0.6450876085594408, 0.857015423386958, 0.8532643816367312, 0.820681851697664, 0.8551670067746713, 0.2716538882951911, 0.8473487209875636, 0.8570059467526765, 0.812085878289617, 0.8566751587756091, 0.189880252497443, 0.12344250000667778, 0.18343855274680787, 0.20804841896839965, 0.2932983284803178, 0.20834223275058228, 0.20318742755191344, 0.30432235595766055, 0.20098757797690725, 0.7298071025386694, 0.05957569202832469, 0.12328077590047737, 0.21262889059628087, 0.19803870786690259, 0.3113719181777118, 0.2352138338463744, 0.1884744133456715, 0.25209819025073066, 0.5844116962989399, 0.5809967827255309, 0.32524926185613945, 0.46857036445479494, 0.5569175148887234, 0.019023001017252295, 0.4026725746336359, 0.5599849635912513, 0.5433194904380585, 0.5936964315945281, 0.606686548339077, 0.6473323529693549, 0.6469202124156941, 0.5950922041894955, 0.6626073304434053, 0.6876283751709185, 0.6574613751234404, 0.6757786597741684, 0.06910830185415784, 0.06669841331557236, 0.25177455655653613, 0.1871287785588951, 0.21669349184641995, 0.17005737836390777, 0.19734324002308812, 0.16884588915880117, 0.1324949331953621, 0.4196734171254848, 0.4973163258169825, 0.4783063472226933, 0.42166383977816635, 0.4449098238108038, 0.4767757950805025, 0.4431384670826536, 0.3161637444754676, 0.44558202652782053, 0.7324376714326744, 0.813983216570429, 0.8053977750625168, 0.8070664890827522, 0.801413183126958, 0.7898097605630805, 0.7950486832907574, 0.8134382404044601, 0.7898193958137745, 0.1526650403294516, 0.12487052447143521, 0.10185799708666876, 0.10666310207360707, 0.13543730768619844, 0.12076315167576779, 0.10718894783528143, 0.14696586585170768, 0.10776760185205514, 0.1558027020844044, 0.15630476210246613, 0.20176461376372878, 0.19410186829837983, 0.18617595354386518, 0.15819848003333392, 0.23995539387513565, 0.19744015975023543, 0.2082013194660911, 0.4229613979882534, 0.5645394972834085, 0.6442224175481019, 0.6861757917761218, 0.6458377339910735, 0.6768949200878625, 0.7021752780866464, 0.6813524229170073, 0.6581036872843865, 0.4658773010500735, 0.4437687145628123, 0.4623114776889502, 0.47283253296630856, 0.37878771039226755, 0.44278187381420875, 0.5619494892539747, 0.5589174698410764, 0.5890768710158811, 0.18873994882226486, 0.18859727728297893, 0.21497982066530053, 0.22368375411254116, 0.1875375580033417, 0.19445524663689384, 0.20546162788490663, 0.20147793565591265, 0.20678045649687715, 0.23379811456108257, 0.24138699793875407, 0.713642890094057, 0.2353983089218531, 0.22938292540391514, 0.759717414800901, 0.7236391742698172, 0.6537169398869608, 0.23337016140520617, 0.16757949714913956, 0.20460381375755743, 0.13296777895979628, 0.1682356210270094, 0.18507175355753913, 0.8631748016028501, 0.15672199682485566, 0.19378939208047452, 0.20908582740139126, 0.19985039344691669, 0.20818163625021846, 0.8449243424873454, 0.20664763707589495, 0.16341722909031542, 0.1994181842628101, 0.8780294366284318, 0.8060022205693541, 0.20517393310460896, 0.20591350385562524, 0.18591796530597882, 0.17992265605312585, 0.1654112322320076, 0.1499904799154248, 0.1872214310472613, 0.18363471790857588, 0.19470965246123328, 0.18198327896350386, 0.09008895925600302, 0.08236066132268283, 0.07614002522752328, 0.0844187354402477, 0.08303528274477534, 0.07920831454630661, 0.08534602731750707, 0.07777324640046723, 0.08572644962571829]}, "mutation_prompt": null}
{"id": "f1c6dda6-61b5-4346-ab1a-c26ece41820f", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate local search-based neighborhood exploration to refine solutions once the population converges for enhanced local optima discovery.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8662493656457821, 0.8619691909237055, 0.8709302812730607, 0.8748717297870441, 0.8859510775980282, 0.8720649590966179, 0.8733838313802355, 0.8757950871932697, 0.8675581342889982, 0.8191929316699507, 0.8015490306515359, 0.8022440015769752, 0.805676781912002, 0.8196194271775713, 0.8214529713153749, 0.8058111026926837, 0.8224808468705438, 0.797946944976379, 0.5639363757478342, 0.17129113588047162, 0.5576600162880956, 0.17013431451196648, 0.17031093792146768, 0.15934386131196365, 0.6925128150787838, 0.15082444481083168, 0.12658601339196363, 0.17252314946498448, 0.14961248012256367, 0.14585823724830138, 0.17894798210229568, 0.17279913262398972, 0.6287757494604024, 0.17243757042273977, 0.13704461463389328, 0.1629146484393883, 0.9872297186947867, 0.9773868669653037, 0.9817455250112088, 0.9813289604840796, 0.975270343325193, 0.9846505456747011, 0.9818562956460403, 0.9842338620574949, 0.9795595452817505, 0.6360161932685617, 0.6980573100317047, 0.6716650870497105, 0.7163171189484105, 0.6930524099512487, 0.6595415454788923, 0.6321352160682847, 0.6125102708441964, 0.6450876085594408, 0.857015423386958, 0.8532643816367312, 0.820681851697664, 0.8551670067746713, 0.2716538882951911, 0.8473487209875636, 0.8570059467526765, 0.812085878289617, 0.8566751587756091, 0.189880252497443, 0.12344250000667778, 0.18343855274680787, 0.20804841896839965, 0.2932983284803178, 0.20834223275058228, 0.20318742755191344, 0.30432235595766055, 0.20098757797690725, 0.7298071025386694, 0.05957569202832469, 0.12328077590047737, 0.21262889059628087, 0.19803870786690259, 0.3113719181777118, 0.2352138338463744, 0.1884744133456715, 0.25209819025073066, 0.5844116962989399, 0.5809967827255309, 0.32524926185613945, 0.46857036445479494, 0.5569175148887234, 0.019023001017252295, 0.4026725746336359, 0.5599849635912513, 0.5433194904380585, 0.5936964315945281, 0.606686548339077, 0.6473323529693549, 0.6469202124156941, 0.5950922041894955, 0.6626073304434053, 0.6876283751709185, 0.6574613751234404, 0.6757786597741684, 0.06910830185415784, 0.06669841331557236, 0.25177455655653613, 0.1871287785588951, 0.21669349184641995, 0.17005737836390777, 0.19734324002308812, 0.16884588915880117, 0.1324949331953621, 0.4196734171254848, 0.4973163258169825, 0.4783063472226933, 0.42166383977816635, 0.4449098238108038, 0.4767757950805025, 0.4431384670826536, 0.3161637444754676, 0.44558202652782053, 0.7324376714326744, 0.813983216570429, 0.8053977750625168, 0.8070664890827522, 0.801413183126958, 0.7898097605630805, 0.7950486832907574, 0.8134382404044601, 0.7898193958137745, 0.1526650403294516, 0.12487052447143521, 0.10185799708666876, 0.10666310207360707, 0.13543730768619844, 0.12076315167576779, 0.10718894783528143, 0.14696586585170768, 0.10776760185205514, 0.1558027020844044, 0.15630476210246613, 0.20176461376372878, 0.19410186829837983, 0.18617595354386518, 0.15819848003333392, 0.23995539387513565, 0.19744015975023543, 0.2082013194660911, 0.4229613979882534, 0.5645394972834085, 0.6442224175481019, 0.6861757917761218, 0.6458377339910735, 0.6768949200878625, 0.7021752780866464, 0.6813524229170073, 0.6581036872843865, 0.4658773010500735, 0.4437687145628123, 0.4623114776889502, 0.47283253296630856, 0.37878771039226755, 0.44278187381420875, 0.5619494892539747, 0.5589174698410764, 0.5890768710158811, 0.18873994882226486, 0.18859727728297893, 0.21497982066530053, 0.22368375411254116, 0.1875375580033417, 0.19445524663689384, 0.20546162788490663, 0.20147793565591265, 0.20678045649687715, 0.23379811456108257, 0.24138699793875407, 0.713642890094057, 0.2353983089218531, 0.22938292540391514, 0.759717414800901, 0.7236391742698172, 0.6537169398869608, 0.23337016140520617, 0.16757949714913956, 0.20460381375755743, 0.13296777895979628, 0.1682356210270094, 0.18507175355753913, 0.8631748016028501, 0.15672199682485566, 0.19378939208047452, 0.20908582740139126, 0.19985039344691669, 0.20818163625021846, 0.8449243424873454, 0.20664763707589495, 0.16341722909031542, 0.1994181842628101, 0.8780294366284318, 0.8060022205693541, 0.20517393310460896, 0.20591350385562524, 0.18591796530597882, 0.17992265605312585, 0.1654112322320076, 0.1499904799154248, 0.1872214310472613, 0.18363471790857588, 0.19470965246123328, 0.18198327896350386, 0.09008895925600302, 0.08236066132268283, 0.07614002522752328, 0.0844187354402477, 0.08303528274477534, 0.07920831454630661, 0.08534602731750707, 0.07777324640046723, 0.08572644962571829]}, "mutation_prompt": null}
{"id": "f205a7bb-45d1-43f6-802b-eb4c663d305f", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.4 * np.exp(-5 * evaluations / self.budget)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate local search-based neighborhood exploration to refine solutions once the population converges for enhanced local optima discovery.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8662493656457821, 0.8619691909237055, 0.8709302812730607, 0.8748717297870441, 0.8859510775980282, 0.8720649590966179, 0.8733838313802355, 0.8757950871932697, 0.8675581342889982, 0.8191929316699507, 0.8015490306515359, 0.8022440015769752, 0.805676781912002, 0.8196194271775713, 0.8214529713153749, 0.8058111026926837, 0.8224808468705438, 0.797946944976379, 0.5639363757478342, 0.17129113588047162, 0.5576600162880956, 0.17013431451196648, 0.17031093792146768, 0.15934386131196365, 0.6925128150787838, 0.15082444481083168, 0.12658601339196363, 0.17252314946498448, 0.14961248012256367, 0.14585823724830138, 0.17894798210229568, 0.17279913262398972, 0.6287757494604024, 0.17243757042273977, 0.13704461463389328, 0.1629146484393883, 0.9872297186947867, 0.9773868669653037, 0.9817455250112088, 0.9813289604840796, 0.975270343325193, 0.9846505456747011, 0.9818562956460403, 0.9842338620574949, 0.9795595452817505, 0.6360161932685617, 0.6980573100317047, 0.6716650870497105, 0.7163171189484105, 0.6930524099512487, 0.6595415454788923, 0.6321352160682847, 0.6125102708441964, 0.6450876085594408, 0.857015423386958, 0.8532643816367312, 0.820681851697664, 0.8551670067746713, 0.2716538882951911, 0.8473487209875636, 0.8570059467526765, 0.812085878289617, 0.8566751587756091, 0.189880252497443, 0.12344250000667778, 0.18343855274680787, 0.20804841896839965, 0.2932983284803178, 0.20834223275058228, 0.20318742755191344, 0.30432235595766055, 0.20098757797690725, 0.7298071025386694, 0.05957569202832469, 0.12328077590047737, 0.21262889059628087, 0.19803870786690259, 0.3113719181777118, 0.2352138338463744, 0.1884744133456715, 0.25209819025073066, 0.5844116962989399, 0.5809967827255309, 0.32524926185613945, 0.46857036445479494, 0.5569175148887234, 0.019023001017252295, 0.4026725746336359, 0.5599849635912513, 0.5433194904380585, 0.5936964315945281, 0.606686548339077, 0.6473323529693549, 0.6469202124156941, 0.5950922041894955, 0.6626073304434053, 0.6876283751709185, 0.6574613751234404, 0.6757786597741684, 0.06910830185415784, 0.06669841331557236, 0.25177455655653613, 0.1871287785588951, 0.21669349184641995, 0.17005737836390777, 0.19734324002308812, 0.16884588915880117, 0.1324949331953621, 0.4196734171254848, 0.4973163258169825, 0.4783063472226933, 0.42166383977816635, 0.4449098238108038, 0.4767757950805025, 0.4431384670826536, 0.3161637444754676, 0.44558202652782053, 0.7324376714326744, 0.813983216570429, 0.8053977750625168, 0.8070664890827522, 0.801413183126958, 0.7898097605630805, 0.7950486832907574, 0.8134382404044601, 0.7898193958137745, 0.1526650403294516, 0.12487052447143521, 0.10185799708666876, 0.10666310207360707, 0.13543730768619844, 0.12076315167576779, 0.10718894783528143, 0.14696586585170768, 0.10776760185205514, 0.1558027020844044, 0.15630476210246613, 0.20176461376372878, 0.19410186829837983, 0.18617595354386518, 0.15819848003333392, 0.23995539387513565, 0.19744015975023543, 0.2082013194660911, 0.4229613979882534, 0.5645394972834085, 0.6442224175481019, 0.6861757917761218, 0.6458377339910735, 0.6768949200878625, 0.7021752780866464, 0.6813524229170073, 0.6581036872843865, 0.4658773010500735, 0.4437687145628123, 0.4623114776889502, 0.47283253296630856, 0.37878771039226755, 0.44278187381420875, 0.5619494892539747, 0.5589174698410764, 0.5890768710158811, 0.18873994882226486, 0.18859727728297893, 0.21497982066530053, 0.22368375411254116, 0.1875375580033417, 0.19445524663689384, 0.20546162788490663, 0.20147793565591265, 0.20678045649687715, 0.23379811456108257, 0.24138699793875407, 0.713642890094057, 0.2353983089218531, 0.22938292540391514, 0.759717414800901, 0.7236391742698172, 0.6537169398869608, 0.23337016140520617, 0.16757949714913956, 0.20460381375755743, 0.13296777895979628, 0.1682356210270094, 0.18507175355753913, 0.8631748016028501, 0.15672199682485566, 0.19378939208047452, 0.20908582740139126, 0.19985039344691669, 0.20818163625021846, 0.8449243424873454, 0.20664763707589495, 0.16341722909031542, 0.1994181842628101, 0.8780294366284318, 0.8060022205693541, 0.20517393310460896, 0.20591350385562524, 0.18591796530597882, 0.17992265605312585, 0.1654112322320076, 0.1499904799154248, 0.1872214310472613, 0.18363471790857588, 0.19470965246123328, 0.18198327896350386, 0.09008895925600302, 0.08236066132268283, 0.07614002522752328, 0.0844187354402477, 0.08303528274477534, 0.07920831454630661, 0.08534602731750707, 0.07777324640046723, 0.08572644962571829]}, "mutation_prompt": null}
{"id": "f7ed69a9-0c74-4008-83ac-7ebef50af85b", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = np.random.uniform(0.7, 1.0)\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation_size = 0.05 + 0.2 * (np.std(solution) / self.dim)\n        perturbation = np.random.normal(0, perturbation_size, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        if func(neighbor) < func(solution):\n            return neighbor\n        else:\n            return solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                diversity_factor = np.std(fitness) / np.abs(np.mean(fitness))\n                self.mutation_factor = 0.5 + 0.3 * diversity_factor\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)\n\n                if evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive mutation factor based on population diversity and refine local search to dynamically adjust perturbation size.", "configspace": "", "generation": 32, "fitness": 0.3726838634945214, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.30.", "error": "", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.9218221468341685, 0.9274260286957228, 0.9277466561344795, 0.9279838081436533, 0.9258984469609184, 0.9317149680479634, 0.9155844574279798, 0.921542245131922, 0.9180747323255393, 0.81291400090456, 0.810899438078877, 0.7720926696950103, 0.7735422259346659, 0.814690353416968, 0.7256767354326565, 0.77045548479854, 0.7959430927525658, 0.8018339206883305, 0.1780492690934643, 0.15716344578450347, 0.3176037808100596, 0.17917279794745422, 0.14227018721866513, 0.1515311479593322, 0.1750133769574973, 0.17924136831395276, 0.7121068085116644, 0.16902082691475495, 0.13874945501721925, 0.15353721674197718, 0.18376223095249156, 0.15402762302481365, 0.15228272705943802, 0.14094747861615453, 0.13737568687887447, 0.16159924747963705, 0.9770629528001706, 0.9823774682587249, 0.9731927467832298, 0.9513324623415645, 0.9183992499869637, 0.9814024786611072, 0.9384000539390038, 0.9403201164054896, 0.9459741621932675, 0.5126091153198231, 0.09499151058084876, 0.2509077093619244, 0.14612176335468918, 0.1543784543305926, 0.4269213781476263, 0.25373378454844087, 0.14160274428469677, 0.37381405154346736, 0.22867920698142363, 0.35272781084165294, 0.2396016741681688, 0.8888389404813042, 0.38233863657296585, 0.2800523726270029, 0.8514727753268648, 0.8763061693392884, 0.8824592231344137, 0.1556103351989523, 0.16060182795964706, 0.17879333328463254, 0.13839154742110638, 0.7572794995580854, 0.12739387585881146, 0.14666849847890184, 0.17555284445459907, 0.16311401218942956, 0.15778184611404888, 0.010082765320532427, 0.14143860898411476, 0.29816153764589015, 0.2425902239075275, 0.17911758172537406, 0.1323946842125211, 0.1505228814452435, 0.17766903526762468, 0.06458364628237234, 0.0652468912040991, 0.06801081499328043, 0.6068908319781421, 0.3364440759418048, 0.30030561485918694, 0.02040732654650912, 0.043237897905543665, 0.007802967244997849, 0.4366060112504194, 0.313183902908574, 0.6677661524509698, 0.09850607610074458, 0.10445824427050843, 0.12932656029121314, 0.30880268334176264, 0.6659025921190547, 0.5006352789658464, 9.999999999998899e-05, 0.001273892473638294, 0.018580661428544643, 0.026891113700412972, 0.08072044653936394, 0.03505361673057794, 0.22944195994847316, 0.11563356633080546, 0.22243869126990112, 0.4453655098076348, 0.3137285592718304, 0.32128259940350623, 0.39253925517123966, 0.07622907105778909, 0.0652232815792313, 0.5148495533686496, 0.3370186810178736, 0.08758053554877387, 0.8067410500087037, 0.8590776982115953, 0.4896427911938144, 0.6320472046418071, 0.8761721952266591, 0.7352629741287318, 0.7220055656631462, 0.5378555447556094, 0.5394734372698609, 0.14198493965871783, 0.15501647276401076, 0.08844571711839422, 0.10522337401463011, 0.11954093976080715, 0.13121105285119483, 0.11928252086217273, 0.09907224750063737, 0.0936251140070472, 0.23586022492172964, 0.15480238121567602, 0.20439447492980467, 0.2114185503599475, 0.1618087903358042, 0.18765789287709334, 0.16312862144240592, 0.23555692159327457, 0.20792857123828867, 0.7038903951990727, 0.7004226998454385, 0.36666581271545506, 0.5165128422440319, 0.7335186343056731, 0.7467321206467173, 0.7717153435930171, 0.6561803260095957, 0.8074083372990057, 0.48564563498021185, 0.5265873141577471, 0.3009095164640758, 0.5031386925063357, 0.5712254560156422, 0.31829978005397785, 0.652787549493272, 0.5251057400884269, 0.6783736432542874, 0.20489302623668104, 0.2340231315219885, 0.21467296269655511, 0.2070878061615924, 0.21071665820767838, 0.19645752878370926, 0.21479869437515242, 0.19047765401137828, 0.21098018674092633, 0.21292133624097487, 0.20951409071847527, 0.15125276940418986, 0.22176212682823693, 0.7933770142661717, 0.29450251826905227, 0.24566077959591215, 0.2235816198736592, 0.20562975681699536, 0.8268845683713139, 0.9187745927050235, 0.17096545709236033, 0.6397473434037259, 0.19459670741460966, 0.16890154868770657, 0.5393661030045206, 0.16811630642340458, 0.16634878113125673, 0.8858580280862322, 0.1692822484304939, 0.7281301501100559, 0.7302913272942586, 0.16777506117639385, 0.4565643439490269, 0.2109928470135174, 0.20607374980258242, 0.20894046439512448, 0.1843180591877831, 0.17891330519488802, 0.175626183915215, 0.19011617024262972, 0.17376999304170826, 0.20644481684113436, 0.1878487369994416, 0.18703000210419252, 0.1889802430253711, 0.08306089205915324, 0.09084463480253924, 0.08807829353867946, 0.0908810973015397, 0.09259506786360183, 0.09534338314666435, 0.08978004579577192, 0.08416154081717431, 0.09209705094312814]}, "mutation_prompt": null}
{"id": "03f70b21-52b4-4d53-8b3e-a5ce69d7c232", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.6 + 0.4 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive crossover and mutation strategies based on convergence rate to enhance exploration-exploitation balance.", "configspace": "", "generation": 33, "fitness": 0.45735754860558164, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "112a76b2-2933-481e-8600-b19a315e1499", "metadata": {"aucs": [0.8916759895170913, 0.8801524221372241, 0.8857839522398294, 0.8938611210745014, 0.7944840870885356, 0.7232008269416541, 0.7512110060757041, 0.8680298826460985, 0.865046958774504, 0.7275240267710144, 0.7900522354748907, 0.7686633092577524, 0.6668000013598281, 0.8111739475165094, 0.6798182654701472, 0.6049901527330532, 0.7620210680739623, 0.7321871261757528, 0.11292573265826289, 0.1304778783682795, 0.12998615942791747, 0.11366991944467186, 0.1255404319707364, 0.12115020516409802, 0.1501127927746846, 0.10932301593497928, 0.1438251573096917, 0.13002271186729208, 0.12566042886723316, 0.06321782572202372, 0.130415738119932, 0.11610009500999097, 0.11654567119375603, 0.15811408469825006, 0.12490989093826665, 0.22399552763277086, 0.8996244642771266, 0.787450007351083, 0.7875166971765755, 0.8060252481332566, 0.7668194095602927, 0.974945973198535, 0.7210581784325355, 0.09751456661215907, 0.9326524463336054, 0.42494989038103537, 0.06095011053486399, 0.5600379458498037, 0.5010464532055784, 0.6170435251372821, 0.44371482483479796, 0.5162134455608984, 0.67059563804419, 0.6639828166194419, 0.9184006655651964, 0.9126458183034183, 0.22193081047891572, 0.8371260728970871, 0.9047636135435686, 0.9208204481779555, 0.41502862919334316, 0.9272876861435044, 0.8920704308560721, 0.5976884515483469, 0.6959103028786606, 0.7151555028823309, 0.44149897156892703, 0.5911802128397252, 0.5943053263985265, 0.6162025979223636, 0.5449079984653893, 0.12792715278505862, 0.5376087135195871, 0.7344906259588277, 0.5415407046807972, 0.7289112838550106, 0.6518699362250886, 0.5820693559939836, 0.46703635762464846, 0.47485830810385155, 0.5050705466010195, 0.7699004524907989, 0.45262630002823667, 0.5133660816304662, 0.7192964926609258, 0.7935715176407073, 0.791119845159502, 0.8135521330999447, 0.6529816318902257, 0.7910467096286039, 0.443122716253195, 0.748060366833637, 0.5799028527131067, 0.47322146531016185, 0.723021147358337, 0.8471287976739046, 0.8271480698957445, 0.623473466087215, 0.8300151044440529, 0.21301701354795233, 0.5628119813849262, 0.18989753686143496, 0.6626834982106433, 0.6979214197916084, 0.6470370663300483, 0.17033194875557744, 0.3237420186076978, 0.21880821075586498, 0.6373695150828798, 0.6262841189061856, 0.6113882137108116, 0.4005422348095554, 0.6094345548663525, 0.6564460898622202, 0.6231966529741926, 0.6473313466224041, 0.5874532870945304, 0.8695069618004858, 0.87879075975781, 0.8649070888674311, 0.8484715527592649, 0.8607353337573861, 0.8634817399921659, 0.872462094438498, 0.8675951069997683, 0.8765132083365624, 0.1341391406129927, 0.11262015774534684, 0.11626925893303486, 0.12710625132010178, 0.12607564334634758, 0.1252998383154018, 0.12111793791575531, 0.43058319421311586, 0.10659006301638385, 0.14900086282106673, 0.15457837674702934, 0.21760611464519808, 0.2768204172634786, 0.31179722424160905, 0.22990524667736523, 0.1931346420730622, 0.1284681232404784, 0.17546827805218257, 0.5237309283573685, 0.5622618299831219, 0.4806403443938574, 0.5561766113814794, 0.5808836160715771, 0.4952179369153218, 0.523509777381899, 0.5665962186689633, 0.5576622266768905, 0.20284754153465134, 0.41584944672878077, 0.49302942448014586, 0.41799560608139874, 0.27835253294119433, 0.48209068550710454, 0.4031403978455954, 0.49582982755240723, 0.44928332897033396, 0.22094146000775017, 0.22601508821870808, 0.26488018795722323, 0.18144749228007162, 0.20246226465045292, 0.20945984726806988, 0.2132246804373702, 0.25257175338737237, 0.19116039945304397, 0.24262018533782026, 0.23867104466677158, 0.21227367791697616, 0.22005054293730142, 0.22238716161041672, 0.23812647682587018, 0.7361690193413071, 0.5795669620808745, 0.6774150218862139, 0.8466219006848621, 0.14792352355858562, 0.14638323834669864, 0.9091251137722116, 0.196350204825404, 0.19722580147692015, 0.16646983887693712, 0.19938069311468654, 0.2083708937841069, 0.08245496618544768, 0.21116299092621116, 0.20999677592665955, 0.16551858626761862, 0.2078205801054125, 0.8487180479455603, 0.21390402587578494, 0.12560648490261772, 0.15558481180001216, 0.18524766846632823, 0.22083561923380568, 0.18626474983481467, 0.18488598816821655, 0.1817707871196087, 0.1792010609286313, 0.20180728689027605, 0.20023730198642842, 0.18548941049632484, 0.0845948673982253, 0.08545361581011024, 0.08130074054021841, 0.08112760231703708, 0.08126671290294674, 0.08895293220268086, 0.07320283373726111, 0.08023088896556385, 0.08378611614759679]}, "mutation_prompt": null}
{"id": "5214af13-0818-44c5-a445-c670ebc1fb14", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.6 + 0.4 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        for _ in range(3):  # More aggressive search\n            perturbation = np.random.normal(0, 0.1, self.dim)\n            neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            if func(neighbor) < func(solution):\n                solution = neighbor\n        return solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            diversity = np.std(population, axis=0).mean()  # Adaptive mutation based on diversity\n            self.mutation_factor = 0.5 + 0.5 * diversity\n\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Enhance exploitation by inserting a more aggressive local search strategy and adaptively adjusting the mutation factor based on the population's diversity.", "configspace": "", "generation": 34, "fitness": 0.23844026099005314, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.25.", "error": "", "parent_id": "03f70b21-52b4-4d53-8b3e-a5ce69d7c232", "metadata": {"aucs": [0.7676569846961065, 0.6845129664880041, 0.6284757901253599, 0.2260924784984264, 0.22079646365600847, 0.30796473678967584, 0.8120781170745309, 0.86031293706614, 0.5546416328959997, 0.5128589370302892, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5851286958379198, 0.005069639837516515, 0.1130903701431567, 0.11882963299870919, 0.3746348293736377, 0.11901257913895802, 0.14415759762219427, 0.11895348314224086, 0.07985246272089519, 0.11468764609972748, 0.20929001482185405, 0.08458301180100958, 0.09190930756889215, 0.1197508934839876, 0.11981723674098443, 0.08906927531790165, 0.11176864318450264, 0.077902547028184, 0.09373192367425476, 0.09361365066055782, 0.9893251201337119, 0.9756936611210442, 0.9652429438780239, 0.9784021752147859, 0.9919263172210426, 0.9973825812678834, 0.9948192167631873, 0.9691917001447019, 0.9906279190459566, 0.19870920382268886, 0.4499921094197311, 0.05991857324760841, 0.14168554331202599, 0.16109488555084428, 0.2556772017312092, 0.012547251354734557, 0.287195351234789, 0.05573988450669021, 0.683068707904646, 0.6053817505817088, 0.6233412879137386, 0.6673123318704357, 0.6694503206128601, 0.6488812526814651, 0.12569559847912604, 0.7373336971237564, 0.765253015487985, 0.14229824756806686, 0.10887334188718467, 0.11514201144322778, 0.10255115257729763, 0.09566645895610437, 0.10691878382531161, 0.17359521167445602, 0.18468564666895815, 0.17500917040077568, 0.025594505373968568, 0.031887569170899965, 0.04456831310520171, 0.17635668404553284, 0.17226706018521798, 0.109436439847584, 0.047986090432879824, 9.999999999998899e-05, 0.11545012807411126, 0.000558184785206528, 9.999999999998899e-05, 0.03067990075593985, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.41340028445692756, 9.999999999998899e-05, 9.999999999998899e-05, 0.031421089405479496, 0.05204469760931463, 0.05463362926636406, 0.06190834501236786, 9.999999999998899e-05, 0.08679941215919773, 9.999999999998899e-05, 0.06799170367328367, 0.05135796329725728, 0.11633709545349014, 0.07574618196631777, 0.07238422599263594, 0.2354320770045366, 0.29550395437643784, 0.2159724879253475, 0.15940616657417084, 0.2648919017851529, 0.09093842686715958, 0.2110253702278374, 0.19889946493466926, 0.4478253560355637, 0.37829252029835714, 0.4356323484384901, 0.005848461622129264, 0.24407655154918817, 0.3898481259943485, 0.37745777292631155, 0.4455625406460464, 0.4657401183675691, 0.6131138935873703, 0.8014995577630866, 0.18793398005175932, 0.7806120261994783, 0.7145962358995025, 0.5532762341896047, 0.5933735803753046, 0.09851419157359487, 0.23763504014795422, 0.0750649081722029, 0.08815123737801145, 0.08662132783304566, 0.07804074966340524, 0.09175836607901833, 0.06610146569489861, 0.08197978756612223, 0.12147795549373108, 0.1220407012826007, 0.14253966751027403, 0.09855305120349966, 0.12042297248854972, 0.15804969510749756, 0.16521904789744657, 0.12994466392296633, 0.11201131188516977, 0.21849506452670198, 0.29897178870367724, 0.28227425970912456, 0.16977888471673375, 0.19528372357421864, 0.1339592123443799, 0.44541441287612493, 0.3124351403656307, 0.5933317868116759, 0.055872008284945096, 0.24257045498549723, 0.17506888449294744, 0.09644507778990008, 0.06406947898089654, 0.08402630163066005, 0.3263219924028161, 0.3168755960374704, 0.2635598375577253, 0.15875781995047233, 0.14801283150570033, 0.16143758415319276, 0.15819194616165366, 0.1525428828951939, 0.16045554146330154, 0.1533708583318628, 0.19461856175547498, 0.1568892936576778, 0.1926226497740665, 0.16563990283749008, 0.17999240986282528, 0.20083243634151926, 0.18719304814863924, 0.16765248821115875, 0.18967821899354131, 0.17159874987811652, 0.15705532102183384, 0.10793406633647662, 0.10613368980434101, 0.15891253580116316, 0.6452010879486707, 0.19514220834951468, 0.15948180028047465, 0.17168045957884603, 0.1698167975836148, 0.17872201545725985, 0.14706862874104865, 0.19484135868084496, 0.2662580586754607, 0.1649340537883387, 0.11330659854379443, 0.13659466007952303, 0.20331039078820112, 0.20391574022096215, 0.20463766386410076, 0.17408122350302113, 0.17330863394576768, 0.1805810373058474, 0.19101632876226682, 0.14993505670154572, 0.14984733577752085, 0.16258242595789563, 0.1368306635365346, 0.14689007985489466, 0.05396808573110501, 0.061085097197046134, 0.04901760422443602, 0.06389923271255848, 0.06729604745237361, 0.04571509671328311, 0.0551548769974306, 0.049790890716137404, 0.06583948075035406]}, "mutation_prompt": null}
{"id": "142ada2f-3fb1-47ca-a186-8ebece0f59e3", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        diversity = np.std(population, axis=0).mean()\n        cross_rate = 0.5 + 0.5 * (1 - np.exp(-5 * diversity))\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            diversity = np.std(population, axis=0).mean()\n            self.mutation_factor = 0.5 + 0.5 * (diversity / 2)  # Adjust mutation based on diversity\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Adjust mutation and crossover rates dynamically based on population diversity to improve convergence.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'population' is not defined\").", "error": "NameError(\"name 'population' is not defined\")", "parent_id": "03f70b21-52b4-4d53-8b3e-a5ce69d7c232", "metadata": {}, "mutation_prompt": null}
{"id": "367fcbf9-5eed-4ffd-b4fd-a7620d63999f", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.6 + 0.4 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        gradient_step = 0.01\n        gradient = np.array([(func(np.clip(solution + gradient_step * unit, self.lower_bound, self.upper_bound)) - func(solution)) / gradient_step for unit in np.eye(self.dim)])\n        neighbor = np.clip(solution - 0.1 * gradient, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Enhance local search by incorporating gradient information to improve exploitation capability.", "configspace": "", "generation": 36, "fitness": 0.4340099819324739, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "03f70b21-52b4-4d53-8b3e-a5ce69d7c232", "metadata": {"aucs": [0.8523888268323996, 0.8569458097799536, 0.8807578828818294, 0.8963684174575377, 0.7864146319931427, 0.8664324925537498, 0.8358535892400712, 0.6309177854743218, 0.6517877416435356, 0.7421988509873216, 0.7768613444500267, 0.7115618785872408, 0.670591165124311, 0.6022089840462399, 0.7401779064809602, 0.7770906895748585, 0.7560151244955728, 0.7408503114373512, 0.13074873613264193, 0.15283117537623025, 0.11752118882006057, 0.11268827627804134, 0.26296272758646067, 0.1488683913952762, 0.14627010872734225, 0.11195487324013265, 0.12452332570314362, 0.13826305652444748, 0.10548299255924465, 0.13306004722665132, 0.12845301962442757, 0.13119279408022244, 0.1376015274904021, 0.10290468466882563, 0.15125663995510008, 0.12529073682904868, 0.7560916577686883, 0.9565223970612722, 0.695074624411143, 0.8278438286320452, 0.8117595676923917, 0.9512794932913075, 0.9084052790060049, 0.9483691275438539, 0.8817683937969787, 0.5440701610983503, 0.4276851313390181, 0.4118062487348705, 0.5406217186555408, 0.49643476637103945, 0.4856802964308111, 0.5001602796878633, 0.5095369632798011, 0.36504459778717924, 0.8982664899515941, 0.8942986671386672, 0.24160064391490288, 0.9015601445178786, 0.17277020021584177, 0.37247657479346985, 0.8664539797356201, 0.8980429295263036, 0.8062449048888426, 0.3673283974853453, 0.4952508161163234, 0.1338315549509025, 0.3711196419866275, 0.27946690248034967, 0.30580085124227485, 0.5341822462841572, 0.5254300854094032, 0.4293005549127793, 0.49234084275460877, 0.3521446017445371, 0.49115222579219253, 0.2600022946289572, 0.5192982799511379, 0.36517857121892017, 0.42320466989386285, 0.5115709807817572, 0.4810586960161085, 0.7616009831316969, 0.6873291497138708, 0.6910495355069552, 0.09603596937464898, 0.7271188703227214, 0.7271906328396169, 0.784994539365397, 0.6947732891878073, 0.7394606041656311, 0.7983459460899716, 0.7920261108599382, 0.8527560306800663, 0.8192184143299966, 0.7261216069432834, 0.7334920192849257, 0.8055527317795664, 0.7993468370671349, 0.8112110374606004, 0.48584893136956475, 0.40623271291152674, 0.5367420916812431, 0.08894056918325532, 0.6226356956693713, 0.6228922326069899, 0.13168003281991336, 0.13706122760549444, 0.1661042614931223, 0.5403065158262708, 0.59066475790905, 0.5725773796880413, 0.3785479430346669, 0.48014432745483504, 0.5831997836970662, 0.6223150277455269, 0.30181496410415265, 0.40478907532431285, 0.8626313191998907, 0.8292424060066185, 0.794216924342195, 0.8258001708572064, 0.8232660565892371, 0.7849374952140937, 0.8589440156420465, 0.8488686314186833, 0.8171958076390903, 0.12240653029067528, 0.16289011573199208, 0.11260202756307502, 0.13149439510679262, 0.1171337751961723, 0.09687872411226395, 0.11008163217159495, 0.10000060944001488, 0.4079741280422361, 0.18062297005567618, 0.1562275787505345, 0.574824395447602, 0.6477008830704192, 0.31479474431204824, 0.30151867845157354, 0.2270993633461259, 0.2034274869788748, 0.15389374678224121, 0.4595378730538423, 0.5076549830014476, 0.4950175459190198, 0.523998683762455, 0.4613143014456006, 0.5580340040407796, 0.5457747439103839, 0.5419585767405959, 0.5246999557719506, 0.27197927949799183, 0.41424283229795034, 0.4757593281573582, 0.39072668890849804, 0.41971785630959235, 0.3778328955844561, 0.4676878983068956, 0.4396941627156089, 0.22753035020199974, 0.18854296037291018, 0.19904716123990318, 0.20761844345844516, 0.2032012506422396, 0.18876231875798022, 0.19014074523817992, 0.21302955621640163, 0.19039136200484985, 0.20126758019452307, 0.22055632751929422, 0.24650372179932678, 0.22072665308603123, 0.20904924480914577, 0.2363971613936534, 0.20812613484434028, 0.1882157443938911, 0.18501187397247754, 0.23374377187497053, 0.8972943935524478, 0.18684227742723092, 0.14786101787168027, 0.9108657606231955, 0.19956019965037308, 0.1879351560393262, 0.1700577225617279, 0.1997339439388568, 0.20734512187342036, 0.8982221898831891, 0.21291934760577047, 0.12633355183065453, 0.2111262889847988, 0.21108335261339917, 0.16922290303794907, 0.21434422372171125, 0.12724472608251058, 0.1560139258952029, 0.19678015528413262, 0.18627381341357074, 0.20703425172202938, 0.18962787229493028, 0.19406205046242053, 0.17655091871013717, 0.19868018901576046, 0.17790633472251427, 0.19965172754810112, 0.08895242885200938, 0.0969320895704272, 0.08632591532627354, 0.10217387259665445, 0.0836738701462274, 0.10070192641451736, 0.08166230268045072, 0.08226706907829706, 0.09777376877064214]}, "mutation_prompt": null}
{"id": "72cece04-bf08-467f-b313-c7161fcb760d", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        diversity_factor = self.compute_diversity(population)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c]) * diversity_factor\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.6 + 0.4 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        diversity_factor = self.compute_diversity(np.array([solution, neighbor]))\n        if func(neighbor) < func(solution) * diversity_factor:\n            return neighbor\n        return solution\n\n    def compute_diversity(self, population):\n        return np.mean(np.std(population, axis=0))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive mutation and local search strategies based on diversity to enhance exploration-exploitation balance.", "configspace": "", "generation": 37, "fitness": 0.15482126048420589, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "03f70b21-52b4-4d53-8b3e-a5ce69d7c232", "metadata": {"aucs": [0.2951906197484443, 0.2797567216646315, 0.2839103584550998, 0.2736448737240431, 0.2708919993616419, 0.24014307511363508, 0.28200961517189305, 0.1948860430575693, 0.2219357887906871, 0.10690605814420573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04606357244903503, 0.12473493232778998, 0.009172290283165019, 0.01576085470276778, 0.14835743755044573, 0.13217616986768954, 0.1209856551350742, 0.10632774888175012, 0.13204831198524902, 0.12440232155930409, 0.10111804381096079, 0.0897272022280482, 0.10371662792408065, 0.12796623272278684, 0.0796594499243447, 0.10370770029353937, 0.08285729925389673, 0.10438494099246254, 0.09755741561532816, 0.10954361566251991, 0.08842770095854902, 0.09833074119421781, 0.08578967274526983, 0.16990691331733065, 0.9878889925308377, 0.9893383827009878, 0.9810321249696953, 0.2663258290149303, 0.9973825812678834, 0.9842103847883167, 0.2520228638270344, 0.9739290002170162, 0.07268542920644139, 0.11169166545607401, 0.15109477006025396, 0.09311922422004304, 0.07959760603823507, 0.1466616509720463, 0.08734673769663115, 0.10401291067009732, 0.11064398927861663, 0.18769522607440137, 0.2483162044427829, 0.24100397219703107, 0.24361628980182204, 0.29421384730998057, 0.18722891962704058, 0.2846313197222228, 0.3408368960585688, 0.17199140021452053, 0.11162083537499035, 0.10402264719742127, 0.07228593723574828, 0.1519508890483463, 0.04702117746533929, 0.09475909515917125, 0.07027000050601817, 0.10427548275219378, 0.11220700635580161, 0.01693987130871788, 0.049623688220804985, 0.18376278171518623, 0.08684405117129357, 0.09099436477463185, 0.10288926336837068, 0.12147637367334696, 0.015188998567171486, 0.10272016917420401, 0.14222722856136694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03831248962333467, 0.13211010873835438, 9.999999999998899e-05, 9.999999999998899e-05, 0.02363939704673046, 0.07799746296393661, 0.0036020119687276697, 0.09632767613471438, 0.011367457238771972, 0.02565083086948239, 0.02026137224586133, 0.14104519003350524, 0.06654745954296726, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023915733874397826, 0.02212725120926351, 0.0655487601513145, 0.06275845745919706, 0.0540909414667865, 0.04250023499251143, 0.02335642503670754, 0.04633410941947402, 0.08051532795380134, 0.24147179800160679, 0.2893844314463736, 0.27530562320591334, 0.32550193999248755, 0.3350114095372738, 0.21123710739821688, 0.2946518642189373, 0.1207587770152675, 0.3141378054948373, 0.08836381687827521, 0.1014487792327331, 0.112140038692915, 0.11662667544498673, 0.11109550883935404, 0.1127372008266262, 0.11663553430856644, 0.09475325768502496, 0.09952079999746133, 0.1421762566531214, 0.14195019251882457, 0.10992258308902259, 0.18733185976628486, 0.1408283314917318, 0.13928962957212565, 0.13927397561582255, 0.11714399549024856, 0.1346608636044765, 0.19937964680295772, 0.237683118965484, 0.21223813167719063, 0.20099388613334546, 0.17137327187680673, 0.1831097271462111, 0.23681121779374392, 0.23617412507109903, 0.23321911207105772, 0.1967061528853684, 0.11495046674973985, 0.1937764400478793, 0.1738638014609133, 0.11885972594165617, 0.18609560961257776, 0.19297470507275172, 0.22238673811196796, 0.17960356211839879, 0.14781458117573987, 0.16091534839896393, 0.1525608914086486, 0.16837115292182114, 0.18161905511710952, 0.1487939981698717, 0.16293215949410045, 0.16173200061344073, 0.15079340987123813, 0.20582067672555582, 0.18105960582096992, 0.1882187933146262, 0.17899314783419396, 0.18410343931591233, 0.1893539260467959, 0.1683951931831894, 0.17169794495732527, 0.19631239351489416, 0.15930939521930854, 0.10615703198225257, 0.1705622078329334, 0.147578649973095, 0.18255112636694715, 0.12139709414127464, 0.14670274370391367, 0.16390335737669193, 0.166621598109172, 0.16124485852830817, 0.156897864161876, 0.1691797572424233, 0.3796035300669399, 0.09255701679411577, 0.08330867286386112, 0.19073897148217278, 0.20084516687563092, 0.18244435714133167, 0.15978253993902514, 0.13968723175057696, 0.15491803692259765, 0.1245342966463644, 0.16158465968536062, 0.14992868535800952, 0.16711057936751528, 0.14992474334426864, 0.16969843428102227, 0.08737805058995951, 0.058031292340819496, 0.06252611857369161, 0.06655124756180453, 0.07033304337760415, 0.08367344021197931, 0.052071438285061, 0.06674699777212367, 0.05085603269544714]}, "mutation_prompt": null}
{"id": "2fe644e1-2332-4690-b5df-7d69ede173ac", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.initial_population_size = self.population_size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutation_factor = self.mutation_factor * (0.5 + 0.5 * np.random.rand())\n        mutant = population[a] + mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.6 + 0.4 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def resize_population(self, fitness):\n        if self.evaluations > self.budget * 0.5 and self.population_size > self.initial_population_size / 2:\n            self.population_size = max(self.initial_population_size // 2, 20)\n            sorted_indices = np.argsort(fitness)\n            return sorted_indices[:self.population_size]\n        return np.arange(self.population_size)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            indices = self.resize_population(fitness)\n            for i in indices:\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate adaptive population resizing and mutation diversity to enhance convergence speed and solution quality.", "configspace": "", "generation": 38, "fitness": 0.22977133332210975, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.18.", "error": "", "parent_id": "03f70b21-52b4-4d53-8b3e-a5ce69d7c232", "metadata": {"aucs": [0.5891882000061903, 0.6980343952617827, 0.5390958057835809, 0.47489872522049836, 0.46328384767301534, 0.5396405213529947, 0.4844055244450781, 0.40398399713774835, 0.3123159210566614, 0.2558007315916634, 0.25058669425862623, 0.0680163280322178, 0.12679593828986835, 0.2276890774722241, 0.29382714987939695, 0.3850739456975919, 0.25805034771793967, 0.3417784918151803, 0.11087000541435643, 0.11671039661106675, 0.11780525932737784, 0.14799738662407924, 0.1214611869829696, 0.09814837232730955, 0.1447561613226651, 0.18203310251544103, 0.09257746371001652, 0.07666771389834282, 0.10620459992976339, 0.04073653043096459, 0.11098975801234479, 0.06277454803742621, 0.06805208168966315, 0.1687053235676187, 0.07611319324782073, 0.09973716014750311, 0.978787387961739, 0.5079891738192832, 0.6901497909058973, 0.5374324814863811, 0.34293578459653695, 0.769416157651135, 0.6157815567460418, 0.6602733936685725, 0.8073487020970425, 0.24404015482681118, 0.30484919441450553, 0.1769169419375598, 0.18652113170547246, 0.29683191256025043, 0.1478932753176292, 0.3160747970913321, 0.1940437522768621, 0.08818155025175634, 0.9198640619995405, 0.9155096389810222, 0.1404813834894698, 0.2430962202706176, 0.383259102887189, 0.3505011316934682, 0.1780550555119116, 0.2214483911459555, 0.23761944004229718, 0.07470888203575665, 0.10169103330650853, 0.05730330633187042, 0.12042488515322891, 0.1509600820413527, 0.2354772880272744, 0.2199339947233515, 0.051394632204618707, 0.16298434426559483, 0.17047346784608108, 0.1373969807342421, 0.1258426760364033, 0.15256329758613252, 0.2514738081967245, 0.17662496981563014, 0.23904091777278358, 0.19584322921180197, 0.38896081306989905, 0.0038070268509993177, 9.999999999998899e-05, 0.03422573061202183, 9.999999999998899e-05, 0.012343010556834955, 0.007912737278853665, 0.16658226285019972, 0.0009846676326116244, 0.14372897398665918, 0.46104789069920915, 0.10673810515594218, 0.12575104175399177, 0.09933625498821153, 0.09373034900764665, 0.04665684883844701, 0.13327171554967066, 0.14537541762027306, 0.17554245877687846, 0.07133053175392867, 0.030541671965916395, 0.012066798320364613, 0.13739828098892104, 0.02354548281559088, 0.12374481953512606, 0.0483406643857337, 0.12855517646883852, 0.019046135894571714, 0.06114564274066381, 0.1347799788561066, 0.06758343887824647, 0.1090270363950282, 0.06904725729750738, 0.0038439085015697927, 0.16945305788401543, 0.059502118376757784, 0.07462136998799962, 0.47986425757387496, 0.4677997330987792, 0.3564156610378377, 0.3656934911485762, 0.39989273731615305, 0.34905659500777997, 0.4438633921542149, 0.26515381836978635, 0.40370504516381445, 0.07487030095866753, 0.06940720807003387, 0.09226697039412124, 0.13815427092020727, 0.13786377610063205, 0.127824185195605, 0.12149340627187466, 0.1596389901403129, 0.08905537431909993, 0.16645425296178396, 0.17130116041721322, 0.27214397255918243, 0.2691102925737412, 0.22551065368330803, 0.17083813682873972, 0.22313901481441967, 0.18232268861058876, 0.39659927007691587, 0.2728079306796448, 0.3121098364645588, 0.23267530973825368, 0.3349158737114615, 0.21615419810823955, 0.31193396417182706, 0.3168784789353102, 0.38062455531831774, 0.287241023341671, 0.31742941575620853, 0.2536664309953428, 0.1351317669280736, 0.3480868560500566, 0.23376698266999496, 0.21032979329253065, 0.5262437152468336, 0.25822148769605124, 0.28081711870417847, 0.23251212351129713, 0.20517779536019898, 0.22362150045118945, 0.2520627546345695, 0.22371118763675213, 0.21541099000632258, 0.24900430664482376, 0.2159773182105299, 0.2088606310052903, 0.22451135047632265, 0.18264126929896385, 0.22177941270451584, 0.187110483921473, 0.21822241325142633, 0.18086436131324268, 0.19198717422002276, 0.21537617829363298, 0.1779483153599778, 0.14994005480987527, 0.18495538954945878, 0.14189086554498276, 0.6196668434549808, 0.1969619194315202, 0.19417838546201216, 0.16756783105830475, 0.19580581006345887, 0.6750799489943355, 0.3605302069083314, 0.20696574726489614, 0.6577164384516065, 0.3780713132641186, 0.15441380732907894, 0.13701862196947912, 0.16301940576617469, 0.12732147158342355, 0.5398810994104997, 0.17848810743732046, 0.1708842395045156, 0.22254892013984506, 0.17703377759965278, 0.17262402584756986, 0.18278516527034305, 0.183666980897649, 0.18749477080743027, 0.20452977563349828, 0.09167981659421509, 0.08321877711113645, 0.0881280463927746, 0.08912868445356037, 0.08760030387717632, 0.09672065871223845, 0.09142089130068598, 0.08535555145650975, 0.08704746095681781]}, "mutation_prompt": null}
{"id": "adaf526d-e554-43a1-b32a-419f73b54db9", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Modified perturbation scale\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Refine the crossover and local search strategies by incorporating adaptive learning rates and diversity preservation for improved convergence efficiency.", "configspace": "", "generation": 39, "fitness": 0.46219484505434694, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.29.", "error": "", "parent_id": "03f70b21-52b4-4d53-8b3e-a5ce69d7c232", "metadata": {"aucs": [0.8903086417481445, 0.8815847463509745, 0.8823484826128947, 0.887725862574167, 0.8143629095656022, 0.7476036727419217, 0.7783378697059078, 0.8831471549474781, 0.8702141765090453, 0.6241265437661375, 0.7976560737619899, 0.7760794699938364, 0.7228374991134872, 0.7961324085886821, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15425720212838168, 0.13064541147988873, 0.13687025895465832, 0.14531830675243995, 0.12427448253013285, 0.2802339362912347, 0.12845039745921472, 0.1129794233547633, 0.11934525182240796, 0.0871704399847889, 0.12730182013556746, 0.06340566219646149, 0.13048213897348937, 0.1163589811467789, 0.11277725223383261, 0.11821052110330443, 0.11685113116076318, 0.11358875554055226, 0.8062487306633064, 0.8115193064814685, 0.8000059129351346, 0.8005486432079907, 0.7741706074046714, 0.974945973198535, 0.804459916032665, 0.8081513580913433, 0.9337948803471395, 0.5391204276913899, 0.059581446280820294, 0.5530159598667987, 0.563373643010532, 0.6581148287715051, 0.5016429485106686, 0.5399316893230096, 0.6842406267782866, 0.5860095324075939, 0.9245426282080719, 0.9127566905993614, 0.22192115291433334, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.6137792343867752, 0.7030209646148357, 0.6573584235762924, 0.3154020441969434, 0.4102820229644908, 0.36980951504321613, 0.6623382488980343, 0.5109415811594507, 0.1288595875386187, 0.7693522562066253, 0.6977103980419164, 0.5874087585151293, 0.7283055101874936, 0.6386901973448724, 0.483443319017143, 0.5457299013082237, 0.3920711830060334, 0.4863668316946427, 0.78515790170497, 0.4733682990903221, 0.40009299223626327, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448018826214555, 0.6250528754530058, 0.5911681323479723, 0.677599917678755, 0.4725891918379178, 0.8490561653047483, 0.6961248797194558, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.6407505146136565, 0.6885583361096945, 0.6358703380398095, 0.19334544062032666, 0.6132201721672382, 0.672553803990693, 0.6484138280957077, 0.6845451841430401, 0.6447547313978934, 0.872377759973716, 0.8765951289262196, 0.8553012841922987, 0.8337331101666897, 0.7791152166100439, 0.8657191931782451, 0.8731454565060743, 0.725608511381696, 0.8782604944196443, 0.14580520561498145, 0.1051210788942506, 0.11253041708204292, 0.13777404152202, 0.12570257899873272, 0.13571756405052016, 0.12478067268602899, 0.12961448621366867, 0.10282013999565154, 0.166132774172143, 0.15459797291056931, 0.18376989702031166, 0.28702294254389715, 0.5530876158741931, 0.23124203986766223, 0.20260911873349752, 0.1343613553665628, 0.1764255821846753, 0.5782471332053485, 0.5736453490398787, 0.5319691994525928, 0.5410660640957319, 0.5232634001720226, 0.4826612630679741, 0.4883476045065026, 0.6212238166132231, 0.5795166714344229, 0.35538930025953297, 0.43319332818257394, 0.46323732305308485, 0.4229176104021799, 0.2706041292589161, 0.41499656720268807, 0.4698877108470775, 0.5107227534049859, 0.44383216341771636, 0.22091600044774595, 0.21775584930286973, 0.2630803443915918, 0.20147326435497903, 0.19784038900050527, 0.21257749062187847, 0.2132246804373702, 0.28530845395172855, 0.18271908394985992, 0.22331505704902088, 0.21481205639705314, 0.22992582767126857, 0.20797364369750926, 0.20933106669215973, 0.2058012958969041, 0.7275708196664301, 0.5384826110311571, 0.7217343621950589, 0.8281253791118272, 0.14344916561734866, 0.1464000110892113, 0.9124474347801267, 0.1964414501126185, 0.1971963458803283, 0.16768068951070014, 0.19929991270567138, 0.20863533973054982, 0.08241282295120689, 0.21090890413885988, 0.2098808072784949, 0.16541505696751413, 0.20780672505269437, 0.8421435445206076, 0.21390299347252262, 0.12595783337543875, 0.15558218130198098, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08269599144022954, 0.08509924990943141, 0.08158434536406389, 0.0851795680909343, 0.07378007630008665, 0.08663892480824675, 0.0825223675257295, 0.07464483286890877, 0.1020957357206953]}, "mutation_prompt": null}
{"id": "30b613aa-0dff-454d-aa43-25cfdb114d39", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population, fitness):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        diversity_factor = np.std(fitness) / np.mean(fitness)  # New line: dynamic factor based on fitness diversity\n        mutant = population[a] + (self.mutation_factor + diversity_factor) * (population[b] - population[c])  # Adjusted mutation with dynamic factor\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Modified perturbation scale\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population, fitness)  # Updated call with fitness\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Integrate a dynamic mutation strategy based on fitness diversity to enhance exploration and exploitation balance.", "configspace": "", "generation": 40, "fitness": 0.31987643946992356, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.30.", "error": "", "parent_id": "adaf526d-e554-43a1-b32a-419f73b54db9", "metadata": {"aucs": [0.8615458608363523, 0.8708480135000358, 0.8707691612908793, 0.8526937142407437, 0.7933692905404892, 0.9075223363014587, 0.7061129463598366, 0.8617802956375823, 0.8973699110373236, 0.0573374124352809, 0.008859415329079967, 0.04350267240126682, 0.05353130198638223, 0.052542544009835046, 9.999999999998899e-05, 0.04263861758967502, 0.3341875825218916, 0.051292525241620424, 0.12299593977430012, 0.15337083123712258, 0.12652197874106363, 0.10978455582944457, 0.11902593632389757, 0.14822567926396224, 0.14453870563784277, 0.12077761679845045, 0.14462901654027283, 0.10162739015865296, 0.11096660142186354, 0.12483832678402929, 0.10580447676557925, 0.13288718694283852, 0.1279682315990569, 0.10415412443648586, 0.11369250777369366, 0.1178741662925249, 0.9793500841750047, 0.9731533041001706, 0.9514945993303862, 0.728748491690649, 0.8128680416615238, 0.9802168442469478, 0.9406842728735199, 0.8689677497546386, 0.9792344574081769, 0.6576075596760349, 0.5482646880995065, 0.6050494572976602, 0.5963011750008831, 0.5764578465273862, 0.620583616832001, 0.05164810118293883, 0.47796072776817866, 0.5539348479891846, 0.8821690927498225, 0.9145587360207511, 0.903379745818126, 0.8896379755094166, 0.8813679791070453, 0.8724108208093437, 0.8363318439096405, 0.7895912150785069, 0.8367485377783396, 0.5045760727707989, 0.4534599862242673, 0.4161621257900908, 0.09122078019560398, 0.07186203841434613, 0.016288474238979833, 0.39420054444033514, 0.5248097270482882, 0.4452563044456185, 0.017814969919863533, 0.04716322769094872, 0.014221706331506323, 0.2718033516458127, 0.2107438487961727, 0.3863134779725693, 0.5825570494079594, 0.45252049878969614, 0.5027175599956458, 0.04685936766638954, 9.999999999998899e-05, 0.08363994402618824, 9.999999999998899e-05, 9.999999999998899e-05, 0.2630317135550152, 9.999999999998899e-05, 0.010621304894960493, 9.999999999998899e-05, 0.03879585242516914, 0.02109653721679372, 0.031222860493088755, 0.16002189794664046, 0.05866895817224538, 0.021390699495855148, 0.04607572202759802, 0.12927277016709826, 0.23083423978477335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026378791193099826, 0.00011539875806776401, 9.999999999998899e-05, 0.009117800954775657, 0.00011552032591921613, 0.05716049344901353, 0.46591817381804324, 0.5350130025097315, 0.4937643531224434, 0.06421258031549548, 0.04519912438108875, 0.05051232978705045, 0.09144271491609812, 0.02921776465938475, 0.015740156706198438, 0.7987906595130058, 0.8020284718004664, 0.8877224764448093, 0.8390309710151235, 0.596599476109055, 0.8568906898889757, 0.8488506127749558, 0.8529462574125294, 0.8537376401693044, 0.10637095513286698, 0.11801468983377839, 0.12310338859148884, 0.09332962566665559, 0.10155979651479341, 0.1329199944632976, 0.046074915593934174, 0.045914665412718714, 0.06783270225686777, 0.1868348898654929, 0.13570354814453567, 0.16036158310895376, 0.6702551167586358, 0.4376084796455256, 0.4953064282772113, 0.1820288797333719, 0.28840540224268796, 0.1476620683618658, 0.20590900137184553, 0.43682004902119587, 0.5171005109203952, 0.5503386798659861, 0.5366892054650936, 0.5922892166607925, 0.5019529826105578, 0.5843653693462847, 0.5704758470006739, 0.10716067621358105, 0.21837672907658356, 0.10937648455286308, 0.3621088924412954, 0.3981165709846711, 0.378192595643026, 0.4779652047536542, 0.5213816726497551, 0.4868257820229994, 0.20169441929986542, 0.202271977479618, 0.2006824979689381, 0.21333528241386135, 0.18888205700398553, 0.20052557938066762, 0.2105636547942541, 0.20390375911146308, 0.20165342603143988, 0.1270895791539347, 0.13517743248728564, 0.15105684799290064, 0.18426184418437352, 0.235975024749984, 0.22626843102686933, 0.19505067083478578, 0.1717719392703715, 0.2074219784518011, 0.18112748003355883, 0.16888037838521486, 0.1520416023839909, 0.18619138583193395, 0.18854513123823036, 0.18129081214314047, 0.16893698784649658, 0.19938190429300617, 0.8790137019789855, 0.787141048939004, 0.20933299959235385, 0.6967508281018708, 0.1123284255444229, 0.20446309576460575, 0.208968254535014, 0.20541148506512752, 0.2077599501644236, 0.2103361072027815, 0.17467955359490828, 0.19369523466380645, 0.1754405646594871, 0.20891634373137036, 0.162338236293879, 0.1838112644267893, 0.185746926971725, 0.20011788864858915, 0.18056633563049296, 0.07919663763570894, 0.07741518189518104, 0.09457243107201507, 0.08179603927397094, 0.10315210630413618, 0.08767020030070904, 0.0907246251442051, 0.07103206336992152, 0.07118095300854488]}, "mutation_prompt": null}
{"id": "e2e0fc20-e8f3-4571-bdca-5158fa14fe79", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Modified perturbation scale\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Refine the crossover and local search strategies by incorporating adaptive learning rates and diversity preservation for improved convergence efficiency.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "adaf526d-e554-43a1-b32a-419f73b54db9", "metadata": {"aucs": [0.8903086417481445, 0.8815847463509745, 0.8823484826128947, 0.887725862574167, 0.8143629095656022, 0.7476036727419217, 0.7783378697059078, 0.8831471549474781, 0.8702141765090453, 0.6241265437661375, 0.7976560737619899, 0.7760794699938364, 0.7228374991134872, 0.7961324085886821, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15425720212838168, 0.13064541147988873, 0.13687025895465832, 0.14531830675243995, 0.12427448253013285, 0.2802339362912347, 0.12845039745921472, 0.1129794233547633, 0.11934525182240796, 0.0871704399847889, 0.12730182013556746, 0.06340566219646149, 0.13048213897348937, 0.1163589811467789, 0.11277725223383261, 0.11821052110330443, 0.11685113116076318, 0.11358875554055226, 0.8062487306633064, 0.8115193064814685, 0.8000059129351346, 0.8005486432079907, 0.7741706074046714, 0.974945973198535, 0.804459916032665, 0.8081513580913433, 0.9337948803471395, 0.5391204276913899, 0.059581446280820294, 0.5530159598667987, 0.563373643010532, 0.6581148287715051, 0.5016429485106686, 0.5399316893230096, 0.6842406267782866, 0.5860095324075939, 0.9245426282080719, 0.9127566905993614, 0.22192115291433334, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.6137792343867752, 0.7030209646148357, 0.6573584235762924, 0.3154020441969434, 0.4102820229644908, 0.36980951504321613, 0.6623382488980343, 0.5109415811594507, 0.1288595875386187, 0.7693522562066253, 0.6977103980419164, 0.5874087585151293, 0.7283055101874936, 0.6386901973448724, 0.483443319017143, 0.5457299013082237, 0.3920711830060334, 0.4863668316946427, 0.78515790170497, 0.4733682990903221, 0.40009299223626327, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448018826214555, 0.6250528754530058, 0.5911681323479723, 0.677599917678755, 0.4725891918379178, 0.8490561653047483, 0.6961248797194558, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.6407505146136565, 0.6885583361096945, 0.6358703380398095, 0.19334544062032666, 0.6132201721672382, 0.672553803990693, 0.6484138280957077, 0.6845451841430401, 0.6447547313978934, 0.872377759973716, 0.8765951289262196, 0.8553012841922987, 0.8337331101666897, 0.7791152166100439, 0.8657191931782451, 0.8731454565060743, 0.725608511381696, 0.8782604944196443, 0.14580520561498145, 0.1051210788942506, 0.11253041708204292, 0.13777404152202, 0.12570257899873272, 0.13571756405052016, 0.12478067268602899, 0.12961448621366867, 0.10282013999565154, 0.166132774172143, 0.15459797291056931, 0.18376989702031166, 0.28702294254389715, 0.5530876158741931, 0.23124203986766223, 0.20260911873349752, 0.1343613553665628, 0.1764255821846753, 0.5782471332053485, 0.5736453490398787, 0.5319691994525928, 0.5410660640957319, 0.5232634001720226, 0.4826612630679741, 0.4883476045065026, 0.6212238166132231, 0.5795166714344229, 0.35538930025953297, 0.43319332818257394, 0.46323732305308485, 0.4229176104021799, 0.2706041292589161, 0.41499656720268807, 0.4698877108470775, 0.5107227534049859, 0.44383216341771636, 0.22091600044774595, 0.21775584930286973, 0.2630803443915918, 0.20147326435497903, 0.19784038900050527, 0.21257749062187847, 0.2132246804373702, 0.28530845395172855, 0.18271908394985992, 0.22331505704902088, 0.21481205639705314, 0.22992582767126857, 0.20797364369750926, 0.20933106669215973, 0.2058012958969041, 0.7275708196664301, 0.5384826110311571, 0.7217343621950589, 0.8281253791118272, 0.14344916561734866, 0.1464000110892113, 0.9124474347801267, 0.1964414501126185, 0.1971963458803283, 0.16768068951070014, 0.19929991270567138, 0.20863533973054982, 0.08241282295120689, 0.21090890413885988, 0.2098808072784949, 0.16541505696751413, 0.20780672505269437, 0.8421435445206076, 0.21390299347252262, 0.12595783337543875, 0.15558218130198098, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08269599144022954, 0.08509924990943141, 0.08158434536406389, 0.0851795680909343, 0.07378007630008665, 0.08663892480824675, 0.0825223675257295, 0.07464483286890877, 0.1020957357206953]}, "mutation_prompt": null}
{"id": "2e1dc81b-ea5f-4d17-b585-d4bbcbc8f42e", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Modified perturbation scale\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Refine the crossover and local search strategies by incorporating adaptive learning rates and diversity preservation for improved convergence efficiency.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "adaf526d-e554-43a1-b32a-419f73b54db9", "metadata": {"aucs": [0.8903086417481445, 0.8815847463509745, 0.8823484826128947, 0.887725862574167, 0.8143629095656022, 0.7476036727419217, 0.7783378697059078, 0.8831471549474781, 0.8702141765090453, 0.6241265437661375, 0.7976560737619899, 0.7760794699938364, 0.7228374991134872, 0.7961324085886821, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15425720212838168, 0.13064541147988873, 0.13687025895465832, 0.14531830675243995, 0.12427448253013285, 0.2802339362912347, 0.12845039745921472, 0.1129794233547633, 0.11934525182240796, 0.0871704399847889, 0.12730182013556746, 0.06340566219646149, 0.13048213897348937, 0.1163589811467789, 0.11277725223383261, 0.11821052110330443, 0.11685113116076318, 0.11358875554055226, 0.8062487306633064, 0.8115193064814685, 0.8000059129351346, 0.8005486432079907, 0.7741706074046714, 0.974945973198535, 0.804459916032665, 0.8081513580913433, 0.9337948803471395, 0.5391204276913899, 0.059581446280820294, 0.5530159598667987, 0.563373643010532, 0.6581148287715051, 0.5016429485106686, 0.5399316893230096, 0.6842406267782866, 0.5860095324075939, 0.9245426282080719, 0.9127566905993614, 0.22192115291433334, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.6137792343867752, 0.7030209646148357, 0.6573584235762924, 0.3154020441969434, 0.4102820229644908, 0.36980951504321613, 0.6623382488980343, 0.5109415811594507, 0.1288595875386187, 0.7693522562066253, 0.6977103980419164, 0.5874087585151293, 0.7283055101874936, 0.6386901973448724, 0.483443319017143, 0.5457299013082237, 0.3920711830060334, 0.4863668316946427, 0.78515790170497, 0.4733682990903221, 0.40009299223626327, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448018826214555, 0.6250528754530058, 0.5911681323479723, 0.677599917678755, 0.4725891918379178, 0.8490561653047483, 0.6961248797194558, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.6407505146136565, 0.6885583361096945, 0.6358703380398095, 0.19334544062032666, 0.6132201721672382, 0.672553803990693, 0.6484138280957077, 0.6845451841430401, 0.6447547313978934, 0.872377759973716, 0.8765951289262196, 0.8553012841922987, 0.8337331101666897, 0.7791152166100439, 0.8657191931782451, 0.8731454565060743, 0.725608511381696, 0.8782604944196443, 0.14580520561498145, 0.1051210788942506, 0.11253041708204292, 0.13777404152202, 0.12570257899873272, 0.13571756405052016, 0.12478067268602899, 0.12961448621366867, 0.10282013999565154, 0.166132774172143, 0.15459797291056931, 0.18376989702031166, 0.28702294254389715, 0.5530876158741931, 0.23124203986766223, 0.20260911873349752, 0.1343613553665628, 0.1764255821846753, 0.5782471332053485, 0.5736453490398787, 0.5319691994525928, 0.5410660640957319, 0.5232634001720226, 0.4826612630679741, 0.4883476045065026, 0.6212238166132231, 0.5795166714344229, 0.35538930025953297, 0.43319332818257394, 0.46323732305308485, 0.4229176104021799, 0.2706041292589161, 0.41499656720268807, 0.4698877108470775, 0.5107227534049859, 0.44383216341771636, 0.22091600044774595, 0.21775584930286973, 0.2630803443915918, 0.20147326435497903, 0.19784038900050527, 0.21257749062187847, 0.2132246804373702, 0.28530845395172855, 0.18271908394985992, 0.22331505704902088, 0.21481205639705314, 0.22992582767126857, 0.20797364369750926, 0.20933106669215973, 0.2058012958969041, 0.7275708196664301, 0.5384826110311571, 0.7217343621950589, 0.8281253791118272, 0.14344916561734866, 0.1464000110892113, 0.9124474347801267, 0.1964414501126185, 0.1971963458803283, 0.16768068951070014, 0.19929991270567138, 0.20863533973054982, 0.08241282295120689, 0.21090890413885988, 0.2098808072784949, 0.16541505696751413, 0.20780672505269437, 0.8421435445206076, 0.21390299347252262, 0.12595783337543875, 0.15558218130198098, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08269599144022954, 0.08509924990943141, 0.08158434536406389, 0.0851795680909343, 0.07378007630008665, 0.08663892480824675, 0.0825223675257295, 0.07464483286890877, 0.1020957357206953]}, "mutation_prompt": null}
{"id": "d22f4bf4-62f4-4a5c-9bc5-235965a56176", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Modified perturbation scale\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Refine the crossover and local search strategies by incorporating adaptive learning rates and diversity preservation for improved convergence efficiency.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "adaf526d-e554-43a1-b32a-419f73b54db9", "metadata": {"aucs": [0.8903086417481445, 0.8815847463509745, 0.8823484826128947, 0.887725862574167, 0.8143629095656022, 0.7476036727419217, 0.7783378697059078, 0.8831471549474781, 0.8702141765090453, 0.6241265437661375, 0.7976560737619899, 0.7760794699938364, 0.7228374991134872, 0.7961324085886821, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15425720212838168, 0.13064541147988873, 0.13687025895465832, 0.14531830675243995, 0.12427448253013285, 0.2802339362912347, 0.12845039745921472, 0.1129794233547633, 0.11934525182240796, 0.0871704399847889, 0.12730182013556746, 0.06340566219646149, 0.13048213897348937, 0.1163589811467789, 0.11277725223383261, 0.11821052110330443, 0.11685113116076318, 0.11358875554055226, 0.8062487306633064, 0.8115193064814685, 0.8000059129351346, 0.8005486432079907, 0.7741706074046714, 0.974945973198535, 0.804459916032665, 0.8081513580913433, 0.9337948803471395, 0.5391204276913899, 0.059581446280820294, 0.5530159598667987, 0.563373643010532, 0.6581148287715051, 0.5016429485106686, 0.5399316893230096, 0.6842406267782866, 0.5860095324075939, 0.9245426282080719, 0.9127566905993614, 0.22192115291433334, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.6137792343867752, 0.7030209646148357, 0.6573584235762924, 0.3154020441969434, 0.4102820229644908, 0.36980951504321613, 0.6623382488980343, 0.5109415811594507, 0.1288595875386187, 0.7693522562066253, 0.6977103980419164, 0.5874087585151293, 0.7283055101874936, 0.6386901973448724, 0.483443319017143, 0.5457299013082237, 0.3920711830060334, 0.4863668316946427, 0.78515790170497, 0.4733682990903221, 0.40009299223626327, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448018826214555, 0.6250528754530058, 0.5911681323479723, 0.677599917678755, 0.4725891918379178, 0.8490561653047483, 0.6961248797194558, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.6407505146136565, 0.6885583361096945, 0.6358703380398095, 0.19334544062032666, 0.6132201721672382, 0.672553803990693, 0.6484138280957077, 0.6845451841430401, 0.6447547313978934, 0.872377759973716, 0.8765951289262196, 0.8553012841922987, 0.8337331101666897, 0.7791152166100439, 0.8657191931782451, 0.8731454565060743, 0.725608511381696, 0.8782604944196443, 0.14580520561498145, 0.1051210788942506, 0.11253041708204292, 0.13777404152202, 0.12570257899873272, 0.13571756405052016, 0.12478067268602899, 0.12961448621366867, 0.10282013999565154, 0.166132774172143, 0.15459797291056931, 0.18376989702031166, 0.28702294254389715, 0.5530876158741931, 0.23124203986766223, 0.20260911873349752, 0.1343613553665628, 0.1764255821846753, 0.5782471332053485, 0.5736453490398787, 0.5319691994525928, 0.5410660640957319, 0.5232634001720226, 0.4826612630679741, 0.4883476045065026, 0.6212238166132231, 0.5795166714344229, 0.35538930025953297, 0.43319332818257394, 0.46323732305308485, 0.4229176104021799, 0.2706041292589161, 0.41499656720268807, 0.4698877108470775, 0.5107227534049859, 0.44383216341771636, 0.22091600044774595, 0.21775584930286973, 0.2630803443915918, 0.20147326435497903, 0.19784038900050527, 0.21257749062187847, 0.2132246804373702, 0.28530845395172855, 0.18271908394985992, 0.22331505704902088, 0.21481205639705314, 0.22992582767126857, 0.20797364369750926, 0.20933106669215973, 0.2058012958969041, 0.7275708196664301, 0.5384826110311571, 0.7217343621950589, 0.8281253791118272, 0.14344916561734866, 0.1464000110892113, 0.9124474347801267, 0.1964414501126185, 0.1971963458803283, 0.16768068951070014, 0.19929991270567138, 0.20863533973054982, 0.08241282295120689, 0.21090890413885988, 0.2098808072784949, 0.16541505696751413, 0.20780672505269437, 0.8421435445206076, 0.21390299347252262, 0.12595783337543875, 0.15558218130198098, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08269599144022954, 0.08509924990943141, 0.08158434536406389, 0.0851795680909343, 0.07378007630008665, 0.08663892480824675, 0.0825223675257295, 0.07464483286890877, 0.1020957357206953]}, "mutation_prompt": null}
{"id": "66922c36-0c34-43d1-9987-6885d5b1bb9f", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.05, self.dim)  # Modified perturbation scale\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Refine the crossover and local search strategies by incorporating adaptive learning rates and diversity preservation for improved convergence efficiency.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "adaf526d-e554-43a1-b32a-419f73b54db9", "metadata": {"aucs": [0.8903086417481445, 0.8815847463509745, 0.8823484826128947, 0.887725862574167, 0.8143629095656022, 0.7476036727419217, 0.7783378697059078, 0.8831471549474781, 0.8702141765090453, 0.6241265437661375, 0.7976560737619899, 0.7760794699938364, 0.7228374991134872, 0.7961324085886821, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15425720212838168, 0.13064541147988873, 0.13687025895465832, 0.14531830675243995, 0.12427448253013285, 0.2802339362912347, 0.12845039745921472, 0.1129794233547633, 0.11934525182240796, 0.0871704399847889, 0.12730182013556746, 0.06340566219646149, 0.13048213897348937, 0.1163589811467789, 0.11277725223383261, 0.11821052110330443, 0.11685113116076318, 0.11358875554055226, 0.8062487306633064, 0.8115193064814685, 0.8000059129351346, 0.8005486432079907, 0.7741706074046714, 0.974945973198535, 0.804459916032665, 0.8081513580913433, 0.9337948803471395, 0.5391204276913899, 0.059581446280820294, 0.5530159598667987, 0.563373643010532, 0.6581148287715051, 0.5016429485106686, 0.5399316893230096, 0.6842406267782866, 0.5860095324075939, 0.9245426282080719, 0.9127566905993614, 0.22192115291433334, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.6137792343867752, 0.7030209646148357, 0.6573584235762924, 0.3154020441969434, 0.4102820229644908, 0.36980951504321613, 0.6623382488980343, 0.5109415811594507, 0.1288595875386187, 0.7693522562066253, 0.6977103980419164, 0.5874087585151293, 0.7283055101874936, 0.6386901973448724, 0.483443319017143, 0.5457299013082237, 0.3920711830060334, 0.4863668316946427, 0.78515790170497, 0.4733682990903221, 0.40009299223626327, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448018826214555, 0.6250528754530058, 0.5911681323479723, 0.677599917678755, 0.4725891918379178, 0.8490561653047483, 0.6961248797194558, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.6407505146136565, 0.6885583361096945, 0.6358703380398095, 0.19334544062032666, 0.6132201721672382, 0.672553803990693, 0.6484138280957077, 0.6845451841430401, 0.6447547313978934, 0.872377759973716, 0.8765951289262196, 0.8553012841922987, 0.8337331101666897, 0.7791152166100439, 0.8657191931782451, 0.8731454565060743, 0.725608511381696, 0.8782604944196443, 0.14580520561498145, 0.1051210788942506, 0.11253041708204292, 0.13777404152202, 0.12570257899873272, 0.13571756405052016, 0.12478067268602899, 0.12961448621366867, 0.10282013999565154, 0.166132774172143, 0.15459797291056931, 0.18376989702031166, 0.28702294254389715, 0.5530876158741931, 0.23124203986766223, 0.20260911873349752, 0.1343613553665628, 0.1764255821846753, 0.5782471332053485, 0.5736453490398787, 0.5319691994525928, 0.5410660640957319, 0.5232634001720226, 0.4826612630679741, 0.4883476045065026, 0.6212238166132231, 0.5795166714344229, 0.35538930025953297, 0.43319332818257394, 0.46323732305308485, 0.4229176104021799, 0.2706041292589161, 0.41499656720268807, 0.4698877108470775, 0.5107227534049859, 0.44383216341771636, 0.22091600044774595, 0.21775584930286973, 0.2630803443915918, 0.20147326435497903, 0.19784038900050527, 0.21257749062187847, 0.2132246804373702, 0.28530845395172855, 0.18271908394985992, 0.22331505704902088, 0.21481205639705314, 0.22992582767126857, 0.20797364369750926, 0.20933106669215973, 0.2058012958969041, 0.7275708196664301, 0.5384826110311571, 0.7217343621950589, 0.8281253791118272, 0.14344916561734866, 0.1464000110892113, 0.9124474347801267, 0.1964414501126185, 0.1971963458803283, 0.16768068951070014, 0.19929991270567138, 0.20863533973054982, 0.08241282295120689, 0.21090890413885988, 0.2098808072784949, 0.16541505696751413, 0.20780672505269437, 0.8421435445206076, 0.21390299347252262, 0.12595783337543875, 0.15558218130198098, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08269599144022954, 0.08509924990943141, 0.08158434536406389, 0.0851795680909343, 0.07378007630008665, 0.08663892480824675, 0.0825223675257295, 0.07464483286890877, 0.1020957357206953]}, "mutation_prompt": null}
{"id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 45, "fitness": 0.4622577729069163, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.29.", "error": "", "parent_id": "adaf526d-e554-43a1-b32a-419f73b54db9", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "83f61c1f-7479-4cd5-8b56-2e37d6eea5b3", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "e4a94426-bfbb-4446-9204-94a3b18ebf92", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "a05be0c8-39e6-4b86-8c5e-2807f90c052f", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "b56b142f-3f22-44ce-b899-1de0591f15b5", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "8d9eada6-b490-4b2c-897c-54be475b243d", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "09400136-3ac3-467a-88bb-9044f6cb337d", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "dea2040f-bce9-4a80-b931-4b7cb24325da", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        self.mutation_factor = 0.9 * (1.0 - self.evaluations / self.budget) + 0.5  # Adaptive mutation factor\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        if func(neighbor) < func(solution):  # Enhanced local search step\n            further_perturbation = np.random.normal(0, 0.02 * scaling_factor, self.dim)\n            better_neighbor = np.clip(neighbor + further_perturbation, self.lower_bound, self.upper_bound)\n            return better_neighbor if func(better_neighbor) < func(neighbor) else neighbor\n        return solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve convergence speed by introducing adaptive mutation factor and enhanced local search step.", "configspace": "", "generation": 52, "fitness": 0.2638628001409115, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.583357349036052, 0.5438126246800088, 0.5606730904745609, 0.6024265385422427, 0.13751989003464915, 0.6256447819114372, 0.5971228903640988, 0.17794271977069276, 0.5687923315663432, 0.4281811524073613, 9.999999999998899e-05, 0.060709031272060066, 0.05609842800686915, 0.05617804543823801, 0.05649591696224432, 0.4326214634101593, 0.04900477959101224, 0.050368323663851466, 0.2253576132784716, 0.1065988186876311, 0.11352242195928153, 0.08534518732850283, 0.13719067911430993, 0.1281712213254057, 0.08646297485741894, 0.1440658275562684, 0.11408333889473743, 0.10370322405335242, 0.06843277405191406, 0.09695772833580707, 0.09464704063952634, 0.10982537112878177, 0.10024653880475831, 0.0997981564107635, 0.08911249135485955, 0.09770277882159184, 0.9779661294030643, 0.9693114379079499, 0.9754833234475647, 0.9696115560077921, 0.9637392704233823, 0.9973825812678834, 0.9446611071744828, 0.9801571718973559, 0.9773022647490331, 0.38872975847104607, 0.057047111804668704, 0.31987559699061663, 0.3860553308394987, 0.32636435300950983, 0.129836773727816, 0.23868251966122278, 0.38330788542192396, 0.0704301753387423, 0.5509046057391842, 0.49985963355132257, 0.5625093295181164, 0.5382767768566918, 0.19208056325996037, 0.5077231898057792, 0.5488483962519954, 0.5934235991941061, 0.12549521786070017, 0.3070496169586385, 0.2677777341943004, 0.2778198364314537, 0.21476202717329695, 0.30960076158078687, 0.30583690770919314, 0.3208484657299028, 0.35752073444515586, 0.32741838009194446, 0.015476813882607354, 0.0631560683970609, 0.024505039310585786, 0.32816525317102696, 0.2706852820632445, 0.28273641085966084, 0.42354132897514296, 0.391514883292124, 0.32926723950132053, 0.3329379818091548, 0.2633136450248016, 0.3129002798451195, 9.999999999998899e-05, 0.0005989572407500976, 9.999999999998899e-05, 0.3019996386176197, 0.2888820656223646, 0.2519758830953158, 0.368703275382234, 0.4274914763297084, 0.46688224281714363, 0.4030535250201268, 0.38224261566819906, 0.43662116970692766, 0.4046651590283411, 0.11031810582309243, 0.11088232251687591, 0.0771695507866611, 0.0472115425484424, 0.14540163846674148, 0.09248177839139449, 0.15805119034841741, 0.11482442473568844, 0.1151462898331359, 0.0624162008394753, 0.0645479191654309, 0.19695221985790756, 0.2206211654491853, 0.2115771737668679, 0.23029648355403365, 0.2108344027429777, 0.21360512281269284, 0.26189459894101264, 0.21134278726716627, 0.21985135505517128, 0.531942488749557, 0.5298857284151139, 0.5144077588472682, 0.5032607185710043, 0.5434028135811483, 0.5303710900404305, 0.48772954024341675, 0.5230557433555176, 0.5093534837331067, 0.09547508228251267, 0.1047527044217742, 0.1479537055324095, 0.11964916381415991, 0.10446074723671084, 0.09422574276273099, 0.08694724512071172, 0.09971560043899486, 0.10605192516086115, 0.14205290818964056, 0.10820809706272172, 0.14090316484059984, 0.1297273099293148, 0.16231302166395378, 0.14538373659022397, 0.13671498204601162, 0.1889247800313023, 0.15262179289713984, 0.313989270118019, 0.2865058453279029, 0.29553894866606045, 0.3115094073677518, 0.31339753631058087, 0.2996688955407921, 0.29672609635766567, 0.3030745580016758, 0.1852677516430925, 0.21776641169318534, 0.2237377768174741, 0.20323068116286414, 0.21320591551183465, 0.23672241495558566, 0.18226208665265353, 0.25722986654804947, 0.2616055581518637, 0.22052214694724448, 0.1614043455637908, 0.18236435049042454, 0.16224821216612306, 0.16276539178912042, 0.1669995181034657, 0.21784128470932085, 0.17480471286251487, 0.1784014033294825, 0.1648124404017901, 0.17960764121011885, 0.17899975546075442, 0.18986076421480602, 0.1776342946581948, 0.18447686738185365, 0.17114470986396824, 0.1959941053336387, 0.2030451441370773, 0.412204656136983, 0.1592026108986283, 0.12886905793260972, 0.1682334884790333, 0.16371830791863518, 0.18297369115884365, 0.1318249619572065, 0.6787187552027725, 0.13393109977328677, 0.6780054217678251, 0.713587752626468, 0.16272065249561707, 0.1567239173179853, 0.17955298555264876, 0.15686375938609365, 0.152613118707996, 0.2007143429490137, 0.12190723714318519, 0.19553859519599048, 0.18932562447105417, 0.17381657319787214, 0.17311193170779082, 0.1708073373928899, 0.16686114108922523, 0.18830342902409514, 0.19638212108283093, 0.15781721308888497, 0.1867281992002532, 0.06222361818947142, 0.06938086276046529, 0.059349819736288945, 0.06806543810201182, 0.07515444225130263, 0.05899552677838782, 0.06618940528605688, 0.08703687044306929, 0.05413750383072924]}, "mutation_prompt": null}
{"id": "2f8e5502-03b0-4317-81b3-2675b7cbce02", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        decay_factor = 1 - (self.evaluations / self.budget)  # Adding decay strategy in mutation\n        mutant = population[a] + decay_factor * self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = self.crossover_rate * (1 + 0.3 * np.sin(np.pi * self.evaluations / self.budget))  # Adaptive crossover control\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Enhance exploration by integrating a decay strategy in mutation factor and introducing an adaptive crossover control.", "configspace": "", "generation": 53, "fitness": 0.3404438640331238, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.25.", "error": "", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.7017653533614241, 0.9061947391781385, 0.5479235936702676, 0.6369914000772684, 0.754413253111936, 0.8478090539430494, 0.9213237773511327, 0.7052427228260139, 0.7373984900526438, 0.5794448037833044, 0.6796728427476193, 0.19660071291697845, 0.4074660023846799, 0.12672748050492533, 0.4473854995185004, 0.49997953290423025, 0.7476722557690232, 0.4307594891076968, 0.13607476433294874, 0.11737153908914588, 0.1411588248687491, 0.1467040689137783, 0.12455722818462034, 0.11872612180932662, 0.14284365955621214, 0.14935475360216643, 0.14034593774299298, 0.11200618158665088, 0.12468079698435175, 0.10233906097763246, 0.10697731860962945, 0.11011470615594576, 0.10006411597283515, 0.13641668609834434, 0.1136544852653758, 0.12717857994916215, 0.7989250792318808, 0.9201108900847368, 0.964339893493491, 0.90093460288328, 0.8944181615047626, 0.9060239994358162, 0.9387857819787616, 0.9648144181463805, 0.7981179818152115, 0.3156738411803415, 0.1107251587479956, 0.3549747699946806, 0.2646885912992286, 0.17649583980553274, 0.1857264008448556, 0.23276435489851566, 0.1264989785896763, 0.39804021485120233, 0.3935798247776604, 0.34313830810731394, 0.8822468210693877, 0.9075230704197451, 0.9000365784588173, 0.9050813586842528, 0.3038466673164866, 0.23678550612391003, 0.9006290505020558, 0.1892352277088707, 0.31758792037982597, 0.17182041483657773, 0.21244740380943528, 0.17735339383448734, 0.639411275245285, 0.16377847866433626, 0.7763180823114502, 0.2586656731135366, 0.16173749770871604, 0.21150488687739366, 0.1799559444035218, 0.1401936258440195, 0.131952313740205, 0.19963839554369833, 0.1656199183031527, 0.19036407914281284, 0.1800284399078158, 0.15639250907932534, 0.4073055587879638, 0.2290069685691617, 0.21511397668611254, 0.3392448175833568, 9.999999999998899e-05, 9.999999999998899e-05, 0.14901093369677687, 0.24990411947494262, 0.31534249179614393, 0.18535102814966853, 0.47514565519963614, 0.20997660521688, 0.15437435491697216, 0.8353534192008081, 0.7361671513903052, 0.2078699289595859, 0.5022889281992622, 0.08318578711688673, 0.13489752766777618, 0.04786383290810625, 0.14615459314222212, 0.1735283868151497, 0.3394245047313973, 0.1642306681310447, 0.39910500456125864, 0.10619063319492483, 0.28968343786319006, 0.5727976269995039, 0.4770761037244995, 0.671962453396787, 0.15021922446723235, 0.21581020234335524, 0.6596634301315522, 0.32327987293548976, 0.1843163949510982, 0.741957749449289, 0.7792046365331871, 0.7851045675584281, 0.5161773728193628, 0.36095634845201796, 0.5165468753630542, 0.7372952523870142, 0.4113046381074651, 0.6996396164354268, 0.1392557380544931, 0.17098943780829434, 0.1284272919131243, 0.12717830063942237, 0.1323614703696352, 0.1442770047837143, 0.15098514845969635, 0.14722843901905258, 0.11799567560998003, 0.19426114410612183, 0.2028629101715329, 0.2124524744290761, 0.2038894516814077, 0.14622229049363034, 0.19268361451948235, 0.1812582016501818, 0.2609619201841058, 0.4318514322981619, 0.34802695811575945, 0.5627545734044292, 0.6334010029180409, 0.4703307527036261, 0.4409295232291094, 0.43558941128485107, 0.47229870689769426, 0.49209859863106964, 0.5473324025411439, 0.5466082285152567, 0.4226485229369149, 0.5469467345726676, 0.4404389596275551, 0.5320953608685173, 0.5254740683127648, 0.3218508228682355, 0.5879465837440334, 0.578621315949739, 0.21620777533926983, 0.21140316198996156, 0.20378804596310296, 0.22127348607475872, 0.24311336667405326, 0.20135208391036763, 0.21567623521519297, 0.2014730557468596, 0.1950285750956543, 0.20678058903849927, 0.207948633408783, 0.21774926854513765, 0.19459978341569817, 0.21760938284585363, 0.24952969583444262, 0.23574425284753042, 0.2192269440269653, 0.20009669694358234, 0.18611696772878983, 0.5158097024143056, 0.1868313633551747, 0.926985034253851, 0.19509483953741602, 0.19842143098371, 0.15553707027621366, 0.1687880039690023, 0.20269064088981348, 0.1683223715061506, 0.21031979457810834, 0.8944083743894622, 0.2132812230036456, 0.2101973800878365, 0.1685120039794782, 0.2126710263723447, 0.3243657280031138, 0.11292946298420325, 0.17767167525028182, 0.21849896018079484, 0.18049901116059974, 0.19628524640591327, 0.20567943962568547, 0.20268644369282052, 0.1961046881480848, 0.19004281516018662, 0.19881770461777315, 0.0834302371998683, 0.09129791003169374, 0.09052716960941376, 0.09233061520331698, 0.0908073270519153, 0.08404774331888676, 0.09287610021429504, 0.08589445794032402, 0.0844550241785963]}, "mutation_prompt": null}
{"id": "3b2f1860-498f-49d9-9583-56a74b3f12cd", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        # Adaptive mutation factor based on evaluations\n        adaptive_mutation_factor = 0.3 + 0.4 * (1 - np.sin(np.pi * self.evaluations / self.budget))\n        mutant = population[a] + adaptive_mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.1 * scaling_factor, self.dim)  # Increased perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive mutation and diversified local search to enhance exploration and convergence.", "configspace": "", "generation": 54, "fitness": 0.33842745834089133, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.25.", "error": "", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.7608939973406544, 0.7749469096275204, 0.5694635923521136, 0.5829205494206753, 0.8050089813485257, 0.7226092946554142, 0.6192144235872739, 0.8854236715919414, 0.7883047395112649, 0.29084339658551794, 0.26581964921763457, 9.999999999998899e-05, 0.5873679898092687, 0.30580505476297215, 0.7861904618738762, 0.48771270563069047, 0.7117859941278529, 0.3084604741419191, 0.17618194455634295, 0.10404951935711104, 0.16773480688295728, 0.10580094987506128, 0.15150124356330508, 0.119448274614669, 0.1744769312911203, 0.13182961060561937, 0.13491575935823408, 0.12504643230617474, 0.1331917801332977, 0.10219511529431125, 0.12812170397514877, 0.12789451848057143, 0.09812058478115071, 0.13643045662859787, 0.12223357670725932, 0.12649598144426455, 0.8595982185149551, 0.9578746615392103, 0.8559197241535018, 0.9635132327555642, 0.8675182800536656, 0.9808203285676518, 0.7235457065102301, 0.8415561875093093, 0.8613855677318496, 0.3138690739747172, 0.19142686296930878, 0.21753274095643182, 0.19666078997984981, 0.20161617130401177, 0.2471590046190989, 0.09679709029222072, 0.19233723691497107, 0.3369487374244534, 0.9030242066832413, 0.9160014750440246, 0.8763110978548175, 0.8922273048291213, 0.8988299551980389, 0.9021669016618648, 0.23538515252449455, 0.3569354534707603, 0.8992436676558682, 0.1453739824664091, 0.15717621407851656, 0.13076600090019752, 0.2520267826417154, 0.16601179833171154, 0.12614373639469778, 0.16939096207402127, 0.12905369936835143, 0.20464521590093077, 0.0722715074984519, 0.24620496836281325, 0.13985947846178792, 0.21178737900776645, 0.19593626641129136, 0.15402364991307005, 0.15394505160020577, 0.16468488018338323, 0.17821308892354848, 0.6888175390917282, 0.2532983471522309, 0.5657711387000566, 0.28098566985982976, 0.5143595862705437, 0.296176147615548, 0.3081519561144076, 0.5369921906158601, 0.3810145344071312, 0.6407049713200128, 0.5865686474724688, 0.5425470023554652, 0.6692962591877206, 0.5670437301710004, 0.8592892571176132, 0.6317293535017257, 0.4938589006669617, 0.7943357630411506, 0.2095835902401848, 0.17307168383039095, 0.21505660897096457, 0.1531214161003117, 0.3011390145060854, 0.2413679468178157, 0.17565354014763668, 0.20976047581972923, 0.19772347563624648, 0.32797592003990184, 0.41556589579687486, 0.31295448242026946, 0.04219788769061983, 0.19342361479377146, 0.3253217380155171, 0.25745977253189356, 0.28703793415658096, 0.2321565024005222, 0.687636751533539, 0.6568097784826216, 0.6349655264874776, 0.6978102014495674, 0.5592606689340338, 0.6137691125363194, 0.7473461539636832, 0.5792416826044269, 0.6293699449363439, 0.1297934510602461, 0.10240960582253844, 0.10913129410635425, 0.12200849877628717, 0.14174790966300732, 0.13754521535103392, 0.12084001814120326, 0.1592475142985963, 0.2902355131941349, 0.2340364718481166, 0.16752270007947956, 0.19353984046746397, 0.20966203408542616, 0.17266056920988215, 0.16889073294089652, 0.1512403173054525, 0.16349319723892586, 0.2623078431594411, 0.46324876476274157, 0.518669887491666, 0.351682417541908, 0.4247455282459226, 0.38854639355163756, 0.4239924055638623, 0.6341455427756149, 0.45009051694696245, 0.4000515197194462, 0.4199107024790243, 0.399275100440337, 0.316347243671679, 0.39608694115781695, 0.3280435982832237, 0.3663249226994407, 0.4324311445489223, 0.3509551970947009, 0.293797590398743, 0.2129332734668109, 0.19304060666931433, 0.19963140903641274, 0.2156856925422067, 0.1896043785973286, 0.20482507941350536, 0.21259009426655517, 0.19761319425310653, 0.21446677493856003, 0.1903860229095774, 0.26662074931864677, 0.2317188654275737, 0.19348927249231673, 0.19299452304199372, 0.301966781353733, 0.28369987924785267, 0.22021257994480314, 0.20488679199224247, 0.1625337420003341, 0.1513376651868581, 0.14846656836321726, 0.22848230572493, 0.19635542480735613, 0.19527735219794018, 0.18142569041957035, 0.2046755998793336, 0.19658197386186127, 0.9069812654393894, 0.2075214805897292, 0.16852666966777052, 0.20926351522395936, 0.19512695097614963, 0.15367888410821307, 0.2126277648880166, 0.2097156306241963, 0.21144896510825517, 0.21020971731052895, 0.18084657552533379, 0.17828266858480313, 0.1863508727257419, 0.19482218229684045, 0.18895955244047613, 0.18580927205303344, 0.18018809427463822, 0.2308308429593937, 0.09255654203550512, 0.10593500934715305, 0.08317371495608217, 0.088558091654527, 0.08753707470039773, 0.09295626744370422, 0.0839492846554849, 0.08699778075531872, 0.09133301165461583]}, "mutation_prompt": null}
{"id": "58e94be6-fc6e-488c-a38b-4326fd2782bf", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "e830f54e-fe80-4bdf-8c36-f85a02088a8a", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "ab87ea5c-82e4-4abe-833e-02d3ae02f9fb", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "57d55e8a-327c-4694-9df1-024dc20e95f4", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "2a0fb98e-48a1-4b6c-8f35-c59355a63869", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "bcbcfdd2-6516-4a1a-a739-be46258c70cb", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        diversity = np.std(population, axis=0).mean()  # Calculate population diversity\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  \n        cross_rate = cross_rate * (1 + 0.2 * diversity)  # Adapt crossover rate based on diversity\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                diversity = np.std(population, axis=0).mean()  # Calculate population diversity\n                self.mutation_factor = (0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))) * (1 + 0.2 * diversity)  # Adapt mutation factor\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Enhance exploration by integrating adaptive mutation and crossover rates based on diversity metrics.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'population' is not defined\").", "error": "NameError(\"name 'population' is not defined\")", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {}, "mutation_prompt": null}
{"id": "3a5c7f29-e3b6-4f9f-82d0-8c0a6d98dfe0", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "0224eb41-d299-40d1-a459-1263212b11a3", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "da34082a-d682-40c9-b585-1ae615494a65", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "35750992-0d6f-4e47-b25f-46e7be6bc257", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                diversity = np.std(population) / (self.upper_bound - self.lower_bound)\n                self.mutation_factor = 0.5 + 0.5 * (1 - diversity)  # Dynamic mutation factor based on diversity\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Enhance exploration by dynamically adjusting the population size and mutation factor based on diversity.", "configspace": "", "generation": 64, "fitness": 0.39698482224925363, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.24.", "error": "", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.7266375691667989, 0.7329803472935383, 0.715720116110018, 0.7871845218022857, 0.8168712611534554, 0.7879307075678756, 0.7588934200027351, 0.703698258282532, 0.7365429466406604, 0.5432134817562485, 0.543614412890085, 0.5372495485438039, 0.6023416310875391, 0.5926843791050334, 0.585286652920618, 0.6210061140652546, 0.6386479343242415, 0.6187664822474095, 0.14870087535562038, 0.4996723530741005, 0.12928495097718828, 0.10365226927126203, 0.104625262326703, 0.29659342532916555, 0.3027083511872096, 0.1136667591926076, 0.22433224858131484, 0.12370886981125184, 0.12840416487599193, 0.12220627943253204, 0.2757689541844517, 0.18886825740335245, 0.11708697707121407, 0.1147337437071928, 0.12773383892094337, 0.13218076997020967, 0.8592585378337361, 0.886151855101401, 0.7658350759564291, 0.9427831833263232, 0.8408990324467378, 0.9957790589575634, 0.9047526428066051, 0.8758430535614989, 0.9198927906451547, 0.4458787111465006, 0.5115789162053286, 0.46979514259896715, 0.5258818189065995, 0.46253517291718904, 0.5086995085611441, 0.518912665243119, 0.5257804196296443, 0.5403736165616184, 0.7348646141566899, 0.770290166337507, 0.7786856587059697, 0.7785763632747831, 0.7806733088265936, 0.7670091148649565, 0.7954905231973612, 0.7501594465048991, 0.6961576426410414, 0.4821627508487176, 0.3782900992360546, 0.5418878049140363, 0.5454021838837748, 0.5058265585543166, 0.3964445229039494, 0.40648918005111234, 0.4584722441697794, 0.38739870656280695, 0.5906100835082304, 0.04358483217437448, 0.2924902462135247, 0.4019668734856917, 0.37734502765243594, 0.3309690506811267, 0.374633442174538, 0.4991564969368296, 0.35576933096535646, 0.49170766282497613, 0.5566108843316271, 0.5447691215894869, 0.5449788258217809, 0.5355791608629323, 0.47525794734560833, 0.41249841101248175, 0.4437751540752406, 0.4471852859352262, 0.5935600848964742, 0.5897905463194318, 0.6493531793531853, 0.6239907104581504, 0.6608053537134737, 0.6480777185823424, 0.6831507434958806, 0.6496813683991183, 0.6228729880861981, 0.30105339510670914, 0.2091468475950492, 0.1166994268802437, 0.127335410261319, 0.3327780617543882, 0.32413117139988346, 0.15595512533740552, 0.13664070179415921, 0.19535850371236718, 0.3434670376793354, 0.39637640681925923, 0.3218714766855829, 0.36256107207094945, 0.4126559451408057, 0.41953063497740095, 0.35586614516549275, 0.42926958786194735, 0.3851519507777621, 0.6482048469359605, 0.672185770941859, 0.7362177641845635, 0.7438387240404166, 0.7441857131739966, 0.7246831502514839, 0.6745909685505903, 0.6920917568340077, 0.6976072840255954, 0.10949200562984918, 0.14205182464385657, 0.1115679863741339, 0.13102182479376623, 0.10064898427659896, 0.10027849662965438, 0.1299375137041654, 0.10217497167413836, 0.16022727903901246, 0.11004747831376549, 0.1553983103424924, 0.17123324470907542, 0.15876036614858535, 0.17785565007355686, 0.18993773399461344, 0.13582502368845584, 0.14602588576984576, 0.13570339716102042, 0.41328755360349334, 0.33382501380355867, 0.3538499280909073, 0.3473742814757509, 0.32694728833287257, 0.3578578344920602, 0.37974747979581613, 0.33636603148599253, 0.39200025131942506, 0.2841599199097943, 0.273233105145784, 0.283484852569973, 0.25963871159741514, 0.24728502995310586, 0.2911128267180231, 0.30048583698026765, 0.3199898968776591, 0.36132598654421755, 0.18261838192063584, 0.21195549253969614, 0.20364389789811144, 0.22684248510239802, 0.18557100207006993, 0.1849781894316036, 0.170284922352815, 0.17562276568185187, 0.20462564275443962, 0.22383002342609037, 0.4240436632667166, 0.21015116333927863, 0.2203983345506414, 0.20835434380996654, 0.2289419961823721, 0.23274123629305354, 0.2159649671085615, 0.39309785781917983, 0.8465333580599794, 0.15148419827160053, 0.153404950361531, 0.18278547926076827, 0.18586970656989843, 0.19594715845197364, 0.20556757941361847, 0.16873941107923107, 0.6514949919270212, 0.8169347711621604, 0.2104726390724656, 0.7945158081825056, 0.19833076300687358, 0.807363282260992, 0.8178893409818091, 0.20943172722236003, 0.21001600799419418, 0.21199464959295822, 0.18177967519239935, 0.1704812208216484, 0.18068829908480877, 0.16523968893725527, 0.17804172212454994, 0.17777943159964416, 0.1800387185608926, 0.19738073201199102, 0.25145882051991253, 0.07908730367127048, 0.06826423162044648, 0.09033290460813115, 0.08815352254393405, 0.10431105335138346, 0.0870545973164999, 0.08026511158082672, 0.07839777822367455, 0.0796291614607757]}, "mutation_prompt": null}
{"id": "29c6c8b6-ba39-4db0-9d81-6303ac558664", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.5 + 0.5 * (np.sin(3 * np.pi * self.evaluations / self.budget))  # Adaptive crossover rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            if self.evaluations > 0.8 * self.budget and np.std(fitness) < 0.01:  # Dynamic restart mechanism\n                population = self.initialize_population()  # Restart\n                fitness = np.array([func(ind) for ind in population])\n                self.evaluations += self.population_size\n\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Enhance convergence by employing an adaptive crossover rate and introducing a dynamic restart mechanism.", "configspace": "", "generation": 65, "fitness": 0.3716426507624413, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.28.", "error": "", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.9342980589877097, 0.9127951640925976, 0.8606935959144789, 0.831288821407941, 0.9200480718937012, 0.8909865354044652, 0.9277942002705405, 0.8373489390712693, 0.6314619869741012, 0.8539803629875781, 0.8598353269192611, 0.8523924484081828, 0.8651343138634473, 0.7806030070316154, 0.7962250463862601, 0.8890672246513698, 0.8426496107612732, 0.809374028258445, 0.10241043876964395, 0.18250308890752331, 0.7440648820797953, 0.18120509840434662, 0.09799830591128578, 0.13607727829638405, 0.17157294194636996, 0.19223897122952294, 0.18501482523729706, 0.06739545403313574, 0.14426205443211515, 0.13084155926350194, 0.1629572394035278, 0.1353022836686305, 0.1352587840892565, 0.16313374738695396, 0.16181750498507408, 0.12740248426214618, 0.9640408438842181, 0.97754837395922, 0.9807878495134257, 0.9674517209923152, 0.816705692067981, 0.9758821694190635, 0.9825450242047706, 0.9801546309317597, 0.9607043018061191, 0.5919407090442743, 0.35633389596088116, 0.5376124368053714, 0.5876251685269116, 0.572780632953866, 0.4786126319403332, 0.6474041840115532, 0.43147998814586375, 0.47550967381020537, 0.18143494154730821, 0.23154897589149082, 0.23356114198691336, 0.2838623658158055, 0.9520457835298552, 0.19891171882206204, 0.2449895590208937, 0.23875183653665066, 0.8701156936790546, 0.13358073916398605, 0.3846952201005388, 0.1697482467511916, 0.2239994134452712, 0.3085254240029057, 0.13559384165895283, 0.18430642539408615, 0.13478327108177546, 0.16760870155602692, 0.2718498306307443, 0.18052049799434067, 0.14565722554540805, 0.2545326850423939, 0.3396345596777369, 0.18576323556208063, 0.23953758756867372, 0.25643119103062195, 0.19030429424090012, 0.3859287217139301, 0.07646439753906764, 0.32946096973602457, 0.10001925660968791, 0.27867809987154946, 0.3054456660873094, 0.43929165206633514, 0.29271344486665307, 0.34541522503448785, 0.4952533433130255, 0.4998496405940457, 0.41484700875966896, 0.45089307249082544, 0.4453475694975011, 0.39513214506364935, 0.36662497836198704, 0.5167986363921969, 0.5074472001120884, 0.21258418936916668, 0.040941679906820405, 0.20431166966980274, 0.2703008909402459, 0.430483165906419, 0.08778511293429614, 0.239640062449887, 0.056473818005022935, 0.10445482036415121, 0.20217314136371933, 0.32671728249182974, 0.3060173570563194, 0.3370207474174989, 0.29951401974736824, 0.417633350731919, 0.3288134992383792, 0.2909448222016424, 0.20034486936297524, 0.8151066641538298, 0.804556895123661, 0.7812780369760006, 0.7459742298913179, 0.512188323633794, 0.6284972565960072, 0.7673293010563363, 0.7872265494143551, 0.8384101656828202, 0.12577679566965905, 0.11167476536464493, 0.176899717089138, 0.140588138649961, 0.1410411508461915, 0.10317750329003206, 0.10193900627225916, 0.1106037782451853, 0.12702358229578226, 0.21975510406267473, 0.1272808615545431, 0.2343884447552499, 0.15949866294901716, 0.17223275007003924, 0.14928512331842925, 0.16115415463898475, 0.1891135728744352, 0.13455840910434347, 0.5817312990400961, 0.51672582700551, 0.23701151892769778, 0.4967699907321911, 0.4765426125061427, 0.2933875297142422, 0.5056215184057347, 0.5715772284928653, 0.3078505735543007, 0.24154767665104293, 0.33247783598761815, 0.4094296686860387, 0.2707332846813305, 0.23793777261907811, 0.43245880612391496, 0.36500759345772016, 0.4071592953315425, 0.3862852732379294, 0.27718174323821043, 0.2101420291640247, 0.18263894913534018, 0.19471447754464388, 0.2539396159835684, 0.20909201403303956, 0.21669212095566603, 0.19569281890958357, 0.20858877413812615, 0.21112886429518885, 0.2000664797139895, 0.24578884180118554, 0.22373367885008244, 0.2533059585944576, 0.24995365007884374, 0.734137159095823, 0.24855865346136619, 0.24873138527385752, 0.21850102051986153, 0.12996763003951783, 0.15438527593568618, 0.17429717822608926, 0.1999165809553175, 0.9245980062604763, 0.16546930931444603, 0.16996076626486645, 0.16886988105087808, 0.9174759817161625, 0.16867915198235206, 0.8031612328859631, 0.21186201434884255, 0.20898653166832248, 0.21261435986599764, 0.12175008078258487, 0.9175503317194532, 0.8041061752379077, 0.18475893309762137, 0.17529630821663322, 0.1686085944435114, 0.17939495472581124, 0.166912142610807, 0.1800326489917481, 0.18885573297399216, 0.20834317531468927, 0.18866033078645472, 0.09186178770398168, 0.09770884441092653, 0.0822165171696646, 0.08212729438122857, 0.09986804943497662, 0.08889254510337163, 0.09642749911660808, 0.09359071212213, 0.08158997419370717]}, "mutation_prompt": null}
{"id": "ebfb0da1-4f29-414e-b3e3-dea3da89b55e", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        adaptive_mutation_factor = self.mutation_factor * (1 - (self.evaluations / self.budget))  # Adaptive mutation factor\n        mutant = population[a] + adaptive_mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            new_population = []\n            new_fitness = []\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    new_population.append(trial)\n                    new_fitness.append(trial_fitness)\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)\n                else:\n                    new_population.append(population[i])\n                    new_fitness.append(fitness[i])\n\n                if self.evaluations >= self.budget:\n                    break\n\n            population = np.array(new_population)  # Elitism: keep the best individuals\n            fitness = np.array(new_fitness)\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Enhance diversity by integrating adaptive mutation factor and elitism to improve exploration and convergence.", "configspace": "", "generation": 66, "fitness": 0.4214250472294557, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.28.", "error": "", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8462393563618187, 0.8206106601989901, 0.8360370386664557, 0.8336711208425832, 0.828280357147587, 0.8387384811434812, 0.8261508766882362, 0.823141319312964, 0.8365832383677004, 0.7299679023251429, 0.7231441876158684, 0.7105493722838517, 0.715307238702461, 0.7262901487791926, 0.7235772664137197, 0.7319079510562139, 0.7344219568162436, 0.7277950423102437, 0.12739464685530144, 0.13296367712048285, 0.1923668781081712, 0.1337153371732389, 0.11930850717217945, 0.15614147717670368, 0.13419530846207472, 0.13018070252281977, 0.12952402523841033, 0.18884085292901331, 0.13042722151102593, 0.14324170960019855, 0.15568898976518264, 0.11217801512935344, 0.15830713213474024, 0.1252170970041807, 0.1088348913643602, 0.12383293133567275, 0.811562121003035, 0.8177204007092584, 0.746239395401815, 0.935899613324467, 0.884498518096287, 0.9191700992068228, 0.8285826280311892, 0.9496909585252558, 0.9776785980521739, 0.4277258337228228, 0.34612260596086997, 0.3757815327749481, 0.3835504712461577, 0.3794523149019706, 0.3656430214885211, 0.47697358914745114, 0.3677152754225813, 0.395351164929334, 0.8153680991445564, 0.8374344241770968, 0.8261553678700232, 0.8287623920034752, 0.8670105001185593, 0.8163235846823947, 0.8405736380405989, 0.8075381947795482, 0.8497345738459952, 0.2260031264833221, 0.1424505994776888, 0.6790468545470775, 0.29270092262521474, 0.19254598488809427, 0.21993416712558045, 0.20919794466441477, 0.1954446767487069, 0.2130771132148549, 0.024989149197084393, 0.017712310423360744, 0.22441930531691712, 0.18749352526035523, 0.16947620476495906, 0.6914368397704262, 0.1943473809354428, 0.27220089357868094, 0.1508103555009549, 0.7017520750564463, 0.716260959860478, 0.7042100939590579, 0.6198996371286731, 0.5375482105095296, 0.7347684378412893, 0.694066957632692, 0.5776188123364502, 0.7154991692163976, 0.7493905520760913, 0.7744832638931048, 0.7724606820776604, 0.7714859510768299, 0.7598189645662043, 0.7696975929639679, 0.7717913755745608, 0.7678559789208477, 0.7471774164454874, 0.1616951479253943, 0.135847487336065, 0.2662251213065877, 0.3414787559394138, 0.2134770289763258, 0.3019644462534046, 0.16777777763810664, 0.280698627989278, 0.15118017299704334, 0.4696306260065458, 0.5257920743403668, 0.48201304053068594, 0.5548372990157027, 0.47507862098929066, 0.4767695951453941, 0.43781853099949153, 0.4546446231615462, 0.5545823567276185, 0.8151031118546943, 0.8020395398990214, 0.8080654382143082, 0.8062894748443803, 0.8265206559920554, 0.8057898403883307, 0.7986876084049249, 0.8110975608574612, 0.8049575493933804, 0.13396329916127947, 0.09776982668079859, 0.11470205249096233, 0.13488800560800884, 0.12431398986157127, 0.12619762177375538, 0.15142702586267753, 0.12598155205595563, 0.14128553520666587, 0.14575013252483682, 0.1740349541974474, 0.17146854207155104, 0.16198915231468658, 0.13662807698358315, 0.16257176349343738, 0.1805506138783679, 0.1429244493601134, 0.18863023941897994, 0.43907736962281274, 0.5430282151262005, 0.44244288057972303, 0.5042507423517976, 0.5617601269784288, 0.4684478061860099, 0.44905569256890465, 0.5060797685384312, 0.6045424979648093, 0.3541312780783519, 0.42665308763119825, 0.41395422088886114, 0.5681052866344425, 0.3422205726427796, 0.42733326799015947, 0.5799231274516368, 0.4112243611739085, 0.46028149468773405, 0.20024770483373044, 0.20334176334225973, 0.19876781466769278, 0.20069054827057242, 0.21265386015402732, 0.19000577614364933, 0.20721548850629357, 0.19065439295406994, 0.21241581225637274, 0.2056581972325685, 0.207709777070485, 0.21584059011195744, 0.21127016341389615, 0.21068450295725105, 0.4982788374854348, 0.19498743792581252, 0.20382457695101353, 0.19449910623348032, 0.1703340241729775, 0.17023589347740542, 0.16620459818015265, 0.166246959661015, 0.8556868996914486, 0.8229478776832888, 0.19350907564876452, 0.1935904979967461, 0.810943320744844, 0.20355969245166028, 0.16666896271479414, 0.2048094581953802, 0.2008611642074276, 0.8012684011155707, 0.857293221038062, 0.20936227748459668, 0.8348366999561252, 0.20971533853246316, 0.20888726590797402, 0.18162275526192784, 0.20384777406556465, 0.18149808757988684, 0.1781220380796249, 0.1689982470362067, 0.18170574871975143, 0.16804315402397518, 0.19211054485348233, 0.08794814223978742, 0.07390743371805197, 0.08406829452048115, 0.08850318974670623, 0.08639391817694575, 0.0733955277551055, 0.0837692854281693, 0.08539751839282095, 0.07301450152301692]}, "mutation_prompt": null}
{"id": "7737b2d7-0105-4ff7-bc74-500e3c23c4d1", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        adaptive_factor = 0.6 + 0.4 * np.random.rand()  # Adaptive mutation factor\n        mutant = population[a] + adaptive_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.6 + 0.4 * (1 - np.exp(-3 * (self.evaluations + 1) / self.budget))  # Time-varying\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Enhance exploration by introducing a time-varying crossover rate and adaptive control in mutation for improved diversity and convergence.", "configspace": "", "generation": 67, "fitness": 0.4246082265686596, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.28.", "error": "", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.9158267233199558, 0.9088650702575458, 0.9188699782598628, 0.9125301620444528, 0.9025768609341099, 0.9122337082501373, 0.9016249708478381, 0.922277402803171, 0.9060338120587792, 0.841958671743638, 0.8256300562668405, 0.8215589317440803, 0.8526281181679513, 0.8434904660172148, 0.8445835901930528, 0.8572734149089325, 0.841741525222919, 0.8085148497986381, 0.18821781323976317, 0.6711816387100233, 0.1633805074041197, 0.14151734718400621, 0.18792220121990344, 0.16083994865082918, 0.19205439922955625, 0.1394542417327559, 0.12459832020301087, 0.09670473697416782, 0.2559536332488327, 0.16105523065753347, 0.13633984204503302, 0.14264067055352792, 0.6947698837658431, 0.6957120589831649, 0.14720819577012156, 0.16201273442822062, 0.9882453122138193, 0.975751411500939, 0.9816749748698482, 0.9856782386767285, 0.9862894811516595, 0.9856972888900013, 0.9790343275538489, 0.9822435868821592, 0.963763979070179, 0.6922804260049091, 0.700686757641412, 0.716878428699981, 0.7474344385565652, 0.7180359276914223, 0.7252827783365442, 0.740205085933091, 0.72878489821893, 0.6194949811251236, 0.22875631937775165, 0.8369018859946269, 0.8229182588344444, 0.8915431157834791, 0.854925149505503, 0.8687009842338158, 0.23475300605337746, 0.7560373574432817, 0.8456780619701081, 0.5405115135988054, 0.5146955778235203, 0.5354374739211023, 0.5585856871477564, 0.2240413743085956, 0.6080506454459149, 0.46297011461844484, 0.49469896830922955, 0.5198433462993232, 0.5460988925670334, 0.5184765096881947, 0.47537818036668344, 0.50563542673267, 0.555506171877503, 0.4388498184010805, 0.48797644147811936, 0.4837064841865967, 0.5362717860611874, 0.37809636472099617, 0.3645475265354873, 0.41847639667612757, 0.3784075189206637, 0.3566059626057385, 0.37266347107629105, 0.3826246927601198, 0.36609092421577283, 0.34567680595224004, 0.4389377498721323, 0.40823736779763253, 0.4709782294626441, 0.4743833013397881, 0.4027685769510785, 0.4762450239829019, 0.5284499834862446, 0.5107821405548932, 0.07652951668571217, 0.10863718848223614, 0.10827816021650438, 0.05140019951313257, 0.37004611952944977, 0.29393197861839604, 0.1291067615010083, 0.10187446730109917, 0.17105989724319026, 0.10701653628396812, 0.35629596388141616, 0.351865016847013, 0.35524974684998156, 0.37784341117700904, 0.4276313881285744, 0.3834486422388068, 0.34507379526042736, 0.08547219941341122, 0.3229267799856549, 0.750248608236239, 0.7561710250145608, 0.7592681050157747, 0.7554217131933904, 0.7608234817325338, 0.7660544135149827, 0.7681530243173142, 0.7683877625337081, 0.7559118005464213, 0.1408666108091995, 0.11566779700366803, 0.20931028021760556, 0.14306754640938613, 0.11482846621974585, 0.13153839267026957, 0.1397847476402343, 0.13649029651042088, 0.1685121680956443, 0.3403022079454744, 0.14003771771989415, 0.16878928837878426, 0.20829024279292252, 0.14354067728228326, 0.2109524723276489, 0.16017776475026912, 0.11293821378631896, 0.22242440073325975, 0.5458489552117326, 0.5823240679091745, 0.5004649553649496, 0.5547180281310631, 0.4789013824291687, 0.36054348313884266, 0.5843598652613096, 0.5581280738425031, 0.5756872471582198, 0.42936795554258556, 0.36808764894560986, 0.26789945233070156, 0.320814157200463, 0.21996804144123006, 0.44515826014517024, 0.5053304631005846, 0.5048290001656991, 0.4024385258674671, 0.18430274052993822, 0.18945169331035594, 0.20778388654274127, 0.19304351971136358, 0.2072912170126694, 0.21402493008135481, 0.18449729067217402, 0.22354927261761537, 0.19180198789560243, 0.19524788671584403, 0.193858661835154, 0.21064018634734905, 0.2063891723492538, 0.20955242024234733, 0.22211636771865828, 0.24754256870676483, 0.25119496661404317, 0.21536955304394578, 0.20694632689519044, 0.16565824755836567, 0.11291529593820726, 0.9162969295024286, 0.19563140071908502, 0.15908844541695888, 0.21065650392158453, 0.16945844621897943, 0.1846764336896003, 0.15365903595706154, 0.16850225349405556, 0.7815164527374183, 0.21029791946330623, 0.730793014805306, 0.21065268438196016, 0.2101334795373676, 0.21277378167862926, 0.21232299542246302, 0.1682185646823433, 0.1906673560298815, 0.18488834947798582, 0.1755874287555773, 0.1674291221841686, 0.16669695718751232, 0.18359517831709704, 0.16472515802182552, 0.1759087206796126, 0.08221678373607733, 0.08382015558893796, 0.08310076625996676, 0.09711997605473877, 0.08261946468630665, 0.0844736664049871, 0.08106709951916924, 0.08208457375420508, 0.08683846166790787]}, "mutation_prompt": null}
{"id": "3f49d861-fca1-4984-a645-6fc64f18da6f", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        diversity = np.mean(np.std(population, axis=0))  # Calculate population diversity\n        self.mutation_factor = 0.5 + 0.3 * diversity / (self.upper_bound - self.lower_bound)  # Adaptive mutation\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        diversity = np.mean(np.std(np.array([target, mutant]), axis=0))\n        cross_rate = 0.7 + 0.3 * diversity / (self.upper_bound - self.lower_bound)  # Adaptive crossover\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive mutation and crossover rates based on population diversity to enhance convergence.", "configspace": "", "generation": 68, "fitness": 0.33064618241874233, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.9289978335797044, 0.9263503509722092, 0.538115786691884, 0.9329820516708471, 0.935253966542158, 0.9380364167460362, 0.9371562846519079, 0.938115841157615, 0.9366358782403541, 0.8377766101442822, 0.893402628754874, 0.05223214186099723, 0.9021926416696884, 0.8931033772747157, 0.8877100962747806, 0.7905351715838027, 0.8879197873379137, 0.08448301857172813, 0.15675587413509617, 0.18720199372128776, 0.18801014951437844, 0.1597401343429603, 0.16351609362127184, 0.8312043239954933, 0.15603227708392353, 0.14471241953666958, 0.18173267745458133, 0.26045114405301584, 0.14670720305186147, 0.18615036449671107, 0.1502935978308262, 0.11886938191570984, 0.09589315489002204, 0.14480574125793788, 0.1446712096474626, 0.1350787381730124, 0.9799618216572472, 0.960171675276264, 0.9912294896189091, 0.9657198470338875, 0.9702194289460309, 0.18056373935267145, 0.9726707052067403, 0.9689820787475986, 0.9535660005926322, 0.3467636719414581, 0.2970188065109258, 0.3064499150398615, 0.22085125678896123, 0.14547751583321766, 0.30584125910684434, 0.1616314224344464, 0.1996328331086482, 0.25023862826556786, 0.9050888123656153, 0.8922083311428475, 0.37990484682341863, 0.23397604985532305, 0.2783165581260787, 0.214587876340112, 0.9345383449770783, 0.8923169666010624, 0.1509281958768499, 0.15925858899284884, 0.1824886327646844, 0.13886937692637857, 0.1952628050450398, 0.13317043715641086, 0.20293541208840848, 0.15364039259722595, 0.20248053295403057, 0.14465766040322847, 0.13550130957805173, 0.1416125529795803, 0.16622632324098086, 0.14824592244660106, 0.21416226604577016, 0.18178376443820587, 0.16971000217405285, 0.17736155672038167, 0.1878653830824084, 0.18566596057287965, 9.999999999998899e-05, 0.2925145856666872, 0.0015292860286078014, 0.08854480018442279, 0.1899714109041193, 0.24030019963335914, 0.24503306627936894, 0.29604678758875, 0.2332767824317603, 0.3617931264316534, 0.37872869371992623, 0.28720068048621694, 0.18565794930714652, 0.2729153740701912, 0.4704207770263562, 0.5365085462281143, 0.3021222352305055, 0.06414262910910307, 0.06557986504650404, 0.31106791415974544, 0.08304639515912227, 0.12000943153424382, 0.3460012317285053, 0.19082344107478344, 0.2633644908631294, 9.999999999998899e-05, 0.09621107996578337, 0.10897836965926966, 0.27768350916351414, 0.3402743212443259, 0.1980258432214851, 0.14495268910974124, 0.15196826300424415, 0.42556047847713874, 0.12002673960833565, 0.47922654539726095, 0.5413502836151687, 0.5736175958243681, 0.4288730821078701, 0.6704940402762656, 0.6341189708373922, 0.6232545586286351, 0.6621553221410739, 0.571824709254961, 0.06450119758204742, 0.1553206722748528, 0.15609037434566764, 0.13504159254602277, 0.15368082330988087, 0.14134312866375953, 0.12371405310164996, 0.14206745968845647, 0.15125685604055283, 0.19004967293608843, 0.1534168817120446, 0.16305903913436037, 0.18310132887532915, 0.17124209573402172, 0.2606273167522626, 0.27970864250475247, 0.15989972962136012, 0.16783166801863902, 0.5569963062504089, 0.5534643002767751, 0.7928800546141374, 0.742180701884132, 0.657591031261038, 0.6548977927183255, 0.41751702239724253, 0.8640379771911255, 0.6701400817834133, 0.3959067409608842, 0.3328698681695532, 0.3318919223268473, 0.3251803076659636, 0.21931111535769332, 0.25593079692866283, 0.3053665222966081, 0.5401518778959697, 0.3772210469291081, 0.21625736171251875, 0.22651073473967076, 0.2202498339973875, 0.19791388040063307, 0.23231672261805802, 0.21711954352940044, 0.20784203212293473, 0.22897816110662106, 0.21182090039576718, 0.4583882102256789, 0.22660702352637452, 0.8868065547521231, 0.19620670603538737, 0.24606287402602323, 0.20790776522493215, 0.20961491667069854, 0.20338594351907557, 0.20806926834771833, 0.1863459080257891, 0.16385438966508103, 0.17180410042211747, 0.2001095493633971, 0.19819732223717623, 0.16693561812130553, 0.18563979030633349, 0.1691382345069764, 0.1783441334023229, 0.1517100299530484, 0.16772550653671114, 0.2690162725798543, 0.2100806781760436, 0.16829452968856762, 0.16798421582729117, 0.2104170014288802, 0.15490097648406576, 0.1122118188480048, 0.17967162055023456, 0.20123021659995177, 0.16365196963535567, 0.17947013976321868, 0.18287797512546244, 0.19196741667101946, 0.1986898353363986, 0.17299778093003948, 0.2083164717597209, 0.08996615364364369, 0.08809681232228972, 0.0953735235489066, 0.08871081343944132, 0.09391175457855894, 0.09394927078728743, 0.08511227630182472, 0.07898695335024963, 0.09836048817679166]}, "mutation_prompt": null}
{"id": "7ca36e4f-13dd-44d8-b33f-cf2e97f4b2ef", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            pop_std = np.std(population, axis=0)  # Calculate population diversity\n            diversity_factor = np.mean(pop_std) / 5.0  # Normalize by search space\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * diversity_factor  # Incorporate diversity\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive mutation weight based on population diversity to enhance exploration without losing exploitation efficiency.", "configspace": "", "generation": 69, "fitness": 0.3245031811464336, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.6304416595077861, 0.6505813182559066, 0.5173107066939497, 0.5659189246348507, 0.6260632206705632, 0.5139111274051753, 0.394434649852792, 0.9080100709695379, 0.6040551119189704, 0.1342981372988099, 0.7806639610229669, 0.3799129360906698, 0.8364412999741068, 0.27868540585354085, 0.14563487753046556, 0.09923624153199873, 0.20324553612244667, 0.26680615336822233, 0.12665445499061612, 0.1908559524916409, 0.12754507174911456, 0.12579004230292157, 0.13609373872278396, 0.16817472497328967, 0.12040945078320642, 0.13919041608566018, 0.13836466541906434, 0.09027730379644161, 0.13139740341082073, 0.13552429316925974, 0.11316218234105402, 0.11395150293256762, 0.12375987144463307, 0.106016870215217, 0.10889509610365278, 0.11552437952656658, 0.8822363514084652, 0.7961730306333877, 0.14788280570682144, 0.9033223980617359, 0.691465479829436, 0.9681672611728747, 0.6312909990302111, 0.854175515270792, 0.7677465866777964, 0.08207797780628456, 0.2125562721823535, 0.22226933870992027, 0.08446343139725865, 0.142827547637024, 0.2571706837157762, 0.12028490026855265, 0.19151026186746234, 0.2663992275233862, 0.9111132241872628, 0.9020800493827461, 0.9233104709204645, 0.9227132613509331, 0.8927841896168471, 0.26184649758026757, 0.9184897659472717, 0.9092464883397113, 0.36149771769650185, 0.1340799434438371, 0.14442857646187424, 0.12895560629518332, 0.13982072153266945, 0.1334308909699461, 0.2570904266716847, 0.13059090636509518, 0.17348781508355438, 0.14305126675346524, 0.2359959224190924, 0.02684603263523455, 0.046420166141638575, 0.16969835933631872, 0.24159039466671461, 0.18786785301187725, 0.1307276130109507, 0.1414136092610726, 0.2741813351567156, 0.23087177621482668, 0.2849675041260049, 0.6971279660066971, 0.020291217149608576, 0.4234877052694611, 0.3254309297553687, 0.19901717783856676, 0.09658040648915123, 0.10795299880218867, 0.43012567829074855, 0.16294303641724472, 0.4952017218954986, 0.04551074225332996, 0.30686965859822135, 0.8681770078078528, 0.7108739719180058, 0.36498977774544894, 0.7225615865829103, 0.030141707781216387, 0.1556344441853118, 0.21841547872168066, 0.27879089926150147, 0.2904264972766023, 0.25201682504599277, 0.40798603688114077, 0.2583672727253664, 0.004107573961576572, 0.287910930880537, 0.21549616153497209, 0.36336871335443544, 0.014652977375842036, 0.13617858078572131, 0.21431149073137978, 0.34112658133358953, 0.33332495889379066, 0.29837703422290174, 0.5277648671164019, 0.4862261445222712, 0.9100870666642361, 0.7323013928629432, 0.7097688899030427, 0.3407804522508491, 0.47950334452991095, 0.5037681202968568, 0.7022451468748437, 0.11122494053882603, 0.22064357872525686, 0.14999860188073888, 0.16458182775854457, 0.13807854547657084, 0.20656034027933723, 0.12615786416052854, 0.15158326951457535, 0.13297244916688145, 0.17951348455017124, 0.16725782334358086, 0.17670893519311226, 0.2830428771068163, 0.1611226717918971, 0.21249064254066163, 0.22199443321727408, 0.18019037452833475, 0.15953369333628475, 0.7355543079159402, 0.603935240054571, 0.5596040742462007, 0.4394655036151359, 0.352489610698397, 0.5852122705564284, 0.5223320466699916, 0.45829927237022083, 0.42664073671818337, 0.4008420038451802, 0.4093561549291054, 0.6897551227761476, 0.30916694504702324, 0.33011641984269313, 0.4060060238007519, 0.47100100459048155, 0.4027406131848411, 0.48429915912455357, 0.2088782696004461, 0.22798967407923687, 0.24133740876893572, 0.19915797360572085, 0.20820228513036154, 0.1914029069838391, 0.21089033918485156, 0.23122707672132803, 0.21461710350869456, 0.23402439094729943, 0.2147704923628999, 0.18824820420347743, 0.21839417624574464, 0.24196330757081985, 0.1921213604885651, 0.19724188046043412, 0.2366304570857708, 0.21554654261662198, 0.18425003019852626, 0.20742467058890168, 0.7174757871287881, 0.34505794281830426, 0.4462088368616254, 0.1870835306762748, 0.6988920005559552, 0.16446675158861412, 0.9076156120905925, 0.08265396036188355, 0.2084341757569308, 0.8656070013339622, 0.9154835055591254, 0.36787318308444206, 0.1660977796462153, 0.20890289224136915, 0.21208257299596112, 0.19761267599110843, 0.23110538436750427, 0.17637462034310247, 0.19171762275366566, 0.15210223242559007, 0.17157139527072918, 0.1894903411287363, 0.21296040721717113, 0.19167272681292957, 0.18653292654215625, 0.0860474699777567, 0.08452470085362707, 0.09736638292071764, 0.08943678932705101, 0.09345123146805179, 0.08727218298486072, 0.093139872837534, 0.08522927226824284, 0.088273560555585]}, "mutation_prompt": null}
{"id": "7816291f-2bf4-4aa5-8b7a-af2696d828d7", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "7eab4b52-e148-4e01-93f9-2d1ae6a62d92", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "b05615e0-6046-4685-b59e-fa51cc1f3f0b", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        fitness_diversity = np.std(fitness) / (np.mean(fitness) + 1e-9)  # Calculate fitness diversity\n        cross_rate = 0.7 + 0.2 * fitness_diversity  # Adaptive cross_rate based on fitness diversity\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (np.std(fitness) / (np.mean(fitness) + 1e-9))  # Adaptive mutation_factor\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive mutation and crossover rates based on fitness diversity to improve exploration and convergence balance.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'fitness' is not defined\").", "error": "NameError(\"name 'fitness' is not defined\")", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {}, "mutation_prompt": null}
{"id": "96705763-4b84-4ee4-a50b-4fc8117f94ad", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        fitness_var = np.std([func(ind) for ind in self.initialize_population()])  # Added fitness variation\n        scaling_factor = (self.budget - self.evaluations) / self.budget  \n        perturbation = np.random.normal(0, 0.05 * scaling_factor * (1 + fitness_var), self.dim)  # Adjusted perturbation\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * np.std(fitness) / np.ptp(fitness)))  # Adjusted mutation factor\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Enhance adaptability by dynamically adjusting mutation factor and perturbation range based on fitness variance over time.", "configspace": "", "generation": 73, "fitness": 0.41201679886456266, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.7531995546229492, 0.7875220849878964, 0.7985222789764714, 0.7932116668136947, 0.8222887549477556, 0.7736942236446668, 0.7846511600624516, 0.7682238279466608, 0.7898897190280798, 0.6143178183425195, 0.6943679329801796, 0.6101350848297968, 0.6280197762739697, 0.670902750677721, 0.6895616431138379, 0.6690204433977116, 0.7145213824469732, 0.6375899748687309, 0.08796856329486291, 0.12751489814753092, 0.13725027358514308, 0.10833963127135249, 0.12271223280641974, 0.12210547148089423, 0.12092950020793747, 0.11929837399288368, 0.11689028913717558, 0.13239229229893223, 0.12767132016681204, 0.11567928960213736, 0.1250175511252415, 0.1324155631348085, 0.12335936511734957, 0.10709346138949771, 0.1003370775653244, 0.08647350347631177, 0.9397554087806554, 0.7405391381774055, 0.6030946187142397, 0.7336527220440936, 0.6288569973596657, 0.9446068376196597, 0.7946346039239962, 0.9047751587821934, 0.9530093765063973, 0.5476823370323938, 0.492687417596391, 0.43795122158722266, 0.47752576886282294, 0.15052690904129717, 0.5227181877771204, 0.5717302504982222, 0.520431511323018, 0.5586567442386144, 0.8194397083257203, 0.7923642289449611, 0.8559494169159669, 0.8330749029239725, 0.8322832372527479, 0.8002321506862482, 0.8112212926102806, 0.8257421865296865, 0.8366470653386451, 0.46121450656960117, 0.44644751015903916, 0.5149085970071527, 0.5038506033816721, 0.2526031778172022, 0.30853822699676003, 0.3517759709001135, 0.23159668919588017, 0.4266621636334528, 0.11909994643919541, 0.4599901384413585, 0.009919762808307087, 0.4434415166747553, 0.5983468795800995, 0.54461275896717, 0.27427394627376456, 0.3295930013676587, 0.45893618879352316, 0.5778129254125395, 0.6278740198180469, 0.6228998780548656, 0.6118208481132917, 0.6350127546712818, 0.6082473385436091, 0.6116610042270061, 0.6465980540036589, 0.6439650235793577, 0.7285722713741913, 0.7212530388503031, 0.7266433362068814, 0.738799189536165, 0.6770695893953413, 0.6902793356804586, 0.7229239404472769, 0.7125928078138403, 0.7278879922747781, 0.07975979156821, 0.28122694196580456, 0.2900555638876722, 0.32583849374439, 0.18145517218682505, 0.207053617264495, 0.3074573395438138, 0.3300373581326972, 0.14975175073577252, 0.44446434530055523, 0.4672709122380472, 0.394412175158797, 0.4493834190613223, 0.40677869994424665, 0.4969352547526077, 0.40521707068520096, 0.479920852101393, 0.46058783348826515, 0.7841013285784304, 0.760507753300067, 0.7650045360143527, 0.7576414920929773, 0.7271352929441159, 0.768947012609998, 0.7709281436350857, 0.7322338263555103, 0.7752506135873767, 0.08507053739688508, 0.09282618715975588, 0.10127821623798261, 0.11080204882966105, 0.11857355472171782, 0.10341622985184673, 0.1008777838919821, 0.11611134522059818, 0.13371731125909114, 0.23549017982187337, 0.15851606408694385, 0.1478738075470537, 0.17533884720501158, 0.1368155054541208, 0.16229354913897875, 0.1774874297358836, 0.21170475737121686, 0.14369659562269266, 0.4780591936312153, 0.462116536216872, 0.47521013712554183, 0.4408659412514142, 0.4208227479429544, 0.46533156831442435, 0.4715460892951404, 0.48553571427081355, 0.448487886980783, 0.3510889975593735, 0.4070640379931937, 0.35928513068240897, 0.41922635815011133, 0.4431325411895527, 0.368426038062745, 0.3844594974710399, 0.3588496918345996, 0.23025751141303985, 0.18062201146937584, 0.1978833458617527, 0.18142836091435388, 0.20490058455683968, 0.21432979381330297, 0.20641328052924113, 0.21859519237957092, 0.20506251136242282, 0.1902171142774547, 0.19330044047534067, 0.2243428417277421, 0.21825592773165126, 0.49829371907786213, 0.22804924058040232, 0.20664471221084646, 0.22411329673014702, 0.41695757399626654, 0.2035157882621843, 0.1755512462293376, 0.19969800790198755, 0.16368643722217435, 0.7714685180979861, 0.1921838258904821, 0.8293204170199392, 0.18223018541447933, 0.1965024238817168, 0.748928269983368, 0.8831962066149397, 0.2013844184176834, 0.20501868870433804, 0.19919967450365061, 0.20047870982593263, 0.8371728018248147, 0.20234239928673148, 0.2098322342519271, 0.21205949306695915, 0.2143376085574198, 0.17544180432319767, 0.178466962887895, 0.1710069062447619, 0.1800395639426544, 0.17092039085436883, 0.20349511442532053, 0.17518127014392593, 0.17760419325583188, 0.08417514871160381, 0.0820017585013022, 0.08506794586067845, 0.08481447796189401, 0.08165602545459627, 0.09141846297708922, 0.09146690029605264, 0.06449989390383071, 0.06923920336543543]}, "mutation_prompt": null}
{"id": "55ad2e17-7106-43d2-8fd6-8e5ae71616ca", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        # Adaptive mutation factor\n        self.mutation_factor = 0.4 + 0.3 * (1 - np.exp(-4 * self.evaluations / self.budget))\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        # Adaptive crossover rate\n        cross_rate = 0.6 + 0.4 * np.exp(-4 * (self.evaluations / self.budget))\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive mutation and crossover strategies to enhance exploration and exploitation balance.", "configspace": "", "generation": 74, "fitness": 0.3251662952902353, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.9220150877412129, 0.9224622735337098, 0.9141520008260201, 0.3103008497385924, 0.8940279282073966, 0.9141742124774859, 0.9195451140402847, 0.9212360466580602, 0.36278353511510764, 0.15105265268760593, 0.8730953204827898, 0.8573036260965153, 0.7344606706381801, 0.07537269904279142, 9.999999999998899e-05, 9.999999999998899e-05, 0.8707395133878673, 9.999999999998899e-05, 0.23946397818454657, 0.15126084652548977, 0.1601940493522468, 0.7070430783886607, 0.17441982529976807, 0.12397814920702255, 0.1776932953035486, 0.15967368265423887, 0.13869541645264438, 0.10983704515542536, 0.11994034119300756, 0.15219115301119257, 0.11459378421479449, 0.11420162386381583, 0.1318764760840031, 0.13974757226790158, 0.1414101890044558, 0.06525688866596724, 0.9290554300933397, 0.9205533587268173, 0.919986948185561, 0.9177710656328197, 0.21046977101882192, 0.9096145024412995, 0.07829063182887352, 0.9219660078931435, 0.8949272552408485, 0.1172274002221122, 0.5388971919668626, 0.508125737718714, 0.34618549814949495, 0.5110032261140225, 0.3265218128143781, 0.18689892557326837, 0.17620452748171644, 0.11960158910420327, 0.9236577082666503, 0.2399267256262273, 0.22755896677311094, 0.2156522120403418, 0.9117268095098497, 0.8969076710427264, 0.36082991254383034, 0.24040788116330458, 0.873344602988912, 0.2713680207194762, 0.11805584317822271, 0.1506139633534458, 0.15201182507285416, 0.14393585018328392, 0.43022368936859257, 0.23913843386312894, 0.1837946302671346, 0.1571442496885055, 0.5998891046797254, 0.13431348706357926, 0.1238508300451453, 0.14893691842817403, 0.16469978190812962, 0.14287270390388074, 0.2579795575654651, 0.2047920457547343, 0.14871871043656282, 0.45848519274756094, 0.082314749993178, 0.34791351096014045, 0.18508670882021616, 0.07207984209223472, 0.004635951189735921, 0.15980786579785677, 0.17402460106303896, 0.42481255761785197, 0.30024095429355635, 0.24937559458565461, 0.22763827908390843, 0.21475996565857236, 0.20690304784371039, 0.231271223107809, 0.17215483219503336, 0.29753700902661184, 0.19844123381838086, 0.19062482629093158, 0.07430543772152975, 0.11260274114593527, 0.12845917639115834, 0.21814610881348484, 0.08688334078097038, 0.12789128571521557, 0.15940611589046405, 9.999999999998899e-05, 0.3183598229102145, 0.33257805171490873, 0.34706107170465417, 0.09035828137677704, 0.336526274265069, 0.024035215095386198, 0.27708775593354973, 0.24381840052473547, 0.29314561617128543, 0.7778927019052123, 0.3835910799136404, 0.5919126408566198, 0.7848632018921256, 0.6977298057666493, 0.5521598537178706, 0.7670022193373446, 0.5621187628170241, 0.6224670985496914, 0.17184003367235856, 0.14816363986973102, 0.1478959717207048, 0.1494780454850364, 0.11496992719212262, 0.17661712968922927, 0.11783420956258628, 0.13138488962456396, 0.13177342934049008, 0.13939360936748313, 0.22210402982226674, 0.14688945734934, 0.21338008683925114, 0.2840830165926156, 0.25925919843724354, 0.20410255859154236, 0.3645842490337796, 0.14529315286435363, 0.5316270831866372, 0.5969862546241178, 0.6171940057514101, 0.7884005633872463, 0.750592384071569, 0.5201067073834222, 0.7410404715165961, 0.7956693560642203, 0.7840774754722043, 0.14118191811951186, 0.42886272639408785, 0.48715860476342543, 0.4927595327949832, 0.29638765974157155, 0.28374350100781354, 0.4689479276291044, 0.47522286936774905, 0.28501983281308196, 0.2037599001459428, 0.20680095639942797, 0.21322601958485699, 0.20812988604700533, 0.2140251123713267, 0.20391342759230624, 0.21477754303690322, 0.18920755886792662, 0.20807142043605553, 0.22177816750557955, 0.24662757615169106, 0.24470249520087906, 0.22663578651911243, 0.24986472588838815, 0.18937318235301914, 0.20581865297850344, 0.22340574037352023, 0.20781695979364567, 0.8813794184897965, 0.1877376979419958, 0.4809741168136431, 0.940395184422245, 0.17798591443508172, 0.19980382677287156, 0.16937425816879603, 0.7792873364369698, 0.16281875558622216, 0.38418577317679015, 0.21103632342697842, 0.4117899137701827, 0.2111918635215433, 0.16626041643122058, 0.16849455956561776, 0.21348715008642494, 0.11225387576603174, 0.1566339351662296, 0.17408149838964326, 0.17547774524439863, 0.18061992135842375, 0.17234846826209393, 0.17252807699774253, 0.2037555059246815, 0.19213107508571747, 0.2177292791367157, 0.19180864412131182, 0.08869436366886763, 0.09386847773227724, 0.08246019972152241, 0.1121751751120551, 0.08111146458141194, 0.10070431182361228, 0.08626071716807748, 0.09576033575004916, 0.09859163400289073]}, "mutation_prompt": null}
{"id": "b3ae4820-112e-4406-9394-f639f8640bc2", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            # Adaptively adjust mutation factor based on diversity\n            population_std = np.std(population, axis=0).mean()\n            self.mutation_factor = 0.5 + 0.5 * (population_std / (self.upper_bound - self.lower_bound))\n\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Enhance exploration by incorporating adaptive mutation factor based on population diversity for improved convergence.", "configspace": "", "generation": 75, "fitness": 0.3034914329509441, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.43170164267831357, 0.5145407827543902, 0.6696853038522903, 0.4767085439300913, 0.7408405639418811, 0.4654791341141328, 0.9049092828923487, 0.6021316878014296, 0.544853876141108, 0.3735951363947383, 0.13240097775090776, 9.999999999998899e-05, 0.13957013862325562, 0.29191571948509876, 0.7504637541425169, 0.3928742116466506, 0.8357222630665042, 0.14482141847661334, 0.13306060052591873, 0.12499698145658822, 0.2627285592182155, 0.14161983500969055, 0.13453530840993588, 0.1527555293926336, 0.12965575814786556, 0.12824381467844503, 0.12606931554802325, 0.1050399108594886, 0.07963895318247793, 0.11294735525153377, 0.1275450489379848, 0.09986082655049067, 0.10035668434041778, 0.1070689350559787, 0.0846195575390799, 0.13610439391450568, 0.8172101326416902, 0.0786146831804424, 0.07424384549955343, 0.25763952314864014, 0.7978917573664429, 0.9769836367363988, 0.8201356190984433, 0.6818033988012207, 0.6827047951794839, 0.09573607902924319, 0.15702068390456603, 0.1928552496929341, 0.15519131969929545, 0.19248245838688482, 0.21510090251345682, 0.18630440207284826, 0.2225621625136227, 0.12646298826924518, 0.9169996642198046, 0.3893753841727424, 0.9268091534368157, 0.22033059134437238, 0.9107452896110796, 0.1928266453344708, 0.8770378461176465, 0.23360244808256025, 0.9184354890688098, 0.13632702599062518, 0.14579959312553348, 0.15965310757217555, 0.14328231565134142, 0.18770972711968503, 0.24043016543536988, 0.14383874023310894, 0.1400644818465513, 0.18537858588189093, 0.15044063449735257, 0.13048471437078502, 0.12089739041516057, 0.1878026500415293, 0.13124847081107782, 0.8701109176755191, 0.20454789424599307, 0.13440700747950596, 0.13584925538388593, 0.497797514951024, 0.07989510460064286, 0.08272922061913379, 0.2108165720503774, 0.12011911117156127, 0.29348712080194284, 0.24047765569180268, 0.7212361585906386, 0.21335186478425938, 0.4357509460800595, 0.5713122708363093, 0.6793964035859972, 0.7348855093147916, 0.21165997488479016, 0.2928446085303176, 0.8592320849694038, 0.3239348235254471, 0.8494204157735658, 0.07744249859597363, 0.25146926062197195, 0.16217068505064347, 0.2011358922604748, 0.18502062389758978, 0.15571799123984253, 0.12770677850017687, 0.12940011802451268, 0.08855897473548613, 0.12499798493196979, 0.39159519774138507, 0.1279779508759521, 0.12582618027249448, 0.2112099448033843, 0.12395305563651127, 0.47324038048452644, 0.13666621909369148, 0.242792507661163, 0.4189449129401118, 0.6532717524585603, 0.5760775085784737, 0.364984759643905, 0.889086234395876, 0.4896645067408051, 0.5916346498679065, 0.7391270752049307, 0.4780222071068798, 0.10496379746609241, 0.13181018588435456, 0.13847486499555695, 0.1279992709986293, 0.14150329166689424, 0.15720818261952185, 0.12166789670490985, 0.14526712189649038, 0.10021368837872635, 0.16197186996267432, 0.19712410153782733, 0.1563039256147264, 0.12053853633640332, 0.2234748011762786, 0.1329535783495963, 0.14069333485635993, 0.24127852905366676, 0.13763993092720828, 0.2358545059580237, 0.5038454025446382, 0.5270655744892527, 0.648682223204551, 0.5334015718925317, 0.4175990413031414, 0.5089100204486762, 0.4959363640772676, 0.36054598006081195, 0.3229576556099607, 0.27318311685201857, 0.3347617896610573, 0.6629112299877717, 0.45387904953528624, 0.4730970174586133, 0.3665471031699098, 0.5246424864415015, 0.41927680752927576, 0.19409504933018218, 0.2546477015328723, 0.19279240406947074, 0.2155957641593954, 0.18189591337348798, 0.22352916954170232, 0.22397050203529434, 0.18978720593655574, 0.22480278829003997, 0.21236310607767084, 0.5289757461490221, 0.2054326987818037, 0.24408367346526605, 0.24323477066724708, 0.24209595894709512, 0.19478674675343433, 0.2144981954168721, 0.20030322014434965, 0.1846522149408294, 0.18487842649698683, 0.1856022877085658, 0.9057677544648843, 0.16815564559106788, 0.8627363783009123, 0.1842946485565189, 0.7616282745753553, 0.1978752388769328, 0.2738483196331969, 0.20331462705141912, 0.20291057921545252, 0.20888403495743824, 0.3423193515686742, 0.13043025627905713, 0.21207393024473453, 0.210600020948156, 0.20867718243583377, 0.17174262836850107, 0.17335008184544531, 0.18155625589885938, 0.18925648994741073, 0.21630096805274768, 0.18152691260224552, 0.19623470514441355, 0.1918850089882359, 0.1967291350685879, 0.08211004150674106, 0.08632574504627388, 0.09021234612155271, 0.08144153678828425, 0.0885552530019047, 0.08260921284351241, 0.08497002898298689, 0.09216923919927356, 0.0868664480903566]}, "mutation_prompt": null}
{"id": "cd91b515-8ed6-4c34-92c0-7ef53d20c8e4", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "a8069abb-06fa-4313-a8c1-c6cb8b4b44db", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Improve exploitation by introducing a dynamic scaling factor in perturbation during local search for better convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8904132469016421, 0.8815364048800497, 0.8823691306355135, 0.8877536844514841, 0.8143435165714068, 0.7473844843003102, 0.7779114798488267, 0.883155638048464, 0.8701948483479637, 0.6241265437661375, 0.7976560737619899, 0.7760804004988244, 0.7228374991134872, 0.7961401282207975, 0.780531855102394, 0.6275840484248474, 0.7895055419406689, 0.790213917578314, 0.15473332510947835, 0.13159016900320253, 0.137074051826661, 0.14587006514240441, 0.12470394246679628, 0.28183569213752435, 0.13069566573596292, 0.10930383442823588, 0.11981683125355791, 0.08715977036508138, 0.128159830691856, 0.06344824974546448, 0.13050145576618866, 0.11645791115394644, 0.1130097292572747, 0.1186938452775066, 0.11697719504151283, 0.1135849854409291, 0.805972991838078, 0.8113540076421359, 0.7979377791421505, 0.8000108924719886, 0.7739805604569483, 0.974945973198535, 0.8044043411418211, 0.8081738889460972, 0.9338727366167964, 0.5390880323764637, 0.05943129877936004, 0.5529675736009498, 0.5633587214070543, 0.6578465332957666, 0.5016036649707443, 0.5398515134017374, 0.6842345899303011, 0.5857618120168463, 0.9245426282080719, 0.9126681280729657, 0.22130447374329132, 0.8641025080489757, 0.9116392033791484, 0.902441636800741, 0.9105674293739424, 0.9056851852925336, 0.8967375499323679, 0.614152795133241, 0.7030493168942558, 0.6573580994759278, 0.31543340447408297, 0.4102810410430433, 0.36968145595570834, 0.6623477978309665, 0.5109522505426098, 0.12885711521637278, 0.7693002057169911, 0.6976995400652541, 0.5875662504747236, 0.7283344543397572, 0.638695795244439, 0.48344970035981094, 0.5457361970909724, 0.3921022439419257, 0.48640855231555746, 0.78515790170497, 0.4733682990903221, 0.4000939239074143, 0.7805679150864475, 0.7586641689737796, 0.8061700483754601, 0.8048235111830255, 0.7376898601920645, 0.7687385019335203, 0.722538654456522, 0.8448017533280828, 0.6250588159764914, 0.5911681323479723, 0.6775351716092132, 0.4725725352080884, 0.8490561653047483, 0.6961190444105374, 0.786825668347406, 0.13001613423181713, 0.5623812138798201, 0.36920556438256025, 0.3404820981599246, 0.6539169869353094, 0.5000524805524673, 0.17916150236668094, 0.32947029967409946, 0.26469924470032524, 0.640744154870527, 0.6885549556565965, 0.6358695013719462, 0.19349934601257235, 0.613217169079875, 0.672553803990693, 0.6484144230001548, 0.684547371528673, 0.6448172202944821, 0.8723613949075585, 0.8765972241159928, 0.8552910783475091, 0.8337325002904609, 0.7791173712534002, 0.8657949613690308, 0.8731566548530176, 0.7256107429023015, 0.8782749132132998, 0.1464387057837977, 0.10519867337720024, 0.11253224591298217, 0.137923383758493, 0.1257026397619898, 0.13600759320274391, 0.12477986634033167, 0.12961676164922298, 0.10278767919276455, 0.17148044847277666, 0.15460038572186985, 0.18386169015017528, 0.28797963302515406, 0.5533900565471483, 0.23150380573941765, 0.20277552364846207, 0.13927802219993968, 0.17634424104499413, 0.578233949193653, 0.573643883195237, 0.5321622229425826, 0.5410487946410145, 0.5233122781362087, 0.48277574848844995, 0.48834927673292106, 0.6212549474154618, 0.5795173442110364, 0.3554673587424624, 0.4333022688591094, 0.46340093220374345, 0.4229914115631165, 0.2702578346992971, 0.4150571562853702, 0.4700554662320151, 0.5107060370003907, 0.4432148527986778, 0.22088566193015513, 0.21775018815969016, 0.2630803443915918, 0.20148386614230807, 0.19784038900050527, 0.21256391797839325, 0.2132246804373702, 0.28531944141328736, 0.18271908394985992, 0.22339848552799835, 0.2149098132409788, 0.2299254756537441, 0.20812304051338548, 0.20931664711616504, 0.2058168724738152, 0.7275784290127901, 0.5364578972678153, 0.7219246121172979, 0.8290245918118846, 0.14315977807502167, 0.14639233433386112, 0.9124216056011011, 0.1964330681518941, 0.19719518668625813, 0.1676802541388852, 0.19929602183364248, 0.20863172003276687, 0.08241244028862127, 0.21091482004473705, 0.2098758938512154, 0.16540976186402423, 0.207805810778801, 0.84212047543889, 0.21390315364590562, 0.12595798988348106, 0.15558189425045565, 0.18519231192710273, 0.19311033798392374, 0.18575123714927066, 0.19001615411658124, 0.1817707871196087, 0.1792012767960185, 0.20180728689027605, 0.2002335578330502, 0.26014948670710825, 0.08271119106836178, 0.08509924990943141, 0.08286439130053347, 0.08523655333269053, 0.0740646069330223, 0.08664021925632537, 0.08251790469292186, 0.07474503539624144, 0.10134134775730907]}, "mutation_prompt": null}
{"id": "e0f4d944-af72-40e5-ba2c-8da9c73a0171", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.6 + 0.4 * (np.sin(np.pi * self.evaluations / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        if np.random.rand() < 0.5:  # Added condition to trigger local search\n            return neighbor if func(neighbor) < func(solution) else solution\n        return solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Enhance exploration by incorporating adaptive crossover rate and selective local search triggering.", "configspace": "", "generation": 78, "fitness": 0.44246523560703993, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.30.", "error": "", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.9431500764425735, 0.9363760484725517, 0.9419435005603451, 0.9427917779324794, 0.9116821162009645, 0.9376362994413077, 0.9383057715990832, 0.942853183777185, 0.9344132060842989, 0.8303130350209669, 0.8904790670651657, 0.8889443418185689, 0.8259099592165713, 0.8853729187538426, 0.8983481814125488, 0.8816797392022413, 0.8889650390215319, 0.8736984448041165, 0.30050064137059795, 0.18086065886565894, 0.10496584369214867, 0.19008533427465857, 0.7104938760245987, 0.1348833267554077, 0.1631822216763652, 0.7116134626220498, 0.222548317540332, 0.16377696260585362, 0.11932347977600077, 0.15021189369406296, 0.12441030364368921, 0.09241959360554686, 0.08976815124985804, 0.13635154319527376, 0.11195191322951792, 0.15832615431330577, 0.9888984733170796, 0.7703950469541976, 0.9812150513441911, 0.9778400768285145, 0.9732735687000086, 0.9691355580543326, 0.9779039110207131, 0.9835792990038638, 0.9795002352035576, 0.6684219887885041, 0.6944588777321632, 0.5975110550495154, 0.7629034253375973, 0.6768176995925793, 0.7272438830432634, 0.5564379087615224, 0.6943506403621031, 0.5100676816861549, 0.24686333406821537, 0.8657032002670108, 0.2074263214367057, 0.28215751570289893, 0.21489687750346065, 0.6002928798679984, 0.925307217268383, 0.384790978501265, 0.1764179460278419, 0.13511718876758283, 0.5757047236340298, 0.13333771299960406, 0.5734932896314724, 0.6231531797507215, 0.5322862650584763, 0.13296797860134923, 0.13388543720896762, 0.518126464945393, 0.47674187644002597, 0.4628382979395307, 0.5134535865239769, 0.40094204423497626, 0.6955218704417734, 0.47880557028493353, 0.5172426883358612, 0.09609904504299649, 0.30779477248617604, 0.539606149395707, 0.5321494044192092, 0.05979963896528884, 0.5273899671373843, 0.5112678185796642, 0.563406836105588, 0.5649642495515401, 0.5375503914807168, 0.5681214867803298, 0.6253254529564984, 0.6350862424814192, 0.6617709293997035, 0.5997508847599267, 0.6140291106476596, 0.5380170566840918, 0.5419259560313476, 0.6451416916495185, 0.6589354863808321, 0.3509998070640662, 0.11093278767068859, 0.26051473536716363, 0.5602773950760828, 0.31734703926511454, 0.06858182351571318, 0.16348773305008724, 0.10761295633665835, 0.1273049877019483, 0.3833600018724723, 0.37792391212384946, 0.48137311113924863, 0.30462345121959056, 0.5467651310141922, 0.35988763498876053, 0.6118684080947192, 0.4848299313827148, 0.08541035377827266, 0.8080046778031921, 0.8415784132296347, 0.851178605795845, 0.8364116531810678, 0.8313796907763547, 0.8011863306675993, 0.8162063517060552, 0.8255379606394753, 0.8299950767312412, 0.1660494165424412, 0.12243626491326576, 0.1296657963768426, 0.15585658884496167, 0.09924238488824866, 0.0939156910888943, 0.13484896440535288, 0.14071295196416944, 0.11620258267105144, 0.24780949377710926, 0.17968640517632162, 0.6208383234827426, 0.12560906539228434, 0.23680257299339935, 0.2886971406638975, 0.25847820676527333, 0.2451230556348476, 0.1445605931778, 0.4796296065421465, 0.6343235475114208, 0.6633169306028598, 0.6770281598021981, 0.6583962722771817, 0.43559765641292203, 0.6754960471441329, 0.7541431341800733, 0.6658577835151952, 0.2604954182046333, 0.22302950357354112, 0.5465004885849802, 0.28207418462892664, 0.22327748014925497, 0.3120735160852306, 0.5072345436365733, 0.5570331117224796, 0.40820541326293713, 0.18840788024427868, 0.202742130754054, 0.19706022800881506, 0.19255654472144212, 0.1973478408391044, 0.23782660471536732, 0.2339015802649289, 0.21421060608872644, 0.1957639320975515, 0.1803249468483269, 0.25334036690397665, 0.8717291558970162, 0.2503646962451147, 0.21842455378582448, 0.2242008177944531, 0.21113888525921143, 0.21763661668967693, 0.25498333003103735, 0.18807746561691863, 0.1654677818494169, 0.1543444588098244, 0.9107629400852206, 0.9011826629364529, 0.11986748502086553, 0.16348150667913763, 0.16555536789777803, 0.1666481824203021, 0.8920021912493767, 0.16885119684615346, 0.8866579342738908, 0.7995576791944421, 0.16978790056463988, 0.1683264985225802, 0.15613019705422726, 0.1555825288836893, 0.7683082988480906, 0.16787910767120995, 0.23396081741360797, 0.20130414654520823, 0.18941776014645917, 0.17054688669358242, 0.1827006390094833, 0.19588383469851056, 0.1677685381001276, 0.22220338999265898, 0.08806048752598894, 0.09059799356342824, 0.08924264454815023, 0.08596692176823051, 0.07983631645076317, 0.09209372732590715, 0.09504976133338094, 0.09088593129954992, 0.08761295318588658]}, "mutation_prompt": null}
{"id": "7a347b44-9ff6-47a6-8ed0-f8a1932a4f44", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.6 + 0.4 * (self.evaluations / self.budget)  # Changed scaling factor\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Refine selection and mutation strategies to enhance exploration in early stages and exploitation in later stages.", "configspace": "", "generation": 79, "fitness": 0.4765443227763497, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.29.", "error": "", "parent_id": "cdc86dfe-0eec-44f9-9737-eef98e2d6fe1", "metadata": {"aucs": [0.8727323009584653, 0.869891301951848, 0.8785533986214287, 0.8493517544172859, 0.8620049718541624, 0.8893005271934057, 0.8711829159274804, 0.8971556606644904, 0.878533781197349, 0.7771708376365791, 0.7326293001589845, 0.7915268101243401, 0.7736088090819575, 0.8021552716217035, 0.766149757170679, 0.7687971244738885, 0.786553811282196, 0.5487948611494627, 0.14162686912701972, 0.14521939127011552, 0.10397869132391957, 0.15016416405101207, 0.14558192846717632, 0.1553726031049626, 0.12714011418849114, 0.10679265252641601, 0.10837045407001955, 0.120193631960831, 0.13435326157355487, 0.1205366064700567, 0.38496485549012505, 0.10548411612683362, 0.10106939212408217, 0.13181618509723958, 0.13461855495280362, 0.1328849833856568, 0.7373961588537019, 0.8815588056860889, 0.772687907590075, 0.9615983109214745, 0.8523000286045326, 0.9445794116929976, 0.7779093765036517, 0.7752638518862612, 0.9328936621310061, 0.6817191464187324, 0.6317877369727442, 0.6513301756768405, 0.14941226698381493, 0.6001052803636917, 0.7050162939708413, 0.5355696652000794, 0.6143163881712468, 0.5554836808705848, 0.2294065686436727, 0.8930261075569293, 0.9040107914170339, 0.9159437349585181, 0.9188246787587876, 0.9115818001317967, 0.9069594708529818, 0.8897915085165428, 0.6062530875986439, 0.4476903696745659, 0.5132036194599078, 0.28516765735452343, 0.5424794524201735, 0.7696772227437739, 0.7366293772279893, 0.34977669631610375, 0.4211056767776089, 0.6036522446497564, 0.6502421684426722, 0.5955531847854524, 0.13333339367683872, 0.6881668996336111, 0.49274932652041303, 0.3809101200001762, 0.4545587319817188, 0.4121297425778343, 0.8046099203146704, 0.7527417979117319, 0.7084769114950098, 0.7349230338096765, 0.7662262315835069, 0.7534899890212695, 0.7791961874926133, 0.7561280119735909, 0.7377627578436528, 0.7780493342090691, 0.8325116191049905, 0.7733139827528587, 0.8204581090450974, 0.8072469581253814, 0.7772689967512373, 0.8380884835134805, 0.8352766092977797, 0.81056330619274, 0.8105961431897325, 0.21281200627369157, 0.4858277933780403, 0.20909100660491586, 0.6371578431034475, 0.5043848901167267, 0.5978667201948217, 0.4684092517309647, 0.4787966523669177, 0.2815433104350301, 0.5984796626509776, 0.6287822587549747, 0.6272747653540849, 0.5425304225099407, 0.6295126445611188, 0.4806763511353441, 0.6246734722737342, 0.6021885304142265, 0.5613089227407149, 0.768436615743199, 0.7696704426628069, 0.8676218116345034, 0.7551004788760685, 0.8522946843230192, 0.8481999182474562, 0.8747301143433651, 0.8680095887498444, 0.8262296263512627, 0.12796285955420195, 0.12270794847249433, 0.1216771306249469, 0.11246910731789506, 0.15676699220351165, 0.12006692529482244, 0.09918550402418136, 0.15673788762363206, 0.11124780769214959, 0.28712923777028687, 0.17607130235071056, 0.7096120671874082, 0.2549602739762521, 0.5007817856642485, 0.13980139632841715, 0.17466189418973133, 0.19334228939387954, 0.19358970190158453, 0.476585268386582, 0.4770369013020247, 0.5142618463983026, 0.49096697406298007, 0.5316706349910427, 0.4922544421426609, 0.5682991233382277, 0.5299286855931528, 0.4607264718526144, 0.4108678853056398, 0.42858364933963355, 0.39968079062641904, 0.40411722762741975, 0.3874659972568677, 0.4093226009392451, 0.4479992564312909, 0.3974227940201649, 0.42539746203207074, 0.19059711005335433, 0.18696664191610568, 0.20051778065351145, 0.1920742876748791, 0.20136411625045625, 0.18213291510249607, 0.20534906993839708, 0.21719149005013982, 0.19270177350409945, 0.47338917328206975, 0.19688572097215096, 0.20531240217932534, 0.2076788678185908, 0.19229605910638314, 0.23836131092713742, 0.4250325717765937, 0.5567692192990363, 0.22187043495606673, 0.16446578728079642, 0.1522620147280721, 0.18511186614029462, 0.15951506829744844, 0.1977432211419069, 0.43874993088742154, 0.1821430558502548, 0.16218945898676884, 0.8747832299818858, 0.8327456763831875, 0.20782170436748115, 0.2061351639469995, 0.8551173958689806, 0.2083799608744139, 0.7877056107463263, 0.21176147841707682, 0.21052878887802384, 0.8525027506719952, 0.17268562049930802, 0.19548720225425953, 0.19904698728554215, 0.19467208016957283, 0.17724029672371144, 0.21106626509197068, 0.17695577178487587, 0.18290816653793007, 0.184761851221252, 0.08571469665711429, 0.08379814588503631, 0.09181126556824526, 0.07549085437242575, 0.08577382573434533, 0.09055661862494613, 0.09971768853912566, 0.0989601888758399, 0.08086136060750682]}, "mutation_prompt": null}
{"id": "33fa5a51-25b3-4e3c-b7ec-3e0c48606a34", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.7 + 0.3 * (self.evaluations / self.budget)  # Changed scaling factor\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.8 + 0.2 * (1 - np.cos(np.pi * self.evaluations / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.6 + 0.2 * (1 - np.cos(np.pi * self.evaluations / self.budget))  # Changed mutation factor\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive crossover and mutation strategies to dynamically balance exploration and exploitation throughout the optimization process.", "configspace": "", "generation": 80, "fitness": 0.45539117995531025, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "7a347b44-9ff6-47a6-8ed0-f8a1932a4f44", "metadata": {"aucs": [0.8904644942183468, 0.8807912472267034, 0.8822398723176681, 0.895390252802156, 0.8927408480307207, 0.8790734938234043, 0.8883652136877379, 0.8855557413789971, 0.903356977615468, 0.8354004649141419, 0.7972240382929651, 0.8397001810403307, 0.8018972310254997, 0.8339934447211703, 0.8330652818004942, 0.8240509371837712, 0.8251487363587637, 0.8036451446510038, 0.7239990113334179, 0.16873644553278067, 0.15273622580340385, 0.5972270156414562, 0.15705028877532112, 0.18260575760463815, 0.18184134550788145, 0.7427735760464586, 0.7303619329482589, 0.1721175700690355, 0.15042718790242782, 0.14073410920693663, 0.14574443039316176, 0.13750221739821922, 0.1729088327747471, 0.17231749765042237, 0.27078725654932856, 0.14091905976137442, 0.9780766189488154, 0.9739543245941803, 0.983031793367091, 0.9825590567687712, 0.9702557072970525, 0.9842475546712841, 0.98910710734555, 0.9836894732477015, 0.9727211399687794, 0.6914961866120766, 0.6517273103006161, 0.7118702524110043, 0.6361493201944521, 0.665932446768381, 0.693377440124204, 0.6838087029715957, 0.6475327971398608, 0.6101962766960689, 0.8662406729974311, 0.8294555690067924, 0.7931677637144026, 0.8607826096607902, 0.21122609688722738, 0.8314286554203285, 0.8371438298119619, 0.855213600476105, 0.8413702186331227, 0.6162582010808452, 0.5840475557845571, 0.5173526939999993, 0.5202958835549221, 0.6452318285764189, 0.5133209814004236, 0.6143210868317909, 0.5212278947315014, 0.5643008595927801, 0.5730303062132155, 0.03686364563299871, 0.5319691967784624, 0.6407955748205381, 0.5372824058629966, 0.5382387621539029, 0.6129215654255294, 0.5678797196638032, 0.6489930708420859, 0.47239546234749874, 0.4070863730810753, 0.38005121818415477, 0.4429373526309437, 0.43225954017344237, 0.3799317625730685, 0.5034194669025369, 0.4378957669227671, 0.5422990319657459, 0.5413113401272007, 0.5660231013081394, 0.5740976687827875, 0.5513248917010141, 0.533940652032737, 0.5405694014714847, 0.5374443085808034, 0.5792649015268199, 0.5534962818356053, 0.20878832022876492, 0.09775493008431435, 0.2547700580774733, 0.32962540770689397, 0.44753215631606136, 0.36032455037150635, 0.22695472827572827, 0.16415362566430503, 0.32461429620798976, 0.41464433604992346, 0.37348872658040355, 0.38156394654303116, 0.40919738488143365, 0.4251282365474379, 0.4164940336749501, 0.3854207662391427, 0.377899276194247, 0.4002308265154284, 0.7711780696533941, 0.802105891078394, 0.7640334750531967, 0.7730538208153371, 0.7624195803278286, 0.7686915804563732, 0.7657267998853606, 0.7639062426877337, 0.8013377643478874, 0.3049584069984125, 0.1271051994590967, 0.10668695699613673, 0.14139868146947132, 0.12843127839350532, 0.12743341433283673, 0.12889085114517007, 0.12811418206835046, 0.11872735217872743, 0.18529555268867048, 0.14229554728333338, 0.24727721502228217, 0.15732303442342177, 0.3647997722090234, 0.3287611206382237, 0.17588095193145636, 0.24973491855351448, 0.20157807930168214, 0.4242881541633715, 0.4821646862902228, 0.48792870574881075, 0.49185865543384777, 0.5442209949122132, 0.45448372529212944, 0.5937977573250677, 0.5235865225659257, 0.5944799220195247, 0.3776859751249745, 0.3806924222202843, 0.32539721366020735, 0.3586233437202301, 0.20636392552801752, 0.33948130243579755, 0.42673741065081416, 0.3872051358282138, 0.4681583246344453, 0.17943119534244412, 0.19180334802227073, 0.23020318854629918, 0.19244795819538874, 0.19144647511260515, 0.20451650716138148, 0.18783944873318703, 0.20201930559346537, 0.18556009072889212, 0.236148294505925, 0.21648742234235052, 0.23783940912590984, 0.24174372622734686, 0.695050463013752, 0.7600273887685559, 0.2229682724584814, 0.24374777361667543, 0.7477695402845327, 0.8905326414515947, 0.1577387908959279, 0.15177766868311848, 0.9298609245195544, 0.20008613747674164, 0.8628326467977034, 0.18432007892440283, 0.18865797292385245, 0.18653081558842854, 0.15365737988011985, 0.21082082473911878, 0.16580648606352444, 0.2076300276296471, 0.16785058473511794, 0.16710011166459915, 0.15389559989766388, 0.21235731844030525, 0.2105472543773611, 0.18455600523749194, 0.18185482108089313, 0.183859805190425, 0.18882389572817515, 0.15891459500021754, 0.18182518446234142, 0.18803993764386528, 0.1823583952968536, 0.17040343863512064, 0.09720432124931488, 0.08289914482819327, 0.07686744637705034, 0.0837623213476183, 0.08293585756026312, 0.07574370948751452, 0.07956370916910904, 0.08158019591493759, 0.08262784743858897]}, "mutation_prompt": null}
{"id": "57398586-011b-4449-97a2-b161375e0f02", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.6 + 0.4 * (self.evaluations / self.budget)  # Changed scaling factor\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Refine selection and mutation strategies to enhance exploration in early stages and exploitation in later stages.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7a347b44-9ff6-47a6-8ed0-f8a1932a4f44", "metadata": {"aucs": [0.8727323009584653, 0.869891301951848, 0.8785533986214287, 0.8493517544172859, 0.8620049718541624, 0.8893005271934057, 0.8711829159274804, 0.8971556606644904, 0.878533781197349, 0.7771708376365791, 0.7326293001589845, 0.7915268101243401, 0.7736088090819575, 0.8021552716217035, 0.766149757170679, 0.7687971244738885, 0.786553811282196, 0.5487948611494627, 0.14162686912701972, 0.14521939127011552, 0.10397869132391957, 0.15016416405101207, 0.14558192846717632, 0.1553726031049626, 0.12714011418849114, 0.10679265252641601, 0.10837045407001955, 0.120193631960831, 0.13435326157355487, 0.1205366064700567, 0.38496485549012505, 0.10548411612683362, 0.10106939212408217, 0.13181618509723958, 0.13461855495280362, 0.1328849833856568, 0.7373961588537019, 0.8815588056860889, 0.772687907590075, 0.9615983109214745, 0.8523000286045326, 0.9445794116929976, 0.7779093765036517, 0.7752638518862612, 0.9328936621310061, 0.6817191464187324, 0.6317877369727442, 0.6513301756768405, 0.14941226698381493, 0.6001052803636917, 0.7050162939708413, 0.5355696652000794, 0.6143163881712468, 0.5554836808705848, 0.2294065686436727, 0.8930261075569293, 0.9040107914170339, 0.9159437349585181, 0.9188246787587876, 0.9115818001317967, 0.9069594708529818, 0.8897915085165428, 0.6062530875986439, 0.4476903696745659, 0.5132036194599078, 0.28516765735452343, 0.5424794524201735, 0.7696772227437739, 0.7366293772279893, 0.34977669631610375, 0.4211056767776089, 0.6036522446497564, 0.6502421684426722, 0.5955531847854524, 0.13333339367683872, 0.6881668996336111, 0.49274932652041303, 0.3809101200001762, 0.4545587319817188, 0.4121297425778343, 0.8046099203146704, 0.7527417979117319, 0.7084769114950098, 0.7349230338096765, 0.7662262315835069, 0.7534899890212695, 0.7791961874926133, 0.7561280119735909, 0.7377627578436528, 0.7780493342090691, 0.8325116191049905, 0.7733139827528587, 0.8204581090450974, 0.8072469581253814, 0.7772689967512373, 0.8380884835134805, 0.8352766092977797, 0.81056330619274, 0.8105961431897325, 0.21281200627369157, 0.4858277933780403, 0.20909100660491586, 0.6371578431034475, 0.5043848901167267, 0.5978667201948217, 0.4684092517309647, 0.4787966523669177, 0.2815433104350301, 0.5984796626509776, 0.6287822587549747, 0.6272747653540849, 0.5425304225099407, 0.6295126445611188, 0.4806763511353441, 0.6246734722737342, 0.6021885304142265, 0.5613089227407149, 0.768436615743199, 0.7696704426628069, 0.8676218116345034, 0.7551004788760685, 0.8522946843230192, 0.8481999182474562, 0.8747301143433651, 0.8680095887498444, 0.8262296263512627, 0.12796285955420195, 0.12270794847249433, 0.1216771306249469, 0.11246910731789506, 0.15676699220351165, 0.12006692529482244, 0.09918550402418136, 0.15673788762363206, 0.11124780769214959, 0.28712923777028687, 0.17607130235071056, 0.7096120671874082, 0.2549602739762521, 0.5007817856642485, 0.13980139632841715, 0.17466189418973133, 0.19334228939387954, 0.19358970190158453, 0.476585268386582, 0.4770369013020247, 0.5142618463983026, 0.49096697406298007, 0.5316706349910427, 0.4922544421426609, 0.5682991233382277, 0.5299286855931528, 0.4607264718526144, 0.4108678853056398, 0.42858364933963355, 0.39968079062641904, 0.40411722762741975, 0.3874659972568677, 0.4093226009392451, 0.4479992564312909, 0.3974227940201649, 0.42539746203207074, 0.19059711005335433, 0.18696664191610568, 0.20051778065351145, 0.1920742876748791, 0.20136411625045625, 0.18213291510249607, 0.20534906993839708, 0.21719149005013982, 0.19270177350409945, 0.47338917328206975, 0.19688572097215096, 0.20531240217932534, 0.2076788678185908, 0.19229605910638314, 0.23836131092713742, 0.4250325717765937, 0.5567692192990363, 0.22187043495606673, 0.16446578728079642, 0.1522620147280721, 0.18511186614029462, 0.15951506829744844, 0.1977432211419069, 0.43874993088742154, 0.1821430558502548, 0.16218945898676884, 0.8747832299818858, 0.8327456763831875, 0.20782170436748115, 0.2061351639469995, 0.8551173958689806, 0.2083799608744139, 0.7877056107463263, 0.21176147841707682, 0.21052878887802384, 0.8525027506719952, 0.17268562049930802, 0.19548720225425953, 0.19904698728554215, 0.19467208016957283, 0.17724029672371144, 0.21106626509197068, 0.17695577178487587, 0.18290816653793007, 0.184761851221252, 0.08571469665711429, 0.08379814588503631, 0.09181126556824526, 0.07549085437242575, 0.08577382573434533, 0.09055661862494613, 0.09971768853912566, 0.0989601888758399, 0.08086136060750682]}, "mutation_prompt": null}
{"id": "73b40158-a11e-45e7-b2b6-42ab834122bc", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.6 + 0.4 * (self.evaluations / self.budget)  # Changed scaling factor\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Refine selection and mutation strategies to enhance exploration in early stages and exploitation in later stages.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7a347b44-9ff6-47a6-8ed0-f8a1932a4f44", "metadata": {"aucs": [0.8727323009584653, 0.869891301951848, 0.8785533986214287, 0.8493517544172859, 0.8620049718541624, 0.8893005271934057, 0.8711829159274804, 0.8971556606644904, 0.878533781197349, 0.7771708376365791, 0.7326293001589845, 0.7915268101243401, 0.7736088090819575, 0.8021552716217035, 0.766149757170679, 0.7687971244738885, 0.786553811282196, 0.5487948611494627, 0.14162686912701972, 0.14521939127011552, 0.10397869132391957, 0.15016416405101207, 0.14558192846717632, 0.1553726031049626, 0.12714011418849114, 0.10679265252641601, 0.10837045407001955, 0.120193631960831, 0.13435326157355487, 0.1205366064700567, 0.38496485549012505, 0.10548411612683362, 0.10106939212408217, 0.13181618509723958, 0.13461855495280362, 0.1328849833856568, 0.7373961588537019, 0.8815588056860889, 0.772687907590075, 0.9615983109214745, 0.8523000286045326, 0.9445794116929976, 0.7779093765036517, 0.7752638518862612, 0.9328936621310061, 0.6817191464187324, 0.6317877369727442, 0.6513301756768405, 0.14941226698381493, 0.6001052803636917, 0.7050162939708413, 0.5355696652000794, 0.6143163881712468, 0.5554836808705848, 0.2294065686436727, 0.8930261075569293, 0.9040107914170339, 0.9159437349585181, 0.9188246787587876, 0.9115818001317967, 0.9069594708529818, 0.8897915085165428, 0.6062530875986439, 0.4476903696745659, 0.5132036194599078, 0.28516765735452343, 0.5424794524201735, 0.7696772227437739, 0.7366293772279893, 0.34977669631610375, 0.4211056767776089, 0.6036522446497564, 0.6502421684426722, 0.5955531847854524, 0.13333339367683872, 0.6881668996336111, 0.49274932652041303, 0.3809101200001762, 0.4545587319817188, 0.4121297425778343, 0.8046099203146704, 0.7527417979117319, 0.7084769114950098, 0.7349230338096765, 0.7662262315835069, 0.7534899890212695, 0.7791961874926133, 0.7561280119735909, 0.7377627578436528, 0.7780493342090691, 0.8325116191049905, 0.7733139827528587, 0.8204581090450974, 0.8072469581253814, 0.7772689967512373, 0.8380884835134805, 0.8352766092977797, 0.81056330619274, 0.8105961431897325, 0.21281200627369157, 0.4858277933780403, 0.20909100660491586, 0.6371578431034475, 0.5043848901167267, 0.5978667201948217, 0.4684092517309647, 0.4787966523669177, 0.2815433104350301, 0.5984796626509776, 0.6287822587549747, 0.6272747653540849, 0.5425304225099407, 0.6295126445611188, 0.4806763511353441, 0.6246734722737342, 0.6021885304142265, 0.5613089227407149, 0.768436615743199, 0.7696704426628069, 0.8676218116345034, 0.7551004788760685, 0.8522946843230192, 0.8481999182474562, 0.8747301143433651, 0.8680095887498444, 0.8262296263512627, 0.12796285955420195, 0.12270794847249433, 0.1216771306249469, 0.11246910731789506, 0.15676699220351165, 0.12006692529482244, 0.09918550402418136, 0.15673788762363206, 0.11124780769214959, 0.28712923777028687, 0.17607130235071056, 0.7096120671874082, 0.2549602739762521, 0.5007817856642485, 0.13980139632841715, 0.17466189418973133, 0.19334228939387954, 0.19358970190158453, 0.476585268386582, 0.4770369013020247, 0.5142618463983026, 0.49096697406298007, 0.5316706349910427, 0.4922544421426609, 0.5682991233382277, 0.5299286855931528, 0.4607264718526144, 0.4108678853056398, 0.42858364933963355, 0.39968079062641904, 0.40411722762741975, 0.3874659972568677, 0.4093226009392451, 0.4479992564312909, 0.3974227940201649, 0.42539746203207074, 0.19059711005335433, 0.18696664191610568, 0.20051778065351145, 0.1920742876748791, 0.20136411625045625, 0.18213291510249607, 0.20534906993839708, 0.21719149005013982, 0.19270177350409945, 0.47338917328206975, 0.19688572097215096, 0.20531240217932534, 0.2076788678185908, 0.19229605910638314, 0.23836131092713742, 0.4250325717765937, 0.5567692192990363, 0.22187043495606673, 0.16446578728079642, 0.1522620147280721, 0.18511186614029462, 0.15951506829744844, 0.1977432211419069, 0.43874993088742154, 0.1821430558502548, 0.16218945898676884, 0.8747832299818858, 0.8327456763831875, 0.20782170436748115, 0.2061351639469995, 0.8551173958689806, 0.2083799608744139, 0.7877056107463263, 0.21176147841707682, 0.21052878887802384, 0.8525027506719952, 0.17268562049930802, 0.19548720225425953, 0.19904698728554215, 0.19467208016957283, 0.17724029672371144, 0.21106626509197068, 0.17695577178487587, 0.18290816653793007, 0.184761851221252, 0.08571469665711429, 0.08379814588503631, 0.09181126556824526, 0.07549085437242575, 0.08577382573434533, 0.09055661862494613, 0.09971768853912566, 0.0989601888758399, 0.08086136060750682]}, "mutation_prompt": null}
{"id": "cff0d3cf-80eb-4532-af8f-3f87c14439d2", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.6 + 0.4 * (self.evaluations / self.budget)  # Changed scaling factor\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Refine selection and mutation strategies to enhance exploration in early stages and exploitation in later stages.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7a347b44-9ff6-47a6-8ed0-f8a1932a4f44", "metadata": {"aucs": [0.8727323009584653, 0.869891301951848, 0.8785533986214287, 0.8493517544172859, 0.8620049718541624, 0.8893005271934057, 0.8711829159274804, 0.8971556606644904, 0.878533781197349, 0.7771708376365791, 0.7326293001589845, 0.7915268101243401, 0.7736088090819575, 0.8021552716217035, 0.766149757170679, 0.7687971244738885, 0.786553811282196, 0.5487948611494627, 0.14162686912701972, 0.14521939127011552, 0.10397869132391957, 0.15016416405101207, 0.14558192846717632, 0.1553726031049626, 0.12714011418849114, 0.10679265252641601, 0.10837045407001955, 0.120193631960831, 0.13435326157355487, 0.1205366064700567, 0.38496485549012505, 0.10548411612683362, 0.10106939212408217, 0.13181618509723958, 0.13461855495280362, 0.1328849833856568, 0.7373961588537019, 0.8815588056860889, 0.772687907590075, 0.9615983109214745, 0.8523000286045326, 0.9445794116929976, 0.7779093765036517, 0.7752638518862612, 0.9328936621310061, 0.6817191464187324, 0.6317877369727442, 0.6513301756768405, 0.14941226698381493, 0.6001052803636917, 0.7050162939708413, 0.5355696652000794, 0.6143163881712468, 0.5554836808705848, 0.2294065686436727, 0.8930261075569293, 0.9040107914170339, 0.9159437349585181, 0.9188246787587876, 0.9115818001317967, 0.9069594708529818, 0.8897915085165428, 0.6062530875986439, 0.4476903696745659, 0.5132036194599078, 0.28516765735452343, 0.5424794524201735, 0.7696772227437739, 0.7366293772279893, 0.34977669631610375, 0.4211056767776089, 0.6036522446497564, 0.6502421684426722, 0.5955531847854524, 0.13333339367683872, 0.6881668996336111, 0.49274932652041303, 0.3809101200001762, 0.4545587319817188, 0.4121297425778343, 0.8046099203146704, 0.7527417979117319, 0.7084769114950098, 0.7349230338096765, 0.7662262315835069, 0.7534899890212695, 0.7791961874926133, 0.7561280119735909, 0.7377627578436528, 0.7780493342090691, 0.8325116191049905, 0.7733139827528587, 0.8204581090450974, 0.8072469581253814, 0.7772689967512373, 0.8380884835134805, 0.8352766092977797, 0.81056330619274, 0.8105961431897325, 0.21281200627369157, 0.4858277933780403, 0.20909100660491586, 0.6371578431034475, 0.5043848901167267, 0.5978667201948217, 0.4684092517309647, 0.4787966523669177, 0.2815433104350301, 0.5984796626509776, 0.6287822587549747, 0.6272747653540849, 0.5425304225099407, 0.6295126445611188, 0.4806763511353441, 0.6246734722737342, 0.6021885304142265, 0.5613089227407149, 0.768436615743199, 0.7696704426628069, 0.8676218116345034, 0.7551004788760685, 0.8522946843230192, 0.8481999182474562, 0.8747301143433651, 0.8680095887498444, 0.8262296263512627, 0.12796285955420195, 0.12270794847249433, 0.1216771306249469, 0.11246910731789506, 0.15676699220351165, 0.12006692529482244, 0.09918550402418136, 0.15673788762363206, 0.11124780769214959, 0.28712923777028687, 0.17607130235071056, 0.7096120671874082, 0.2549602739762521, 0.5007817856642485, 0.13980139632841715, 0.17466189418973133, 0.19334228939387954, 0.19358970190158453, 0.476585268386582, 0.4770369013020247, 0.5142618463983026, 0.49096697406298007, 0.5316706349910427, 0.4922544421426609, 0.5682991233382277, 0.5299286855931528, 0.4607264718526144, 0.4108678853056398, 0.42858364933963355, 0.39968079062641904, 0.40411722762741975, 0.3874659972568677, 0.4093226009392451, 0.4479992564312909, 0.3974227940201649, 0.42539746203207074, 0.19059711005335433, 0.18696664191610568, 0.20051778065351145, 0.1920742876748791, 0.20136411625045625, 0.18213291510249607, 0.20534906993839708, 0.21719149005013982, 0.19270177350409945, 0.47338917328206975, 0.19688572097215096, 0.20531240217932534, 0.2076788678185908, 0.19229605910638314, 0.23836131092713742, 0.4250325717765937, 0.5567692192990363, 0.22187043495606673, 0.16446578728079642, 0.1522620147280721, 0.18511186614029462, 0.15951506829744844, 0.1977432211419069, 0.43874993088742154, 0.1821430558502548, 0.16218945898676884, 0.8747832299818858, 0.8327456763831875, 0.20782170436748115, 0.2061351639469995, 0.8551173958689806, 0.2083799608744139, 0.7877056107463263, 0.21176147841707682, 0.21052878887802384, 0.8525027506719952, 0.17268562049930802, 0.19548720225425953, 0.19904698728554215, 0.19467208016957283, 0.17724029672371144, 0.21106626509197068, 0.17695577178487587, 0.18290816653793007, 0.184761851221252, 0.08571469665711429, 0.08379814588503631, 0.09181126556824526, 0.07549085437242575, 0.08577382573434533, 0.09055661862494613, 0.09971768853912566, 0.0989601888758399, 0.08086136060750682]}, "mutation_prompt": null}
{"id": "fd6ea2ac-f3f5-4199-b2fe-a4e0ed7a5542", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.6 + 0.4 * (self.evaluations / self.budget)  # Changed scaling factor\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Refine selection and mutation strategies to enhance exploration in early stages and exploitation in later stages.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7a347b44-9ff6-47a6-8ed0-f8a1932a4f44", "metadata": {"aucs": [0.8727323009584653, 0.869891301951848, 0.8785533986214287, 0.8493517544172859, 0.8620049718541624, 0.8893005271934057, 0.8711829159274804, 0.8971556606644904, 0.878533781197349, 0.7771708376365791, 0.7326293001589845, 0.7915268101243401, 0.7736088090819575, 0.8021552716217035, 0.766149757170679, 0.7687971244738885, 0.786553811282196, 0.5487948611494627, 0.14162686912701972, 0.14521939127011552, 0.10397869132391957, 0.15016416405101207, 0.14558192846717632, 0.1553726031049626, 0.12714011418849114, 0.10679265252641601, 0.10837045407001955, 0.120193631960831, 0.13435326157355487, 0.1205366064700567, 0.38496485549012505, 0.10548411612683362, 0.10106939212408217, 0.13181618509723958, 0.13461855495280362, 0.1328849833856568, 0.7373961588537019, 0.8815588056860889, 0.772687907590075, 0.9615983109214745, 0.8523000286045326, 0.9445794116929976, 0.7779093765036517, 0.7752638518862612, 0.9328936621310061, 0.6817191464187324, 0.6317877369727442, 0.6513301756768405, 0.14941226698381493, 0.6001052803636917, 0.7050162939708413, 0.5355696652000794, 0.6143163881712468, 0.5554836808705848, 0.2294065686436727, 0.8930261075569293, 0.9040107914170339, 0.9159437349585181, 0.9188246787587876, 0.9115818001317967, 0.9069594708529818, 0.8897915085165428, 0.6062530875986439, 0.4476903696745659, 0.5132036194599078, 0.28516765735452343, 0.5424794524201735, 0.7696772227437739, 0.7366293772279893, 0.34977669631610375, 0.4211056767776089, 0.6036522446497564, 0.6502421684426722, 0.5955531847854524, 0.13333339367683872, 0.6881668996336111, 0.49274932652041303, 0.3809101200001762, 0.4545587319817188, 0.4121297425778343, 0.8046099203146704, 0.7527417979117319, 0.7084769114950098, 0.7349230338096765, 0.7662262315835069, 0.7534899890212695, 0.7791961874926133, 0.7561280119735909, 0.7377627578436528, 0.7780493342090691, 0.8325116191049905, 0.7733139827528587, 0.8204581090450974, 0.8072469581253814, 0.7772689967512373, 0.8380884835134805, 0.8352766092977797, 0.81056330619274, 0.8105961431897325, 0.21281200627369157, 0.4858277933780403, 0.20909100660491586, 0.6371578431034475, 0.5043848901167267, 0.5978667201948217, 0.4684092517309647, 0.4787966523669177, 0.2815433104350301, 0.5984796626509776, 0.6287822587549747, 0.6272747653540849, 0.5425304225099407, 0.6295126445611188, 0.4806763511353441, 0.6246734722737342, 0.6021885304142265, 0.5613089227407149, 0.768436615743199, 0.7696704426628069, 0.8676218116345034, 0.7551004788760685, 0.8522946843230192, 0.8481999182474562, 0.8747301143433651, 0.8680095887498444, 0.8262296263512627, 0.12796285955420195, 0.12270794847249433, 0.1216771306249469, 0.11246910731789506, 0.15676699220351165, 0.12006692529482244, 0.09918550402418136, 0.15673788762363206, 0.11124780769214959, 0.28712923777028687, 0.17607130235071056, 0.7096120671874082, 0.2549602739762521, 0.5007817856642485, 0.13980139632841715, 0.17466189418973133, 0.19334228939387954, 0.19358970190158453, 0.476585268386582, 0.4770369013020247, 0.5142618463983026, 0.49096697406298007, 0.5316706349910427, 0.4922544421426609, 0.5682991233382277, 0.5299286855931528, 0.4607264718526144, 0.4108678853056398, 0.42858364933963355, 0.39968079062641904, 0.40411722762741975, 0.3874659972568677, 0.4093226009392451, 0.4479992564312909, 0.3974227940201649, 0.42539746203207074, 0.19059711005335433, 0.18696664191610568, 0.20051778065351145, 0.1920742876748791, 0.20136411625045625, 0.18213291510249607, 0.20534906993839708, 0.21719149005013982, 0.19270177350409945, 0.47338917328206975, 0.19688572097215096, 0.20531240217932534, 0.2076788678185908, 0.19229605910638314, 0.23836131092713742, 0.4250325717765937, 0.5567692192990363, 0.22187043495606673, 0.16446578728079642, 0.1522620147280721, 0.18511186614029462, 0.15951506829744844, 0.1977432211419069, 0.43874993088742154, 0.1821430558502548, 0.16218945898676884, 0.8747832299818858, 0.8327456763831875, 0.20782170436748115, 0.2061351639469995, 0.8551173958689806, 0.2083799608744139, 0.7877056107463263, 0.21176147841707682, 0.21052878887802384, 0.8525027506719952, 0.17268562049930802, 0.19548720225425953, 0.19904698728554215, 0.19467208016957283, 0.17724029672371144, 0.21106626509197068, 0.17695577178487587, 0.18290816653793007, 0.184761851221252, 0.08571469665711429, 0.08379814588503631, 0.09181126556824526, 0.07549085437242575, 0.08577382573434533, 0.09055661862494613, 0.09971768853912566, 0.0989601888758399, 0.08086136060750682]}, "mutation_prompt": null}
{"id": "87e1cc0c-4aad-41ee-af95-f0cb3c02cc60", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n        self.restart_threshold = 0.2 * self.budget  # New line\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.6 + 0.4 * (self.evaluations / self.budget)  # Changed scaling factor\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n        no_improvement_count = 0  # New line\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n                        no_improvement_count = 0  # New line\n                    else:\n                        no_improvement_count += 1  # New line\n\n                if self.evaluations >= self.budget:\n                    break\n\n            if no_improvement_count > self.restart_threshold:  # New block\n                population = self.initialize_population()\n                fitness = np.array([func(ind) for ind in population])\n                no_improvement_count = 0\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive restart strategy to escape local optima and improve exploration in high-dimensional spaces.", "configspace": "", "generation": 85, "fitness": 0.4765443227763497, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.29.", "error": "", "parent_id": "7a347b44-9ff6-47a6-8ed0-f8a1932a4f44", "metadata": {"aucs": [0.8727323009584653, 0.869891301951848, 0.8785533986214287, 0.8493517544172859, 0.8620049718541624, 0.8893005271934057, 0.8711829159274804, 0.8971556606644904, 0.878533781197349, 0.7771708376365791, 0.7326293001589845, 0.7915268101243401, 0.7736088090819575, 0.8021552716217035, 0.766149757170679, 0.7687971244738885, 0.786553811282196, 0.5487948611494627, 0.14162686912701972, 0.14521939127011552, 0.10397869132391957, 0.15016416405101207, 0.14558192846717632, 0.1553726031049626, 0.12714011418849114, 0.10679265252641601, 0.10837045407001955, 0.120193631960831, 0.13435326157355487, 0.1205366064700567, 0.38496485549012505, 0.10548411612683362, 0.10106939212408217, 0.13181618509723958, 0.13461855495280362, 0.1328849833856568, 0.7373961588537019, 0.8815588056860889, 0.772687907590075, 0.9615983109214745, 0.8523000286045326, 0.9445794116929976, 0.7779093765036517, 0.7752638518862612, 0.9328936621310061, 0.6817191464187324, 0.6317877369727442, 0.6513301756768405, 0.14941226698381493, 0.6001052803636917, 0.7050162939708413, 0.5355696652000794, 0.6143163881712468, 0.5554836808705848, 0.2294065686436727, 0.8930261075569293, 0.9040107914170339, 0.9159437349585181, 0.9188246787587876, 0.9115818001317967, 0.9069594708529818, 0.8897915085165428, 0.6062530875986439, 0.4476903696745659, 0.5132036194599078, 0.28516765735452343, 0.5424794524201735, 0.7696772227437739, 0.7366293772279893, 0.34977669631610375, 0.4211056767776089, 0.6036522446497564, 0.6502421684426722, 0.5955531847854524, 0.13333339367683872, 0.6881668996336111, 0.49274932652041303, 0.3809101200001762, 0.4545587319817188, 0.4121297425778343, 0.8046099203146704, 0.7527417979117319, 0.7084769114950098, 0.7349230338096765, 0.7662262315835069, 0.7534899890212695, 0.7791961874926133, 0.7561280119735909, 0.7377627578436528, 0.7780493342090691, 0.8325116191049905, 0.7733139827528587, 0.8204581090450974, 0.8072469581253814, 0.7772689967512373, 0.8380884835134805, 0.8352766092977797, 0.81056330619274, 0.8105961431897325, 0.21281200627369157, 0.4858277933780403, 0.20909100660491586, 0.6371578431034475, 0.5043848901167267, 0.5978667201948217, 0.4684092517309647, 0.4787966523669177, 0.2815433104350301, 0.5984796626509776, 0.6287822587549747, 0.6272747653540849, 0.5425304225099407, 0.6295126445611188, 0.4806763511353441, 0.6246734722737342, 0.6021885304142265, 0.5613089227407149, 0.768436615743199, 0.7696704426628069, 0.8676218116345034, 0.7551004788760685, 0.8522946843230192, 0.8481999182474562, 0.8747301143433651, 0.8680095887498444, 0.8262296263512627, 0.12796285955420195, 0.12270794847249433, 0.1216771306249469, 0.11246910731789506, 0.15676699220351165, 0.12006692529482244, 0.09918550402418136, 0.15673788762363206, 0.11124780769214959, 0.28712923777028687, 0.17607130235071056, 0.7096120671874082, 0.2549602739762521, 0.5007817856642485, 0.13980139632841715, 0.17466189418973133, 0.19334228939387954, 0.19358970190158453, 0.476585268386582, 0.4770369013020247, 0.5142618463983026, 0.49096697406298007, 0.5316706349910427, 0.4922544421426609, 0.5682991233382277, 0.5299286855931528, 0.4607264718526144, 0.4108678853056398, 0.42858364933963355, 0.39968079062641904, 0.40411722762741975, 0.3874659972568677, 0.4093226009392451, 0.4479992564312909, 0.3974227940201649, 0.42539746203207074, 0.19059711005335433, 0.18696664191610568, 0.20051778065351145, 0.1920742876748791, 0.20136411625045625, 0.18213291510249607, 0.20534906993839708, 0.21719149005013982, 0.19270177350409945, 0.47338917328206975, 0.19688572097215096, 0.20531240217932534, 0.2076788678185908, 0.19229605910638314, 0.23836131092713742, 0.4250325717765937, 0.5567692192990363, 0.22187043495606673, 0.16446578728079642, 0.1522620147280721, 0.18511186614029462, 0.15951506829744844, 0.1977432211419069, 0.43874993088742154, 0.1821430558502548, 0.16218945898676884, 0.8747832299818858, 0.8327456763831875, 0.20782170436748115, 0.2061351639469995, 0.8551173958689806, 0.2083799608744139, 0.7877056107463263, 0.21176147841707682, 0.21052878887802384, 0.8525027506719952, 0.17268562049930802, 0.19548720225425953, 0.19904698728554215, 0.19467208016957283, 0.17724029672371144, 0.21106626509197068, 0.17695577178487587, 0.18290816653793007, 0.184761851221252, 0.08571469665711429, 0.08379814588503631, 0.09181126556824526, 0.07549085437242575, 0.08577382573434533, 0.09055661862494613, 0.09971768853912566, 0.0989601888758399, 0.08086136060750682]}, "mutation_prompt": null}
{"id": "05eba4b5-56a8-4305-a95f-9d6e1bb4018e", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.6 + 0.4 * (self.evaluations / self.budget)  # Changed scaling factor\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        scaling_factor = (self.budget - self.evaluations) / self.budget  # Dynamic scaling factor\n        perturbation = np.random.normal(0, 0.05 * scaling_factor, self.dim)  # Modified perturbation with scaling factor\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Refine selection and mutation strategies to enhance exploration in early stages and exploitation in later stages.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7a347b44-9ff6-47a6-8ed0-f8a1932a4f44", "metadata": {"aucs": [0.8727323009584653, 0.869891301951848, 0.8785533986214287, 0.8493517544172859, 0.8620049718541624, 0.8893005271934057, 0.8711829159274804, 0.8971556606644904, 0.878533781197349, 0.7771708376365791, 0.7326293001589845, 0.7915268101243401, 0.7736088090819575, 0.8021552716217035, 0.766149757170679, 0.7687971244738885, 0.786553811282196, 0.5487948611494627, 0.14162686912701972, 0.14521939127011552, 0.10397869132391957, 0.15016416405101207, 0.14558192846717632, 0.1553726031049626, 0.12714011418849114, 0.10679265252641601, 0.10837045407001955, 0.120193631960831, 0.13435326157355487, 0.1205366064700567, 0.38496485549012505, 0.10548411612683362, 0.10106939212408217, 0.13181618509723958, 0.13461855495280362, 0.1328849833856568, 0.7373961588537019, 0.8815588056860889, 0.772687907590075, 0.9615983109214745, 0.8523000286045326, 0.9445794116929976, 0.7779093765036517, 0.7752638518862612, 0.9328936621310061, 0.6817191464187324, 0.6317877369727442, 0.6513301756768405, 0.14941226698381493, 0.6001052803636917, 0.7050162939708413, 0.5355696652000794, 0.6143163881712468, 0.5554836808705848, 0.2294065686436727, 0.8930261075569293, 0.9040107914170339, 0.9159437349585181, 0.9188246787587876, 0.9115818001317967, 0.9069594708529818, 0.8897915085165428, 0.6062530875986439, 0.4476903696745659, 0.5132036194599078, 0.28516765735452343, 0.5424794524201735, 0.7696772227437739, 0.7366293772279893, 0.34977669631610375, 0.4211056767776089, 0.6036522446497564, 0.6502421684426722, 0.5955531847854524, 0.13333339367683872, 0.6881668996336111, 0.49274932652041303, 0.3809101200001762, 0.4545587319817188, 0.4121297425778343, 0.8046099203146704, 0.7527417979117319, 0.7084769114950098, 0.7349230338096765, 0.7662262315835069, 0.7534899890212695, 0.7791961874926133, 0.7561280119735909, 0.7377627578436528, 0.7780493342090691, 0.8325116191049905, 0.7733139827528587, 0.8204581090450974, 0.8072469581253814, 0.7772689967512373, 0.8380884835134805, 0.8352766092977797, 0.81056330619274, 0.8105961431897325, 0.21281200627369157, 0.4858277933780403, 0.20909100660491586, 0.6371578431034475, 0.5043848901167267, 0.5978667201948217, 0.4684092517309647, 0.4787966523669177, 0.2815433104350301, 0.5984796626509776, 0.6287822587549747, 0.6272747653540849, 0.5425304225099407, 0.6295126445611188, 0.4806763511353441, 0.6246734722737342, 0.6021885304142265, 0.5613089227407149, 0.768436615743199, 0.7696704426628069, 0.8676218116345034, 0.7551004788760685, 0.8522946843230192, 0.8481999182474562, 0.8747301143433651, 0.8680095887498444, 0.8262296263512627, 0.12796285955420195, 0.12270794847249433, 0.1216771306249469, 0.11246910731789506, 0.15676699220351165, 0.12006692529482244, 0.09918550402418136, 0.15673788762363206, 0.11124780769214959, 0.28712923777028687, 0.17607130235071056, 0.7096120671874082, 0.2549602739762521, 0.5007817856642485, 0.13980139632841715, 0.17466189418973133, 0.19334228939387954, 0.19358970190158453, 0.476585268386582, 0.4770369013020247, 0.5142618463983026, 0.49096697406298007, 0.5316706349910427, 0.4922544421426609, 0.5682991233382277, 0.5299286855931528, 0.4607264718526144, 0.4108678853056398, 0.42858364933963355, 0.39968079062641904, 0.40411722762741975, 0.3874659972568677, 0.4093226009392451, 0.4479992564312909, 0.3974227940201649, 0.42539746203207074, 0.19059711005335433, 0.18696664191610568, 0.20051778065351145, 0.1920742876748791, 0.20136411625045625, 0.18213291510249607, 0.20534906993839708, 0.21719149005013982, 0.19270177350409945, 0.47338917328206975, 0.19688572097215096, 0.20531240217932534, 0.2076788678185908, 0.19229605910638314, 0.23836131092713742, 0.4250325717765937, 0.5567692192990363, 0.22187043495606673, 0.16446578728079642, 0.1522620147280721, 0.18511186614029462, 0.15951506829744844, 0.1977432211419069, 0.43874993088742154, 0.1821430558502548, 0.16218945898676884, 0.8747832299818858, 0.8327456763831875, 0.20782170436748115, 0.2061351639469995, 0.8551173958689806, 0.2083799608744139, 0.7877056107463263, 0.21176147841707682, 0.21052878887802384, 0.8525027506719952, 0.17268562049930802, 0.19548720225425953, 0.19904698728554215, 0.19467208016957283, 0.17724029672371144, 0.21106626509197068, 0.17695577178487587, 0.18290816653793007, 0.184761851221252, 0.08571469665711429, 0.08379814588503631, 0.09181126556824526, 0.07549085437242575, 0.08577382573434533, 0.09055661862494613, 0.09971768853912566, 0.0989601888758399, 0.08086136060750682]}, "mutation_prompt": null}
{"id": "bd859772-020e-4a8c-887a-63e0ed45553a", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.6 + 0.4 * (self.evaluations / self.budget)  # Changed scaling factor\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        learning_rate = np.exp(-5 * self.evaluations / self.budget)  # New adaptive learning rate\n        perturbation = np.random.normal(0, 0.05 * learning_rate, self.dim)  # Modified perturbation with learning rate\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive learning rate in local search to dynamically adjust exploration intensity based on current progress.", "configspace": "", "generation": 87, "fitness": 0.4765513472185299, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.29.", "error": "", "parent_id": "7a347b44-9ff6-47a6-8ed0-f8a1932a4f44", "metadata": {"aucs": [0.872704305333215, 0.8698741527401996, 0.8785730210926737, 0.8493523346541219, 0.8619786196798195, 0.8892049475658691, 0.8713002389455439, 0.8971594040747423, 0.8785495345011691, 0.7771708376365791, 0.7326293001589845, 0.7915268101243401, 0.7736088090819575, 0.8021270712329625, 0.766149757170679, 0.7690211998042109, 0.786553811282196, 0.5488179656612362, 0.14107798900035728, 0.14529941353029407, 0.10387230184199248, 0.14977860210081906, 0.14434142384353799, 0.1543867819409006, 0.12509346051896375, 0.10547450772692024, 0.10851031497710195, 0.12023127982396087, 0.13556684627980908, 0.12049478907781008, 0.38545407799757925, 0.1055523243773634, 0.1019528290214865, 0.13205877858230197, 0.13508950722426127, 0.13392294676076022, 0.7329429517358156, 0.8815519859206151, 0.7723189481972105, 0.9615663827733748, 0.8522957675234408, 0.9445794116929976, 0.7773154428143931, 0.774513819002548, 0.9328970534447205, 0.6818077243915808, 0.6313314536390476, 0.6514495390188919, 0.14881706085175594, 0.5999289045470567, 0.7048647498606295, 0.5357802916976644, 0.6143970578449208, 0.5552895963426603, 0.22997152883474636, 0.8930529885599152, 0.9040107914170339, 0.915928798260707, 0.918866808888051, 0.9118915405426848, 0.9069594708529818, 0.8897675264347997, 0.6061216991103967, 0.4477868733153666, 0.5133776973171181, 0.2855058567126054, 0.5425720696955567, 0.7697496733521056, 0.7367872710750766, 0.3499340983545616, 0.4215142582770063, 0.603724964183823, 0.6502427532868043, 0.5956331863218991, 0.13317991836246745, 0.6877271850989236, 0.4929831830462428, 0.3813756365372145, 0.4546994739754133, 0.41257038436600724, 0.8046099203146704, 0.7527417979117319, 0.7084769114950098, 0.7349230338096765, 0.7662262315835069, 0.7534899890212695, 0.7791961874926133, 0.7561280119735909, 0.7377627578436528, 0.7780587383638803, 0.8325116191049905, 0.773365670274349, 0.8204543957952701, 0.8072469581253814, 0.7772689967512373, 0.8380884835134805, 0.8352766092977797, 0.81056330619274, 0.8105961431897325, 0.21281200627369157, 0.4858277933780403, 0.20909100660491586, 0.6371578431034475, 0.5043848901167267, 0.5978667201948217, 0.4684092517309647, 0.4787966523669177, 0.2815433104350301, 0.5985269658744631, 0.6287809550432517, 0.6272695572360032, 0.542499288152074, 0.6295011396093079, 0.4807082831055973, 0.6246919135311813, 0.6020190897756357, 0.56131011276768, 0.7684530198795783, 0.7696961283471055, 0.8676540606052359, 0.75493982319404, 0.852301965006319, 0.8481431575378104, 0.8745959487964318, 0.8676978171364289, 0.8263027715990454, 0.12913933643962805, 0.12235444569850296, 0.12201427480256721, 0.11327138167512096, 0.15895175018875585, 0.12045552931855907, 0.09918550402418136, 0.15565262253915446, 0.10836015135745014, 0.28663494009498236, 0.17628089730529373, 0.7097645889321561, 0.25500725426181003, 0.5012150350262246, 0.14015398935927037, 0.17475965205937505, 0.1932227380917565, 0.19545565817502542, 0.47680544021413307, 0.47726000832611926, 0.5145572576314384, 0.4905938266082037, 0.5316659059925218, 0.4922253568930004, 0.5685274726113488, 0.5298669659412305, 0.4609324124229246, 0.4118294540052426, 0.4286259159449445, 0.40032516040679034, 0.40399963543008066, 0.38705540374901615, 0.4091589147249768, 0.44793695861436067, 0.3976259839163473, 0.4255035935202055, 0.19059711005335433, 0.18696450120813757, 0.20025621791002768, 0.1920742876748791, 0.20299640308419198, 0.18213291510249607, 0.20535977304295006, 0.21722497980334576, 0.19270177350409945, 0.4744930498497324, 0.19615357348716744, 0.20497022559791556, 0.20767801105112726, 0.19234719769387087, 0.23821683508589864, 0.41950372324599805, 0.557181012750556, 0.22224561908551388, 0.16444979375349744, 0.15224787015691177, 0.1847902251361585, 0.1594826977380286, 0.19772346705738275, 0.4379989113540951, 0.18209804022280296, 0.16215115265567492, 0.8739970190928747, 0.8331040570634733, 0.20777656703667902, 0.20611179100805288, 0.8551288587890221, 0.20835637619046854, 0.787726992800349, 0.21140290750118074, 0.21051666576687866, 0.8525844653264105, 0.17268562049930802, 0.19548720225425953, 0.19904698728554215, 0.1946726032082493, 0.17724029672371144, 0.21106626509197068, 0.18954154376165766, 0.18290816653793007, 0.184761851221252, 0.08633692681853844, 0.07776685872920974, 0.09179625598209373, 0.07646886274443931, 0.08585236888011627, 0.09069220467269301, 0.09970720084827078, 0.09906663284994777, 0.08086136060750682]}, "mutation_prompt": null}
{"id": "7d3abda8-b75b-451c-88bf-3930f8e80c31", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.6 + 0.4 * (self.evaluations / self.budget)  # Changed scaling factor\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        learning_rate = np.exp(-5 * self.evaluations / self.budget)  # New adaptive learning rate\n        perturbation = np.random.normal(0, 0.05 * learning_rate, self.dim)  # Modified perturbation with learning rate\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive learning rate in local search to dynamically adjust exploration intensity based on current progress.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bd859772-020e-4a8c-887a-63e0ed45553a", "metadata": {"aucs": [0.872704305333215, 0.8698741527401996, 0.8785730210926737, 0.8493523346541219, 0.8619786196798195, 0.8892049475658691, 0.8713002389455439, 0.8971594040747423, 0.8785495345011691, 0.7771708376365791, 0.7326293001589845, 0.7915268101243401, 0.7736088090819575, 0.8021270712329625, 0.766149757170679, 0.7690211998042109, 0.786553811282196, 0.5488179656612362, 0.14107798900035728, 0.14529941353029407, 0.10387230184199248, 0.14977860210081906, 0.14434142384353799, 0.1543867819409006, 0.12509346051896375, 0.10547450772692024, 0.10851031497710195, 0.12023127982396087, 0.13556684627980908, 0.12049478907781008, 0.38545407799757925, 0.1055523243773634, 0.1019528290214865, 0.13205877858230197, 0.13508950722426127, 0.13392294676076022, 0.7329429517358156, 0.8815519859206151, 0.7723189481972105, 0.9615663827733748, 0.8522957675234408, 0.9445794116929976, 0.7773154428143931, 0.774513819002548, 0.9328970534447205, 0.6818077243915808, 0.6313314536390476, 0.6514495390188919, 0.14881706085175594, 0.5999289045470567, 0.7048647498606295, 0.5357802916976644, 0.6143970578449208, 0.5552895963426603, 0.22997152883474636, 0.8930529885599152, 0.9040107914170339, 0.915928798260707, 0.918866808888051, 0.9118915405426848, 0.9069594708529818, 0.8897675264347997, 0.6061216991103967, 0.4477868733153666, 0.5133776973171181, 0.2855058567126054, 0.5425720696955567, 0.7697496733521056, 0.7367872710750766, 0.3499340983545616, 0.4215142582770063, 0.603724964183823, 0.6502427532868043, 0.5956331863218991, 0.13317991836246745, 0.6877271850989236, 0.4929831830462428, 0.3813756365372145, 0.4546994739754133, 0.41257038436600724, 0.8046099203146704, 0.7527417979117319, 0.7084769114950098, 0.7349230338096765, 0.7662262315835069, 0.7534899890212695, 0.7791961874926133, 0.7561280119735909, 0.7377627578436528, 0.7780587383638803, 0.8325116191049905, 0.773365670274349, 0.8204543957952701, 0.8072469581253814, 0.7772689967512373, 0.8380884835134805, 0.8352766092977797, 0.81056330619274, 0.8105961431897325, 0.21281200627369157, 0.4858277933780403, 0.20909100660491586, 0.6371578431034475, 0.5043848901167267, 0.5978667201948217, 0.4684092517309647, 0.4787966523669177, 0.2815433104350301, 0.5985269658744631, 0.6287809550432517, 0.6272695572360032, 0.542499288152074, 0.6295011396093079, 0.4807082831055973, 0.6246919135311813, 0.6020190897756357, 0.56131011276768, 0.7684530198795783, 0.7696961283471055, 0.8676540606052359, 0.75493982319404, 0.852301965006319, 0.8481431575378104, 0.8745959487964318, 0.8676978171364289, 0.8263027715990454, 0.12913933643962805, 0.12235444569850296, 0.12201427480256721, 0.11327138167512096, 0.15895175018875585, 0.12045552931855907, 0.09918550402418136, 0.15565262253915446, 0.10836015135745014, 0.28663494009498236, 0.17628089730529373, 0.7097645889321561, 0.25500725426181003, 0.5012150350262246, 0.14015398935927037, 0.17475965205937505, 0.1932227380917565, 0.19545565817502542, 0.47680544021413307, 0.47726000832611926, 0.5145572576314384, 0.4905938266082037, 0.5316659059925218, 0.4922253568930004, 0.5685274726113488, 0.5298669659412305, 0.4609324124229246, 0.4118294540052426, 0.4286259159449445, 0.40032516040679034, 0.40399963543008066, 0.38705540374901615, 0.4091589147249768, 0.44793695861436067, 0.3976259839163473, 0.4255035935202055, 0.19059711005335433, 0.18696450120813757, 0.20025621791002768, 0.1920742876748791, 0.20299640308419198, 0.18213291510249607, 0.20535977304295006, 0.21722497980334576, 0.19270177350409945, 0.4744930498497324, 0.19615357348716744, 0.20497022559791556, 0.20767801105112726, 0.19234719769387087, 0.23821683508589864, 0.41950372324599805, 0.557181012750556, 0.22224561908551388, 0.16444979375349744, 0.15224787015691177, 0.1847902251361585, 0.1594826977380286, 0.19772346705738275, 0.4379989113540951, 0.18209804022280296, 0.16215115265567492, 0.8739970190928747, 0.8331040570634733, 0.20777656703667902, 0.20611179100805288, 0.8551288587890221, 0.20835637619046854, 0.787726992800349, 0.21140290750118074, 0.21051666576687866, 0.8525844653264105, 0.17268562049930802, 0.19548720225425953, 0.19904698728554215, 0.1946726032082493, 0.17724029672371144, 0.21106626509197068, 0.18954154376165766, 0.18290816653793007, 0.184761851221252, 0.08633692681853844, 0.07776685872920974, 0.09179625598209373, 0.07646886274443931, 0.08585236888011627, 0.09069220467269301, 0.09970720084827078, 0.09906663284994777, 0.08086136060750682]}, "mutation_prompt": null}
{"id": "3c8fb735-b6ef-4dac-a25a-7db9552be047", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.6 + 0.4 * (self.evaluations / self.budget)  # Changed scaling factor\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        learning_rate = np.exp(-5 * self.evaluations / self.budget)  # New adaptive learning rate\n        perturbation = np.random.normal(0, 0.05 * learning_rate, self.dim)  # Modified perturbation with learning rate\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive learning rate in local search to dynamically adjust exploration intensity based on current progress.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bd859772-020e-4a8c-887a-63e0ed45553a", "metadata": {"aucs": [0.872704305333215, 0.8698741527401996, 0.8785730210926737, 0.8493523346541219, 0.8619786196798195, 0.8892049475658691, 0.8713002389455439, 0.8971594040747423, 0.8785495345011691, 0.7771708376365791, 0.7326293001589845, 0.7915268101243401, 0.7736088090819575, 0.8021270712329625, 0.766149757170679, 0.7690211998042109, 0.786553811282196, 0.5488179656612362, 0.14107798900035728, 0.14529941353029407, 0.10387230184199248, 0.14977860210081906, 0.14434142384353799, 0.1543867819409006, 0.12509346051896375, 0.10547450772692024, 0.10851031497710195, 0.12023127982396087, 0.13556684627980908, 0.12049478907781008, 0.38545407799757925, 0.1055523243773634, 0.1019528290214865, 0.13205877858230197, 0.13508950722426127, 0.13392294676076022, 0.7329429517358156, 0.8815519859206151, 0.7723189481972105, 0.9615663827733748, 0.8522957675234408, 0.9445794116929976, 0.7773154428143931, 0.774513819002548, 0.9328970534447205, 0.6818077243915808, 0.6313314536390476, 0.6514495390188919, 0.14881706085175594, 0.5999289045470567, 0.7048647498606295, 0.5357802916976644, 0.6143970578449208, 0.5552895963426603, 0.22997152883474636, 0.8930529885599152, 0.9040107914170339, 0.915928798260707, 0.918866808888051, 0.9118915405426848, 0.9069594708529818, 0.8897675264347997, 0.6061216991103967, 0.4477868733153666, 0.5133776973171181, 0.2855058567126054, 0.5425720696955567, 0.7697496733521056, 0.7367872710750766, 0.3499340983545616, 0.4215142582770063, 0.603724964183823, 0.6502427532868043, 0.5956331863218991, 0.13317991836246745, 0.6877271850989236, 0.4929831830462428, 0.3813756365372145, 0.4546994739754133, 0.41257038436600724, 0.8046099203146704, 0.7527417979117319, 0.7084769114950098, 0.7349230338096765, 0.7662262315835069, 0.7534899890212695, 0.7791961874926133, 0.7561280119735909, 0.7377627578436528, 0.7780587383638803, 0.8325116191049905, 0.773365670274349, 0.8204543957952701, 0.8072469581253814, 0.7772689967512373, 0.8380884835134805, 0.8352766092977797, 0.81056330619274, 0.8105961431897325, 0.21281200627369157, 0.4858277933780403, 0.20909100660491586, 0.6371578431034475, 0.5043848901167267, 0.5978667201948217, 0.4684092517309647, 0.4787966523669177, 0.2815433104350301, 0.5985269658744631, 0.6287809550432517, 0.6272695572360032, 0.542499288152074, 0.6295011396093079, 0.4807082831055973, 0.6246919135311813, 0.6020190897756357, 0.56131011276768, 0.7684530198795783, 0.7696961283471055, 0.8676540606052359, 0.75493982319404, 0.852301965006319, 0.8481431575378104, 0.8745959487964318, 0.8676978171364289, 0.8263027715990454, 0.12913933643962805, 0.12235444569850296, 0.12201427480256721, 0.11327138167512096, 0.15895175018875585, 0.12045552931855907, 0.09918550402418136, 0.15565262253915446, 0.10836015135745014, 0.28663494009498236, 0.17628089730529373, 0.7097645889321561, 0.25500725426181003, 0.5012150350262246, 0.14015398935927037, 0.17475965205937505, 0.1932227380917565, 0.19545565817502542, 0.47680544021413307, 0.47726000832611926, 0.5145572576314384, 0.4905938266082037, 0.5316659059925218, 0.4922253568930004, 0.5685274726113488, 0.5298669659412305, 0.4609324124229246, 0.4118294540052426, 0.4286259159449445, 0.40032516040679034, 0.40399963543008066, 0.38705540374901615, 0.4091589147249768, 0.44793695861436067, 0.3976259839163473, 0.4255035935202055, 0.19059711005335433, 0.18696450120813757, 0.20025621791002768, 0.1920742876748791, 0.20299640308419198, 0.18213291510249607, 0.20535977304295006, 0.21722497980334576, 0.19270177350409945, 0.4744930498497324, 0.19615357348716744, 0.20497022559791556, 0.20767801105112726, 0.19234719769387087, 0.23821683508589864, 0.41950372324599805, 0.557181012750556, 0.22224561908551388, 0.16444979375349744, 0.15224787015691177, 0.1847902251361585, 0.1594826977380286, 0.19772346705738275, 0.4379989113540951, 0.18209804022280296, 0.16215115265567492, 0.8739970190928747, 0.8331040570634733, 0.20777656703667902, 0.20611179100805288, 0.8551288587890221, 0.20835637619046854, 0.787726992800349, 0.21140290750118074, 0.21051666576687866, 0.8525844653264105, 0.17268562049930802, 0.19548720225425953, 0.19904698728554215, 0.1946726032082493, 0.17724029672371144, 0.21106626509197068, 0.18954154376165766, 0.18290816653793007, 0.184761851221252, 0.08633692681853844, 0.07776685872920974, 0.09179625598209373, 0.07646886274443931, 0.08585236888011627, 0.09069220467269301, 0.09970720084827078, 0.09906663284994777, 0.08086136060750682]}, "mutation_prompt": null}
{"id": "06581741-6177-4d4e-a63e-367cd8c60077", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        diversity = np.std(population, axis=0).mean()  # Calculate population diversity\n        adaptive_tournament_size = max(2, int(self.tournament_size + diversity))  # Adaptive tournament size\n        indices = np.random.choice(len(population), adaptive_tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        diversity_factor = 0.5 + np.std(population, axis=0).mean() / 10  # New dynamic mutation scaling\n        scale = 0.6 + 0.4 * (self.evaluations / self.budget) * diversity_factor  # Adjusted scale\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        learning_rate = np.exp(-5 * self.evaluations / self.budget)  # New adaptive learning rate\n        perturbation = np.random.normal(0, 0.05 * learning_rate, self.dim)  # Modified perturbation with learning rate\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Enhance mutation and selection by introducing dynamic mutation factor scaling and adaptive tournament size based on diversity.", "configspace": "", "generation": 90, "fitness": 0.474809701792232, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.29.", "error": "", "parent_id": "bd859772-020e-4a8c-887a-63e0ed45553a", "metadata": {"aucs": [0.8796835293208994, 0.8738684478586733, 0.8878444815358356, 0.8643859734245072, 0.88541167622549, 0.8935896726236001, 0.8774102729439905, 0.9064006972904518, 0.8787057590941579, 0.7794967085726342, 0.7780381945894415, 0.8091944036370267, 0.7781042469765508, 0.8230871930206518, 0.7478255694017627, 0.7749621714176165, 0.7950282043969161, 0.6257545296771985, 0.20850879236080588, 0.12395774312974195, 0.1493698738833178, 0.16811703570286607, 0.12637832844048624, 0.15587339160060187, 0.10725685639060034, 0.14394197728058533, 0.21430956745048602, 0.134782209836955, 0.10872374646325411, 0.11887295792930475, 0.12543548925793058, 0.13741184380790783, 0.1066859438209764, 0.0753202560172389, 0.09596701061070667, 0.11567650251633443, 0.7308169975825863, 0.8632518913535004, 0.07430299849169675, 0.9479116465832196, 0.9029780688158734, 0.9111939323671203, 0.7376014939784221, 0.787986659236263, 0.9552008228809262, 0.5097368060191452, 0.5838838443979825, 0.5448986882173901, 0.5232700335891166, 0.6816961919912565, 0.7325668603257955, 0.5525464560970565, 0.5585916152820546, 0.6996363551495397, 0.8931246395341905, 0.9113573323874498, 0.8822656807582968, 0.28056605362789466, 0.8907956504339496, 0.9019664728604505, 0.9107844046224606, 0.869806375921782, 0.8433837823664481, 0.7110179395912484, 0.5764997745636202, 0.7157598357008699, 0.6936585287047862, 0.4138256666338448, 0.13236216371732357, 0.3860519750615311, 0.7955766658772991, 0.1331026210919637, 0.7366821254974573, 0.627177480849487, 0.13194692250546736, 0.7531724741770589, 0.34715198845813033, 0.6953025147622038, 0.5178091935816466, 0.36212783848729935, 0.2520423643257961, 0.7917680842351162, 0.7686570351222612, 0.7499671096994089, 0.7643887402446666, 0.7708946095888278, 0.7696264404854529, 0.7754926049256792, 0.7457362906695963, 0.788453478761633, 0.7950515736603141, 0.4363492045209355, 0.7598024740474927, 0.3076085152474314, 0.8539673753716133, 0.8368788425369467, 0.8020141565796871, 0.8239749021831758, 0.8486752778721556, 0.34293101065797615, 0.33699740664725264, 0.24968638144034438, 0.24902890757100882, 0.5896340582285602, 0.707891334028841, 0.3984158963905907, 0.42648880840189984, 0.30132452189616243, 0.5354069642065125, 0.6200661326741166, 0.6377380674581173, 0.6537856423481723, 0.6597239659076719, 0.633865916941708, 0.6656267614012462, 0.6726447954905425, 0.6898435816145265, 0.8634478077576252, 0.8343935212603367, 0.8732777327425271, 0.8055743585257926, 0.8704036647022919, 0.8509662040225278, 0.8328047977255025, 0.8807211150601659, 0.8621924014096707, 0.12977843630962016, 0.11595388611349355, 0.12984370334087447, 0.1151643652365627, 0.12178451082838404, 0.1058776740831816, 0.11065308850581679, 0.14893119504179653, 0.1309261074976903, 0.1373351352385107, 0.23506361092635075, 0.1501705725394098, 0.17645020254704635, 0.15667438252547783, 0.17618143356963356, 0.2000351353361557, 0.19697872154789153, 0.4440475792367047, 0.6376306437931671, 0.5926360394356092, 0.5892608964063182, 0.5696146034048223, 0.5346642536437642, 0.589959025811059, 0.594963023528768, 0.5810878019656411, 0.5731031763717791, 0.44762551683036467, 0.5253315024552379, 0.4613924734831719, 0.4660533763318705, 0.4803898902226915, 0.47666800421016364, 0.49862743242846685, 0.5046121631300751, 0.5811633042158606, 0.22244001088809395, 0.18770997127140876, 0.2335351531883405, 0.19314167121569437, 0.20133698463304506, 0.19750193216561318, 0.22146871206771324, 0.18516405839124517, 0.20583119488848833, 0.20866959876802738, 0.23451514445554933, 0.5752150365096491, 0.21576014162771995, 0.20609599899984965, 0.23554504669937348, 0.18774925244290674, 0.21917852301670726, 0.21191841433394043, 0.16249857357662112, 0.1849213122972171, 0.172306938144131, 0.1680072586068332, 0.1977871941501096, 0.4363219456505787, 0.8819798488749573, 0.6894516938725765, 0.8597700840630734, 0.8691755783934063, 0.204073807469474, 0.2052335107226343, 0.2089887816609407, 0.2096920154023062, 0.12557643336199598, 0.21138581957629599, 0.8452057024231958, 0.2131239071114701, 0.17354624886033254, 0.2267930089670731, 0.18048131232257913, 0.18512100445080737, 0.18262640204740788, 0.1880219574432277, 0.19436574742373325, 0.18992062339615556, 0.17797114534098712, 0.09453398126516332, 0.08409062826603186, 0.08155722594258019, 0.0849707101515329, 0.10319755386842189, 0.09609245055154136, 0.08692565646182737, 0.09429436507233768, 0.08651588704526514]}, "mutation_prompt": null}
{"id": "46a1573e-153e-421d-b630-cb985c259c86", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.6 + 0.4 * (self.evaluations / self.budget)  # Changed scaling factor\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        learning_rate = np.exp(-5 * self.evaluations / self.budget)  # New adaptive learning rate\n        perturbation = np.random.normal(0, 0.05 * learning_rate, self.dim)  # Modified perturbation with learning rate\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive learning rate in local search to dynamically adjust exploration intensity based on current progress.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bd859772-020e-4a8c-887a-63e0ed45553a", "metadata": {"aucs": [0.872704305333215, 0.8698741527401996, 0.8785730210926737, 0.8493523346541219, 0.8619786196798195, 0.8892049475658691, 0.8713002389455439, 0.8971594040747423, 0.8785495345011691, 0.7771708376365791, 0.7326293001589845, 0.7915268101243401, 0.7736088090819575, 0.8021270712329625, 0.766149757170679, 0.7690211998042109, 0.786553811282196, 0.5488179656612362, 0.14107798900035728, 0.14529941353029407, 0.10387230184199248, 0.14977860210081906, 0.14434142384353799, 0.1543867819409006, 0.12509346051896375, 0.10547450772692024, 0.10851031497710195, 0.12023127982396087, 0.13556684627980908, 0.12049478907781008, 0.38545407799757925, 0.1055523243773634, 0.1019528290214865, 0.13205877858230197, 0.13508950722426127, 0.13392294676076022, 0.7329429517358156, 0.8815519859206151, 0.7723189481972105, 0.9615663827733748, 0.8522957675234408, 0.9445794116929976, 0.7773154428143931, 0.774513819002548, 0.9328970534447205, 0.6818077243915808, 0.6313314536390476, 0.6514495390188919, 0.14881706085175594, 0.5999289045470567, 0.7048647498606295, 0.5357802916976644, 0.6143970578449208, 0.5552895963426603, 0.22997152883474636, 0.8930529885599152, 0.9040107914170339, 0.915928798260707, 0.918866808888051, 0.9118915405426848, 0.9069594708529818, 0.8897675264347997, 0.6061216991103967, 0.4477868733153666, 0.5133776973171181, 0.2855058567126054, 0.5425720696955567, 0.7697496733521056, 0.7367872710750766, 0.3499340983545616, 0.4215142582770063, 0.603724964183823, 0.6502427532868043, 0.5956331863218991, 0.13317991836246745, 0.6877271850989236, 0.4929831830462428, 0.3813756365372145, 0.4546994739754133, 0.41257038436600724, 0.8046099203146704, 0.7527417979117319, 0.7084769114950098, 0.7349230338096765, 0.7662262315835069, 0.7534899890212695, 0.7791961874926133, 0.7561280119735909, 0.7377627578436528, 0.7780587383638803, 0.8325116191049905, 0.773365670274349, 0.8204543957952701, 0.8072469581253814, 0.7772689967512373, 0.8380884835134805, 0.8352766092977797, 0.81056330619274, 0.8105961431897325, 0.21281200627369157, 0.4858277933780403, 0.20909100660491586, 0.6371578431034475, 0.5043848901167267, 0.5978667201948217, 0.4684092517309647, 0.4787966523669177, 0.2815433104350301, 0.5985269658744631, 0.6287809550432517, 0.6272695572360032, 0.542499288152074, 0.6295011396093079, 0.4807082831055973, 0.6246919135311813, 0.6020190897756357, 0.56131011276768, 0.7684530198795783, 0.7696961283471055, 0.8676540606052359, 0.75493982319404, 0.852301965006319, 0.8481431575378104, 0.8745959487964318, 0.8676978171364289, 0.8263027715990454, 0.12913933643962805, 0.12235444569850296, 0.12201427480256721, 0.11327138167512096, 0.15895175018875585, 0.12045552931855907, 0.09918550402418136, 0.15565262253915446, 0.10836015135745014, 0.28663494009498236, 0.17628089730529373, 0.7097645889321561, 0.25500725426181003, 0.5012150350262246, 0.14015398935927037, 0.17475965205937505, 0.1932227380917565, 0.19545565817502542, 0.47680544021413307, 0.47726000832611926, 0.5145572576314384, 0.4905938266082037, 0.5316659059925218, 0.4922253568930004, 0.5685274726113488, 0.5298669659412305, 0.4609324124229246, 0.4118294540052426, 0.4286259159449445, 0.40032516040679034, 0.40399963543008066, 0.38705540374901615, 0.4091589147249768, 0.44793695861436067, 0.3976259839163473, 0.4255035935202055, 0.19059711005335433, 0.18696450120813757, 0.20025621791002768, 0.1920742876748791, 0.20299640308419198, 0.18213291510249607, 0.20535977304295006, 0.21722497980334576, 0.19270177350409945, 0.4744930498497324, 0.19615357348716744, 0.20497022559791556, 0.20767801105112726, 0.19234719769387087, 0.23821683508589864, 0.41950372324599805, 0.557181012750556, 0.22224561908551388, 0.16444979375349744, 0.15224787015691177, 0.1847902251361585, 0.1594826977380286, 0.19772346705738275, 0.4379989113540951, 0.18209804022280296, 0.16215115265567492, 0.8739970190928747, 0.8331040570634733, 0.20777656703667902, 0.20611179100805288, 0.8551288587890221, 0.20835637619046854, 0.787726992800349, 0.21140290750118074, 0.21051666576687866, 0.8525844653264105, 0.17268562049930802, 0.19548720225425953, 0.19904698728554215, 0.1946726032082493, 0.17724029672371144, 0.21106626509197068, 0.18954154376165766, 0.18290816653793007, 0.184761851221252, 0.08633692681853844, 0.07776685872920974, 0.09179625598209373, 0.07646886274443931, 0.08585236888011627, 0.09069220467269301, 0.09970720084827078, 0.09906663284994777, 0.08086136060750682]}, "mutation_prompt": null}
{"id": "1f2091db-8a4c-42d6-a1ea-4012f8243429", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.6 + 0.4 * (self.evaluations / self.budget)  # Changed scaling factor\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        learning_rate = np.exp(-5 * self.evaluations / self.budget)  # New adaptive learning rate\n        perturbation = np.random.normal(0, 0.05 * learning_rate, self.dim)  # Modified perturbation with learning rate\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive learning rate in local search to dynamically adjust exploration intensity based on current progress.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bd859772-020e-4a8c-887a-63e0ed45553a", "metadata": {"aucs": [0.872704305333215, 0.8698741527401996, 0.8785730210926737, 0.8493523346541219, 0.8619786196798195, 0.8892049475658691, 0.8713002389455439, 0.8971594040747423, 0.8785495345011691, 0.7771708376365791, 0.7326293001589845, 0.7915268101243401, 0.7736088090819575, 0.8021270712329625, 0.766149757170679, 0.7690211998042109, 0.786553811282196, 0.5488179656612362, 0.14107798900035728, 0.14529941353029407, 0.10387230184199248, 0.14977860210081906, 0.14434142384353799, 0.1543867819409006, 0.12509346051896375, 0.10547450772692024, 0.10851031497710195, 0.12023127982396087, 0.13556684627980908, 0.12049478907781008, 0.38545407799757925, 0.1055523243773634, 0.1019528290214865, 0.13205877858230197, 0.13508950722426127, 0.13392294676076022, 0.7329429517358156, 0.8815519859206151, 0.7723189481972105, 0.9615663827733748, 0.8522957675234408, 0.9445794116929976, 0.7773154428143931, 0.774513819002548, 0.9328970534447205, 0.6818077243915808, 0.6313314536390476, 0.6514495390188919, 0.14881706085175594, 0.5999289045470567, 0.7048647498606295, 0.5357802916976644, 0.6143970578449208, 0.5552895963426603, 0.22997152883474636, 0.8930529885599152, 0.9040107914170339, 0.915928798260707, 0.918866808888051, 0.9118915405426848, 0.9069594708529818, 0.8897675264347997, 0.6061216991103967, 0.4477868733153666, 0.5133776973171181, 0.2855058567126054, 0.5425720696955567, 0.7697496733521056, 0.7367872710750766, 0.3499340983545616, 0.4215142582770063, 0.603724964183823, 0.6502427532868043, 0.5956331863218991, 0.13317991836246745, 0.6877271850989236, 0.4929831830462428, 0.3813756365372145, 0.4546994739754133, 0.41257038436600724, 0.8046099203146704, 0.7527417979117319, 0.7084769114950098, 0.7349230338096765, 0.7662262315835069, 0.7534899890212695, 0.7791961874926133, 0.7561280119735909, 0.7377627578436528, 0.7780587383638803, 0.8325116191049905, 0.773365670274349, 0.8204543957952701, 0.8072469581253814, 0.7772689967512373, 0.8380884835134805, 0.8352766092977797, 0.81056330619274, 0.8105961431897325, 0.21281200627369157, 0.4858277933780403, 0.20909100660491586, 0.6371578431034475, 0.5043848901167267, 0.5978667201948217, 0.4684092517309647, 0.4787966523669177, 0.2815433104350301, 0.5985269658744631, 0.6287809550432517, 0.6272695572360032, 0.542499288152074, 0.6295011396093079, 0.4807082831055973, 0.6246919135311813, 0.6020190897756357, 0.56131011276768, 0.7684530198795783, 0.7696961283471055, 0.8676540606052359, 0.75493982319404, 0.852301965006319, 0.8481431575378104, 0.8745959487964318, 0.8676978171364289, 0.8263027715990454, 0.12913933643962805, 0.12235444569850296, 0.12201427480256721, 0.11327138167512096, 0.15895175018875585, 0.12045552931855907, 0.09918550402418136, 0.15565262253915446, 0.10836015135745014, 0.28663494009498236, 0.17628089730529373, 0.7097645889321561, 0.25500725426181003, 0.5012150350262246, 0.14015398935927037, 0.17475965205937505, 0.1932227380917565, 0.19545565817502542, 0.47680544021413307, 0.47726000832611926, 0.5145572576314384, 0.4905938266082037, 0.5316659059925218, 0.4922253568930004, 0.5685274726113488, 0.5298669659412305, 0.4609324124229246, 0.4118294540052426, 0.4286259159449445, 0.40032516040679034, 0.40399963543008066, 0.38705540374901615, 0.4091589147249768, 0.44793695861436067, 0.3976259839163473, 0.4255035935202055, 0.19059711005335433, 0.18696450120813757, 0.20025621791002768, 0.1920742876748791, 0.20299640308419198, 0.18213291510249607, 0.20535977304295006, 0.21722497980334576, 0.19270177350409945, 0.4744930498497324, 0.19615357348716744, 0.20497022559791556, 0.20767801105112726, 0.19234719769387087, 0.23821683508589864, 0.41950372324599805, 0.557181012750556, 0.22224561908551388, 0.16444979375349744, 0.15224787015691177, 0.1847902251361585, 0.1594826977380286, 0.19772346705738275, 0.4379989113540951, 0.18209804022280296, 0.16215115265567492, 0.8739970190928747, 0.8331040570634733, 0.20777656703667902, 0.20611179100805288, 0.8551288587890221, 0.20835637619046854, 0.787726992800349, 0.21140290750118074, 0.21051666576687866, 0.8525844653264105, 0.17268562049930802, 0.19548720225425953, 0.19904698728554215, 0.1946726032082493, 0.17724029672371144, 0.21106626509197068, 0.18954154376165766, 0.18290816653793007, 0.184761851221252, 0.08633692681853844, 0.07776685872920974, 0.09179625598209373, 0.07646886274443931, 0.08585236888011627, 0.09069220467269301, 0.09970720084827078, 0.09906663284994777, 0.08086136060750682]}, "mutation_prompt": null}
{"id": "72e87891-de83-4e42-afe1-28d684905e73", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.6 + 0.3 * np.sin((self.evaluations / self.budget) * np.pi)  # Dynamic scale with sinusoidal pattern\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.6 + 0.4 * np.sin((1 - (self.evaluations / self.budget)) * np.pi)  # Dynamic cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        learning_rate = np.exp(-5 * self.evaluations / self.budget)  # New adaptive learning rate\n        perturbation = np.random.normal(0, 0.05 * learning_rate, self.dim)  # Modified perturbation with learning rate\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Refine mutation and crossover strategies using dynamic pressure to improve convergence speed and precision.", "configspace": "", "generation": 93, "fitness": 0.4301193373738447, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.29.", "error": "", "parent_id": "bd859772-020e-4a8c-887a-63e0ed45553a", "metadata": {"aucs": [0.9234564364584864, 0.9274637640207852, 0.930116878353344, 0.9275183202628102, 0.9244215961714777, 0.9303697695649558, 0.9322516157351469, 0.9231940154748914, 0.9314150434787893, 0.8744409524533833, 0.868025467552211, 0.8552065115273781, 0.8611733833748825, 0.8493637897820525, 0.8500930404022877, 0.883121899223062, 0.8571381446423894, 0.8598921903276183, 0.1859371369307612, 0.17758565792652203, 0.15281224932474546, 0.14807224793530427, 0.17721712822759472, 0.14572937379792672, 0.1852461001271004, 0.16362077728000135, 0.11899536054946547, 0.12368257696250806, 0.13962632376053574, 0.1466106995725306, 0.11104622445886547, 0.144305585888998, 0.08523975229561997, 0.15992084291501107, 0.18765957955609347, 0.1211839821071895, 0.977739754330337, 0.9869275222300907, 0.9866097200780304, 0.9846205797865598, 0.9532383421687799, 0.9809688692231613, 0.9767788919743536, 0.9837845244484121, 0.9765806888658076, 0.7080839508117218, 0.704061726076706, 0.6846697750948728, 0.7189467598812946, 0.7261793698898131, 0.655039887092981, 0.08916133921493075, 0.6666893001453655, 0.7410878049402463, 0.22894464276299853, 0.24201755759948618, 0.22529357962489294, 0.21374187278466172, 0.21323795104234555, 0.37911333220619425, 0.8793448095876317, 0.23505369186615166, 0.7139706253388316, 0.6052330388889773, 0.5333822625252087, 0.5218183753163259, 0.6391297555056417, 0.13406691798547254, 0.4586296179107753, 0.5833220127884104, 0.6199721953360615, 0.5144312780971381, 0.5748817347976174, 0.12155715974876635, 0.616878378290592, 0.4838216594787933, 0.573911642981578, 0.6742226178967675, 0.6317413121832631, 0.5913556054086789, 0.6239629139312313, 0.43983146994619904, 0.355669683740653, 9.999999999998899e-05, 0.3907447859035006, 0.41600868036355565, 0.43185345823954524, 0.4492238894928684, 0.447341546275432, 0.4441487443410389, 0.484470575065429, 0.5050934143950474, 0.5630555625229873, 0.3910316231060992, 0.4527922610461208, 0.4862340334221821, 0.5508873909742418, 0.5386885755206227, 0.5428952925581597, 0.10351794178981855, 9.999999999998899e-05, 0.2285191328428232, 0.4290122389483556, 0.4444380184707709, 0.4149737923193164, 0.1708123957602634, 0.10698022940813756, 0.14708341482958565, 0.4161848053947672, 0.4266054736046486, 0.47035257648106676, 0.3431639888920065, 0.5110201061922147, 0.3244304025090875, 0.3895016043391505, 0.31475849699984615, 0.08639688598193973, 0.8291900290743112, 0.8079902702709327, 0.7805262143956269, 0.7967696939267754, 0.7924372163102115, 0.8081131416376095, 0.800990339806815, 0.8240285947467936, 0.8163780665684499, 0.12246670813790661, 0.5571570230326719, 0.12298894945213379, 0.1216274307227273, 0.14930017450439992, 0.13420839588698785, 0.13872423283160584, 0.19246081283854355, 0.08267032471222757, 0.18157374067347665, 0.206102239043494, 0.3548691212005334, 0.22250484328787157, 0.26956427405559313, 0.2979369338925618, 0.2721935281795298, 0.2523607301851525, 0.15994109825164593, 0.5269650249390234, 0.5594777858577678, 0.6347720821051313, 0.55634082911343, 0.5664637401673729, 0.5205506271308658, 0.6119388666848136, 0.6477674405898106, 0.644367018573057, 0.34436753633727823, 0.3944651442697129, 0.4689730033994256, 0.2210347465673662, 0.3697308742162664, 0.3943798492792808, 0.35268749296555757, 0.4760871833650667, 0.4778242063719589, 0.191539878318171, 0.19872418805098846, 0.20321449403984693, 0.2130014775065865, 0.19417997044006996, 0.17773678336151388, 0.2067260432689183, 0.19931587164053066, 0.19426905803685846, 0.2028382397389037, 0.24652745156717992, 0.20842377039235538, 0.22532723679436162, 0.7248555468379865, 0.20246173986248583, 0.19457023052889366, 0.2544837782548378, 0.8877138900040066, 0.1592545474622411, 0.16761096807545606, 0.14797973044430657, 0.16960304244444957, 0.8728151336337228, 0.7463075538262693, 0.18395751062519594, 0.16806611481557598, 0.934924958541658, 0.8513228966025539, 0.15571277153356133, 0.7927118988903917, 0.16864253674741247, 0.16935233954825213, 0.16774228135516756, 0.10522487184860951, 0.20647184884559422, 0.15520281018873971, 0.18436929513743305, 0.17126383671357848, 0.18240772330904076, 0.1816423943287011, 0.22490382137432074, 0.19550710478230737, 0.18443177771206987, 0.19714839500910974, 0.21094123105266616, 0.07599915503551224, 0.08473012583592898, 0.07295924385532448, 0.07726484560438873, 0.07443145912682325, 0.07096388167975765, 0.09412849166228221, 0.08019519020004662, 0.09512559845958879]}, "mutation_prompt": null}
{"id": "2fbbf464-af4e-49fe-888b-434522e2b7d4", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n        self.improvement_history = []  # Track improvements\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.6 + 0.4 * (self.evaluations / self.budget)  # Changed scaling factor\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        if self.improvement_history and np.mean(self.improvement_history[-5:]) < 1e-5:\n            return solution  # Skip if no recent improvement\n        learning_rate = np.exp(-5 * self.evaluations / self.budget)  # New adaptive learning rate\n        perturbation = np.random.normal(0, 0.05 * learning_rate, self.dim)  # Modified perturbation with learning rate\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    improvement = fitness[i] - trial_fitness\n                    self.improvement_history.append(improvement)  # Track improvements\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce dynamic crossover rate and improved local search by considering historical improvements to enhance convergence.", "configspace": "", "generation": 94, "fitness": 0.46711574079457363, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.28.", "error": "", "parent_id": "bd859772-020e-4a8c-887a-63e0ed45553a", "metadata": {"aucs": [0.8862051579308461, 0.8828081304103951, 0.8712982186793969, 0.8598601313992185, 0.876142280043398, 0.6892805752135108, 0.8771148544633807, 0.849412990080632, 0.8821588158043103, 0.777156669201972, 0.7970183376649641, 0.7833359644847435, 0.7862081211984183, 0.7898416931578018, 0.765633226496666, 0.7759873876153425, 0.7974685651911525, 0.7633782227527588, 0.17734187661927603, 0.1578554929553535, 0.14235456745795438, 0.1455650692525483, 0.11556232309984882, 0.12918995520622578, 0.1633133302600026, 0.15747870708752087, 0.14120565347662428, 0.12994763385210395, 0.14702768200795768, 0.11588037104147386, 0.11823378306838583, 0.12085968439013028, 0.11464203860976308, 0.1977213746330272, 0.1253174696415379, 0.10794149745253345, 0.8877432908587409, 0.7899014808784565, 0.6973260496897442, 0.7826835788340998, 0.6822526926435386, 0.7144506672186434, 0.772293767511556, 0.8339511731131748, 0.7780886640856497, 0.059455270094679324, 0.6073372119572787, 0.6155691163701409, 0.5179500842352949, 0.7164929358229521, 0.71961796158171, 0.5927426226924228, 0.672618401249892, 0.72794585783918, 0.8908080958163218, 0.8683636092399758, 0.916721043189026, 0.9166844776274344, 0.8873762540593122, 0.9120849466113146, 0.17736457542067308, 0.8619824999411461, 0.868220276994485, 0.5442331053556131, 0.4423562045317909, 0.4513294607107686, 0.6797539653127296, 0.673650095288171, 0.1276554637895213, 0.5720120023123327, 0.6107203968399733, 0.5634507170648084, 0.654111393457796, 0.586355944290651, 0.3933020560160777, 0.7113178073147797, 0.611864594180052, 0.4797524894597025, 0.7044444276686722, 0.7636408434651323, 0.4640729413628004, 0.713817126272958, 0.765063270561619, 0.7549476953151635, 0.7935861191027109, 0.7683698139671827, 0.7529132829155533, 0.7744048670799883, 0.7726878499485657, 0.7931518493975744, 0.8182968661145149, 0.8249138013377545, 0.8309750703186928, 0.8275470591647731, 0.5211918648416762, 0.8091442003292579, 0.8301511918271229, 0.8293725048020277, 0.8306800647153743, 0.40972947698129647, 0.4597468455194149, 0.285603405936653, 0.1840535584660684, 0.5291500594323844, 0.6755434238551103, 0.2997498419591378, 0.2889717694160353, 0.3920646439103066, 0.6595872803417813, 0.6145945817788349, 0.6018904490296604, 0.32979543235512054, 0.5242794831611196, 0.6370596613268598, 0.6370972218459928, 0.6240815367400957, 0.5979084617381429, 0.8456159720804362, 0.8510234640279466, 0.8492251982311537, 0.8427295197741467, 0.8477324075713999, 0.8385421647696254, 0.8581638909023306, 0.8029639207854746, 0.859062331119852, 0.1388362307866826, 0.11528623121129045, 0.13038801536106182, 0.11286117971892295, 0.13194145108984068, 0.12267081476976216, 0.11829544440735917, 0.10341102563725091, 0.37955718884664014, 0.13436784176241912, 0.20315818463876467, 0.21434367303365265, 0.26075603096377564, 0.44166574142129356, 0.14402886531323167, 0.15973102415961693, 0.13770459856246675, 0.22215183535687733, 0.5097806363838675, 0.6121546882798226, 0.5235274192343753, 0.49732320184609113, 0.48884544004052255, 0.5525772727776879, 0.5380390099434147, 0.49680252628090604, 0.519023404490935, 0.4147829914871053, 0.40034885313808055, 0.5137055631760357, 0.42402102554755783, 0.4250674086087155, 0.4238882052429137, 0.46817345398961874, 0.49062846103609825, 0.361512212075509, 0.19282930919575125, 0.20925142783684192, 0.23778294113444975, 0.18489806265792108, 0.2193342389562617, 0.19152997983321018, 0.21912987987740384, 0.1872650933099913, 0.20403292573043075, 0.23970592465792473, 0.23378355536702022, 0.4836216264596852, 0.5334818655211557, 0.18442114265995546, 0.21757279569834698, 0.5202275973455759, 0.22812745546669977, 0.20913445806756825, 0.1722019210435488, 0.15419806390839963, 0.15179241992065395, 0.165798815542889, 0.19784293255789798, 0.160859593261517, 0.1858264130253101, 0.2005499952523171, 0.16617186097239356, 0.8821590587894522, 0.21050518858189327, 0.1629914136659807, 0.9066329875977656, 0.20719190656573594, 0.2024252849899303, 0.20892705640279452, 0.21168414035482497, 0.20877524767894928, 0.2032854195546261, 0.17267578211616075, 0.18379069584397534, 0.18220717155442767, 0.19220548750686428, 0.17723697051644416, 0.17485286078640416, 0.18383465282510547, 0.19481163614016261, 0.08877798479761245, 0.08808936878802176, 0.10349653578786944, 0.07173980447357131, 0.08840747725596287, 0.07161506282453667, 0.08847099906652289, 0.0832419041256075, 0.08725960018714218]}, "mutation_prompt": null}
{"id": "46b2ac97-bb12-47f4-a1bc-80de30a37dec", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.6 + 0.4 * (self.evaluations / self.budget)  # Changed scaling factor\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        learning_rate = np.exp(-5 * self.evaluations / self.budget)  # New adaptive learning rate\n        perturbation = np.random.normal(0, 0.05 * learning_rate, self.dim)  # Modified perturbation with learning rate\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive learning rate in local search to dynamically adjust exploration intensity based on current progress.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bd859772-020e-4a8c-887a-63e0ed45553a", "metadata": {"aucs": [0.872704305333215, 0.8698741527401996, 0.8785730210926737, 0.8493523346541219, 0.8619786196798195, 0.8892049475658691, 0.8713002389455439, 0.8971594040747423, 0.8785495345011691, 0.7771708376365791, 0.7326293001589845, 0.7915268101243401, 0.7736088090819575, 0.8021270712329625, 0.766149757170679, 0.7690211998042109, 0.786553811282196, 0.5488179656612362, 0.14107798900035728, 0.14529941353029407, 0.10387230184199248, 0.14977860210081906, 0.14434142384353799, 0.1543867819409006, 0.12509346051896375, 0.10547450772692024, 0.10851031497710195, 0.12023127982396087, 0.13556684627980908, 0.12049478907781008, 0.38545407799757925, 0.1055523243773634, 0.1019528290214865, 0.13205877858230197, 0.13508950722426127, 0.13392294676076022, 0.7329429517358156, 0.8815519859206151, 0.7723189481972105, 0.9615663827733748, 0.8522957675234408, 0.9445794116929976, 0.7773154428143931, 0.774513819002548, 0.9328970534447205, 0.6818077243915808, 0.6313314536390476, 0.6514495390188919, 0.14881706085175594, 0.5999289045470567, 0.7048647498606295, 0.5357802916976644, 0.6143970578449208, 0.5552895963426603, 0.22997152883474636, 0.8930529885599152, 0.9040107914170339, 0.915928798260707, 0.918866808888051, 0.9118915405426848, 0.9069594708529818, 0.8897675264347997, 0.6061216991103967, 0.4477868733153666, 0.5133776973171181, 0.2855058567126054, 0.5425720696955567, 0.7697496733521056, 0.7367872710750766, 0.3499340983545616, 0.4215142582770063, 0.603724964183823, 0.6502427532868043, 0.5956331863218991, 0.13317991836246745, 0.6877271850989236, 0.4929831830462428, 0.3813756365372145, 0.4546994739754133, 0.41257038436600724, 0.8046099203146704, 0.7527417979117319, 0.7084769114950098, 0.7349230338096765, 0.7662262315835069, 0.7534899890212695, 0.7791961874926133, 0.7561280119735909, 0.7377627578436528, 0.7780587383638803, 0.8325116191049905, 0.773365670274349, 0.8204543957952701, 0.8072469581253814, 0.7772689967512373, 0.8380884835134805, 0.8352766092977797, 0.81056330619274, 0.8105961431897325, 0.21281200627369157, 0.4858277933780403, 0.20909100660491586, 0.6371578431034475, 0.5043848901167267, 0.5978667201948217, 0.4684092517309647, 0.4787966523669177, 0.2815433104350301, 0.5985269658744631, 0.6287809550432517, 0.6272695572360032, 0.542499288152074, 0.6295011396093079, 0.4807082831055973, 0.6246919135311813, 0.6020190897756357, 0.56131011276768, 0.7684530198795783, 0.7696961283471055, 0.8676540606052359, 0.75493982319404, 0.852301965006319, 0.8481431575378104, 0.8745959487964318, 0.8676978171364289, 0.8263027715990454, 0.12913933643962805, 0.12235444569850296, 0.12201427480256721, 0.11327138167512096, 0.15895175018875585, 0.12045552931855907, 0.09918550402418136, 0.15565262253915446, 0.10836015135745014, 0.28663494009498236, 0.17628089730529373, 0.7097645889321561, 0.25500725426181003, 0.5012150350262246, 0.14015398935927037, 0.17475965205937505, 0.1932227380917565, 0.19545565817502542, 0.47680544021413307, 0.47726000832611926, 0.5145572576314384, 0.4905938266082037, 0.5316659059925218, 0.4922253568930004, 0.5685274726113488, 0.5298669659412305, 0.4609324124229246, 0.4118294540052426, 0.4286259159449445, 0.40032516040679034, 0.40399963543008066, 0.38705540374901615, 0.4091589147249768, 0.44793695861436067, 0.3976259839163473, 0.4255035935202055, 0.19059711005335433, 0.18696450120813757, 0.20025621791002768, 0.1920742876748791, 0.20299640308419198, 0.18213291510249607, 0.20535977304295006, 0.21722497980334576, 0.19270177350409945, 0.4744930498497324, 0.19615357348716744, 0.20497022559791556, 0.20767801105112726, 0.19234719769387087, 0.23821683508589864, 0.41950372324599805, 0.557181012750556, 0.22224561908551388, 0.16444979375349744, 0.15224787015691177, 0.1847902251361585, 0.1594826977380286, 0.19772346705738275, 0.4379989113540951, 0.18209804022280296, 0.16215115265567492, 0.8739970190928747, 0.8331040570634733, 0.20777656703667902, 0.20611179100805288, 0.8551288587890221, 0.20835637619046854, 0.787726992800349, 0.21140290750118074, 0.21051666576687866, 0.8525844653264105, 0.17268562049930802, 0.19548720225425953, 0.19904698728554215, 0.1946726032082493, 0.17724029672371144, 0.21106626509197068, 0.18954154376165766, 0.18290816653793007, 0.184761851221252, 0.08633692681853844, 0.07776685872920974, 0.09179625598209373, 0.07646886274443931, 0.08585236888011627, 0.09069220467269301, 0.09970720084827078, 0.09906663284994777, 0.08086136060750682]}, "mutation_prompt": null}
{"id": "553cb0d8-0204-4aaf-9b87-cd67239d3451", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n        self.elite_rate = 0.05  # Added elite rate\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.6 + 0.4 * (self.evaluations / self.budget)  # Changed scaling factor\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        learning_rate = np.exp(-5 * self.evaluations / self.budget)  # New adaptive learning rate\n        perturbation = np.random.normal(0, 0.05 * learning_rate, self.dim)  # Modified perturbation with learning rate\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            elite_count = max(1, int(self.elite_rate * self.population_size))  # Calculate elite count\n            sorted_indices = np.argsort(fitness)\n            elites = population[sorted_indices[:elite_count]].copy()  # Preserve elites\n\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n            population[:elite_count] = elites  # Reinsert elites\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate elite preservation to ensure the best solutions are retained for diversity and improved convergence.", "configspace": "", "generation": 96, "fitness": 0.48576739731754753, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.30.", "error": "", "parent_id": "bd859772-020e-4a8c-887a-63e0ed45553a", "metadata": {"aucs": [0.8791741402368469, 0.8818610774430996, 0.8879240360993144, 0.6970922219657103, 0.8683713347345308, 0.8779004107017262, 0.8806204021917963, 0.8902935346883398, 0.8613972978297106, 0.8088449474178985, 0.779452889756408, 0.8131054293516072, 0.8055245538547745, 0.7975147969679551, 0.7731729278892085, 0.8110538528952498, 0.7771038662815208, 0.7920284755594421, 0.12707640722838154, 0.12908839628411406, 0.10300418763674102, 0.13670673492686147, 0.10347935626388893, 0.133343358068998, 0.10259481582472985, 0.14433782076633428, 0.11214129784506277, 0.12683793039645075, 0.12083221081331663, 0.12693028514015514, 0.1447088400489327, 0.09483557239490636, 0.10544211083196586, 0.08927238261584625, 0.11745168456466071, 0.1068264185234934, 0.9194105443433472, 0.7595906672788282, 0.7991799902056524, 0.9108615577692173, 0.8043312146295218, 0.9766823338205117, 0.6919411974270027, 0.9183405320895333, 0.95489754925626, 0.5482925066583809, 0.5635238472324049, 0.6768343632148912, 0.7248486613953325, 0.6285438653891624, 0.6273040982236668, 0.7107714080079013, 0.6708637840436957, 0.6791729956357979, 0.9129944619017581, 0.9396372414295642, 0.8999077923297507, 0.28028265464036983, 0.8892194128405059, 0.8846273899411585, 0.8854949268502609, 0.8982624678539196, 0.8948034128836866, 0.13229990271385994, 0.43696666125954053, 0.6895148945087324, 0.7064238905281702, 0.34799168958345383, 0.5986950055623479, 0.7069735615201302, 0.6410770439133695, 0.4861611627759852, 0.6682184855201886, 0.2528800393457441, 0.33386110405832137, 0.5877147081353232, 0.6358495977477102, 0.38061049431042415, 0.5932926118638373, 0.5237186855563789, 0.5273821180774425, 0.7119531419670416, 0.6638425554232242, 0.7461808718629451, 0.7927215193660352, 0.7512184318279584, 0.7383383560494983, 0.771879873299641, 0.7530623799381032, 0.7743323949410429, 0.8226041663223633, 0.8218170165375298, 0.8357042555656446, 0.8385928580799177, 0.8033152368757159, 0.6988088001503527, 0.8432004955075456, 0.8291294664046325, 0.8414786909354507, 0.3560673400649149, 0.08389152763912866, 0.1898813993703391, 0.6808152575474357, 0.39192792062620196, 0.39218971120661394, 0.5185599079446228, 0.16703238994917724, 0.12331629437638636, 0.6295305108461844, 0.6904998725705606, 0.6423102290781173, 9.999999999998899e-05, 0.6666648722105157, 0.5885507410685943, 0.6763223143088346, 0.6342580841394828, 0.6322778929379507, 0.8735366639041728, 0.8516243919944677, 0.8645152894940538, 0.8712658091495977, 0.8709438407925314, 0.8694630895991673, 0.870346702290431, 0.8685890941703797, 0.8609890256365569, 0.1406405726408546, 0.12624063771323868, 0.11025989609748243, 0.13903321384965273, 0.1515401105530726, 0.12698768183662923, 0.09930070981268069, 0.11680829987409636, 0.10592486132775503, 0.10581249998111164, 0.1557433319077356, 0.13064964709101734, 0.16357306174799013, 0.8045080237680129, 0.20998413466525923, 0.14441089829216236, 0.18339450784168698, 0.19013116090743565, 0.5736164846416212, 0.5023710244097042, 0.5973591650689414, 0.4893337984762819, 0.5456472052677572, 0.5294546207869923, 0.5830390732550201, 0.6442440327804051, 0.5961879352789611, 0.24689881922053858, 0.5047185550418343, 0.514582706433099, 0.4067153657195933, 0.5134964057951908, 0.4547213966484426, 0.5592807103080668, 0.5059707766143098, 0.5378126658343345, 0.20358585707602184, 0.18161078545303033, 0.2490525568913231, 0.18068147322013517, 0.182978434815123, 0.17983312650274164, 0.21870801226474867, 0.19514962478816722, 0.19831082997597116, 0.2035135691363229, 0.6906912105596099, 0.21944906298251077, 0.20703063415173228, 0.6217367713368469, 0.2146139311493187, 0.2392626042971927, 0.6695759540789801, 0.24441139481958274, 0.8980115064408174, 0.15231708593073212, 0.170477681882091, 0.16526220501900102, 0.19932476647741748, 0.15890276509179513, 0.7141525008288252, 0.19521459912343875, 0.7705806894247741, 0.8716233689036932, 0.21168625656582285, 0.9034103348072599, 0.8908658257542594, 0.6918018791463383, 0.16390897389905035, 0.20726704432717902, 0.21218952470115027, 0.12795962975356578, 0.17011613421824312, 0.19262098215686874, 0.17682984948173275, 0.19222107705662783, 0.19342335413558198, 0.17485468893340694, 0.16286052990457467, 0.16897532889814426, 0.19247653242738627, 0.08218392027310673, 0.09562623974018347, 0.07159715377719544, 0.09466459261366145, 0.10592960825822628, 0.07595588926691599, 0.09311996409140721, 0.07922992477055091, 0.0762763632368253]}, "mutation_prompt": null}
{"id": "d13ecb82-97d3-462e-9614-8f8b6cf3da1d", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n        self.elite_rate = 0.05\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.6 + 0.4 * (self.evaluations / self.budget)\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.6 + 0.4 * np.sin((np.pi/2) * (self.evaluations / self.budget))  # Dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        learning_rate = np.exp(-5 * self.evaluations / self.budget)\n        perturbation = np.random.normal(0, 0.05 * learning_rate, self.dim)\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            elite_count = max(1, int(self.elite_rate * self.population_size))\n            sorted_indices = np.argsort(fitness)\n            elites = population[sorted_indices[:elite_count]].copy()\n\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)\n\n                if self.evaluations >= self.budget:\n                    break\n\n            if self.evaluations < self.budget:  # Adaptive elite reinsertion condition\n                population[:elite_count] = elites \n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce dynamic crossover rate and adaptive elite reinsertion for efficient exploration and convergence.", "configspace": "", "generation": 97, "fitness": 0.3979899857766796, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.29.", "error": "", "parent_id": "553cb0d8-0204-4aaf-9b87-cd67239d3451", "metadata": {"aucs": [0.9360856971772833, 0.9421612825396509, 0.9358310153069845, 0.9370198553709381, 0.9317599111375867, 0.9399289993444739, 0.9366395154972339, 0.9341546361406219, 0.9269719076942624, 0.9025743275872796, 0.8619751372964732, 0.885689430029212, 0.8911431596193282, 0.598939120130977, 0.8937203178062253, 0.8291389257146733, 0.8880887883327137, 0.8826174597383398, 0.18280070583185482, 0.16237910230533126, 0.13472095602614276, 0.16256804480159304, 0.15780553459031776, 0.18060606067299745, 0.8174573942155331, 0.13303959247293884, 0.16322416293236752, 0.13623100151242984, 0.08619091282879565, 0.12716250223390546, 0.13512200529826446, 0.12498298539767072, 0.14781954878785764, 0.11714742339506978, 0.1570527216956087, 0.17740958082244795, 0.9640224429879282, 0.9900243691231763, 0.9812647689132149, 0.9809051698144392, 0.9307370629237919, 0.970109220940806, 0.9624108152384614, 0.9745638960600194, 0.9713776589771287, 0.6949782763424157, 0.7179610974566883, 0.7832511104370595, 0.6894148927078787, 0.8045669462631362, 0.7298399502260409, 0.08939567560230277, 0.535178140493015, 0.7974064061538553, 0.8898092567800935, 0.8619832690703141, 0.17054474504670047, 0.284687870944897, 0.8588174728961026, 0.21334790904512546, 0.350283542109852, 0.39542250042683225, 0.2304597548690005, 0.26610691578101386, 0.29744219761435864, 0.29750981952200495, 0.4515402356428021, 0.50684514611229, 0.1349611064476106, 0.2773465157404429, 0.5169589506333258, 0.3794115037415732, 0.36931059317150283, 0.09472482683920147, 0.13389031270303153, 0.35667034413962706, 0.2460926195421984, 0.6445745287997549, 0.31844080634486305, 0.34110373058394494, 0.3725253874737474, 0.3817568821435615, 0.07839689737566513, 0.2970739163949174, 9.999999999998899e-05, 0.2727083635263502, 0.31457764219287787, 0.33663564623700726, 0.30907121575549745, 0.4227566893490522, 0.49230978409688697, 0.3005263839951161, 0.490636220945571, 0.2160281785890179, 0.4259714903585242, 0.4383069929341046, 0.47083905610052457, 0.46097510301583133, 0.556788520053854, 0.16595621994834586, 0.14666279704404284, 0.3911710589658254, 0.19813684364464457, 0.4138121731377614, 0.14597519361820543, 0.14099214623793066, 0.39644230931733726, 0.08385260501729319, 0.21457092124306654, 0.2935181544767388, 0.31775701501630504, 0.28591804947766963, 0.43627039642306575, 0.28738739231671784, 0.2051100942027344, 0.2915225322924234, 0.1933554432015796, 0.7985834319878651, 0.7448830667799942, 0.8171424483856725, 0.7742681200551731, 0.7589475898743315, 0.780332607529099, 0.7907925500693069, 0.705176945430131, 0.7821397563293582, 0.0976491913073303, 0.15597259904619276, 0.08499298249864784, 0.45262969320266744, 0.12280772037406573, 0.1262357190066299, 0.10830424160943852, 0.1546021361719635, 0.09717542303749471, 0.15602049937617035, 0.13591907723304997, 0.18036456138806733, 0.24979283286306564, 0.17623039738063506, 0.165011375211206, 0.14963875815866745, 0.4351373640317757, 0.17507321450525815, 0.4872538426704437, 0.7011798691311852, 0.46133733767788676, 0.46393303947021436, 0.40670711148788463, 0.37677265763229717, 0.4795492348218945, 0.7917816730997514, 0.8055217499014451, 0.28891905975849996, 0.29506448842404587, 0.29307562668237686, 0.5086427987236615, 0.34098821223272957, 0.25908114715436337, 0.3980139033103066, 0.5505152211314289, 0.3845467763574073, 0.18418760095259012, 0.2017618367080929, 0.20176075050488185, 0.2414203047118324, 0.23722205830134846, 0.28278164953442586, 0.19896443105068007, 0.2095419335404638, 0.1939664821317577, 0.2234088194544036, 0.22727172703723686, 0.2120676703622717, 0.1905307893889736, 0.18517026155569272, 0.190013672930208, 0.25218200914399846, 0.22251978332732492, 0.20177795439449697, 0.15904402195283296, 0.18705878617264493, 0.15422090934462762, 0.1713883695060633, 0.1956231686455322, 0.8654970305559847, 0.1856400920371799, 0.8581812338869457, 0.9529924431492725, 0.08345357785390206, 0.15720627947805155, 0.7728314217354232, 0.1672932721177285, 0.16909248470838079, 0.16765720762326997, 0.10531051065869346, 0.10479831271851925, 0.6503118786355055, 0.2016753913843644, 0.15360877410734974, 0.16691037420720745, 0.18032365782480864, 0.1852063062324144, 0.21769044432922724, 0.18283954512361966, 0.18357760211632812, 0.18260365278974156, 0.08994622093440907, 0.08534472713489827, 0.0876960398192217, 0.09873363861272155, 0.09226932411119504, 0.07955576198522996, 0.11251810792229588, 0.09136373353069027, 0.08086502365975323]}, "mutation_prompt": null}
{"id": "e475728c-52e2-4edc-8933-dd734573ad10", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n        self.elite_rate = 0.05  # Added elite rate\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.5 + 0.5 * (1 - np.var(population, axis=0).mean() / 10)  # Adapt scale based on variance\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        learning_rate = np.exp(-5 * self.evaluations / self.budget)  # New adaptive learning rate\n        perturbation = np.random.normal(0, 0.05 * learning_rate, self.dim)  # Modified perturbation with learning rate\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            elite_count = max(1, int(self.elite_rate * self.population_size))  # Calculate elite count\n            sorted_indices = np.argsort(fitness)\n            elites = population[sorted_indices[:elite_count]].copy()  # Preserve elites\n\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n            population[:elite_count] = elites  # Reinsert elites\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Introduce adaptive scaling based on variance reduction to enhance convergence precision.", "configspace": "", "generation": 98, "fitness": 0.3799655629366299, "feedback": "The algorithm HybridGADifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.25.", "error": "", "parent_id": "553cb0d8-0204-4aaf-9b87-cd67239d3451", "metadata": {"aucs": [0.7493880120490357, 0.771521449102248, 0.7371400838139098, 0.6963111914684208, 0.6757982925762116, 0.7183878804550747, 0.7073063873517005, 0.7437612324352766, 0.7737655944573342, 9.999999999998899e-05, 0.5946221945458221, 0.5525257423228738, 0.5881807629541309, 0.6381146424562605, 0.6496405001264816, 0.5837122028249994, 0.5740646393694433, 0.5696380373311247, 0.13581247163084442, 0.1329278701310126, 0.1306911097400878, 0.09564844069817469, 0.13174589111174917, 0.16188253399531927, 0.09473774804969637, 0.15893021919185668, 0.1387837202849379, 0.09842371628193691, 0.10498514060994202, 0.1575752382140263, 0.16313738421470347, 0.13725508423661592, 0.11213117885789814, 0.08756329162971521, 0.1583483711463901, 0.13902001650496387, 0.9570237680568937, 0.9312316601829055, 0.8918295200363473, 0.9698815580486654, 0.9414840428929302, 0.9894707585987507, 0.07490703434335555, 0.9681250829202239, 0.9827939451137145, 0.453049620360062, 0.5624022306779592, 0.43094495884545514, 0.5394734908266229, 0.48567648886958514, 0.45047677847656564, 0.480058388401329, 0.43852291031630586, 0.4209658981582133, 0.3705728887193249, 0.8394356132605856, 0.33405367050877743, 0.8862227632933952, 0.8563259052599856, 0.7509050274235435, 0.35491488918391956, 0.7991644422420262, 0.7725485741846477, 0.6156388804448711, 0.4992400659561964, 0.38873563430679636, 0.37618112769076983, 0.34808654567791186, 0.40749451735277853, 0.5135789637417975, 0.37844838148581306, 0.35820674723759693, 0.569833200954745, 0.47892660468702375, 0.32448250133105316, 0.4610099420858337, 0.12354464894182071, 0.48001874448899573, 0.4352681333984101, 0.35080929785673787, 0.44460546095807496, 0.3929015330733395, 0.3844715418844894, 0.5540670752441155, 0.5081814364948869, 0.4258363631114196, 0.4369766490386524, 0.3833569068860545, 0.4435369604581417, 0.47853817636366447, 0.6387865322643635, 0.5654082629367059, 0.5249730077296503, 0.6272721386571131, 0.6100941155426549, 0.5600640582991135, 0.6110769013824922, 0.6243409223004517, 0.6392448707808651, 0.19152783019537867, 0.12792322857644145, 0.15139583123500977, 0.40965369575231014, 0.323531827093112, 0.1737901365278367, 0.28612085372939833, 0.3652993786394305, 0.13311782834879382, 0.33402740102581274, 0.2924692524921434, 0.299364219929401, 0.3035432203504559, 0.33938147634969595, 0.3181203600713124, 0.3105204582792135, 0.4436869003823274, 0.31213584808026373, 0.6918118560637905, 0.7101401570324948, 0.7077027827369419, 0.7271968095589341, 0.6817332877587405, 0.5893333702678094, 0.6600279015807291, 0.6545195017617416, 0.745875120816976, 0.13694222294378144, 0.1240707188355673, 0.47486507480008444, 0.1415562388338989, 0.16959937708371253, 0.13307589389187013, 0.12970546544324957, 0.16076624351833668, 0.12487507696379108, 0.14560603451117438, 0.1647590823550772, 0.28703578327736, 0.17173582022218437, 0.47761544367800635, 0.17640937837140713, 0.3786663515668873, 0.19300706369845055, 0.370167773766812, 0.25532003187224894, 0.22908763402011412, 0.2718094381337173, 0.37240195510408935, 0.29388745711862896, 0.2654573991643202, 0.2514719381346646, 0.38689092643386347, 0.3146168887126106, 0.23779488339109622, 0.22441832498057646, 0.2814591602141242, 0.2953470859693824, 0.25052047706469505, 0.2209698433864049, 0.28660699544960744, 0.2327983232211278, 0.2685245325446425, 0.18696125408876285, 0.16455122070479433, 0.19985744196352262, 0.18745968567980376, 0.19693127986820314, 0.19959898145976018, 0.1673978848619463, 0.18409894619733091, 0.20645521626053465, 0.20263237625648212, 0.24344303595584793, 0.572734844874558, 0.17727713687194047, 0.208090572650649, 0.20034123449029617, 0.21141457078201153, 0.2367924950654149, 0.18841717984371975, 0.1650789093269186, 0.15202976459968143, 0.15274516815397843, 0.825169613737669, 0.19721845983664066, 0.16774348959852725, 0.18485200077842467, 0.7648626807264369, 0.8705886705111802, 0.8739833424861138, 0.22830338526477145, 0.2057486980831018, 0.7555406510749472, 0.20720586270287178, 0.16880654901100456, 0.19224735528038106, 0.8336015448805404, 0.21065515028253845, 0.18422585060562113, 0.1752497098145659, 0.16871991123754326, 0.16762244337151155, 0.16946882620591064, 0.17035776262547475, 0.18515734738881184, 0.16758909572795289, 0.1729416920407204, 0.06933501323324764, 0.07487141498118621, 0.07015631379532428, 0.06524007336405435, 0.05848659328467942, 0.07848528866565707, 0.06884051905635391, 0.09348198718378298, 0.09842519178657694]}, "mutation_prompt": null}
{"id": "de97fd4b-0911-4e58-b973-8bd1100eac16", "solution": "import numpy as np\n\nclass HybridGADifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Dynamic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.tournament_size = 3\n        self.elite_rate = 0.05  # Added elite rate\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def tournament_selection(self, population, fitness):\n        indices = np.random.choice(len(population), self.tournament_size, replace=False)\n        best_index = indices[np.argmin(fitness[indices])]\n        return population[best_index]\n\n    def differential_mutation(self, target_idx, population):\n        idxs = [i for i in range(self.population_size) if i != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scale = 0.6 + 0.4 * (self.evaluations / self.budget)  # Changed scaling factor\n        mutant = population[a] + scale * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_rate = 0.7 + 0.3 * (1 - np.exp(-5 * (self.budget - self.evaluations) / self.budget))  # Changed cross_rate\n        cross_points = np.random.rand(self.dim) < cross_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, solution, func):\n        learning_rate = np.exp(-5 * self.evaluations / self.budget)  # New adaptive learning rate\n        perturbation = np.random.normal(0, 0.05 * learning_rate, self.dim)  # Modified perturbation with learning rate\n        neighbor = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        return neighbor if func(neighbor) < func(solution) else solution\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations = self.population_size\n        best_global = population[np.argmin(fitness)].copy()\n        best_global_fitness = func(best_global)\n\n        while self.evaluations < self.budget:\n            elite_count = max(1, int(self.elite_rate * self.population_size))  # Calculate elite count\n            sorted_indices = np.argsort(fitness)\n            elites = population[sorted_indices[:elite_count]].copy()  # Preserve elites\n\n            for i in range(self.population_size):\n                parent = self.tournament_selection(population, fitness)\n                self.mutation_factor = 0.5 + 0.3 * (1 - np.exp(-5 * self.evaluations / self.budget))\n                mutant = self.differential_mutation(i, population)\n                trial = self.crossover(parent, mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_global_fitness:\n                        best_global = trial.copy()\n                        best_global_fitness = trial_fitness\n                        best_global = self.local_search(best_global, func)  # Apply local search\n\n                if self.evaluations >= self.budget:\n                    break\n\n            population[:elite_count] = elites  # Reinsert elites\n\n        return best_global", "name": "HybridGADifferentialEvolution", "description": "Incorporate elite preservation to ensure the best solutions are retained for diversity and improved convergence.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "553cb0d8-0204-4aaf-9b87-cd67239d3451", "metadata": {"aucs": [0.8791741402368469, 0.8818610774430996, 0.8879240360993144, 0.6970922219657103, 0.8683713347345308, 0.8779004107017262, 0.8806204021917963, 0.8902935346883398, 0.8613972978297106, 0.8088449474178985, 0.779452889756408, 0.8131054293516072, 0.8055245538547745, 0.7975147969679551, 0.7731729278892085, 0.8110538528952498, 0.7771038662815208, 0.7920284755594421, 0.12707640722838154, 0.12908839628411406, 0.10300418763674102, 0.13670673492686147, 0.10347935626388893, 0.133343358068998, 0.10259481582472985, 0.14433782076633428, 0.11214129784506277, 0.12683793039645075, 0.12083221081331663, 0.12693028514015514, 0.1447088400489327, 0.09483557239490636, 0.10544211083196586, 0.08927238261584625, 0.11745168456466071, 0.1068264185234934, 0.9194105443433472, 0.7595906672788282, 0.7991799902056524, 0.9108615577692173, 0.8043312146295218, 0.9766823338205117, 0.6919411974270027, 0.9183405320895333, 0.95489754925626, 0.5482925066583809, 0.5635238472324049, 0.6768343632148912, 0.7248486613953325, 0.6285438653891624, 0.6273040982236668, 0.7107714080079013, 0.6708637840436957, 0.6791729956357979, 0.9129944619017581, 0.9396372414295642, 0.8999077923297507, 0.28028265464036983, 0.8892194128405059, 0.8846273899411585, 0.8854949268502609, 0.8982624678539196, 0.8948034128836866, 0.13229990271385994, 0.43696666125954053, 0.6895148945087324, 0.7064238905281702, 0.34799168958345383, 0.5986950055623479, 0.7069735615201302, 0.6410770439133695, 0.4861611627759852, 0.6682184855201886, 0.2528800393457441, 0.33386110405832137, 0.5877147081353232, 0.6358495977477102, 0.38061049431042415, 0.5932926118638373, 0.5237186855563789, 0.5273821180774425, 0.7119531419670416, 0.6638425554232242, 0.7461808718629451, 0.7927215193660352, 0.7512184318279584, 0.7383383560494983, 0.771879873299641, 0.7530623799381032, 0.7743323949410429, 0.8226041663223633, 0.8218170165375298, 0.8357042555656446, 0.8385928580799177, 0.8033152368757159, 0.6988088001503527, 0.8432004955075456, 0.8291294664046325, 0.8414786909354507, 0.3560673400649149, 0.08389152763912866, 0.1898813993703391, 0.6808152575474357, 0.39192792062620196, 0.39218971120661394, 0.5185599079446228, 0.16703238994917724, 0.12331629437638636, 0.6295305108461844, 0.6904998725705606, 0.6423102290781173, 9.999999999998899e-05, 0.6666648722105157, 0.5885507410685943, 0.6763223143088346, 0.6342580841394828, 0.6322778929379507, 0.8735366639041728, 0.8516243919944677, 0.8645152894940538, 0.8712658091495977, 0.8709438407925314, 0.8694630895991673, 0.870346702290431, 0.8685890941703797, 0.8609890256365569, 0.1406405726408546, 0.12624063771323868, 0.11025989609748243, 0.13903321384965273, 0.1515401105530726, 0.12698768183662923, 0.09930070981268069, 0.11680829987409636, 0.10592486132775503, 0.10581249998111164, 0.1557433319077356, 0.13064964709101734, 0.16357306174799013, 0.8045080237680129, 0.20998413466525923, 0.14441089829216236, 0.18339450784168698, 0.19013116090743565, 0.5736164846416212, 0.5023710244097042, 0.5973591650689414, 0.4893337984762819, 0.5456472052677572, 0.5294546207869923, 0.5830390732550201, 0.6442440327804051, 0.5961879352789611, 0.24689881922053858, 0.5047185550418343, 0.514582706433099, 0.4067153657195933, 0.5134964057951908, 0.4547213966484426, 0.5592807103080668, 0.5059707766143098, 0.5378126658343345, 0.20358585707602184, 0.18161078545303033, 0.2490525568913231, 0.18068147322013517, 0.182978434815123, 0.17983312650274164, 0.21870801226474867, 0.19514962478816722, 0.19831082997597116, 0.2035135691363229, 0.6906912105596099, 0.21944906298251077, 0.20703063415173228, 0.6217367713368469, 0.2146139311493187, 0.2392626042971927, 0.6695759540789801, 0.24441139481958274, 0.8980115064408174, 0.15231708593073212, 0.170477681882091, 0.16526220501900102, 0.19932476647741748, 0.15890276509179513, 0.7141525008288252, 0.19521459912343875, 0.7705806894247741, 0.8716233689036932, 0.21168625656582285, 0.9034103348072599, 0.8908658257542594, 0.6918018791463383, 0.16390897389905035, 0.20726704432717902, 0.21218952470115027, 0.12795962975356578, 0.17011613421824312, 0.19262098215686874, 0.17682984948173275, 0.19222107705662783, 0.19342335413558198, 0.17485468893340694, 0.16286052990457467, 0.16897532889814426, 0.19247653242738627, 0.08218392027310673, 0.09562623974018347, 0.07159715377719544, 0.09466459261366145, 0.10592960825822628, 0.07595588926691599, 0.09311996409140721, 0.07922992477055091, 0.0762763632368253]}, "mutation_prompt": null}
