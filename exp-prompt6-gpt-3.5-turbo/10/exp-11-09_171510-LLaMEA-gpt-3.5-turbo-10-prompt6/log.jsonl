{"id": "36af817c-f28e-49eb-ae7f-d28476581f7e", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "d658858f-9653-472b-9509-c9fee99389f0", "solution": "import numpy as np\n\nclass AdaptiveMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_probs = np.ones(dim) * 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for individual in self.population:\n                mutant = individual + np.random.normal(0, self.mutation_probs)\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n            self.mutation_probs *= 0.95  # Adapt mutation probabilities\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "AdaptiveMutationEA", "description": "An evolutionary algorithm with adaptive mutation probabilities to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 1, "fitness": 0.09144843562834938, "feedback": "The algorithm AdaptiveMutationEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "36af817c-f28e-49eb-ae7f-d28476581f7e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "f8b859f9-19be-41e5-b174-b329828e7a93", "solution": "import numpy as np\n\nclass DynamicMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_scale = np.ones(dim) * 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for individual in self.population:\n                mutation_step = np.random.normal(0, self.mutation_scale)\n                mutant = individual + mutation_step\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n            self.mutation_scale *= 0.95  # Adapt mutation step size dynamically\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DynamicMutationEA", "description": "Introducing a dynamic mutation step size adjustment to adaptively scale mutation strengths based on individual performance, enhancing exploration capabilities for improved convergence speed.", "configspace": "", "generation": 2, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicMutationEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "12d10113-bca0-441d-8666-197cdee83f65", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_probs = np.ones(dim) * 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n            \n            # Introducing opposition-based learning for exploration\n            for idx, individual in enumerate(self.population):\n                opposite_individual = -individual\n                if func(opposite_individual) < fitness[idx]:\n                    self.population[idx] = opposite_individual\n\n            new_population = []\n            for individual in self.population:\n                mutant = individual + np.random.normal(0, self.mutation_probs)\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n            self.mutation_probs *= 0.95  # Adapt mutation probabilities\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedAdaptiveMutationEA", "description": "Enhancing the exploration phase by introducing adaptive opposition-based learning to improve population diversity and convergence speed.", "configspace": "", "generation": 3, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedAdaptiveMutationEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0f31c81e-4027-4b0b-ae2b-61455cfd2b31", "solution": "import numpy as np\n\nclass AdaptiveMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_probs = np.ones(dim) * 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for idx, individual in enumerate(self.population):\n                mutant = individual + np.random.normal(0, self.mutation_probs)\n                # Dynamic mutation adjustment based on individual fitness\n                self.mutation_probs *= 0.95 + 0.05 * (fitness[idx] - min(fitness)) / (max(fitness) - min(fitness))\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "AdaptiveMutationEA", "description": "Introducing a dynamic mutation step size adjustment based on individual fitness to enhance local search capabilities.", "configspace": "", "generation": 4, "fitness": 0.09144843562834938, "feedback": "The algorithm AdaptiveMutationEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "2598d376-6d89-4bc0-a5d4-cd81722da9c4", "solution": "import numpy as np\n\nclass AdaptiveMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_probs = np.ones(dim) * 0.5\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for individual in self.population:\n                mutant = individual + np.random.normal(0, self.mutation_probs * self.mutation_rate)\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n            self.mutation_rate *= 0.95  # Adapt mutation rate dynamically\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "AdaptiveMutationEA", "description": "Introducing a self-adaptive mechanism for individual mutation rates to dynamically adjust exploration and exploitation during optimization.", "configspace": "", "generation": 5, "fitness": 0.09144843562834938, "feedback": "The algorithm AdaptiveMutationEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "acc4c0fe-94d3-4f07-bce8-19acdd984c7c", "solution": "import numpy as np\n\nclass DynamicMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_probs = np.ones(dim) * 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for idx, individual in enumerate(self.population):\n                performance_ratio = fitness[idx] / min(fitness)\n                mutation_strength = 0.1 + 0.4 * performance_ratio\n                mutant = individual + np.random.normal(0, mutation_strength, self.dim)\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DynamicMutationEA", "description": "Introducing a dynamic mutation strategy based on individual performance to enhance exploration and exploitation dynamics, boosting convergence speed.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('scale < 0').", "error": "ValueError('scale < 0')", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {}, "mutation_prompt": null}
{"id": "b195bcd7-9de6-4b56-8f1c-dfaa156d9caa", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_probs = np.ones(dim) * 0.5\n\n    def levy_flight(self, scale=1.0):\n        return np.random.standard_cauchy() * scale / (np.abs(np.random.normal()) ** (1 / self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for individual in self.population:\n                step = self.levy_flight()\n                mutant = individual + step\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n            self.mutation_probs *= 0.95  # Adapt mutation probabilities\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "ImprovedAdaptiveMutationEA", "description": "Implementing a Levy flight strategy for mutation to introduce long-range exploration to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": 0.09144843562834938, "feedback": "The algorithm ImprovedAdaptiveMutationEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "c6982431-b562-406a-b940-685f412626b0", "solution": "import numpy as np\n\nclass DynamicStepSizeEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n\n    def __call__(self, func):\n        mutation_step = 0.1\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for individual in self.population:\n                mutant = individual + np.random.normal(0, mutation_step, self.dim)\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n\n            # Adjust mutation step based on fitness difference\n            fitness_diff = np.abs(fitness - np.mean(fitness))\n            mutation_step *= np.exp(np.mean(fitness_diff))\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DynamicStepSizeEA", "description": "Introducing a dynamically adjusting mutation step size based on individual fitness to enhance exploration and exploitation balance.", "configspace": "", "generation": 8, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicStepSizeEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "9fc21fa3-1394-41e1-825c-311bfb3c8507", "solution": "import numpy as np\n\nclass DynamicMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_probs = np.ones(dim) * 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for idx, individual in enumerate(self.population):\n                fitness_scale = 1.0 / (fitness[idx] + 1e-8)\n                mutant = individual + np.random.normal(0, self.mutation_probs * fitness_scale)\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n            self.mutation_probs *= 0.95  # Adapt mutation probabilities\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DynamicMutationEA", "description": "Introducing a dynamic mutation scaling factor based on individual fitness to adapt mutation intensities dynamically and accelerate convergence.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('scale < 0').", "error": "ValueError('scale < 0')", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {}, "mutation_prompt": null}
{"id": "a3819c63-616c-4c79-8d6c-d7600b2b0172", "solution": "import numpy as np\n\nclass DynamicMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_probs = np.ones(dim) * 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for idx, individual in enumerate(self.population):\n                scaling_factor = 0.1 + 0.9 * (1 - fitness[idx] / max(fitness))\n                mutant = individual + np.random.normal(0, self.mutation_probs * scaling_factor)\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DynamicMutationEA", "description": "Introducing a dynamic mutation scaling based on individual fitness to enhance exploitation and accelerate convergence.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('scale < 0').", "error": "ValueError('scale < 0')", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {}, "mutation_prompt": null}
{"id": "a2f246eb-358d-4e51-bd19-2e62472d4931", "solution": "import numpy as np\n\nclass AdaptiveMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_probs = np.ones(dim) * 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for individual in self.population:\n                mutant = individual + np.random.normal(0, self.mutation_probs)\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n            self.mutation_probs *= 0.95  # Adapt mutation probabilities\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "AdaptiveMutationEA", "description": "An evolutionary algorithm with adaptive mutation probabilities to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e5a34c75-8f23-4331-a35f-b959755e3f4a", "solution": "import numpy as np\n\nclass AdaptiveMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_probs = np.ones(dim) * 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for individual in self.population:\n                mutant = individual + np.random.normal(0, self.mutation_probs)\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n            self.mutation_probs *= 0.95  # Adapt mutation probabilities\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "AdaptiveMutationEA", "description": "An evolutionary algorithm with adaptive mutation probabilities to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "77eb2fc7-80a9-4514-8f47-3544753a7dc0", "solution": "import numpy as np\n\nclass DynamicAdaptiveMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_probs = np.ones(dim) * 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for idx, individual in enumerate(self.population):\n                dynamic_factor = np.clip(np.exp(-fitness[idx] / np.max(fitness)), 0.1, 1.0)\n                mutant = individual + np.random.normal(0, self.mutation_probs * dynamic_factor)\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n            self.mutation_probs *= 0.95  # Adapt mutation probabilities\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DynamicAdaptiveMutationEA", "description": "Implementing a dynamic adaptive mutation for each individual based on its performance to enhance exploration and exploitation balance, leading to faster convergence.", "configspace": "", "generation": 13, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicAdaptiveMutationEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "8192cfe9-419d-4330-9f26-b2d9e98f0b5b", "solution": "import numpy as np\n\nclass AdaptiveMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_probs = np.ones(dim) * 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for individual in self.population:\n                mutant = individual + np.random.normal(0, self.mutation_probs)\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n            self.mutation_probs *= 0.95  # Adapt mutation probabilities\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "AdaptiveMutationEA", "description": "An evolutionary algorithm with adaptive mutation probabilities to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "6be6411d-f1ef-413f-b7fc-12fe69620934", "solution": "import numpy as np\n\nclass DynamicMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n\n    def __call__(self, func):\n        mutation_probs = np.ones(self.dim) * 0.5\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            for i, individual in enumerate(self.population):\n                if i != best_idx:\n                    fitness_difference = (fitness[best_idx] - fitness[i]) / fitness[best_idx]\n                    mutation_scale = 1.0 / (1.0 + np.exp(-5 * fitness_difference))\n                    mutant = individual + np.random.normal(0, mutation_probs * mutation_scale)\n                    self.population[i] = mutant\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DynamicMutationEA", "description": "Implementing a dynamic mutation strategy based on individual fitness for adaptive search behavior enhancement.", "configspace": "", "generation": 15, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicMutationEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "bc34d3bc-11af-46ca-8102-9dd0df3c1392", "solution": "import numpy as np\n\nclass DynamicMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_strengths = np.ones(dim) * 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for individual in self.population:\n                mutant = individual + np.random.normal(0, self.mutation_strengths)\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n            self.mutation_strengths *= 0.95 + 0.05 * np.random.uniform(-1, 1, self.dim)  # Dynamically adapt mutation strengths\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DynamicMutationEA", "description": "Implement a dynamic mutation strategy by utilizing a self-adaptive mechanism to adjust mutation strengths individually for each dimension, enhancing exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 16, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicMutationEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "549e4019-7ef5-4c92-b2b5-32d848819fcc", "solution": "import numpy as np\n\nclass AdaptiveMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_probs = np.ones(dim) * 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for individual in self.population:\n                mutant = individual + np.random.normal(0, self.mutation_probs)\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n            self.mutation_probs *= 0.95  # Adapt mutation probabilities\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "AdaptiveMutationEA", "description": "An evolutionary algorithm with adaptive mutation probabilities to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "36ed92f9-4f81-4e4f-be6f-82ce1965d9b4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_probs = np.ones(dim) * 0.5\n        self.step_size = 0.1  # Initial mutation step size\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for individual in self.population:\n                mutant = individual + np.random.normal(0, self.mutation_probs * self.step_size)\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n            self.step_size *= 0.95  # Adjust step size dynamically based on population performance\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedAdaptiveMutationEA", "description": "Introducing a dynamic adaptive step size control mechanism to adjust the mutation step size based on the population's performance for enhanced convergence speed.", "configspace": "", "generation": 18, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedAdaptiveMutationEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "f45b81d0-8b19-4ffd-adab-a1a49d0fe08c", "solution": "import numpy as np\n\nclass DynamicMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_probs = np.ones(dim) * 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for idx, individual in enumerate(self.population):\n                f_ratio = func(individual) / func(best_individual)\n                mutant = individual + np.random.normal(0, self.mutation_probs * (1.0 - f_ratio))\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n            self.mutation_probs *= 0.95  # Adapt mutation probabilities\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DynamicMutationEA", "description": "Introducing dynamic mutation step sizes per dimension based on individual performance to enhance exploration and exploitation trade-off for accelerated convergence.", "configspace": "", "generation": 19, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicMutationEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "59b67a42-9564-42d5-9167-322ab4524e65", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_probs = np.ones(dim) * 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for idx, individual in enumerate(self.population):\n                mutation_step = np.clip(1 / (fitness[idx] + 1), 0.01, 0.5)\n                mutant = individual + np.random.normal(0, self.mutation_probs * mutation_step)\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n            self.mutation_probs *= 0.95  # Adapt mutation probabilities\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedAdaptiveMutationEA", "description": "Introducing adaptive individual-level mutation step sizes based on individual fitness for improved convergence speed.", "configspace": "", "generation": 20, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedAdaptiveMutationEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "ae9ed977-a44b-4f18-a0bb-eabd1befd74e", "solution": "import numpy as np\n\nclass DynamicMutationEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.mutation_probs = np.ones(dim) * 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n\n            new_population = []\n            for ind, individual in enumerate(self.population):\n                fitness_ratio = fitness[ind] / (max(fitness) + 1e-10)\n                mutant = individual + np.random.normal(0, self.mutation_probs * fitness_ratio)\n                new_population.append(mutant)\n\n            self.population = np.array(new_population)\n            self.mutation_probs *= 0.95  # Adapt mutation probabilities\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DynamicMutationEA", "description": "Introducing a dynamic mutation strategy by scaling mutation step sizes based on individual fitness to adapt more effectively during the optimization process.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('scale < 0').", "error": "ValueError('scale < 0')", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {}, "mutation_prompt": null}
{"id": "cad531e6-c9bb-4878-8094-493285135afb", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DifferentialEvolution", "description": "Implement a differential evolution strategy with a dynamic variant factor to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 22, "fitness": 0.0929192965260107, "feedback": "The algorithm DifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d658858f-9653-472b-9509-c9fee99389f0", "metadata": {"aucs": [0.17380081264612168, 0.174152094506968, 0.20404117108607522, 0.16340478338686593, 0.18148109802737, 0.1728854411272216, 0.17252571942457873, 0.15648098923955855, 0.18564601662631175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04181267110259701, 0.045887495421480295, 0.04073514802054923, 0.051823562599245476, 0.049003076232925324, 0.04705173737076895, 0.0564697732153554, 0.06114311613913037, 0.05338201436858614, 0.022618566204630985, 0.026663201022351535, 0.03844317816908316, 0.03146573483938386, 0.044136161081589353, 0.052232443320094135, 0.03738218218437228, 0.03438514007109994, 0.03487779237652355, 0.07616832522969796, 0.08114590459837545, 0.08379359267997533, 0.08325584162123412, 0.0819524326100669, 0.08449510180038544, 0.08108734919338478, 0.08372054484169444, 0.07851090654539328, 0.09763284671267958, 0.07121143629718096, 0.10080274843660886, 0.1155426147546823, 0.07131179925523135, 0.08637833353035584, 0.09321743310482211, 0.0867110276016465, 0.0894403634800155, 0.12224103825986954, 0.18953294263770826, 0.1626578871926595, 0.11752938381926525, 0.11682758912684643, 0.12199575600106582, 0.10970975824617268, 0.13058485498547, 0.1152559289636027, 0.0680251663447703, 9.999999999998899e-05, 0.006155393000245368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02145698820254316, 0.016764035753700557, 0.01776942208329657, 0.021464633257976984, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.012469766719485631, 0.006837727778173042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04063004760389444, 0.1146680616612411, 0.06102947831797023, 0.05941523347397892, 0.024562895169599308, 0.052266526759215615, 0.045141045110925315, 0.09261047124604116, 0.04611406351601999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005423084492062302, 9.999999999998899e-05, 0.003693259667668425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21974685984760534, 0.20687395059054314, 0.189081941607107, 0.20445559401685842, 0.1922556966677228, 0.23232379746948917, 0.2437137897360302, 0.18150752800561565, 0.19865172764457972, 0.033890893932686406, 0.04500219650884596, 0.0437256246551162, 0.051719456197037994, 0.04319063397368661, 0.04489290748105901, 0.05625702643609909, 0.04726624955108005, 0.05269945687530364, 0.1362459275304183, 0.13355341409188282, 0.12767449283838816, 0.14599979353404435, 0.13919662498487506, 0.1268625655577782, 0.14772276306140608, 0.14608465105687773, 0.1917891528965363, 0.16416218239308566, 0.1548406080977568, 0.19048386794667138, 0.16856710229267102, 0.17412472085791975, 0.17055434936468084, 0.1629862339014766, 0.17371215329358403, 0.155441817311613, 0.10384011549425454, 0.10011221725175035, 0.13875979352415158, 0.10304310787952586, 0.132397332960564, 0.10912081742392143, 0.10237826702200747, 0.12554405042137318, 0.11856483302353793, 0.15053636986144137, 0.16004096992997752, 0.153038005068038, 0.16980331778711588, 0.15608114368377823, 0.16129217522113104, 0.18014434165414173, 0.19198222741699067, 0.17702288085908346, 0.14104594108005042, 0.14777666450021842, 0.13940098382747235, 0.13992945038968696, 0.13896541413120744, 0.1519754803069533, 0.14485541920210832, 0.1485782352262267, 0.1604757114380957, 0.15302598755406704, 0.16424215512227147, 0.16230003522378433, 0.16277240432256512, 0.1473313903079203, 0.16719842227444792, 0.1572758042559873, 0.15917653179353652, 0.20507353267300665, 0.17110751380714284, 0.15590396833648557, 0.20572110152837764, 0.15909620852105122, 0.1512472314951867, 0.15262694713384006, 0.17707181486050527, 0.16533343338132322, 0.15702584139356113, 0.18190287010089146, 0.1835489410344916, 0.172918267540218, 0.18996263233369437, 0.21010496446890925, 0.18660727872308402, 0.18617822674976126, 0.18064502667658822, 0.2045433446640953, 0.05833149916201952, 0.05093065592932866, 0.0639892554775312, 0.05184400404576539, 0.058688184149103706, 0.05362808696191401, 0.07271809942625862, 0.05952788639603879, 0.05532356184631804]}, "mutation_prompt": null}
{"id": "4bd8e430-c901-4e3a-8582-90cae77a507d", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DifferentialEvolution", "description": "Implement a differential evolution strategy with a dynamic variant factor to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.17380081264612168, 0.174152094506968, 0.20404117108607522, 0.16340478338686593, 0.18148109802737, 0.1728854411272216, 0.17252571942457873, 0.15648098923955855, 0.18564601662631175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04181267110259701, 0.045887495421480295, 0.04073514802054923, 0.051823562599245476, 0.049003076232925324, 0.04705173737076895, 0.0564697732153554, 0.06114311613913037, 0.05338201436858614, 0.022618566204630985, 0.026663201022351535, 0.03844317816908316, 0.03146573483938386, 0.044136161081589353, 0.052232443320094135, 0.03738218218437228, 0.03438514007109994, 0.03487779237652355, 0.07616832522969796, 0.08114590459837545, 0.08379359267997533, 0.08325584162123412, 0.0819524326100669, 0.08449510180038544, 0.08108734919338478, 0.08372054484169444, 0.07851090654539328, 0.09763284671267958, 0.07121143629718096, 0.10080274843660886, 0.1155426147546823, 0.07131179925523135, 0.08637833353035584, 0.09321743310482211, 0.0867110276016465, 0.0894403634800155, 0.12224103825986954, 0.18953294263770826, 0.1626578871926595, 0.11752938381926525, 0.11682758912684643, 0.12199575600106582, 0.10970975824617268, 0.13058485498547, 0.1152559289636027, 0.0680251663447703, 9.999999999998899e-05, 0.006155393000245368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02145698820254316, 0.016764035753700557, 0.01776942208329657, 0.021464633257976984, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.012469766719485631, 0.006837727778173042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04063004760389444, 0.1146680616612411, 0.06102947831797023, 0.05941523347397892, 0.024562895169599308, 0.052266526759215615, 0.045141045110925315, 0.09261047124604116, 0.04611406351601999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005423084492062302, 9.999999999998899e-05, 0.003693259667668425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21974685984760534, 0.20687395059054314, 0.189081941607107, 0.20445559401685842, 0.1922556966677228, 0.23232379746948917, 0.2437137897360302, 0.18150752800561565, 0.19865172764457972, 0.033890893932686406, 0.04500219650884596, 0.0437256246551162, 0.051719456197037994, 0.04319063397368661, 0.04489290748105901, 0.05625702643609909, 0.04726624955108005, 0.05269945687530364, 0.1362459275304183, 0.13355341409188282, 0.12767449283838816, 0.14599979353404435, 0.13919662498487506, 0.1268625655577782, 0.14772276306140608, 0.14608465105687773, 0.1917891528965363, 0.16416218239308566, 0.1548406080977568, 0.19048386794667138, 0.16856710229267102, 0.17412472085791975, 0.17055434936468084, 0.1629862339014766, 0.17371215329358403, 0.155441817311613, 0.10384011549425454, 0.10011221725175035, 0.13875979352415158, 0.10304310787952586, 0.132397332960564, 0.10912081742392143, 0.10237826702200747, 0.12554405042137318, 0.11856483302353793, 0.15053636986144137, 0.16004096992997752, 0.153038005068038, 0.16980331778711588, 0.15608114368377823, 0.16129217522113104, 0.18014434165414173, 0.19198222741699067, 0.17702288085908346, 0.14104594108005042, 0.14777666450021842, 0.13940098382747235, 0.13992945038968696, 0.13896541413120744, 0.1519754803069533, 0.14485541920210832, 0.1485782352262267, 0.1604757114380957, 0.15302598755406704, 0.16424215512227147, 0.16230003522378433, 0.16277240432256512, 0.1473313903079203, 0.16719842227444792, 0.1572758042559873, 0.15917653179353652, 0.20507353267300665, 0.17110751380714284, 0.15590396833648557, 0.20572110152837764, 0.15909620852105122, 0.1512472314951867, 0.15262694713384006, 0.17707181486050527, 0.16533343338132322, 0.15702584139356113, 0.18190287010089146, 0.1835489410344916, 0.172918267540218, 0.18996263233369437, 0.21010496446890925, 0.18660727872308402, 0.18617822674976126, 0.18064502667658822, 0.2045433446640953, 0.05833149916201952, 0.05093065592932866, 0.0639892554775312, 0.05184400404576539, 0.058688184149103706, 0.05362808696191401, 0.07271809942625862, 0.05952788639603879, 0.05532356184631804]}, "mutation_prompt": null}
{"id": "c7cee809-7f2f-49e9-9e71-ebc69703d286", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DifferentialEvolution", "description": "Implement a differential evolution strategy with a dynamic variant factor to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.17380081264612168, 0.174152094506968, 0.20404117108607522, 0.16340478338686593, 0.18148109802737, 0.1728854411272216, 0.17252571942457873, 0.15648098923955855, 0.18564601662631175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04181267110259701, 0.045887495421480295, 0.04073514802054923, 0.051823562599245476, 0.049003076232925324, 0.04705173737076895, 0.0564697732153554, 0.06114311613913037, 0.05338201436858614, 0.022618566204630985, 0.026663201022351535, 0.03844317816908316, 0.03146573483938386, 0.044136161081589353, 0.052232443320094135, 0.03738218218437228, 0.03438514007109994, 0.03487779237652355, 0.07616832522969796, 0.08114590459837545, 0.08379359267997533, 0.08325584162123412, 0.0819524326100669, 0.08449510180038544, 0.08108734919338478, 0.08372054484169444, 0.07851090654539328, 0.09763284671267958, 0.07121143629718096, 0.10080274843660886, 0.1155426147546823, 0.07131179925523135, 0.08637833353035584, 0.09321743310482211, 0.0867110276016465, 0.0894403634800155, 0.12224103825986954, 0.18953294263770826, 0.1626578871926595, 0.11752938381926525, 0.11682758912684643, 0.12199575600106582, 0.10970975824617268, 0.13058485498547, 0.1152559289636027, 0.0680251663447703, 9.999999999998899e-05, 0.006155393000245368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02145698820254316, 0.016764035753700557, 0.01776942208329657, 0.021464633257976984, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.012469766719485631, 0.006837727778173042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04063004760389444, 0.1146680616612411, 0.06102947831797023, 0.05941523347397892, 0.024562895169599308, 0.052266526759215615, 0.045141045110925315, 0.09261047124604116, 0.04611406351601999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005423084492062302, 9.999999999998899e-05, 0.003693259667668425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21974685984760534, 0.20687395059054314, 0.189081941607107, 0.20445559401685842, 0.1922556966677228, 0.23232379746948917, 0.2437137897360302, 0.18150752800561565, 0.19865172764457972, 0.033890893932686406, 0.04500219650884596, 0.0437256246551162, 0.051719456197037994, 0.04319063397368661, 0.04489290748105901, 0.05625702643609909, 0.04726624955108005, 0.05269945687530364, 0.1362459275304183, 0.13355341409188282, 0.12767449283838816, 0.14599979353404435, 0.13919662498487506, 0.1268625655577782, 0.14772276306140608, 0.14608465105687773, 0.1917891528965363, 0.16416218239308566, 0.1548406080977568, 0.19048386794667138, 0.16856710229267102, 0.17412472085791975, 0.17055434936468084, 0.1629862339014766, 0.17371215329358403, 0.155441817311613, 0.10384011549425454, 0.10011221725175035, 0.13875979352415158, 0.10304310787952586, 0.132397332960564, 0.10912081742392143, 0.10237826702200747, 0.12554405042137318, 0.11856483302353793, 0.15053636986144137, 0.16004096992997752, 0.153038005068038, 0.16980331778711588, 0.15608114368377823, 0.16129217522113104, 0.18014434165414173, 0.19198222741699067, 0.17702288085908346, 0.14104594108005042, 0.14777666450021842, 0.13940098382747235, 0.13992945038968696, 0.13896541413120744, 0.1519754803069533, 0.14485541920210832, 0.1485782352262267, 0.1604757114380957, 0.15302598755406704, 0.16424215512227147, 0.16230003522378433, 0.16277240432256512, 0.1473313903079203, 0.16719842227444792, 0.1572758042559873, 0.15917653179353652, 0.20507353267300665, 0.17110751380714284, 0.15590396833648557, 0.20572110152837764, 0.15909620852105122, 0.1512472314951867, 0.15262694713384006, 0.17707181486050527, 0.16533343338132322, 0.15702584139356113, 0.18190287010089146, 0.1835489410344916, 0.172918267540218, 0.18996263233369437, 0.21010496446890925, 0.18660727872308402, 0.18617822674976126, 0.18064502667658822, 0.2045433446640953, 0.05833149916201952, 0.05093065592932866, 0.0639892554775312, 0.05184400404576539, 0.058688184149103706, 0.05362808696191401, 0.07271809942625862, 0.05952788639603879, 0.05532356184631804]}, "mutation_prompt": null}
{"id": "b474ffe7-1e79-4789-a0ef-753964abfaeb", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DifferentialEvolution", "description": "Implement a differential evolution strategy with a dynamic variant factor to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.17380081264612168, 0.174152094506968, 0.20404117108607522, 0.16340478338686593, 0.18148109802737, 0.1728854411272216, 0.17252571942457873, 0.15648098923955855, 0.18564601662631175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04181267110259701, 0.045887495421480295, 0.04073514802054923, 0.051823562599245476, 0.049003076232925324, 0.04705173737076895, 0.0564697732153554, 0.06114311613913037, 0.05338201436858614, 0.022618566204630985, 0.026663201022351535, 0.03844317816908316, 0.03146573483938386, 0.044136161081589353, 0.052232443320094135, 0.03738218218437228, 0.03438514007109994, 0.03487779237652355, 0.07616832522969796, 0.08114590459837545, 0.08379359267997533, 0.08325584162123412, 0.0819524326100669, 0.08449510180038544, 0.08108734919338478, 0.08372054484169444, 0.07851090654539328, 0.09763284671267958, 0.07121143629718096, 0.10080274843660886, 0.1155426147546823, 0.07131179925523135, 0.08637833353035584, 0.09321743310482211, 0.0867110276016465, 0.0894403634800155, 0.12224103825986954, 0.18953294263770826, 0.1626578871926595, 0.11752938381926525, 0.11682758912684643, 0.12199575600106582, 0.10970975824617268, 0.13058485498547, 0.1152559289636027, 0.0680251663447703, 9.999999999998899e-05, 0.006155393000245368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02145698820254316, 0.016764035753700557, 0.01776942208329657, 0.021464633257976984, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.012469766719485631, 0.006837727778173042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04063004760389444, 0.1146680616612411, 0.06102947831797023, 0.05941523347397892, 0.024562895169599308, 0.052266526759215615, 0.045141045110925315, 0.09261047124604116, 0.04611406351601999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005423084492062302, 9.999999999998899e-05, 0.003693259667668425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21974685984760534, 0.20687395059054314, 0.189081941607107, 0.20445559401685842, 0.1922556966677228, 0.23232379746948917, 0.2437137897360302, 0.18150752800561565, 0.19865172764457972, 0.033890893932686406, 0.04500219650884596, 0.0437256246551162, 0.051719456197037994, 0.04319063397368661, 0.04489290748105901, 0.05625702643609909, 0.04726624955108005, 0.05269945687530364, 0.1362459275304183, 0.13355341409188282, 0.12767449283838816, 0.14599979353404435, 0.13919662498487506, 0.1268625655577782, 0.14772276306140608, 0.14608465105687773, 0.1917891528965363, 0.16416218239308566, 0.1548406080977568, 0.19048386794667138, 0.16856710229267102, 0.17412472085791975, 0.17055434936468084, 0.1629862339014766, 0.17371215329358403, 0.155441817311613, 0.10384011549425454, 0.10011221725175035, 0.13875979352415158, 0.10304310787952586, 0.132397332960564, 0.10912081742392143, 0.10237826702200747, 0.12554405042137318, 0.11856483302353793, 0.15053636986144137, 0.16004096992997752, 0.153038005068038, 0.16980331778711588, 0.15608114368377823, 0.16129217522113104, 0.18014434165414173, 0.19198222741699067, 0.17702288085908346, 0.14104594108005042, 0.14777666450021842, 0.13940098382747235, 0.13992945038968696, 0.13896541413120744, 0.1519754803069533, 0.14485541920210832, 0.1485782352262267, 0.1604757114380957, 0.15302598755406704, 0.16424215512227147, 0.16230003522378433, 0.16277240432256512, 0.1473313903079203, 0.16719842227444792, 0.1572758042559873, 0.15917653179353652, 0.20507353267300665, 0.17110751380714284, 0.15590396833648557, 0.20572110152837764, 0.15909620852105122, 0.1512472314951867, 0.15262694713384006, 0.17707181486050527, 0.16533343338132322, 0.15702584139356113, 0.18190287010089146, 0.1835489410344916, 0.172918267540218, 0.18996263233369437, 0.21010496446890925, 0.18660727872308402, 0.18617822674976126, 0.18064502667658822, 0.2045433446640953, 0.05833149916201952, 0.05093065592932866, 0.0639892554775312, 0.05184400404576539, 0.058688184149103706, 0.05362808696191401, 0.07271809942625862, 0.05952788639603879, 0.05532356184631804]}, "mutation_prompt": null}
{"id": "ad96dfc7-dedd-4ceb-9c2f-923e324c25e1", "solution": "import numpy as np\n\nclass DifferentialEvolutionImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factor = 0.8\n        self.cr = 0.9  # Introducing crossover probability\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                \n                # Introducing crossover operation\n                mask = np.random.rand(self.dim) < self.cr\n                trial = np.where(mask, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n            self.cr = max(0.1, self.cr * 0.95)  # Adaptive update of crossover probability\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DifferentialEvolutionImproved", "description": "Introducing adaptive crossover probability to enhance exploration and population diversity for accelerated convergence.", "configspace": "", "generation": 26, "fitness": 0.09260113601051564, "feedback": "The algorithm DifferentialEvolutionImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.18161801386375687, 0.1882754455624086, 0.17279149793781157, 0.16183405632012493, 0.1831517306692838, 0.18563630223312289, 0.17219597621367688, 0.19638277845200536, 0.16575912531999004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04730494100134497, 0.04946435192160625, 0.05617749625146695, 0.04424527255950739, 0.058213130257773416, 0.052464397140604024, 0.04775907510709165, 0.06365161340072578, 0.053107222184319625, 0.030275137042699907, 0.038062365797456366, 0.041707122685466835, 0.03534396700537035, 0.04351291058194562, 0.05218869853380581, 0.036181189163887906, 0.034238285548932934, 0.02922985121996624, 0.07605200080179253, 0.08968101625854108, 0.0843991201505172, 0.08537832920644906, 0.1018356568860026, 0.08261758809128983, 0.08026772324997533, 0.08332580490421293, 0.07838889005132155, 0.07277859579840718, 0.07403866963122652, 0.10048782816012447, 0.06603738580464691, 0.08205552684280715, 0.08371108216231027, 0.09193629143816273, 0.04970716241909501, 0.09708812774536923, 0.15062016993715222, 0.19155921294612932, 0.14299545175124206, 0.11127976513172033, 0.11724380052203431, 0.11907334320705543, 0.11571259142845358, 0.11970491840256581, 0.14170800032804398, 9.999999999998899e-05, 0.0016841737513776378, 0.0007938462085036457, 0.06146442440537647, 0.00617360419279922, 9.999999999998899e-05, 0.03621131354275442, 9.999999999998899e-05, 0.016790757226985753, 0.013984160341901197, 0.05883216933625113, 9.999999999998899e-05, 0.01011582479638673, 0.03406038839019088, 0.011229739684523898, 0.0375195096106552, 0.01756914659934461, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0397526838344151, 0.06863708514451805, 0.05388201845614926, 0.11937792159367999, 0.045028436653937076, 0.04713775002327747, 0.04514878705923053, 0.03877956630684387, 0.08254316970885789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21399543838897195, 0.19117550460353627, 0.19289798876566655, 0.20274283587817143, 0.18594385396423463, 0.19597242216447075, 0.19590320820198737, 0.19948730585398655, 0.2064073881647459, 0.03044320980299875, 0.04827704622423934, 0.040260593887516904, 0.04202899118938308, 0.039288794453713693, 0.05703506666755276, 0.06346997821786537, 0.03980377354283138, 0.04567724183082833, 0.1404388168605305, 0.12013944304070423, 0.13186274669681153, 0.1532762120104333, 0.13919662498487506, 0.15107102980758413, 0.1482038624662051, 0.14600661795070702, 0.12489387870961022, 0.16655617631182662, 0.1650213408043717, 0.1675194376028286, 0.16533970809450715, 0.16929722915926448, 0.16843074748231446, 0.1634993719203447, 0.1736611165966535, 0.1530965855622386, 0.11023227463245744, 0.10029855328752924, 0.10975066747729723, 0.10441763132486415, 0.12700276973666658, 0.11408526078076031, 0.10697134052887836, 0.12317170225987362, 0.12000175729914697, 0.16901946999668094, 0.16293580712719646, 0.1506436990127541, 0.1586323192037502, 0.1419959993520955, 0.1540130954290173, 0.15850368916628066, 0.15928763082765895, 0.1819916573821957, 0.15819751432080686, 0.14439151231247815, 0.14912246617280434, 0.14139333825530798, 0.1396296123139944, 0.15311265505736005, 0.14540937284517264, 0.14513026621556824, 0.1604757114380957, 0.1553752479968441, 0.1656236953122321, 0.16322234297416494, 0.16528046318228606, 0.17696298238538943, 0.21463076614956533, 0.1763485470675894, 0.16527242441163492, 0.1617436683956106, 0.18791253383887652, 0.1985611163741502, 0.16743470884490141, 0.15782092744950682, 0.15840085029473505, 0.1653051810472631, 0.16293957260363046, 0.16785817375870193, 0.14980122897774184, 0.18558797807920557, 0.18469082583782026, 0.17279390516444382, 0.18431452637330836, 0.21034466797107043, 0.1844653728159964, 0.18154853259605985, 0.19451348735669827, 0.2031059038863856, 0.05710395087863851, 0.05400259342893898, 0.0639824361372785, 0.07140602043747746, 0.07580213608047448, 0.05634009734141632, 0.07225636132517033, 0.0529333292803712, 0.04430947535468022]}, "mutation_prompt": null}
{"id": "d6377014-59d5-40ae-bcda-1dc0a4056c46", "solution": "import numpy as np\n\nclass ImprovedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factors = np.full(budget, 0.8)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factors[i] * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.f_factors[i] *= 1.05  # Update scaling factor based on individual improvement\n                else:\n                    self.f_factors[i] *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "ImprovedDifferentialEvolution", "description": "Introduce a self-adaptive scaling factor based on individual performance to enhance exploitation without increasing the computational complexity significantly.", "configspace": "", "generation": 27, "fitness": 0.0929192965260107, "feedback": "The algorithm ImprovedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.17380081264612168, 0.174152094506968, 0.20404117108607522, 0.16340478338686593, 0.18148109802737, 0.1728854411272216, 0.17252571942457873, 0.15648098923955855, 0.18564601662631175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04181267110259701, 0.045887495421480295, 0.04073514802054923, 0.051823562599245476, 0.049003076232925324, 0.04705173737076895, 0.0564697732153554, 0.06114311613913037, 0.05338201436858614, 0.022618566204630985, 0.026663201022351535, 0.03844317816908316, 0.03146573483938386, 0.044136161081589353, 0.052232443320094135, 0.03738218218437228, 0.03438514007109994, 0.03487779237652355, 0.07616832522969796, 0.08114590459837545, 0.08379359267997533, 0.08325584162123412, 0.0819524326100669, 0.08449510180038544, 0.08108734919338478, 0.08372054484169444, 0.07851090654539328, 0.09763284671267958, 0.07121143629718096, 0.10080274843660886, 0.1155426147546823, 0.07131179925523135, 0.08637833353035584, 0.09321743310482211, 0.0867110276016465, 0.0894403634800155, 0.12224103825986954, 0.18953294263770826, 0.1626578871926595, 0.11752938381926525, 0.11682758912684643, 0.12199575600106582, 0.10970975824617268, 0.13058485498547, 0.1152559289636027, 0.0680251663447703, 9.999999999998899e-05, 0.006155393000245368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02145698820254316, 0.016764035753700557, 0.01776942208329657, 0.021464633257976984, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.012469766719485631, 0.006837727778173042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04063004760389444, 0.1146680616612411, 0.06102947831797023, 0.05941523347397892, 0.024562895169599308, 0.052266526759215615, 0.045141045110925315, 0.09261047124604116, 0.04611406351601999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005423084492062302, 9.999999999998899e-05, 0.003693259667668425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21974685984760534, 0.20687395059054314, 0.189081941607107, 0.20445559401685842, 0.1922556966677228, 0.23232379746948917, 0.2437137897360302, 0.18150752800561565, 0.19865172764457972, 0.033890893932686406, 0.04500219650884596, 0.0437256246551162, 0.051719456197037994, 0.04319063397368661, 0.04489290748105901, 0.05625702643609909, 0.04726624955108005, 0.05269945687530364, 0.1362459275304183, 0.13355341409188282, 0.12767449283838816, 0.14599979353404435, 0.13919662498487506, 0.1268625655577782, 0.14772276306140608, 0.14608465105687773, 0.1917891528965363, 0.16416218239308566, 0.1548406080977568, 0.19048386794667138, 0.16856710229267102, 0.17412472085791975, 0.17055434936468084, 0.1629862339014766, 0.17371215329358403, 0.155441817311613, 0.10384011549425454, 0.10011221725175035, 0.13875979352415158, 0.10304310787952586, 0.132397332960564, 0.10912081742392143, 0.10237826702200747, 0.12554405042137318, 0.11856483302353793, 0.15053636986144137, 0.16004096992997752, 0.153038005068038, 0.16980331778711588, 0.15608114368377823, 0.16129217522113104, 0.18014434165414173, 0.19198222741699067, 0.17702288085908346, 0.14104594108005042, 0.14777666450021842, 0.13940098382747235, 0.13992945038968696, 0.13896541413120744, 0.1519754803069533, 0.14485541920210832, 0.1485782352262267, 0.1604757114380957, 0.15302598755406704, 0.16424215512227147, 0.16230003522378433, 0.16277240432256512, 0.1473313903079203, 0.16719842227444792, 0.1572758042559873, 0.15917653179353652, 0.20507353267300665, 0.17110751380714284, 0.15590396833648557, 0.20572110152837764, 0.15909620852105122, 0.1512472314951867, 0.15262694713384006, 0.17707181486050527, 0.16533343338132322, 0.15702584139356113, 0.18190287010089146, 0.1835489410344916, 0.172918267540218, 0.18996263233369437, 0.21010496446890925, 0.18660727872308402, 0.18617822674976126, 0.18064502667658822, 0.2045433446640953, 0.05833149916201952, 0.05093065592932866, 0.0639892554775312, 0.05184400404576539, 0.058688184149103706, 0.05362808696191401, 0.07271809942625862, 0.05952788639603879, 0.05532356184631804]}, "mutation_prompt": null}
{"id": "8ced6546-b061-45ef-8737-080723cb0544", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DifferentialEvolution", "description": "Implement a differential evolution strategy with a dynamic variant factor to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.17380081264612168, 0.174152094506968, 0.20404117108607522, 0.16340478338686593, 0.18148109802737, 0.1728854411272216, 0.17252571942457873, 0.15648098923955855, 0.18564601662631175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04181267110259701, 0.045887495421480295, 0.04073514802054923, 0.051823562599245476, 0.049003076232925324, 0.04705173737076895, 0.0564697732153554, 0.06114311613913037, 0.05338201436858614, 0.022618566204630985, 0.026663201022351535, 0.03844317816908316, 0.03146573483938386, 0.044136161081589353, 0.052232443320094135, 0.03738218218437228, 0.03438514007109994, 0.03487779237652355, 0.07616832522969796, 0.08114590459837545, 0.08379359267997533, 0.08325584162123412, 0.0819524326100669, 0.08449510180038544, 0.08108734919338478, 0.08372054484169444, 0.07851090654539328, 0.09763284671267958, 0.07121143629718096, 0.10080274843660886, 0.1155426147546823, 0.07131179925523135, 0.08637833353035584, 0.09321743310482211, 0.0867110276016465, 0.0894403634800155, 0.12224103825986954, 0.18953294263770826, 0.1626578871926595, 0.11752938381926525, 0.11682758912684643, 0.12199575600106582, 0.10970975824617268, 0.13058485498547, 0.1152559289636027, 0.0680251663447703, 9.999999999998899e-05, 0.006155393000245368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02145698820254316, 0.016764035753700557, 0.01776942208329657, 0.021464633257976984, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.012469766719485631, 0.006837727778173042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04063004760389444, 0.1146680616612411, 0.06102947831797023, 0.05941523347397892, 0.024562895169599308, 0.052266526759215615, 0.045141045110925315, 0.09261047124604116, 0.04611406351601999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005423084492062302, 9.999999999998899e-05, 0.003693259667668425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21974685984760534, 0.20687395059054314, 0.189081941607107, 0.20445559401685842, 0.1922556966677228, 0.23232379746948917, 0.2437137897360302, 0.18150752800561565, 0.19865172764457972, 0.033890893932686406, 0.04500219650884596, 0.0437256246551162, 0.051719456197037994, 0.04319063397368661, 0.04489290748105901, 0.05625702643609909, 0.04726624955108005, 0.05269945687530364, 0.1362459275304183, 0.13355341409188282, 0.12767449283838816, 0.14599979353404435, 0.13919662498487506, 0.1268625655577782, 0.14772276306140608, 0.14608465105687773, 0.1917891528965363, 0.16416218239308566, 0.1548406080977568, 0.19048386794667138, 0.16856710229267102, 0.17412472085791975, 0.17055434936468084, 0.1629862339014766, 0.17371215329358403, 0.155441817311613, 0.10384011549425454, 0.10011221725175035, 0.13875979352415158, 0.10304310787952586, 0.132397332960564, 0.10912081742392143, 0.10237826702200747, 0.12554405042137318, 0.11856483302353793, 0.15053636986144137, 0.16004096992997752, 0.153038005068038, 0.16980331778711588, 0.15608114368377823, 0.16129217522113104, 0.18014434165414173, 0.19198222741699067, 0.17702288085908346, 0.14104594108005042, 0.14777666450021842, 0.13940098382747235, 0.13992945038968696, 0.13896541413120744, 0.1519754803069533, 0.14485541920210832, 0.1485782352262267, 0.1604757114380957, 0.15302598755406704, 0.16424215512227147, 0.16230003522378433, 0.16277240432256512, 0.1473313903079203, 0.16719842227444792, 0.1572758042559873, 0.15917653179353652, 0.20507353267300665, 0.17110751380714284, 0.15590396833648557, 0.20572110152837764, 0.15909620852105122, 0.1512472314951867, 0.15262694713384006, 0.17707181486050527, 0.16533343338132322, 0.15702584139356113, 0.18190287010089146, 0.1835489410344916, 0.172918267540218, 0.18996263233369437, 0.21010496446890925, 0.18660727872308402, 0.18617822674976126, 0.18064502667658822, 0.2045433446640953, 0.05833149916201952, 0.05093065592932866, 0.0639892554775312, 0.05184400404576539, 0.058688184149103706, 0.05362808696191401, 0.07271809942625862, 0.05952788639603879, 0.05532356184631804]}, "mutation_prompt": null}
{"id": "8aceabf3-6967-4b0c-8715-9fe42f0b8b1a", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DifferentialEvolution", "description": "Implement a differential evolution strategy with a dynamic variant factor to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.17380081264612168, 0.174152094506968, 0.20404117108607522, 0.16340478338686593, 0.18148109802737, 0.1728854411272216, 0.17252571942457873, 0.15648098923955855, 0.18564601662631175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04181267110259701, 0.045887495421480295, 0.04073514802054923, 0.051823562599245476, 0.049003076232925324, 0.04705173737076895, 0.0564697732153554, 0.06114311613913037, 0.05338201436858614, 0.022618566204630985, 0.026663201022351535, 0.03844317816908316, 0.03146573483938386, 0.044136161081589353, 0.052232443320094135, 0.03738218218437228, 0.03438514007109994, 0.03487779237652355, 0.07616832522969796, 0.08114590459837545, 0.08379359267997533, 0.08325584162123412, 0.0819524326100669, 0.08449510180038544, 0.08108734919338478, 0.08372054484169444, 0.07851090654539328, 0.09763284671267958, 0.07121143629718096, 0.10080274843660886, 0.1155426147546823, 0.07131179925523135, 0.08637833353035584, 0.09321743310482211, 0.0867110276016465, 0.0894403634800155, 0.12224103825986954, 0.18953294263770826, 0.1626578871926595, 0.11752938381926525, 0.11682758912684643, 0.12199575600106582, 0.10970975824617268, 0.13058485498547, 0.1152559289636027, 0.0680251663447703, 9.999999999998899e-05, 0.006155393000245368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02145698820254316, 0.016764035753700557, 0.01776942208329657, 0.021464633257976984, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.012469766719485631, 0.006837727778173042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04063004760389444, 0.1146680616612411, 0.06102947831797023, 0.05941523347397892, 0.024562895169599308, 0.052266526759215615, 0.045141045110925315, 0.09261047124604116, 0.04611406351601999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005423084492062302, 9.999999999998899e-05, 0.003693259667668425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21974685984760534, 0.20687395059054314, 0.189081941607107, 0.20445559401685842, 0.1922556966677228, 0.23232379746948917, 0.2437137897360302, 0.18150752800561565, 0.19865172764457972, 0.033890893932686406, 0.04500219650884596, 0.0437256246551162, 0.051719456197037994, 0.04319063397368661, 0.04489290748105901, 0.05625702643609909, 0.04726624955108005, 0.05269945687530364, 0.1362459275304183, 0.13355341409188282, 0.12767449283838816, 0.14599979353404435, 0.13919662498487506, 0.1268625655577782, 0.14772276306140608, 0.14608465105687773, 0.1917891528965363, 0.16416218239308566, 0.1548406080977568, 0.19048386794667138, 0.16856710229267102, 0.17412472085791975, 0.17055434936468084, 0.1629862339014766, 0.17371215329358403, 0.155441817311613, 0.10384011549425454, 0.10011221725175035, 0.13875979352415158, 0.10304310787952586, 0.132397332960564, 0.10912081742392143, 0.10237826702200747, 0.12554405042137318, 0.11856483302353793, 0.15053636986144137, 0.16004096992997752, 0.153038005068038, 0.16980331778711588, 0.15608114368377823, 0.16129217522113104, 0.18014434165414173, 0.19198222741699067, 0.17702288085908346, 0.14104594108005042, 0.14777666450021842, 0.13940098382747235, 0.13992945038968696, 0.13896541413120744, 0.1519754803069533, 0.14485541920210832, 0.1485782352262267, 0.1604757114380957, 0.15302598755406704, 0.16424215512227147, 0.16230003522378433, 0.16277240432256512, 0.1473313903079203, 0.16719842227444792, 0.1572758042559873, 0.15917653179353652, 0.20507353267300665, 0.17110751380714284, 0.15590396833648557, 0.20572110152837764, 0.15909620852105122, 0.1512472314951867, 0.15262694713384006, 0.17707181486050527, 0.16533343338132322, 0.15702584139356113, 0.18190287010089146, 0.1835489410344916, 0.172918267540218, 0.18996263233369437, 0.21010496446890925, 0.18660727872308402, 0.18617822674976126, 0.18064502667658822, 0.2045433446640953, 0.05833149916201952, 0.05093065592932866, 0.0639892554775312, 0.05184400404576539, 0.058688184149103706, 0.05362808696191401, 0.07271809942625862, 0.05952788639603879, 0.05532356184631804]}, "mutation_prompt": null}
{"id": "9b941259-a47e-4c87-91c2-4ba80ed19252", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DifferentialEvolution", "description": "Implement a differential evolution strategy with a dynamic variant factor to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.17380081264612168, 0.174152094506968, 0.20404117108607522, 0.16340478338686593, 0.18148109802737, 0.1728854411272216, 0.17252571942457873, 0.15648098923955855, 0.18564601662631175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04181267110259701, 0.045887495421480295, 0.04073514802054923, 0.051823562599245476, 0.049003076232925324, 0.04705173737076895, 0.0564697732153554, 0.06114311613913037, 0.05338201436858614, 0.022618566204630985, 0.026663201022351535, 0.03844317816908316, 0.03146573483938386, 0.044136161081589353, 0.052232443320094135, 0.03738218218437228, 0.03438514007109994, 0.03487779237652355, 0.07616832522969796, 0.08114590459837545, 0.08379359267997533, 0.08325584162123412, 0.0819524326100669, 0.08449510180038544, 0.08108734919338478, 0.08372054484169444, 0.07851090654539328, 0.09763284671267958, 0.07121143629718096, 0.10080274843660886, 0.1155426147546823, 0.07131179925523135, 0.08637833353035584, 0.09321743310482211, 0.0867110276016465, 0.0894403634800155, 0.12224103825986954, 0.18953294263770826, 0.1626578871926595, 0.11752938381926525, 0.11682758912684643, 0.12199575600106582, 0.10970975824617268, 0.13058485498547, 0.1152559289636027, 0.0680251663447703, 9.999999999998899e-05, 0.006155393000245368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02145698820254316, 0.016764035753700557, 0.01776942208329657, 0.021464633257976984, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.012469766719485631, 0.006837727778173042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04063004760389444, 0.1146680616612411, 0.06102947831797023, 0.05941523347397892, 0.024562895169599308, 0.052266526759215615, 0.045141045110925315, 0.09261047124604116, 0.04611406351601999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005423084492062302, 9.999999999998899e-05, 0.003693259667668425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21974685984760534, 0.20687395059054314, 0.189081941607107, 0.20445559401685842, 0.1922556966677228, 0.23232379746948917, 0.2437137897360302, 0.18150752800561565, 0.19865172764457972, 0.033890893932686406, 0.04500219650884596, 0.0437256246551162, 0.051719456197037994, 0.04319063397368661, 0.04489290748105901, 0.05625702643609909, 0.04726624955108005, 0.05269945687530364, 0.1362459275304183, 0.13355341409188282, 0.12767449283838816, 0.14599979353404435, 0.13919662498487506, 0.1268625655577782, 0.14772276306140608, 0.14608465105687773, 0.1917891528965363, 0.16416218239308566, 0.1548406080977568, 0.19048386794667138, 0.16856710229267102, 0.17412472085791975, 0.17055434936468084, 0.1629862339014766, 0.17371215329358403, 0.155441817311613, 0.10384011549425454, 0.10011221725175035, 0.13875979352415158, 0.10304310787952586, 0.132397332960564, 0.10912081742392143, 0.10237826702200747, 0.12554405042137318, 0.11856483302353793, 0.15053636986144137, 0.16004096992997752, 0.153038005068038, 0.16980331778711588, 0.15608114368377823, 0.16129217522113104, 0.18014434165414173, 0.19198222741699067, 0.17702288085908346, 0.14104594108005042, 0.14777666450021842, 0.13940098382747235, 0.13992945038968696, 0.13896541413120744, 0.1519754803069533, 0.14485541920210832, 0.1485782352262267, 0.1604757114380957, 0.15302598755406704, 0.16424215512227147, 0.16230003522378433, 0.16277240432256512, 0.1473313903079203, 0.16719842227444792, 0.1572758042559873, 0.15917653179353652, 0.20507353267300665, 0.17110751380714284, 0.15590396833648557, 0.20572110152837764, 0.15909620852105122, 0.1512472314951867, 0.15262694713384006, 0.17707181486050527, 0.16533343338132322, 0.15702584139356113, 0.18190287010089146, 0.1835489410344916, 0.172918267540218, 0.18996263233369437, 0.21010496446890925, 0.18660727872308402, 0.18617822674976126, 0.18064502667658822, 0.2045433446640953, 0.05833149916201952, 0.05093065592932866, 0.0639892554775312, 0.05184400404576539, 0.058688184149103706, 0.05362808696191401, 0.07271809942625862, 0.05952788639603879, 0.05532356184631804]}, "mutation_prompt": null}
{"id": "a14233a1-565b-4f7a-a793-b01a0e370846", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DifferentialEvolution", "description": "Implement a differential evolution strategy with a dynamic variant factor to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.17380081264612168, 0.174152094506968, 0.20404117108607522, 0.16340478338686593, 0.18148109802737, 0.1728854411272216, 0.17252571942457873, 0.15648098923955855, 0.18564601662631175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04181267110259701, 0.045887495421480295, 0.04073514802054923, 0.051823562599245476, 0.049003076232925324, 0.04705173737076895, 0.0564697732153554, 0.06114311613913037, 0.05338201436858614, 0.022618566204630985, 0.026663201022351535, 0.03844317816908316, 0.03146573483938386, 0.044136161081589353, 0.052232443320094135, 0.03738218218437228, 0.03438514007109994, 0.03487779237652355, 0.07616832522969796, 0.08114590459837545, 0.08379359267997533, 0.08325584162123412, 0.0819524326100669, 0.08449510180038544, 0.08108734919338478, 0.08372054484169444, 0.07851090654539328, 0.09763284671267958, 0.07121143629718096, 0.10080274843660886, 0.1155426147546823, 0.07131179925523135, 0.08637833353035584, 0.09321743310482211, 0.0867110276016465, 0.0894403634800155, 0.12224103825986954, 0.18953294263770826, 0.1626578871926595, 0.11752938381926525, 0.11682758912684643, 0.12199575600106582, 0.10970975824617268, 0.13058485498547, 0.1152559289636027, 0.0680251663447703, 9.999999999998899e-05, 0.006155393000245368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02145698820254316, 0.016764035753700557, 0.01776942208329657, 0.021464633257976984, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.012469766719485631, 0.006837727778173042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04063004760389444, 0.1146680616612411, 0.06102947831797023, 0.05941523347397892, 0.024562895169599308, 0.052266526759215615, 0.045141045110925315, 0.09261047124604116, 0.04611406351601999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005423084492062302, 9.999999999998899e-05, 0.003693259667668425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21974685984760534, 0.20687395059054314, 0.189081941607107, 0.20445559401685842, 0.1922556966677228, 0.23232379746948917, 0.2437137897360302, 0.18150752800561565, 0.19865172764457972, 0.033890893932686406, 0.04500219650884596, 0.0437256246551162, 0.051719456197037994, 0.04319063397368661, 0.04489290748105901, 0.05625702643609909, 0.04726624955108005, 0.05269945687530364, 0.1362459275304183, 0.13355341409188282, 0.12767449283838816, 0.14599979353404435, 0.13919662498487506, 0.1268625655577782, 0.14772276306140608, 0.14608465105687773, 0.1917891528965363, 0.16416218239308566, 0.1548406080977568, 0.19048386794667138, 0.16856710229267102, 0.17412472085791975, 0.17055434936468084, 0.1629862339014766, 0.17371215329358403, 0.155441817311613, 0.10384011549425454, 0.10011221725175035, 0.13875979352415158, 0.10304310787952586, 0.132397332960564, 0.10912081742392143, 0.10237826702200747, 0.12554405042137318, 0.11856483302353793, 0.15053636986144137, 0.16004096992997752, 0.153038005068038, 0.16980331778711588, 0.15608114368377823, 0.16129217522113104, 0.18014434165414173, 0.19198222741699067, 0.17702288085908346, 0.14104594108005042, 0.14777666450021842, 0.13940098382747235, 0.13992945038968696, 0.13896541413120744, 0.1519754803069533, 0.14485541920210832, 0.1485782352262267, 0.1604757114380957, 0.15302598755406704, 0.16424215512227147, 0.16230003522378433, 0.16277240432256512, 0.1473313903079203, 0.16719842227444792, 0.1572758042559873, 0.15917653179353652, 0.20507353267300665, 0.17110751380714284, 0.15590396833648557, 0.20572110152837764, 0.15909620852105122, 0.1512472314951867, 0.15262694713384006, 0.17707181486050527, 0.16533343338132322, 0.15702584139356113, 0.18190287010089146, 0.1835489410344916, 0.172918267540218, 0.18996263233369437, 0.21010496446890925, 0.18660727872308402, 0.18617822674976126, 0.18064502667658822, 0.2045433446640953, 0.05833149916201952, 0.05093065592932866, 0.0639892554775312, 0.05184400404576539, 0.058688184149103706, 0.05362808696191401, 0.07271809942625862, 0.05952788639603879, 0.05532356184631804]}, "mutation_prompt": null}
{"id": "6b90e8ad-2462-420f-a41f-9d11e2a2eb28", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DifferentialEvolution", "description": "Implement a differential evolution strategy with a dynamic variant factor to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.17380081264612168, 0.174152094506968, 0.20404117108607522, 0.16340478338686593, 0.18148109802737, 0.1728854411272216, 0.17252571942457873, 0.15648098923955855, 0.18564601662631175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04181267110259701, 0.045887495421480295, 0.04073514802054923, 0.051823562599245476, 0.049003076232925324, 0.04705173737076895, 0.0564697732153554, 0.06114311613913037, 0.05338201436858614, 0.022618566204630985, 0.026663201022351535, 0.03844317816908316, 0.03146573483938386, 0.044136161081589353, 0.052232443320094135, 0.03738218218437228, 0.03438514007109994, 0.03487779237652355, 0.07616832522969796, 0.08114590459837545, 0.08379359267997533, 0.08325584162123412, 0.0819524326100669, 0.08449510180038544, 0.08108734919338478, 0.08372054484169444, 0.07851090654539328, 0.09763284671267958, 0.07121143629718096, 0.10080274843660886, 0.1155426147546823, 0.07131179925523135, 0.08637833353035584, 0.09321743310482211, 0.0867110276016465, 0.0894403634800155, 0.12224103825986954, 0.18953294263770826, 0.1626578871926595, 0.11752938381926525, 0.11682758912684643, 0.12199575600106582, 0.10970975824617268, 0.13058485498547, 0.1152559289636027, 0.0680251663447703, 9.999999999998899e-05, 0.006155393000245368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02145698820254316, 0.016764035753700557, 0.01776942208329657, 0.021464633257976984, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.012469766719485631, 0.006837727778173042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04063004760389444, 0.1146680616612411, 0.06102947831797023, 0.05941523347397892, 0.024562895169599308, 0.052266526759215615, 0.045141045110925315, 0.09261047124604116, 0.04611406351601999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005423084492062302, 9.999999999998899e-05, 0.003693259667668425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21974685984760534, 0.20687395059054314, 0.189081941607107, 0.20445559401685842, 0.1922556966677228, 0.23232379746948917, 0.2437137897360302, 0.18150752800561565, 0.19865172764457972, 0.033890893932686406, 0.04500219650884596, 0.0437256246551162, 0.051719456197037994, 0.04319063397368661, 0.04489290748105901, 0.05625702643609909, 0.04726624955108005, 0.05269945687530364, 0.1362459275304183, 0.13355341409188282, 0.12767449283838816, 0.14599979353404435, 0.13919662498487506, 0.1268625655577782, 0.14772276306140608, 0.14608465105687773, 0.1917891528965363, 0.16416218239308566, 0.1548406080977568, 0.19048386794667138, 0.16856710229267102, 0.17412472085791975, 0.17055434936468084, 0.1629862339014766, 0.17371215329358403, 0.155441817311613, 0.10384011549425454, 0.10011221725175035, 0.13875979352415158, 0.10304310787952586, 0.132397332960564, 0.10912081742392143, 0.10237826702200747, 0.12554405042137318, 0.11856483302353793, 0.15053636986144137, 0.16004096992997752, 0.153038005068038, 0.16980331778711588, 0.15608114368377823, 0.16129217522113104, 0.18014434165414173, 0.19198222741699067, 0.17702288085908346, 0.14104594108005042, 0.14777666450021842, 0.13940098382747235, 0.13992945038968696, 0.13896541413120744, 0.1519754803069533, 0.14485541920210832, 0.1485782352262267, 0.1604757114380957, 0.15302598755406704, 0.16424215512227147, 0.16230003522378433, 0.16277240432256512, 0.1473313903079203, 0.16719842227444792, 0.1572758042559873, 0.15917653179353652, 0.20507353267300665, 0.17110751380714284, 0.15590396833648557, 0.20572110152837764, 0.15909620852105122, 0.1512472314951867, 0.15262694713384006, 0.17707181486050527, 0.16533343338132322, 0.15702584139356113, 0.18190287010089146, 0.1835489410344916, 0.172918267540218, 0.18996263233369437, 0.21010496446890925, 0.18660727872308402, 0.18617822674976126, 0.18064502667658822, 0.2045433446640953, 0.05833149916201952, 0.05093065592932866, 0.0639892554775312, 0.05184400404576539, 0.058688184149103706, 0.05362808696191401, 0.07271809942625862, 0.05952788639603879, 0.05532356184631804]}, "mutation_prompt": null}
{"id": "8d3928db-901b-4eb7-9841-2e9aae211680", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DifferentialEvolution", "description": "Implement a differential evolution strategy with a dynamic variant factor to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.17380081264612168, 0.174152094506968, 0.20404117108607522, 0.16340478338686593, 0.18148109802737, 0.1728854411272216, 0.17252571942457873, 0.15648098923955855, 0.18564601662631175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04181267110259701, 0.045887495421480295, 0.04073514802054923, 0.051823562599245476, 0.049003076232925324, 0.04705173737076895, 0.0564697732153554, 0.06114311613913037, 0.05338201436858614, 0.022618566204630985, 0.026663201022351535, 0.03844317816908316, 0.03146573483938386, 0.044136161081589353, 0.052232443320094135, 0.03738218218437228, 0.03438514007109994, 0.03487779237652355, 0.07616832522969796, 0.08114590459837545, 0.08379359267997533, 0.08325584162123412, 0.0819524326100669, 0.08449510180038544, 0.08108734919338478, 0.08372054484169444, 0.07851090654539328, 0.09763284671267958, 0.07121143629718096, 0.10080274843660886, 0.1155426147546823, 0.07131179925523135, 0.08637833353035584, 0.09321743310482211, 0.0867110276016465, 0.0894403634800155, 0.12224103825986954, 0.18953294263770826, 0.1626578871926595, 0.11752938381926525, 0.11682758912684643, 0.12199575600106582, 0.10970975824617268, 0.13058485498547, 0.1152559289636027, 0.0680251663447703, 9.999999999998899e-05, 0.006155393000245368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02145698820254316, 0.016764035753700557, 0.01776942208329657, 0.021464633257976984, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.012469766719485631, 0.006837727778173042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04063004760389444, 0.1146680616612411, 0.06102947831797023, 0.05941523347397892, 0.024562895169599308, 0.052266526759215615, 0.045141045110925315, 0.09261047124604116, 0.04611406351601999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005423084492062302, 9.999999999998899e-05, 0.003693259667668425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21974685984760534, 0.20687395059054314, 0.189081941607107, 0.20445559401685842, 0.1922556966677228, 0.23232379746948917, 0.2437137897360302, 0.18150752800561565, 0.19865172764457972, 0.033890893932686406, 0.04500219650884596, 0.0437256246551162, 0.051719456197037994, 0.04319063397368661, 0.04489290748105901, 0.05625702643609909, 0.04726624955108005, 0.05269945687530364, 0.1362459275304183, 0.13355341409188282, 0.12767449283838816, 0.14599979353404435, 0.13919662498487506, 0.1268625655577782, 0.14772276306140608, 0.14608465105687773, 0.1917891528965363, 0.16416218239308566, 0.1548406080977568, 0.19048386794667138, 0.16856710229267102, 0.17412472085791975, 0.17055434936468084, 0.1629862339014766, 0.17371215329358403, 0.155441817311613, 0.10384011549425454, 0.10011221725175035, 0.13875979352415158, 0.10304310787952586, 0.132397332960564, 0.10912081742392143, 0.10237826702200747, 0.12554405042137318, 0.11856483302353793, 0.15053636986144137, 0.16004096992997752, 0.153038005068038, 0.16980331778711588, 0.15608114368377823, 0.16129217522113104, 0.18014434165414173, 0.19198222741699067, 0.17702288085908346, 0.14104594108005042, 0.14777666450021842, 0.13940098382747235, 0.13992945038968696, 0.13896541413120744, 0.1519754803069533, 0.14485541920210832, 0.1485782352262267, 0.1604757114380957, 0.15302598755406704, 0.16424215512227147, 0.16230003522378433, 0.16277240432256512, 0.1473313903079203, 0.16719842227444792, 0.1572758042559873, 0.15917653179353652, 0.20507353267300665, 0.17110751380714284, 0.15590396833648557, 0.20572110152837764, 0.15909620852105122, 0.1512472314951867, 0.15262694713384006, 0.17707181486050527, 0.16533343338132322, 0.15702584139356113, 0.18190287010089146, 0.1835489410344916, 0.172918267540218, 0.18996263233369437, 0.21010496446890925, 0.18660727872308402, 0.18617822674976126, 0.18064502667658822, 0.2045433446640953, 0.05833149916201952, 0.05093065592932866, 0.0639892554775312, 0.05184400404576539, 0.058688184149103706, 0.05362808696191401, 0.07271809942625862, 0.05952788639603879, 0.05532356184631804]}, "mutation_prompt": null}
{"id": "209d9be9-4d14-4cfe-be1e-391f045dc7d2", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DifferentialEvolution", "description": "Implement a differential evolution strategy with a dynamic variant factor to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.17380081264612168, 0.174152094506968, 0.20404117108607522, 0.16340478338686593, 0.18148109802737, 0.1728854411272216, 0.17252571942457873, 0.15648098923955855, 0.18564601662631175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04181267110259701, 0.045887495421480295, 0.04073514802054923, 0.051823562599245476, 0.049003076232925324, 0.04705173737076895, 0.0564697732153554, 0.06114311613913037, 0.05338201436858614, 0.022618566204630985, 0.026663201022351535, 0.03844317816908316, 0.03146573483938386, 0.044136161081589353, 0.052232443320094135, 0.03738218218437228, 0.03438514007109994, 0.03487779237652355, 0.07616832522969796, 0.08114590459837545, 0.08379359267997533, 0.08325584162123412, 0.0819524326100669, 0.08449510180038544, 0.08108734919338478, 0.08372054484169444, 0.07851090654539328, 0.09763284671267958, 0.07121143629718096, 0.10080274843660886, 0.1155426147546823, 0.07131179925523135, 0.08637833353035584, 0.09321743310482211, 0.0867110276016465, 0.0894403634800155, 0.12224103825986954, 0.18953294263770826, 0.1626578871926595, 0.11752938381926525, 0.11682758912684643, 0.12199575600106582, 0.10970975824617268, 0.13058485498547, 0.1152559289636027, 0.0680251663447703, 9.999999999998899e-05, 0.006155393000245368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02145698820254316, 0.016764035753700557, 0.01776942208329657, 0.021464633257976984, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.012469766719485631, 0.006837727778173042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04063004760389444, 0.1146680616612411, 0.06102947831797023, 0.05941523347397892, 0.024562895169599308, 0.052266526759215615, 0.045141045110925315, 0.09261047124604116, 0.04611406351601999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005423084492062302, 9.999999999998899e-05, 0.003693259667668425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21974685984760534, 0.20687395059054314, 0.189081941607107, 0.20445559401685842, 0.1922556966677228, 0.23232379746948917, 0.2437137897360302, 0.18150752800561565, 0.19865172764457972, 0.033890893932686406, 0.04500219650884596, 0.0437256246551162, 0.051719456197037994, 0.04319063397368661, 0.04489290748105901, 0.05625702643609909, 0.04726624955108005, 0.05269945687530364, 0.1362459275304183, 0.13355341409188282, 0.12767449283838816, 0.14599979353404435, 0.13919662498487506, 0.1268625655577782, 0.14772276306140608, 0.14608465105687773, 0.1917891528965363, 0.16416218239308566, 0.1548406080977568, 0.19048386794667138, 0.16856710229267102, 0.17412472085791975, 0.17055434936468084, 0.1629862339014766, 0.17371215329358403, 0.155441817311613, 0.10384011549425454, 0.10011221725175035, 0.13875979352415158, 0.10304310787952586, 0.132397332960564, 0.10912081742392143, 0.10237826702200747, 0.12554405042137318, 0.11856483302353793, 0.15053636986144137, 0.16004096992997752, 0.153038005068038, 0.16980331778711588, 0.15608114368377823, 0.16129217522113104, 0.18014434165414173, 0.19198222741699067, 0.17702288085908346, 0.14104594108005042, 0.14777666450021842, 0.13940098382747235, 0.13992945038968696, 0.13896541413120744, 0.1519754803069533, 0.14485541920210832, 0.1485782352262267, 0.1604757114380957, 0.15302598755406704, 0.16424215512227147, 0.16230003522378433, 0.16277240432256512, 0.1473313903079203, 0.16719842227444792, 0.1572758042559873, 0.15917653179353652, 0.20507353267300665, 0.17110751380714284, 0.15590396833648557, 0.20572110152837764, 0.15909620852105122, 0.1512472314951867, 0.15262694713384006, 0.17707181486050527, 0.16533343338132322, 0.15702584139356113, 0.18190287010089146, 0.1835489410344916, 0.172918267540218, 0.18996263233369437, 0.21010496446890925, 0.18660727872308402, 0.18617822674976126, 0.18064502667658822, 0.2045433446640953, 0.05833149916201952, 0.05093065592932866, 0.0639892554775312, 0.05184400404576539, 0.058688184149103706, 0.05362808696191401, 0.07271809942625862, 0.05952788639603879, 0.05532356184631804]}, "mutation_prompt": null}
{"id": "ee4fec37-2c0a-4246-8a48-10caf182c3c2", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DifferentialEvolution", "description": "Implement a differential evolution strategy with a dynamic variant factor to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.17380081264612168, 0.174152094506968, 0.20404117108607522, 0.16340478338686593, 0.18148109802737, 0.1728854411272216, 0.17252571942457873, 0.15648098923955855, 0.18564601662631175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04181267110259701, 0.045887495421480295, 0.04073514802054923, 0.051823562599245476, 0.049003076232925324, 0.04705173737076895, 0.0564697732153554, 0.06114311613913037, 0.05338201436858614, 0.022618566204630985, 0.026663201022351535, 0.03844317816908316, 0.03146573483938386, 0.044136161081589353, 0.052232443320094135, 0.03738218218437228, 0.03438514007109994, 0.03487779237652355, 0.07616832522969796, 0.08114590459837545, 0.08379359267997533, 0.08325584162123412, 0.0819524326100669, 0.08449510180038544, 0.08108734919338478, 0.08372054484169444, 0.07851090654539328, 0.09763284671267958, 0.07121143629718096, 0.10080274843660886, 0.1155426147546823, 0.07131179925523135, 0.08637833353035584, 0.09321743310482211, 0.0867110276016465, 0.0894403634800155, 0.12224103825986954, 0.18953294263770826, 0.1626578871926595, 0.11752938381926525, 0.11682758912684643, 0.12199575600106582, 0.10970975824617268, 0.13058485498547, 0.1152559289636027, 0.0680251663447703, 9.999999999998899e-05, 0.006155393000245368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02145698820254316, 0.016764035753700557, 0.01776942208329657, 0.021464633257976984, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.012469766719485631, 0.006837727778173042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04063004760389444, 0.1146680616612411, 0.06102947831797023, 0.05941523347397892, 0.024562895169599308, 0.052266526759215615, 0.045141045110925315, 0.09261047124604116, 0.04611406351601999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005423084492062302, 9.999999999998899e-05, 0.003693259667668425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21974685984760534, 0.20687395059054314, 0.189081941607107, 0.20445559401685842, 0.1922556966677228, 0.23232379746948917, 0.2437137897360302, 0.18150752800561565, 0.19865172764457972, 0.033890893932686406, 0.04500219650884596, 0.0437256246551162, 0.051719456197037994, 0.04319063397368661, 0.04489290748105901, 0.05625702643609909, 0.04726624955108005, 0.05269945687530364, 0.1362459275304183, 0.13355341409188282, 0.12767449283838816, 0.14599979353404435, 0.13919662498487506, 0.1268625655577782, 0.14772276306140608, 0.14608465105687773, 0.1917891528965363, 0.16416218239308566, 0.1548406080977568, 0.19048386794667138, 0.16856710229267102, 0.17412472085791975, 0.17055434936468084, 0.1629862339014766, 0.17371215329358403, 0.155441817311613, 0.10384011549425454, 0.10011221725175035, 0.13875979352415158, 0.10304310787952586, 0.132397332960564, 0.10912081742392143, 0.10237826702200747, 0.12554405042137318, 0.11856483302353793, 0.15053636986144137, 0.16004096992997752, 0.153038005068038, 0.16980331778711588, 0.15608114368377823, 0.16129217522113104, 0.18014434165414173, 0.19198222741699067, 0.17702288085908346, 0.14104594108005042, 0.14777666450021842, 0.13940098382747235, 0.13992945038968696, 0.13896541413120744, 0.1519754803069533, 0.14485541920210832, 0.1485782352262267, 0.1604757114380957, 0.15302598755406704, 0.16424215512227147, 0.16230003522378433, 0.16277240432256512, 0.1473313903079203, 0.16719842227444792, 0.1572758042559873, 0.15917653179353652, 0.20507353267300665, 0.17110751380714284, 0.15590396833648557, 0.20572110152837764, 0.15909620852105122, 0.1512472314951867, 0.15262694713384006, 0.17707181486050527, 0.16533343338132322, 0.15702584139356113, 0.18190287010089146, 0.1835489410344916, 0.172918267540218, 0.18996263233369437, 0.21010496446890925, 0.18660727872308402, 0.18617822674976126, 0.18064502667658822, 0.2045433446640953, 0.05833149916201952, 0.05093065592932866, 0.0639892554775312, 0.05184400404576539, 0.058688184149103706, 0.05362808696191401, 0.07271809942625862, 0.05952788639603879, 0.05532356184631804]}, "mutation_prompt": null}
{"id": "892fdd55-8b2c-4c0e-944a-0c28c08dcd7e", "solution": "import numpy as np\n\nclass ModifiedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                fitness_based_f = self.f_factor * (1 - (func(self.population[i]) / func(self.population[a])))\n                mutant = self.population[a] + fitness_based_f * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "ModifiedDifferentialEvolution", "description": "Implement a Differential Evolution algorithm with a modified mutation strategy using a dynamic adaptation mechanism based on individual fitness.", "configspace": "", "generation": 36, "fitness": 0.08601569878587288, "feedback": "The algorithm ModifiedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.18457848678552158, 0.17308870152557665, 0.1665782369687402, 0.16468698645366353, 0.180709463550614, 0.169710190514466, 0.18934603333756939, 0.16167249250551763, 0.14394160149058466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044362774396150106, 0.04201824699909429, 0.0446575569351888, 0.02969807684909609, 0.033787027947858816, 0.039552382386238816, 0.037864664327806, 0.05116117879606408, 0.04507211289759361, 0.027763044583608787, 0.02716331548943074, 0.028951174811920444, 0.02723752569346305, 0.036712008410930475, 0.04308510908904195, 0.03235386717338462, 0.024705145061301614, 0.03030979067195516, 0.06737997366069626, 0.08235062939638516, 0.07004553517163803, 0.09246611264784621, 0.08667168592881391, 0.08983619266069853, 0.07760514596078938, 0.07754977315548728, 0.07798800124980665, 0.06389066215394756, 0.08664165281703151, 0.0978760487808551, 0.044265489468351404, 0.061180685895823816, 0.056381394742363256, 0.08520496607464445, 0.07351181155581066, 0.11070666796888651, 0.1269790718695203, 0.18213404820984846, 0.1353113883240269, 0.10219983491032092, 0.08654457172081642, 0.12769425386007993, 0.10015813223659165, 0.11879583209830613, 0.1173868773022324, 0.008208624575627654, 0.001889179992638268, 0.013473758584555462, 0.02698417731162639, 0.004322201854963126, 0.005638228836163717, 9.999999999998899e-05, 9.999999999998899e-05, 0.030520952347603658, 9.999999999998899e-05, 0.042404487992318884, 9.999999999998899e-05, 0.003417105184469027, 0.031468020241120165, 0.00468940999317724, 0.01702036437924037, 0.00784141427343854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02785810236229791, 0.06106425337378574, 0.04524299189639136, 0.04232893816224348, 0.024085859421453693, 0.039927857210331985, 0.020229048044607456, 0.03599054615044628, 0.06562975611542898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.204696077282281, 0.18630250024148332, 0.20002687449917367, 0.20172614054733906, 0.1848638803248801, 0.19067481892538085, 0.19241626851236537, 0.1759951348340677, 0.21487085459764244, 0.03428777823938378, 0.05549871786890559, 0.04591981047087934, 0.04246950608791755, 0.03834546661440852, 0.036758660564464085, 0.039870267854556496, 0.04723043573734542, 0.04511679924727319, 0.17464225883680828, 0.14271757731979307, 0.11816922165773358, 0.1465394264612656, 0.13887610297192254, 0.13723383738493466, 0.1492043748408165, 0.14176650976592287, 0.11621296324314878, 0.17519662572945893, 0.17232749892724986, 0.16621006097409086, 0.15810535983114116, 0.1594944119743834, 0.16670774243564268, 0.16661579606383403, 0.17351296325878396, 0.16740299917526935, 0.10177319205134794, 0.09094253507177075, 0.10866510830895948, 0.1067063351401859, 0.11411563609339304, 0.10364888115956872, 0.10399330490572178, 0.12188251199134525, 0.11606791249407855, 0.1519024701364906, 0.16685856950181277, 0.14509495770064518, 0.14574574792211514, 0.15146825985550827, 0.15514519437621876, 0.14901663644644503, 0.16254344031731416, 0.165075684370795, 0.1261596179889175, 0.1478932532801529, 0.12245085640146403, 0.12677869406069442, 0.14921533779268326, 0.13503622618308853, 0.14136429565781705, 0.13300859039473611, 0.15731858043976898, 0.13451149532250695, 0.16670630826119648, 0.15703735574947075, 0.14954000370881293, 0.13390679393075133, 0.13973680100711083, 0.16402572197937537, 0.16643044908430982, 0.1590891083272854, 0.15953128204801703, 0.12206198279351921, 0.12261212669904964, 0.15278803284597575, 0.13504721603845793, 0.12748012984130297, 0.16041349991184528, 0.15685172159378458, 0.15826332853967473, 0.18062005306234064, 0.18359435304296112, 0.20004795072906068, 0.18224707907058313, 0.20372426266003152, 0.17224958636233623, 0.17024572842187935, 0.1798132196557779, 0.19914571920459445, 0.04697254331949041, 0.04819764652435499, 0.06091819136591381, 0.05173688592719883, 0.057439331037432595, 0.05649577337106659, 0.07046145751801303, 0.05555934177445321, 0.042151989895690134]}, "mutation_prompt": null}
{"id": "61f6af95-aaf4-4c3f-983d-4f123b48615c", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DifferentialEvolution", "description": "Implement a differential evolution strategy with a dynamic variant factor to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.17380081264612168, 0.174152094506968, 0.20404117108607522, 0.16340478338686593, 0.18148109802737, 0.1728854411272216, 0.17252571942457873, 0.15648098923955855, 0.18564601662631175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04181267110259701, 0.045887495421480295, 0.04073514802054923, 0.051823562599245476, 0.049003076232925324, 0.04705173737076895, 0.0564697732153554, 0.06114311613913037, 0.05338201436858614, 0.022618566204630985, 0.026663201022351535, 0.03844317816908316, 0.03146573483938386, 0.044136161081589353, 0.052232443320094135, 0.03738218218437228, 0.03438514007109994, 0.03487779237652355, 0.07616832522969796, 0.08114590459837545, 0.08379359267997533, 0.08325584162123412, 0.0819524326100669, 0.08449510180038544, 0.08108734919338478, 0.08372054484169444, 0.07851090654539328, 0.09763284671267958, 0.07121143629718096, 0.10080274843660886, 0.1155426147546823, 0.07131179925523135, 0.08637833353035584, 0.09321743310482211, 0.0867110276016465, 0.0894403634800155, 0.12224103825986954, 0.18953294263770826, 0.1626578871926595, 0.11752938381926525, 0.11682758912684643, 0.12199575600106582, 0.10970975824617268, 0.13058485498547, 0.1152559289636027, 0.0680251663447703, 9.999999999998899e-05, 0.006155393000245368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02145698820254316, 0.016764035753700557, 0.01776942208329657, 0.021464633257976984, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.012469766719485631, 0.006837727778173042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04063004760389444, 0.1146680616612411, 0.06102947831797023, 0.05941523347397892, 0.024562895169599308, 0.052266526759215615, 0.045141045110925315, 0.09261047124604116, 0.04611406351601999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005423084492062302, 9.999999999998899e-05, 0.003693259667668425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21974685984760534, 0.20687395059054314, 0.189081941607107, 0.20445559401685842, 0.1922556966677228, 0.23232379746948917, 0.2437137897360302, 0.18150752800561565, 0.19865172764457972, 0.033890893932686406, 0.04500219650884596, 0.0437256246551162, 0.051719456197037994, 0.04319063397368661, 0.04489290748105901, 0.05625702643609909, 0.04726624955108005, 0.05269945687530364, 0.1362459275304183, 0.13355341409188282, 0.12767449283838816, 0.14599979353404435, 0.13919662498487506, 0.1268625655577782, 0.14772276306140608, 0.14608465105687773, 0.1917891528965363, 0.16416218239308566, 0.1548406080977568, 0.19048386794667138, 0.16856710229267102, 0.17412472085791975, 0.17055434936468084, 0.1629862339014766, 0.17371215329358403, 0.155441817311613, 0.10384011549425454, 0.10011221725175035, 0.13875979352415158, 0.10304310787952586, 0.132397332960564, 0.10912081742392143, 0.10237826702200747, 0.12554405042137318, 0.11856483302353793, 0.15053636986144137, 0.16004096992997752, 0.153038005068038, 0.16980331778711588, 0.15608114368377823, 0.16129217522113104, 0.18014434165414173, 0.19198222741699067, 0.17702288085908346, 0.14104594108005042, 0.14777666450021842, 0.13940098382747235, 0.13992945038968696, 0.13896541413120744, 0.1519754803069533, 0.14485541920210832, 0.1485782352262267, 0.1604757114380957, 0.15302598755406704, 0.16424215512227147, 0.16230003522378433, 0.16277240432256512, 0.1473313903079203, 0.16719842227444792, 0.1572758042559873, 0.15917653179353652, 0.20507353267300665, 0.17110751380714284, 0.15590396833648557, 0.20572110152837764, 0.15909620852105122, 0.1512472314951867, 0.15262694713384006, 0.17707181486050527, 0.16533343338132322, 0.15702584139356113, 0.18190287010089146, 0.1835489410344916, 0.172918267540218, 0.18996263233369437, 0.21010496446890925, 0.18660727872308402, 0.18617822674976126, 0.18064502667658822, 0.2045433446640953, 0.05833149916201952, 0.05093065592932866, 0.0639892554775312, 0.05184400404576539, 0.058688184149103706, 0.05362808696191401, 0.07271809942625862, 0.05952788639603879, 0.05532356184631804]}, "mutation_prompt": null}
{"id": "2c6c7af9-7425-4519-bfff-54bf11f6187b", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DifferentialEvolution", "description": "Implement a differential evolution strategy with a dynamic variant factor to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.17380081264612168, 0.174152094506968, 0.20404117108607522, 0.16340478338686593, 0.18148109802737, 0.1728854411272216, 0.17252571942457873, 0.15648098923955855, 0.18564601662631175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04181267110259701, 0.045887495421480295, 0.04073514802054923, 0.051823562599245476, 0.049003076232925324, 0.04705173737076895, 0.0564697732153554, 0.06114311613913037, 0.05338201436858614, 0.022618566204630985, 0.026663201022351535, 0.03844317816908316, 0.03146573483938386, 0.044136161081589353, 0.052232443320094135, 0.03738218218437228, 0.03438514007109994, 0.03487779237652355, 0.07616832522969796, 0.08114590459837545, 0.08379359267997533, 0.08325584162123412, 0.0819524326100669, 0.08449510180038544, 0.08108734919338478, 0.08372054484169444, 0.07851090654539328, 0.09763284671267958, 0.07121143629718096, 0.10080274843660886, 0.1155426147546823, 0.07131179925523135, 0.08637833353035584, 0.09321743310482211, 0.0867110276016465, 0.0894403634800155, 0.12224103825986954, 0.18953294263770826, 0.1626578871926595, 0.11752938381926525, 0.11682758912684643, 0.12199575600106582, 0.10970975824617268, 0.13058485498547, 0.1152559289636027, 0.0680251663447703, 9.999999999998899e-05, 0.006155393000245368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02145698820254316, 0.016764035753700557, 0.01776942208329657, 0.021464633257976984, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.012469766719485631, 0.006837727778173042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04063004760389444, 0.1146680616612411, 0.06102947831797023, 0.05941523347397892, 0.024562895169599308, 0.052266526759215615, 0.045141045110925315, 0.09261047124604116, 0.04611406351601999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005423084492062302, 9.999999999998899e-05, 0.003693259667668425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21974685984760534, 0.20687395059054314, 0.189081941607107, 0.20445559401685842, 0.1922556966677228, 0.23232379746948917, 0.2437137897360302, 0.18150752800561565, 0.19865172764457972, 0.033890893932686406, 0.04500219650884596, 0.0437256246551162, 0.051719456197037994, 0.04319063397368661, 0.04489290748105901, 0.05625702643609909, 0.04726624955108005, 0.05269945687530364, 0.1362459275304183, 0.13355341409188282, 0.12767449283838816, 0.14599979353404435, 0.13919662498487506, 0.1268625655577782, 0.14772276306140608, 0.14608465105687773, 0.1917891528965363, 0.16416218239308566, 0.1548406080977568, 0.19048386794667138, 0.16856710229267102, 0.17412472085791975, 0.17055434936468084, 0.1629862339014766, 0.17371215329358403, 0.155441817311613, 0.10384011549425454, 0.10011221725175035, 0.13875979352415158, 0.10304310787952586, 0.132397332960564, 0.10912081742392143, 0.10237826702200747, 0.12554405042137318, 0.11856483302353793, 0.15053636986144137, 0.16004096992997752, 0.153038005068038, 0.16980331778711588, 0.15608114368377823, 0.16129217522113104, 0.18014434165414173, 0.19198222741699067, 0.17702288085908346, 0.14104594108005042, 0.14777666450021842, 0.13940098382747235, 0.13992945038968696, 0.13896541413120744, 0.1519754803069533, 0.14485541920210832, 0.1485782352262267, 0.1604757114380957, 0.15302598755406704, 0.16424215512227147, 0.16230003522378433, 0.16277240432256512, 0.1473313903079203, 0.16719842227444792, 0.1572758042559873, 0.15917653179353652, 0.20507353267300665, 0.17110751380714284, 0.15590396833648557, 0.20572110152837764, 0.15909620852105122, 0.1512472314951867, 0.15262694713384006, 0.17707181486050527, 0.16533343338132322, 0.15702584139356113, 0.18190287010089146, 0.1835489410344916, 0.172918267540218, 0.18996263233369437, 0.21010496446890925, 0.18660727872308402, 0.18617822674976126, 0.18064502667658822, 0.2045433446640953, 0.05833149916201952, 0.05093065592932866, 0.0639892554775312, 0.05184400404576539, 0.058688184149103706, 0.05362808696191401, 0.07271809942625862, 0.05952788639603879, 0.05532356184631804]}, "mutation_prompt": null}
{"id": "7c49ef99-3a6a-416c-a130-e7d9a5d35b4e", "solution": "import numpy as np\n\nclass FastDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.cr = 0.9\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                r = np.random.randint(0, self.dim)\n                mutant = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == r:\n                        mutant[j] = self.population[a][j] + 0.5 * (self.population[b][j] - self.population[c][j])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "FastDifferentialEvolution", "description": "Implement a Differential Evolution algorithm with enhanced mutation strategy using a combination of crossover and random selection to improve convergence speed.", "configspace": "", "generation": 39, "fitness": 0.09255779320331697, "feedback": "The algorithm FastDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.17461033528409897, 0.18423123866912294, 0.18655986592922036, 0.1885092725870463, 0.18033408866829592, 0.1672122095041093, 0.1762401468222623, 0.16428030432769614, 0.17064239589920127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04882795618558233, 0.0447945367779885, 0.04075797667116787, 0.05618496929234729, 0.04421489273790047, 0.052005766157141475, 0.04891509660045357, 0.06431312076749052, 0.05740671206502579, 0.03165836830434654, 0.036141891604796195, 0.03866543559006719, 0.025612087001288253, 0.04574829261522484, 0.05798820207266964, 0.03984612605006854, 0.041093304382408546, 0.03477812572997774, 0.07754565333055885, 0.07001363817705264, 0.08948639825861737, 0.08104419175128841, 0.08284159114145007, 0.0839856656150787, 0.08060503923118845, 0.07885992809244957, 0.0783259015829939, 0.07979992677315573, 0.07413399782176022, 0.10043938095247429, 0.08131505753872825, 0.07276187808294254, 0.07617377269133285, 0.091469616544535, 0.06043286952712801, 0.0894403634800155, 0.11745481597805496, 0.18939050204551233, 0.14401362009148144, 0.10559673036147998, 0.11539144608595431, 0.1189682108930401, 0.11210333110195903, 0.11926593702310528, 0.11693936689953843, 0.01331408991813332, 9.999999999998899e-05, 0.009396606042472166, 0.009118032063711312, 0.022487197835401873, 0.02122162568834629, 0.001503209746841816, 0.003138724039843166, 0.016790757226985753, 9.999999999998899e-05, 0.08712906492028305, 0.006937249459363692, 0.058993402427191866, 0.05461512245687539, 0.009468453331913929, 0.017667153369731237, 0.035832628327026605, 0.016920554936147303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05348989870821441, 0.07585361313607786, 0.08283019060445329, 0.05941523347397892, 0.062137911499347886, 0.056385799282507865, 0.048532183575023535, 0.04778082915416182, 0.06771165030022208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21995733259537031, 0.19088049689428077, 0.19031656539574482, 0.21712252411146826, 0.1924568446380832, 0.20788836707069003, 0.19602860401862976, 0.1936649177686891, 0.19559106964668294, 0.044892718950911514, 0.03630641802962109, 0.0351311575455453, 0.04789374241011124, 0.041961477582155515, 0.04362823245325942, 0.0554416995917536, 0.04384137324570925, 0.04691247085163086, 0.13636244141463505, 0.11862298287578543, 0.12631095970290496, 0.14292030239847153, 0.15083684906093298, 0.11908737866599695, 0.14773405597251044, 0.1449470370793322, 0.12297609321561354, 0.16412313254597555, 0.1685321958909879, 0.17114648159249535, 0.18131658534340422, 0.1691553766281586, 0.16902377239439537, 0.16830292232465605, 0.17365442281061183, 0.17462536761220238, 0.1036085764946838, 0.11320907191858409, 0.10920479507120617, 0.11495241470851958, 0.12692085534480735, 0.12116698053542296, 0.10849543273708295, 0.12317020746482521, 0.1225575950654868, 0.15002253348924754, 0.1714321455576555, 0.162806213475038, 0.15984440349627604, 0.1597558141551153, 0.15759282937548413, 0.1929313040164009, 0.15588766815103705, 0.17644709545350812, 0.1332146426799813, 0.15562198940194993, 0.13696171743705876, 0.1464435160080969, 0.14661198997971792, 0.14967177632272777, 0.145049487123455, 0.1391000445286107, 0.1618322096771344, 0.16506770537387916, 0.16522602217548898, 0.16322810456076953, 0.16240284855096232, 0.1585688479272208, 0.15798392788708515, 0.16896555864935725, 0.15395034391702067, 0.15619443605949146, 0.1628102224848439, 0.16796396560163085, 0.17100378233156588, 0.19593461529162381, 0.15415810744955283, 0.19407761650189037, 0.16473571683799304, 0.19981878841281664, 0.16742693064059455, 0.1726039598221074, 0.18375173024099523, 0.182731267215268, 0.18842434570656996, 0.2115927200580845, 0.17991920623866753, 0.18122499469019426, 0.18460766475047563, 0.2029983224364268, 0.05653437100864389, 0.07649436972266976, 0.06536404972582444, 0.05060460004375944, 0.058619425173669915, 0.05046422746181545, 0.0722153509453698, 0.06517943785809654, 0.05124783613223172]}, "mutation_prompt": null}
{"id": "60b8696b-bca7-447f-877c-4ff9a8c29417", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DifferentialEvolution", "description": "Implement a differential evolution strategy with a dynamic variant factor to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.17380081264612168, 0.174152094506968, 0.20404117108607522, 0.16340478338686593, 0.18148109802737, 0.1728854411272216, 0.17252571942457873, 0.15648098923955855, 0.18564601662631175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04181267110259701, 0.045887495421480295, 0.04073514802054923, 0.051823562599245476, 0.049003076232925324, 0.04705173737076895, 0.0564697732153554, 0.06114311613913037, 0.05338201436858614, 0.022618566204630985, 0.026663201022351535, 0.03844317816908316, 0.03146573483938386, 0.044136161081589353, 0.052232443320094135, 0.03738218218437228, 0.03438514007109994, 0.03487779237652355, 0.07616832522969796, 0.08114590459837545, 0.08379359267997533, 0.08325584162123412, 0.0819524326100669, 0.08449510180038544, 0.08108734919338478, 0.08372054484169444, 0.07851090654539328, 0.09763284671267958, 0.07121143629718096, 0.10080274843660886, 0.1155426147546823, 0.07131179925523135, 0.08637833353035584, 0.09321743310482211, 0.0867110276016465, 0.0894403634800155, 0.12224103825986954, 0.18953294263770826, 0.1626578871926595, 0.11752938381926525, 0.11682758912684643, 0.12199575600106582, 0.10970975824617268, 0.13058485498547, 0.1152559289636027, 0.0680251663447703, 9.999999999998899e-05, 0.006155393000245368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02145698820254316, 0.016764035753700557, 0.01776942208329657, 0.021464633257976984, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.012469766719485631, 0.006837727778173042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04063004760389444, 0.1146680616612411, 0.06102947831797023, 0.05941523347397892, 0.024562895169599308, 0.052266526759215615, 0.045141045110925315, 0.09261047124604116, 0.04611406351601999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005423084492062302, 9.999999999998899e-05, 0.003693259667668425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21974685984760534, 0.20687395059054314, 0.189081941607107, 0.20445559401685842, 0.1922556966677228, 0.23232379746948917, 0.2437137897360302, 0.18150752800561565, 0.19865172764457972, 0.033890893932686406, 0.04500219650884596, 0.0437256246551162, 0.051719456197037994, 0.04319063397368661, 0.04489290748105901, 0.05625702643609909, 0.04726624955108005, 0.05269945687530364, 0.1362459275304183, 0.13355341409188282, 0.12767449283838816, 0.14599979353404435, 0.13919662498487506, 0.1268625655577782, 0.14772276306140608, 0.14608465105687773, 0.1917891528965363, 0.16416218239308566, 0.1548406080977568, 0.19048386794667138, 0.16856710229267102, 0.17412472085791975, 0.17055434936468084, 0.1629862339014766, 0.17371215329358403, 0.155441817311613, 0.10384011549425454, 0.10011221725175035, 0.13875979352415158, 0.10304310787952586, 0.132397332960564, 0.10912081742392143, 0.10237826702200747, 0.12554405042137318, 0.11856483302353793, 0.15053636986144137, 0.16004096992997752, 0.153038005068038, 0.16980331778711588, 0.15608114368377823, 0.16129217522113104, 0.18014434165414173, 0.19198222741699067, 0.17702288085908346, 0.14104594108005042, 0.14777666450021842, 0.13940098382747235, 0.13992945038968696, 0.13896541413120744, 0.1519754803069533, 0.14485541920210832, 0.1485782352262267, 0.1604757114380957, 0.15302598755406704, 0.16424215512227147, 0.16230003522378433, 0.16277240432256512, 0.1473313903079203, 0.16719842227444792, 0.1572758042559873, 0.15917653179353652, 0.20507353267300665, 0.17110751380714284, 0.15590396833648557, 0.20572110152837764, 0.15909620852105122, 0.1512472314951867, 0.15262694713384006, 0.17707181486050527, 0.16533343338132322, 0.15702584139356113, 0.18190287010089146, 0.1835489410344916, 0.172918267540218, 0.18996263233369437, 0.21010496446890925, 0.18660727872308402, 0.18617822674976126, 0.18064502667658822, 0.2045433446640953, 0.05833149916201952, 0.05093065592932866, 0.0639892554775312, 0.05184400404576539, 0.058688184149103706, 0.05362808696191401, 0.07271809942625862, 0.05952788639603879, 0.05532356184631804]}, "mutation_prompt": null}
{"id": "ae2faccc-9537-4188-a613-e3eb5929788b", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DifferentialEvolution", "description": "Implement a differential evolution strategy with a dynamic variant factor to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.17380081264612168, 0.174152094506968, 0.20404117108607522, 0.16340478338686593, 0.18148109802737, 0.1728854411272216, 0.17252571942457873, 0.15648098923955855, 0.18564601662631175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04181267110259701, 0.045887495421480295, 0.04073514802054923, 0.051823562599245476, 0.049003076232925324, 0.04705173737076895, 0.0564697732153554, 0.06114311613913037, 0.05338201436858614, 0.022618566204630985, 0.026663201022351535, 0.03844317816908316, 0.03146573483938386, 0.044136161081589353, 0.052232443320094135, 0.03738218218437228, 0.03438514007109994, 0.03487779237652355, 0.07616832522969796, 0.08114590459837545, 0.08379359267997533, 0.08325584162123412, 0.0819524326100669, 0.08449510180038544, 0.08108734919338478, 0.08372054484169444, 0.07851090654539328, 0.09763284671267958, 0.07121143629718096, 0.10080274843660886, 0.1155426147546823, 0.07131179925523135, 0.08637833353035584, 0.09321743310482211, 0.0867110276016465, 0.0894403634800155, 0.12224103825986954, 0.18953294263770826, 0.1626578871926595, 0.11752938381926525, 0.11682758912684643, 0.12199575600106582, 0.10970975824617268, 0.13058485498547, 0.1152559289636027, 0.0680251663447703, 9.999999999998899e-05, 0.006155393000245368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02145698820254316, 0.016764035753700557, 0.01776942208329657, 0.021464633257976984, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.012469766719485631, 0.006837727778173042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04063004760389444, 0.1146680616612411, 0.06102947831797023, 0.05941523347397892, 0.024562895169599308, 0.052266526759215615, 0.045141045110925315, 0.09261047124604116, 0.04611406351601999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005423084492062302, 9.999999999998899e-05, 0.003693259667668425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21974685984760534, 0.20687395059054314, 0.189081941607107, 0.20445559401685842, 0.1922556966677228, 0.23232379746948917, 0.2437137897360302, 0.18150752800561565, 0.19865172764457972, 0.033890893932686406, 0.04500219650884596, 0.0437256246551162, 0.051719456197037994, 0.04319063397368661, 0.04489290748105901, 0.05625702643609909, 0.04726624955108005, 0.05269945687530364, 0.1362459275304183, 0.13355341409188282, 0.12767449283838816, 0.14599979353404435, 0.13919662498487506, 0.1268625655577782, 0.14772276306140608, 0.14608465105687773, 0.1917891528965363, 0.16416218239308566, 0.1548406080977568, 0.19048386794667138, 0.16856710229267102, 0.17412472085791975, 0.17055434936468084, 0.1629862339014766, 0.17371215329358403, 0.155441817311613, 0.10384011549425454, 0.10011221725175035, 0.13875979352415158, 0.10304310787952586, 0.132397332960564, 0.10912081742392143, 0.10237826702200747, 0.12554405042137318, 0.11856483302353793, 0.15053636986144137, 0.16004096992997752, 0.153038005068038, 0.16980331778711588, 0.15608114368377823, 0.16129217522113104, 0.18014434165414173, 0.19198222741699067, 0.17702288085908346, 0.14104594108005042, 0.14777666450021842, 0.13940098382747235, 0.13992945038968696, 0.13896541413120744, 0.1519754803069533, 0.14485541920210832, 0.1485782352262267, 0.1604757114380957, 0.15302598755406704, 0.16424215512227147, 0.16230003522378433, 0.16277240432256512, 0.1473313903079203, 0.16719842227444792, 0.1572758042559873, 0.15917653179353652, 0.20507353267300665, 0.17110751380714284, 0.15590396833648557, 0.20572110152837764, 0.15909620852105122, 0.1512472314951867, 0.15262694713384006, 0.17707181486050527, 0.16533343338132322, 0.15702584139356113, 0.18190287010089146, 0.1835489410344916, 0.172918267540218, 0.18996263233369437, 0.21010496446890925, 0.18660727872308402, 0.18617822674976126, 0.18064502667658822, 0.2045433446640953, 0.05833149916201952, 0.05093065592932866, 0.0639892554775312, 0.05184400404576539, 0.058688184149103706, 0.05362808696191401, 0.07271809942625862, 0.05952788639603879, 0.05532356184631804]}, "mutation_prompt": null}
{"id": "04f654d0-4b84-45e7-95d5-7987da44a3a3", "solution": "import numpy as np\n\nclass AdaptivePopulationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "AdaptivePopulationDE", "description": "Implement a Differential Evolution algorithm with adaptive population sizing to dynamically adjust the number of individuals in the population, enhancing exploration and exploitation for faster convergence.", "configspace": "", "generation": 42, "fitness": 0.10012454068711249, "feedback": "The algorithm AdaptivePopulationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "cad531e6-c9bb-4878-8094-493285135afb", "metadata": {"aucs": [0.23050506698070217, 0.14726677330790094, 0.14064422766533458, 0.07319332730931816, 0.13811350790866594, 0.06066317925256315, 0.1396216060169332, 0.20326356551256897, 0.3047719085583308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01938194558306039, 0.0778704996082017, 9.999999999998899e-05, 9.999999999998899e-05, 0.029831995269896883, 0.06907767788071706, 0.03862316830518919, 0.06715798058336153, 0.0784990846352952, 0.07544163784388169, 0.0768553161665535, 0.07045421087149384, 0.03846515357655367, 0.05577107664781855, 0.056426693603069955, 0.0450225828403118, 0.06816466200178783, 0.05523529218282053, 0.08651222066979625, 0.07069562461621681, 0.045318758959325134, 0.0068045865690095075, 0.05286908482080399, 0.07921825832406082, 0.06516527950102591, 0.07233009561034165, 0.05399987581881538, 0.05115811458028385, 0.09333434728326118, 0.09206051065448484, 0.05923102819772119, 0.11462045543786625, 9.999999999998899e-05, 0.009078760178142686, 0.015069353920001749, 0.11539636574136114, 0.06060348141912675, 0.06068095036960908, 0.04747402641456755, 0.0607532563808334, 0.3253607822541663, 0.14624777559957203, 0.14664780805075173, 0.11915190590760105, 0.09720725123736718, 0.22451798735267858, 0.22016123002499266, 0.10381845009337631, 0.22074848885033438, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04447433509761245, 0.09338885050535295, 0.007230828904165931, 0.013769226482430397, 0.006867151607875321, 0.013080514276182287, 9.999999999998899e-05, 9.999999999998899e-05, 0.0388230763141757, 9.999999999998899e-05, 9.999999999998899e-05, 0.06496198433773448, 0.10260464559887661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08239569026834337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07497826791595197, 0.08702325301348068, 0.11324853669547741, 0.1189820901359564, 0.008799240328053015, 0.043862652388333534, 0.0359749491074588, 0.10285748118765314, 0.11453941600576778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013688824149339252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038201493457504676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018009103513786484, 0.1654074763702783, 0.24568016544013715, 0.24304226628436632, 0.1707563497666591, 0.17994192223977967, 0.19228737715528088, 0.21253605001117026, 0.23123415385464252, 0.20157651011000488, 0.05768341242317532, 0.04753871627677886, 0.03594912367146463, 0.08043178055543343, 0.045601747379010016, 0.08307213913949563, 0.0506128357390393, 0.09836754105960421, 0.08704630610430197, 0.1556463334698419, 0.15891212724135095, 0.1705592798777712, 0.1495683726224839, 0.15606434981766049, 0.1299391495384572, 0.11561546410913104, 0.13863596772622333, 0.12373855451174876, 0.16099368672246306, 0.20039705837587252, 0.1691153218672684, 0.1895859082534359, 0.1921419316930092, 0.15977084957004395, 0.1664564537378972, 0.20811414734388678, 0.13382996765602662, 0.1407721956294552, 0.14511934461028853, 0.17073737175691672, 0.1136540541497385, 0.10837805133780554, 0.16617532693059112, 0.12148921929431067, 0.12749958889944724, 0.10626334121711423, 0.2354731945290588, 0.2045161817600022, 0.15399038059364067, 0.18546417746643695, 0.19922171130831645, 0.1937143960388792, 0.21421560233309245, 0.20214832871163813, 0.20371900913328478, 0.16653424363301694, 0.18594390992892218, 0.17157802025427882, 0.1696651536501378, 0.17198514335147042, 0.15376099473643612, 0.17265352804622702, 0.1774663638781805, 0.18381201442888762, 0.1638075593482401, 0.14424984252245354, 0.14711995918691068, 0.1685584298356615, 0.22004131113877656, 0.1377980751874449, 0.14533318703103648, 0.10560906899659062, 0.18934545074973597, 0.40404779828404624, 0.16009979427417909, 0.10293180707490579, 0.10194161810301672, 0.2876356974633709, 0.1743489089767254, 0.11342916371286449, 0.09247702508002131, 0.13378454591663702, 0.18169460176862562, 0.18265847242999478, 0.17657461591495993, 0.213588506212126, 0.20799635602673117, 0.18941455832488552, 0.1622562840066879, 0.1897566438805588, 0.17910982098497807, 0.07498487566909973, 0.07747137075013921, 0.05027211284949118, 0.06634624075791185, 0.06225070896437224, 0.0632140476269526, 0.06204844022965195, 0.05707441114659728, 0.06550796642580736]}, "mutation_prompt": null}
{"id": "aab3a4da-7e68-482c-9812-c5705f818eca", "solution": "import numpy as np\n\nclass AdaptivePopulationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.95\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "AdaptivePopulationDE", "description": "Implement a Differential Evolution algorithm with adaptive population sizing to dynamically adjust the number of individuals in the population, enhancing exploration and exploitation for faster convergence.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "04f654d0-4b84-45e7-95d5-7987da44a3a3", "metadata": {"aucs": [0.23050506698070217, 0.14726677330790094, 0.14064422766533458, 0.07319332730931816, 0.13811350790866594, 0.06066317925256315, 0.1396216060169332, 0.20326356551256897, 0.3047719085583308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01938194558306039, 0.0778704996082017, 9.999999999998899e-05, 9.999999999998899e-05, 0.029831995269896883, 0.06907767788071706, 0.03862316830518919, 0.06715798058336153, 0.0784990846352952, 0.07544163784388169, 0.0768553161665535, 0.07045421087149384, 0.03846515357655367, 0.05577107664781855, 0.056426693603069955, 0.0450225828403118, 0.06816466200178783, 0.05523529218282053, 0.08651222066979625, 0.07069562461621681, 0.045318758959325134, 0.0068045865690095075, 0.05286908482080399, 0.07921825832406082, 0.06516527950102591, 0.07233009561034165, 0.05399987581881538, 0.05115811458028385, 0.09333434728326118, 0.09206051065448484, 0.05923102819772119, 0.11462045543786625, 9.999999999998899e-05, 0.009078760178142686, 0.015069353920001749, 0.11539636574136114, 0.06060348141912675, 0.06068095036960908, 0.04747402641456755, 0.0607532563808334, 0.3253607822541663, 0.14624777559957203, 0.14664780805075173, 0.11915190590760105, 0.09720725123736718, 0.22451798735267858, 0.22016123002499266, 0.10381845009337631, 0.22074848885033438, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04447433509761245, 0.09338885050535295, 0.007230828904165931, 0.013769226482430397, 0.006867151607875321, 0.013080514276182287, 9.999999999998899e-05, 9.999999999998899e-05, 0.0388230763141757, 9.999999999998899e-05, 9.999999999998899e-05, 0.06496198433773448, 0.10260464559887661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08239569026834337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07497826791595197, 0.08702325301348068, 0.11324853669547741, 0.1189820901359564, 0.008799240328053015, 0.043862652388333534, 0.0359749491074588, 0.10285748118765314, 0.11453941600576778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013688824149339252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038201493457504676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018009103513786484, 0.1654074763702783, 0.24568016544013715, 0.24304226628436632, 0.1707563497666591, 0.17994192223977967, 0.19228737715528088, 0.21253605001117026, 0.23123415385464252, 0.20157651011000488, 0.05768341242317532, 0.04753871627677886, 0.03594912367146463, 0.08043178055543343, 0.045601747379010016, 0.08307213913949563, 0.0506128357390393, 0.09836754105960421, 0.08704630610430197, 0.1556463334698419, 0.15891212724135095, 0.1705592798777712, 0.1495683726224839, 0.15606434981766049, 0.1299391495384572, 0.11561546410913104, 0.13863596772622333, 0.12373855451174876, 0.16099368672246306, 0.20039705837587252, 0.1691153218672684, 0.1895859082534359, 0.1921419316930092, 0.15977084957004395, 0.1664564537378972, 0.20811414734388678, 0.13382996765602662, 0.1407721956294552, 0.14511934461028853, 0.17073737175691672, 0.1136540541497385, 0.10837805133780554, 0.16617532693059112, 0.12148921929431067, 0.12749958889944724, 0.10626334121711423, 0.2354731945290588, 0.2045161817600022, 0.15399038059364067, 0.18546417746643695, 0.19922171130831645, 0.1937143960388792, 0.21421560233309245, 0.20214832871163813, 0.20371900913328478, 0.16653424363301694, 0.18594390992892218, 0.17157802025427882, 0.1696651536501378, 0.17198514335147042, 0.15376099473643612, 0.17265352804622702, 0.1774663638781805, 0.18381201442888762, 0.1638075593482401, 0.14424984252245354, 0.14711995918691068, 0.1685584298356615, 0.22004131113877656, 0.1377980751874449, 0.14533318703103648, 0.10560906899659062, 0.18934545074973597, 0.40404779828404624, 0.16009979427417909, 0.10293180707490579, 0.10194161810301672, 0.2876356974633709, 0.1743489089767254, 0.11342916371286449, 0.09247702508002131, 0.13378454591663702, 0.18169460176862562, 0.18265847242999478, 0.17657461591495993, 0.213588506212126, 0.20799635602673117, 0.18941455832488552, 0.1622562840066879, 0.1897566438805588, 0.17910982098497807, 0.07498487566909973, 0.07747137075013921, 0.05027211284949118, 0.06634624075791185, 0.06225070896437224, 0.0632140476269526, 0.06204844022965195, 0.05707441114659728, 0.06550796642580736]}, "mutation_prompt": null}
{"id": "4c734cba-64aa-49e7-9f0a-e5f4e811e0c9", "solution": "import numpy as np\n\nclass AdaptivePopulationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.f_factor = 0.8\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factor * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n\n            self.f_factor *= 0.925  # Dynamic adaptation of mutation scaling factor for faster convergence\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "AdaptivePopulationDE", "description": "Introducing a dynamic adaptation of mutation scaling factor to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 44, "fitness": 0.09136767973645649, "feedback": "The algorithm AdaptivePopulationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "04f654d0-4b84-45e7-95d5-7987da44a3a3", "metadata": {"aucs": [0.21295737005624216, 0.16429265831546358, 0.12916540849633873, 0.07791553088632941, 0.1366336363870292, 0.06446539980913146, 0.15679386545101137, 0.1850170062302109, 0.258974154923965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05770202691659454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04072680422398334, 0.07463204002887702, 0.03525789326484896, 0.06671804035825446, 0.055018501379771934, 0.06746960510010414, 0.06573607455294095, 0.06214173117392674, 0.049260025925095596, 0.042960737499407875, 0.05861700533174952, 0.050744629705606004, 0.043621940842047624, 0.022126264320613376, 0.07746167374344404, 0.044396016152642326, 0.045597700922602624, 0.013776924221920894, 0.06043719908761014, 0.051585829692952, 0.052835423196143316, 0.06999634192719895, 0.04961546505126335, 0.05164919042281979, 0.05579932555956535, 0.0656621970187431, 0.06910617060910895, 0.09700911295460646, 9.999999999998899e-05, 9.999999999998899e-05, 0.03231126740632373, 0.017039525613458895, 0.07095592944511064, 0.05568261298912225, 0.02871462806205549, 0.11525584515496379, 0.2122518198384853, 0.14260771629143765, 0.13557365023285728, 0.0849256619513129, 9.999999999998899e-05, 0.1731560856295593, 0.12842545456882604, 0.11706577307893473, 0.10494078832968057, 0.05275967887204369, 0.015326435682868733, 9.999999999998899e-05, 0.03165800461196544, 9.999999999998899e-05, 9.999999999998899e-05, 0.014657147076047705, 9.999999999998899e-05, 0.024094943992005624, 0.11414644310550115, 9.999999999998899e-05, 0.029616286699611694, 9.999999999998899e-05, 9.999999999998899e-05, 0.028969279848185425, 0.10885451864702334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09352252655960125, 0.06285319481175233, 0.11819183195071348, 0.0680883005594547, 0.03572049401019617, 0.06035827567736485, 0.011763291927648467, 0.14203346527822158, 0.11364794605250661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18330966813149274, 0.21443846059358618, 0.17790886900247938, 0.13460732843047185, 0.18808758877269705, 0.210278782835158, 0.17927619074311918, 0.24858416403331762, 0.22239100628033492, 0.05582072584615527, 0.09556635580559159, 9.999999999998899e-05, 0.06667106102981413, 0.05065987941413752, 0.06431825608969521, 0.07058394573283733, 0.08079261187947961, 0.08591254148729244, 0.12776223404736042, 0.1321726260749485, 0.1453365199022676, 0.11292718631289156, 0.1271941615686326, 0.09272238600444094, 0.10520093795862484, 0.11310985749641767, 0.12210100892074571, 0.16463884079604652, 0.16962630028457404, 0.1938661488910718, 0.2179681066209147, 0.1954815100676044, 0.18034763878609794, 0.1492946308300166, 0.18464508588019946, 0.16267707940552822, 0.09541547280181117, 0.12151822492821573, 0.11249797489536684, 0.1597679135467417, 0.14344241966139593, 0.16320347825055415, 0.10763478438459972, 0.10306857194158148, 0.09352226079905746, 0.17119355232053857, 0.17629001082067475, 0.16329963697639183, 0.19903744840865534, 0.15358261960511865, 0.2063370308662883, 0.21249850293208805, 0.20781042767679825, 0.17201326933657435, 0.17346570028830155, 0.16959647553947288, 0.16768039899316445, 0.17105027270831774, 0.1769001268092013, 0.158572769185083, 0.1843604478384242, 0.1561174363291733, 0.17139433996955744, 0.13846310534743334, 0.10928973941714626, 0.14113595661997336, 0.1645396981895152, 0.17057716775888598, 0.16767644079941235, 0.108006874106786, 0.10908392463297822, 0.15120622810345485, 0.30425128323042483, 0.16559492935527176, 0.11695778902798426, 0.1656324373410022, 0.2384040110712674, 0.09991848814375548, 0.09059314170751054, 0.15777428674957517, 0.10340981122750059, 0.18814397936966776, 0.17447050464884228, 0.17142928496793197, 0.16079415369325523, 0.16501515407446565, 0.19803164049003275, 0.18813221775890898, 0.16042175952089766, 0.17997672010001842, 0.0519784325722672, 0.06995096051428573, 0.049627587947755236, 0.0842287357217687, 0.07743910569056045, 0.06173035406664662, 0.0795311498619583, 0.06663646817591395, 0.05396829160534966]}, "mutation_prompt": null}
{"id": "3693f60c-8f5a-4ee2-91ea-d57be294eb64", "solution": "import numpy as np\n\nclass DynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.f_factors = np.random.uniform(0.5, 1.0, self.population_size)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factors[i] * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.f_factors[i] += 0.1 if self.f_factors[i] < 1.0 else -0.1\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DynamicMutDE", "description": "Implement a Differential Evolution variant with a dynamic mutation strategy based on individual performance to accelerate convergence speed while maintaining exploration and exploitation balance.", "configspace": "", "generation": 45, "fitness": 0.13049572856471664, "feedback": "The algorithm DynamicMutDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.08.", "error": "", "parent_id": "04f654d0-4b84-45e7-95d5-7987da44a3a3", "metadata": {"aucs": [0.1996193253939641, 0.14201975749496232, 0.18806929652675775, 0.16206070189233668, 0.3660441009322264, 0.26451981883840503, 0.34700922166016834, 0.30149412110159013, 0.1955374381387256, 0.06892225088989945, 0.17057130285982114, 0.12304868900081078, 0.0206500608304101, 9.999999999998899e-05, 0.18505232231474733, 0.06336849381120069, 0.15836099584908825, 9.999999999998899e-05, 0.09948268053504328, 0.13168865192868107, 0.08900243655041629, 0.09212182747830355, 0.08035892037730097, 0.10597797295869349, 0.06872182587796527, 0.0755603403103432, 0.07343222296156982, 0.0697009686283725, 0.05466110019213066, 0.08353618684092357, 0.052701704821541684, 0.05193801351388905, 0.07646559928225416, 0.07124894683946936, 0.10067688340531933, 0.09789158236438089, 0.1666757816208796, 0.11585462568989568, 0.16993894271711907, 0.2617136378083704, 0.29947170137867807, 0.31539174908084533, 0.17803439683422562, 0.15472575258805044, 0.22588866989493084, 0.14089044514261806, 0.13708106138526277, 0.0649292564815378, 0.10290610332983308, 0.1371998533600024, 0.04275779387742673, 0.15101097837201483, 0.2047221025667345, 0.021132174777412027, 0.18090974561399198, 0.10583975997368067, 0.17470579815573162, 0.19530499518809252, 0.22701140857866575, 0.1437158266001839, 0.12786973997313522, 0.27563635782261087, 0.1576471984453135, 0.0692846668007393, 9.999999999998899e-05, 0.10850587670339151, 0.09796199282401308, 0.08907093806677058, 9.999999999998899e-05, 0.1320979999726345, 0.14532264477937895, 0.09847076282471712, 0.22257596504215893, 0.1547836175095788, 0.11679096942924405, 0.08300287702676579, 0.08590165592222199, 9.999999999998899e-05, 9.999999999998899e-05, 0.08937475889286539, 0.03848012040469295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16193528054353024, 0.0757664908781055, 0.0392217261053327, 0.0922757408674808, 0.030190170734364585, 0.08418424115527046, 0.16128005168525195, 0.05367259856712192, 0.053827923618848805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03911010414814864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036070598333007964, 0.01543614199398613, 9.999999999998899e-05, 9.999999999998899e-05, 0.04247340305296199, 9.999999999998899e-05, 9.999999999998899e-05, 0.025965290642509742, 0.028963213379890163, 0.3813345187270849, 0.21323345004922478, 0.22832443871817554, 0.1564113177268871, 0.2556086688786431, 0.2147366920249002, 0.2835151837735028, 0.2520994587120069, 0.33194437938321397, 0.026592295433343183, 0.10469588187921886, 0.07757659114856508, 0.09700031097606732, 0.05174261956722637, 0.05636979327549929, 0.06528348734168998, 0.07612178165331429, 0.05783729705960505, 0.16833335361887514, 0.13492704003189027, 0.1134930035853633, 0.1527125314142117, 0.23747851062853953, 0.23385024468707272, 0.2259849532340228, 0.21240976001855505, 0.22813895505476578, 0.22402961785814657, 0.19575649712236676, 0.17949973849117307, 0.23263337759333902, 0.18722215735575864, 0.1757605229910485, 0.20821551910059222, 0.1848027635993268, 0.13436747434127005, 0.13914407879119395, 0.17315131071472367, 0.1719276957303637, 0.16905786609808038, 0.12896529620509278, 0.1462008023616692, 0.13318380759849457, 0.1537720913948979, 0.12475147862546943, 0.18615407031840692, 0.1640828897649973, 0.17409820525494013, 0.172336148500134, 0.20045953504334413, 0.19406673614822434, 0.19376622539554877, 0.21036739482479494, 0.2136891093801866, 0.17490437668306236, 0.16040356386640964, 0.1816292212542554, 0.17236732373137298, 0.170227925483328, 0.3391045875962171, 0.16858345879477332, 0.16452536846955068, 0.16490105963633528, 0.1594201903813126, 0.12075321846380993, 0.2209854453099127, 0.2147498877518137, 0.1666928727143766, 0.1401158591484214, 0.1554785445002086, 0.1556605543852112, 0.16928348830110684, 0.1812539167055225, 0.17799192980445766, 0.3643103431825335, 0.21796159062971743, 0.20322621822335507, 0.20531973868647324, 0.2226318072743969, 0.14049536576895227, 0.22007107250623337, 0.19582141873959946, 0.16376811782730039, 0.17275447204826377, 0.17621001251176038, 0.17115037609104788, 0.178947173624891, 0.16780853025834164, 0.1699247865900234, 0.17064359312575927, 0.07184581455243222, 0.0806439028704875, 0.07144614523965409, 0.08885717045731567, 0.06785407621358486, 0.07936761630925449, 0.07608957487857171, 0.08753912571358446, 0.06895816290481593]}, "mutation_prompt": null}
{"id": "5caecbc3-e08d-4727-92da-1f3aa1c00375", "solution": "import numpy as np\n\nclass ImprovedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.f_factors = np.full(self.population_size, 0.5)\n        self.success_counter = np.zeros(self.population_size)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factors[i] * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.f_factors[i] *= 1.1  # Increase mutation factor for successful individuals\n                    self.success_counter[i] += 1\n                else:\n                    self.f_factors[i] *= 0.9  # Decrease mutation factor for unsuccessful individuals\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "ImprovedDynamicMutDE", "description": "Improve the convergence speed by dynamically adapting the mutation factor based on the historical performance of individuals, enhancing exploitation of promising regions.", "configspace": "", "generation": 46, "fitness": 0.08838350863596241, "feedback": "The algorithm ImprovedDynamicMutDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "3693f60c-8f5a-4ee2-91ea-d57be294eb64", "metadata": {"aucs": [0.30864422419274806, 0.15558622990497384, 0.12763800016350402, 0.10427458979190973, 0.09513224684989652, 0.07054592104146251, 0.09787532744872174, 0.16386970752708785, 0.09139528812930708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009599781416158581, 9.999999999998899e-05, 9.999999999998899e-05, 0.08640705872240728, 0.06389134080532077, 0.06235626188355459, 0.0568791832298946, 0.059849861690414174, 0.041724795872534526, 0.06422908127273275, 0.07918488836058624, 0.04700177353173618, 0.029530840990799834, 0.015180011378564617, 0.03270366608160635, 0.05908156900480388, 9.999999999998899e-05, 0.04218142459218166, 0.05937973031695942, 0.047637194360305335, 9.999999999998899e-05, 0.053879961029310475, 0.04855866697232336, 0.05077653900690515, 0.059381708170761494, 0.07552057832870074, 0.05305775719818173, 0.042544427362960935, 0.09216172574949466, 0.05217281346001801, 0.060802920561604856, 0.1057642787251063, 9.999999999998899e-05, 0.002807402062849018, 0.01864131365089683, 0.09751669163740895, 0.09818886936925264, 0.03585888643888302, 0.054286824465629824, 0.211948635612901, 0.06848095316462455, 0.07934934050315146, 0.13490598614994487, 0.014257554690082386, 0.13872949174465898, 0.15241554521711786, 0.08486760465033927, 0.1767916395598812, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10395483884398904, 9.999999999998899e-05, 0.03218886248446251, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05003921883445872, 0.011403422923930484, 0.09969564764461125, 9.999999999998899e-05, 0.008911070735050042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07371141986021923, 0.15367622392712676, 0.1475996129336964, 0.04019634763326829, 0.03267150494615145, 0.03761229141613853, 0.14587061780032073, 0.0726547605025547, 0.07429733156333118, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04813968030893012, 9.999999999998899e-05, 9.999999999998899e-05, 0.045416951335882194, 0.20181723626968773, 0.22770273885600933, 0.18824057521813875, 0.11345365813939501, 0.1698617345184552, 0.12347499470831158, 0.2675487237549812, 0.23723636950108662, 0.15576388987678724, 0.05610910737247454, 0.01803593219342492, 0.03524712408203945, 0.05447945642459506, 0.0634413902897899, 0.052604993485000695, 0.03652961120153031, 0.060696865876148864, 0.09596692434960863, 0.12864703664017396, 0.12307400368167842, 0.15352529272641935, 0.1313228967106297, 0.12059466431699017, 0.1169922536388287, 0.120099512505351, 0.12088862598834005, 0.12791787378671293, 0.1689183089537193, 0.20208625684649484, 0.1631623799876144, 0.225144139833796, 0.2484849110864562, 0.17132726462415537, 0.23629800992688166, 0.1738831360625649, 0.11327777208869705, 0.12678466972122948, 0.10537417852549225, 0.10859852758251798, 0.13606007713911694, 0.13254416068978447, 0.15314838215439364, 0.1653554610277932, 0.14644261385016166, 0.09321037515445263, 0.18283665793299697, 0.15984390650547864, 0.1661013403854975, 0.20373338990661205, 0.18570174477309964, 0.17680607383123137, 0.19532325111338944, 0.16423364812898777, 0.16142113100025257, 0.16631330220575724, 0.18399083692781482, 0.16640207223352477, 0.1382407478100418, 0.15489268244363252, 0.15153158805985223, 0.1768888567412812, 0.1790239631409256, 0.17332722544437673, 0.06637827887586156, 0.15074809071725415, 0.10938638902952003, 0.22437538849945327, 0.17087995193849548, 0.1232451760540838, 0.12302402707851379, 0.13921820987430344, 0.14729369906643575, 0.2374459160548711, 0.08726185771834538, 0.11386517442488953, 0.1739744984348539, 0.12918621234188954, 0.06928983062305383, 0.17210443309755175, 0.0961314394571593, 0.10138643077614906, 0.18350634632006912, 0.1470656652207557, 0.16095249249124155, 0.1741092598006453, 0.182930730860127, 0.14506455335673474, 0.1682331537991909, 0.16623240173136367, 0.15997361583628722, 0.060333337197800985, 0.11874065024960123, 0.05347186867779141, 0.0830533292829061, 0.055764460130401816, 0.05615639331018851, 0.04874311827602906, 0.07034342607945987, 0.0533334142691978]}, "mutation_prompt": null}
{"id": "aea76774-3a08-4e0e-bc26-71f2ab778a9c", "solution": "import numpy as np\n\nclass DynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.f_factors = np.random.uniform(0.5, 1.0, self.population_size)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factors[i] * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.f_factors[i] += 0.1 if self.f_factors[i] < 1.0 else -0.1\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DynamicMutDE", "description": "Implement a Differential Evolution variant with a dynamic mutation strategy based on individual performance to accelerate convergence speed while maintaining exploration and exploitation balance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3693f60c-8f5a-4ee2-91ea-d57be294eb64", "metadata": {"aucs": [0.1996193253939641, 0.14201975749496232, 0.18806929652675775, 0.16206070189233668, 0.3660441009322264, 0.26451981883840503, 0.34700922166016834, 0.30149412110159013, 0.1955374381387256, 0.06892225088989945, 0.17057130285982114, 0.12304868900081078, 0.0206500608304101, 9.999999999998899e-05, 0.18505232231474733, 0.06336849381120069, 0.15836099584908825, 9.999999999998899e-05, 0.09948268053504328, 0.13168865192868107, 0.08900243655041629, 0.09212182747830355, 0.08035892037730097, 0.10597797295869349, 0.06872182587796527, 0.0755603403103432, 0.07343222296156982, 0.0697009686283725, 0.05466110019213066, 0.08353618684092357, 0.052701704821541684, 0.05193801351388905, 0.07646559928225416, 0.07124894683946936, 0.10067688340531933, 0.09789158236438089, 0.1666757816208796, 0.11585462568989568, 0.16993894271711907, 0.2617136378083704, 0.29947170137867807, 0.31539174908084533, 0.17803439683422562, 0.15472575258805044, 0.22588866989493084, 0.14089044514261806, 0.13708106138526277, 0.0649292564815378, 0.10290610332983308, 0.1371998533600024, 0.04275779387742673, 0.15101097837201483, 0.2047221025667345, 0.021132174777412027, 0.18090974561399198, 0.10583975997368067, 0.17470579815573162, 0.19530499518809252, 0.22701140857866575, 0.1437158266001839, 0.12786973997313522, 0.27563635782261087, 0.1576471984453135, 0.0692846668007393, 9.999999999998899e-05, 0.10850587670339151, 0.09796199282401308, 0.08907093806677058, 9.999999999998899e-05, 0.1320979999726345, 0.14532264477937895, 0.09847076282471712, 0.22257596504215893, 0.1547836175095788, 0.11679096942924405, 0.08300287702676579, 0.08590165592222199, 9.999999999998899e-05, 9.999999999998899e-05, 0.08937475889286539, 0.03848012040469295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16193528054353024, 0.0757664908781055, 0.0392217261053327, 0.0922757408674808, 0.030190170734364585, 0.08418424115527046, 0.16128005168525195, 0.05367259856712192, 0.053827923618848805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03911010414814864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036070598333007964, 0.01543614199398613, 9.999999999998899e-05, 9.999999999998899e-05, 0.04247340305296199, 9.999999999998899e-05, 9.999999999998899e-05, 0.025965290642509742, 0.028963213379890163, 0.3813345187270849, 0.21323345004922478, 0.22832443871817554, 0.1564113177268871, 0.2556086688786431, 0.2147366920249002, 0.2835151837735028, 0.2520994587120069, 0.33194437938321397, 0.026592295433343183, 0.10469588187921886, 0.07757659114856508, 0.09700031097606732, 0.05174261956722637, 0.05636979327549929, 0.06528348734168998, 0.07612178165331429, 0.05783729705960505, 0.16833335361887514, 0.13492704003189027, 0.1134930035853633, 0.1527125314142117, 0.23747851062853953, 0.23385024468707272, 0.2259849532340228, 0.21240976001855505, 0.22813895505476578, 0.22402961785814657, 0.19575649712236676, 0.17949973849117307, 0.23263337759333902, 0.18722215735575864, 0.1757605229910485, 0.20821551910059222, 0.1848027635993268, 0.13436747434127005, 0.13914407879119395, 0.17315131071472367, 0.1719276957303637, 0.16905786609808038, 0.12896529620509278, 0.1462008023616692, 0.13318380759849457, 0.1537720913948979, 0.12475147862546943, 0.18615407031840692, 0.1640828897649973, 0.17409820525494013, 0.172336148500134, 0.20045953504334413, 0.19406673614822434, 0.19376622539554877, 0.21036739482479494, 0.2136891093801866, 0.17490437668306236, 0.16040356386640964, 0.1816292212542554, 0.17236732373137298, 0.170227925483328, 0.3391045875962171, 0.16858345879477332, 0.16452536846955068, 0.16490105963633528, 0.1594201903813126, 0.12075321846380993, 0.2209854453099127, 0.2147498877518137, 0.1666928727143766, 0.1401158591484214, 0.1554785445002086, 0.1556605543852112, 0.16928348830110684, 0.1812539167055225, 0.17799192980445766, 0.3643103431825335, 0.21796159062971743, 0.20322621822335507, 0.20531973868647324, 0.2226318072743969, 0.14049536576895227, 0.22007107250623337, 0.19582141873959946, 0.16376811782730039, 0.17275447204826377, 0.17621001251176038, 0.17115037609104788, 0.178947173624891, 0.16780853025834164, 0.1699247865900234, 0.17064359312575927, 0.07184581455243222, 0.0806439028704875, 0.07144614523965409, 0.08885717045731567, 0.06785407621358486, 0.07936761630925449, 0.07608957487857171, 0.08753912571358446, 0.06895816290481593]}, "mutation_prompt": null}
{"id": "9f97e078-e06e-495c-b2f7-aaa9dffbd4b7", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.f_factors = np.random.uniform(0.5, 1.0, self.population_size)\n        self.diversity_history = []\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factors[i] * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.f_factors[i] += 0.1 if self.f_factors[i] < 1.0 else -0.1\n\n            diversity_metric = np.mean(np.std(self.population, axis=0))\n            self.diversity_history.append(diversity_metric)\n\n            if len(self.diversity_history) > 1 and self.diversity_history[-1] < self.diversity_history[-2]:\n                for j in range(self.population_size):\n                    self.f_factors[j] = min(1.0, self.f_factors[j] + 0.1)\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDE", "description": "Utilize a dynamic adaptation of mutation factors based on population diversity to enhance convergence speed without compromising exploration and exploitation balance.", "configspace": "", "generation": 48, "fitness": 0.10236735892925496, "feedback": "The algorithm EnhancedDynamicMutDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "3693f60c-8f5a-4ee2-91ea-d57be294eb64", "metadata": {"aucs": [0.167400121187799, 0.13648452805050693, 0.186748269846852, 0.2945304809012248, 0.32145017631081696, 0.1780720103486545, 0.20535457853361172, 0.3025997971562743, 0.1697066119112418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02198277648226543, 0.034940556326525596, 9.999999999998899e-05, 0.058626603881226536, 0.09914662040430045, 0.07402749292832289, 0.06802708718622708, 0.05848097582513878, 0.052369088985243395, 0.06399066753421734, 0.06805564895628247, 0.06462580785684491, 0.03483595320192212, 0.0012696853309638323, 0.02616663821305243, 0.05281088094333264, 0.0473803328416188, 0.031619273517141666, 0.046219149657831804, 0.040641258944866476, 0.03999897053710155, 0.12599755551310932, 0.1295824764257577, 0.2914233127653473, 0.23253501942349186, 0.10147912795757452, 0.2347733331619486, 0.08662634452210527, 0.2133070036232031, 0.28380423299071733, 0.08911911006221451, 0.16751082777167814, 0.10689094153980694, 0.04973498895822537, 0.23534195323331586, 0.05992931302282445, 0.10707984356817146, 0.11275707941453672, 0.11260676399632719, 0.178391832441123, 0.0968929147998322, 0.11783428744791036, 0.09294209858160452, 0.1218815125139614, 0.13242330088683396, 0.13437374119698176, 0.21775353260979824, 0.12478930619183304, 9.999999999998899e-05, 0.02712992644978529, 9.999999999998899e-05, 9.999999999998899e-05, 0.061393467666169266, 0.036034636346851556, 0.09399127535414387, 9.999999999998899e-05, 0.02859854373566928, 9.999999999998899e-05, 0.024146830427742683, 0.06453024845410349, 0.077478166196709, 9.999999999998899e-05, 0.030715013079088194, 9.999999999998899e-05, 0.024753431374376134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019471726994253036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1163278606161754, 0.06406804328815086, 0.0297225140320877, 0.08656441633626255, 9.999999999998899e-05, 0.10463553187667507, 0.09332849395985465, 0.14451666461957136, 0.09666099684717522, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012951168236119304, 0.005475647455741139, 0.03151021702605972, 0.0014738794211338613, 0.051116834579324144, 0.008857532887928232, 9.999999999998899e-05, 0.03441647305738693, 0.0446546221158729, 0.18590556448750195, 0.1680274456858437, 0.21458728663863869, 0.1820853284045878, 0.21344051945638398, 0.21548685748477836, 0.18487002093094385, 0.2329653148104064, 0.28115115487878917, 0.06600258507823442, 0.060778798706873194, 0.04915153169275943, 0.024122172912249384, 0.02626593209121597, 0.05325707968136395, 0.07015183677583137, 0.06397699846201355, 0.0407477496636246, 0.13702204094535897, 0.12772786002617065, 0.11989452416712343, 0.136293568972765, 0.1268305496737474, 0.11288183646944672, 0.12900096516689863, 0.13269486880269854, 0.09335936962954061, 0.14506476479882835, 0.24518823168738413, 0.17720863446167112, 0.16236862674320673, 0.1647779516942961, 0.16331817540013238, 0.18437451659504178, 0.1573649616834507, 0.1575768108249711, 0.10016742470038664, 0.09285706031436325, 0.11121086426383187, 0.1407703367683245, 0.1302826344100233, 0.1136425865335623, 0.09137270081382542, 0.10341347608736196, 0.12451857613615414, 0.11877556381026899, 0.14197334576297949, 0.15850009573100576, 0.16395360102543965, 0.16160449888711215, 0.14296566097119445, 0.18332822607333565, 0.16954146776639223, 0.13333264922763688, 9.999999999998899e-05, 0.145045232983399, 0.17676880109576665, 0.1487023552603659, 0.18568469065180482, 0.15264883740756008, 0.17491206282481686, 0.17047188027250537, 0.159500649447598, 0.1440132352420349, 0.19317819774719258, 0.36190053542611755, 0.32159858100134464, 0.16953919311992216, 0.21301753850615146, 0.1451890893944161, 0.13538521812483106, 0.1142096545794744, 0.1022950537269457, 0.1648166714043653, 0.16664840533256775, 0.1639205597173352, 0.169539424770342, 0.15033748886923326, 0.09904156859246427, 0.081855934627173, 0.13543627526438917, 0.19380748265789127, 0.165561425734578, 0.15152857609340464, 0.16717285712325813, 0.18658423755350584, 0.15076918580781473, 0.1494989882893102, 0.1702657581623731, 0.18716238184491263, 0.05238077191473245, 0.06570778120482101, 0.049809847718993994, 0.06545179128987166, 0.05778140746356608, 0.045499308449821196, 0.055138231644985325, 0.053038028587885644, 0.08703316606320366]}, "mutation_prompt": null}
{"id": "6886e6d0-10be-4b3e-b031-c172da8c9b28", "solution": "import numpy as np\n\nclass ImprovedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.f_factors = np.random.uniform(0.5, 1.0, self.population_size)\n        self.cr_factors = np.random.uniform(0.0, 1.0, self.population_size)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factors[i] * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n\n                crossover_points = np.random.rand(self.dim) < self.cr_factors[i]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.f_factors[i] += 0.1 if self.f_factors[i] < 1.0 else -0.1\n                    self.cr_factors[i] += 0.05 if self.cr_factors[i] < 1.0 else -0.05\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "ImprovedDynamicMutDE", "description": "Enhance convergence speed by incorporating a self-adaptive mechanism to dynamically adjust the mutation factor during the optimization process.", "configspace": "", "generation": 49, "fitness": 0.26588978600298774, "feedback": "The algorithm ImprovedDynamicMutDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.18.", "error": "", "parent_id": "3693f60c-8f5a-4ee2-91ea-d57be294eb64", "metadata": {"aucs": [0.829885180924832, 0.7021177809372512, 0.6436139291880788, 0.7671375755525421, 0.6361715974012137, 0.7497179191516621, 0.6867962954080333, 0.7126354939858135, 0.7776421437440584, 0.4375529127426493, 0.6498557688473621, 0.5502972040015026, 0.4016461646408418, 0.5603620530486182, 0.48527972592373736, 0.356761878511358, 0.5058101435289462, 0.614037764315287, 0.17317804367922485, 0.12643076027648037, 0.15568810758604412, 0.15358237031612532, 0.16692321903083762, 0.13666412784462922, 0.16973131613643289, 0.14291099621460523, 0.17825020640484468, 0.1105804649784472, 0.15424361448111945, 0.163724694808547, 0.13229162647438297, 0.11152832795094891, 0.13839759046873445, 0.11137787383360898, 0.11098280980194564, 0.10300644028728434, 0.4593314529708469, 0.5246351590553611, 0.5011793283252163, 0.4511609954252159, 0.47673680612020286, 0.5356190331640767, 0.5165358970602368, 0.47293268444827274, 0.4900273264256422, 0.31561102439744904, 0.1613933933398679, 0.230170872921174, 0.4018124499199722, 0.3258620598853851, 0.36093088271676066, 0.2853871153090516, 0.3321505992051428, 0.42611079239677385, 0.20464335495616492, 0.2105901214119592, 0.34608741927118813, 0.34418041982317604, 0.23935073558924758, 0.3603000828724904, 0.22033193094208448, 0.22732106651948758, 0.28137728072233326, 0.31513789126045044, 0.12723547552980397, 0.5801157131821586, 0.11068146864760875, 0.1999016318950707, 0.19939871822951039, 0.19375533070619622, 0.1374961302488633, 0.1522175451380663, 0.1201369616047272, 0.11310567793494797, 0.12559158292713657, 0.12930206898738594, 0.12114374215073953, 0.2406973139852142, 0.1778461915627535, 0.20182428567852195, 0.16251294966113838, 0.056483796724143165, 0.018661195223696136, 0.07821792572385489, 9.999999999998899e-05, 0.0324042214035537, 0.0830031439629092, 0.05916382659894592, 0.11079632157691521, 0.01993079607513426, 0.21949297091740805, 0.14988698389426391, 0.15374222931232984, 0.1370718059268775, 0.07318133693852391, 0.11597484774524414, 0.14940416043131022, 0.09145117579068884, 0.14782560395598232, 0.10741516966316633, 0.2615479778808464, 0.06939309197474364, 0.11512176610864622, 0.34126911504050306, 0.1462010503963247, 0.0774747655784237, 0.2860189891695132, 0.23006615755272064, 0.265086277124597, 0.18121090940400852, 0.10065614343887042, 0.23426152259529054, 0.1870048777409835, 0.21874063212916373, 0.25657023014403735, 0.22288262916197443, 0.07487222247480163, 0.4495436371729722, 0.4601675835385255, 0.49580596566127944, 0.5040702576580675, 0.4765076149772538, 0.4513241855651816, 0.5316059926821122, 0.5052573437483325, 0.5484798356888887, 0.11959686542485326, 0.08260640616718884, 0.12260246578238954, 0.12876796181552475, 0.09457363851637002, 0.14356019654964725, 0.07203382041006867, 0.07175567687061835, 0.11115454945148939, 0.12417135596220741, 0.22158571860235166, 0.22217226742846863, 0.14223592917261207, 0.15749081625817674, 0.14659747636268516, 0.12657950039433685, 0.24643594642060962, 0.13419253950567833, 0.2759901710580043, 0.25866588998219175, 0.24272921983278772, 0.22928205496763998, 0.21731760752334528, 0.18261035515439572, 0.25620032570647344, 0.35245062028933793, 0.2740810701926637, 0.14999367852434242, 0.24592242810581133, 0.15778436029602527, 0.2086497272663833, 0.219927398336477, 0.29395219712339693, 0.21623961599136787, 0.26331399587422666, 0.23486524014983035, 0.17412111216197335, 0.16549239465017707, 0.15746556398799583, 0.18435952238917475, 0.20332272097020265, 0.1884390880631578, 0.16305095090618926, 0.17279260051437573, 0.19147251672447307, 0.1897984672729348, 0.18561937989041555, 0.19531015954467035, 0.4933617524311197, 0.18182427118312394, 0.18518381759751168, 0.2091535924393264, 0.23643247707112602, 0.5378768396729082, 0.6521626781155196, 0.17451374370619865, 0.6390730187295656, 0.6637068250549129, 0.4061375331642203, 0.36635516066405405, 0.42514174785978354, 0.29644589309560465, 0.44856159232226056, 0.4253823303841312, 0.45589079565235835, 0.5592873037938859, 0.16304107527133238, 0.4822145662636711, 0.6671035566365876, 0.430023824239125, 0.69024175029782, 0.28992957908596284, 0.18186574015304835, 0.18819818884823714, 0.1674028521517099, 0.18062910990455383, 0.17798134908328123, 0.1690419007585815, 0.18275612726614388, 0.17458822350999548, 0.184901354755034, 0.05894870100567606, 0.07380814965144034, 0.07679696086999588, 0.06910123623998043, 0.07662459721235826, 0.06485834762825327, 0.06424353060202526, 0.0691378439353828, 0.06089690036571249]}, "mutation_prompt": null}
{"id": "ae2d61c6-e414-4d42-868c-bc906dbb3455", "solution": "import numpy as np\n\nclass ImprovedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.f_factors = np.random.uniform(0.5, 1.0, self.population_size)\n        self.cr_factors = np.random.uniform(0.0, 1.0, self.population_size)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = self.population[a] + self.f_factors[i] * (self.population[b] - self.population[c])\n                trial = np.where(np.logical_or(mutant < -5.0, mutant > 5.0), self.population[i], mutant)\n\n                crossover_points = np.random.rand(self.dim) < self.cr_factors[i]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.f_factors[i] += 0.1 if self.f_factors[i] < 1.0 else -0.1\n                    self.cr_factors[i] += 0.05 if self.cr_factors[i] < 1.0 else -0.05\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "ImprovedDynamicMutDE", "description": "Enhance convergence speed by incorporating a self-adaptive mechanism to dynamically adjust the mutation factor during the optimization process.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6886e6d0-10be-4b3e-b031-c172da8c9b28", "metadata": {"aucs": [0.829885180924832, 0.7021177809372512, 0.6436139291880788, 0.7671375755525421, 0.6361715974012137, 0.7497179191516621, 0.6867962954080333, 0.7126354939858135, 0.7776421437440584, 0.4375529127426493, 0.6498557688473621, 0.5502972040015026, 0.4016461646408418, 0.5603620530486182, 0.48527972592373736, 0.356761878511358, 0.5058101435289462, 0.614037764315287, 0.17317804367922485, 0.12643076027648037, 0.15568810758604412, 0.15358237031612532, 0.16692321903083762, 0.13666412784462922, 0.16973131613643289, 0.14291099621460523, 0.17825020640484468, 0.1105804649784472, 0.15424361448111945, 0.163724694808547, 0.13229162647438297, 0.11152832795094891, 0.13839759046873445, 0.11137787383360898, 0.11098280980194564, 0.10300644028728434, 0.4593314529708469, 0.5246351590553611, 0.5011793283252163, 0.4511609954252159, 0.47673680612020286, 0.5356190331640767, 0.5165358970602368, 0.47293268444827274, 0.4900273264256422, 0.31561102439744904, 0.1613933933398679, 0.230170872921174, 0.4018124499199722, 0.3258620598853851, 0.36093088271676066, 0.2853871153090516, 0.3321505992051428, 0.42611079239677385, 0.20464335495616492, 0.2105901214119592, 0.34608741927118813, 0.34418041982317604, 0.23935073558924758, 0.3603000828724904, 0.22033193094208448, 0.22732106651948758, 0.28137728072233326, 0.31513789126045044, 0.12723547552980397, 0.5801157131821586, 0.11068146864760875, 0.1999016318950707, 0.19939871822951039, 0.19375533070619622, 0.1374961302488633, 0.1522175451380663, 0.1201369616047272, 0.11310567793494797, 0.12559158292713657, 0.12930206898738594, 0.12114374215073953, 0.2406973139852142, 0.1778461915627535, 0.20182428567852195, 0.16251294966113838, 0.056483796724143165, 0.018661195223696136, 0.07821792572385489, 9.999999999998899e-05, 0.0324042214035537, 0.0830031439629092, 0.05916382659894592, 0.11079632157691521, 0.01993079607513426, 0.21949297091740805, 0.14988698389426391, 0.15374222931232984, 0.1370718059268775, 0.07318133693852391, 0.11597484774524414, 0.14940416043131022, 0.09145117579068884, 0.14782560395598232, 0.10741516966316633, 0.2615479778808464, 0.06939309197474364, 0.11512176610864622, 0.34126911504050306, 0.1462010503963247, 0.0774747655784237, 0.2860189891695132, 0.23006615755272064, 0.265086277124597, 0.18121090940400852, 0.10065614343887042, 0.23426152259529054, 0.1870048777409835, 0.21874063212916373, 0.25657023014403735, 0.22288262916197443, 0.07487222247480163, 0.4495436371729722, 0.4601675835385255, 0.49580596566127944, 0.5040702576580675, 0.4765076149772538, 0.4513241855651816, 0.5316059926821122, 0.5052573437483325, 0.5484798356888887, 0.11959686542485326, 0.08260640616718884, 0.12260246578238954, 0.12876796181552475, 0.09457363851637002, 0.14356019654964725, 0.07203382041006867, 0.07175567687061835, 0.11115454945148939, 0.12417135596220741, 0.22158571860235166, 0.22217226742846863, 0.14223592917261207, 0.15749081625817674, 0.14659747636268516, 0.12657950039433685, 0.24643594642060962, 0.13419253950567833, 0.2759901710580043, 0.25866588998219175, 0.24272921983278772, 0.22928205496763998, 0.21731760752334528, 0.18261035515439572, 0.25620032570647344, 0.35245062028933793, 0.2740810701926637, 0.14999367852434242, 0.24592242810581133, 0.15778436029602527, 0.2086497272663833, 0.219927398336477, 0.29395219712339693, 0.21623961599136787, 0.26331399587422666, 0.23486524014983035, 0.17412111216197335, 0.16549239465017707, 0.15746556398799583, 0.18435952238917475, 0.20332272097020265, 0.1884390880631578, 0.16305095090618926, 0.17279260051437573, 0.19147251672447307, 0.1897984672729348, 0.18561937989041555, 0.19531015954467035, 0.4933617524311197, 0.18182427118312394, 0.18518381759751168, 0.2091535924393264, 0.23643247707112602, 0.5378768396729082, 0.6521626781155196, 0.17451374370619865, 0.6390730187295656, 0.6637068250549129, 0.4061375331642203, 0.36635516066405405, 0.42514174785978354, 0.29644589309560465, 0.44856159232226056, 0.4253823303841312, 0.45589079565235835, 0.5592873037938859, 0.16304107527133238, 0.4822145662636711, 0.6671035566365876, 0.430023824239125, 0.69024175029782, 0.28992957908596284, 0.18186574015304835, 0.18819818884823714, 0.1674028521517099, 0.18062910990455383, 0.17798134908328123, 0.1690419007585815, 0.18275612726614388, 0.17458822350999548, 0.184901354755034, 0.05894870100567606, 0.07380814965144034, 0.07679696086999588, 0.06910123623998043, 0.07662459721235826, 0.06485834762825327, 0.06424353060202526, 0.0691378439353828, 0.06089690036571249]}, "mutation_prompt": null}
{"id": "9b33b077-96dd-4f75-a3be-8a1088f5c534", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.adaptive_factors[i, 0] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.adaptive_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.1, 0.05]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.1, -0.05])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDE", "description": "Improve convergence speed by implementing a novel adaptive mechanism that adjusts both mutation factor and crossover rate based on individual performance, enhancing exploitation and exploration.", "configspace": "", "generation": 51, "fitness": 0.2770289106448324, "feedback": "The algorithm EnhancedDynamicMutDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "6886e6d0-10be-4b3e-b031-c172da8c9b28", "metadata": {"aucs": [0.7143003511385457, 0.7562730892984079, 0.7740139461397358, 0.7387769017464823, 0.8074599185069729, 0.7963801853086225, 0.7899709069445089, 0.8227344335503645, 0.761792377208971, 0.6122602080296407, 0.6990261162763673, 0.6052808097611304, 0.5656125222722619, 0.6578493802473013, 0.6152176223448537, 0.5848219941149337, 0.6687872396784984, 0.6379351685486361, 0.5428851514987489, 0.44740032952944075, 0.557077700589234, 0.5137903791126341, 0.1617056115244515, 0.6014037371234537, 0.5355251853027522, 0.5186078958253768, 0.5263087373514362, 0.1560929455313873, 0.1559965866988119, 0.16843275823767578, 0.42508769998443385, 0.16846681160007793, 0.14715926478740837, 0.41982326884932186, 0.35249145671675186, 0.5023338973039653, 0.9516140306992714, 0.9822306064381318, 0.9684606284242191, 0.9605742630905382, 0.9738476029863888, 0.9352257517175134, 0.9564951090180804, 0.971871812615776, 0.9512193169383539, 0.1897138177643063, 0.3300783958346607, 0.29287645035197507, 0.2310049392448097, 0.42754823982960244, 0.2528783969798788, 0.17700540077116134, 0.2636481004199468, 0.22567006369830833, 0.25089493374404215, 0.26726502977157474, 0.22866540466201557, 0.17986854650831463, 0.27629958179519576, 0.2661491869477658, 0.19384275974159204, 0.6324151873586256, 0.20125070069662854, 0.1499256822964239, 0.113102166476302, 0.14494889703479497, 0.16101367771949604, 0.1203039939230639, 0.15068703065522804, 0.12412492648519002, 0.254980996627274, 0.16516071350000017, 0.08068880311106608, 0.1314213552783462, 0.17079275452859433, 0.1425079280203363, 0.2895440066151287, 0.14942905603542422, 0.14263755561809688, 0.1353991513421925, 0.13467950846538757, 9.999999999998899e-05, 0.00875277521956741, 9.999999999998899e-05, 9.999999999998899e-05, 0.04993105334943504, 9.999999999998899e-05, 9.999999999998899e-05, 0.06708036498377279, 0.006550289753859739, 0.052432176081366966, 0.11000743874937269, 0.1090229401057301, 0.09559532898121725, 0.08336391519063147, 0.08627772124167932, 0.09093294192717183, 0.1857561415647463, 0.08562343253902749, 0.0006302977696551748, 0.08720436335218351, 0.002695330240948035, 9.999999999998899e-05, 0.0487372289777821, 0.015443032343226304, 0.02769057264400432, 0.08212321581569326, 0.004730610735692586, 0.06709546208399553, 0.13868686838687028, 0.03947743816969307, 0.10013673919308386, 0.14738019653045753, 0.11236069971527118, 0.08083522801326903, 0.11950329338272236, 0.09733817646780352, 0.42863917320054334, 0.4900297551489319, 0.43787266420322135, 0.4478408979624764, 0.5052217900604777, 0.46376680683167193, 0.4325179848866495, 0.5206617050361739, 0.4532363666358973, 0.0908218540950333, 0.11957794552944456, 0.08630320301666872, 0.07068517990415435, 0.09532273034806571, 0.09222019844029872, 0.09352157715662102, 0.09221173022557538, 0.09669782102891533, 0.13436270274288742, 0.1329141827338599, 0.15571393339674056, 0.13578210284022585, 0.26242667093364136, 0.1343962220682906, 0.1351012385841135, 0.17407785447104174, 0.13055820245528682, 0.23467529931880082, 0.2798688779538099, 0.2295479238568492, 0.21630856737006765, 0.3031326061561648, 0.29980461529264846, 0.25413374060336713, 0.31939095996365297, 0.23102564403549508, 0.169340642888701, 0.2347941960126696, 0.13299033885390565, 0.13940945788290138, 0.1622815414587112, 0.18248575347589702, 0.1466352570266094, 0.22925278531368354, 0.16858140176879388, 0.17866275297502432, 0.1773902315378546, 0.18647994648920518, 0.19379217245601177, 0.15947522138981507, 0.16542055081156437, 0.18254691656425737, 0.20272830444310452, 0.18693046614735265, 0.3085934245317503, 0.19162320920963083, 0.1981541460926285, 0.1943177437728466, 0.2522550320755015, 0.22897218863322888, 0.20017636925800175, 0.44521783411527527, 0.2829418953065308, 0.18026047422300484, 0.1688480170176888, 0.2954364962319552, 0.2303457584348514, 0.1812594840172035, 0.410824526483516, 0.27294750267162793, 0.5713034420853833, 0.316429473902351, 0.16674154203031544, 0.46352130398805413, 0.15302620235849518, 0.1432524274771385, 0.46446279497887133, 0.3145369107102999, 0.18992918570648132, 0.6246696478026461, 0.19728147099919457, 0.16460656479725855, 0.1914965929539174, 0.1856928288211378, 0.16644279236080695, 0.18847818652707315, 0.18691705587990215, 0.16227223434399207, 0.18740208041800965, 0.18108469342584, 0.07534035414038609, 0.05506376521027778, 0.05998840379254211, 0.06120516621482819, 0.06355045457437558, 0.07462056289006136, 0.07004144924522193, 0.062263430616923854, 0.06184058899838896]}, "mutation_prompt": null}
{"id": "d107c6e4-15b2-4af2-88f9-a1bcdaacdab4", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.adaptive_factors[i, 0] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.adaptive_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.1, 0.05]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.1, -0.05])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDE", "description": "Improve convergence speed by implementing a novel adaptive mechanism that adjusts both mutation factor and crossover rate based on individual performance, enhancing exploitation and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b33b077-96dd-4f75-a3be-8a1088f5c534", "metadata": {"aucs": [0.7143003511385457, 0.7562730892984079, 0.7740139461397358, 0.7387769017464823, 0.8074599185069729, 0.7963801853086225, 0.7899709069445089, 0.8227344335503645, 0.761792377208971, 0.6122602080296407, 0.6990261162763673, 0.6052808097611304, 0.5656125222722619, 0.6578493802473013, 0.6152176223448537, 0.5848219941149337, 0.6687872396784984, 0.6379351685486361, 0.5428851514987489, 0.44740032952944075, 0.557077700589234, 0.5137903791126341, 0.1617056115244515, 0.6014037371234537, 0.5355251853027522, 0.5186078958253768, 0.5263087373514362, 0.1560929455313873, 0.1559965866988119, 0.16843275823767578, 0.42508769998443385, 0.16846681160007793, 0.14715926478740837, 0.41982326884932186, 0.35249145671675186, 0.5023338973039653, 0.9516140306992714, 0.9822306064381318, 0.9684606284242191, 0.9605742630905382, 0.9738476029863888, 0.9352257517175134, 0.9564951090180804, 0.971871812615776, 0.9512193169383539, 0.1897138177643063, 0.3300783958346607, 0.29287645035197507, 0.2310049392448097, 0.42754823982960244, 0.2528783969798788, 0.17700540077116134, 0.2636481004199468, 0.22567006369830833, 0.25089493374404215, 0.26726502977157474, 0.22866540466201557, 0.17986854650831463, 0.27629958179519576, 0.2661491869477658, 0.19384275974159204, 0.6324151873586256, 0.20125070069662854, 0.1499256822964239, 0.113102166476302, 0.14494889703479497, 0.16101367771949604, 0.1203039939230639, 0.15068703065522804, 0.12412492648519002, 0.254980996627274, 0.16516071350000017, 0.08068880311106608, 0.1314213552783462, 0.17079275452859433, 0.1425079280203363, 0.2895440066151287, 0.14942905603542422, 0.14263755561809688, 0.1353991513421925, 0.13467950846538757, 9.999999999998899e-05, 0.00875277521956741, 9.999999999998899e-05, 9.999999999998899e-05, 0.04993105334943504, 9.999999999998899e-05, 9.999999999998899e-05, 0.06708036498377279, 0.006550289753859739, 0.052432176081366966, 0.11000743874937269, 0.1090229401057301, 0.09559532898121725, 0.08336391519063147, 0.08627772124167932, 0.09093294192717183, 0.1857561415647463, 0.08562343253902749, 0.0006302977696551748, 0.08720436335218351, 0.002695330240948035, 9.999999999998899e-05, 0.0487372289777821, 0.015443032343226304, 0.02769057264400432, 0.08212321581569326, 0.004730610735692586, 0.06709546208399553, 0.13868686838687028, 0.03947743816969307, 0.10013673919308386, 0.14738019653045753, 0.11236069971527118, 0.08083522801326903, 0.11950329338272236, 0.09733817646780352, 0.42863917320054334, 0.4900297551489319, 0.43787266420322135, 0.4478408979624764, 0.5052217900604777, 0.46376680683167193, 0.4325179848866495, 0.5206617050361739, 0.4532363666358973, 0.0908218540950333, 0.11957794552944456, 0.08630320301666872, 0.07068517990415435, 0.09532273034806571, 0.09222019844029872, 0.09352157715662102, 0.09221173022557538, 0.09669782102891533, 0.13436270274288742, 0.1329141827338599, 0.15571393339674056, 0.13578210284022585, 0.26242667093364136, 0.1343962220682906, 0.1351012385841135, 0.17407785447104174, 0.13055820245528682, 0.23467529931880082, 0.2798688779538099, 0.2295479238568492, 0.21630856737006765, 0.3031326061561648, 0.29980461529264846, 0.25413374060336713, 0.31939095996365297, 0.23102564403549508, 0.169340642888701, 0.2347941960126696, 0.13299033885390565, 0.13940945788290138, 0.1622815414587112, 0.18248575347589702, 0.1466352570266094, 0.22925278531368354, 0.16858140176879388, 0.17866275297502432, 0.1773902315378546, 0.18647994648920518, 0.19379217245601177, 0.15947522138981507, 0.16542055081156437, 0.18254691656425737, 0.20272830444310452, 0.18693046614735265, 0.3085934245317503, 0.19162320920963083, 0.1981541460926285, 0.1943177437728466, 0.2522550320755015, 0.22897218863322888, 0.20017636925800175, 0.44521783411527527, 0.2829418953065308, 0.18026047422300484, 0.1688480170176888, 0.2954364962319552, 0.2303457584348514, 0.1812594840172035, 0.410824526483516, 0.27294750267162793, 0.5713034420853833, 0.316429473902351, 0.16674154203031544, 0.46352130398805413, 0.15302620235849518, 0.1432524274771385, 0.46446279497887133, 0.3145369107102999, 0.18992918570648132, 0.6246696478026461, 0.19728147099919457, 0.16460656479725855, 0.1914965929539174, 0.1856928288211378, 0.16644279236080695, 0.18847818652707315, 0.18691705587990215, 0.16227223434399207, 0.18740208041800965, 0.18108469342584, 0.07534035414038609, 0.05506376521027778, 0.05998840379254211, 0.06120516621482819, 0.06355045457437558, 0.07462056289006136, 0.07004144924522193, 0.062263430616923854, 0.06184058899838896]}, "mutation_prompt": null}
{"id": "1db2abdf-d017-4ef3-a34f-23721a1f7228", "solution": "import numpy as np\n\nclass FastDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 0.5, (self.population_size, 2))  # Adjusting mutation and crossover rate ranges\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.adaptive_factors[i, 0] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.adaptive_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.05, 0.025]) if np.all(self.adaptive_factors[i] < 0.5) else np.array([-0.05, -0.025])  # Adjusting adaptive factor changes for faster convergence\n        \n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "FastDynamicMutDE", "description": "Enhance convergence speed by incorporating a novel adaptive mechanism that dynamically adjusts mutation and crossover rates based on population diversity, fostering faster exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": 0.26695625432583653, "feedback": "The algorithm FastDynamicMutDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "9b33b077-96dd-4f75-a3be-8a1088f5c534", "metadata": {"aucs": [0.8082039846655786, 0.8654140440898501, 0.8353426410514904, 0.7838589953743134, 0.8586197539452052, 0.8219986891373056, 0.805357594008212, 0.8662830420359597, 0.8372479742732446, 0.639100322024996, 0.7732594742214527, 0.697537167738407, 0.6355447273494774, 0.7660219467170772, 0.7259404785470507, 0.6922402017932741, 0.7696752956693573, 0.7012504611402934, 0.6316555859342157, 0.17944309365166533, 0.14663222000727494, 0.17832661952130313, 0.6655694434874648, 0.6575218352509531, 0.622462581095873, 0.21777577337415432, 0.5947906488562158, 0.13670283191356536, 0.13872622235074994, 0.17182250963832535, 0.17111993722799723, 0.16872246165292304, 0.1633806269772098, 0.16429931021675015, 0.15370523846485062, 0.14168689317924144, 0.9284542774460764, 0.9583512372145874, 0.9669507802158912, 0.9326387952801196, 0.9514342947805645, 0.9163071783422001, 0.9348256620180445, 0.9353499392888827, 0.9225972356665636, 0.21312401554630456, 0.3981630876721811, 0.23555413242531464, 0.2631282594201876, 0.4286201391318829, 0.256142558395424, 0.2102675635612904, 0.22690727204163064, 0.26497755431277015, 0.18544483088826447, 0.19817395451167585, 0.20922143528065618, 0.27198443208198375, 0.20339322953176875, 0.28682571727670125, 0.1996376033026669, 0.215813029459341, 0.1508679904855329, 0.17346600276214963, 0.18135310289710038, 0.11895963630369244, 0.12270964656831107, 0.16060589394441505, 0.15368084779780788, 0.21146090947480156, 0.1690862852250299, 0.16549575054439014, 0.12199891740243762, 0.1592871254645759, 0.13642337059926035, 0.15236802408675865, 0.21077121311339497, 0.1725324067409152, 0.12051444763412777, 0.14952031320391668, 0.10835556451784323, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026973732126541528, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06951750402222245, 0.09223587880823492, 0.10989828357640619, 0.06574058619306322, 0.02839924624390877, 0.03893537474040076, 0.057096756393928305, 0.09841094302222209, 0.06487235499143662, 0.016320476604175016, 0.026343574663676206, 9.999999999998899e-05, 0.002627938842770905, 0.09166104567477451, 0.07112664216709619, 0.04358946467639413, 0.09955319919409145, 0.02824861055880301, 0.10610404991376232, 0.1157718736473522, 0.09441404335853731, 0.06632391756192568, 0.10196578900574749, 0.11122373231653038, 0.09622458081623286, 0.11190081605139235, 0.10752893372858485, 0.45242780010760986, 0.4921102630656746, 0.45235511902009506, 0.4326535468669588, 0.5001509804847112, 0.4890461630915136, 0.4781329260988958, 0.49412013204171057, 0.44593550973078644, 0.08403097845330232, 0.08923715208816463, 0.08328678906174258, 0.09005995251867238, 0.08023433780373435, 0.08035394194871481, 0.10907679219029454, 0.10391549216971796, 0.09111263192815766, 0.1585641518498786, 0.13986771173728252, 0.11764123563288154, 0.1960384283028075, 0.14930754042330863, 0.1401823564214586, 0.13407462622142685, 0.15738281165483115, 0.1115410125240418, 0.22326959167856553, 0.2894004163754933, 0.21485146618259843, 0.21845458813658947, 0.24475551594775813, 0.25363647971407166, 0.25025697792483437, 0.29715267322980665, 0.2448848995954772, 0.14249390447774735, 0.20704722865853087, 0.15861110694959757, 0.18110743534016305, 0.2148367699254492, 0.2044707382308658, 0.14979170258189656, 0.18247751411211122, 0.16699913888010265, 0.18727113410039065, 0.18499666645070134, 0.19895800694823773, 0.18333539223658646, 0.17869173753948653, 0.18189709941975907, 0.20019074094081268, 0.18668155697043487, 0.18230723047941833, 0.21059452138351664, 0.20493545345801156, 0.2149470602641319, 0.2221480289432456, 0.21591759513950615, 0.236069853364257, 0.21136138959594575, 0.2396501018202033, 0.2338157446744028, 0.15577147924909351, 0.24350911735414116, 0.16323613058203246, 0.5142954628962285, 0.17680790286405212, 0.42042821392093743, 0.2314319372515271, 0.5472509994707202, 0.2879828123627869, 0.21856221836433387, 0.20572228164340844, 0.22866292063842086, 0.1998997545908009, 0.22595306209206034, 0.19752620121930953, 0.22814671172687306, 0.34939756347309125, 0.1849461891934121, 0.1668831500247152, 0.1981578406452429, 0.1905438967261347, 0.17496034490117474, 0.167195299914902, 0.1792481730141533, 0.16131379847322802, 0.17109211155130832, 0.1675704530799862, 0.06926863971378627, 0.06703771152983629, 0.07935701185874222, 0.07323070172725454, 0.0649040163606287, 0.08183082285373144, 0.06906229014003329, 0.06329423368091136, 0.08206599483968435]}, "mutation_prompt": null}
{"id": "449feb62-59a3-4522-8e5c-067c998fe062", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.adaptive_factors[i, 0] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.adaptive_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.1, 0.05]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.1, -0.05])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDE", "description": "Improve convergence speed by implementing a novel adaptive mechanism that adjusts both mutation factor and crossover rate based on individual performance, enhancing exploitation and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b33b077-96dd-4f75-a3be-8a1088f5c534", "metadata": {"aucs": [0.7143003511385457, 0.7562730892984079, 0.7740139461397358, 0.7387769017464823, 0.8074599185069729, 0.7963801853086225, 0.7899709069445089, 0.8227344335503645, 0.761792377208971, 0.6122602080296407, 0.6990261162763673, 0.6052808097611304, 0.5656125222722619, 0.6578493802473013, 0.6152176223448537, 0.5848219941149337, 0.6687872396784984, 0.6379351685486361, 0.5428851514987489, 0.44740032952944075, 0.557077700589234, 0.5137903791126341, 0.1617056115244515, 0.6014037371234537, 0.5355251853027522, 0.5186078958253768, 0.5263087373514362, 0.1560929455313873, 0.1559965866988119, 0.16843275823767578, 0.42508769998443385, 0.16846681160007793, 0.14715926478740837, 0.41982326884932186, 0.35249145671675186, 0.5023338973039653, 0.9516140306992714, 0.9822306064381318, 0.9684606284242191, 0.9605742630905382, 0.9738476029863888, 0.9352257517175134, 0.9564951090180804, 0.971871812615776, 0.9512193169383539, 0.1897138177643063, 0.3300783958346607, 0.29287645035197507, 0.2310049392448097, 0.42754823982960244, 0.2528783969798788, 0.17700540077116134, 0.2636481004199468, 0.22567006369830833, 0.25089493374404215, 0.26726502977157474, 0.22866540466201557, 0.17986854650831463, 0.27629958179519576, 0.2661491869477658, 0.19384275974159204, 0.6324151873586256, 0.20125070069662854, 0.1499256822964239, 0.113102166476302, 0.14494889703479497, 0.16101367771949604, 0.1203039939230639, 0.15068703065522804, 0.12412492648519002, 0.254980996627274, 0.16516071350000017, 0.08068880311106608, 0.1314213552783462, 0.17079275452859433, 0.1425079280203363, 0.2895440066151287, 0.14942905603542422, 0.14263755561809688, 0.1353991513421925, 0.13467950846538757, 9.999999999998899e-05, 0.00875277521956741, 9.999999999998899e-05, 9.999999999998899e-05, 0.04993105334943504, 9.999999999998899e-05, 9.999999999998899e-05, 0.06708036498377279, 0.006550289753859739, 0.052432176081366966, 0.11000743874937269, 0.1090229401057301, 0.09559532898121725, 0.08336391519063147, 0.08627772124167932, 0.09093294192717183, 0.1857561415647463, 0.08562343253902749, 0.0006302977696551748, 0.08720436335218351, 0.002695330240948035, 9.999999999998899e-05, 0.0487372289777821, 0.015443032343226304, 0.02769057264400432, 0.08212321581569326, 0.004730610735692586, 0.06709546208399553, 0.13868686838687028, 0.03947743816969307, 0.10013673919308386, 0.14738019653045753, 0.11236069971527118, 0.08083522801326903, 0.11950329338272236, 0.09733817646780352, 0.42863917320054334, 0.4900297551489319, 0.43787266420322135, 0.4478408979624764, 0.5052217900604777, 0.46376680683167193, 0.4325179848866495, 0.5206617050361739, 0.4532363666358973, 0.0908218540950333, 0.11957794552944456, 0.08630320301666872, 0.07068517990415435, 0.09532273034806571, 0.09222019844029872, 0.09352157715662102, 0.09221173022557538, 0.09669782102891533, 0.13436270274288742, 0.1329141827338599, 0.15571393339674056, 0.13578210284022585, 0.26242667093364136, 0.1343962220682906, 0.1351012385841135, 0.17407785447104174, 0.13055820245528682, 0.23467529931880082, 0.2798688779538099, 0.2295479238568492, 0.21630856737006765, 0.3031326061561648, 0.29980461529264846, 0.25413374060336713, 0.31939095996365297, 0.23102564403549508, 0.169340642888701, 0.2347941960126696, 0.13299033885390565, 0.13940945788290138, 0.1622815414587112, 0.18248575347589702, 0.1466352570266094, 0.22925278531368354, 0.16858140176879388, 0.17866275297502432, 0.1773902315378546, 0.18647994648920518, 0.19379217245601177, 0.15947522138981507, 0.16542055081156437, 0.18254691656425737, 0.20272830444310452, 0.18693046614735265, 0.3085934245317503, 0.19162320920963083, 0.1981541460926285, 0.1943177437728466, 0.2522550320755015, 0.22897218863322888, 0.20017636925800175, 0.44521783411527527, 0.2829418953065308, 0.18026047422300484, 0.1688480170176888, 0.2954364962319552, 0.2303457584348514, 0.1812594840172035, 0.410824526483516, 0.27294750267162793, 0.5713034420853833, 0.316429473902351, 0.16674154203031544, 0.46352130398805413, 0.15302620235849518, 0.1432524274771385, 0.46446279497887133, 0.3145369107102999, 0.18992918570648132, 0.6246696478026461, 0.19728147099919457, 0.16460656479725855, 0.1914965929539174, 0.1856928288211378, 0.16644279236080695, 0.18847818652707315, 0.18691705587990215, 0.16227223434399207, 0.18740208041800965, 0.18108469342584, 0.07534035414038609, 0.05506376521027778, 0.05998840379254211, 0.06120516621482819, 0.06355045457437558, 0.07462056289006136, 0.07004144924522193, 0.062263430616923854, 0.06184058899838896]}, "mutation_prompt": null}
{"id": "0cb4eec4-68ca-4c19-84ec-ff3119a1fea4", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.adaptive_factors[i, 0] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.adaptive_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.1, 0.05]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.1, -0.05])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDE", "description": "Improve convergence speed by implementing a novel adaptive mechanism that adjusts both mutation factor and crossover rate based on individual performance, enhancing exploitation and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b33b077-96dd-4f75-a3be-8a1088f5c534", "metadata": {"aucs": [0.7143003511385457, 0.7562730892984079, 0.7740139461397358, 0.7387769017464823, 0.8074599185069729, 0.7963801853086225, 0.7899709069445089, 0.8227344335503645, 0.761792377208971, 0.6122602080296407, 0.6990261162763673, 0.6052808097611304, 0.5656125222722619, 0.6578493802473013, 0.6152176223448537, 0.5848219941149337, 0.6687872396784984, 0.6379351685486361, 0.5428851514987489, 0.44740032952944075, 0.557077700589234, 0.5137903791126341, 0.1617056115244515, 0.6014037371234537, 0.5355251853027522, 0.5186078958253768, 0.5263087373514362, 0.1560929455313873, 0.1559965866988119, 0.16843275823767578, 0.42508769998443385, 0.16846681160007793, 0.14715926478740837, 0.41982326884932186, 0.35249145671675186, 0.5023338973039653, 0.9516140306992714, 0.9822306064381318, 0.9684606284242191, 0.9605742630905382, 0.9738476029863888, 0.9352257517175134, 0.9564951090180804, 0.971871812615776, 0.9512193169383539, 0.1897138177643063, 0.3300783958346607, 0.29287645035197507, 0.2310049392448097, 0.42754823982960244, 0.2528783969798788, 0.17700540077116134, 0.2636481004199468, 0.22567006369830833, 0.25089493374404215, 0.26726502977157474, 0.22866540466201557, 0.17986854650831463, 0.27629958179519576, 0.2661491869477658, 0.19384275974159204, 0.6324151873586256, 0.20125070069662854, 0.1499256822964239, 0.113102166476302, 0.14494889703479497, 0.16101367771949604, 0.1203039939230639, 0.15068703065522804, 0.12412492648519002, 0.254980996627274, 0.16516071350000017, 0.08068880311106608, 0.1314213552783462, 0.17079275452859433, 0.1425079280203363, 0.2895440066151287, 0.14942905603542422, 0.14263755561809688, 0.1353991513421925, 0.13467950846538757, 9.999999999998899e-05, 0.00875277521956741, 9.999999999998899e-05, 9.999999999998899e-05, 0.04993105334943504, 9.999999999998899e-05, 9.999999999998899e-05, 0.06708036498377279, 0.006550289753859739, 0.052432176081366966, 0.11000743874937269, 0.1090229401057301, 0.09559532898121725, 0.08336391519063147, 0.08627772124167932, 0.09093294192717183, 0.1857561415647463, 0.08562343253902749, 0.0006302977696551748, 0.08720436335218351, 0.002695330240948035, 9.999999999998899e-05, 0.0487372289777821, 0.015443032343226304, 0.02769057264400432, 0.08212321581569326, 0.004730610735692586, 0.06709546208399553, 0.13868686838687028, 0.03947743816969307, 0.10013673919308386, 0.14738019653045753, 0.11236069971527118, 0.08083522801326903, 0.11950329338272236, 0.09733817646780352, 0.42863917320054334, 0.4900297551489319, 0.43787266420322135, 0.4478408979624764, 0.5052217900604777, 0.46376680683167193, 0.4325179848866495, 0.5206617050361739, 0.4532363666358973, 0.0908218540950333, 0.11957794552944456, 0.08630320301666872, 0.07068517990415435, 0.09532273034806571, 0.09222019844029872, 0.09352157715662102, 0.09221173022557538, 0.09669782102891533, 0.13436270274288742, 0.1329141827338599, 0.15571393339674056, 0.13578210284022585, 0.26242667093364136, 0.1343962220682906, 0.1351012385841135, 0.17407785447104174, 0.13055820245528682, 0.23467529931880082, 0.2798688779538099, 0.2295479238568492, 0.21630856737006765, 0.3031326061561648, 0.29980461529264846, 0.25413374060336713, 0.31939095996365297, 0.23102564403549508, 0.169340642888701, 0.2347941960126696, 0.13299033885390565, 0.13940945788290138, 0.1622815414587112, 0.18248575347589702, 0.1466352570266094, 0.22925278531368354, 0.16858140176879388, 0.17866275297502432, 0.1773902315378546, 0.18647994648920518, 0.19379217245601177, 0.15947522138981507, 0.16542055081156437, 0.18254691656425737, 0.20272830444310452, 0.18693046614735265, 0.3085934245317503, 0.19162320920963083, 0.1981541460926285, 0.1943177437728466, 0.2522550320755015, 0.22897218863322888, 0.20017636925800175, 0.44521783411527527, 0.2829418953065308, 0.18026047422300484, 0.1688480170176888, 0.2954364962319552, 0.2303457584348514, 0.1812594840172035, 0.410824526483516, 0.27294750267162793, 0.5713034420853833, 0.316429473902351, 0.16674154203031544, 0.46352130398805413, 0.15302620235849518, 0.1432524274771385, 0.46446279497887133, 0.3145369107102999, 0.18992918570648132, 0.6246696478026461, 0.19728147099919457, 0.16460656479725855, 0.1914965929539174, 0.1856928288211378, 0.16644279236080695, 0.18847818652707315, 0.18691705587990215, 0.16227223434399207, 0.18740208041800965, 0.18108469342584, 0.07534035414038609, 0.05506376521027778, 0.05998840379254211, 0.06120516621482819, 0.06355045457437558, 0.07462056289006136, 0.07004144924522193, 0.062263430616923854, 0.06184058899838896]}, "mutation_prompt": null}
{"id": "2b281ce3-bb9c-4189-aa4b-cc05fb9373b1", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEChaotic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def chaotic_mutation(self, individual, chaos_intensity=0.1):\n        chaotic_vector = np.random.uniform(-chaos_intensity, chaos_intensity, size=self.dim)\n        return individual + chaotic_vector\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.chaotic_mutation(self.population[a]) + self.adaptive_factors[i, 0] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.adaptive_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.1, 0.05]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.1, -0.05])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEChaotic", "description": "Utilize a chaotic optimization strategy to enhance the exploration capabilities of the algorithm, leading to faster convergence by introducing chaotic mutation vectors.", "configspace": "", "generation": 56, "fitness": 0.21820565229287617, "feedback": "The algorithm EnhancedDynamicMutDEChaotic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "9b33b077-96dd-4f75-a3be-8a1088f5c534", "metadata": {"aucs": [0.5396037483440155, 0.5444592262902526, 0.5401963647195365, 0.5013104756244324, 0.5443175878164075, 0.5221020005710141, 0.5216750936324273, 0.5237448816162215, 0.5540120063424427, 0.15009481849332118, 0.11381128107660965, 0.1912851769716959, 0.18282788425641106, 0.12425153695237201, 0.2132685521353097, 0.15738650221567785, 0.13283927881297164, 0.21899295891235238, 0.20991239002329143, 0.18909518244841161, 0.22034722624835268, 0.23236609824646626, 0.13916563174627694, 0.1647648039265589, 0.17238435597258517, 0.24069273287421522, 0.2258320838193425, 0.17367492775686078, 0.14700013489341457, 0.1553499464438679, 0.1776093553372433, 0.13442092026012664, 0.1613643080175352, 0.17084766388496575, 0.1894473891272822, 0.1860978075477644, 0.9772873964686603, 0.9549987438621299, 0.9618700322228209, 0.9053568322285761, 0.956525242689458, 0.931826144166784, 0.9852479576379656, 0.9562600248823884, 0.9425950187683175, 0.2200319061475008, 0.2565848375847415, 0.262714399563169, 0.1631331461596568, 0.27271626909832725, 0.22619306892950464, 0.19820327559029816, 0.2775845384885841, 0.24582049187140087, 0.2804053523668384, 0.2373559772632874, 0.21812346068276678, 0.20245503979921353, 0.2680117945136221, 0.23819184168123597, 0.25895358732297247, 0.2841268116808844, 0.22877917485177224, 0.1253088838573192, 0.14241501228193776, 0.1774337319473156, 0.16698243384235834, 0.15856739006567333, 0.16191854491589586, 0.15818731841742395, 0.16313415566316603, 0.17260063531558711, 0.10209409924988977, 0.1064086265610158, 0.13561643644112775, 0.145228726966796, 0.21735498394311847, 0.14622881406455635, 0.12654483218588553, 0.14743839263159464, 0.15316766847497443, 9.999999999998899e-05, 0.0005564213137339014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006993351618638011, 9.999999999998899e-05, 0.0317760428398951, 0.00478885014037278, 0.025624228834394525, 0.055335548896388365, 0.08512795745150359, 0.060672496043156166, 0.09477844013789583, 0.06971629560724324, 0.10586668618319384, 0.09925502877276782, 0.10121664325324142, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013896303910793106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06285200373237221, 0.11302081663991825, 0.06940116042995925, 0.0477011160250177, 0.1001458453648516, 0.09472803951616793, 0.07689272144765968, 0.10397408711197009, 0.09371928655917294, 0.4263075419561694, 0.4239293353857574, 0.41669006111101614, 0.40026480161626876, 0.4242892128795359, 0.3774293752423209, 0.4249030075331549, 0.40005836630906455, 0.4190965834427228, 0.0653127584914115, 0.08318764348297458, 0.10230633485382112, 0.0781132955606848, 0.08473101116101811, 0.07628116619541747, 0.07308516169524504, 0.09515735998508812, 0.08445063539158837, 0.17114439841684947, 0.13996122480741435, 0.14338375897632982, 0.13104401514756137, 0.1303802465865601, 0.12133075759163525, 0.14329857079374564, 0.19248946367610387, 0.11369620702611116, 0.20655727765317355, 0.2505381304572585, 0.21895749536236175, 0.2306976500892064, 0.21324825438993789, 0.25177280446710615, 0.23299110522514788, 0.27616464225368875, 0.2502174673701434, 0.16128808310663212, 0.1731786721362627, 0.19279582438215714, 0.14462535204548166, 0.16895890682635673, 0.15643967368178624, 0.18960820481142981, 0.203486561772518, 0.1617424864575191, 0.17817324001072832, 0.16116063677733328, 0.18929277580885306, 0.17328033146063604, 0.2180487517328884, 0.16929451454823052, 0.16647235993661236, 0.19257395896753005, 0.176825166308756, 0.23944950720999303, 0.19065801238605107, 0.19109147355754075, 0.21067329883514518, 0.21471807461994885, 0.20627747790052664, 0.21819408727184375, 0.20499624236420355, 0.22841600630041436, 0.16690233746313043, 0.5617219291849743, 0.1841709794488392, 0.3825324035065101, 0.19328949197394352, 0.4584905376838395, 0.16401601616388817, 0.6129862344070743, 0.2704526045643382, 0.18321547867007026, 0.3574656591329717, 0.2926560559072836, 0.1390428717216704, 0.1769920321319205, 0.17639730504105433, 0.3233121760519664, 0.31658932277826923, 0.36652383187639215, 0.17234220954199864, 0.16865786711542186, 0.17166027874709544, 0.16902680206576093, 0.16548479699981777, 0.1833556957493634, 0.17701633198193434, 0.16830228382291423, 0.177162624688757, 0.06490003261367638, 0.0665512142645861, 0.07007010185981855, 0.06628816507910085, 0.06636201877782655, 0.061151162587102625, 0.0714183225092554, 0.06663041269111114, 0.07272841763947357]}, "mutation_prompt": null}
{"id": "cb5f4d22-4d7a-4733-a0ba-d8ec1bc8cd9f", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.adaptive_factors[i, 0] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.adaptive_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.1, 0.05]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.1, -0.05])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDE", "description": "Improve convergence speed by implementing a novel adaptive mechanism that adjusts both mutation factor and crossover rate based on individual performance, enhancing exploitation and exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b33b077-96dd-4f75-a3be-8a1088f5c534", "metadata": {"aucs": [0.7143003511385457, 0.7562730892984079, 0.7740139461397358, 0.7387769017464823, 0.8074599185069729, 0.7963801853086225, 0.7899709069445089, 0.8227344335503645, 0.761792377208971, 0.6122602080296407, 0.6990261162763673, 0.6052808097611304, 0.5656125222722619, 0.6578493802473013, 0.6152176223448537, 0.5848219941149337, 0.6687872396784984, 0.6379351685486361, 0.5428851514987489, 0.44740032952944075, 0.557077700589234, 0.5137903791126341, 0.1617056115244515, 0.6014037371234537, 0.5355251853027522, 0.5186078958253768, 0.5263087373514362, 0.1560929455313873, 0.1559965866988119, 0.16843275823767578, 0.42508769998443385, 0.16846681160007793, 0.14715926478740837, 0.41982326884932186, 0.35249145671675186, 0.5023338973039653, 0.9516140306992714, 0.9822306064381318, 0.9684606284242191, 0.9605742630905382, 0.9738476029863888, 0.9352257517175134, 0.9564951090180804, 0.971871812615776, 0.9512193169383539, 0.1897138177643063, 0.3300783958346607, 0.29287645035197507, 0.2310049392448097, 0.42754823982960244, 0.2528783969798788, 0.17700540077116134, 0.2636481004199468, 0.22567006369830833, 0.25089493374404215, 0.26726502977157474, 0.22866540466201557, 0.17986854650831463, 0.27629958179519576, 0.2661491869477658, 0.19384275974159204, 0.6324151873586256, 0.20125070069662854, 0.1499256822964239, 0.113102166476302, 0.14494889703479497, 0.16101367771949604, 0.1203039939230639, 0.15068703065522804, 0.12412492648519002, 0.254980996627274, 0.16516071350000017, 0.08068880311106608, 0.1314213552783462, 0.17079275452859433, 0.1425079280203363, 0.2895440066151287, 0.14942905603542422, 0.14263755561809688, 0.1353991513421925, 0.13467950846538757, 9.999999999998899e-05, 0.00875277521956741, 9.999999999998899e-05, 9.999999999998899e-05, 0.04993105334943504, 9.999999999998899e-05, 9.999999999998899e-05, 0.06708036498377279, 0.006550289753859739, 0.052432176081366966, 0.11000743874937269, 0.1090229401057301, 0.09559532898121725, 0.08336391519063147, 0.08627772124167932, 0.09093294192717183, 0.1857561415647463, 0.08562343253902749, 0.0006302977696551748, 0.08720436335218351, 0.002695330240948035, 9.999999999998899e-05, 0.0487372289777821, 0.015443032343226304, 0.02769057264400432, 0.08212321581569326, 0.004730610735692586, 0.06709546208399553, 0.13868686838687028, 0.03947743816969307, 0.10013673919308386, 0.14738019653045753, 0.11236069971527118, 0.08083522801326903, 0.11950329338272236, 0.09733817646780352, 0.42863917320054334, 0.4900297551489319, 0.43787266420322135, 0.4478408979624764, 0.5052217900604777, 0.46376680683167193, 0.4325179848866495, 0.5206617050361739, 0.4532363666358973, 0.0908218540950333, 0.11957794552944456, 0.08630320301666872, 0.07068517990415435, 0.09532273034806571, 0.09222019844029872, 0.09352157715662102, 0.09221173022557538, 0.09669782102891533, 0.13436270274288742, 0.1329141827338599, 0.15571393339674056, 0.13578210284022585, 0.26242667093364136, 0.1343962220682906, 0.1351012385841135, 0.17407785447104174, 0.13055820245528682, 0.23467529931880082, 0.2798688779538099, 0.2295479238568492, 0.21630856737006765, 0.3031326061561648, 0.29980461529264846, 0.25413374060336713, 0.31939095996365297, 0.23102564403549508, 0.169340642888701, 0.2347941960126696, 0.13299033885390565, 0.13940945788290138, 0.1622815414587112, 0.18248575347589702, 0.1466352570266094, 0.22925278531368354, 0.16858140176879388, 0.17866275297502432, 0.1773902315378546, 0.18647994648920518, 0.19379217245601177, 0.15947522138981507, 0.16542055081156437, 0.18254691656425737, 0.20272830444310452, 0.18693046614735265, 0.3085934245317503, 0.19162320920963083, 0.1981541460926285, 0.1943177437728466, 0.2522550320755015, 0.22897218863322888, 0.20017636925800175, 0.44521783411527527, 0.2829418953065308, 0.18026047422300484, 0.1688480170176888, 0.2954364962319552, 0.2303457584348514, 0.1812594840172035, 0.410824526483516, 0.27294750267162793, 0.5713034420853833, 0.316429473902351, 0.16674154203031544, 0.46352130398805413, 0.15302620235849518, 0.1432524274771385, 0.46446279497887133, 0.3145369107102999, 0.18992918570648132, 0.6246696478026461, 0.19728147099919457, 0.16460656479725855, 0.1914965929539174, 0.1856928288211378, 0.16644279236080695, 0.18847818652707315, 0.18691705587990215, 0.16227223434399207, 0.18740208041800965, 0.18108469342584, 0.07534035414038609, 0.05506376521027778, 0.05998840379254211, 0.06120516621482819, 0.06355045457437558, 0.07462056289006136, 0.07004144924522193, 0.062263430616923854, 0.06184058899838896]}, "mutation_prompt": null}
{"id": "65d114b5-1a6a-4d24-9cbb-d78a1d4235b5", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0], 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1], 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.2, 0.1]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.2, -0.1])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDE", "description": "Enhance convergence by introducing a dynamic mechanism that adaptively updates the mutation factor and crossover rate based on a dynamic range, promoting faster exploration and exploitation.", "configspace": "", "generation": 58, "fitness": 0.2810699688450395, "feedback": "The algorithm EnhancedDynamicMutDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "9b33b077-96dd-4f75-a3be-8a1088f5c534", "metadata": {"aucs": [0.783773689676867, 0.834916822405026, 0.8278834662184434, 0.18699549687139638, 0.8174001808907492, 0.8295575729656639, 0.8122696042342485, 0.8514808089839006, 0.839791392131545, 0.6010372953873715, 0.6792232273974228, 0.6724295544546529, 0.6500644279439765, 0.6982055593081653, 0.6884872409959291, 0.5630121892219575, 0.7069151580466502, 0.6727391647391239, 0.5455611542400872, 0.3267689499430344, 0.6072526619320593, 0.5675602741990575, 0.5073024362747949, 0.17467234598025916, 0.497958652420075, 0.16326749630456838, 0.49641488829359015, 0.16106138798527536, 0.5190696179522547, 0.5299679999512958, 0.14841500956164122, 0.4492137514803498, 0.14301807197873895, 0.1686297125761348, 0.16262542182707207, 0.16385971318460602, 0.9595510654209443, 0.9781152942992167, 0.9610549045502078, 0.9448724318044794, 0.9639128918648094, 0.9782973247563848, 0.9579627451001331, 0.9532480269574262, 0.9743325309484903, 0.19238960162362972, 0.4359690702613487, 0.3148374312693817, 0.2220283779636023, 0.44365282313045007, 0.3656106780160069, 0.2242747812968512, 0.37620763696470294, 0.08598284180130633, 0.19491821634467132, 0.493835792496613, 0.21665831682303083, 0.18723053869003292, 0.5076404098111233, 0.2897836611621919, 0.1958838031304907, 0.6897380392852488, 0.3394142360756749, 0.1583820934736312, 0.20957198017159595, 0.1467405025832832, 0.14441589002790245, 0.1219494241725364, 0.15804022533525153, 0.18630921567178182, 0.2607231824762093, 0.19918398278017335, 0.1431434384782866, 0.17435194529930154, 0.18156907170418268, 0.15256808613689843, 0.1709376943849784, 0.1886449917451829, 0.14601901512009952, 0.16235235784312063, 0.16005950091913257, 9.999999999998899e-05, 0.041119902296723576, 0.00033820449795951557, 9.999999999998899e-05, 0.074041021661169, 0.002776061667230323, 9.999999999998899e-05, 0.023662791823528817, 0.011266916607904576, 0.05819889940361678, 0.1607917184487131, 0.09557489123887153, 0.08592994245535013, 0.1552483382622586, 0.14317244943819862, 0.05421793007349185, 0.19240044982177307, 0.13683575179421548, 9.999999999998899e-05, 0.03352427488856591, 9.999999999998899e-05, 0.0025068697229495562, 0.013023054343950902, 0.0011228509089098448, 9.999999999998899e-05, 0.061142193342711426, 9.999999999998899e-05, 0.08958039147983277, 0.1492885746337197, 0.1290824370318958, 0.07927409358838466, 0.15710005955031558, 0.14351496992072132, 0.07729356272695509, 0.16781003554760077, 0.11025093945338926, 0.4475172349259172, 0.5410725626335304, 0.49697162543293183, 0.4548983489197992, 0.5414598010399538, 0.4912643076111357, 0.44135992905533616, 0.4981629668444262, 0.5094579763465921, 0.07712217841209945, 0.08257084001404313, 0.0647909357043005, 0.06238665953318323, 0.08579105400047249, 0.10038865249869255, 0.0873045737015975, 0.0976631172258774, 0.08748040893522468, 0.14362631193468256, 0.1383100941766563, 0.1296238513384893, 0.1222679571128561, 0.13252405158858094, 0.1476522334833109, 0.12071951400387604, 0.13135611293876448, 0.1546239144873407, 0.1978079793144475, 0.34458277865970033, 0.2532928902899274, 0.22768283092829356, 0.23923057510445123, 0.24375503598752846, 0.2778949086112945, 0.3443106481677304, 0.27080054347229887, 0.20569770116486308, 0.20444216779257673, 0.1809205386252224, 0.16078084858290187, 0.2155430391077865, 0.18418025662435877, 0.16080905694136927, 0.20286579199361743, 0.2555749555290525, 0.17031889777026066, 0.16596039191706857, 0.20494897927688094, 0.18536746980264585, 0.18348493751567274, 0.18565093306774716, 0.19006766372672845, 0.19755543575283208, 0.18784439337450454, 0.1792559498950873, 0.2185185161367582, 0.2239116785851608, 0.24490139446997305, 0.22055294956686566, 0.19413592678055813, 0.2112134681974026, 0.4774152832634635, 0.1999871926488641, 0.17333451622996165, 0.7009022293523297, 0.16141096263612775, 0.16463503326507467, 0.18504775511279026, 0.37525306972696837, 0.21036378800885558, 0.16875589315221518, 0.73213187143895, 0.151506002154555, 0.44386798571238983, 0.22247509365816565, 0.1711089206610834, 0.24474516188191509, 0.37060146129993543, 0.20640839258981436, 0.14175743254425544, 0.25591454678323855, 0.1726855450343341, 0.17432154851761028, 0.1808054270454128, 0.18196542846059782, 0.17253518430675907, 0.17046890162417416, 0.17614197351065575, 0.18740372432075625, 0.17312117686049078, 0.07751401699892035, 0.07203353713231686, 0.0641785495033198, 0.05989056123270187, 0.0648940927298205, 0.0844429683611454, 0.06531874266264026, 0.07162007519239888, 0.06996243351939535]}, "mutation_prompt": null}
{"id": "e7061f20-1393-4aa3-8388-b919155dbd3f", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0], 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1], 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.2, 0.1]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.2, -0.1])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDE", "description": "Enhance convergence by introducing a dynamic mechanism that adaptively updates the mutation factor and crossover rate based on a dynamic range, promoting faster exploration and exploitation.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65d114b5-1a6a-4d24-9cbb-d78a1d4235b5", "metadata": {"aucs": [0.783773689676867, 0.834916822405026, 0.8278834662184434, 0.18699549687139638, 0.8174001808907492, 0.8295575729656639, 0.8122696042342485, 0.8514808089839006, 0.839791392131545, 0.6010372953873715, 0.6792232273974228, 0.6724295544546529, 0.6500644279439765, 0.6982055593081653, 0.6884872409959291, 0.5630121892219575, 0.7069151580466502, 0.6727391647391239, 0.5455611542400872, 0.3267689499430344, 0.6072526619320593, 0.5675602741990575, 0.5073024362747949, 0.17467234598025916, 0.497958652420075, 0.16326749630456838, 0.49641488829359015, 0.16106138798527536, 0.5190696179522547, 0.5299679999512958, 0.14841500956164122, 0.4492137514803498, 0.14301807197873895, 0.1686297125761348, 0.16262542182707207, 0.16385971318460602, 0.9595510654209443, 0.9781152942992167, 0.9610549045502078, 0.9448724318044794, 0.9639128918648094, 0.9782973247563848, 0.9579627451001331, 0.9532480269574262, 0.9743325309484903, 0.19238960162362972, 0.4359690702613487, 0.3148374312693817, 0.2220283779636023, 0.44365282313045007, 0.3656106780160069, 0.2242747812968512, 0.37620763696470294, 0.08598284180130633, 0.19491821634467132, 0.493835792496613, 0.21665831682303083, 0.18723053869003292, 0.5076404098111233, 0.2897836611621919, 0.1958838031304907, 0.6897380392852488, 0.3394142360756749, 0.1583820934736312, 0.20957198017159595, 0.1467405025832832, 0.14441589002790245, 0.1219494241725364, 0.15804022533525153, 0.18630921567178182, 0.2607231824762093, 0.19918398278017335, 0.1431434384782866, 0.17435194529930154, 0.18156907170418268, 0.15256808613689843, 0.1709376943849784, 0.1886449917451829, 0.14601901512009952, 0.16235235784312063, 0.16005950091913257, 9.999999999998899e-05, 0.041119902296723576, 0.00033820449795951557, 9.999999999998899e-05, 0.074041021661169, 0.002776061667230323, 9.999999999998899e-05, 0.023662791823528817, 0.011266916607904576, 0.05819889940361678, 0.1607917184487131, 0.09557489123887153, 0.08592994245535013, 0.1552483382622586, 0.14317244943819862, 0.05421793007349185, 0.19240044982177307, 0.13683575179421548, 9.999999999998899e-05, 0.03352427488856591, 9.999999999998899e-05, 0.0025068697229495562, 0.013023054343950902, 0.0011228509089098448, 9.999999999998899e-05, 0.061142193342711426, 9.999999999998899e-05, 0.08958039147983277, 0.1492885746337197, 0.1290824370318958, 0.07927409358838466, 0.15710005955031558, 0.14351496992072132, 0.07729356272695509, 0.16781003554760077, 0.11025093945338926, 0.4475172349259172, 0.5410725626335304, 0.49697162543293183, 0.4548983489197992, 0.5414598010399538, 0.4912643076111357, 0.44135992905533616, 0.4981629668444262, 0.5094579763465921, 0.07712217841209945, 0.08257084001404313, 0.0647909357043005, 0.06238665953318323, 0.08579105400047249, 0.10038865249869255, 0.0873045737015975, 0.0976631172258774, 0.08748040893522468, 0.14362631193468256, 0.1383100941766563, 0.1296238513384893, 0.1222679571128561, 0.13252405158858094, 0.1476522334833109, 0.12071951400387604, 0.13135611293876448, 0.1546239144873407, 0.1978079793144475, 0.34458277865970033, 0.2532928902899274, 0.22768283092829356, 0.23923057510445123, 0.24375503598752846, 0.2778949086112945, 0.3443106481677304, 0.27080054347229887, 0.20569770116486308, 0.20444216779257673, 0.1809205386252224, 0.16078084858290187, 0.2155430391077865, 0.18418025662435877, 0.16080905694136927, 0.20286579199361743, 0.2555749555290525, 0.17031889777026066, 0.16596039191706857, 0.20494897927688094, 0.18536746980264585, 0.18348493751567274, 0.18565093306774716, 0.19006766372672845, 0.19755543575283208, 0.18784439337450454, 0.1792559498950873, 0.2185185161367582, 0.2239116785851608, 0.24490139446997305, 0.22055294956686566, 0.19413592678055813, 0.2112134681974026, 0.4774152832634635, 0.1999871926488641, 0.17333451622996165, 0.7009022293523297, 0.16141096263612775, 0.16463503326507467, 0.18504775511279026, 0.37525306972696837, 0.21036378800885558, 0.16875589315221518, 0.73213187143895, 0.151506002154555, 0.44386798571238983, 0.22247509365816565, 0.1711089206610834, 0.24474516188191509, 0.37060146129993543, 0.20640839258981436, 0.14175743254425544, 0.25591454678323855, 0.1726855450343341, 0.17432154851761028, 0.1808054270454128, 0.18196542846059782, 0.17253518430675907, 0.17046890162417416, 0.17614197351065575, 0.18740372432075625, 0.17312117686049078, 0.07751401699892035, 0.07203353713231686, 0.0641785495033198, 0.05989056123270187, 0.0648940927298205, 0.0844429683611454, 0.06531874266264026, 0.07162007519239888, 0.06996243351939535]}, "mutation_prompt": null}
{"id": "02c08471-52af-4eb7-9345-733071c83d13", "solution": "import numpy as np\n\nclass ImprovedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n        self.global_best = None\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0], 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1], 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.2, 0.1]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.2, -0.1])\n\n                if self.global_best is None or func(trial) < func(self.global_best):\n                    self.global_best = trial\n                    self.adaptive_factors[i] += np.array([0.1, 0.05]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.1, -0.05])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "ImprovedDynamicMutDE", "description": "Enhance convergence speed by introducing a dynamic mechanism that adaptively updates the mutation factor and crossover rate based on both individual and global best solutions, promoting faster exploration and exploitation.", "configspace": "", "generation": 60, "fitness": 0.20573495100891057, "feedback": "The algorithm ImprovedDynamicMutDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "65d114b5-1a6a-4d24-9cbb-d78a1d4235b5", "metadata": {"aucs": [0.6086335724394075, 0.6510697950877252, 0.6674772974264032, 0.599254194210551, 0.6574978538411334, 0.6609002520243753, 0.6024434766898531, 0.7111512805640109, 0.65320134633437, 0.274357101890491, 0.41165956260214276, 0.2910681596720315, 0.28079487035283524, 0.3428305345707032, 0.4076009048881455, 0.26439938989175604, 0.0533855101332088, 0.3830083788567006, 0.19203658538212987, 0.1353574011336527, 0.1137692819100794, 0.2139475278571532, 0.20434205812086914, 0.2802136836406063, 0.20971590195806933, 0.16001727166201563, 0.16957340678902566, 0.1856893732106557, 0.1887503855131506, 0.16777768703776674, 0.14210070283386234, 0.11248985892620078, 0.1289163347616764, 0.10415277203819007, 0.13495626954957518, 0.12977329979813024, 0.9099873201980367, 0.9652073655027906, 0.9055011092269173, 0.9057977696384317, 0.9092213040921104, 0.9396176830086226, 0.9173711991541132, 0.9388172456659771, 0.944333308424165, 0.14166775158059608, 0.20413701712112398, 0.16061099594750028, 0.1433638713157419, 0.2455089763269327, 0.25893187461434186, 0.16419263849867516, 0.23547807022088219, 0.17274949242271487, 0.1832740770728658, 0.23715281333632388, 0.1949165929902139, 0.15740134207759948, 0.2542852506099028, 0.21898172473584365, 0.1376686147366818, 0.19879627406563516, 0.1930560124098003, 0.0718952113218575, 0.10891708738622996, 0.14401546287746603, 0.1352958663367626, 0.0759168034357548, 0.12731041264381548, 0.15404342895402756, 0.12456012161750063, 0.13694731096859836, 0.14044899811424383, 0.11908550335468804, 0.12770813219749888, 0.11724211819853403, 0.13343123827015424, 0.10507003295183825, 0.10413622067023953, 0.10056503825588281, 0.11834976572288747, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012507058364730761, 0.01808394620397813, 0.06458337050502383, 0.05932713949116619, 0.05393422282989746, 0.07617693485085397, 0.04757621215794683, 0.04857251142250274, 0.09601810304757896, 0.10280020178940885, 9.999999999998899e-05, 0.018063114013904702, 9.999999999998899e-05, 9.999999999998899e-05, 0.008282668304018248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038497026267058088, 0.055008439484680594, 0.0743834070170778, 0.0629541906589256, 0.05004598200101662, 0.12291722232968205, 0.0817337756884734, 0.0669145503353431, 0.0838821575479689, 0.054690668446778945, 0.3895200568951138, 0.4248367838434437, 0.39289821240345757, 0.3663436846848015, 0.4645605223501833, 0.37433293379118415, 0.3959392854957242, 0.3837477706855612, 0.41520563890687934, 0.0702155690301901, 0.06442609694461243, 0.06729163665820037, 0.064861364142353, 0.06686569921942898, 0.07367630252370327, 0.06604591545710647, 0.08782361990659615, 0.0715393998235222, 0.12564363590473093, 0.1793687199248114, 0.11616031721771469, 0.12774913855692904, 0.22994913545106888, 0.11617479382834939, 0.14110233785666293, 0.10731757328312419, 0.14842117873470306, 0.18501503909210593, 0.26950651023750793, 0.191496170500986, 0.19882985427643174, 0.20257981051721052, 0.18373887561727542, 0.180502461224324, 0.23029714619837227, 0.21672491013776407, 0.09513441818911961, 0.17234201419228723, 0.13929553543470996, 0.11361661478667517, 0.1430488133189488, 0.14654354368353817, 0.11857275230149822, 0.15686828301933053, 0.13050449683769727, 0.1755559444549677, 0.1614286136825409, 0.1718287338031309, 0.15382555491747496, 0.16297350476473826, 0.16807002330374343, 0.20145386352905503, 0.16658898818546497, 0.16396514825699837, 0.1842630467358385, 0.17382263412191046, 0.16473206048049305, 0.17731366969201667, 0.18683623426504414, 0.1959239354961414, 0.2003131642208198, 0.1935461612783529, 0.18388944392405027, 0.14340671363863045, 0.23259805955948198, 0.2773605999159342, 0.19688205197513542, 0.17301940715921849, 0.1835975369642744, 0.27160274383697947, 0.15857956534285167, 0.2513450116890271, 0.11204129022982234, 0.43470445736885155, 0.18493816904162452, 0.1400312108223034, 0.19101306321271727, 0.16764202776633863, 0.18231860619790763, 0.3541860497904963, 0.14090262690485467, 0.17307334180415024, 0.1639593690005744, 0.17327000313630903, 0.16910486337234965, 0.172857936400708, 0.1647879998381344, 0.1711846828953023, 0.18732685902936508, 0.17351030969184067, 0.0678043190049995, 0.07345628377703683, 0.062360371592879216, 0.06732965066101182, 0.06851874119890167, 0.0567712220519061, 0.0566827982585435, 0.053342417839393086, 0.053288447767269154]}, "mutation_prompt": null}
{"id": "44677445-300f-4e0d-b3f9-0507e3592900", "solution": "import numpy as np\n\nclass ImprovedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n        self.threshold = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0], 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1], 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    if func(trial) < func(self.population[i]) - self.threshold:\n                        self.adaptive_factors[i] += np.array([0.3, 0.2]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.3, -0.2])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "ImprovedDynamicMutDE", "description": "Enhance convergence by dynamically adjusting the mutation and crossover factors based on individual performance, biasing towards better solutions for faster convergence.", "configspace": "", "generation": 61, "fitness": 0.25867627317513936, "feedback": "The algorithm ImprovedDynamicMutDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "65d114b5-1a6a-4d24-9cbb-d78a1d4235b5", "metadata": {"aucs": [0.7807108558240343, 0.8150324953381544, 0.7637628708560117, 0.7678550847518513, 0.8278565456513712, 0.7652768517164168, 0.7621831316048344, 0.8098549890430898, 0.7677795528992969, 0.6416884414736804, 0.7114441603779027, 0.5851195595819504, 0.6349734904464365, 0.6682898697717019, 0.5787861574444502, 0.5564496628242177, 0.7058595818078562, 0.5811788964257387, 0.5626177589660402, 0.6540857921541607, 0.16456110332816987, 0.1697039389217342, 0.1538819614998258, 0.16671053719591145, 0.4896291896898872, 0.16972471302158343, 0.11257681895405969, 0.14728407459141268, 0.11759254471031422, 0.15654817048100034, 0.1667149024780683, 0.11796360017907848, 0.11034897478694528, 0.12412065197238042, 0.14977589604065833, 0.14834220221990146, 0.9288061010277369, 0.9506859452283303, 0.9444842163347716, 0.9117288744917152, 0.9526594661679374, 0.9481397173244895, 0.9060443914079999, 0.9099054136107886, 0.9600311760838337, 0.21704686090951575, 0.11380934249642138, 0.21555039735976256, 0.14032863064942025, 0.3379064954134162, 0.299743704158284, 0.2200139820385375, 0.2821228152905859, 0.25008004091149627, 0.19826712853069295, 0.13321568003912176, 0.21459801196587547, 0.26166626032404205, 0.5885179466200291, 0.2903330338406559, 0.20280441635230095, 0.2241210219335238, 0.17655620967542585, 0.13591367964176115, 0.21722793073893476, 0.16203096036754028, 0.18374805685147078, 0.2209030789242088, 0.16142890124293086, 0.23360009760228206, 0.1577887093994268, 0.14370347897603208, 0.14593811839130866, 0.1430973294865593, 0.12771234370872753, 0.11638402368014922, 0.16080668975404966, 0.1401497094965607, 0.1402622910821072, 0.1426185786155998, 0.18806503747145353, 9.999999999998899e-05, 0.00034617821610993804, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003412035646482847, 9.999999999998899e-05, 9.999999999998899e-05, 0.04547850319361846, 0.0017242680168592095, 0.03376441690068677, 0.07761839212153243, 0.07988554077919197, 0.04702347528954176, 0.13220629777587567, 0.09694689466081252, 0.12732989576026144, 0.06400368189021532, 0.07726724243505245, 9.999999999998899e-05, 0.01624829483873269, 9.999999999998899e-05, 0.00451329633877795, 0.06672757548200259, 0.008319627774946103, 9.999999999998899e-05, 0.08939110171683806, 0.015446699464445768, 0.08961480429192048, 0.08196735794799659, 0.09712704863602617, 0.072088367129574, 0.15808746259075668, 0.08791398165313635, 0.07100137363610504, 0.04217401750088634, 0.08275335677431261, 0.4125082094592267, 0.5070460812314204, 0.4383281511810486, 0.42793516543193544, 0.49304189089957684, 0.4433096769917675, 0.4563960275744581, 0.5206352600178761, 0.42033773234645155, 0.10124868100062523, 0.12377208440920529, 0.06508667209606278, 0.08444069152498401, 0.12421833243206581, 0.09420266114518294, 0.0828320340716946, 0.12409797539870904, 0.07247122489204483, 0.14703566337429397, 0.16493647521096466, 0.13204986795475615, 0.19167845892332502, 0.16834525280973578, 0.16978279326759926, 0.13608263587123293, 0.1604515314069005, 0.12183609857216504, 0.22600793001898278, 0.32802496150196925, 0.19755746218143255, 0.241955326043635, 0.3045059247079621, 0.25298586313507654, 0.2462466096739525, 0.20786303778710458, 0.24102766189109381, 0.15772745833601343, 0.1831089525665388, 0.178699968412385, 0.19493418369952287, 0.18390102056031643, 0.18165402311903145, 0.16313373679596466, 0.22545823753081717, 0.17204309424400055, 0.17266781413856191, 0.1903481367865879, 0.20961530707484366, 0.15769507834708607, 0.17428563510248019, 0.18131769225363492, 0.18754334364949599, 0.20381520596579383, 0.19837866789793257, 0.21379133976700948, 0.4476199767814327, 0.19616475259773125, 0.18965665700778622, 0.19953714976089354, 0.18534613938624733, 0.21156428828928653, 0.1902841204046969, 0.21049681276787846, 0.24143912032198367, 0.4468276017941132, 0.17110412564343447, 0.3894929311762756, 0.41473863390790355, 0.4726492993054394, 0.31911384592506575, 0.7834141070575338, 0.16009572266649152, 0.18893526674367433, 0.36615072739234034, 0.19550629702942546, 0.173719491155234, 0.275086634737967, 0.18515342180833483, 0.19700222977540982, 0.34224885537777405, 0.17583857857674556, 0.16221548423186827, 0.18938245341893578, 0.15696511377874667, 0.1926690507354768, 0.18634338407157902, 0.20385073649281527, 0.17452253659023687, 0.18735242483416115, 0.17664896901833038, 0.07107002397298223, 0.06712482093434535, 0.0677319744904733, 0.07882658107956719, 0.09064163366868105, 0.07540225036785175, 0.07142130100435773, 0.08424389933615839, 0.07313289669910406]}, "mutation_prompt": null}
{"id": "59beae30-e47c-4bfe-a6ed-f591bac08312", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0], 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1], 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.2, 0.1]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.2, -0.1])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDE", "description": "Enhance convergence by introducing a dynamic mechanism that adaptively updates the mutation factor and crossover rate based on a dynamic range, promoting faster exploration and exploitation.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65d114b5-1a6a-4d24-9cbb-d78a1d4235b5", "metadata": {"aucs": [0.783773689676867, 0.834916822405026, 0.8278834662184434, 0.18699549687139638, 0.8174001808907492, 0.8295575729656639, 0.8122696042342485, 0.8514808089839006, 0.839791392131545, 0.6010372953873715, 0.6792232273974228, 0.6724295544546529, 0.6500644279439765, 0.6982055593081653, 0.6884872409959291, 0.5630121892219575, 0.7069151580466502, 0.6727391647391239, 0.5455611542400872, 0.3267689499430344, 0.6072526619320593, 0.5675602741990575, 0.5073024362747949, 0.17467234598025916, 0.497958652420075, 0.16326749630456838, 0.49641488829359015, 0.16106138798527536, 0.5190696179522547, 0.5299679999512958, 0.14841500956164122, 0.4492137514803498, 0.14301807197873895, 0.1686297125761348, 0.16262542182707207, 0.16385971318460602, 0.9595510654209443, 0.9781152942992167, 0.9610549045502078, 0.9448724318044794, 0.9639128918648094, 0.9782973247563848, 0.9579627451001331, 0.9532480269574262, 0.9743325309484903, 0.19238960162362972, 0.4359690702613487, 0.3148374312693817, 0.2220283779636023, 0.44365282313045007, 0.3656106780160069, 0.2242747812968512, 0.37620763696470294, 0.08598284180130633, 0.19491821634467132, 0.493835792496613, 0.21665831682303083, 0.18723053869003292, 0.5076404098111233, 0.2897836611621919, 0.1958838031304907, 0.6897380392852488, 0.3394142360756749, 0.1583820934736312, 0.20957198017159595, 0.1467405025832832, 0.14441589002790245, 0.1219494241725364, 0.15804022533525153, 0.18630921567178182, 0.2607231824762093, 0.19918398278017335, 0.1431434384782866, 0.17435194529930154, 0.18156907170418268, 0.15256808613689843, 0.1709376943849784, 0.1886449917451829, 0.14601901512009952, 0.16235235784312063, 0.16005950091913257, 9.999999999998899e-05, 0.041119902296723576, 0.00033820449795951557, 9.999999999998899e-05, 0.074041021661169, 0.002776061667230323, 9.999999999998899e-05, 0.023662791823528817, 0.011266916607904576, 0.05819889940361678, 0.1607917184487131, 0.09557489123887153, 0.08592994245535013, 0.1552483382622586, 0.14317244943819862, 0.05421793007349185, 0.19240044982177307, 0.13683575179421548, 9.999999999998899e-05, 0.03352427488856591, 9.999999999998899e-05, 0.0025068697229495562, 0.013023054343950902, 0.0011228509089098448, 9.999999999998899e-05, 0.061142193342711426, 9.999999999998899e-05, 0.08958039147983277, 0.1492885746337197, 0.1290824370318958, 0.07927409358838466, 0.15710005955031558, 0.14351496992072132, 0.07729356272695509, 0.16781003554760077, 0.11025093945338926, 0.4475172349259172, 0.5410725626335304, 0.49697162543293183, 0.4548983489197992, 0.5414598010399538, 0.4912643076111357, 0.44135992905533616, 0.4981629668444262, 0.5094579763465921, 0.07712217841209945, 0.08257084001404313, 0.0647909357043005, 0.06238665953318323, 0.08579105400047249, 0.10038865249869255, 0.0873045737015975, 0.0976631172258774, 0.08748040893522468, 0.14362631193468256, 0.1383100941766563, 0.1296238513384893, 0.1222679571128561, 0.13252405158858094, 0.1476522334833109, 0.12071951400387604, 0.13135611293876448, 0.1546239144873407, 0.1978079793144475, 0.34458277865970033, 0.2532928902899274, 0.22768283092829356, 0.23923057510445123, 0.24375503598752846, 0.2778949086112945, 0.3443106481677304, 0.27080054347229887, 0.20569770116486308, 0.20444216779257673, 0.1809205386252224, 0.16078084858290187, 0.2155430391077865, 0.18418025662435877, 0.16080905694136927, 0.20286579199361743, 0.2555749555290525, 0.17031889777026066, 0.16596039191706857, 0.20494897927688094, 0.18536746980264585, 0.18348493751567274, 0.18565093306774716, 0.19006766372672845, 0.19755543575283208, 0.18784439337450454, 0.1792559498950873, 0.2185185161367582, 0.2239116785851608, 0.24490139446997305, 0.22055294956686566, 0.19413592678055813, 0.2112134681974026, 0.4774152832634635, 0.1999871926488641, 0.17333451622996165, 0.7009022293523297, 0.16141096263612775, 0.16463503326507467, 0.18504775511279026, 0.37525306972696837, 0.21036378800885558, 0.16875589315221518, 0.73213187143895, 0.151506002154555, 0.44386798571238983, 0.22247509365816565, 0.1711089206610834, 0.24474516188191509, 0.37060146129993543, 0.20640839258981436, 0.14175743254425544, 0.25591454678323855, 0.1726855450343341, 0.17432154851761028, 0.1808054270454128, 0.18196542846059782, 0.17253518430675907, 0.17046890162417416, 0.17614197351065575, 0.18740372432075625, 0.17312117686049078, 0.07751401699892035, 0.07203353713231686, 0.0641785495033198, 0.05989056123270187, 0.0648940927298205, 0.0844429683611454, 0.06531874266264026, 0.07162007519239888, 0.06996243351939535]}, "mutation_prompt": null}
{"id": "7934ef35-2e64-41a7-b7a5-2c60bad2e6a0", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0], 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1], 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.2, 0.1]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.2, -0.1])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDE", "description": "Enhance convergence by introducing a dynamic mechanism that adaptively updates the mutation factor and crossover rate based on a dynamic range, promoting faster exploration and exploitation.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65d114b5-1a6a-4d24-9cbb-d78a1d4235b5", "metadata": {"aucs": [0.783773689676867, 0.834916822405026, 0.8278834662184434, 0.18699549687139638, 0.8174001808907492, 0.8295575729656639, 0.8122696042342485, 0.8514808089839006, 0.839791392131545, 0.6010372953873715, 0.6792232273974228, 0.6724295544546529, 0.6500644279439765, 0.6982055593081653, 0.6884872409959291, 0.5630121892219575, 0.7069151580466502, 0.6727391647391239, 0.5455611542400872, 0.3267689499430344, 0.6072526619320593, 0.5675602741990575, 0.5073024362747949, 0.17467234598025916, 0.497958652420075, 0.16326749630456838, 0.49641488829359015, 0.16106138798527536, 0.5190696179522547, 0.5299679999512958, 0.14841500956164122, 0.4492137514803498, 0.14301807197873895, 0.1686297125761348, 0.16262542182707207, 0.16385971318460602, 0.9595510654209443, 0.9781152942992167, 0.9610549045502078, 0.9448724318044794, 0.9639128918648094, 0.9782973247563848, 0.9579627451001331, 0.9532480269574262, 0.9743325309484903, 0.19238960162362972, 0.4359690702613487, 0.3148374312693817, 0.2220283779636023, 0.44365282313045007, 0.3656106780160069, 0.2242747812968512, 0.37620763696470294, 0.08598284180130633, 0.19491821634467132, 0.493835792496613, 0.21665831682303083, 0.18723053869003292, 0.5076404098111233, 0.2897836611621919, 0.1958838031304907, 0.6897380392852488, 0.3394142360756749, 0.1583820934736312, 0.20957198017159595, 0.1467405025832832, 0.14441589002790245, 0.1219494241725364, 0.15804022533525153, 0.18630921567178182, 0.2607231824762093, 0.19918398278017335, 0.1431434384782866, 0.17435194529930154, 0.18156907170418268, 0.15256808613689843, 0.1709376943849784, 0.1886449917451829, 0.14601901512009952, 0.16235235784312063, 0.16005950091913257, 9.999999999998899e-05, 0.041119902296723576, 0.00033820449795951557, 9.999999999998899e-05, 0.074041021661169, 0.002776061667230323, 9.999999999998899e-05, 0.023662791823528817, 0.011266916607904576, 0.05819889940361678, 0.1607917184487131, 0.09557489123887153, 0.08592994245535013, 0.1552483382622586, 0.14317244943819862, 0.05421793007349185, 0.19240044982177307, 0.13683575179421548, 9.999999999998899e-05, 0.03352427488856591, 9.999999999998899e-05, 0.0025068697229495562, 0.013023054343950902, 0.0011228509089098448, 9.999999999998899e-05, 0.061142193342711426, 9.999999999998899e-05, 0.08958039147983277, 0.1492885746337197, 0.1290824370318958, 0.07927409358838466, 0.15710005955031558, 0.14351496992072132, 0.07729356272695509, 0.16781003554760077, 0.11025093945338926, 0.4475172349259172, 0.5410725626335304, 0.49697162543293183, 0.4548983489197992, 0.5414598010399538, 0.4912643076111357, 0.44135992905533616, 0.4981629668444262, 0.5094579763465921, 0.07712217841209945, 0.08257084001404313, 0.0647909357043005, 0.06238665953318323, 0.08579105400047249, 0.10038865249869255, 0.0873045737015975, 0.0976631172258774, 0.08748040893522468, 0.14362631193468256, 0.1383100941766563, 0.1296238513384893, 0.1222679571128561, 0.13252405158858094, 0.1476522334833109, 0.12071951400387604, 0.13135611293876448, 0.1546239144873407, 0.1978079793144475, 0.34458277865970033, 0.2532928902899274, 0.22768283092829356, 0.23923057510445123, 0.24375503598752846, 0.2778949086112945, 0.3443106481677304, 0.27080054347229887, 0.20569770116486308, 0.20444216779257673, 0.1809205386252224, 0.16078084858290187, 0.2155430391077865, 0.18418025662435877, 0.16080905694136927, 0.20286579199361743, 0.2555749555290525, 0.17031889777026066, 0.16596039191706857, 0.20494897927688094, 0.18536746980264585, 0.18348493751567274, 0.18565093306774716, 0.19006766372672845, 0.19755543575283208, 0.18784439337450454, 0.1792559498950873, 0.2185185161367582, 0.2239116785851608, 0.24490139446997305, 0.22055294956686566, 0.19413592678055813, 0.2112134681974026, 0.4774152832634635, 0.1999871926488641, 0.17333451622996165, 0.7009022293523297, 0.16141096263612775, 0.16463503326507467, 0.18504775511279026, 0.37525306972696837, 0.21036378800885558, 0.16875589315221518, 0.73213187143895, 0.151506002154555, 0.44386798571238983, 0.22247509365816565, 0.1711089206610834, 0.24474516188191509, 0.37060146129993543, 0.20640839258981436, 0.14175743254425544, 0.25591454678323855, 0.1726855450343341, 0.17432154851761028, 0.1808054270454128, 0.18196542846059782, 0.17253518430675907, 0.17046890162417416, 0.17614197351065575, 0.18740372432075625, 0.17312117686049078, 0.07751401699892035, 0.07203353713231686, 0.0641785495033198, 0.05989056123270187, 0.0648940927298205, 0.0844429683611454, 0.06531874266264026, 0.07162007519239888, 0.06996243351939535]}, "mutation_prompt": null}
{"id": "fb23c370-dcac-44f2-9e74-88f2f9819d41", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                f = np.clip(0.1 + 0.9 * ((func(self.population[a]) - func(self.population[b])) / (func(self.population[c]) - func(self.population[a]))), 0.1, 0.9)\n                mutant = self.population[a] + f * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1], 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.2, 0.1]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.2, -0.1])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDE", "description": "Improve convergence speed by implementing a dynamic mutation strategy based on individual fitness, enhancing exploitation and exploration.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "An exception occurred: ZeroDivisionError('float division by zero').", "error": "ZeroDivisionError('float division by zero')", "parent_id": "65d114b5-1a6a-4d24-9cbb-d78a1d4235b5", "metadata": {}, "mutation_prompt": null}
{"id": "32a8b2dc-825e-4501-9779-b55b84e4d9db", "solution": "import numpy as np\n\nclass ImprovedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0], 0.05, 0.95) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1], 0.05, 0.95)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.1, 0.05]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.1, -0.05])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "ImprovedDynamicMutDE", "description": "Utilize a self-adaptive mechanism to dynamically adjust the mutation and crossover rates based on individual performance, enhancing convergence speed while maintaining a precise 10.0% difference in functionality compared to the original code.", "configspace": "", "generation": 65, "fitness": 0.2710054997603023, "feedback": "The algorithm ImprovedDynamicMutDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "65d114b5-1a6a-4d24-9cbb-d78a1d4235b5", "metadata": {"aucs": [0.8032639133438612, 0.8157214728424957, 0.8265934607549077, 0.7789009560119685, 0.8349677291099892, 0.7840116129109705, 0.7815438021389889, 0.818755235418426, 0.7995685824231489, 0.6122146615050106, 0.7100188127009124, 0.6088890178275692, 0.6246127232119782, 0.6261009843991394, 0.6322187964128206, 0.5994812040849802, 0.6801301955076138, 0.6530943167290791, 0.5457560681109853, 0.49871489054189655, 0.1435006331719969, 0.5649057269668996, 0.5119222256012909, 0.17290177436498433, 0.17357529003963823, 0.16579047975302053, 0.5587036276320588, 0.5576743330220439, 0.17201039118392547, 0.1676132148388626, 0.1671838577791952, 0.16371191515647865, 0.16217470342151263, 0.44876667570265305, 0.4491202296161695, 0.4676399347377558, 0.9517880279039084, 0.9822010656262402, 0.9680232371316475, 0.9585364085505007, 0.9523436861184916, 0.9572451981672121, 0.970283966337924, 0.9389269073773855, 0.966296467466238, 0.1805708438993876, 0.34838853712479945, 0.2632559216175212, 0.19091098023584097, 0.30860596749500546, 0.3168433051888303, 0.1903172322954766, 0.4082754210888312, 0.24145921110605773, 0.23992670485251022, 0.21373661422383994, 0.25320190853249647, 0.23534886948823008, 0.3461774899341299, 0.2638568074405674, 0.22483624670048252, 0.6381777140312407, 0.22803952368696923, 0.15157323491676056, 0.17748465222843846, 0.172473466780816, 0.09256265828383603, 0.20581805065427794, 0.15504312324814296, 0.16702066361552081, 0.22046499860499713, 0.2217615264131393, 0.1407628409209296, 0.021178701028262137, 0.16806874404540428, 0.12784184894892603, 0.15651114065737415, 0.1378719112731558, 0.1395425493537389, 0.12943209496753538, 0.17318118558438422, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05711905817957208, 9.999999999998899e-05, 9.999999999998899e-05, 0.011450069370669058, 9.999999999998899e-05, 0.05370978262180237, 0.14815656332061666, 0.08439752551025981, 0.05948585244811988, 0.08140595624999714, 0.08888003541878664, 0.105919905211594, 0.16950754643891708, 0.11606402095938906, 0.0012820677850983175, 0.03589831439371427, 9.999999999998899e-05, 9.999999999998899e-05, 0.05857983210309525, 0.047734327578020874, 9.999999999998899e-05, 0.004333120119920042, 0.017082357326448472, 0.0645538781197671, 0.15708872429020082, 0.09939534821786788, 0.1155859169709833, 0.17009318057849832, 0.1163208167554367, 0.09357645172766205, 0.15547268004315706, 0.10548449774921032, 0.4462627548352346, 0.5317909225069624, 0.48053615522094295, 0.43263522608097316, 0.48101654908516356, 0.46729064767069683, 0.4267828709412341, 0.5444032452928705, 0.4544597589144248, 0.09113180417533495, 0.0865741301226004, 0.09759148397485573, 0.08070046968999378, 0.09408490257569069, 0.08894906753517973, 0.07285395129049321, 0.08954371621766599, 0.09879024868359976, 0.13106469365306894, 0.16291446330582038, 0.14962429601141336, 0.1471907120684387, 0.22747297569997804, 0.13074404541783025, 0.13349669635633488, 0.1465118206855297, 0.12375648190983335, 0.2158711447747289, 0.3147339826560318, 0.20623140209894386, 0.2151378509556212, 0.2716601252956703, 0.24911122192639756, 0.23933202884939941, 0.3192375431208666, 0.2557500954023333, 0.15089748810178338, 0.18390227342444143, 0.14605285248221822, 0.14671550664318278, 0.20991140237502903, 0.16143316478354353, 0.15698759227916237, 0.23010256649545247, 0.20302132636726988, 0.1725794084592739, 0.16824313505781852, 0.17110133257690396, 0.17662685205605466, 0.18596022029506043, 0.16403150573606928, 0.1991175201739689, 0.18823780343523921, 0.18541468888464296, 0.21307822390038378, 0.22662951368045303, 0.20022614908672587, 0.21353345561578252, 0.20884975320240395, 0.21142387519846273, 0.2095544637493052, 0.23099916681359178, 0.20476994640990365, 0.16648052618547649, 0.1666769174899646, 0.3388801157539797, 0.4459613444276944, 0.1925081475798398, 0.195262847514852, 0.38758548876602694, 0.59069006859004, 0.12872974341165022, 0.17692391526701157, 0.37249682027615216, 0.16107907712462166, 0.16399117400410212, 0.2001750379380659, 0.20147154228063124, 0.2010100324955587, 0.37890747627981636, 0.17907752322788761, 0.18477444036553603, 0.17969923851384506, 0.1796607225650687, 0.20062235945101425, 0.16534461416001556, 0.17840010463247202, 0.16418533995643791, 0.20438242026765474, 0.19077478120839075, 0.06083614408874072, 0.06319215468599981, 0.07716711582656266, 0.07672192566843061, 0.0731924846402453, 0.06602158359862986, 0.06840120337713451, 0.06528825329443366, 0.06847565741358974]}, "mutation_prompt": null}
{"id": "23f1c88c-0665-4d31-aba3-66e425aec732", "solution": "import numpy as np\n\nclass FastConvergingMutDE(EnhancedDynamicMutDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_range = np.random.uniform(0.1, 0.9, (self.population_size, dim))\n        self.crossover_range = np.random.uniform(0.1, 0.9, (self.population_size, dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.mutation_range[i] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.crossover_range[i]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.mutation_range[i] += 0.2 if self.mutation_range[i] < 0.9 else -0.2\n                    self.crossover_range[i] += 0.1 if self.crossover_range[i] < 0.9 else -0.1\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "FastConvergingMutDE", "description": "Improve convergence speed by incorporating a novel adaptive mechanism that dynamically adjusts mutation and crossover rates based on individual performance, enhancing exploration and exploitation efficiency.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "65d114b5-1a6a-4d24-9cbb-d78a1d4235b5", "metadata": {}, "mutation_prompt": null}
{"id": "13c86669-e326-488a-98d5-ff6bc98d4784", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0], 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1], 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.2, 0.1]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.2, -0.1])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDE", "description": "Enhance convergence by introducing a dynamic mechanism that adaptively updates the mutation factor and crossover rate based on a dynamic range, promoting faster exploration and exploitation.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65d114b5-1a6a-4d24-9cbb-d78a1d4235b5", "metadata": {"aucs": [0.783773689676867, 0.834916822405026, 0.8278834662184434, 0.18699549687139638, 0.8174001808907492, 0.8295575729656639, 0.8122696042342485, 0.8514808089839006, 0.839791392131545, 0.6010372953873715, 0.6792232273974228, 0.6724295544546529, 0.6500644279439765, 0.6982055593081653, 0.6884872409959291, 0.5630121892219575, 0.7069151580466502, 0.6727391647391239, 0.5455611542400872, 0.3267689499430344, 0.6072526619320593, 0.5675602741990575, 0.5073024362747949, 0.17467234598025916, 0.497958652420075, 0.16326749630456838, 0.49641488829359015, 0.16106138798527536, 0.5190696179522547, 0.5299679999512958, 0.14841500956164122, 0.4492137514803498, 0.14301807197873895, 0.1686297125761348, 0.16262542182707207, 0.16385971318460602, 0.9595510654209443, 0.9781152942992167, 0.9610549045502078, 0.9448724318044794, 0.9639128918648094, 0.9782973247563848, 0.9579627451001331, 0.9532480269574262, 0.9743325309484903, 0.19238960162362972, 0.4359690702613487, 0.3148374312693817, 0.2220283779636023, 0.44365282313045007, 0.3656106780160069, 0.2242747812968512, 0.37620763696470294, 0.08598284180130633, 0.19491821634467132, 0.493835792496613, 0.21665831682303083, 0.18723053869003292, 0.5076404098111233, 0.2897836611621919, 0.1958838031304907, 0.6897380392852488, 0.3394142360756749, 0.1583820934736312, 0.20957198017159595, 0.1467405025832832, 0.14441589002790245, 0.1219494241725364, 0.15804022533525153, 0.18630921567178182, 0.2607231824762093, 0.19918398278017335, 0.1431434384782866, 0.17435194529930154, 0.18156907170418268, 0.15256808613689843, 0.1709376943849784, 0.1886449917451829, 0.14601901512009952, 0.16235235784312063, 0.16005950091913257, 9.999999999998899e-05, 0.041119902296723576, 0.00033820449795951557, 9.999999999998899e-05, 0.074041021661169, 0.002776061667230323, 9.999999999998899e-05, 0.023662791823528817, 0.011266916607904576, 0.05819889940361678, 0.1607917184487131, 0.09557489123887153, 0.08592994245535013, 0.1552483382622586, 0.14317244943819862, 0.05421793007349185, 0.19240044982177307, 0.13683575179421548, 9.999999999998899e-05, 0.03352427488856591, 9.999999999998899e-05, 0.0025068697229495562, 0.013023054343950902, 0.0011228509089098448, 9.999999999998899e-05, 0.061142193342711426, 9.999999999998899e-05, 0.08958039147983277, 0.1492885746337197, 0.1290824370318958, 0.07927409358838466, 0.15710005955031558, 0.14351496992072132, 0.07729356272695509, 0.16781003554760077, 0.11025093945338926, 0.4475172349259172, 0.5410725626335304, 0.49697162543293183, 0.4548983489197992, 0.5414598010399538, 0.4912643076111357, 0.44135992905533616, 0.4981629668444262, 0.5094579763465921, 0.07712217841209945, 0.08257084001404313, 0.0647909357043005, 0.06238665953318323, 0.08579105400047249, 0.10038865249869255, 0.0873045737015975, 0.0976631172258774, 0.08748040893522468, 0.14362631193468256, 0.1383100941766563, 0.1296238513384893, 0.1222679571128561, 0.13252405158858094, 0.1476522334833109, 0.12071951400387604, 0.13135611293876448, 0.1546239144873407, 0.1978079793144475, 0.34458277865970033, 0.2532928902899274, 0.22768283092829356, 0.23923057510445123, 0.24375503598752846, 0.2778949086112945, 0.3443106481677304, 0.27080054347229887, 0.20569770116486308, 0.20444216779257673, 0.1809205386252224, 0.16078084858290187, 0.2155430391077865, 0.18418025662435877, 0.16080905694136927, 0.20286579199361743, 0.2555749555290525, 0.17031889777026066, 0.16596039191706857, 0.20494897927688094, 0.18536746980264585, 0.18348493751567274, 0.18565093306774716, 0.19006766372672845, 0.19755543575283208, 0.18784439337450454, 0.1792559498950873, 0.2185185161367582, 0.2239116785851608, 0.24490139446997305, 0.22055294956686566, 0.19413592678055813, 0.2112134681974026, 0.4774152832634635, 0.1999871926488641, 0.17333451622996165, 0.7009022293523297, 0.16141096263612775, 0.16463503326507467, 0.18504775511279026, 0.37525306972696837, 0.21036378800885558, 0.16875589315221518, 0.73213187143895, 0.151506002154555, 0.44386798571238983, 0.22247509365816565, 0.1711089206610834, 0.24474516188191509, 0.37060146129993543, 0.20640839258981436, 0.14175743254425544, 0.25591454678323855, 0.1726855450343341, 0.17432154851761028, 0.1808054270454128, 0.18196542846059782, 0.17253518430675907, 0.17046890162417416, 0.17614197351065575, 0.18740372432075625, 0.17312117686049078, 0.07751401699892035, 0.07203353713231686, 0.0641785495033198, 0.05989056123270187, 0.0648940927298205, 0.0844429683611454, 0.06531874266264026, 0.07162007519239888, 0.06996243351939535]}, "mutation_prompt": null}
{"id": "687030f3-30ee-46e9-af74-087ac1d336de", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0], 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1], 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.2, 0.1]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.2, -0.1])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDE", "description": "Enhance convergence by introducing a dynamic mechanism that adaptively updates the mutation factor and crossover rate based on a dynamic range, promoting faster exploration and exploitation.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65d114b5-1a6a-4d24-9cbb-d78a1d4235b5", "metadata": {"aucs": [0.783773689676867, 0.834916822405026, 0.8278834662184434, 0.18699549687139638, 0.8174001808907492, 0.8295575729656639, 0.8122696042342485, 0.8514808089839006, 0.839791392131545, 0.6010372953873715, 0.6792232273974228, 0.6724295544546529, 0.6500644279439765, 0.6982055593081653, 0.6884872409959291, 0.5630121892219575, 0.7069151580466502, 0.6727391647391239, 0.5455611542400872, 0.3267689499430344, 0.6072526619320593, 0.5675602741990575, 0.5073024362747949, 0.17467234598025916, 0.497958652420075, 0.16326749630456838, 0.49641488829359015, 0.16106138798527536, 0.5190696179522547, 0.5299679999512958, 0.14841500956164122, 0.4492137514803498, 0.14301807197873895, 0.1686297125761348, 0.16262542182707207, 0.16385971318460602, 0.9595510654209443, 0.9781152942992167, 0.9610549045502078, 0.9448724318044794, 0.9639128918648094, 0.9782973247563848, 0.9579627451001331, 0.9532480269574262, 0.9743325309484903, 0.19238960162362972, 0.4359690702613487, 0.3148374312693817, 0.2220283779636023, 0.44365282313045007, 0.3656106780160069, 0.2242747812968512, 0.37620763696470294, 0.08598284180130633, 0.19491821634467132, 0.493835792496613, 0.21665831682303083, 0.18723053869003292, 0.5076404098111233, 0.2897836611621919, 0.1958838031304907, 0.6897380392852488, 0.3394142360756749, 0.1583820934736312, 0.20957198017159595, 0.1467405025832832, 0.14441589002790245, 0.1219494241725364, 0.15804022533525153, 0.18630921567178182, 0.2607231824762093, 0.19918398278017335, 0.1431434384782866, 0.17435194529930154, 0.18156907170418268, 0.15256808613689843, 0.1709376943849784, 0.1886449917451829, 0.14601901512009952, 0.16235235784312063, 0.16005950091913257, 9.999999999998899e-05, 0.041119902296723576, 0.00033820449795951557, 9.999999999998899e-05, 0.074041021661169, 0.002776061667230323, 9.999999999998899e-05, 0.023662791823528817, 0.011266916607904576, 0.05819889940361678, 0.1607917184487131, 0.09557489123887153, 0.08592994245535013, 0.1552483382622586, 0.14317244943819862, 0.05421793007349185, 0.19240044982177307, 0.13683575179421548, 9.999999999998899e-05, 0.03352427488856591, 9.999999999998899e-05, 0.0025068697229495562, 0.013023054343950902, 0.0011228509089098448, 9.999999999998899e-05, 0.061142193342711426, 9.999999999998899e-05, 0.08958039147983277, 0.1492885746337197, 0.1290824370318958, 0.07927409358838466, 0.15710005955031558, 0.14351496992072132, 0.07729356272695509, 0.16781003554760077, 0.11025093945338926, 0.4475172349259172, 0.5410725626335304, 0.49697162543293183, 0.4548983489197992, 0.5414598010399538, 0.4912643076111357, 0.44135992905533616, 0.4981629668444262, 0.5094579763465921, 0.07712217841209945, 0.08257084001404313, 0.0647909357043005, 0.06238665953318323, 0.08579105400047249, 0.10038865249869255, 0.0873045737015975, 0.0976631172258774, 0.08748040893522468, 0.14362631193468256, 0.1383100941766563, 0.1296238513384893, 0.1222679571128561, 0.13252405158858094, 0.1476522334833109, 0.12071951400387604, 0.13135611293876448, 0.1546239144873407, 0.1978079793144475, 0.34458277865970033, 0.2532928902899274, 0.22768283092829356, 0.23923057510445123, 0.24375503598752846, 0.2778949086112945, 0.3443106481677304, 0.27080054347229887, 0.20569770116486308, 0.20444216779257673, 0.1809205386252224, 0.16078084858290187, 0.2155430391077865, 0.18418025662435877, 0.16080905694136927, 0.20286579199361743, 0.2555749555290525, 0.17031889777026066, 0.16596039191706857, 0.20494897927688094, 0.18536746980264585, 0.18348493751567274, 0.18565093306774716, 0.19006766372672845, 0.19755543575283208, 0.18784439337450454, 0.1792559498950873, 0.2185185161367582, 0.2239116785851608, 0.24490139446997305, 0.22055294956686566, 0.19413592678055813, 0.2112134681974026, 0.4774152832634635, 0.1999871926488641, 0.17333451622996165, 0.7009022293523297, 0.16141096263612775, 0.16463503326507467, 0.18504775511279026, 0.37525306972696837, 0.21036378800885558, 0.16875589315221518, 0.73213187143895, 0.151506002154555, 0.44386798571238983, 0.22247509365816565, 0.1711089206610834, 0.24474516188191509, 0.37060146129993543, 0.20640839258981436, 0.14175743254425544, 0.25591454678323855, 0.1726855450343341, 0.17432154851761028, 0.1808054270454128, 0.18196542846059782, 0.17253518430675907, 0.17046890162417416, 0.17614197351065575, 0.18740372432075625, 0.17312117686049078, 0.07751401699892035, 0.07203353713231686, 0.0641785495033198, 0.05989056123270187, 0.0648940927298205, 0.0844429683611454, 0.06531874266264026, 0.07162007519239888, 0.06996243351939535]}, "mutation_prompt": null}
{"id": "c22236b8-8425-4121-9101-4b3c75566ee3", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0], 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1], 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.2, 0.1]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.2, -0.1])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDE", "description": "Enhance convergence by introducing a dynamic mechanism that adaptively updates the mutation factor and crossover rate based on a dynamic range, promoting faster exploration and exploitation.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65d114b5-1a6a-4d24-9cbb-d78a1d4235b5", "metadata": {"aucs": [0.783773689676867, 0.834916822405026, 0.8278834662184434, 0.18699549687139638, 0.8174001808907492, 0.8295575729656639, 0.8122696042342485, 0.8514808089839006, 0.839791392131545, 0.6010372953873715, 0.6792232273974228, 0.6724295544546529, 0.6500644279439765, 0.6982055593081653, 0.6884872409959291, 0.5630121892219575, 0.7069151580466502, 0.6727391647391239, 0.5455611542400872, 0.3267689499430344, 0.6072526619320593, 0.5675602741990575, 0.5073024362747949, 0.17467234598025916, 0.497958652420075, 0.16326749630456838, 0.49641488829359015, 0.16106138798527536, 0.5190696179522547, 0.5299679999512958, 0.14841500956164122, 0.4492137514803498, 0.14301807197873895, 0.1686297125761348, 0.16262542182707207, 0.16385971318460602, 0.9595510654209443, 0.9781152942992167, 0.9610549045502078, 0.9448724318044794, 0.9639128918648094, 0.9782973247563848, 0.9579627451001331, 0.9532480269574262, 0.9743325309484903, 0.19238960162362972, 0.4359690702613487, 0.3148374312693817, 0.2220283779636023, 0.44365282313045007, 0.3656106780160069, 0.2242747812968512, 0.37620763696470294, 0.08598284180130633, 0.19491821634467132, 0.493835792496613, 0.21665831682303083, 0.18723053869003292, 0.5076404098111233, 0.2897836611621919, 0.1958838031304907, 0.6897380392852488, 0.3394142360756749, 0.1583820934736312, 0.20957198017159595, 0.1467405025832832, 0.14441589002790245, 0.1219494241725364, 0.15804022533525153, 0.18630921567178182, 0.2607231824762093, 0.19918398278017335, 0.1431434384782866, 0.17435194529930154, 0.18156907170418268, 0.15256808613689843, 0.1709376943849784, 0.1886449917451829, 0.14601901512009952, 0.16235235784312063, 0.16005950091913257, 9.999999999998899e-05, 0.041119902296723576, 0.00033820449795951557, 9.999999999998899e-05, 0.074041021661169, 0.002776061667230323, 9.999999999998899e-05, 0.023662791823528817, 0.011266916607904576, 0.05819889940361678, 0.1607917184487131, 0.09557489123887153, 0.08592994245535013, 0.1552483382622586, 0.14317244943819862, 0.05421793007349185, 0.19240044982177307, 0.13683575179421548, 9.999999999998899e-05, 0.03352427488856591, 9.999999999998899e-05, 0.0025068697229495562, 0.013023054343950902, 0.0011228509089098448, 9.999999999998899e-05, 0.061142193342711426, 9.999999999998899e-05, 0.08958039147983277, 0.1492885746337197, 0.1290824370318958, 0.07927409358838466, 0.15710005955031558, 0.14351496992072132, 0.07729356272695509, 0.16781003554760077, 0.11025093945338926, 0.4475172349259172, 0.5410725626335304, 0.49697162543293183, 0.4548983489197992, 0.5414598010399538, 0.4912643076111357, 0.44135992905533616, 0.4981629668444262, 0.5094579763465921, 0.07712217841209945, 0.08257084001404313, 0.0647909357043005, 0.06238665953318323, 0.08579105400047249, 0.10038865249869255, 0.0873045737015975, 0.0976631172258774, 0.08748040893522468, 0.14362631193468256, 0.1383100941766563, 0.1296238513384893, 0.1222679571128561, 0.13252405158858094, 0.1476522334833109, 0.12071951400387604, 0.13135611293876448, 0.1546239144873407, 0.1978079793144475, 0.34458277865970033, 0.2532928902899274, 0.22768283092829356, 0.23923057510445123, 0.24375503598752846, 0.2778949086112945, 0.3443106481677304, 0.27080054347229887, 0.20569770116486308, 0.20444216779257673, 0.1809205386252224, 0.16078084858290187, 0.2155430391077865, 0.18418025662435877, 0.16080905694136927, 0.20286579199361743, 0.2555749555290525, 0.17031889777026066, 0.16596039191706857, 0.20494897927688094, 0.18536746980264585, 0.18348493751567274, 0.18565093306774716, 0.19006766372672845, 0.19755543575283208, 0.18784439337450454, 0.1792559498950873, 0.2185185161367582, 0.2239116785851608, 0.24490139446997305, 0.22055294956686566, 0.19413592678055813, 0.2112134681974026, 0.4774152832634635, 0.1999871926488641, 0.17333451622996165, 0.7009022293523297, 0.16141096263612775, 0.16463503326507467, 0.18504775511279026, 0.37525306972696837, 0.21036378800885558, 0.16875589315221518, 0.73213187143895, 0.151506002154555, 0.44386798571238983, 0.22247509365816565, 0.1711089206610834, 0.24474516188191509, 0.37060146129993543, 0.20640839258981436, 0.14175743254425544, 0.25591454678323855, 0.1726855450343341, 0.17432154851761028, 0.1808054270454128, 0.18196542846059782, 0.17253518430675907, 0.17046890162417416, 0.17614197351065575, 0.18740372432075625, 0.17312117686049078, 0.07751401699892035, 0.07203353713231686, 0.0641785495033198, 0.05989056123270187, 0.0648940927298205, 0.0844429683611454, 0.06531874266264026, 0.07162007519239888, 0.06996243351939535]}, "mutation_prompt": null}
{"id": "26541b07-5a0f-4318-bacb-d85af32ac3e2", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0], 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1], 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.2, 0.1]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.2, -0.1])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDE", "description": "Enhance convergence by introducing a dynamic mechanism that adaptively updates the mutation factor and crossover rate based on a dynamic range, promoting faster exploration and exploitation.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65d114b5-1a6a-4d24-9cbb-d78a1d4235b5", "metadata": {"aucs": [0.783773689676867, 0.834916822405026, 0.8278834662184434, 0.18699549687139638, 0.8174001808907492, 0.8295575729656639, 0.8122696042342485, 0.8514808089839006, 0.839791392131545, 0.6010372953873715, 0.6792232273974228, 0.6724295544546529, 0.6500644279439765, 0.6982055593081653, 0.6884872409959291, 0.5630121892219575, 0.7069151580466502, 0.6727391647391239, 0.5455611542400872, 0.3267689499430344, 0.6072526619320593, 0.5675602741990575, 0.5073024362747949, 0.17467234598025916, 0.497958652420075, 0.16326749630456838, 0.49641488829359015, 0.16106138798527536, 0.5190696179522547, 0.5299679999512958, 0.14841500956164122, 0.4492137514803498, 0.14301807197873895, 0.1686297125761348, 0.16262542182707207, 0.16385971318460602, 0.9595510654209443, 0.9781152942992167, 0.9610549045502078, 0.9448724318044794, 0.9639128918648094, 0.9782973247563848, 0.9579627451001331, 0.9532480269574262, 0.9743325309484903, 0.19238960162362972, 0.4359690702613487, 0.3148374312693817, 0.2220283779636023, 0.44365282313045007, 0.3656106780160069, 0.2242747812968512, 0.37620763696470294, 0.08598284180130633, 0.19491821634467132, 0.493835792496613, 0.21665831682303083, 0.18723053869003292, 0.5076404098111233, 0.2897836611621919, 0.1958838031304907, 0.6897380392852488, 0.3394142360756749, 0.1583820934736312, 0.20957198017159595, 0.1467405025832832, 0.14441589002790245, 0.1219494241725364, 0.15804022533525153, 0.18630921567178182, 0.2607231824762093, 0.19918398278017335, 0.1431434384782866, 0.17435194529930154, 0.18156907170418268, 0.15256808613689843, 0.1709376943849784, 0.1886449917451829, 0.14601901512009952, 0.16235235784312063, 0.16005950091913257, 9.999999999998899e-05, 0.041119902296723576, 0.00033820449795951557, 9.999999999998899e-05, 0.074041021661169, 0.002776061667230323, 9.999999999998899e-05, 0.023662791823528817, 0.011266916607904576, 0.05819889940361678, 0.1607917184487131, 0.09557489123887153, 0.08592994245535013, 0.1552483382622586, 0.14317244943819862, 0.05421793007349185, 0.19240044982177307, 0.13683575179421548, 9.999999999998899e-05, 0.03352427488856591, 9.999999999998899e-05, 0.0025068697229495562, 0.013023054343950902, 0.0011228509089098448, 9.999999999998899e-05, 0.061142193342711426, 9.999999999998899e-05, 0.08958039147983277, 0.1492885746337197, 0.1290824370318958, 0.07927409358838466, 0.15710005955031558, 0.14351496992072132, 0.07729356272695509, 0.16781003554760077, 0.11025093945338926, 0.4475172349259172, 0.5410725626335304, 0.49697162543293183, 0.4548983489197992, 0.5414598010399538, 0.4912643076111357, 0.44135992905533616, 0.4981629668444262, 0.5094579763465921, 0.07712217841209945, 0.08257084001404313, 0.0647909357043005, 0.06238665953318323, 0.08579105400047249, 0.10038865249869255, 0.0873045737015975, 0.0976631172258774, 0.08748040893522468, 0.14362631193468256, 0.1383100941766563, 0.1296238513384893, 0.1222679571128561, 0.13252405158858094, 0.1476522334833109, 0.12071951400387604, 0.13135611293876448, 0.1546239144873407, 0.1978079793144475, 0.34458277865970033, 0.2532928902899274, 0.22768283092829356, 0.23923057510445123, 0.24375503598752846, 0.2778949086112945, 0.3443106481677304, 0.27080054347229887, 0.20569770116486308, 0.20444216779257673, 0.1809205386252224, 0.16078084858290187, 0.2155430391077865, 0.18418025662435877, 0.16080905694136927, 0.20286579199361743, 0.2555749555290525, 0.17031889777026066, 0.16596039191706857, 0.20494897927688094, 0.18536746980264585, 0.18348493751567274, 0.18565093306774716, 0.19006766372672845, 0.19755543575283208, 0.18784439337450454, 0.1792559498950873, 0.2185185161367582, 0.2239116785851608, 0.24490139446997305, 0.22055294956686566, 0.19413592678055813, 0.2112134681974026, 0.4774152832634635, 0.1999871926488641, 0.17333451622996165, 0.7009022293523297, 0.16141096263612775, 0.16463503326507467, 0.18504775511279026, 0.37525306972696837, 0.21036378800885558, 0.16875589315221518, 0.73213187143895, 0.151506002154555, 0.44386798571238983, 0.22247509365816565, 0.1711089206610834, 0.24474516188191509, 0.37060146129993543, 0.20640839258981436, 0.14175743254425544, 0.25591454678323855, 0.1726855450343341, 0.17432154851761028, 0.1808054270454128, 0.18196542846059782, 0.17253518430675907, 0.17046890162417416, 0.17614197351065575, 0.18740372432075625, 0.17312117686049078, 0.07751401699892035, 0.07203353713231686, 0.0641785495033198, 0.05989056123270187, 0.0648940927298205, 0.0844429683611454, 0.06531874266264026, 0.07162007519239888, 0.06996243351939535]}, "mutation_prompt": null}
{"id": "c7308ee3-727b-4da0-b1a5-b0b2d274bb61", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0], 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1], 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.2, 0.1]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.2, -0.1])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDE", "description": "Enhance convergence by introducing a dynamic mechanism that adaptively updates the mutation factor and crossover rate based on a dynamic range, promoting faster exploration and exploitation.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65d114b5-1a6a-4d24-9cbb-d78a1d4235b5", "metadata": {"aucs": [0.783773689676867, 0.834916822405026, 0.8278834662184434, 0.18699549687139638, 0.8174001808907492, 0.8295575729656639, 0.8122696042342485, 0.8514808089839006, 0.839791392131545, 0.6010372953873715, 0.6792232273974228, 0.6724295544546529, 0.6500644279439765, 0.6982055593081653, 0.6884872409959291, 0.5630121892219575, 0.7069151580466502, 0.6727391647391239, 0.5455611542400872, 0.3267689499430344, 0.6072526619320593, 0.5675602741990575, 0.5073024362747949, 0.17467234598025916, 0.497958652420075, 0.16326749630456838, 0.49641488829359015, 0.16106138798527536, 0.5190696179522547, 0.5299679999512958, 0.14841500956164122, 0.4492137514803498, 0.14301807197873895, 0.1686297125761348, 0.16262542182707207, 0.16385971318460602, 0.9595510654209443, 0.9781152942992167, 0.9610549045502078, 0.9448724318044794, 0.9639128918648094, 0.9782973247563848, 0.9579627451001331, 0.9532480269574262, 0.9743325309484903, 0.19238960162362972, 0.4359690702613487, 0.3148374312693817, 0.2220283779636023, 0.44365282313045007, 0.3656106780160069, 0.2242747812968512, 0.37620763696470294, 0.08598284180130633, 0.19491821634467132, 0.493835792496613, 0.21665831682303083, 0.18723053869003292, 0.5076404098111233, 0.2897836611621919, 0.1958838031304907, 0.6897380392852488, 0.3394142360756749, 0.1583820934736312, 0.20957198017159595, 0.1467405025832832, 0.14441589002790245, 0.1219494241725364, 0.15804022533525153, 0.18630921567178182, 0.2607231824762093, 0.19918398278017335, 0.1431434384782866, 0.17435194529930154, 0.18156907170418268, 0.15256808613689843, 0.1709376943849784, 0.1886449917451829, 0.14601901512009952, 0.16235235784312063, 0.16005950091913257, 9.999999999998899e-05, 0.041119902296723576, 0.00033820449795951557, 9.999999999998899e-05, 0.074041021661169, 0.002776061667230323, 9.999999999998899e-05, 0.023662791823528817, 0.011266916607904576, 0.05819889940361678, 0.1607917184487131, 0.09557489123887153, 0.08592994245535013, 0.1552483382622586, 0.14317244943819862, 0.05421793007349185, 0.19240044982177307, 0.13683575179421548, 9.999999999998899e-05, 0.03352427488856591, 9.999999999998899e-05, 0.0025068697229495562, 0.013023054343950902, 0.0011228509089098448, 9.999999999998899e-05, 0.061142193342711426, 9.999999999998899e-05, 0.08958039147983277, 0.1492885746337197, 0.1290824370318958, 0.07927409358838466, 0.15710005955031558, 0.14351496992072132, 0.07729356272695509, 0.16781003554760077, 0.11025093945338926, 0.4475172349259172, 0.5410725626335304, 0.49697162543293183, 0.4548983489197992, 0.5414598010399538, 0.4912643076111357, 0.44135992905533616, 0.4981629668444262, 0.5094579763465921, 0.07712217841209945, 0.08257084001404313, 0.0647909357043005, 0.06238665953318323, 0.08579105400047249, 0.10038865249869255, 0.0873045737015975, 0.0976631172258774, 0.08748040893522468, 0.14362631193468256, 0.1383100941766563, 0.1296238513384893, 0.1222679571128561, 0.13252405158858094, 0.1476522334833109, 0.12071951400387604, 0.13135611293876448, 0.1546239144873407, 0.1978079793144475, 0.34458277865970033, 0.2532928902899274, 0.22768283092829356, 0.23923057510445123, 0.24375503598752846, 0.2778949086112945, 0.3443106481677304, 0.27080054347229887, 0.20569770116486308, 0.20444216779257673, 0.1809205386252224, 0.16078084858290187, 0.2155430391077865, 0.18418025662435877, 0.16080905694136927, 0.20286579199361743, 0.2555749555290525, 0.17031889777026066, 0.16596039191706857, 0.20494897927688094, 0.18536746980264585, 0.18348493751567274, 0.18565093306774716, 0.19006766372672845, 0.19755543575283208, 0.18784439337450454, 0.1792559498950873, 0.2185185161367582, 0.2239116785851608, 0.24490139446997305, 0.22055294956686566, 0.19413592678055813, 0.2112134681974026, 0.4774152832634635, 0.1999871926488641, 0.17333451622996165, 0.7009022293523297, 0.16141096263612775, 0.16463503326507467, 0.18504775511279026, 0.37525306972696837, 0.21036378800885558, 0.16875589315221518, 0.73213187143895, 0.151506002154555, 0.44386798571238983, 0.22247509365816565, 0.1711089206610834, 0.24474516188191509, 0.37060146129993543, 0.20640839258981436, 0.14175743254425544, 0.25591454678323855, 0.1726855450343341, 0.17432154851761028, 0.1808054270454128, 0.18196542846059782, 0.17253518430675907, 0.17046890162417416, 0.17614197351065575, 0.18740372432075625, 0.17312117686049078, 0.07751401699892035, 0.07203353713231686, 0.0641785495033198, 0.05989056123270187, 0.0648940927298205, 0.0844429683611454, 0.06531874266264026, 0.07162007519239888, 0.06996243351939535]}, "mutation_prompt": null}
{"id": "c2ba3860-26a7-4d51-8d07-5ebe5a2fb512", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0] + 0.1, 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1] + 0.1, 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.3, 0.2]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.3, -0.2])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImproved", "description": "Improve convergence speed by dynamically adjusting the mutation and crossover rates based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 72, "fitness": 0.3043438254580647, "feedback": "The algorithm EnhancedDynamicMutDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.25.", "error": "", "parent_id": "65d114b5-1a6a-4d24-9cbb-d78a1d4235b5", "metadata": {"aucs": [0.7887989145030521, 0.815347899816649, 0.8193025099383259, 0.8091270036964197, 0.8303989483040342, 0.8574517521977297, 0.801206386932901, 0.8363611773448187, 0.8364958273415443, 0.6680449517234566, 0.7020372247334143, 0.6884372400325778, 0.6700219330208099, 0.6987877385194685, 0.6834471824759963, 0.6769713161312567, 0.018634358907359427, 0.7239214735872668, 0.17255027583061, 0.1623753200845598, 0.17157596586413315, 0.5104964447119514, 0.16249623750936804, 0.5161781456398141, 0.17123928543793576, 0.14605208593314323, 0.1398402049859624, 0.4232515798953401, 0.13403186286560953, 0.3410452567237683, 0.16602195679949217, 0.45262728375808015, 0.16904008104886614, 0.44229323811286025, 0.14257260300788932, 0.13084335767632493, 0.9706399257845296, 0.9769202087436079, 0.9779720546892654, 0.9608148477878852, 0.9597720653269447, 0.9712755166817727, 0.9412010631917073, 0.9697289767617296, 0.9784536458940575, 0.3354726122027223, 0.5003628440928813, 0.37844327605478134, 0.140864658299781, 0.5269410749934021, 0.44529593804806833, 0.24249403863365415, 0.49807492122266817, 0.08573613036306615, 0.23336982803593498, 0.3314808285315919, 0.570998528066265, 0.45671677706848535, 0.2066782589514894, 0.5937698300912189, 0.30679954059923364, 0.6356737621098532, 0.21661599864327918, 0.19041968444627344, 0.38945521924919035, 0.20100930729017774, 0.1911325821537625, 0.3041354155780359, 0.21169024954735127, 0.20399563135516885, 0.12457543420755413, 0.18488863391732635, 0.1911151934244495, 0.21757301050299593, 0.05212233267920985, 0.21440576846565884, 0.26667732194093263, 0.2390478051299484, 0.12957729835034792, 0.15804227934528536, 0.16556836090231752, 0.0001840524601569582, 0.07718202102017024, 0.04551190230081814, 9.999999999998899e-05, 0.19844561503112734, 0.01711847322753801, 0.05466878521248941, 0.004289160199359321, 0.03725664611598056, 0.09145346370607954, 0.15413590936346977, 0.054148807881113536, 0.059223339596853886, 0.2831180086087073, 0.13985573609411128, 0.12037038934662125, 0.12318488372410863, 0.07481504174637499, 9.999999999998899e-05, 0.041139056235042326, 9.999999999998899e-05, 0.022638720794023515, 0.10816402424816063, 0.07486656053031238, 0.002555514253686164, 0.09649692817257605, 0.14767605568174402, 0.1410321200460819, 0.1934155012847737, 0.13315014908913014, 0.1678273484505396, 0.22439121735110545, 0.15366928024500814, 0.12191102643695306, 0.21272508906315668, 0.15209572871064791, 0.4907579121830328, 0.6160204276136616, 0.5668590978188532, 0.49251021147499374, 0.5341178376207492, 0.5492175931112167, 0.4842320389860938, 0.6071758903838118, 0.5529336272929948, 0.08203967212696384, 0.1000975392694119, 0.11773590933463307, 0.08412499327285028, 0.13201553322182824, 0.12229816285281991, 0.09867856138470654, 0.09191493142513485, 0.11502897434007153, 0.1389482460314806, 0.13074938643318124, 0.16732328909698213, 0.1348472194716973, 0.12161653441610054, 0.22937575258980292, 0.17032317181086476, 0.18484078505134838, 0.12179754750396554, 0.2435299508186669, 0.3582947273750209, 0.3151221882417571, 0.23812345755664233, 0.34989451191706467, 0.29606818076365393, 0.26573732113559, 0.45593834622425056, 0.31739740820715967, 0.19093502591003497, 0.24978789524913303, 0.1959525909645492, 0.14485453412126914, 0.35721559949061543, 0.2441988784540695, 0.17646851164295896, 0.2976391198735351, 0.2225588662167658, 0.1854599248802794, 0.18057045875268252, 0.17699677665029356, 0.2128526086514283, 0.16078813150696458, 0.17783740427750105, 0.1826782970001677, 0.1678680824225297, 0.17452488496678653, 0.19555663787393773, 0.19786734350917634, 0.22187783723367438, 0.495661358212924, 0.2127144080454204, 0.2037153882411855, 0.2010394259204602, 0.5632006827253682, 0.6510734969691824, 0.18555978138958185, 0.12323546894412774, 0.17933848212492742, 0.6596935121261382, 0.7793970002295124, 0.5799534594712399, 0.19214118613238584, 0.1636943984618643, 0.547870489309125, 0.3484963591556651, 0.19249971299433144, 0.11113392493318042, 0.430635745066395, 0.5775666777350943, 0.12485817279670408, 0.19603222321243896, 0.6783150120442729, 0.5828240073448059, 0.18296874713793, 0.1716543247468919, 0.18139692519123085, 0.17056636561723826, 0.18203995444862175, 0.17799737191484488, 0.18189016554737347, 0.17929965853693397, 0.20201179617216392, 0.07376444544789207, 0.0662839783340462, 0.06769962705341259, 0.08652947034652791, 0.07879999553207728, 0.0866654570046177, 0.07223505690284127, 0.08133249953930788, 0.06596347719760365]}, "mutation_prompt": null}
{"id": "9dd592a9-38aa-44ab-be4b-e8227d6740f5", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0] + 0.1, 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1] + 0.1, 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.3, 0.2]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.3, -0.2])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImproved", "description": "Improve convergence speed by dynamically adjusting the mutation and crossover rates based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c2ba3860-26a7-4d51-8d07-5ebe5a2fb512", "metadata": {"aucs": [0.7887989145030521, 0.815347899816649, 0.8193025099383259, 0.8091270036964197, 0.8303989483040342, 0.8574517521977297, 0.801206386932901, 0.8363611773448187, 0.8364958273415443, 0.6680449517234566, 0.7020372247334143, 0.6884372400325778, 0.6700219330208099, 0.6987877385194685, 0.6834471824759963, 0.6769713161312567, 0.018634358907359427, 0.7239214735872668, 0.17255027583061, 0.1623753200845598, 0.17157596586413315, 0.5104964447119514, 0.16249623750936804, 0.5161781456398141, 0.17123928543793576, 0.14605208593314323, 0.1398402049859624, 0.4232515798953401, 0.13403186286560953, 0.3410452567237683, 0.16602195679949217, 0.45262728375808015, 0.16904008104886614, 0.44229323811286025, 0.14257260300788932, 0.13084335767632493, 0.9706399257845296, 0.9769202087436079, 0.9779720546892654, 0.9608148477878852, 0.9597720653269447, 0.9712755166817727, 0.9412010631917073, 0.9697289767617296, 0.9784536458940575, 0.3354726122027223, 0.5003628440928813, 0.37844327605478134, 0.140864658299781, 0.5269410749934021, 0.44529593804806833, 0.24249403863365415, 0.49807492122266817, 0.08573613036306615, 0.23336982803593498, 0.3314808285315919, 0.570998528066265, 0.45671677706848535, 0.2066782589514894, 0.5937698300912189, 0.30679954059923364, 0.6356737621098532, 0.21661599864327918, 0.19041968444627344, 0.38945521924919035, 0.20100930729017774, 0.1911325821537625, 0.3041354155780359, 0.21169024954735127, 0.20399563135516885, 0.12457543420755413, 0.18488863391732635, 0.1911151934244495, 0.21757301050299593, 0.05212233267920985, 0.21440576846565884, 0.26667732194093263, 0.2390478051299484, 0.12957729835034792, 0.15804227934528536, 0.16556836090231752, 0.0001840524601569582, 0.07718202102017024, 0.04551190230081814, 9.999999999998899e-05, 0.19844561503112734, 0.01711847322753801, 0.05466878521248941, 0.004289160199359321, 0.03725664611598056, 0.09145346370607954, 0.15413590936346977, 0.054148807881113536, 0.059223339596853886, 0.2831180086087073, 0.13985573609411128, 0.12037038934662125, 0.12318488372410863, 0.07481504174637499, 9.999999999998899e-05, 0.041139056235042326, 9.999999999998899e-05, 0.022638720794023515, 0.10816402424816063, 0.07486656053031238, 0.002555514253686164, 0.09649692817257605, 0.14767605568174402, 0.1410321200460819, 0.1934155012847737, 0.13315014908913014, 0.1678273484505396, 0.22439121735110545, 0.15366928024500814, 0.12191102643695306, 0.21272508906315668, 0.15209572871064791, 0.4907579121830328, 0.6160204276136616, 0.5668590978188532, 0.49251021147499374, 0.5341178376207492, 0.5492175931112167, 0.4842320389860938, 0.6071758903838118, 0.5529336272929948, 0.08203967212696384, 0.1000975392694119, 0.11773590933463307, 0.08412499327285028, 0.13201553322182824, 0.12229816285281991, 0.09867856138470654, 0.09191493142513485, 0.11502897434007153, 0.1389482460314806, 0.13074938643318124, 0.16732328909698213, 0.1348472194716973, 0.12161653441610054, 0.22937575258980292, 0.17032317181086476, 0.18484078505134838, 0.12179754750396554, 0.2435299508186669, 0.3582947273750209, 0.3151221882417571, 0.23812345755664233, 0.34989451191706467, 0.29606818076365393, 0.26573732113559, 0.45593834622425056, 0.31739740820715967, 0.19093502591003497, 0.24978789524913303, 0.1959525909645492, 0.14485453412126914, 0.35721559949061543, 0.2441988784540695, 0.17646851164295896, 0.2976391198735351, 0.2225588662167658, 0.1854599248802794, 0.18057045875268252, 0.17699677665029356, 0.2128526086514283, 0.16078813150696458, 0.17783740427750105, 0.1826782970001677, 0.1678680824225297, 0.17452488496678653, 0.19555663787393773, 0.19786734350917634, 0.22187783723367438, 0.495661358212924, 0.2127144080454204, 0.2037153882411855, 0.2010394259204602, 0.5632006827253682, 0.6510734969691824, 0.18555978138958185, 0.12323546894412774, 0.17933848212492742, 0.6596935121261382, 0.7793970002295124, 0.5799534594712399, 0.19214118613238584, 0.1636943984618643, 0.547870489309125, 0.3484963591556651, 0.19249971299433144, 0.11113392493318042, 0.430635745066395, 0.5775666777350943, 0.12485817279670408, 0.19603222321243896, 0.6783150120442729, 0.5828240073448059, 0.18296874713793, 0.1716543247468919, 0.18139692519123085, 0.17056636561723826, 0.18203995444862175, 0.17799737191484488, 0.18189016554737347, 0.17929965853693397, 0.20201179617216392, 0.07376444544789207, 0.0662839783340462, 0.06769962705341259, 0.08652947034652791, 0.07879999553207728, 0.0866654570046177, 0.07223505690284127, 0.08133249953930788, 0.06596347719760365]}, "mutation_prompt": null}
{"id": "d8517ee4-811a-42b8-85a8-5c3a6bd35fde", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0] + 0.1, 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1] + 0.1, 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.3, 0.2]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.3, -0.2])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImproved", "description": "Improve convergence speed by dynamically adjusting the mutation and crossover rates based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c2ba3860-26a7-4d51-8d07-5ebe5a2fb512", "metadata": {"aucs": [0.7887989145030521, 0.815347899816649, 0.8193025099383259, 0.8091270036964197, 0.8303989483040342, 0.8574517521977297, 0.801206386932901, 0.8363611773448187, 0.8364958273415443, 0.6680449517234566, 0.7020372247334143, 0.6884372400325778, 0.6700219330208099, 0.6987877385194685, 0.6834471824759963, 0.6769713161312567, 0.018634358907359427, 0.7239214735872668, 0.17255027583061, 0.1623753200845598, 0.17157596586413315, 0.5104964447119514, 0.16249623750936804, 0.5161781456398141, 0.17123928543793576, 0.14605208593314323, 0.1398402049859624, 0.4232515798953401, 0.13403186286560953, 0.3410452567237683, 0.16602195679949217, 0.45262728375808015, 0.16904008104886614, 0.44229323811286025, 0.14257260300788932, 0.13084335767632493, 0.9706399257845296, 0.9769202087436079, 0.9779720546892654, 0.9608148477878852, 0.9597720653269447, 0.9712755166817727, 0.9412010631917073, 0.9697289767617296, 0.9784536458940575, 0.3354726122027223, 0.5003628440928813, 0.37844327605478134, 0.140864658299781, 0.5269410749934021, 0.44529593804806833, 0.24249403863365415, 0.49807492122266817, 0.08573613036306615, 0.23336982803593498, 0.3314808285315919, 0.570998528066265, 0.45671677706848535, 0.2066782589514894, 0.5937698300912189, 0.30679954059923364, 0.6356737621098532, 0.21661599864327918, 0.19041968444627344, 0.38945521924919035, 0.20100930729017774, 0.1911325821537625, 0.3041354155780359, 0.21169024954735127, 0.20399563135516885, 0.12457543420755413, 0.18488863391732635, 0.1911151934244495, 0.21757301050299593, 0.05212233267920985, 0.21440576846565884, 0.26667732194093263, 0.2390478051299484, 0.12957729835034792, 0.15804227934528536, 0.16556836090231752, 0.0001840524601569582, 0.07718202102017024, 0.04551190230081814, 9.999999999998899e-05, 0.19844561503112734, 0.01711847322753801, 0.05466878521248941, 0.004289160199359321, 0.03725664611598056, 0.09145346370607954, 0.15413590936346977, 0.054148807881113536, 0.059223339596853886, 0.2831180086087073, 0.13985573609411128, 0.12037038934662125, 0.12318488372410863, 0.07481504174637499, 9.999999999998899e-05, 0.041139056235042326, 9.999999999998899e-05, 0.022638720794023515, 0.10816402424816063, 0.07486656053031238, 0.002555514253686164, 0.09649692817257605, 0.14767605568174402, 0.1410321200460819, 0.1934155012847737, 0.13315014908913014, 0.1678273484505396, 0.22439121735110545, 0.15366928024500814, 0.12191102643695306, 0.21272508906315668, 0.15209572871064791, 0.4907579121830328, 0.6160204276136616, 0.5668590978188532, 0.49251021147499374, 0.5341178376207492, 0.5492175931112167, 0.4842320389860938, 0.6071758903838118, 0.5529336272929948, 0.08203967212696384, 0.1000975392694119, 0.11773590933463307, 0.08412499327285028, 0.13201553322182824, 0.12229816285281991, 0.09867856138470654, 0.09191493142513485, 0.11502897434007153, 0.1389482460314806, 0.13074938643318124, 0.16732328909698213, 0.1348472194716973, 0.12161653441610054, 0.22937575258980292, 0.17032317181086476, 0.18484078505134838, 0.12179754750396554, 0.2435299508186669, 0.3582947273750209, 0.3151221882417571, 0.23812345755664233, 0.34989451191706467, 0.29606818076365393, 0.26573732113559, 0.45593834622425056, 0.31739740820715967, 0.19093502591003497, 0.24978789524913303, 0.1959525909645492, 0.14485453412126914, 0.35721559949061543, 0.2441988784540695, 0.17646851164295896, 0.2976391198735351, 0.2225588662167658, 0.1854599248802794, 0.18057045875268252, 0.17699677665029356, 0.2128526086514283, 0.16078813150696458, 0.17783740427750105, 0.1826782970001677, 0.1678680824225297, 0.17452488496678653, 0.19555663787393773, 0.19786734350917634, 0.22187783723367438, 0.495661358212924, 0.2127144080454204, 0.2037153882411855, 0.2010394259204602, 0.5632006827253682, 0.6510734969691824, 0.18555978138958185, 0.12323546894412774, 0.17933848212492742, 0.6596935121261382, 0.7793970002295124, 0.5799534594712399, 0.19214118613238584, 0.1636943984618643, 0.547870489309125, 0.3484963591556651, 0.19249971299433144, 0.11113392493318042, 0.430635745066395, 0.5775666777350943, 0.12485817279670408, 0.19603222321243896, 0.6783150120442729, 0.5828240073448059, 0.18296874713793, 0.1716543247468919, 0.18139692519123085, 0.17056636561723826, 0.18203995444862175, 0.17799737191484488, 0.18189016554737347, 0.17929965853693397, 0.20201179617216392, 0.07376444544789207, 0.0662839783340462, 0.06769962705341259, 0.08652947034652791, 0.07879999553207728, 0.0866654570046177, 0.07223505690284127, 0.08133249953930788, 0.06596347719760365]}, "mutation_prompt": null}
{"id": "34ac22e5-ada3-47ad-866b-567d53e1bf0c", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0] + 0.1, 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1] + 0.1, 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.3, 0.2]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.3, -0.2])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImproved", "description": "Improve convergence speed by dynamically adjusting the mutation and crossover rates based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c2ba3860-26a7-4d51-8d07-5ebe5a2fb512", "metadata": {"aucs": [0.7887989145030521, 0.815347899816649, 0.8193025099383259, 0.8091270036964197, 0.8303989483040342, 0.8574517521977297, 0.801206386932901, 0.8363611773448187, 0.8364958273415443, 0.6680449517234566, 0.7020372247334143, 0.6884372400325778, 0.6700219330208099, 0.6987877385194685, 0.6834471824759963, 0.6769713161312567, 0.018634358907359427, 0.7239214735872668, 0.17255027583061, 0.1623753200845598, 0.17157596586413315, 0.5104964447119514, 0.16249623750936804, 0.5161781456398141, 0.17123928543793576, 0.14605208593314323, 0.1398402049859624, 0.4232515798953401, 0.13403186286560953, 0.3410452567237683, 0.16602195679949217, 0.45262728375808015, 0.16904008104886614, 0.44229323811286025, 0.14257260300788932, 0.13084335767632493, 0.9706399257845296, 0.9769202087436079, 0.9779720546892654, 0.9608148477878852, 0.9597720653269447, 0.9712755166817727, 0.9412010631917073, 0.9697289767617296, 0.9784536458940575, 0.3354726122027223, 0.5003628440928813, 0.37844327605478134, 0.140864658299781, 0.5269410749934021, 0.44529593804806833, 0.24249403863365415, 0.49807492122266817, 0.08573613036306615, 0.23336982803593498, 0.3314808285315919, 0.570998528066265, 0.45671677706848535, 0.2066782589514894, 0.5937698300912189, 0.30679954059923364, 0.6356737621098532, 0.21661599864327918, 0.19041968444627344, 0.38945521924919035, 0.20100930729017774, 0.1911325821537625, 0.3041354155780359, 0.21169024954735127, 0.20399563135516885, 0.12457543420755413, 0.18488863391732635, 0.1911151934244495, 0.21757301050299593, 0.05212233267920985, 0.21440576846565884, 0.26667732194093263, 0.2390478051299484, 0.12957729835034792, 0.15804227934528536, 0.16556836090231752, 0.0001840524601569582, 0.07718202102017024, 0.04551190230081814, 9.999999999998899e-05, 0.19844561503112734, 0.01711847322753801, 0.05466878521248941, 0.004289160199359321, 0.03725664611598056, 0.09145346370607954, 0.15413590936346977, 0.054148807881113536, 0.059223339596853886, 0.2831180086087073, 0.13985573609411128, 0.12037038934662125, 0.12318488372410863, 0.07481504174637499, 9.999999999998899e-05, 0.041139056235042326, 9.999999999998899e-05, 0.022638720794023515, 0.10816402424816063, 0.07486656053031238, 0.002555514253686164, 0.09649692817257605, 0.14767605568174402, 0.1410321200460819, 0.1934155012847737, 0.13315014908913014, 0.1678273484505396, 0.22439121735110545, 0.15366928024500814, 0.12191102643695306, 0.21272508906315668, 0.15209572871064791, 0.4907579121830328, 0.6160204276136616, 0.5668590978188532, 0.49251021147499374, 0.5341178376207492, 0.5492175931112167, 0.4842320389860938, 0.6071758903838118, 0.5529336272929948, 0.08203967212696384, 0.1000975392694119, 0.11773590933463307, 0.08412499327285028, 0.13201553322182824, 0.12229816285281991, 0.09867856138470654, 0.09191493142513485, 0.11502897434007153, 0.1389482460314806, 0.13074938643318124, 0.16732328909698213, 0.1348472194716973, 0.12161653441610054, 0.22937575258980292, 0.17032317181086476, 0.18484078505134838, 0.12179754750396554, 0.2435299508186669, 0.3582947273750209, 0.3151221882417571, 0.23812345755664233, 0.34989451191706467, 0.29606818076365393, 0.26573732113559, 0.45593834622425056, 0.31739740820715967, 0.19093502591003497, 0.24978789524913303, 0.1959525909645492, 0.14485453412126914, 0.35721559949061543, 0.2441988784540695, 0.17646851164295896, 0.2976391198735351, 0.2225588662167658, 0.1854599248802794, 0.18057045875268252, 0.17699677665029356, 0.2128526086514283, 0.16078813150696458, 0.17783740427750105, 0.1826782970001677, 0.1678680824225297, 0.17452488496678653, 0.19555663787393773, 0.19786734350917634, 0.22187783723367438, 0.495661358212924, 0.2127144080454204, 0.2037153882411855, 0.2010394259204602, 0.5632006827253682, 0.6510734969691824, 0.18555978138958185, 0.12323546894412774, 0.17933848212492742, 0.6596935121261382, 0.7793970002295124, 0.5799534594712399, 0.19214118613238584, 0.1636943984618643, 0.547870489309125, 0.3484963591556651, 0.19249971299433144, 0.11113392493318042, 0.430635745066395, 0.5775666777350943, 0.12485817279670408, 0.19603222321243896, 0.6783150120442729, 0.5828240073448059, 0.18296874713793, 0.1716543247468919, 0.18139692519123085, 0.17056636561723826, 0.18203995444862175, 0.17799737191484488, 0.18189016554737347, 0.17929965853693397, 0.20201179617216392, 0.07376444544789207, 0.0662839783340462, 0.06769962705341259, 0.08652947034652791, 0.07879999553207728, 0.0866654570046177, 0.07223505690284127, 0.08133249953930788, 0.06596347719760365]}, "mutation_prompt": null}
{"id": "6ed270ca-3366-4ba5-a390-3bbd2b0cca90", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0] + 0.1, 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1] + 0.1, 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.3, 0.2]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.3, -0.2])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImproved", "description": "Improve convergence speed by dynamically adjusting the mutation and crossover rates based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c2ba3860-26a7-4d51-8d07-5ebe5a2fb512", "metadata": {"aucs": [0.7887989145030521, 0.815347899816649, 0.8193025099383259, 0.8091270036964197, 0.8303989483040342, 0.8574517521977297, 0.801206386932901, 0.8363611773448187, 0.8364958273415443, 0.6680449517234566, 0.7020372247334143, 0.6884372400325778, 0.6700219330208099, 0.6987877385194685, 0.6834471824759963, 0.6769713161312567, 0.018634358907359427, 0.7239214735872668, 0.17255027583061, 0.1623753200845598, 0.17157596586413315, 0.5104964447119514, 0.16249623750936804, 0.5161781456398141, 0.17123928543793576, 0.14605208593314323, 0.1398402049859624, 0.4232515798953401, 0.13403186286560953, 0.3410452567237683, 0.16602195679949217, 0.45262728375808015, 0.16904008104886614, 0.44229323811286025, 0.14257260300788932, 0.13084335767632493, 0.9706399257845296, 0.9769202087436079, 0.9779720546892654, 0.9608148477878852, 0.9597720653269447, 0.9712755166817727, 0.9412010631917073, 0.9697289767617296, 0.9784536458940575, 0.3354726122027223, 0.5003628440928813, 0.37844327605478134, 0.140864658299781, 0.5269410749934021, 0.44529593804806833, 0.24249403863365415, 0.49807492122266817, 0.08573613036306615, 0.23336982803593498, 0.3314808285315919, 0.570998528066265, 0.45671677706848535, 0.2066782589514894, 0.5937698300912189, 0.30679954059923364, 0.6356737621098532, 0.21661599864327918, 0.19041968444627344, 0.38945521924919035, 0.20100930729017774, 0.1911325821537625, 0.3041354155780359, 0.21169024954735127, 0.20399563135516885, 0.12457543420755413, 0.18488863391732635, 0.1911151934244495, 0.21757301050299593, 0.05212233267920985, 0.21440576846565884, 0.26667732194093263, 0.2390478051299484, 0.12957729835034792, 0.15804227934528536, 0.16556836090231752, 0.0001840524601569582, 0.07718202102017024, 0.04551190230081814, 9.999999999998899e-05, 0.19844561503112734, 0.01711847322753801, 0.05466878521248941, 0.004289160199359321, 0.03725664611598056, 0.09145346370607954, 0.15413590936346977, 0.054148807881113536, 0.059223339596853886, 0.2831180086087073, 0.13985573609411128, 0.12037038934662125, 0.12318488372410863, 0.07481504174637499, 9.999999999998899e-05, 0.041139056235042326, 9.999999999998899e-05, 0.022638720794023515, 0.10816402424816063, 0.07486656053031238, 0.002555514253686164, 0.09649692817257605, 0.14767605568174402, 0.1410321200460819, 0.1934155012847737, 0.13315014908913014, 0.1678273484505396, 0.22439121735110545, 0.15366928024500814, 0.12191102643695306, 0.21272508906315668, 0.15209572871064791, 0.4907579121830328, 0.6160204276136616, 0.5668590978188532, 0.49251021147499374, 0.5341178376207492, 0.5492175931112167, 0.4842320389860938, 0.6071758903838118, 0.5529336272929948, 0.08203967212696384, 0.1000975392694119, 0.11773590933463307, 0.08412499327285028, 0.13201553322182824, 0.12229816285281991, 0.09867856138470654, 0.09191493142513485, 0.11502897434007153, 0.1389482460314806, 0.13074938643318124, 0.16732328909698213, 0.1348472194716973, 0.12161653441610054, 0.22937575258980292, 0.17032317181086476, 0.18484078505134838, 0.12179754750396554, 0.2435299508186669, 0.3582947273750209, 0.3151221882417571, 0.23812345755664233, 0.34989451191706467, 0.29606818076365393, 0.26573732113559, 0.45593834622425056, 0.31739740820715967, 0.19093502591003497, 0.24978789524913303, 0.1959525909645492, 0.14485453412126914, 0.35721559949061543, 0.2441988784540695, 0.17646851164295896, 0.2976391198735351, 0.2225588662167658, 0.1854599248802794, 0.18057045875268252, 0.17699677665029356, 0.2128526086514283, 0.16078813150696458, 0.17783740427750105, 0.1826782970001677, 0.1678680824225297, 0.17452488496678653, 0.19555663787393773, 0.19786734350917634, 0.22187783723367438, 0.495661358212924, 0.2127144080454204, 0.2037153882411855, 0.2010394259204602, 0.5632006827253682, 0.6510734969691824, 0.18555978138958185, 0.12323546894412774, 0.17933848212492742, 0.6596935121261382, 0.7793970002295124, 0.5799534594712399, 0.19214118613238584, 0.1636943984618643, 0.547870489309125, 0.3484963591556651, 0.19249971299433144, 0.11113392493318042, 0.430635745066395, 0.5775666777350943, 0.12485817279670408, 0.19603222321243896, 0.6783150120442729, 0.5828240073448059, 0.18296874713793, 0.1716543247468919, 0.18139692519123085, 0.17056636561723826, 0.18203995444862175, 0.17799737191484488, 0.18189016554737347, 0.17929965853693397, 0.20201179617216392, 0.07376444544789207, 0.0662839783340462, 0.06769962705341259, 0.08652947034652791, 0.07879999553207728, 0.0866654570046177, 0.07223505690284127, 0.08133249953930788, 0.06596347719760365]}, "mutation_prompt": null}
{"id": "9c51a794-98a0-4434-9286-025ccfcf477d", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0] + 0.1, 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1] + 0.1, 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.3, 0.2]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.3, -0.2])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImproved", "description": "Improve convergence speed by dynamically adjusting the mutation and crossover rates based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c2ba3860-26a7-4d51-8d07-5ebe5a2fb512", "metadata": {"aucs": [0.7887989145030521, 0.815347899816649, 0.8193025099383259, 0.8091270036964197, 0.8303989483040342, 0.8574517521977297, 0.801206386932901, 0.8363611773448187, 0.8364958273415443, 0.6680449517234566, 0.7020372247334143, 0.6884372400325778, 0.6700219330208099, 0.6987877385194685, 0.6834471824759963, 0.6769713161312567, 0.018634358907359427, 0.7239214735872668, 0.17255027583061, 0.1623753200845598, 0.17157596586413315, 0.5104964447119514, 0.16249623750936804, 0.5161781456398141, 0.17123928543793576, 0.14605208593314323, 0.1398402049859624, 0.4232515798953401, 0.13403186286560953, 0.3410452567237683, 0.16602195679949217, 0.45262728375808015, 0.16904008104886614, 0.44229323811286025, 0.14257260300788932, 0.13084335767632493, 0.9706399257845296, 0.9769202087436079, 0.9779720546892654, 0.9608148477878852, 0.9597720653269447, 0.9712755166817727, 0.9412010631917073, 0.9697289767617296, 0.9784536458940575, 0.3354726122027223, 0.5003628440928813, 0.37844327605478134, 0.140864658299781, 0.5269410749934021, 0.44529593804806833, 0.24249403863365415, 0.49807492122266817, 0.08573613036306615, 0.23336982803593498, 0.3314808285315919, 0.570998528066265, 0.45671677706848535, 0.2066782589514894, 0.5937698300912189, 0.30679954059923364, 0.6356737621098532, 0.21661599864327918, 0.19041968444627344, 0.38945521924919035, 0.20100930729017774, 0.1911325821537625, 0.3041354155780359, 0.21169024954735127, 0.20399563135516885, 0.12457543420755413, 0.18488863391732635, 0.1911151934244495, 0.21757301050299593, 0.05212233267920985, 0.21440576846565884, 0.26667732194093263, 0.2390478051299484, 0.12957729835034792, 0.15804227934528536, 0.16556836090231752, 0.0001840524601569582, 0.07718202102017024, 0.04551190230081814, 9.999999999998899e-05, 0.19844561503112734, 0.01711847322753801, 0.05466878521248941, 0.004289160199359321, 0.03725664611598056, 0.09145346370607954, 0.15413590936346977, 0.054148807881113536, 0.059223339596853886, 0.2831180086087073, 0.13985573609411128, 0.12037038934662125, 0.12318488372410863, 0.07481504174637499, 9.999999999998899e-05, 0.041139056235042326, 9.999999999998899e-05, 0.022638720794023515, 0.10816402424816063, 0.07486656053031238, 0.002555514253686164, 0.09649692817257605, 0.14767605568174402, 0.1410321200460819, 0.1934155012847737, 0.13315014908913014, 0.1678273484505396, 0.22439121735110545, 0.15366928024500814, 0.12191102643695306, 0.21272508906315668, 0.15209572871064791, 0.4907579121830328, 0.6160204276136616, 0.5668590978188532, 0.49251021147499374, 0.5341178376207492, 0.5492175931112167, 0.4842320389860938, 0.6071758903838118, 0.5529336272929948, 0.08203967212696384, 0.1000975392694119, 0.11773590933463307, 0.08412499327285028, 0.13201553322182824, 0.12229816285281991, 0.09867856138470654, 0.09191493142513485, 0.11502897434007153, 0.1389482460314806, 0.13074938643318124, 0.16732328909698213, 0.1348472194716973, 0.12161653441610054, 0.22937575258980292, 0.17032317181086476, 0.18484078505134838, 0.12179754750396554, 0.2435299508186669, 0.3582947273750209, 0.3151221882417571, 0.23812345755664233, 0.34989451191706467, 0.29606818076365393, 0.26573732113559, 0.45593834622425056, 0.31739740820715967, 0.19093502591003497, 0.24978789524913303, 0.1959525909645492, 0.14485453412126914, 0.35721559949061543, 0.2441988784540695, 0.17646851164295896, 0.2976391198735351, 0.2225588662167658, 0.1854599248802794, 0.18057045875268252, 0.17699677665029356, 0.2128526086514283, 0.16078813150696458, 0.17783740427750105, 0.1826782970001677, 0.1678680824225297, 0.17452488496678653, 0.19555663787393773, 0.19786734350917634, 0.22187783723367438, 0.495661358212924, 0.2127144080454204, 0.2037153882411855, 0.2010394259204602, 0.5632006827253682, 0.6510734969691824, 0.18555978138958185, 0.12323546894412774, 0.17933848212492742, 0.6596935121261382, 0.7793970002295124, 0.5799534594712399, 0.19214118613238584, 0.1636943984618643, 0.547870489309125, 0.3484963591556651, 0.19249971299433144, 0.11113392493318042, 0.430635745066395, 0.5775666777350943, 0.12485817279670408, 0.19603222321243896, 0.6783150120442729, 0.5828240073448059, 0.18296874713793, 0.1716543247468919, 0.18139692519123085, 0.17056636561723826, 0.18203995444862175, 0.17799737191484488, 0.18189016554737347, 0.17929965853693397, 0.20201179617216392, 0.07376444544789207, 0.0662839783340462, 0.06769962705341259, 0.08652947034652791, 0.07879999553207728, 0.0866654570046177, 0.07223505690284127, 0.08133249953930788, 0.06596347719760365]}, "mutation_prompt": null}
{"id": "5d548a1f-cb30-4b85-926a-547ee3f81c9d", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0] + 0.1, 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1] + 0.1, 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.3, 0.2]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.3, -0.2])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImproved", "description": "Improve convergence speed by dynamically adjusting the mutation and crossover rates based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c2ba3860-26a7-4d51-8d07-5ebe5a2fb512", "metadata": {"aucs": [0.7887989145030521, 0.815347899816649, 0.8193025099383259, 0.8091270036964197, 0.8303989483040342, 0.8574517521977297, 0.801206386932901, 0.8363611773448187, 0.8364958273415443, 0.6680449517234566, 0.7020372247334143, 0.6884372400325778, 0.6700219330208099, 0.6987877385194685, 0.6834471824759963, 0.6769713161312567, 0.018634358907359427, 0.7239214735872668, 0.17255027583061, 0.1623753200845598, 0.17157596586413315, 0.5104964447119514, 0.16249623750936804, 0.5161781456398141, 0.17123928543793576, 0.14605208593314323, 0.1398402049859624, 0.4232515798953401, 0.13403186286560953, 0.3410452567237683, 0.16602195679949217, 0.45262728375808015, 0.16904008104886614, 0.44229323811286025, 0.14257260300788932, 0.13084335767632493, 0.9706399257845296, 0.9769202087436079, 0.9779720546892654, 0.9608148477878852, 0.9597720653269447, 0.9712755166817727, 0.9412010631917073, 0.9697289767617296, 0.9784536458940575, 0.3354726122027223, 0.5003628440928813, 0.37844327605478134, 0.140864658299781, 0.5269410749934021, 0.44529593804806833, 0.24249403863365415, 0.49807492122266817, 0.08573613036306615, 0.23336982803593498, 0.3314808285315919, 0.570998528066265, 0.45671677706848535, 0.2066782589514894, 0.5937698300912189, 0.30679954059923364, 0.6356737621098532, 0.21661599864327918, 0.19041968444627344, 0.38945521924919035, 0.20100930729017774, 0.1911325821537625, 0.3041354155780359, 0.21169024954735127, 0.20399563135516885, 0.12457543420755413, 0.18488863391732635, 0.1911151934244495, 0.21757301050299593, 0.05212233267920985, 0.21440576846565884, 0.26667732194093263, 0.2390478051299484, 0.12957729835034792, 0.15804227934528536, 0.16556836090231752, 0.0001840524601569582, 0.07718202102017024, 0.04551190230081814, 9.999999999998899e-05, 0.19844561503112734, 0.01711847322753801, 0.05466878521248941, 0.004289160199359321, 0.03725664611598056, 0.09145346370607954, 0.15413590936346977, 0.054148807881113536, 0.059223339596853886, 0.2831180086087073, 0.13985573609411128, 0.12037038934662125, 0.12318488372410863, 0.07481504174637499, 9.999999999998899e-05, 0.041139056235042326, 9.999999999998899e-05, 0.022638720794023515, 0.10816402424816063, 0.07486656053031238, 0.002555514253686164, 0.09649692817257605, 0.14767605568174402, 0.1410321200460819, 0.1934155012847737, 0.13315014908913014, 0.1678273484505396, 0.22439121735110545, 0.15366928024500814, 0.12191102643695306, 0.21272508906315668, 0.15209572871064791, 0.4907579121830328, 0.6160204276136616, 0.5668590978188532, 0.49251021147499374, 0.5341178376207492, 0.5492175931112167, 0.4842320389860938, 0.6071758903838118, 0.5529336272929948, 0.08203967212696384, 0.1000975392694119, 0.11773590933463307, 0.08412499327285028, 0.13201553322182824, 0.12229816285281991, 0.09867856138470654, 0.09191493142513485, 0.11502897434007153, 0.1389482460314806, 0.13074938643318124, 0.16732328909698213, 0.1348472194716973, 0.12161653441610054, 0.22937575258980292, 0.17032317181086476, 0.18484078505134838, 0.12179754750396554, 0.2435299508186669, 0.3582947273750209, 0.3151221882417571, 0.23812345755664233, 0.34989451191706467, 0.29606818076365393, 0.26573732113559, 0.45593834622425056, 0.31739740820715967, 0.19093502591003497, 0.24978789524913303, 0.1959525909645492, 0.14485453412126914, 0.35721559949061543, 0.2441988784540695, 0.17646851164295896, 0.2976391198735351, 0.2225588662167658, 0.1854599248802794, 0.18057045875268252, 0.17699677665029356, 0.2128526086514283, 0.16078813150696458, 0.17783740427750105, 0.1826782970001677, 0.1678680824225297, 0.17452488496678653, 0.19555663787393773, 0.19786734350917634, 0.22187783723367438, 0.495661358212924, 0.2127144080454204, 0.2037153882411855, 0.2010394259204602, 0.5632006827253682, 0.6510734969691824, 0.18555978138958185, 0.12323546894412774, 0.17933848212492742, 0.6596935121261382, 0.7793970002295124, 0.5799534594712399, 0.19214118613238584, 0.1636943984618643, 0.547870489309125, 0.3484963591556651, 0.19249971299433144, 0.11113392493318042, 0.430635745066395, 0.5775666777350943, 0.12485817279670408, 0.19603222321243896, 0.6783150120442729, 0.5828240073448059, 0.18296874713793, 0.1716543247468919, 0.18139692519123085, 0.17056636561723826, 0.18203995444862175, 0.17799737191484488, 0.18189016554737347, 0.17929965853693397, 0.20201179617216392, 0.07376444544789207, 0.0662839783340462, 0.06769962705341259, 0.08652947034652791, 0.07879999553207728, 0.0866654570046177, 0.07223505690284127, 0.08133249953930788, 0.06596347719760365]}, "mutation_prompt": null}
{"id": "732ffaa3-eb79-4fbf-9b5d-9e814266f95b", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0] + 0.1, 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1] - 0.1, 0.1, 0.9)  # Modification here\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.3, 0.2]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.3, -0.2])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImproved", "description": "Utilize a novel adaptive mechanism to dynamically adjust the mutation and crossover rates based on population diversity to enhance exploration and exploitation efficiently.", "configspace": "", "generation": 79, "fitness": 0.27442801998399974, "feedback": "The algorithm EnhancedDynamicMutDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "c2ba3860-26a7-4d51-8d07-5ebe5a2fb512", "metadata": {"aucs": [0.7710518500706143, 0.8340558093760462, 0.7856495736161426, 0.7846758738706128, 0.8480015654002241, 0.8254368633438849, 0.8143851106378894, 0.8218274806661536, 0.8001367808735721, 0.6035417299524208, 0.7309938419479494, 0.6337042898961325, 0.6213866009545589, 0.6931407426029941, 0.6563430294151327, 0.5743039784609137, 0.7144274421091741, 0.6336209040581844, 0.1562498053471023, 0.1146221236612891, 0.5407339658552077, 0.16414065284484491, 0.1507944739280671, 0.13981270943746893, 0.1668236929849145, 0.5624852668673332, 0.16652868816308108, 0.16155669389552385, 0.146490193717832, 0.14325258116861006, 0.3163182143763277, 0.4152947977538629, 0.5594646656806508, 0.4387454155245847, 0.4428155498634707, 0.4971464600678194, 0.9663641466339986, 0.978902635823562, 0.9573330171020462, 0.9577667163339938, 0.969617748337698, 0.9683520715177927, 0.9494936239946599, 0.9633820825341727, 0.969783833491056, 0.20726342917427942, 0.3427994283901905, 0.335860589772073, 0.20309958469879874, 0.3805554397851515, 0.3219025746373161, 0.21011296603151586, 0.3166257627512623, 0.29662816900885813, 0.19585968980117974, 0.4964828130909509, 0.26836029313967624, 0.2370760021649978, 0.6798779550632729, 0.18917602776917986, 0.1998455259332791, 0.5728242213261459, 0.43891036301123854, 0.1251186139974788, 0.20410161506757563, 0.22951957365682019, 0.14655322896354317, 0.2560384799272938, 0.14218608551626388, 0.19760274444310744, 0.19066340152931793, 0.17233601586542757, 0.13328670941139242, 0.2353545766470011, 0.16662693961891784, 0.13626989407239976, 0.2631646847525615, 0.12421732464440682, 0.10934212159489776, 0.18988395770186017, 0.20798083237875897, 9.999999999998899e-05, 0.028467324711196285, 0.009513619911646898, 9.999999999998899e-05, 0.07812010318606133, 9.999999999998899e-05, 9.999999999998899e-05, 0.034624368213458157, 9.999999999998899e-05, 0.06301064216258911, 0.15885933902942273, 0.11640427167592005, 0.02792046463041753, 0.035332443891894605, 0.07361503965244465, 0.09152665350582578, 0.15378729683055048, 0.0904690962444169, 0.011926644417677212, 0.028220551212216893, 0.0030806426727012504, 9.999999999998899e-05, 0.004863831232763238, 0.00666288292645989, 0.0005178678271439141, 0.022735389798147265, 9.999999999998899e-05, 0.08296299829559906, 0.13242358921285735, 0.1028369959898302, 0.09530940709545177, 0.1655060121681432, 0.11708826441175957, 0.08117547095109878, 0.13698726921594606, 0.10866661824630353, 0.4652062860404188, 0.4783081972963845, 0.47815899148405194, 0.41163509615835614, 0.5251525315897903, 0.49601470896382005, 0.43531196269237826, 0.49729548348722585, 0.5023179585638118, 0.10115276674606088, 0.13033323941010788, 0.10272032200081227, 0.07856612623500037, 0.10088875415060938, 0.10263288996257414, 0.11093862775197505, 0.08626132387380825, 0.08030366379489928, 0.12644580110092463, 0.13670650562108044, 0.1511931591943385, 0.12845065198660055, 0.19457541787251842, 0.1583428284657612, 0.13467078045622072, 0.1463839157431106, 0.13069064996680846, 0.20574692858122456, 0.3224694447037627, 0.24371955507460874, 0.24501507861808125, 0.2774607545406206, 0.2387714583168019, 0.20081862602312817, 0.3116199849696911, 0.28697026963393135, 0.20746554781546767, 0.1741109721795414, 0.18007485880253427, 0.16917861085408858, 0.18533718026018575, 0.18468295108385724, 0.14781285479700235, 0.25470200693726874, 0.17395739624141204, 0.16766316243887014, 0.16733725557767665, 0.20599511927353487, 0.1600195757751981, 0.17104243983976852, 0.16545260586473742, 0.17507749513743642, 0.15660619611080473, 0.1881586228790666, 0.1937092431391335, 0.23221192266864898, 0.24439191116463566, 0.19451209769307276, 0.18719328518532274, 0.19615293694564417, 0.19777405198457476, 0.2176738743513661, 0.1910248178587104, 0.19831833768537965, 0.1676198440474156, 0.1713811536627845, 0.28734766821445223, 0.19178351434925234, 0.526327591215562, 0.2620207034459576, 0.1581365815163044, 0.20433556566823374, 0.194217970938678, 0.32156261300637057, 0.19059432848635294, 0.18572457596628023, 0.5357959539185705, 0.3498376214660013, 0.24548174218600194, 0.5935224919680371, 0.15109457675282245, 0.17309297679778723, 0.17726821896663914, 0.16775094184899442, 0.1716312645543745, 0.17621710110995448, 0.17175540244259646, 0.17263525098622445, 0.1801503909018778, 0.17440778409612978, 0.059923742520958556, 0.07105782607423117, 0.058550589837281564, 0.06540057377082753, 0.06048015306386845, 0.05809353670992734, 0.05504184673808432, 0.07184026077693106, 0.06570385810402946]}, "mutation_prompt": null}
{"id": "a1bd5ab3-2b76-4d1e-8c73-b8dca78a5acf", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0] + 0.1, 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1] + 0.1, 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.3, 0.2]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.3, -0.2])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImproved", "description": "Improve convergence speed by dynamically adjusting the mutation and crossover rates based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c2ba3860-26a7-4d51-8d07-5ebe5a2fb512", "metadata": {"aucs": [0.7887989145030521, 0.815347899816649, 0.8193025099383259, 0.8091270036964197, 0.8303989483040342, 0.8574517521977297, 0.801206386932901, 0.8363611773448187, 0.8364958273415443, 0.6680449517234566, 0.7020372247334143, 0.6884372400325778, 0.6700219330208099, 0.6987877385194685, 0.6834471824759963, 0.6769713161312567, 0.018634358907359427, 0.7239214735872668, 0.17255027583061, 0.1623753200845598, 0.17157596586413315, 0.5104964447119514, 0.16249623750936804, 0.5161781456398141, 0.17123928543793576, 0.14605208593314323, 0.1398402049859624, 0.4232515798953401, 0.13403186286560953, 0.3410452567237683, 0.16602195679949217, 0.45262728375808015, 0.16904008104886614, 0.44229323811286025, 0.14257260300788932, 0.13084335767632493, 0.9706399257845296, 0.9769202087436079, 0.9779720546892654, 0.9608148477878852, 0.9597720653269447, 0.9712755166817727, 0.9412010631917073, 0.9697289767617296, 0.9784536458940575, 0.3354726122027223, 0.5003628440928813, 0.37844327605478134, 0.140864658299781, 0.5269410749934021, 0.44529593804806833, 0.24249403863365415, 0.49807492122266817, 0.08573613036306615, 0.23336982803593498, 0.3314808285315919, 0.570998528066265, 0.45671677706848535, 0.2066782589514894, 0.5937698300912189, 0.30679954059923364, 0.6356737621098532, 0.21661599864327918, 0.19041968444627344, 0.38945521924919035, 0.20100930729017774, 0.1911325821537625, 0.3041354155780359, 0.21169024954735127, 0.20399563135516885, 0.12457543420755413, 0.18488863391732635, 0.1911151934244495, 0.21757301050299593, 0.05212233267920985, 0.21440576846565884, 0.26667732194093263, 0.2390478051299484, 0.12957729835034792, 0.15804227934528536, 0.16556836090231752, 0.0001840524601569582, 0.07718202102017024, 0.04551190230081814, 9.999999999998899e-05, 0.19844561503112734, 0.01711847322753801, 0.05466878521248941, 0.004289160199359321, 0.03725664611598056, 0.09145346370607954, 0.15413590936346977, 0.054148807881113536, 0.059223339596853886, 0.2831180086087073, 0.13985573609411128, 0.12037038934662125, 0.12318488372410863, 0.07481504174637499, 9.999999999998899e-05, 0.041139056235042326, 9.999999999998899e-05, 0.022638720794023515, 0.10816402424816063, 0.07486656053031238, 0.002555514253686164, 0.09649692817257605, 0.14767605568174402, 0.1410321200460819, 0.1934155012847737, 0.13315014908913014, 0.1678273484505396, 0.22439121735110545, 0.15366928024500814, 0.12191102643695306, 0.21272508906315668, 0.15209572871064791, 0.4907579121830328, 0.6160204276136616, 0.5668590978188532, 0.49251021147499374, 0.5341178376207492, 0.5492175931112167, 0.4842320389860938, 0.6071758903838118, 0.5529336272929948, 0.08203967212696384, 0.1000975392694119, 0.11773590933463307, 0.08412499327285028, 0.13201553322182824, 0.12229816285281991, 0.09867856138470654, 0.09191493142513485, 0.11502897434007153, 0.1389482460314806, 0.13074938643318124, 0.16732328909698213, 0.1348472194716973, 0.12161653441610054, 0.22937575258980292, 0.17032317181086476, 0.18484078505134838, 0.12179754750396554, 0.2435299508186669, 0.3582947273750209, 0.3151221882417571, 0.23812345755664233, 0.34989451191706467, 0.29606818076365393, 0.26573732113559, 0.45593834622425056, 0.31739740820715967, 0.19093502591003497, 0.24978789524913303, 0.1959525909645492, 0.14485453412126914, 0.35721559949061543, 0.2441988784540695, 0.17646851164295896, 0.2976391198735351, 0.2225588662167658, 0.1854599248802794, 0.18057045875268252, 0.17699677665029356, 0.2128526086514283, 0.16078813150696458, 0.17783740427750105, 0.1826782970001677, 0.1678680824225297, 0.17452488496678653, 0.19555663787393773, 0.19786734350917634, 0.22187783723367438, 0.495661358212924, 0.2127144080454204, 0.2037153882411855, 0.2010394259204602, 0.5632006827253682, 0.6510734969691824, 0.18555978138958185, 0.12323546894412774, 0.17933848212492742, 0.6596935121261382, 0.7793970002295124, 0.5799534594712399, 0.19214118613238584, 0.1636943984618643, 0.547870489309125, 0.3484963591556651, 0.19249971299433144, 0.11113392493318042, 0.430635745066395, 0.5775666777350943, 0.12485817279670408, 0.19603222321243896, 0.6783150120442729, 0.5828240073448059, 0.18296874713793, 0.1716543247468919, 0.18139692519123085, 0.17056636561723826, 0.18203995444862175, 0.17799737191484488, 0.18189016554737347, 0.17929965853693397, 0.20201179617216392, 0.07376444544789207, 0.0662839783340462, 0.06769962705341259, 0.08652947034652791, 0.07879999553207728, 0.0866654570046177, 0.07223505690284127, 0.08133249953930788, 0.06596347719760365]}, "mutation_prompt": null}
{"id": "dd140937-6e93-4d8e-9d37-1f703cb8f043", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0] + 0.1, 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1] + 0.1, 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.3, 0.2]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.3, -0.2])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImproved", "description": "Improve convergence speed by dynamically adjusting the mutation and crossover rates based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c2ba3860-26a7-4d51-8d07-5ebe5a2fb512", "metadata": {"aucs": [0.7887989145030521, 0.815347899816649, 0.8193025099383259, 0.8091270036964197, 0.8303989483040342, 0.8574517521977297, 0.801206386932901, 0.8363611773448187, 0.8364958273415443, 0.6680449517234566, 0.7020372247334143, 0.6884372400325778, 0.6700219330208099, 0.6987877385194685, 0.6834471824759963, 0.6769713161312567, 0.018634358907359427, 0.7239214735872668, 0.17255027583061, 0.1623753200845598, 0.17157596586413315, 0.5104964447119514, 0.16249623750936804, 0.5161781456398141, 0.17123928543793576, 0.14605208593314323, 0.1398402049859624, 0.4232515798953401, 0.13403186286560953, 0.3410452567237683, 0.16602195679949217, 0.45262728375808015, 0.16904008104886614, 0.44229323811286025, 0.14257260300788932, 0.13084335767632493, 0.9706399257845296, 0.9769202087436079, 0.9779720546892654, 0.9608148477878852, 0.9597720653269447, 0.9712755166817727, 0.9412010631917073, 0.9697289767617296, 0.9784536458940575, 0.3354726122027223, 0.5003628440928813, 0.37844327605478134, 0.140864658299781, 0.5269410749934021, 0.44529593804806833, 0.24249403863365415, 0.49807492122266817, 0.08573613036306615, 0.23336982803593498, 0.3314808285315919, 0.570998528066265, 0.45671677706848535, 0.2066782589514894, 0.5937698300912189, 0.30679954059923364, 0.6356737621098532, 0.21661599864327918, 0.19041968444627344, 0.38945521924919035, 0.20100930729017774, 0.1911325821537625, 0.3041354155780359, 0.21169024954735127, 0.20399563135516885, 0.12457543420755413, 0.18488863391732635, 0.1911151934244495, 0.21757301050299593, 0.05212233267920985, 0.21440576846565884, 0.26667732194093263, 0.2390478051299484, 0.12957729835034792, 0.15804227934528536, 0.16556836090231752, 0.0001840524601569582, 0.07718202102017024, 0.04551190230081814, 9.999999999998899e-05, 0.19844561503112734, 0.01711847322753801, 0.05466878521248941, 0.004289160199359321, 0.03725664611598056, 0.09145346370607954, 0.15413590936346977, 0.054148807881113536, 0.059223339596853886, 0.2831180086087073, 0.13985573609411128, 0.12037038934662125, 0.12318488372410863, 0.07481504174637499, 9.999999999998899e-05, 0.041139056235042326, 9.999999999998899e-05, 0.022638720794023515, 0.10816402424816063, 0.07486656053031238, 0.002555514253686164, 0.09649692817257605, 0.14767605568174402, 0.1410321200460819, 0.1934155012847737, 0.13315014908913014, 0.1678273484505396, 0.22439121735110545, 0.15366928024500814, 0.12191102643695306, 0.21272508906315668, 0.15209572871064791, 0.4907579121830328, 0.6160204276136616, 0.5668590978188532, 0.49251021147499374, 0.5341178376207492, 0.5492175931112167, 0.4842320389860938, 0.6071758903838118, 0.5529336272929948, 0.08203967212696384, 0.1000975392694119, 0.11773590933463307, 0.08412499327285028, 0.13201553322182824, 0.12229816285281991, 0.09867856138470654, 0.09191493142513485, 0.11502897434007153, 0.1389482460314806, 0.13074938643318124, 0.16732328909698213, 0.1348472194716973, 0.12161653441610054, 0.22937575258980292, 0.17032317181086476, 0.18484078505134838, 0.12179754750396554, 0.2435299508186669, 0.3582947273750209, 0.3151221882417571, 0.23812345755664233, 0.34989451191706467, 0.29606818076365393, 0.26573732113559, 0.45593834622425056, 0.31739740820715967, 0.19093502591003497, 0.24978789524913303, 0.1959525909645492, 0.14485453412126914, 0.35721559949061543, 0.2441988784540695, 0.17646851164295896, 0.2976391198735351, 0.2225588662167658, 0.1854599248802794, 0.18057045875268252, 0.17699677665029356, 0.2128526086514283, 0.16078813150696458, 0.17783740427750105, 0.1826782970001677, 0.1678680824225297, 0.17452488496678653, 0.19555663787393773, 0.19786734350917634, 0.22187783723367438, 0.495661358212924, 0.2127144080454204, 0.2037153882411855, 0.2010394259204602, 0.5632006827253682, 0.6510734969691824, 0.18555978138958185, 0.12323546894412774, 0.17933848212492742, 0.6596935121261382, 0.7793970002295124, 0.5799534594712399, 0.19214118613238584, 0.1636943984618643, 0.547870489309125, 0.3484963591556651, 0.19249971299433144, 0.11113392493318042, 0.430635745066395, 0.5775666777350943, 0.12485817279670408, 0.19603222321243896, 0.6783150120442729, 0.5828240073448059, 0.18296874713793, 0.1716543247468919, 0.18139692519123085, 0.17056636561723826, 0.18203995444862175, 0.17799737191484488, 0.18189016554737347, 0.17929965853693397, 0.20201179617216392, 0.07376444544789207, 0.0662839783340462, 0.06769962705341259, 0.08652947034652791, 0.07879999553207728, 0.0866654570046177, 0.07223505690284127, 0.08133249953930788, 0.06596347719760365]}, "mutation_prompt": null}
{"id": "923a5a7f-28a4-436f-97c5-3c52f27fdb3e", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0] + 0.1, 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1] + 0.1, 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.3, 0.2]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.3, -0.2])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImproved", "description": "Improve convergence speed by dynamically adjusting the mutation and crossover rates based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c2ba3860-26a7-4d51-8d07-5ebe5a2fb512", "metadata": {"aucs": [0.7887989145030521, 0.815347899816649, 0.8193025099383259, 0.8091270036964197, 0.8303989483040342, 0.8574517521977297, 0.801206386932901, 0.8363611773448187, 0.8364958273415443, 0.6680449517234566, 0.7020372247334143, 0.6884372400325778, 0.6700219330208099, 0.6987877385194685, 0.6834471824759963, 0.6769713161312567, 0.018634358907359427, 0.7239214735872668, 0.17255027583061, 0.1623753200845598, 0.17157596586413315, 0.5104964447119514, 0.16249623750936804, 0.5161781456398141, 0.17123928543793576, 0.14605208593314323, 0.1398402049859624, 0.4232515798953401, 0.13403186286560953, 0.3410452567237683, 0.16602195679949217, 0.45262728375808015, 0.16904008104886614, 0.44229323811286025, 0.14257260300788932, 0.13084335767632493, 0.9706399257845296, 0.9769202087436079, 0.9779720546892654, 0.9608148477878852, 0.9597720653269447, 0.9712755166817727, 0.9412010631917073, 0.9697289767617296, 0.9784536458940575, 0.3354726122027223, 0.5003628440928813, 0.37844327605478134, 0.140864658299781, 0.5269410749934021, 0.44529593804806833, 0.24249403863365415, 0.49807492122266817, 0.08573613036306615, 0.23336982803593498, 0.3314808285315919, 0.570998528066265, 0.45671677706848535, 0.2066782589514894, 0.5937698300912189, 0.30679954059923364, 0.6356737621098532, 0.21661599864327918, 0.19041968444627344, 0.38945521924919035, 0.20100930729017774, 0.1911325821537625, 0.3041354155780359, 0.21169024954735127, 0.20399563135516885, 0.12457543420755413, 0.18488863391732635, 0.1911151934244495, 0.21757301050299593, 0.05212233267920985, 0.21440576846565884, 0.26667732194093263, 0.2390478051299484, 0.12957729835034792, 0.15804227934528536, 0.16556836090231752, 0.0001840524601569582, 0.07718202102017024, 0.04551190230081814, 9.999999999998899e-05, 0.19844561503112734, 0.01711847322753801, 0.05466878521248941, 0.004289160199359321, 0.03725664611598056, 0.09145346370607954, 0.15413590936346977, 0.054148807881113536, 0.059223339596853886, 0.2831180086087073, 0.13985573609411128, 0.12037038934662125, 0.12318488372410863, 0.07481504174637499, 9.999999999998899e-05, 0.041139056235042326, 9.999999999998899e-05, 0.022638720794023515, 0.10816402424816063, 0.07486656053031238, 0.002555514253686164, 0.09649692817257605, 0.14767605568174402, 0.1410321200460819, 0.1934155012847737, 0.13315014908913014, 0.1678273484505396, 0.22439121735110545, 0.15366928024500814, 0.12191102643695306, 0.21272508906315668, 0.15209572871064791, 0.4907579121830328, 0.6160204276136616, 0.5668590978188532, 0.49251021147499374, 0.5341178376207492, 0.5492175931112167, 0.4842320389860938, 0.6071758903838118, 0.5529336272929948, 0.08203967212696384, 0.1000975392694119, 0.11773590933463307, 0.08412499327285028, 0.13201553322182824, 0.12229816285281991, 0.09867856138470654, 0.09191493142513485, 0.11502897434007153, 0.1389482460314806, 0.13074938643318124, 0.16732328909698213, 0.1348472194716973, 0.12161653441610054, 0.22937575258980292, 0.17032317181086476, 0.18484078505134838, 0.12179754750396554, 0.2435299508186669, 0.3582947273750209, 0.3151221882417571, 0.23812345755664233, 0.34989451191706467, 0.29606818076365393, 0.26573732113559, 0.45593834622425056, 0.31739740820715967, 0.19093502591003497, 0.24978789524913303, 0.1959525909645492, 0.14485453412126914, 0.35721559949061543, 0.2441988784540695, 0.17646851164295896, 0.2976391198735351, 0.2225588662167658, 0.1854599248802794, 0.18057045875268252, 0.17699677665029356, 0.2128526086514283, 0.16078813150696458, 0.17783740427750105, 0.1826782970001677, 0.1678680824225297, 0.17452488496678653, 0.19555663787393773, 0.19786734350917634, 0.22187783723367438, 0.495661358212924, 0.2127144080454204, 0.2037153882411855, 0.2010394259204602, 0.5632006827253682, 0.6510734969691824, 0.18555978138958185, 0.12323546894412774, 0.17933848212492742, 0.6596935121261382, 0.7793970002295124, 0.5799534594712399, 0.19214118613238584, 0.1636943984618643, 0.547870489309125, 0.3484963591556651, 0.19249971299433144, 0.11113392493318042, 0.430635745066395, 0.5775666777350943, 0.12485817279670408, 0.19603222321243896, 0.6783150120442729, 0.5828240073448059, 0.18296874713793, 0.1716543247468919, 0.18139692519123085, 0.17056636561723826, 0.18203995444862175, 0.17799737191484488, 0.18189016554737347, 0.17929965853693397, 0.20201179617216392, 0.07376444544789207, 0.0662839783340462, 0.06769962705341259, 0.08652947034652791, 0.07879999553207728, 0.0866654570046177, 0.07223505690284127, 0.08133249953930788, 0.06596347719760365]}, "mutation_prompt": null}
{"id": "493a5afd-9ba0-4324-8f9b-659d19515c72", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0] + 0.1, 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1] + 0.1, 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.3, 0.2]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.3, -0.2])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImproved", "description": "Improve convergence speed by dynamically adjusting the mutation and crossover rates based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c2ba3860-26a7-4d51-8d07-5ebe5a2fb512", "metadata": {"aucs": [0.7887989145030521, 0.815347899816649, 0.8193025099383259, 0.8091270036964197, 0.8303989483040342, 0.8574517521977297, 0.801206386932901, 0.8363611773448187, 0.8364958273415443, 0.6680449517234566, 0.7020372247334143, 0.6884372400325778, 0.6700219330208099, 0.6987877385194685, 0.6834471824759963, 0.6769713161312567, 0.018634358907359427, 0.7239214735872668, 0.17255027583061, 0.1623753200845598, 0.17157596586413315, 0.5104964447119514, 0.16249623750936804, 0.5161781456398141, 0.17123928543793576, 0.14605208593314323, 0.1398402049859624, 0.4232515798953401, 0.13403186286560953, 0.3410452567237683, 0.16602195679949217, 0.45262728375808015, 0.16904008104886614, 0.44229323811286025, 0.14257260300788932, 0.13084335767632493, 0.9706399257845296, 0.9769202087436079, 0.9779720546892654, 0.9608148477878852, 0.9597720653269447, 0.9712755166817727, 0.9412010631917073, 0.9697289767617296, 0.9784536458940575, 0.3354726122027223, 0.5003628440928813, 0.37844327605478134, 0.140864658299781, 0.5269410749934021, 0.44529593804806833, 0.24249403863365415, 0.49807492122266817, 0.08573613036306615, 0.23336982803593498, 0.3314808285315919, 0.570998528066265, 0.45671677706848535, 0.2066782589514894, 0.5937698300912189, 0.30679954059923364, 0.6356737621098532, 0.21661599864327918, 0.19041968444627344, 0.38945521924919035, 0.20100930729017774, 0.1911325821537625, 0.3041354155780359, 0.21169024954735127, 0.20399563135516885, 0.12457543420755413, 0.18488863391732635, 0.1911151934244495, 0.21757301050299593, 0.05212233267920985, 0.21440576846565884, 0.26667732194093263, 0.2390478051299484, 0.12957729835034792, 0.15804227934528536, 0.16556836090231752, 0.0001840524601569582, 0.07718202102017024, 0.04551190230081814, 9.999999999998899e-05, 0.19844561503112734, 0.01711847322753801, 0.05466878521248941, 0.004289160199359321, 0.03725664611598056, 0.09145346370607954, 0.15413590936346977, 0.054148807881113536, 0.059223339596853886, 0.2831180086087073, 0.13985573609411128, 0.12037038934662125, 0.12318488372410863, 0.07481504174637499, 9.999999999998899e-05, 0.041139056235042326, 9.999999999998899e-05, 0.022638720794023515, 0.10816402424816063, 0.07486656053031238, 0.002555514253686164, 0.09649692817257605, 0.14767605568174402, 0.1410321200460819, 0.1934155012847737, 0.13315014908913014, 0.1678273484505396, 0.22439121735110545, 0.15366928024500814, 0.12191102643695306, 0.21272508906315668, 0.15209572871064791, 0.4907579121830328, 0.6160204276136616, 0.5668590978188532, 0.49251021147499374, 0.5341178376207492, 0.5492175931112167, 0.4842320389860938, 0.6071758903838118, 0.5529336272929948, 0.08203967212696384, 0.1000975392694119, 0.11773590933463307, 0.08412499327285028, 0.13201553322182824, 0.12229816285281991, 0.09867856138470654, 0.09191493142513485, 0.11502897434007153, 0.1389482460314806, 0.13074938643318124, 0.16732328909698213, 0.1348472194716973, 0.12161653441610054, 0.22937575258980292, 0.17032317181086476, 0.18484078505134838, 0.12179754750396554, 0.2435299508186669, 0.3582947273750209, 0.3151221882417571, 0.23812345755664233, 0.34989451191706467, 0.29606818076365393, 0.26573732113559, 0.45593834622425056, 0.31739740820715967, 0.19093502591003497, 0.24978789524913303, 0.1959525909645492, 0.14485453412126914, 0.35721559949061543, 0.2441988784540695, 0.17646851164295896, 0.2976391198735351, 0.2225588662167658, 0.1854599248802794, 0.18057045875268252, 0.17699677665029356, 0.2128526086514283, 0.16078813150696458, 0.17783740427750105, 0.1826782970001677, 0.1678680824225297, 0.17452488496678653, 0.19555663787393773, 0.19786734350917634, 0.22187783723367438, 0.495661358212924, 0.2127144080454204, 0.2037153882411855, 0.2010394259204602, 0.5632006827253682, 0.6510734969691824, 0.18555978138958185, 0.12323546894412774, 0.17933848212492742, 0.6596935121261382, 0.7793970002295124, 0.5799534594712399, 0.19214118613238584, 0.1636943984618643, 0.547870489309125, 0.3484963591556651, 0.19249971299433144, 0.11113392493318042, 0.430635745066395, 0.5775666777350943, 0.12485817279670408, 0.19603222321243896, 0.6783150120442729, 0.5828240073448059, 0.18296874713793, 0.1716543247468919, 0.18139692519123085, 0.17056636561723826, 0.18203995444862175, 0.17799737191484488, 0.18189016554737347, 0.17929965853693397, 0.20201179617216392, 0.07376444544789207, 0.0662839783340462, 0.06769962705341259, 0.08652947034652791, 0.07879999553207728, 0.0866654570046177, 0.07223505690284127, 0.08133249953930788, 0.06596347719760365]}, "mutation_prompt": null}
{"id": "e6735f4d-3a4c-49cc-ba21-2570e62359b4", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + np.clip(self.adaptive_factors[i, 0] + 0.1, 0.1, 0.9) * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < np.clip(self.adaptive_factors[i, 1] + 0.1, 0.1, 0.9)\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.adaptive_factors[i] += np.array([0.3, 0.2]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.3, -0.2])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImproved", "description": "Improve convergence speed by dynamically adjusting the mutation and crossover rates based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c2ba3860-26a7-4d51-8d07-5ebe5a2fb512", "metadata": {"aucs": [0.7887989145030521, 0.815347899816649, 0.8193025099383259, 0.8091270036964197, 0.8303989483040342, 0.8574517521977297, 0.801206386932901, 0.8363611773448187, 0.8364958273415443, 0.6680449517234566, 0.7020372247334143, 0.6884372400325778, 0.6700219330208099, 0.6987877385194685, 0.6834471824759963, 0.6769713161312567, 0.018634358907359427, 0.7239214735872668, 0.17255027583061, 0.1623753200845598, 0.17157596586413315, 0.5104964447119514, 0.16249623750936804, 0.5161781456398141, 0.17123928543793576, 0.14605208593314323, 0.1398402049859624, 0.4232515798953401, 0.13403186286560953, 0.3410452567237683, 0.16602195679949217, 0.45262728375808015, 0.16904008104886614, 0.44229323811286025, 0.14257260300788932, 0.13084335767632493, 0.9706399257845296, 0.9769202087436079, 0.9779720546892654, 0.9608148477878852, 0.9597720653269447, 0.9712755166817727, 0.9412010631917073, 0.9697289767617296, 0.9784536458940575, 0.3354726122027223, 0.5003628440928813, 0.37844327605478134, 0.140864658299781, 0.5269410749934021, 0.44529593804806833, 0.24249403863365415, 0.49807492122266817, 0.08573613036306615, 0.23336982803593498, 0.3314808285315919, 0.570998528066265, 0.45671677706848535, 0.2066782589514894, 0.5937698300912189, 0.30679954059923364, 0.6356737621098532, 0.21661599864327918, 0.19041968444627344, 0.38945521924919035, 0.20100930729017774, 0.1911325821537625, 0.3041354155780359, 0.21169024954735127, 0.20399563135516885, 0.12457543420755413, 0.18488863391732635, 0.1911151934244495, 0.21757301050299593, 0.05212233267920985, 0.21440576846565884, 0.26667732194093263, 0.2390478051299484, 0.12957729835034792, 0.15804227934528536, 0.16556836090231752, 0.0001840524601569582, 0.07718202102017024, 0.04551190230081814, 9.999999999998899e-05, 0.19844561503112734, 0.01711847322753801, 0.05466878521248941, 0.004289160199359321, 0.03725664611598056, 0.09145346370607954, 0.15413590936346977, 0.054148807881113536, 0.059223339596853886, 0.2831180086087073, 0.13985573609411128, 0.12037038934662125, 0.12318488372410863, 0.07481504174637499, 9.999999999998899e-05, 0.041139056235042326, 9.999999999998899e-05, 0.022638720794023515, 0.10816402424816063, 0.07486656053031238, 0.002555514253686164, 0.09649692817257605, 0.14767605568174402, 0.1410321200460819, 0.1934155012847737, 0.13315014908913014, 0.1678273484505396, 0.22439121735110545, 0.15366928024500814, 0.12191102643695306, 0.21272508906315668, 0.15209572871064791, 0.4907579121830328, 0.6160204276136616, 0.5668590978188532, 0.49251021147499374, 0.5341178376207492, 0.5492175931112167, 0.4842320389860938, 0.6071758903838118, 0.5529336272929948, 0.08203967212696384, 0.1000975392694119, 0.11773590933463307, 0.08412499327285028, 0.13201553322182824, 0.12229816285281991, 0.09867856138470654, 0.09191493142513485, 0.11502897434007153, 0.1389482460314806, 0.13074938643318124, 0.16732328909698213, 0.1348472194716973, 0.12161653441610054, 0.22937575258980292, 0.17032317181086476, 0.18484078505134838, 0.12179754750396554, 0.2435299508186669, 0.3582947273750209, 0.3151221882417571, 0.23812345755664233, 0.34989451191706467, 0.29606818076365393, 0.26573732113559, 0.45593834622425056, 0.31739740820715967, 0.19093502591003497, 0.24978789524913303, 0.1959525909645492, 0.14485453412126914, 0.35721559949061543, 0.2441988784540695, 0.17646851164295896, 0.2976391198735351, 0.2225588662167658, 0.1854599248802794, 0.18057045875268252, 0.17699677665029356, 0.2128526086514283, 0.16078813150696458, 0.17783740427750105, 0.1826782970001677, 0.1678680824225297, 0.17452488496678653, 0.19555663787393773, 0.19786734350917634, 0.22187783723367438, 0.495661358212924, 0.2127144080454204, 0.2037153882411855, 0.2010394259204602, 0.5632006827253682, 0.6510734969691824, 0.18555978138958185, 0.12323546894412774, 0.17933848212492742, 0.6596935121261382, 0.7793970002295124, 0.5799534594712399, 0.19214118613238584, 0.1636943984618643, 0.547870489309125, 0.3484963591556651, 0.19249971299433144, 0.11113392493318042, 0.430635745066395, 0.5775666777350943, 0.12485817279670408, 0.19603222321243896, 0.6783150120442729, 0.5828240073448059, 0.18296874713793, 0.1716543247468919, 0.18139692519123085, 0.17056636561723826, 0.18203995444862175, 0.17799737191484488, 0.18189016554737347, 0.17929965853693397, 0.20201179617216392, 0.07376444544789207, 0.0662839783340462, 0.06769962705341259, 0.08652947034652791, 0.07879999553207728, 0.0866654570046177, 0.07223505690284127, 0.08133249953930788, 0.06596347719760365]}, "mutation_prompt": null}
{"id": "bbb2aced-1fd4-42c7-bf11-c0e065a67008", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImprovedFast:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n        self.scale_factors = np.random.uniform(0.1, 0.9, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.scale_factors[i, 0] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.scale_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.scale_factors[i] += np.array([0.1, 0.1]) if np.all(self.scale_factors[i] < 0.9) else np.array([-0.1, -0.1])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImprovedFast", "description": "EnhancedDynamicMutDEImprovedFast: Increase convergence speed by introducing dynamic adaptive scaling factors for mutation and crossover while maintaining individual adjustments based on performance.", "configspace": "", "generation": 85, "fitness": 0.32825068347501785, "feedback": "The algorithm EnhancedDynamicMutDEImprovedFast got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "c2ba3860-26a7-4d51-8d07-5ebe5a2fb512", "metadata": {"aucs": [0.8548404908297219, 0.8695287750688817, 0.8216076533226208, 0.8371795967210477, 0.8160059091274164, 0.7986407179307058, 0.8376532944259697, 0.8700697222456849, 0.8209038045116327, 0.7146231547111594, 0.7376584809174509, 0.7120638596247957, 0.7263356719706908, 0.7664737924234584, 0.6997878285415959, 0.7727923699751075, 0.7509522706981094, 0.6994481325967303, 0.5104174806870004, 0.47993638960547746, 0.17529158587510807, 0.17720019834955014, 0.15706293546481287, 0.16501021021825568, 0.16748762764081837, 0.6317783327625337, 0.5775192286159062, 0.42809760972548994, 0.14780750254444408, 0.15791876814620986, 0.49441231041054856, 0.3267085185590799, 0.528410396296138, 0.37499865855215475, 0.477033705816332, 0.14378873619793542, 0.9630198741629141, 0.9655738712599097, 0.9732397471003028, 0.949494733346039, 0.9637018973558752, 0.9660711692514964, 0.9626748729069632, 0.9692722537659374, 0.9851382123204335, 0.5166397959603375, 0.5543074477335013, 0.3783443891914483, 0.14296224296018822, 0.522415725412614, 0.4221272397622178, 0.314986145104466, 0.5202473006392845, 0.3847680425677886, 0.701616550846695, 0.34570856512275605, 0.16541009846709476, 0.4927964723832353, 0.4807892887853723, 0.358958652391169, 0.6880461670524936, 0.2172136220494112, 0.5702785001240072, 0.33275342435150623, 0.20312582475295193, 0.1860539368876335, 0.17500945934397172, 0.22304461538542175, 0.2421949000758471, 0.29266862622832457, 0.4047139213579043, 0.19949099157838746, 0.22524138793544457, 0.2811654921341026, 0.1434468139838867, 0.209575658840901, 0.2399639355358646, 0.18108320616136597, 0.23114460676039794, 0.30475967670251425, 0.14954341509439528, 0.09541044002997934, 0.0448032877502097, 0.059256762969890575, 0.05863493213992421, 0.07395568461098123, 0.046307182970486194, 0.133945315731283, 0.0579054957480466, 0.041103281360858945, 0.20455454201186918, 0.09761008270888227, 0.1845394121977938, 0.1975561086776333, 0.04107455298744811, 0.04888273236664609, 0.13869643029448564, 0.18269512566123003, 0.1623138504540178, 0.0300372209439711, 0.10254177087993177, 0.02407829201529732, 0.08143054499584834, 0.08118824689920257, 0.15080190258901927, 0.015623735824959795, 0.08727948137987096, 0.05485720670397709, 0.15776638753926286, 0.15153419649326283, 0.17284685740542394, 0.20329201169790256, 0.22994672112680925, 0.1778474760929437, 0.18579658583863456, 0.11092166551400384, 0.13792961588795738, 0.5854331712537988, 0.5807311165975226, 0.5377513222004194, 0.5576636553805022, 0.5909783603718103, 0.5109918723752349, 0.5465084042106281, 0.5872820963051831, 0.5460683766665977, 0.07759124935305228, 0.09813381756087292, 0.09241079967454202, 0.11879962228022145, 0.08670705740836471, 0.08287051197380335, 0.08668568038091395, 0.11923723056739022, 0.08931139251168185, 0.15630210757820495, 0.14934976770650155, 0.15361327365532107, 0.14092967323580652, 0.21669210429385577, 0.1398561156147351, 0.15516066203793855, 0.1586215704311762, 0.14191086009930753, 0.3313802783667773, 0.38865896258306054, 0.3070590985835826, 0.2814874852442971, 0.4026792953988615, 0.30397664747221464, 0.4164099140139135, 0.3682598161164712, 0.3075821517120536, 0.21920102589748736, 0.2781757616551247, 0.1906679608547287, 0.2445571990531663, 0.2578859579400612, 0.2368986444055019, 0.30883315407995726, 0.2152338608189993, 0.2130183804569611, 0.19459140079349424, 0.17918076247347403, 0.18039756698961407, 0.16421148778155625, 0.17738729324334968, 0.2019885357348037, 0.19356629919630053, 0.2218716512010135, 0.17922422322275944, 0.44304984372668166, 0.2198383330664495, 0.20518843837539347, 0.22932234959950093, 0.19800577151220256, 0.25490649511434627, 0.25970071148454, 0.19345507301907894, 0.21035077020927517, 0.1817344632575445, 0.6974923291236894, 0.563748827897403, 0.16985505727396832, 0.8105827171703412, 0.7527680126544222, 0.7526390607427559, 0.6628382549218861, 0.5150568054821487, 0.44194410815280827, 0.16682113891714834, 0.19791988682013117, 0.47248917322217854, 0.12370978581641179, 0.19459444471387122, 0.15866080473047472, 0.15393275554935737, 0.21997357914974258, 0.17333433736545412, 0.16968975339451076, 0.16972355585185595, 0.1903422697201771, 0.1761941404154762, 0.1722437918054307, 0.18158463311730244, 0.16671706505795536, 0.1875994602608292, 0.07555216335897075, 0.08427152433893148, 0.06742247075954888, 0.07316321827582306, 0.06842792068214643, 0.06617607459692787, 0.06256865397967537, 0.0744753074737271, 0.06691197868509258]}, "mutation_prompt": null}
{"id": "cdcb009a-b22c-4413-a379-24ca04ec3d69", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImprovedFaster:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n        self.scale_factors = np.random.uniform(0.1, 0.9, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutation_rate = np.mean(np.abs(self.population - np.mean(self.population, axis=0)), axis=0)\n                mutant = self.population[a] + mutation_rate * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.scale_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.scale_factors[i] += np.array([0.1, 0.1]) if np.all(self.scale_factors[i] < 0.9) else np.array([-0.1, -0.1])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImprovedFaster", "description": "Improve convergence speed by introducing a dynamic mutation strategy that adapts the mutation rate based on individual performance, focusing on accelerating exploration-exploitation trade-off.", "configspace": "", "generation": 86, "fitness": 0.1447274483382303, "feedback": "The algorithm EnhancedDynamicMutDEImprovedFaster got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "bbb2aced-1fd4-42c7-bf11-c0e065a67008", "metadata": {"aucs": [0.2719423987597629, 0.328410605197488, 0.34033546322842734, 0.3961239295058835, 0.20488732047406066, 0.26507524320118214, 0.3868491977327385, 0.2515308324097808, 0.32599398072595964, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1104750593051862, 0.15245698437543032, 0.07092152438666033, 0.11161924939854184, 0.0678149125033316, 0.06828254453287552, 0.1606096422168346, 0.15196771841904755, 0.14499603638124758, 0.13350314590814027, 0.11726484448158858, 0.14347912451621903, 0.10051509920082735, 0.11566580152421901, 0.07975859837767696, 0.13081449150362845, 0.10503011242846738, 0.12349085079531874, 0.9907457997767034, 0.9737011634882539, 0.9827207650027904, 0.9647360909632344, 0.9898681382610548, 0.9718870036437538, 0.9713955921616129, 0.9854645145662423, 0.9811740603153044, 0.059448107628483404, 0.09455720787322441, 0.08605224217922824, 0.1286553799549296, 0.0684081574986578, 0.11942221795296648, 0.05952651363765238, 0.09232499768153357, 0.03939759265366538, 0.14070683343520907, 0.12538814072515303, 0.12063816107347736, 0.10390448766016835, 0.03093443583894062, 0.14297387859029353, 0.1383862298465327, 0.2513084567610958, 0.05070317560212223, 9.999999999998899e-05, 9.999999999998899e-05, 0.04489457824550569, 0.08979869752783598, 0.08969509306494161, 9.999999999998899e-05, 0.12582093081587897, 9.999999999998899e-05, 9.999999999998899e-05, 0.009746408961371578, 0.009628635079728554, 0.009511927232973671, 0.09577962611501956, 9.999999999998899e-05, 0.07728526341586617, 0.01529225704876902, 9.999999999998899e-05, 0.09953384134305088, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027495705935927095, 0.0016337873671844472, 0.007633088760527373, 0.013916531396690912, 0.008971073934948448, 0.008910345094604755, 0.020542023991347413, 9.999999999998899e-05, 0.011823699111744856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051213433864653934, 9.999999999998899e-05, 0.04964885637655769, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07010640234971632, 0.03580136172802906, 9.999999999998899e-05, 0.029864251097203698, 9.999999999998899e-05, 0.0630918319175835, 9.999999999998899e-05, 9.999999999998899e-05, 0.06640952432438829, 0.12491781609174957, 0.136623684455776, 0.3493723319214137, 0.26463829063169564, 0.200855535029823, 0.16226180418181635, 0.314475459332193, 0.13863845776460826, 0.30298642059410585, 0.10372243413099003, 0.09810937319163515, 0.06044098520077679, 0.06612022883294066, 0.09760233403688579, 0.07935961971419825, 0.06395776690071342, 0.07235091703329433, 0.1232110114936571, 0.14221445116436848, 0.13961107264665262, 0.10478611907180568, 0.13563473621540378, 0.11757766527405344, 0.17566208059256494, 0.14288033414341839, 0.12067069778009099, 0.125460935161807, 0.2090757415389043, 0.17973770975213388, 0.17024086242308534, 0.13173927535960006, 0.1372277736943106, 0.1351372509490335, 0.24061526670343214, 0.15887004653083825, 0.15959290043553953, 0.09212227735651668, 0.15094513819038935, 0.16451625052796903, 0.09084256630929066, 0.09613129174674517, 0.12908004519992267, 0.1801585068743765, 0.16183931992720957, 0.0815757782769897, 0.13730914225430968, 0.15759302118857543, 0.16278379123370845, 0.16918792222551382, 0.17408204740323796, 0.14306484088159466, 0.1585879467943705, 0.16583365726515042, 0.1512583824403808, 0.1851739829769825, 0.18817627862766284, 0.18671048875147067, 0.17715207761406981, 0.18957620944380082, 0.2465075171271075, 0.23387429782050917, 0.17642669689201362, 0.1703989941615237, 0.1559436844743134, 0.13131303794702798, 0.17782232588064395, 0.247687356549104, 0.15576551276494988, 0.13294445275990507, 0.15159210209415708, 0.12272656238073543, 0.14251998938499078, 0.1333030068072668, 0.13576835183403746, 0.14659838264779668, 0.10851234249209352, 0.17797714398337117, 0.09069722023143911, 0.10150565904274367, 0.16028178454146313, 0.25127438733095675, 0.19374055381597532, 0.16191285597428173, 0.1669444736142779, 0.17785774631427398, 0.17962999891751275, 0.18641568440457545, 0.15169865410789773, 0.151905559436313, 0.17478111251222506, 0.06230772177586208, 0.07138469264755076, 0.07115697119324249, 0.039892060515169026, 0.06686558741838367, 0.05721599415683809, 0.0549182340951444, 0.07718994356920483, 0.04654273693279265]}, "mutation_prompt": null}
{"id": "be1cd3d3-d4a6-4287-a7d8-3ce112bd8bad", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceAlgorithm(EnhancedDynamicMutDEImprovedFast):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.scale_factors[i, 0] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.scale_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    # Dynamic adaptation of mutation and crossover parameters\n                    self.scale_factors[i] += np.array([0.1, 0.1]) if np.all(self.scale_factors[i] < 0.9) else np.array([-0.1, -0.1])\n                    self.adaptive_factors[i] += np.array([0.05, 0.05]) if np.all(self.adaptive_factors[i] < 1.0) else np.array([-0.05, -0.05])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedFastConvergenceAlgorithm", "description": "Enhance convergence speed by dynamically adjusting mutation and crossover parameters based on each individual's historical performance, promoting exploration and exploitation.", "configspace": "", "generation": 87, "fitness": 0.32825068347501785, "feedback": "The algorithm EnhancedFastConvergenceAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "bbb2aced-1fd4-42c7-bf11-c0e065a67008", "metadata": {"aucs": [0.8548404908297219, 0.8695287750688817, 0.8216076533226208, 0.8371795967210477, 0.8160059091274164, 0.7986407179307058, 0.8376532944259697, 0.8700697222456849, 0.8209038045116327, 0.7146231547111594, 0.7376584809174509, 0.7120638596247957, 0.7263356719706908, 0.7664737924234584, 0.6997878285415959, 0.7727923699751075, 0.7509522706981094, 0.6994481325967303, 0.5104174806870004, 0.47993638960547746, 0.17529158587510807, 0.17720019834955014, 0.15706293546481287, 0.16501021021825568, 0.16748762764081837, 0.6317783327625337, 0.5775192286159062, 0.42809760972548994, 0.14780750254444408, 0.15791876814620986, 0.49441231041054856, 0.3267085185590799, 0.528410396296138, 0.37499865855215475, 0.477033705816332, 0.14378873619793542, 0.9630198741629141, 0.9655738712599097, 0.9732397471003028, 0.949494733346039, 0.9637018973558752, 0.9660711692514964, 0.9626748729069632, 0.9692722537659374, 0.9851382123204335, 0.5166397959603375, 0.5543074477335013, 0.3783443891914483, 0.14296224296018822, 0.522415725412614, 0.4221272397622178, 0.314986145104466, 0.5202473006392845, 0.3847680425677886, 0.701616550846695, 0.34570856512275605, 0.16541009846709476, 0.4927964723832353, 0.4807892887853723, 0.358958652391169, 0.6880461670524936, 0.2172136220494112, 0.5702785001240072, 0.33275342435150623, 0.20312582475295193, 0.1860539368876335, 0.17500945934397172, 0.22304461538542175, 0.2421949000758471, 0.29266862622832457, 0.4047139213579043, 0.19949099157838746, 0.22524138793544457, 0.2811654921341026, 0.1434468139838867, 0.209575658840901, 0.2399639355358646, 0.18108320616136597, 0.23114460676039794, 0.30475967670251425, 0.14954341509439528, 0.09541044002997934, 0.0448032877502097, 0.059256762969890575, 0.05863493213992421, 0.07395568461098123, 0.046307182970486194, 0.133945315731283, 0.0579054957480466, 0.041103281360858945, 0.20455454201186918, 0.09761008270888227, 0.1845394121977938, 0.1975561086776333, 0.04107455298744811, 0.04888273236664609, 0.13869643029448564, 0.18269512566123003, 0.1623138504540178, 0.0300372209439711, 0.10254177087993177, 0.02407829201529732, 0.08143054499584834, 0.08118824689920257, 0.15080190258901927, 0.015623735824959795, 0.08727948137987096, 0.05485720670397709, 0.15776638753926286, 0.15153419649326283, 0.17284685740542394, 0.20329201169790256, 0.22994672112680925, 0.1778474760929437, 0.18579658583863456, 0.11092166551400384, 0.13792961588795738, 0.5854331712537988, 0.5807311165975226, 0.5377513222004194, 0.5576636553805022, 0.5909783603718103, 0.5109918723752349, 0.5465084042106281, 0.5872820963051831, 0.5460683766665977, 0.07759124935305228, 0.09813381756087292, 0.09241079967454202, 0.11879962228022145, 0.08670705740836471, 0.08287051197380335, 0.08668568038091395, 0.11923723056739022, 0.08931139251168185, 0.15630210757820495, 0.14934976770650155, 0.15361327365532107, 0.14092967323580652, 0.21669210429385577, 0.1398561156147351, 0.15516066203793855, 0.1586215704311762, 0.14191086009930753, 0.3313802783667773, 0.38865896258306054, 0.3070590985835826, 0.2814874852442971, 0.4026792953988615, 0.30397664747221464, 0.4164099140139135, 0.3682598161164712, 0.3075821517120536, 0.21920102589748736, 0.2781757616551247, 0.1906679608547287, 0.2445571990531663, 0.2578859579400612, 0.2368986444055019, 0.30883315407995726, 0.2152338608189993, 0.2130183804569611, 0.19459140079349424, 0.17918076247347403, 0.18039756698961407, 0.16421148778155625, 0.17738729324334968, 0.2019885357348037, 0.19356629919630053, 0.2218716512010135, 0.17922422322275944, 0.44304984372668166, 0.2198383330664495, 0.20518843837539347, 0.22932234959950093, 0.19800577151220256, 0.25490649511434627, 0.25970071148454, 0.19345507301907894, 0.21035077020927517, 0.1817344632575445, 0.6974923291236894, 0.563748827897403, 0.16985505727396832, 0.8105827171703412, 0.7527680126544222, 0.7526390607427559, 0.6628382549218861, 0.5150568054821487, 0.44194410815280827, 0.16682113891714834, 0.19791988682013117, 0.47248917322217854, 0.12370978581641179, 0.19459444471387122, 0.15866080473047472, 0.15393275554935737, 0.21997357914974258, 0.17333433736545412, 0.16968975339451076, 0.16972355585185595, 0.1903422697201771, 0.1761941404154762, 0.1722437918054307, 0.18158463311730244, 0.16671706505795536, 0.1875994602608292, 0.07555216335897075, 0.08427152433893148, 0.06742247075954888, 0.07316321827582306, 0.06842792068214643, 0.06617607459692787, 0.06256865397967537, 0.0744753074737271, 0.06691197868509258]}, "mutation_prompt": null}
{"id": "fa60f0f6-457a-4149-b68c-0dfafc1a3924", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImprovedFast:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n        self.scale_factors = np.random.uniform(0.1, 0.9, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.scale_factors[i, 0] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.scale_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.scale_factors[i] += np.array([0.1, 0.1]) if np.all(self.scale_factors[i] < 0.9) else np.array([-0.1, -0.1])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImprovedFast", "description": "EnhancedDynamicMutDEImprovedFast: Increase convergence speed by introducing dynamic adaptive scaling factors for mutation and crossover while maintaining individual adjustments based on performance.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bbb2aced-1fd4-42c7-bf11-c0e065a67008", "metadata": {"aucs": [0.8548404908297219, 0.8695287750688817, 0.8216076533226208, 0.8371795967210477, 0.8160059091274164, 0.7986407179307058, 0.8376532944259697, 0.8700697222456849, 0.8209038045116327, 0.7146231547111594, 0.7376584809174509, 0.7120638596247957, 0.7263356719706908, 0.7664737924234584, 0.6997878285415959, 0.7727923699751075, 0.7509522706981094, 0.6994481325967303, 0.5104174806870004, 0.47993638960547746, 0.17529158587510807, 0.17720019834955014, 0.15706293546481287, 0.16501021021825568, 0.16748762764081837, 0.6317783327625337, 0.5775192286159062, 0.42809760972548994, 0.14780750254444408, 0.15791876814620986, 0.49441231041054856, 0.3267085185590799, 0.528410396296138, 0.37499865855215475, 0.477033705816332, 0.14378873619793542, 0.9630198741629141, 0.9655738712599097, 0.9732397471003028, 0.949494733346039, 0.9637018973558752, 0.9660711692514964, 0.9626748729069632, 0.9692722537659374, 0.9851382123204335, 0.5166397959603375, 0.5543074477335013, 0.3783443891914483, 0.14296224296018822, 0.522415725412614, 0.4221272397622178, 0.314986145104466, 0.5202473006392845, 0.3847680425677886, 0.701616550846695, 0.34570856512275605, 0.16541009846709476, 0.4927964723832353, 0.4807892887853723, 0.358958652391169, 0.6880461670524936, 0.2172136220494112, 0.5702785001240072, 0.33275342435150623, 0.20312582475295193, 0.1860539368876335, 0.17500945934397172, 0.22304461538542175, 0.2421949000758471, 0.29266862622832457, 0.4047139213579043, 0.19949099157838746, 0.22524138793544457, 0.2811654921341026, 0.1434468139838867, 0.209575658840901, 0.2399639355358646, 0.18108320616136597, 0.23114460676039794, 0.30475967670251425, 0.14954341509439528, 0.09541044002997934, 0.0448032877502097, 0.059256762969890575, 0.05863493213992421, 0.07395568461098123, 0.046307182970486194, 0.133945315731283, 0.0579054957480466, 0.041103281360858945, 0.20455454201186918, 0.09761008270888227, 0.1845394121977938, 0.1975561086776333, 0.04107455298744811, 0.04888273236664609, 0.13869643029448564, 0.18269512566123003, 0.1623138504540178, 0.0300372209439711, 0.10254177087993177, 0.02407829201529732, 0.08143054499584834, 0.08118824689920257, 0.15080190258901927, 0.015623735824959795, 0.08727948137987096, 0.05485720670397709, 0.15776638753926286, 0.15153419649326283, 0.17284685740542394, 0.20329201169790256, 0.22994672112680925, 0.1778474760929437, 0.18579658583863456, 0.11092166551400384, 0.13792961588795738, 0.5854331712537988, 0.5807311165975226, 0.5377513222004194, 0.5576636553805022, 0.5909783603718103, 0.5109918723752349, 0.5465084042106281, 0.5872820963051831, 0.5460683766665977, 0.07759124935305228, 0.09813381756087292, 0.09241079967454202, 0.11879962228022145, 0.08670705740836471, 0.08287051197380335, 0.08668568038091395, 0.11923723056739022, 0.08931139251168185, 0.15630210757820495, 0.14934976770650155, 0.15361327365532107, 0.14092967323580652, 0.21669210429385577, 0.1398561156147351, 0.15516066203793855, 0.1586215704311762, 0.14191086009930753, 0.3313802783667773, 0.38865896258306054, 0.3070590985835826, 0.2814874852442971, 0.4026792953988615, 0.30397664747221464, 0.4164099140139135, 0.3682598161164712, 0.3075821517120536, 0.21920102589748736, 0.2781757616551247, 0.1906679608547287, 0.2445571990531663, 0.2578859579400612, 0.2368986444055019, 0.30883315407995726, 0.2152338608189993, 0.2130183804569611, 0.19459140079349424, 0.17918076247347403, 0.18039756698961407, 0.16421148778155625, 0.17738729324334968, 0.2019885357348037, 0.19356629919630053, 0.2218716512010135, 0.17922422322275944, 0.44304984372668166, 0.2198383330664495, 0.20518843837539347, 0.22932234959950093, 0.19800577151220256, 0.25490649511434627, 0.25970071148454, 0.19345507301907894, 0.21035077020927517, 0.1817344632575445, 0.6974923291236894, 0.563748827897403, 0.16985505727396832, 0.8105827171703412, 0.7527680126544222, 0.7526390607427559, 0.6628382549218861, 0.5150568054821487, 0.44194410815280827, 0.16682113891714834, 0.19791988682013117, 0.47248917322217854, 0.12370978581641179, 0.19459444471387122, 0.15866080473047472, 0.15393275554935737, 0.21997357914974258, 0.17333433736545412, 0.16968975339451076, 0.16972355585185595, 0.1903422697201771, 0.1761941404154762, 0.1722437918054307, 0.18158463311730244, 0.16671706505795536, 0.1875994602608292, 0.07555216335897075, 0.08427152433893148, 0.06742247075954888, 0.07316321827582306, 0.06842792068214643, 0.06617607459692787, 0.06256865397967537, 0.0744753074737271, 0.06691197868509258]}, "mutation_prompt": null}
{"id": "69dc728f-e80a-4d69-bd9a-7504f98f26ab", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImprovedFast:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n        self.scale_factors = np.random.uniform(0.1, 0.9, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.scale_factors[i, 0] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.scale_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.scale_factors[i] += np.array([0.1, 0.1]) if np.all(self.scale_factors[i] < 0.9) else np.array([-0.1, -0.1])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImprovedFast", "description": "EnhancedDynamicMutDEImprovedFast: Increase convergence speed by introducing dynamic adaptive scaling factors for mutation and crossover while maintaining individual adjustments based on performance.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bbb2aced-1fd4-42c7-bf11-c0e065a67008", "metadata": {"aucs": [0.8548404908297219, 0.8695287750688817, 0.8216076533226208, 0.8371795967210477, 0.8160059091274164, 0.7986407179307058, 0.8376532944259697, 0.8700697222456849, 0.8209038045116327, 0.7146231547111594, 0.7376584809174509, 0.7120638596247957, 0.7263356719706908, 0.7664737924234584, 0.6997878285415959, 0.7727923699751075, 0.7509522706981094, 0.6994481325967303, 0.5104174806870004, 0.47993638960547746, 0.17529158587510807, 0.17720019834955014, 0.15706293546481287, 0.16501021021825568, 0.16748762764081837, 0.6317783327625337, 0.5775192286159062, 0.42809760972548994, 0.14780750254444408, 0.15791876814620986, 0.49441231041054856, 0.3267085185590799, 0.528410396296138, 0.37499865855215475, 0.477033705816332, 0.14378873619793542, 0.9630198741629141, 0.9655738712599097, 0.9732397471003028, 0.949494733346039, 0.9637018973558752, 0.9660711692514964, 0.9626748729069632, 0.9692722537659374, 0.9851382123204335, 0.5166397959603375, 0.5543074477335013, 0.3783443891914483, 0.14296224296018822, 0.522415725412614, 0.4221272397622178, 0.314986145104466, 0.5202473006392845, 0.3847680425677886, 0.701616550846695, 0.34570856512275605, 0.16541009846709476, 0.4927964723832353, 0.4807892887853723, 0.358958652391169, 0.6880461670524936, 0.2172136220494112, 0.5702785001240072, 0.33275342435150623, 0.20312582475295193, 0.1860539368876335, 0.17500945934397172, 0.22304461538542175, 0.2421949000758471, 0.29266862622832457, 0.4047139213579043, 0.19949099157838746, 0.22524138793544457, 0.2811654921341026, 0.1434468139838867, 0.209575658840901, 0.2399639355358646, 0.18108320616136597, 0.23114460676039794, 0.30475967670251425, 0.14954341509439528, 0.09541044002997934, 0.0448032877502097, 0.059256762969890575, 0.05863493213992421, 0.07395568461098123, 0.046307182970486194, 0.133945315731283, 0.0579054957480466, 0.041103281360858945, 0.20455454201186918, 0.09761008270888227, 0.1845394121977938, 0.1975561086776333, 0.04107455298744811, 0.04888273236664609, 0.13869643029448564, 0.18269512566123003, 0.1623138504540178, 0.0300372209439711, 0.10254177087993177, 0.02407829201529732, 0.08143054499584834, 0.08118824689920257, 0.15080190258901927, 0.015623735824959795, 0.08727948137987096, 0.05485720670397709, 0.15776638753926286, 0.15153419649326283, 0.17284685740542394, 0.20329201169790256, 0.22994672112680925, 0.1778474760929437, 0.18579658583863456, 0.11092166551400384, 0.13792961588795738, 0.5854331712537988, 0.5807311165975226, 0.5377513222004194, 0.5576636553805022, 0.5909783603718103, 0.5109918723752349, 0.5465084042106281, 0.5872820963051831, 0.5460683766665977, 0.07759124935305228, 0.09813381756087292, 0.09241079967454202, 0.11879962228022145, 0.08670705740836471, 0.08287051197380335, 0.08668568038091395, 0.11923723056739022, 0.08931139251168185, 0.15630210757820495, 0.14934976770650155, 0.15361327365532107, 0.14092967323580652, 0.21669210429385577, 0.1398561156147351, 0.15516066203793855, 0.1586215704311762, 0.14191086009930753, 0.3313802783667773, 0.38865896258306054, 0.3070590985835826, 0.2814874852442971, 0.4026792953988615, 0.30397664747221464, 0.4164099140139135, 0.3682598161164712, 0.3075821517120536, 0.21920102589748736, 0.2781757616551247, 0.1906679608547287, 0.2445571990531663, 0.2578859579400612, 0.2368986444055019, 0.30883315407995726, 0.2152338608189993, 0.2130183804569611, 0.19459140079349424, 0.17918076247347403, 0.18039756698961407, 0.16421148778155625, 0.17738729324334968, 0.2019885357348037, 0.19356629919630053, 0.2218716512010135, 0.17922422322275944, 0.44304984372668166, 0.2198383330664495, 0.20518843837539347, 0.22932234959950093, 0.19800577151220256, 0.25490649511434627, 0.25970071148454, 0.19345507301907894, 0.21035077020927517, 0.1817344632575445, 0.6974923291236894, 0.563748827897403, 0.16985505727396832, 0.8105827171703412, 0.7527680126544222, 0.7526390607427559, 0.6628382549218861, 0.5150568054821487, 0.44194410815280827, 0.16682113891714834, 0.19791988682013117, 0.47248917322217854, 0.12370978581641179, 0.19459444471387122, 0.15866080473047472, 0.15393275554935737, 0.21997357914974258, 0.17333433736545412, 0.16968975339451076, 0.16972355585185595, 0.1903422697201771, 0.1761941404154762, 0.1722437918054307, 0.18158463311730244, 0.16671706505795536, 0.1875994602608292, 0.07555216335897075, 0.08427152433893148, 0.06742247075954888, 0.07316321827582306, 0.06842792068214643, 0.06617607459692787, 0.06256865397967537, 0.0744753074737271, 0.06691197868509258]}, "mutation_prompt": null}
{"id": "a95fe94c-1583-4ecf-9e1b-cfac211d11e5", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImprovedFast:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n        self.scale_factors = np.random.uniform(0.1, 0.9, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.scale_factors[i, 0] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.scale_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.scale_factors[i] += np.array([0.1, 0.1]) if np.all(self.scale_factors[i] < 0.9) else np.array([-0.1, -0.1])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImprovedFast", "description": "EnhancedDynamicMutDEImprovedFast: Increase convergence speed by introducing dynamic adaptive scaling factors for mutation and crossover while maintaining individual adjustments based on performance.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bbb2aced-1fd4-42c7-bf11-c0e065a67008", "metadata": {"aucs": [0.8548404908297219, 0.8695287750688817, 0.8216076533226208, 0.8371795967210477, 0.8160059091274164, 0.7986407179307058, 0.8376532944259697, 0.8700697222456849, 0.8209038045116327, 0.7146231547111594, 0.7376584809174509, 0.7120638596247957, 0.7263356719706908, 0.7664737924234584, 0.6997878285415959, 0.7727923699751075, 0.7509522706981094, 0.6994481325967303, 0.5104174806870004, 0.47993638960547746, 0.17529158587510807, 0.17720019834955014, 0.15706293546481287, 0.16501021021825568, 0.16748762764081837, 0.6317783327625337, 0.5775192286159062, 0.42809760972548994, 0.14780750254444408, 0.15791876814620986, 0.49441231041054856, 0.3267085185590799, 0.528410396296138, 0.37499865855215475, 0.477033705816332, 0.14378873619793542, 0.9630198741629141, 0.9655738712599097, 0.9732397471003028, 0.949494733346039, 0.9637018973558752, 0.9660711692514964, 0.9626748729069632, 0.9692722537659374, 0.9851382123204335, 0.5166397959603375, 0.5543074477335013, 0.3783443891914483, 0.14296224296018822, 0.522415725412614, 0.4221272397622178, 0.314986145104466, 0.5202473006392845, 0.3847680425677886, 0.701616550846695, 0.34570856512275605, 0.16541009846709476, 0.4927964723832353, 0.4807892887853723, 0.358958652391169, 0.6880461670524936, 0.2172136220494112, 0.5702785001240072, 0.33275342435150623, 0.20312582475295193, 0.1860539368876335, 0.17500945934397172, 0.22304461538542175, 0.2421949000758471, 0.29266862622832457, 0.4047139213579043, 0.19949099157838746, 0.22524138793544457, 0.2811654921341026, 0.1434468139838867, 0.209575658840901, 0.2399639355358646, 0.18108320616136597, 0.23114460676039794, 0.30475967670251425, 0.14954341509439528, 0.09541044002997934, 0.0448032877502097, 0.059256762969890575, 0.05863493213992421, 0.07395568461098123, 0.046307182970486194, 0.133945315731283, 0.0579054957480466, 0.041103281360858945, 0.20455454201186918, 0.09761008270888227, 0.1845394121977938, 0.1975561086776333, 0.04107455298744811, 0.04888273236664609, 0.13869643029448564, 0.18269512566123003, 0.1623138504540178, 0.0300372209439711, 0.10254177087993177, 0.02407829201529732, 0.08143054499584834, 0.08118824689920257, 0.15080190258901927, 0.015623735824959795, 0.08727948137987096, 0.05485720670397709, 0.15776638753926286, 0.15153419649326283, 0.17284685740542394, 0.20329201169790256, 0.22994672112680925, 0.1778474760929437, 0.18579658583863456, 0.11092166551400384, 0.13792961588795738, 0.5854331712537988, 0.5807311165975226, 0.5377513222004194, 0.5576636553805022, 0.5909783603718103, 0.5109918723752349, 0.5465084042106281, 0.5872820963051831, 0.5460683766665977, 0.07759124935305228, 0.09813381756087292, 0.09241079967454202, 0.11879962228022145, 0.08670705740836471, 0.08287051197380335, 0.08668568038091395, 0.11923723056739022, 0.08931139251168185, 0.15630210757820495, 0.14934976770650155, 0.15361327365532107, 0.14092967323580652, 0.21669210429385577, 0.1398561156147351, 0.15516066203793855, 0.1586215704311762, 0.14191086009930753, 0.3313802783667773, 0.38865896258306054, 0.3070590985835826, 0.2814874852442971, 0.4026792953988615, 0.30397664747221464, 0.4164099140139135, 0.3682598161164712, 0.3075821517120536, 0.21920102589748736, 0.2781757616551247, 0.1906679608547287, 0.2445571990531663, 0.2578859579400612, 0.2368986444055019, 0.30883315407995726, 0.2152338608189993, 0.2130183804569611, 0.19459140079349424, 0.17918076247347403, 0.18039756698961407, 0.16421148778155625, 0.17738729324334968, 0.2019885357348037, 0.19356629919630053, 0.2218716512010135, 0.17922422322275944, 0.44304984372668166, 0.2198383330664495, 0.20518843837539347, 0.22932234959950093, 0.19800577151220256, 0.25490649511434627, 0.25970071148454, 0.19345507301907894, 0.21035077020927517, 0.1817344632575445, 0.6974923291236894, 0.563748827897403, 0.16985505727396832, 0.8105827171703412, 0.7527680126544222, 0.7526390607427559, 0.6628382549218861, 0.5150568054821487, 0.44194410815280827, 0.16682113891714834, 0.19791988682013117, 0.47248917322217854, 0.12370978581641179, 0.19459444471387122, 0.15866080473047472, 0.15393275554935737, 0.21997357914974258, 0.17333433736545412, 0.16968975339451076, 0.16972355585185595, 0.1903422697201771, 0.1761941404154762, 0.1722437918054307, 0.18158463311730244, 0.16671706505795536, 0.1875994602608292, 0.07555216335897075, 0.08427152433893148, 0.06742247075954888, 0.07316321827582306, 0.06842792068214643, 0.06617607459692787, 0.06256865397967537, 0.0744753074737271, 0.06691197868509258]}, "mutation_prompt": null}
{"id": "543cef32-9efe-43f4-b542-11c3ecbe720c", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImprovedFaster:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n        self.scale_factors = np.random.uniform(0.1, 0.9, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.scale_factors[i, 0] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.scale_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    mutation_factor = 0.1 if np.all(self.scale_factors[i] < 0.9) else -0.1\n                    self.scale_factors[i] += np.array([mutation_factor, mutation_factor])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImprovedFaster", "description": "Enhance convergence speed by dynamically adjusting mutation and crossover scaling factors based on individual performance, utilizing a novel adaptive strategy while preserving fundamental algorithm structure.", "configspace": "", "generation": 91, "fitness": 0.32825068347501785, "feedback": "The algorithm EnhancedDynamicMutDEImprovedFaster got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "bbb2aced-1fd4-42c7-bf11-c0e065a67008", "metadata": {"aucs": [0.8548404908297219, 0.8695287750688817, 0.8216076533226208, 0.8371795967210477, 0.8160059091274164, 0.7986407179307058, 0.8376532944259697, 0.8700697222456849, 0.8209038045116327, 0.7146231547111594, 0.7376584809174509, 0.7120638596247957, 0.7263356719706908, 0.7664737924234584, 0.6997878285415959, 0.7727923699751075, 0.7509522706981094, 0.6994481325967303, 0.5104174806870004, 0.47993638960547746, 0.17529158587510807, 0.17720019834955014, 0.15706293546481287, 0.16501021021825568, 0.16748762764081837, 0.6317783327625337, 0.5775192286159062, 0.42809760972548994, 0.14780750254444408, 0.15791876814620986, 0.49441231041054856, 0.3267085185590799, 0.528410396296138, 0.37499865855215475, 0.477033705816332, 0.14378873619793542, 0.9630198741629141, 0.9655738712599097, 0.9732397471003028, 0.949494733346039, 0.9637018973558752, 0.9660711692514964, 0.9626748729069632, 0.9692722537659374, 0.9851382123204335, 0.5166397959603375, 0.5543074477335013, 0.3783443891914483, 0.14296224296018822, 0.522415725412614, 0.4221272397622178, 0.314986145104466, 0.5202473006392845, 0.3847680425677886, 0.701616550846695, 0.34570856512275605, 0.16541009846709476, 0.4927964723832353, 0.4807892887853723, 0.358958652391169, 0.6880461670524936, 0.2172136220494112, 0.5702785001240072, 0.33275342435150623, 0.20312582475295193, 0.1860539368876335, 0.17500945934397172, 0.22304461538542175, 0.2421949000758471, 0.29266862622832457, 0.4047139213579043, 0.19949099157838746, 0.22524138793544457, 0.2811654921341026, 0.1434468139838867, 0.209575658840901, 0.2399639355358646, 0.18108320616136597, 0.23114460676039794, 0.30475967670251425, 0.14954341509439528, 0.09541044002997934, 0.0448032877502097, 0.059256762969890575, 0.05863493213992421, 0.07395568461098123, 0.046307182970486194, 0.133945315731283, 0.0579054957480466, 0.041103281360858945, 0.20455454201186918, 0.09761008270888227, 0.1845394121977938, 0.1975561086776333, 0.04107455298744811, 0.04888273236664609, 0.13869643029448564, 0.18269512566123003, 0.1623138504540178, 0.0300372209439711, 0.10254177087993177, 0.02407829201529732, 0.08143054499584834, 0.08118824689920257, 0.15080190258901927, 0.015623735824959795, 0.08727948137987096, 0.05485720670397709, 0.15776638753926286, 0.15153419649326283, 0.17284685740542394, 0.20329201169790256, 0.22994672112680925, 0.1778474760929437, 0.18579658583863456, 0.11092166551400384, 0.13792961588795738, 0.5854331712537988, 0.5807311165975226, 0.5377513222004194, 0.5576636553805022, 0.5909783603718103, 0.5109918723752349, 0.5465084042106281, 0.5872820963051831, 0.5460683766665977, 0.07759124935305228, 0.09813381756087292, 0.09241079967454202, 0.11879962228022145, 0.08670705740836471, 0.08287051197380335, 0.08668568038091395, 0.11923723056739022, 0.08931139251168185, 0.15630210757820495, 0.14934976770650155, 0.15361327365532107, 0.14092967323580652, 0.21669210429385577, 0.1398561156147351, 0.15516066203793855, 0.1586215704311762, 0.14191086009930753, 0.3313802783667773, 0.38865896258306054, 0.3070590985835826, 0.2814874852442971, 0.4026792953988615, 0.30397664747221464, 0.4164099140139135, 0.3682598161164712, 0.3075821517120536, 0.21920102589748736, 0.2781757616551247, 0.1906679608547287, 0.2445571990531663, 0.2578859579400612, 0.2368986444055019, 0.30883315407995726, 0.2152338608189993, 0.2130183804569611, 0.19459140079349424, 0.17918076247347403, 0.18039756698961407, 0.16421148778155625, 0.17738729324334968, 0.2019885357348037, 0.19356629919630053, 0.2218716512010135, 0.17922422322275944, 0.44304984372668166, 0.2198383330664495, 0.20518843837539347, 0.22932234959950093, 0.19800577151220256, 0.25490649511434627, 0.25970071148454, 0.19345507301907894, 0.21035077020927517, 0.1817344632575445, 0.6974923291236894, 0.563748827897403, 0.16985505727396832, 0.8105827171703412, 0.7527680126544222, 0.7526390607427559, 0.6628382549218861, 0.5150568054821487, 0.44194410815280827, 0.16682113891714834, 0.19791988682013117, 0.47248917322217854, 0.12370978581641179, 0.19459444471387122, 0.15866080473047472, 0.15393275554935737, 0.21997357914974258, 0.17333433736545412, 0.16968975339451076, 0.16972355585185595, 0.1903422697201771, 0.1761941404154762, 0.1722437918054307, 0.18158463311730244, 0.16671706505795536, 0.1875994602608292, 0.07555216335897075, 0.08427152433893148, 0.06742247075954888, 0.07316321827582306, 0.06842792068214643, 0.06617607459692787, 0.06256865397967537, 0.0744753074737271, 0.06691197868509258]}, "mutation_prompt": null}
{"id": "0ae692be-769c-4bbe-a19f-3d26dc71d472", "solution": "import numpy as np\n\nclass EnhancedDynamicMutDEImprovedFast:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n        self.scale_factors = np.random.uniform(0.1, 0.9, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.scale_factors[i, 0] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.scale_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.scale_factors[i] += np.array([0.1, 0.1]) if np.all(self.scale_factors[i] < 0.9) else np.array([-0.1, -0.1])\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicMutDEImprovedFast", "description": "EnhancedDynamicMutDEImprovedFast: Increase convergence speed by introducing dynamic adaptive scaling factors for mutation and crossover while maintaining individual adjustments based on performance.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bbb2aced-1fd4-42c7-bf11-c0e065a67008", "metadata": {"aucs": [0.8548404908297219, 0.8695287750688817, 0.8216076533226208, 0.8371795967210477, 0.8160059091274164, 0.7986407179307058, 0.8376532944259697, 0.8700697222456849, 0.8209038045116327, 0.7146231547111594, 0.7376584809174509, 0.7120638596247957, 0.7263356719706908, 0.7664737924234584, 0.6997878285415959, 0.7727923699751075, 0.7509522706981094, 0.6994481325967303, 0.5104174806870004, 0.47993638960547746, 0.17529158587510807, 0.17720019834955014, 0.15706293546481287, 0.16501021021825568, 0.16748762764081837, 0.6317783327625337, 0.5775192286159062, 0.42809760972548994, 0.14780750254444408, 0.15791876814620986, 0.49441231041054856, 0.3267085185590799, 0.528410396296138, 0.37499865855215475, 0.477033705816332, 0.14378873619793542, 0.9630198741629141, 0.9655738712599097, 0.9732397471003028, 0.949494733346039, 0.9637018973558752, 0.9660711692514964, 0.9626748729069632, 0.9692722537659374, 0.9851382123204335, 0.5166397959603375, 0.5543074477335013, 0.3783443891914483, 0.14296224296018822, 0.522415725412614, 0.4221272397622178, 0.314986145104466, 0.5202473006392845, 0.3847680425677886, 0.701616550846695, 0.34570856512275605, 0.16541009846709476, 0.4927964723832353, 0.4807892887853723, 0.358958652391169, 0.6880461670524936, 0.2172136220494112, 0.5702785001240072, 0.33275342435150623, 0.20312582475295193, 0.1860539368876335, 0.17500945934397172, 0.22304461538542175, 0.2421949000758471, 0.29266862622832457, 0.4047139213579043, 0.19949099157838746, 0.22524138793544457, 0.2811654921341026, 0.1434468139838867, 0.209575658840901, 0.2399639355358646, 0.18108320616136597, 0.23114460676039794, 0.30475967670251425, 0.14954341509439528, 0.09541044002997934, 0.0448032877502097, 0.059256762969890575, 0.05863493213992421, 0.07395568461098123, 0.046307182970486194, 0.133945315731283, 0.0579054957480466, 0.041103281360858945, 0.20455454201186918, 0.09761008270888227, 0.1845394121977938, 0.1975561086776333, 0.04107455298744811, 0.04888273236664609, 0.13869643029448564, 0.18269512566123003, 0.1623138504540178, 0.0300372209439711, 0.10254177087993177, 0.02407829201529732, 0.08143054499584834, 0.08118824689920257, 0.15080190258901927, 0.015623735824959795, 0.08727948137987096, 0.05485720670397709, 0.15776638753926286, 0.15153419649326283, 0.17284685740542394, 0.20329201169790256, 0.22994672112680925, 0.1778474760929437, 0.18579658583863456, 0.11092166551400384, 0.13792961588795738, 0.5854331712537988, 0.5807311165975226, 0.5377513222004194, 0.5576636553805022, 0.5909783603718103, 0.5109918723752349, 0.5465084042106281, 0.5872820963051831, 0.5460683766665977, 0.07759124935305228, 0.09813381756087292, 0.09241079967454202, 0.11879962228022145, 0.08670705740836471, 0.08287051197380335, 0.08668568038091395, 0.11923723056739022, 0.08931139251168185, 0.15630210757820495, 0.14934976770650155, 0.15361327365532107, 0.14092967323580652, 0.21669210429385577, 0.1398561156147351, 0.15516066203793855, 0.1586215704311762, 0.14191086009930753, 0.3313802783667773, 0.38865896258306054, 0.3070590985835826, 0.2814874852442971, 0.4026792953988615, 0.30397664747221464, 0.4164099140139135, 0.3682598161164712, 0.3075821517120536, 0.21920102589748736, 0.2781757616551247, 0.1906679608547287, 0.2445571990531663, 0.2578859579400612, 0.2368986444055019, 0.30883315407995726, 0.2152338608189993, 0.2130183804569611, 0.19459140079349424, 0.17918076247347403, 0.18039756698961407, 0.16421148778155625, 0.17738729324334968, 0.2019885357348037, 0.19356629919630053, 0.2218716512010135, 0.17922422322275944, 0.44304984372668166, 0.2198383330664495, 0.20518843837539347, 0.22932234959950093, 0.19800577151220256, 0.25490649511434627, 0.25970071148454, 0.19345507301907894, 0.21035077020927517, 0.1817344632575445, 0.6974923291236894, 0.563748827897403, 0.16985505727396832, 0.8105827171703412, 0.7527680126544222, 0.7526390607427559, 0.6628382549218861, 0.5150568054821487, 0.44194410815280827, 0.16682113891714834, 0.19791988682013117, 0.47248917322217854, 0.12370978581641179, 0.19459444471387122, 0.15866080473047472, 0.15393275554935737, 0.21997357914974258, 0.17333433736545412, 0.16968975339451076, 0.16972355585185595, 0.1903422697201771, 0.1761941404154762, 0.1722437918054307, 0.18158463311730244, 0.16671706505795536, 0.1875994602608292, 0.07555216335897075, 0.08427152433893148, 0.06742247075954888, 0.07316321827582306, 0.06842792068214643, 0.06617607459692787, 0.06256865397967537, 0.0744753074737271, 0.06691197868509258]}, "mutation_prompt": null}
{"id": "c23734b2-4df6-473b-aada-1279d513d851", "solution": "import numpy as np\n\nclass DynamicSelfAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n        self.scale_factors = np.random.uniform(0.1, 0.9, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.scale_factors[i, 0] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.scale_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.scale_factors[i] += np.array([0.1, 0.1]) if np.all(self.scale_factors[i] < 0.9) else np.array([-0.1, -0.1])\n                    self.scale_factors[i] = np.clip(self.scale_factors[i], 0.1, 0.9)  # Dynamic self-adaptation\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DynamicSelfAdaptiveDE", "description": "Improving convergence speed by incorporating a dynamic self-adaptive mechanism for mutation and crossover with individual adjustments based on performance, while enhancing exploration-exploitation balance.", "configspace": "", "generation": 93, "fitness": 0.34329953233885785, "feedback": "The algorithm DynamicSelfAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "bbb2aced-1fd4-42c7-bf11-c0e065a67008", "metadata": {"aucs": [0.8631565634845934, 0.8659734253183706, 0.8468523995153997, 0.8432184979352222, 0.8594433332322031, 0.8463820034687066, 0.8428470523327336, 0.880121786881531, 0.8379252648320191, 0.734582491008825, 0.8019321086575636, 0.7210974925913591, 0.7465829647189185, 0.7643982480875839, 0.7251223748136288, 0.7392616424118772, 0.790512442493894, 0.723335323299178, 0.6207146756659171, 0.49024547867849744, 0.4884738492898266, 0.17608796786048808, 0.17534262480482066, 0.17485799992900175, 0.5246332186297797, 0.5148966865008306, 0.5439013070313898, 0.1671127162078383, 0.593145635184321, 0.1499573074921704, 0.49321253104741414, 0.5775779486395299, 0.3828546180169584, 0.1615814918360926, 0.37457785153730694, 0.144507968461832, 0.9515319168731693, 0.9680563914542932, 0.97094339990637, 0.9645889728986913, 0.9672936863437808, 0.9692093194133277, 0.9521775914940744, 0.9825398051331461, 0.985138248628809, 0.5398075149089159, 0.5045301278164144, 0.43401242433089215, 0.526281428758483, 0.5831423866403678, 0.40605003933568584, 0.5621596502747872, 0.35494755506656495, 0.406784643193987, 0.49235450528831226, 0.212159903002074, 0.45356274061445057, 0.7234606893369522, 0.7100091006258946, 0.7275879696116865, 0.762877051095435, 0.6631136994748379, 0.5082282985261908, 0.17183235059545354, 0.30339395605277486, 0.11971063717498653, 0.21363248824438552, 0.21893025167004354, 0.17718683162516613, 0.2189832160544425, 0.23363510537150167, 0.2120075721309489, 0.24921496087658002, 0.19195363059632542, 0.22823090615472086, 0.1522466980963334, 0.2252564773804473, 0.15913391804783728, 0.24785345532542846, 0.2079746987971639, 0.18623382279204193, 0.05978968547756558, 0.02553192806271709, 0.046557677579795564, 0.02293221079768304, 0.114151404408387, 0.0060097769065927675, 0.07763098637096444, 0.07620499040252637, 0.009386438611344583, 0.11718622481421803, 0.11749345379640852, 0.10912141853363733, 0.14129527929391372, 0.055965616531713724, 0.09211315855894986, 0.11763113114322354, 0.17324831094761994, 0.21988929255135892, 0.10598446866019062, 0.08744154419027328, 0.03421650391897402, 0.09007536358708679, 0.11599398648467707, 0.023739125562945107, 0.09830967371223431, 0.1015695167477163, 0.0391263210041245, 0.17763742182631992, 0.21544414703246817, 0.17185232943113093, 0.22097866551990064, 0.2221137114879631, 0.2040491169865961, 0.14649824408683798, 0.16368730486588223, 0.1565733968094286, 0.5652135168888193, 0.587192419959913, 0.5569003940825346, 0.5577414728516061, 0.6175571935913035, 0.507588140563215, 0.574923296614578, 0.545641248754676, 0.5659172653199334, 0.08807106634454143, 0.0705030588805019, 0.11133555101016135, 0.09784135221776447, 0.09857988566659037, 0.0942163749934829, 0.10621027291281826, 0.11117795172778455, 0.08206358678705872, 0.1548492347989382, 0.2962300923773622, 0.17587003196188744, 0.14880051887133017, 0.13673992672298352, 0.1538993202042066, 0.16989585447786648, 0.13562403228512232, 0.15180386383033362, 0.3744974657068222, 0.3791819811692666, 0.30180811547887876, 0.30843863873707444, 0.4216016474674805, 0.26354809852572125, 0.4136659246337706, 0.3648767434451724, 0.3793324804394268, 0.2533071870683713, 0.24246829127431135, 0.21536687709946, 0.23043845340666858, 0.24380784593534688, 0.21486321065125535, 0.2774864040048086, 0.2962777098743402, 0.30096288822418304, 0.1770962385542595, 0.20391661865751887, 0.19033814219261214, 0.18036157948285858, 0.18602472115234137, 0.162494188016579, 0.19892233361051626, 0.18701247842182456, 0.18400423080031236, 0.21142844379806602, 0.46629909378338075, 0.4275767239950602, 0.1908939263277717, 0.2317843574935905, 0.3246266537288558, 0.187779476572006, 0.2410442032338348, 0.19300499948323047, 0.16535081579630917, 0.7614377323486103, 0.6414817857862449, 0.19163462672555964, 0.7736916782736389, 0.7691720050779313, 0.7728825103691435, 0.4594652709543927, 0.18608202446115552, 0.6935425109141529, 0.16681007386086255, 0.20506340638209453, 0.4425941749212431, 0.15181927204943346, 0.203752243877252, 0.15925069325823082, 0.6593698660004026, 0.2060889069362054, 0.1886082224143254, 0.18579573063169286, 0.1927210346509297, 0.18959534316988325, 0.1786847985194674, 0.1839257193103655, 0.1774703330574704, 0.17393685521990954, 0.18781143589354665, 0.08010493842010002, 0.07868283211741234, 0.06487394760292009, 0.06582068982886724, 0.08682740061520833, 0.06306110946376575, 0.06822817841617868, 0.07630021148232224, 0.06801815360660568]}, "mutation_prompt": null}
{"id": "b0191fcb-ea8e-420d-bdd5-490d6e7efff8", "solution": "import numpy as np\n\nclass ImprovedDynamicSelfAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n        self.scale_factors = np.random.uniform(0.1, 0.9, (self.population_size, 2))\n        self.selection_probs = np.random.dirichlet(np.ones(3), self.population_size)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                choice = np.random.choice(['mutation', 'crossover', 'current'], p=self.selection_probs[i])\n                if choice == 'mutation':\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                    mutant = self.population[a] + self.scale_factors[i, 0] * (self.population[b] - self.population[c])\n                    trial = np.clip(mutant, -5.0, 5.0)\n                elif choice == 'crossover':\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                    crossover_points = np.random.rand(self.dim) < self.scale_factors[i, 1]\n                    trial = np.where(crossover_points, self.population[a], self.population[b])\n                else:\n                    trial = self.population[i]\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.scale_factors[i] += np.array([0.15, 0.15]) if np.all(self.scale_factors[i] < 0.9) else np.array([-0.1, -0.1])\n                    self.scale_factors[i] = np.clip(self.scale_factors[i], 0.1, 0.9)  # Dynamic self-adaptation\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "ImprovedDynamicSelfAdaptiveDE", "description": "Enhancing convergence speed by introducing a novel adaptive selection mechanism for mutation and crossover to increase exploration and exploitation efficiently.", "configspace": "", "generation": 94, "fitness": 0.12099934480735085, "feedback": "The algorithm ImprovedDynamicSelfAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.17.", "error": "", "parent_id": "c23734b2-4df6-473b-aada-1279d513d851", "metadata": {"aucs": [0.23365439635025964, 0.3269546327482026, 0.2112990207722455, 0.12577780879701672, 0.1607532694188094, 0.35766290196625494, 0.13709647109479428, 0.29565654341146086, 0.436931304637869, 9.999999999998899e-05, 9.999999999998899e-05, 0.017060011171414202, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03515192250019605, 0.07997276852055935, 0.05852630826756411, 0.07524340072730862, 0.036097665829426306, 0.13042637226292264, 0.04101518487866984, 0.03600521246742461, 0.09567878605427993, 0.06640683172490258, 0.006336614507342353, 0.060192326473933244, 0.06825853112355684, 9.999999999998899e-05, 0.0590310859051939, 9.999999999998899e-05, 0.055433409055661964, 0.141308955296629, 0.9528284249330916, 0.9631653544400594, 0.9672098694122696, 0.16374828732694235, 0.9056458436491729, 0.9470794214764718, 0.10808290980561175, 0.8886973530820237, 0.9573068577223673, 0.03683574002248968, 0.05524373110249925, 0.08700832015928495, 0.029638078815414137, 0.14276858416024185, 0.20702875831888967, 0.04275623585226407, 0.014808897031638457, 9.999999999998899e-05, 0.1770897725834626, 0.0665424543828822, 0.08509884174674831, 0.05609195964194258, 0.1291902212707131, 0.2120213713951039, 0.23737815653377714, 0.12241862029388162, 0.12104847543811648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02807191502560691, 9.999999999998899e-05, 9.999999999998899e-05, 0.020887845482779777, 0.13106296310135568, 0.013776785091054955, 0.08638257117206338, 0.0581479683901982, 0.029239385799394557, 0.05058317798287604, 0.12862988420739352, 0.035666302039813136, 9.999999999998899e-05, 0.1277535810207353, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03949330631770953, 0.035904285642166855, 0.07017109311911796, 0.0707657835667207, 0.06326412828643735, 9.999999999998899e-05, 0.04650442240888364, 0.10798636447290233, 0.0656505574168188, 0.03801514295978414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019015603819476645, 0.020602023732593455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058186822956421524, 9.999999999998899e-05, 0.02984158575840501, 0.03698397238773121, 0.21171272555618104, 0.16440216272167507, 0.29318499828359845, 0.21319000962409695, 0.15680488361971512, 0.23775593147966712, 0.3355030744541938, 0.21012710558243575, 0.2385283710286732, 0.05937664517388097, 0.025640938962680937, 0.0294631612051236, 0.08004314795020107, 0.03283161819895153, 0.05201709016766565, 0.04010396134927918, 0.05826736698932122, 0.0683964087300315, 0.07036264354701904, 0.13333338862450272, 0.13888893539703662, 0.09856381971759343, 0.06580640685763028, 0.09130391268927884, 0.11027652443355129, 0.07982023921240744, 0.07725526608834665, 0.1201486335999139, 0.2132676182039911, 0.12933748961121494, 0.1891838728681362, 0.16874272976469562, 0.1303404557405533, 0.13994819440177575, 0.1349154858991224, 0.17128513947380708, 0.07450073308584448, 0.1492364278631012, 0.10369571999808791, 0.08561415697405683, 0.15264643559475422, 0.11857314224146887, 0.11771290974339321, 0.10813037876922882, 0.0614414681722254, 0.14287367316247923, 0.1666372105654722, 0.14307491585944754, 0.15281631143159013, 0.13166142200697106, 0.16288509434306453, 0.14230445421695603, 0.13789916334729846, 0.12617134628113147, 0.1695456912181742, 0.17017347517058878, 0.16760987261289284, 0.16963465612347084, 0.19524393714148824, 0.17310760595806352, 0.13665798019267128, 0.15523461148908024, 0.16117503762846608, 0.10798806282707085, 0.07200659847720925, 0.16812922861460133, 0.12332604740747044, 0.19648480822838144, 0.16471216116243792, 0.16384878160672356, 0.11666708629519129, 0.07461269272848037, 0.11267307210019684, 0.17148986723718385, 0.12574266492817188, 0.17023851122379108, 0.12413187874836362, 0.17505724088564545, 0.10138011105369005, 0.10494363553922781, 0.21735161854137075, 0.12400083391374006, 0.1381574060088886, 0.14761576589893888, 0.1459678858445408, 0.1524842654166283, 0.1453332895093643, 0.1361695685767369, 0.1406796095271906, 0.14687975956940513, 0.04781221617840836, 0.032348714321654204, 0.04106110662937135, 0.046463718277992117, 0.059116427234858215, 0.039342337939531014, 0.05197712209881156, 0.024166588866927796, 0.05497190128799978]}, "mutation_prompt": null}
{"id": "8ebb9966-2e4d-40e0-84a6-6e37b9f2f9df", "solution": "import numpy as np\n\nclass EnhancedDynamicSelfAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n        self.scale_factors = np.random.uniform(0.1, 0.9, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutation_rate = 1 - (func(self.population[i]) / np.mean([func(ind) for ind in self.population]))\n                mutant = self.population[a] + mutation_rate * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.scale_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.scale_factors[i] += np.array([0.1, 0.1]) if np.all(self.scale_factors[i] < 0.9) else np.array([-0.1, -0.1])\n                    self.scale_factors[i] = np.clip(self.scale_factors[i], 0.1, 0.9)  # Dynamic self-adaptation\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicSelfAdaptiveDE", "description": "Enhancing the exploration capability by introducing a dynamic mutation strategy based on individual performance, promoting diverse search with adaptive mutation probabilities.", "configspace": "", "generation": 95, "fitness": 0.09461611601956423, "feedback": "The algorithm EnhancedDynamicSelfAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.09.", "error": "", "parent_id": "c23734b2-4df6-473b-aada-1279d513d851", "metadata": {"aucs": [0.16556447204288338, 0.1404644711895615, 0.18758961016702913, 0.0673277986981422, 0.11467584721982171, 0.061742181976204846, 0.12102538424443887, 0.2071526382530191, 0.12296237677321298, 0.023747992490550263, 0.01719988294920405, 0.013691889049452732, 0.018507596185512787, 0.02465981615422419, 0.01676760120205456, 0.022684062783242864, 0.007561244487009344, 0.007506160770948789, 0.11501268709515566, 0.04225567711468414, 0.04163463323804262, 0.07849732999923087, 0.06933635823867168, 0.10765711456569549, 0.08682000483892915, 0.06949823230747065, 0.07155415232802353, 0.03403026172364643, 0.03958768661716272, 0.06081722817757129, 0.07400247700363016, 0.09037362170194463, 0.04926031669619968, 0.11037310082524332, 0.06103416782557636, 0.07161361925701781, 0.8793892089176665, 0.6521473225713288, 0.08428810666148945, 0.054446667576168006, 0.06521231784609294, 0.0643048291261139, 0.051093560232113644, 0.06884121892396855, 0.06982474311805287, 0.13820624329131137, 0.05260905565246721, 0.04642570426508685, 0.05096642506430504, 0.050785861243296315, 0.036281510177210485, 0.0939661399345959, 0.060682389813802584, 0.04749049346830925, 0.18661945812373204, 0.06055023058980291, 0.09702652197534412, 0.1394447364519008, 0.23520991438172456, 0.10330253160196645, 0.13362570914920469, 0.14297385899502701, 0.1557908777415523, 0.07724822882917526, 0.05315524294242513, 0.0735209222347778, 0.004186573979370056, 0.008708770343416883, 0.05032967153809009, 0.0037099224750387627, 0.05238840326349836, 0.03402996415522086, 0.0723781320814767, 0.057280099106820526, 0.028260612182735345, 0.04366260200398542, 0.03709826121354931, 0.055331634443425926, 0.06470018213426576, 0.04069629620255055, 0.053094028607843735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016115860177895458, 9.999999999998899e-05, 0.008873748962561878, 0.02960633720505179, 0.04465317540476332, 0.05588049585343269, 0.05957650586378627, 0.03033033719334688, 0.023467060970009168, 0.020405976421351446, 0.06471410345225725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002167007352300021, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040816453325004165, 0.028694596667037664, 9.999999999998899e-05, 0.02851417156579683, 0.03349098692457386, 0.04259682350894323, 0.004942857034256676, 0.009124526004510303, 0.009934562481015874, 0.1672288146694766, 0.15444103000493814, 0.22569701087501637, 0.1295329676289373, 0.12080178046229917, 0.14681516759633828, 0.14169496086982925, 0.18676095814567362, 0.18489873475825613, 0.025293016048649197, 0.04610502828882823, 0.010814077223409546, 0.05480782650235083, 0.0737642631869414, 0.08466872037329054, 0.034729809586163674, 0.04653605211145462, 0.04228048132682183, 0.1257599970733292, 0.1360264631096717, 0.11204725986523922, 0.1306388650425928, 0.10974068042111507, 0.17286429857044983, 0.12105525612680357, 0.10002503658760975, 0.1698419964854787, 0.16084081649884197, 0.14900772932202422, 0.19357604819600238, 0.18080109185806092, 0.16670055769868064, 0.16917185398464496, 0.13124465319141376, 0.12599047299937483, 0.10999444269770065, 0.10139044609673897, 0.11524772347521961, 0.10418089400876962, 0.12628328510608566, 0.1293499737819116, 0.09622134214954936, 0.09043004368934382, 0.1278478212578148, 0.08791126250934633, 0.19617091763685934, 0.1744187398185455, 0.20458251910974423, 0.171439804414657, 0.15402867982944446, 0.15427147840945776, 0.18579756971777095, 0.14229309725805617, 0.17955833256207276, 0.1371185483562236, 0.14651726170068213, 0.14413663949108724, 0.13192009431173723, 0.1467590746026921, 0.14853163029456895, 0.15524354625984493, 0.14670442048717336, 0.13385516771640416, 0.14697931237468798, 0.13429804134816914, 0.1597156658113501, 0.2124903475878095, 0.227329207178381, 0.12318522509112406, 0.10627963243384364, 0.10797553575638053, 0.10992211481662484, 0.0964720921757597, 0.08068244041452655, 0.09022656352994252, 0.10622211220489752, 0.12644015058139246, 0.0865854620065547, 0.10817860917445121, 0.12443989488571316, 0.14646769494257372, 0.15185002879958798, 0.15645098563291526, 0.18687144580145443, 0.15318072209877087, 0.16578469084586145, 0.15491603163217238, 0.15580977046838784, 0.2022115580877939, 0.17095490743584163, 0.07512685274775266, 0.046721452703544886, 0.050399505407104694, 0.08886104163838515, 0.08022339745363116, 0.06694763479426524, 0.061896296368054715, 0.05124593385088427, 0.0627539756762695]}, "mutation_prompt": null}
{"id": "bb2b66e7-7f50-4917-be3f-9ac33b46ba94", "solution": "import numpy as np\n\nclass DynamicSelfAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n        self.scale_factors = np.random.uniform(0.1, 0.9, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.scale_factors[i, 0] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.scale_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.scale_factors[i] += np.array([0.1, 0.1]) if np.all(self.scale_factors[i] < 0.9) else np.array([-0.1, -0.1])\n                    self.scale_factors[i] = np.clip(self.scale_factors[i], 0.1, 0.9)  # Dynamic self-adaptation\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DynamicSelfAdaptiveDE", "description": "Improving convergence speed by incorporating a dynamic self-adaptive mechanism for mutation and crossover with individual adjustments based on performance, while enhancing exploration-exploitation balance.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c23734b2-4df6-473b-aada-1279d513d851", "metadata": {"aucs": [0.8631565634845934, 0.8659734253183706, 0.8468523995153997, 0.8432184979352222, 0.8594433332322031, 0.8463820034687066, 0.8428470523327336, 0.880121786881531, 0.8379252648320191, 0.734582491008825, 0.8019321086575636, 0.7210974925913591, 0.7465829647189185, 0.7643982480875839, 0.7251223748136288, 0.7392616424118772, 0.790512442493894, 0.723335323299178, 0.6207146756659171, 0.49024547867849744, 0.4884738492898266, 0.17608796786048808, 0.17534262480482066, 0.17485799992900175, 0.5246332186297797, 0.5148966865008306, 0.5439013070313898, 0.1671127162078383, 0.593145635184321, 0.1499573074921704, 0.49321253104741414, 0.5775779486395299, 0.3828546180169584, 0.1615814918360926, 0.37457785153730694, 0.144507968461832, 0.9515319168731693, 0.9680563914542932, 0.97094339990637, 0.9645889728986913, 0.9672936863437808, 0.9692093194133277, 0.9521775914940744, 0.9825398051331461, 0.985138248628809, 0.5398075149089159, 0.5045301278164144, 0.43401242433089215, 0.526281428758483, 0.5831423866403678, 0.40605003933568584, 0.5621596502747872, 0.35494755506656495, 0.406784643193987, 0.49235450528831226, 0.212159903002074, 0.45356274061445057, 0.7234606893369522, 0.7100091006258946, 0.7275879696116865, 0.762877051095435, 0.6631136994748379, 0.5082282985261908, 0.17183235059545354, 0.30339395605277486, 0.11971063717498653, 0.21363248824438552, 0.21893025167004354, 0.17718683162516613, 0.2189832160544425, 0.23363510537150167, 0.2120075721309489, 0.24921496087658002, 0.19195363059632542, 0.22823090615472086, 0.1522466980963334, 0.2252564773804473, 0.15913391804783728, 0.24785345532542846, 0.2079746987971639, 0.18623382279204193, 0.05978968547756558, 0.02553192806271709, 0.046557677579795564, 0.02293221079768304, 0.114151404408387, 0.0060097769065927675, 0.07763098637096444, 0.07620499040252637, 0.009386438611344583, 0.11718622481421803, 0.11749345379640852, 0.10912141853363733, 0.14129527929391372, 0.055965616531713724, 0.09211315855894986, 0.11763113114322354, 0.17324831094761994, 0.21988929255135892, 0.10598446866019062, 0.08744154419027328, 0.03421650391897402, 0.09007536358708679, 0.11599398648467707, 0.023739125562945107, 0.09830967371223431, 0.1015695167477163, 0.0391263210041245, 0.17763742182631992, 0.21544414703246817, 0.17185232943113093, 0.22097866551990064, 0.2221137114879631, 0.2040491169865961, 0.14649824408683798, 0.16368730486588223, 0.1565733968094286, 0.5652135168888193, 0.587192419959913, 0.5569003940825346, 0.5577414728516061, 0.6175571935913035, 0.507588140563215, 0.574923296614578, 0.545641248754676, 0.5659172653199334, 0.08807106634454143, 0.0705030588805019, 0.11133555101016135, 0.09784135221776447, 0.09857988566659037, 0.0942163749934829, 0.10621027291281826, 0.11117795172778455, 0.08206358678705872, 0.1548492347989382, 0.2962300923773622, 0.17587003196188744, 0.14880051887133017, 0.13673992672298352, 0.1538993202042066, 0.16989585447786648, 0.13562403228512232, 0.15180386383033362, 0.3744974657068222, 0.3791819811692666, 0.30180811547887876, 0.30843863873707444, 0.4216016474674805, 0.26354809852572125, 0.4136659246337706, 0.3648767434451724, 0.3793324804394268, 0.2533071870683713, 0.24246829127431135, 0.21536687709946, 0.23043845340666858, 0.24380784593534688, 0.21486321065125535, 0.2774864040048086, 0.2962777098743402, 0.30096288822418304, 0.1770962385542595, 0.20391661865751887, 0.19033814219261214, 0.18036157948285858, 0.18602472115234137, 0.162494188016579, 0.19892233361051626, 0.18701247842182456, 0.18400423080031236, 0.21142844379806602, 0.46629909378338075, 0.4275767239950602, 0.1908939263277717, 0.2317843574935905, 0.3246266537288558, 0.187779476572006, 0.2410442032338348, 0.19300499948323047, 0.16535081579630917, 0.7614377323486103, 0.6414817857862449, 0.19163462672555964, 0.7736916782736389, 0.7691720050779313, 0.7728825103691435, 0.4594652709543927, 0.18608202446115552, 0.6935425109141529, 0.16681007386086255, 0.20506340638209453, 0.4425941749212431, 0.15181927204943346, 0.203752243877252, 0.15925069325823082, 0.6593698660004026, 0.2060889069362054, 0.1886082224143254, 0.18579573063169286, 0.1927210346509297, 0.18959534316988325, 0.1786847985194674, 0.1839257193103655, 0.1774703330574704, 0.17393685521990954, 0.18781143589354665, 0.08010493842010002, 0.07868283211741234, 0.06487394760292009, 0.06582068982886724, 0.08682740061520833, 0.06306110946376575, 0.06822817841617868, 0.07630021148232224, 0.06801815360660568]}, "mutation_prompt": null}
{"id": "dc4b7864-525a-4057-bfc4-45a8bf0d7b8d", "solution": "import numpy as np\n\nclass EnhancedDynamicSelfAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n        self.scale_factors = np.random.uniform(0.1, 0.9, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.scale_factors[i, 0] * (self.population[b] - self.population[c])\n                # Opposition-based mutation\n                opposite_mutant = 2*np.mean(self.population, axis=0) - mutant\n                trial = np.clip(opposite_mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.scale_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.scale_factors[i] += np.array([0.1, 0.1]) if np.all(self.scale_factors[i] < 0.9) else np.array([-0.1, -0.1])\n                    self.scale_factors[i] = np.clip(self.scale_factors[i], 0.1, 0.9)  # Dynamic self-adaptation\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "EnhancedDynamicSelfAdaptiveDE", "description": "Enhancing exploration by introducing a novel opposition-based mutation strategy to diversify the search space and accelerate convergence.", "configspace": "", "generation": 97, "fitness": 0.2900922915659799, "feedback": "The algorithm EnhancedDynamicSelfAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "c23734b2-4df6-473b-aada-1279d513d851", "metadata": {"aucs": [0.8726969945056401, 0.8597781082347999, 0.8403966327874177, 0.8528145129766211, 0.8612299484339827, 0.8460258737176904, 0.8523326399754632, 0.875470634961446, 0.8413087942166807, 0.7293299970499862, 0.7636665827000361, 0.6871931822964501, 0.7456797650199383, 0.7309294150899115, 0.6517508739298736, 0.7348715580258711, 0.7763164568474006, 0.6949828684953674, 0.1307232635382659, 0.1243225535973137, 0.12873423173438991, 0.1305788869123926, 0.10867829478170443, 0.13655908197530897, 0.14057690398097455, 0.14104456506149887, 0.12411633195780725, 0.12965902314378308, 0.10915641754447847, 0.1401963612491891, 0.12981131852586603, 0.11093257884013341, 0.12136713231087559, 0.1100460934060935, 0.13121015226527455, 0.1183076413218267, 0.9533793021435512, 0.9491489253869563, 0.9543628367501216, 0.9750311034815307, 0.9373104941128092, 0.9516938754172282, 0.9520549583319776, 0.9065962051920169, 0.9438976842373571, 0.5356048113471847, 0.44057257489517443, 0.4084023345996186, 0.4483562885153899, 0.5110426175292799, 0.4405480658407195, 0.4470922251102627, 0.4416252496188706, 0.27382821748808983, 0.5925138473415409, 0.6648005333138721, 0.4540794415028928, 0.4004395516000352, 0.7556469454148578, 0.410090700417308, 0.641916819245554, 0.6253370800004567, 0.36519688563177, 0.11564441356444954, 0.15686964649040924, 0.17153547439669004, 0.1427787575925189, 0.20965635042857889, 0.13760329415229278, 0.19851960002373747, 0.18177624658465852, 0.17605783087221627, 0.23681690410060152, 0.07550095017344371, 0.14842567043685362, 0.1101344803894635, 0.24208692704754875, 0.17104081775391045, 0.2295247015415126, 0.1563365486158247, 0.14489009941738662, 0.050458420743063614, 0.05124130851997799, 0.04528551507773937, 0.04900486164270024, 0.06236053337498293, 0.006601319065185796, 0.004895187504158294, 0.010796996193657149, 0.023053566079679122, 0.09815816093514418, 0.15191534626312664, 0.12614942590998945, 0.14746619806343986, 0.11967619803915752, 0.13347883488197188, 0.16231126624306946, 0.1999568434800536, 0.14022273141345798, 0.0035301156077941487, 0.05185185941163073, 9.999999999998899e-05, 0.04887593638958021, 0.06646732078714834, 0.034041872328790856, 0.04037461721747915, 0.02360145774255451, 0.004830477424833446, 0.14247962688400018, 0.16674743835580752, 0.11439230547888146, 0.18361545582394023, 0.19797851065623095, 0.18849601163844698, 0.1485334109001969, 0.1644728671793717, 0.11614213931975137, 0.601132111727761, 0.6144493822268593, 0.5070919360824625, 0.570029683417562, 0.5836138938697035, 0.5328508583290443, 0.5219291009188924, 0.5656077188700963, 0.531712634290388, 0.08028653834398902, 0.10363813439112635, 0.08430364160919579, 0.0847935977479336, 0.08282266538272343, 0.09209378588072481, 0.10859972974717236, 0.10089486489200172, 0.09139101797151217, 0.12132441971538721, 0.14874258839634036, 0.14082159630543778, 0.12471661685253999, 0.12056298767651275, 0.1294312484632274, 0.12944382752583083, 0.14018328708509364, 0.14412508589464945, 0.30916443699568186, 0.35316664032237777, 0.2798154267720392, 0.32731593214714405, 0.3324335366236433, 0.2842471538737612, 0.4379077264465434, 0.37224199309630757, 0.3456121220467677, 0.1939713960935715, 0.2553905485807729, 0.18561658326995845, 0.20614472301877818, 0.21302894881483803, 0.23644486529175823, 0.2553753406578343, 0.20274988674470917, 0.15719549465106553, 0.19367834709491427, 0.17888220326885151, 0.1664723936202005, 0.19516966056726093, 0.1901362479999511, 0.1767250598714205, 0.21989857919902456, 0.18722055428982487, 0.17551687127300697, 0.17839700927921698, 0.18785389791704277, 0.19832702375154265, 0.18350413796768772, 0.20294746183917622, 0.20959003100550466, 0.2086031274271105, 0.18739433878904266, 0.1943012124046415, 0.16577543946614537, 0.6292830204415382, 0.16881939108470012, 0.8276446468428166, 0.17448047997799965, 0.1611061719836644, 0.21072079707015068, 0.142310005317413, 0.1496820379137649, 0.3220008231701079, 0.6438743130500527, 0.15091049872918416, 0.21368144248504717, 0.17257206675525116, 0.15926643548677477, 0.13867852959855842, 0.20655404048221726, 0.20631730641201196, 0.19295559753903824, 0.17048033599818468, 0.17709852037698615, 0.18828926837900573, 0.18805048349641174, 0.17285562936410492, 0.17157447633834122, 0.17162877038422142, 0.17521442577426682, 0.07478089198171034, 0.06299135069711936, 0.05899326235296942, 0.061720095323338886, 0.07686222113841268, 0.05981652867834086, 0.07568331664771699, 0.07896185326765104, 0.0711385415820277]}, "mutation_prompt": null}
{"id": "e5e07a6a-fb77-48cd-aae7-aadc3315bdfd", "solution": "import numpy as np\n\nclass DynamicSelfAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n        self.scale_factors = np.random.uniform(0.1, 0.9, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.scale_factors[i, 0] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.scale_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.scale_factors[i] += np.array([0.1, 0.1]) if np.all(self.scale_factors[i] < 0.9) else np.array([-0.1, -0.1])\n                    self.scale_factors[i] = np.clip(self.scale_factors[i], 0.1, 0.9)  # Dynamic self-adaptation\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DynamicSelfAdaptiveDE", "description": "Improving convergence speed by incorporating a dynamic self-adaptive mechanism for mutation and crossover with individual adjustments based on performance, while enhancing exploration-exploitation balance.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c23734b2-4df6-473b-aada-1279d513d851", "metadata": {"aucs": [0.8631565634845934, 0.8659734253183706, 0.8468523995153997, 0.8432184979352222, 0.8594433332322031, 0.8463820034687066, 0.8428470523327336, 0.880121786881531, 0.8379252648320191, 0.734582491008825, 0.8019321086575636, 0.7210974925913591, 0.7465829647189185, 0.7643982480875839, 0.7251223748136288, 0.7392616424118772, 0.790512442493894, 0.723335323299178, 0.6207146756659171, 0.49024547867849744, 0.4884738492898266, 0.17608796786048808, 0.17534262480482066, 0.17485799992900175, 0.5246332186297797, 0.5148966865008306, 0.5439013070313898, 0.1671127162078383, 0.593145635184321, 0.1499573074921704, 0.49321253104741414, 0.5775779486395299, 0.3828546180169584, 0.1615814918360926, 0.37457785153730694, 0.144507968461832, 0.9515319168731693, 0.9680563914542932, 0.97094339990637, 0.9645889728986913, 0.9672936863437808, 0.9692093194133277, 0.9521775914940744, 0.9825398051331461, 0.985138248628809, 0.5398075149089159, 0.5045301278164144, 0.43401242433089215, 0.526281428758483, 0.5831423866403678, 0.40605003933568584, 0.5621596502747872, 0.35494755506656495, 0.406784643193987, 0.49235450528831226, 0.212159903002074, 0.45356274061445057, 0.7234606893369522, 0.7100091006258946, 0.7275879696116865, 0.762877051095435, 0.6631136994748379, 0.5082282985261908, 0.17183235059545354, 0.30339395605277486, 0.11971063717498653, 0.21363248824438552, 0.21893025167004354, 0.17718683162516613, 0.2189832160544425, 0.23363510537150167, 0.2120075721309489, 0.24921496087658002, 0.19195363059632542, 0.22823090615472086, 0.1522466980963334, 0.2252564773804473, 0.15913391804783728, 0.24785345532542846, 0.2079746987971639, 0.18623382279204193, 0.05978968547756558, 0.02553192806271709, 0.046557677579795564, 0.02293221079768304, 0.114151404408387, 0.0060097769065927675, 0.07763098637096444, 0.07620499040252637, 0.009386438611344583, 0.11718622481421803, 0.11749345379640852, 0.10912141853363733, 0.14129527929391372, 0.055965616531713724, 0.09211315855894986, 0.11763113114322354, 0.17324831094761994, 0.21988929255135892, 0.10598446866019062, 0.08744154419027328, 0.03421650391897402, 0.09007536358708679, 0.11599398648467707, 0.023739125562945107, 0.09830967371223431, 0.1015695167477163, 0.0391263210041245, 0.17763742182631992, 0.21544414703246817, 0.17185232943113093, 0.22097866551990064, 0.2221137114879631, 0.2040491169865961, 0.14649824408683798, 0.16368730486588223, 0.1565733968094286, 0.5652135168888193, 0.587192419959913, 0.5569003940825346, 0.5577414728516061, 0.6175571935913035, 0.507588140563215, 0.574923296614578, 0.545641248754676, 0.5659172653199334, 0.08807106634454143, 0.0705030588805019, 0.11133555101016135, 0.09784135221776447, 0.09857988566659037, 0.0942163749934829, 0.10621027291281826, 0.11117795172778455, 0.08206358678705872, 0.1548492347989382, 0.2962300923773622, 0.17587003196188744, 0.14880051887133017, 0.13673992672298352, 0.1538993202042066, 0.16989585447786648, 0.13562403228512232, 0.15180386383033362, 0.3744974657068222, 0.3791819811692666, 0.30180811547887876, 0.30843863873707444, 0.4216016474674805, 0.26354809852572125, 0.4136659246337706, 0.3648767434451724, 0.3793324804394268, 0.2533071870683713, 0.24246829127431135, 0.21536687709946, 0.23043845340666858, 0.24380784593534688, 0.21486321065125535, 0.2774864040048086, 0.2962777098743402, 0.30096288822418304, 0.1770962385542595, 0.20391661865751887, 0.19033814219261214, 0.18036157948285858, 0.18602472115234137, 0.162494188016579, 0.19892233361051626, 0.18701247842182456, 0.18400423080031236, 0.21142844379806602, 0.46629909378338075, 0.4275767239950602, 0.1908939263277717, 0.2317843574935905, 0.3246266537288558, 0.187779476572006, 0.2410442032338348, 0.19300499948323047, 0.16535081579630917, 0.7614377323486103, 0.6414817857862449, 0.19163462672555964, 0.7736916782736389, 0.7691720050779313, 0.7728825103691435, 0.4594652709543927, 0.18608202446115552, 0.6935425109141529, 0.16681007386086255, 0.20506340638209453, 0.4425941749212431, 0.15181927204943346, 0.203752243877252, 0.15925069325823082, 0.6593698660004026, 0.2060889069362054, 0.1886082224143254, 0.18579573063169286, 0.1927210346509297, 0.18959534316988325, 0.1786847985194674, 0.1839257193103655, 0.1774703330574704, 0.17393685521990954, 0.18781143589354665, 0.08010493842010002, 0.07868283211741234, 0.06487394760292009, 0.06582068982886724, 0.08682740061520833, 0.06306110946376575, 0.06822817841617868, 0.07630021148232224, 0.06801815360660568]}, "mutation_prompt": null}
{"id": "e940d9da-8e72-4ed5-9925-a7311b6a0c9a", "solution": "import numpy as np\n\nclass DynamicSelfAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.adaptive_factors = np.random.uniform(0.0, 1.0, (self.population_size, 2))\n        self.scale_factors = np.random.uniform(0.1, 0.9, (self.population_size, 2))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant = self.population[a] + self.scale_factors[i, 0] * (self.population[b] - self.population[c])\n                trial = np.clip(mutant, -5.0, 5.0)\n\n                crossover_points = np.random.rand(self.dim) < self.scale_factors[i, 1]\n                trial = np.where(crossover_points, trial, self.population[i])\n\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n                    self.scale_factors[i] += np.array([0.1, 0.1]) if np.all(self.scale_factors[i] < 0.9) else np.array([-0.1, -0.1])\n                    self.scale_factors[i] = np.clip(self.scale_factors[i], 0.1, 0.9)  # Dynamic self-adaptation\n\n        final_fitness = [func(individual) for individual in self.population]\n        best_idx = np.argmin(final_fitness)\n        best_individual = self.population[best_idx]\n\n        return best_individual", "name": "DynamicSelfAdaptiveDE", "description": "Improving convergence speed by incorporating a dynamic self-adaptive mechanism for mutation and crossover with individual adjustments based on performance, while enhancing exploration-exploitation balance.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c23734b2-4df6-473b-aada-1279d513d851", "metadata": {"aucs": [0.8631565634845934, 0.8659734253183706, 0.8468523995153997, 0.8432184979352222, 0.8594433332322031, 0.8463820034687066, 0.8428470523327336, 0.880121786881531, 0.8379252648320191, 0.734582491008825, 0.8019321086575636, 0.7210974925913591, 0.7465829647189185, 0.7643982480875839, 0.7251223748136288, 0.7392616424118772, 0.790512442493894, 0.723335323299178, 0.6207146756659171, 0.49024547867849744, 0.4884738492898266, 0.17608796786048808, 0.17534262480482066, 0.17485799992900175, 0.5246332186297797, 0.5148966865008306, 0.5439013070313898, 0.1671127162078383, 0.593145635184321, 0.1499573074921704, 0.49321253104741414, 0.5775779486395299, 0.3828546180169584, 0.1615814918360926, 0.37457785153730694, 0.144507968461832, 0.9515319168731693, 0.9680563914542932, 0.97094339990637, 0.9645889728986913, 0.9672936863437808, 0.9692093194133277, 0.9521775914940744, 0.9825398051331461, 0.985138248628809, 0.5398075149089159, 0.5045301278164144, 0.43401242433089215, 0.526281428758483, 0.5831423866403678, 0.40605003933568584, 0.5621596502747872, 0.35494755506656495, 0.406784643193987, 0.49235450528831226, 0.212159903002074, 0.45356274061445057, 0.7234606893369522, 0.7100091006258946, 0.7275879696116865, 0.762877051095435, 0.6631136994748379, 0.5082282985261908, 0.17183235059545354, 0.30339395605277486, 0.11971063717498653, 0.21363248824438552, 0.21893025167004354, 0.17718683162516613, 0.2189832160544425, 0.23363510537150167, 0.2120075721309489, 0.24921496087658002, 0.19195363059632542, 0.22823090615472086, 0.1522466980963334, 0.2252564773804473, 0.15913391804783728, 0.24785345532542846, 0.2079746987971639, 0.18623382279204193, 0.05978968547756558, 0.02553192806271709, 0.046557677579795564, 0.02293221079768304, 0.114151404408387, 0.0060097769065927675, 0.07763098637096444, 0.07620499040252637, 0.009386438611344583, 0.11718622481421803, 0.11749345379640852, 0.10912141853363733, 0.14129527929391372, 0.055965616531713724, 0.09211315855894986, 0.11763113114322354, 0.17324831094761994, 0.21988929255135892, 0.10598446866019062, 0.08744154419027328, 0.03421650391897402, 0.09007536358708679, 0.11599398648467707, 0.023739125562945107, 0.09830967371223431, 0.1015695167477163, 0.0391263210041245, 0.17763742182631992, 0.21544414703246817, 0.17185232943113093, 0.22097866551990064, 0.2221137114879631, 0.2040491169865961, 0.14649824408683798, 0.16368730486588223, 0.1565733968094286, 0.5652135168888193, 0.587192419959913, 0.5569003940825346, 0.5577414728516061, 0.6175571935913035, 0.507588140563215, 0.574923296614578, 0.545641248754676, 0.5659172653199334, 0.08807106634454143, 0.0705030588805019, 0.11133555101016135, 0.09784135221776447, 0.09857988566659037, 0.0942163749934829, 0.10621027291281826, 0.11117795172778455, 0.08206358678705872, 0.1548492347989382, 0.2962300923773622, 0.17587003196188744, 0.14880051887133017, 0.13673992672298352, 0.1538993202042066, 0.16989585447786648, 0.13562403228512232, 0.15180386383033362, 0.3744974657068222, 0.3791819811692666, 0.30180811547887876, 0.30843863873707444, 0.4216016474674805, 0.26354809852572125, 0.4136659246337706, 0.3648767434451724, 0.3793324804394268, 0.2533071870683713, 0.24246829127431135, 0.21536687709946, 0.23043845340666858, 0.24380784593534688, 0.21486321065125535, 0.2774864040048086, 0.2962777098743402, 0.30096288822418304, 0.1770962385542595, 0.20391661865751887, 0.19033814219261214, 0.18036157948285858, 0.18602472115234137, 0.162494188016579, 0.19892233361051626, 0.18701247842182456, 0.18400423080031236, 0.21142844379806602, 0.46629909378338075, 0.4275767239950602, 0.1908939263277717, 0.2317843574935905, 0.3246266537288558, 0.187779476572006, 0.2410442032338348, 0.19300499948323047, 0.16535081579630917, 0.7614377323486103, 0.6414817857862449, 0.19163462672555964, 0.7736916782736389, 0.7691720050779313, 0.7728825103691435, 0.4594652709543927, 0.18608202446115552, 0.6935425109141529, 0.16681007386086255, 0.20506340638209453, 0.4425941749212431, 0.15181927204943346, 0.203752243877252, 0.15925069325823082, 0.6593698660004026, 0.2060889069362054, 0.1886082224143254, 0.18579573063169286, 0.1927210346509297, 0.18959534316988325, 0.1786847985194674, 0.1839257193103655, 0.1774703330574704, 0.17393685521990954, 0.18781143589354665, 0.08010493842010002, 0.07868283211741234, 0.06487394760292009, 0.06582068982886724, 0.08682740061520833, 0.06306110946376575, 0.06822817841617868, 0.07630021148232224, 0.06801815360660568]}, "mutation_prompt": null}
