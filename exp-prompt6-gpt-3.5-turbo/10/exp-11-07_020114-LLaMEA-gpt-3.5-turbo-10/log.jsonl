{"id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 0, "fitness": 0.17292677657514002, "feedback": "The algorithm HDPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": null, "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "2f5aeb39-57e0-4348-8861-5f4440c0ea7a", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "bd715d3b-c895-4aa5-9731-eeb0450f5cd1", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        r1_mat = np.random.rand(max_iter, n_particles, self.dim)\n        r2_mat = np.random.rand(max_iter, n_particles, self.dim)\n\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n\n        for _ in range(max_iter):\n            velocities = 0.5 * velocities + c1 * r1_mat[_] * (best_particles - particles) + c2 * r2_mat[_] * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            improved_mask = func(particles) < func(best_particles)\n            best_particles[improved_mask] = particles[improved_mask]\n            best_global = particles[np.argmin(func(particles))]\n\n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO variant with optimized loop structure and enhanced velocity update mechanism.", "configspace": "", "generation": 2, "fitness": 0.14240206139839356, "feedback": "The algorithm ImprovedHDPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.20883642860807994, 0.20956883232035128, 0.3135093197511155, 0.2640094506621452, 0.42786425873055245, 0.34363098158676686, 0.37057646656860355, 0.1807696227118668, 0.3479645790048026, 9.999999999998899e-05, 0.014942308054022746, 0.02338836289436408, 0.018912978018802318, 0.013236459047473503, 0.07428797255146236, 0.018255366106421755, 9.999999999998899e-05, 0.0014039204950518913, 0.022986607044013008, 0.05701207556191201, 0.0641371602804578, 0.05184230043884708, 0.05172151963784255, 0.05896794994601495, 0.033411076221186886, 0.05539940155375611, 0.05623868554776312, 0.04032860908321889, 0.05581572480532837, 0.04916321978572957, 0.06394138985770281, 0.04226179200771696, 0.05259401264886987, 0.056874572507049415, 0.03847662096730686, 0.06680592192658585, 0.9723384375680523, 0.9815078605586274, 0.9804446415612705, 0.9579575540384806, 0.9813855142284724, 0.9634829075812004, 0.9797673479450209, 0.9734280740837185, 0.988252853500766, 0.061888933187004835, 0.11106410420140023, 0.21670458031685935, 0.11906222505234365, 0.1607857991039684, 0.12784125542621372, 0.11325393847895593, 9.999999999998899e-05, 0.13692289023315096, 0.14703327260365873, 0.14642525820179786, 0.1416077518467722, 0.18385717013348835, 0.15096004898424986, 0.15959992841683268, 0.12485394613955814, 0.12767038986511436, 0.19832764632369604, 0.022104024771266495, 0.02181302289880971, 0.07928619021779926, 0.0831244837404469, 0.04566837315418126, 0.07953899624127059, 0.03194933991233517, 0.07496556816114519, 0.09925204421963751, 9.999999999998899e-05, 0.05030093244716061, 0.02130884792007004, 0.0647929020816026, 0.053984401366402146, 0.01122006832581024, 0.024963791772429467, 0.002793201856120864, 0.09208555432133747, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05526833593787783, 0.0407592874536129, 0.03758257251162189, 0.08805681719239566, 0.026330101004774953, 0.02456292672787208, 0.0535970414689666, 0.030539020897063174, 0.019275916654820868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009705607768071278, 9.999999999998899e-05, 0.012054122172572512, 9.999999999998899e-05, 9.999999999998899e-05, 0.024402214509415487, 0.0012828117063133915, 0.001521055426067286, 9.999999999998899e-05, 9.999999999998899e-05, 0.013453475187232833, 0.003220391412764534, 0.0628391209578757, 0.062069059466360654, 0.047698855312663935, 0.24002846730717198, 0.1507639818787364, 0.2501063901605568, 0.26921266401994304, 0.24602335124500618, 0.20548971891709122, 0.23232740496122462, 0.27266383734678157, 0.2504736837023078, 0.050114888187880235, 0.0562050110464305, 0.06753064192635883, 0.049741709449447113, 0.06471060945964946, 0.0635462560214437, 0.05254286492645954, 0.055250074331727794, 0.050896390647488854, 0.1287905214108952, 0.13784725723047564, 0.14671008296217825, 0.11441397732554559, 0.1600919118999311, 0.1362818228299857, 0.1495368058173897, 0.16566567420506362, 0.11976838373376153, 0.2222380673087705, 0.2193617078573361, 0.17715753624680108, 0.14282134672300673, 0.17699465812590298, 0.2202818275380578, 0.21975703463713858, 0.1797647313989078, 0.1474509223696543, 0.16643844726855928, 0.1652137199427096, 0.12364379846101203, 0.14301507478579367, 0.12526216098802068, 0.12400927600273604, 0.11158484941309088, 0.10670143118295161, 0.12907663812571424, 0.17997090223984702, 0.16053330346335826, 0.14739869778464765, 0.1448723335774259, 0.15275761112066955, 0.15918057934658336, 0.1563265937586089, 0.16631477730600241, 0.14486567357907443, 0.16644376039001818, 0.14563727530253512, 0.16267243697849332, 0.1652521250328859, 0.1509086898917743, 0.16778867454271984, 0.15556964836567333, 0.15627344761165318, 0.15780245528435421, 0.16737265138242496, 0.12292621908968526, 0.1592969735859131, 0.20040162700214137, 0.15215460775449263, 0.15665260379359747, 0.16734550765911904, 0.13429442410960712, 0.16486736979038474, 0.1522620533050405, 0.18390611302637594, 0.18942221825053562, 0.10564293756278154, 0.08739063608757336, 0.18231620059304599, 0.1034925290285158, 0.13895793967701742, 0.10981836213848983, 0.17024282423390413, 0.17359358862244767, 0.16477937118285846, 0.16478651383928133, 0.18808421581365342, 0.18411911206342257, 0.16429700708055628, 0.18194626187559326, 0.1785775278184687, 0.06293732300260924, 0.045092584233473954, 0.051679270343850336, 0.04514839099360868, 0.03610477309219173, 0.05259527570561573, 0.04647249722623237, 0.061673786687280185, 0.0578216607990375]}, "mutation_prompt": null}
{"id": "02166389-0e8f-4c18-87a4-16e38a7aef83", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "4bd2939f-172e-4dbb-8ff3-b02ee7b52f78", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "77aa5f08-2f97-4028-b00e-b02583ae93ed", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "9580d5d6-9d0f-4909-a7d4-57089ac52419", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "45b399f5-bc7c-464c-aaec-b913b226c8d6", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "61b8113a-ac2e-4243-b018-466880a8507a", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "8ab954e6-55bc-4429-a00f-76c2aa12c19c", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "820f2256-7583-4bc0-abc5-ecdf3eae1ffe", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "60670477-58f5-4369-8ba5-5ff774245591", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "8c5e6551-b80b-4f84-8871-5e61d071414a", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "7d0a3c17-7bc2-4b5c-a655-eefcf8860cc2", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "8f48e1b0-50b7-4c30-b175-f96dedccc5ba", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "55bc473a-6d99-494b-941b-dc9d6ff6c413", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "9715026e-3c27-443d-9b8e-d8ade37eedc8", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "a67e3cc5-5cce-43d9-a22b-5f68a794e477", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "8a58270d-0687-4df2-beca-3d64c3360b36", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "ef47feb2-26b1-41cd-98d9-672ab57a3734", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "94bf70d3-e141-4d83-a7e2-4e51177baebe", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "2245d898-2033-41eb-9d86-dbc934a1f2cf", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "01bd680e-a753-403b-afcf-5b1ae9cc9cf4", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "7d3a6841-0589-4642-9beb-6f8017326649", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "b27c6abb-048d-4ecb-9981-5e70f5a6368b", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "088bfcb7-71db-4ba3-8024-e6fed97c3e1c", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "4fbe59bf-9020-400c-a77c-60eb5a41dfb3", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "6a05ab54-2a50-45c2-9f2c-15e42f5b456d", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "307e295d-4177-4011-afe6-9b7118de7084", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "633b1de4-8641-4d4e-ab45-78ad86340e54", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "fcdd1276-352d-4d72-b5e4-5bc0655e627b", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            rand_vals = np.random.rand(n_particles, 2, self.dim)\n            velocities = 0.5 * velocities + c1 * rand_vals[:, 0] * (best_particles - particles) + c2 * rand_vals[:, 1] * (best_global - particles)\n            particles += velocities\n            particles = np.clip(particles, -5.0, 5.0)\n            \n            better_particles = func(particles) < func(best_particles)\n            best_particles[better_particles] = particles[better_particles]\n            best_global = particles[func(particles) < func(best_global)]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by optimizing loop structure and simplifying calculations to enhance performance.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'<' not supported between instances of 'list' and 'float'\").", "error": "TypeError(\"'<' not supported between instances of 'list' and 'float'\")", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {}, "mutation_prompt": null}
{"id": "dc3d041d-ed2a-4561-93d8-7048494aaa0c", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "d4cb5b6f-2749-40f7-a228-7a575509bc90", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "7aeade97-053c-45e7-b234-2cd90b6e8d41", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "fc4dca20-e8ab-40e1-964a-7e1caca60b1f", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "2f8ff44a-9776-4a23-a5d3-5120136de02a", "solution": "import numpy as np\n\nclass HDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = particle + velocity\n            particle = np.clip(particle, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                if func(particles[i]) < func(best_particles[i]):\n                    best_particles[i] = particles[i]\n                    if func(particles[i]) < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "HDPSO", "description": "A novel metaheuristic algorithm called \"Hybrid Dynamic Particle Swarm Optimization (HDPSO)\" that combines the dynamic adjustment of inertia weight in Particle Swarm Optimization with a hybridization strategy to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.580391824219247, 0.40878245562643956, 0.36348576610092664, 0.1874526810316114, 0.17939129509025697, 0.18748796458197592, 0.37304689031742977, 0.3948156564579016, 0.32609874059948607, 0.10314378739175412, 0.04739288917931239, 0.05236976972857721, 0.09341182982594398, 0.06255298098794082, 0.04356388328946437, 0.11082398204727073, 0.10224282277002916, 0.07421813826864332, 0.06835825604688672, 0.06780409187508285, 0.06088351217118182, 0.06794867516707914, 0.0605691602823325, 0.06216705152249802, 0.07475261624964025, 0.0682083491584774, 0.07597019376241987, 0.050145717831246994, 0.06887421231371538, 0.059534453259465936, 0.06043682206255274, 0.049464009896457384, 0.07050832951219377, 0.057034980251001066, 0.059046352125331936, 0.0830636861632007, 0.9818687644525668, 0.9749708705526645, 0.9858145384151134, 0.9829522422690625, 0.9788494754800506, 0.9759163378893205, 0.986780986383148, 0.985331511397902, 0.9818277369148698, 0.07896177287570771, 0.13171694054124128, 0.15956815446938366, 0.1465281221836151, 0.13336516451989733, 0.12285594999239569, 0.1181145110386258, 0.08386453900298729, 0.08344371679195861, 0.19383024686532224, 0.20721481801177344, 0.19632191188347503, 0.20303195347915082, 0.1726769022425817, 0.1553795672509164, 0.17736395099275937, 0.12337032503621481, 0.16901769929446542, 0.11051932456966573, 0.12295637566108875, 0.11259110160327379, 0.09482578755856974, 0.05518233821028462, 0.06347594672930101, 0.07757763874011248, 0.11413159805370998, 0.10154506711184041, 0.1422862022943847, 0.15131352877998727, 0.24073054734258925, 0.13435625186117672, 0.21520184903051354, 0.17303790487503357, 0.14412394907441262, 0.14028104085514237, 0.172314868512069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023155834257091445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04761945229870945, 0.029961799155182378, 0.0014577686139820578, 0.03283329278494618, 0.007983301327842529, 0.015416959799622654, 0.014322226278097538, 0.017763933405247956, 0.01980656531899072, 9.999999999998899e-05, 0.018259756883816203, 0.00323893515984619, 0.017008510085023243, 0.007387175673408408, 0.12488344230127912, 0.024126970548939974, 0.01470846931590819, 0.008174114465343107, 0.03730124232715426, 0.09158678212000926, 0.01987304533518819, 0.0050200672842778404, 0.03853310615981698, 0.02525398650043953, 0.03447527728025157, 0.06326397971480002, 0.05900364313674056, 0.3011672365690351, 0.2859706609425068, 0.38264150533700325, 0.3525074002512628, 0.20414140542670334, 0.30975717648184387, 0.3277617384553768, 0.3192538785418949, 0.2767171977620717, 0.07306780019133874, 0.06874503701618528, 0.06340797439607193, 0.06670544622044727, 0.07026296363339679, 0.07429469469972316, 0.06982123641045668, 0.07032919027980766, 0.07364079270799206, 0.16135338231391216, 0.13782740556369022, 0.14633919463243694, 0.15079540677916847, 0.1499413995040999, 0.12712969393957851, 0.2740493881226137, 0.1612082099744141, 0.14067358390941775, 0.18757884985854667, 0.18519888027712228, 0.254554189392992, 0.18854684161177226, 0.18806810494535797, 0.21885975755846399, 0.24552912076548306, 0.2127006080843704, 0.22003615736481075, 0.1374772478766958, 0.13552573280543223, 0.16789465023066164, 0.13115427788783507, 0.13575113571932196, 0.13555927160044334, 0.1882271045308309, 0.14471048334431302, 0.14419048238002286, 0.3395863640701633, 0.3125302847863348, 0.3388557406784013, 0.33564528758499923, 0.33355416307040164, 0.33141367898248364, 0.34846236445719114, 0.33639431173604883, 0.34746764213470815, 0.17313411957740976, 0.16031480985767066, 0.1589541712525956, 0.16665148560675735, 0.1619045647248396, 0.15692385121496988, 0.16303082921776235, 0.1553417850965152, 0.16313394132115322, 0.16595766575787818, 0.23075507620368652, 0.15134083437030355, 0.12143648150084774, 0.1536403161446167, 0.1186293613264161, 0.15897834209645223, 0.16648579700409538, 0.17311827104937327, 0.16329783117683905, 0.20163252404713572, 0.16567370932370395, 0.1808126126417533, 0.12087711186481176, 0.15678507337733083, 0.1964868434473297, 0.20621673729796952, 0.2815310594882092, 0.18321250197949823, 0.17765076786544431, 0.17195834389325193, 0.20369262345750572, 0.18671559225015721, 0.1738609829102128, 0.16738909394622736, 0.19852074916806528, 0.1791430771378829, 0.06138801272317218, 0.05811754992932383, 0.06499648226541066, 0.07029068427898799, 0.058182108479521544, 0.05433122954205194, 0.07465681963660664, 0.06263362313794918, 0.05210131288701103]}, "mutation_prompt": null}
{"id": "1df3afda-0e96-484f-a299-da51cc00e60a", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 36, "fitness": 0.17521518669578257, "feedback": "The algorithm ImprovedHDPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "e72a149b-8579-44ef-91d9-43d5c1cedb40", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "4df2e70a-49bd-4b36-83f4-9a6a98670285", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "29973a2c-e22f-47a8-a660-356f7c9319e9", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w = 0.9\n        w_decay = (0.9 - 0.4) / max_iter  # Linearly decreasing inertia weight\n        \n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n\n        for _ in range(max_iter):\n            for i in range(n_particles):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = w * velocities[i] + c1 * r1 * (best_particles[i] - particles[i]) + c2 * r2 * (best_global - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n\n            w -= w_decay  # Update inertia weight\n\n        return best_global", "name": "EnhancedHDPSO", "description": "An enhanced HDPSO algorithm that improves efficiency by optimizing velocity update calculations and reducing redundant operations further.", "configspace": "", "generation": 38, "fitness": 0.1242886459791696, "feedback": "The algorithm EnhancedHDPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.2046675941377819, 0.1715764588768065, 0.207846797567664, 0.2512937900008114, 0.20084562485374902, 0.20608600449337433, 0.20253241219262086, 0.24691033898242787, 0.18987879664345975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062072842596147204, 0.04966558814493549, 0.04841100613836502, 0.04003684743057234, 0.04067264555780803, 0.04628399351188239, 0.043988610520060645, 0.03853332319672431, 0.04507261700845777, 0.05067963010859733, 0.02634042504692191, 0.011940471154400223, 0.037786906945300514, 0.031026636253038142, 0.025952047472165174, 0.021059193842910662, 0.02808904945369628, 0.024983461784754746, 0.9859204333163459, 0.9882132055654672, 0.9890368093734365, 0.9829066655607948, 0.9782814761129154, 0.9749920518111144, 0.9833616023999229, 0.9882261098187487, 0.9867944265672881, 0.07418198870986648, 0.06360453317633652, 0.0494439734121741, 0.09498125289898585, 0.07147992250762869, 0.10918575536144615, 0.1129682842514983, 0.07940547070353932, 0.06939326143316371, 0.14797405619760562, 0.06283615341547377, 0.11102232819646052, 0.1436772959280299, 0.1264485903499435, 0.1217892241420282, 0.12523656347926992, 0.11716295569382962, 0.09801348297403534, 0.0021940878677163544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02231645953663408, 9.999999999998899e-05, 0.0011517856428850948, 0.0354749028861957, 9.999999999998899e-05, 0.009841759134312067, 0.012567448193278485, 0.03238453483106096, 0.06977620808496354, 9.999999999998899e-05, 0.0015513588220075203, 0.015871098969535313, 0.00271797043472366, 0.00403680561633879, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025854578767835146, 0.022307209677870143, 0.02756303595454268, 0.01834847374398907, 9.999999999998899e-05, 9.999999999998899e-05, 0.015322987804416321, 0.014872728316063344, 0.040252300255257056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001560103236942778, 9.999999999998899e-05, 9.999999999998899e-05, 0.00025230323565883506, 9.999999999998899e-05, 0.006421695332979316, 0.009248070177107048, 0.020672409093116406, 0.011101815013301874, 0.19387886376673547, 0.1913343206454141, 0.20173136731374175, 0.19261197977343392, 0.18923304219833348, 0.2013929777827499, 0.204095827823071, 0.15893294009080416, 0.18424713775530077, 0.050681582589535035, 0.04904560892916421, 0.0564723946193324, 0.055973548236243786, 0.04928287995487424, 0.05778434920562159, 0.04006398719337212, 0.03846146424746877, 0.040867541526682594, 0.1566478185049226, 0.12055290754621928, 0.13814692809922258, 0.1558941506665913, 0.15905845593646772, 0.14537357472230938, 0.15831866539315687, 0.15051861151655843, 0.16307850374344102, 0.15685683588785215, 0.15613857154639899, 0.15893868219546836, 0.1857053013204315, 0.1627597852325947, 0.16055177928325448, 0.1683227081266646, 0.1828974917048849, 0.1658481119403754, 0.10985703984194783, 0.10873496501596525, 0.10344633349201304, 0.11523865140996181, 0.11363304633134974, 0.10363343201192254, 0.13655099506973623, 0.12585009204405473, 0.10046992943394895, 0.15199968490277738, 0.12542887338630448, 0.1519214692762989, 0.15004348852995575, 0.13226428042955596, 0.14204397727140716, 0.1418583980905076, 0.16651872837686787, 0.14341947209771388, 0.1557353685347671, 0.10989647011098591, 0.1501166293163595, 0.15450219310822688, 0.10845953490838078, 0.14127266497805957, 0.1381252809874397, 0.08169600271737221, 0.07407769175264078, 0.14885066810317626, 0.11362228685113007, 0.11389005704023802, 0.17059061900639427, 0.17253113626705419, 0.12210145988745968, 0.11065511444785048, 0.14535607223942648, 0.16745516208644806, 0.1908790511104429, 0.12640743984758918, 0.1610557497495121, 0.19753721860124995, 0.1265267461008871, 0.1619160974838869, 0.18409757051391729, 0.18820279685251784, 0.19249194600889552, 0.18337101965925495, 0.18151156003895008, 0.18365557783273023, 0.18335987569714107, 0.18166918963668743, 0.17720857703503912, 0.1850061460493937, 0.16108796623671373, 0.1683347835114204, 0.03945125466511512, 0.047013177755178215, 0.04300905974453817, 0.041772889926110834, 0.048719686370910176, 0.051791959674180044, 0.04461656966929872, 0.039143850273475445, 0.03613278009293608]}, "mutation_prompt": null}
{"id": "858b5744-a771-49d5-a46e-319be8efe023", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            particles, velocities = zip(*[update_particle(p, v, bp, best_global) for p, v, bp in zip(particles, velocities, best_particles)])\n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            \n            update_indices = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_indices] = particles[update_indices]\n            best_global = particles[np.argmin(particle_fitness)]\n\n        return best_global", "name": "EnhancedHDPSO", "description": "Enhanced HDPSO algorithm by simplifying velocity update calculations and optimizing particle movement efficiency.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('only integer scalar arrays can be converted to a scalar index').", "error": "TypeError('only integer scalar arrays can be converted to a scalar index')", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {}, "mutation_prompt": null}
{"id": "45147ef5-bd64-487b-9adb-6a0f68e0c54f", "solution": "import numpy as np\n\nclass EfficientHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = np.copy(particles)\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            r1, r2 = np.random.rand(self.dim, 2, n_particles)\n            velocities = 0.5 * velocities + c1 * r1.T * (best_particles - particles) + c2 * r2.T * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = func(particles.T)\n            best_particle_fitness = func(best_particles.T)\n            update_indices = np.where(particle_fitness < best_particle_fitness)[0]\n            \n            best_particles[update_indices] = particles[update_indices]\n            better_global_idx = np.argmin(particle_fitness)\n            if particle_fitness[better_global_idx] < func(best_global):\n                best_global = particles[better_global_idx]\n        \n        return best_global", "name": "EfficientHDPSO", "description": "Improved HDPSO algorithm with reduced loop complexity and optimized calculations for better efficiency.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('too many values to unpack (expected 2)').", "error": "ValueError('too many values to unpack (expected 2)')", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {}, "mutation_prompt": null}
{"id": "7023f20c-4d64-49ee-b889-eb40146fa344", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "4f96a0ca-7e75-4c39-b8bb-bfc62a030dc5", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "c4af912d-e7aa-4d96-951b-168aec962b5d", "solution": "import numpy as np\n\nclass ImprovedHDPSOPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])\n        \n        for _ in range(max_iter):\n            random_values = np.random.rand(n_particles, 2, self.dim)\n            velocity_updates = 0.5 * velocities + c1 * random_values[:, 0] * (best_particles - particles) + c2 * random_values[:, 1] * (best_global - particles)\n            particles = np.clip(particles + velocity_updates, -5.0, 5.0)\n            \n            fitness_values = np.array([func(p) for p in particles])\n            best_indices = fitness_values < np.array([func(bp) for bp in best_particles])\n            \n            best_particles[best_indices] = particles[best_indices]\n            best_global = particles[np.argmin(fitness_values)]\n        \n        return best_global", "name": "ImprovedHDPSOPlus", "description": "ImprovedHDPSO+ algorithm enhances efficiency by optimizing loop structures and streamlining velocity updates while maintaining the core PSO logic.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 22, 9, '        for _ in range(max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 22, 9, '        for _ in range(max_iter):\\n'))", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {}, "mutation_prompt": null}
{"id": "f39a5b7f-bac5-46cf-9a79-2a505b22dd6d", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "02e2b498-8b91-4d29-901b-c64750bd0ad5", "solution": "import numpy as np\n\nclass VectorizedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = np.copy(particles)\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            \n            update_indices = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_indices] = particles[update_indices]\n            particle_update_indices = np.where(particle_fitness < func(best_global))[0]\n            best_global = particles[particle_update_indices]\n        \n        return best_global", "name": "VectorizedHDPSO", "description": "Replacing the nested loop with vectorized operations to improve efficiency by reducing iteration complexity and enhancing performance.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (5,5) (30,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (5,5) (30,5) ')", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {}, "mutation_prompt": null}
{"id": "e48908ad-50f1-417c-8df4-322692ff841a", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "e5bacc17-f757-4d86-8f6c-d0c72a60c48a", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "76f428b7-1a8d-42c4-a112-9642b8cb15be", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "9afc652e-246d-4cb9-83a5-9e62a91d9ebf", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "8d269f29-fc19-4164-a3c7-5f267e1eb122", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "2b94d98d-687c-49d3-ac5f-102af18d6016", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "1dbab072-3096-42dc-96b0-b95b5464010f", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "a84d0d4a-cc5a-475a-9446-3a71a4744f5c", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "99fbd425-cc12-4833-bd76-9b446a7b9fda", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "f1f4e8b2-54e8-4b92-8f5e-17b954e50e8e", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])\n        \n        for _ in range(max_iter):\n            r1, r2 = np.random.rand(n_particles, self.dim, 2)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles)[:, :, np.newaxis] + c2 * r2 * (best_global - particles)[:, :, np.newaxis]\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            fitness_values = np.array([func(p) for p in particles])\n            improved_particles_mask = fitness_values < np.array([func(bp) for bp in best_particles])\n            \n            best_particles[improved_particles_mask] = particles[improved_particles_mask]\n            best_global = particles[np.argmin(fitness_values)]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "Enhanced HDPSO algorithm by optimizing particle update calculations and improving convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 22, 9, '        for _ in range(max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 22, 9, '        for _ in range(max_iter):\\n'))", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {}, "mutation_prompt": null}
{"id": "9a4d76a0-4243-4226-8e98-2be899c8534d", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "280ca5a3-472e-4d8d-af5f-1a668e20552d", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "f358c7fe-d8fc-47b7-bed9-b2ce15c9e703", "solution": "import numpy as np\n\nclass ImprovedHDPSOImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position with optimized calculations\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            np.clip(particle := particle + velocity, -5.0, 5.0)  # Simultaneously update particle position and clip\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSOImproved", "description": "Improved HDPSO algorithm with optimized particle update calculations and reduced unnecessary operations for enhanced efficiency.", "configspace": "", "generation": 58, "fitness": 0.1510994814137849, "feedback": "The algorithm ImprovedHDPSOImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.20.", "error": "", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.2386050027902935, 0.3251971433481059, 0.26954221130038836, 0.2407934490986221, 0.26073436825052854, 0.3566134338828133, 0.3738121347947141, 0.39340400456380054, 0.27624629869308326, 0.037143485902907614, 0.07284444828610592, 0.15528389569172996, 0.015810009383263268, 0.05555766472656776, 0.0022544614727557644, 0.014086878245473056, 0.19324205939070027, 9.999999999998899e-05, 0.0444600350798211, 0.061689105603940364, 0.04853136634514654, 0.06352237999087684, 0.046273102433647906, 0.05385511535433618, 0.07101491236465718, 0.044982065112877945, 0.04780113114843121, 0.040957862694504965, 0.06138386483548475, 0.04323886514959341, 0.03871745172148966, 0.034116092586596314, 0.05160328737137476, 0.0594796305023787, 0.04099476056015661, 0.05942016033845199, 0.9871739542910766, 0.9914648130834155, 0.9907944695560176, 0.9909738363233658, 0.9905029474807622, 0.9854418865567387, 0.9891617001878427, 0.9936361716817734, 0.9881654944572628, 0.06480594992069144, 0.029078976043256266, 0.0845352508599575, 0.05742149524823492, 0.02930033406254151, 0.041184405557240455, 0.0064690270290115315, 0.011293333694524565, 0.07689847317879872, 0.153379348092767, 0.20550535446707974, 0.19269838071496492, 0.14389082559353628, 0.10863108292063939, 0.17320452091488747, 0.11294027101890403, 0.19345437024153234, 0.14464208524992517, 0.057472633730647815, 0.10642891886264882, 0.12591028780778246, 0.022127045445045734, 0.0669612905545044, 0.01786508779849938, 0.02676275560650787, 0.033498094125244626, 0.052993551316611986, 0.14789900575874204, 0.13132172357024696, 0.1379140545299109, 0.19207791772352956, 0.20283617898392226, 0.17442143897190276, 0.16497022672410444, 0.17369207397060726, 0.18068520093328733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02338892039646323, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02855151995433347, 0.0513383214908989, 0.05271405306853283, 0.017876651142389344, 0.010277933458387456, 0.05856501922861679, 0.024195459907723538, 0.046221992539171475, 0.15397788491558662, 0.27458409343798784, 0.265835075592749, 0.36449269264050377, 0.30073850601093277, 0.24182783787148088, 0.19932423344466166, 0.33327268910691477, 0.2880435216279419, 0.33920514800300394, 0.04014452691278059, 0.03181970400050471, 0.040456496800758246, 0.04776960118365681, 0.06502387279405741, 0.05218928863699168, 0.04743776095398211, 0.03175494186903327, 0.05626741693003101, 0.10836082754551768, 0.08830932384964074, 0.08145134756141847, 0.09855305120349966, 0.10852972522114013, 0.1007165891899009, 0.10022435025296494, 0.09205114564054839, 0.09457238373986343, 0.1484734337661281, 0.17705572685030324, 0.17113771389716115, 0.19836184131242907, 0.1916670306418713, 0.17004736583051872, 0.17028020240625097, 0.1890246968998356, 0.18940976832963474, 0.11755997388065731, 0.08287459601495828, 0.09033434596755774, 0.14664747441082526, 0.14165223901834356, 0.1230767780432851, 0.10749482961813772, 0.12260335487090979, 0.1342184554954805, 0.3370615798505975, 0.29397450352857346, 0.3171502450087019, 0.3313628305918964, 0.3298280508576701, 0.2991239572683192, 0.3490382534976322, 0.3430831161945884, 0.3463638630310555, 0.1543468630773026, 0.16919785403573884, 0.15382550785283688, 0.17442650014754602, 0.156843450996206, 0.1483691536537366, 0.1550678684968294, 0.15810795330911676, 0.16121405255832688, 0.13743906209914147, 0.13029292486671673, 0.11595310658723179, 0.1580982068177582, 0.1372148911405775, 0.13425491832654712, 0.13297334680172712, 0.13932281692902893, 0.23018279689870702, 0.20066456660505116, 0.12193808762057301, 0.12748443057147085, 0.11886772796957412, 0.13333521690520234, 0.08747139243054591, 0.09348071528008062, 0.10392403999133604, 0.12203739824311743, 0.1586446813347362, 0.15773625630056343, 0.16752155524332335, 0.14866927691156728, 0.1450970548158642, 0.17074284037562903, 0.15860288118191435, 0.14798734615866194, 0.1522264598439127, 0.06114781736673269, 0.05692860490980167, 0.04993192515887024, 0.044712459298918095, 0.05572404263478803, 0.04516682845558062, 0.04421970461368396, 0.04839055873378473, 0.04033432276316962]}, "mutation_prompt": null}
{"id": "a41d9834-6ed7-496e-9a7f-a6c34ae15890", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "5a7c2eb2-0a50-4d08-8233-9742799d6a97", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "6ba7443d-9064-45d5-bb71-9f4bcfcbf6f2", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "6e1ad4ff-c963-48ff-8f16-df5a35f70022", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "be798047-b4d3-4352-8663-9aa061edc9bd", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "4331d19f-5daf-488c-bf0e-280c3680c559", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "ec9ea901-9fd9-4f48-bd12-a62fd89df004", "solution": "import numpy as np\n\nclass ImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        def initialize_particles():\n            return np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim)), np.zeros((n_particles, self.dim)), np.zeros((n_particles, self.dim))\n        \n        # Update particle velocity and position\n        def update_particle(particle, velocity, best_particle, best_global):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = 0.5 * velocity + c1 * r1 * (best_particle - particle) + c2 * r2 * (best_global - particle)\n            particle = np.clip(particle + velocity, -5.0, 5.0)\n            return particle, velocity\n        \n        # Initialization\n        particles, velocities, best_particles = initialize_particles()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                particles[i], velocities[i] = update_particle(particles[i], velocities[i], best_particles[i], best_global)\n                particle_fitness = func(particles[i])\n                best_particle_fitness = func(best_particles[i])\n                if particle_fitness < best_particle_fitness:\n                    best_particles[i] = particles[i]\n                    if particle_fitness < func(best_global):\n                        best_global = particles[i]\n        \n        return best_global", "name": "ImprovedHDPSO", "description": "Improved HDPSO algorithm by streamlining velocity update calculations and reducing redundant operations.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.6025588337824357, 0.4224545419655604, 0.3774630763142983, 0.1881921157549401, 0.18017310156914368, 0.1881509378409919, 0.38520989815960016, 0.4058469930512193, 0.33637657990960146, 0.11451979081514452, 0.050203718027471256, 0.054732057796274436, 0.10654399312859109, 0.06684235080936618, 0.045346884915618335, 0.13035276218381442, 0.12105048818881992, 0.10031893131656666, 0.06913793276406432, 0.06873311428824691, 0.06199565467846546, 0.0689102807389047, 0.06108660195299487, 0.0639119022704846, 0.07619598297619068, 0.06954534582029104, 0.07756302885223798, 0.05031568554729815, 0.07007167088391941, 0.05989742301531553, 0.061138086053466933, 0.0504065641080218, 0.07236592891023319, 0.057960989768983895, 0.05994758397555322, 0.08395609575956076, 0.9855406170286207, 0.980283152202833, 0.9884963927852592, 0.9863552316163045, 0.9833767165550088, 0.9811157761700043, 0.9892296816077127, 0.9882405217122918, 0.9855969674629971, 0.08080447269542768, 0.13422427110592705, 0.16163993044036984, 0.15102336550401996, 0.13510434937679405, 0.12471751971384581, 0.12175563908332354, 0.08463430036985553, 0.08429303073451333, 0.19418331217547247, 0.20762297744211333, 0.1976671243163175, 0.2051418616434152, 0.17445313183422495, 0.15663657042309298, 0.18044812537760613, 0.12583826184345948, 0.17299697820511462, 0.11309658669355593, 0.1253642727415024, 0.1147547397690789, 0.09754042987863265, 0.05698402348016385, 0.06532882484391633, 0.08081153683090381, 0.11698222714643958, 0.10506219945982698, 0.1424087933453384, 0.15161355633437745, 0.241947587246515, 0.13458195006799722, 0.21629190354848626, 0.1739714288173866, 0.14474131282358826, 0.140565556993975, 0.17262854750463197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002976460310406437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848441027381556, 0.03103229676949848, 0.0014758209358202157, 0.033454256572144514, 0.008288952284169815, 0.015721370431364234, 0.01479807592745197, 0.018359675691338784, 0.02004043745032469, 9.999999999998899e-05, 0.019729777913206292, 0.00615023261776948, 0.02051385298494024, 0.011722711596114599, 0.14427301796224967, 0.028408019073012603, 0.019298608744528267, 0.00962389463059532, 0.03928775721312339, 0.09578332101556608, 0.021014553115526913, 0.00523329732169131, 0.04083272975543606, 0.02693660015211463, 0.03552444435628044, 0.06587686042076346, 0.06103909139593744, 0.3078761544906291, 0.28989596729662814, 0.38899440277061426, 0.35761486060938275, 0.20497316047986358, 0.31514196656655735, 0.33208763453397494, 0.3218746545081388, 0.2788748171129801, 0.07424997533046973, 0.06952303290641426, 0.06431315243996838, 0.0676140911684382, 0.07087536714161669, 0.07504881580135025, 0.07053409923135512, 0.07101004046514703, 0.0743960880604505, 0.16261047742819668, 0.13840664971969052, 0.14742729455890036, 0.15203679034138295, 0.15039945543724786, 0.12754276290410493, 0.2784416101178516, 0.16363124134856755, 0.14171926874125862, 0.1894265229838421, 0.18671504923245197, 0.2594924435128705, 0.18908581980839256, 0.18873071452353984, 0.2198980771411756, 0.2478864162048987, 0.2140912380970209, 0.22191059813284297, 0.1383251480183193, 0.13714759837500345, 0.1698358225599952, 0.13216989283171787, 0.13703117135154663, 0.13613996201427303, 0.19124617938271782, 0.14657091545407241, 0.14505104903256016, 0.3399914000614509, 0.3129399699272347, 0.3390831576663855, 0.3359701820257657, 0.3338384637800025, 0.3317262762546582, 0.34865272510615253, 0.336818688104074, 0.3477660403276456, 0.17379746800285867, 0.16080958300371062, 0.1596028262194974, 0.16706097667915676, 0.16247421708655163, 0.1573332097475244, 0.1636305250028277, 0.1558979204052392, 0.16371980459288482, 0.16604718240253513, 0.2394695883824165, 0.1517591512400821, 0.12159279231622766, 0.15458589403332934, 0.11871832908910074, 0.15995795668749346, 0.16738803347237208, 0.1741767570510927, 0.16392834356690877, 0.20318967817122635, 0.16639396609171364, 0.18255824962182354, 0.12130475369139371, 0.1576708740828935, 0.19777150590293013, 0.20720224398758902, 0.28654436312290976, 0.18336688311195037, 0.17787081718158093, 0.1720199458081011, 0.20407755218938217, 0.18723992486630925, 0.17444592974506634, 0.16765503372773605, 0.1993606308062199, 0.1795699309071206, 0.06160238683323238, 0.05830686879284208, 0.0651162639180326, 0.07044329634493274, 0.058473975313011906, 0.054792523981036734, 0.07529313270908589, 0.06286035370809329, 0.052390117508090084]}, "mutation_prompt": null}
{"id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 66, "fitness": 0.2483077385154962, "feedback": "The algorithm EnhancedHDPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "1df3afda-0e96-484f-a299-da51cc00e60a", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "1a6b2f60-3e02-47b3-a888-bb21699af8b4", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "33fc7b33-49c9-406f-a1fe-16b9089be4b4", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "279a88bc-74fc-422d-ba0f-6250085b42d5", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "64bbd186-918e-4fca-99d5-a78a878a9b41", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "a3f5fb0e-dbd1-4161-9627-7dbb532041e4", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "cecf1e63-05dd-4859-89b7-6185b8e5d0f3", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "683ccc51-3b02-4b11-b5dd-9700544bc99e", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "763f515c-e487-4dc8-8235-d6f76212238f", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "d29ac0a8-6df9-489b-8b1e-c3be7ccd4137", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "71ca36b9-32d0-435d-bd5e-0a0b0defbf36", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "8e5a7115-c568-4806-a9f5-3edaf71c3360", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "7a016c12-4581-418a-981a-02a5eea3cfd4", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "59eb90d6-f216-4d61-a4ad-8292df1502db", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "f168cb32-19dc-465a-aded-07e97d319fc5", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "fda81836-bd90-4971-9634-636da60c0be7", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "0392693e-92d0-47a1-b211-80f6fba61c3d", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "d0fb2161-7dc8-4e9d-b8f8-d916ee5c391b", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "f7b02cc1-3c19-46fa-af1a-98230bd72fd8", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "5702501f-d90b-48c9-a263-10a7e8a794fd", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "ed95587b-1374-4eb9-9eba-2f405885dccc", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "cbb6f659-f122-4f31-b665-6b75e1c6e8c1", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "d400ee3b-75c0-4f0e-b4ba-855ab24fc520", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "1e0d468f-85f7-46b0-a07b-ee10917aaa78", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "b1c6b9fd-16eb-4920-965d-87da301e8f77", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "09b59629-62cf-47ea-9054-140833e03f65", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "8ea9bf8c-9cca-4e89-a03f-f9083ec84133", "solution": "import numpy as np\n\nclass StreamlinedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Simplified velocity update\n            r1, r2 = np.random.rand(), np.random.rand()\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.apply_along_axis(func, 1, particles)  # Optimized particle fitness evaluation\n            best_particle_fitness = np.apply_along_axis(func, 1, best_particles)\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "StreamlinedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by simplifying velocity updates and optimizing particle fitness evaluation.", "configspace": "", "generation": 92, "fitness": 0.1655361372434244, "feedback": "The algorithm StreamlinedHDPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.5112539013333125, 0.30716497286625555, 0.6362741614496779, 0.18310819563504777, 0.14119346347447115, 0.1871542499397687, 0.18305740188129171, 0.5375157802687602, 0.6798443382206323, 9.999999999998899e-05, 0.02719987602101248, 9.999999999998899e-05, 9.999999999998899e-05, 0.032240529303587784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06514814424713478, 0.06784183768748464, 0.06821141864993863, 0.10554954611557765, 0.10046970303747826, 0.058173962464318496, 0.07443376166836713, 0.06703542883211433, 0.05542054390880058, 0.10381185632486012, 0.08126956859013312, 0.03418982208819221, 0.09893466342389057, 0.03512841954589907, 0.014923146113824948, 0.003194636739848433, 0.10067402419102056, 0.03488416644349723, 0.9904769003886654, 0.997008864266237, 0.9705996415166267, 0.0996903493527258, 0.9863440370971018, 0.9375096594090366, 0.9865836100719165, 0.9865115099593751, 0.968702134404588, 0.031365318099562556, 0.03161585330731942, 0.05455252820894729, 0.1372929151799328, 0.25427990814674417, 0.14523979212209537, 0.08299099903922347, 0.08795258455692079, 9.999999999998899e-05, 0.16247375472500103, 0.30575722385719495, 0.08372799618154203, 0.19222980979198367, 0.11674467985103965, 0.20244074887219243, 0.06820933105339122, 0.12584025917111508, 0.10511496524706943, 0.1244436251091624, 0.1051149238218011, 9.999999999998899e-05, 9.999999999998899e-05, 0.12267962924757281, 9.999999999998899e-05, 0.05557889699543517, 0.13927930754711293, 0.15249239473900122, 0.12463984629149305, 0.009916234949901681, 9.999999999998899e-05, 0.1250587026004687, 0.2263383656550737, 0.1484146648797654, 0.153883460540701, 9.999999999998899e-05, 0.10540148067917976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021519172007751664, 9.999999999998899e-05, 9.999999999998899e-05, 0.039938964414610534, 0.03891144744549313, 0.05557660029664491, 0.07123317635270454, 9.999999999998899e-05, 0.04386067272761718, 0.0916603053757632, 0.002132199275166169, 0.03101182216871934, 9.999999999998899e-05, 0.04072203241120986, 0.12498222303950934, 9.999999999998899e-05, 0.08006766528220977, 0.06411974769626672, 9.999999999998899e-05, 0.09581443080095109, 0.050530333631255586, 0.12083900892315491, 9.999999999998899e-05, 0.10459440707794343, 9.999999999998899e-05, 0.02122417028466428, 0.02706004761655645, 9.999999999998899e-05, 9.999999999998899e-05, 0.07953705191205263, 0.1521293014495686, 0.45531316820131074, 0.42014955649109675, 0.137365302999501, 0.3781953974386545, 0.3809598546155024, 0.43848515520152265, 0.13515828821429643, 0.4260541470246808, 0.05290710350067207, 0.07887633017397033, 0.06179371283125823, 0.08631946346387909, 0.12255570979874941, 0.07901928908819733, 0.060971039322444964, 0.0597960786838988, 0.06897828738884837, 0.2606436536339095, 0.1918790812951996, 0.1825949272042663, 0.16973831348059298, 0.19133622516326398, 0.2716201511289139, 0.180948693819575, 0.1498602743570041, 0.2252975323066324, 0.15558761890876072, 0.34219756349680563, 0.3378145116711143, 0.19157629123789743, 0.18252143419706224, 0.2039916079624683, 0.17490135522985095, 0.24110598838802855, 0.18844747856087662, 0.07624020109169849, 0.05750773055213698, 0.18314337127585467, 0.17859514488312433, 0.17019213901817853, 0.16735862421603798, 0.2773350336871595, 0.15825072720167443, 0.16854059955387912, 0.21348803073575995, 0.1408900322039741, 0.19705640125363277, 0.19666831099160076, 0.15657230967044922, 0.20620803961709366, 0.20441445903278965, 0.19817280497708212, 0.19757293850648938, 0.17534492529620638, 0.1605795117396459, 0.17833024854234614, 0.195228915406371, 0.16732812796098295, 0.1829471688890898, 0.17734781529366805, 0.17618800570639215, 0.18210941272539727, 0.10300909115658219, 0.16799910851899225, 0.14789301333550742, 0.1722698713363685, 0.1999930714783924, 0.6401804541730527, 0.09143364851909885, 0.1690972946981596, 0.18780394595308025, 0.48558057273623, 0.15667103748696265, 0.11012274127448307, 0.10126004595820792, 0.32584862141190263, 0.20461349950993457, 0.18496102635023393, 0.18523102913443812, 0.12741785356733104, 0.18017077660524317, 0.17805767329521205, 0.2193216578660887, 0.1820498852783553, 0.16950179325192072, 0.18538814416757243, 0.1863125920669042, 0.17581604141841523, 0.18274484280587244, 0.11269203039818909, 0.06437582016342058, 0.09500296069970104, 0.06593741763424277, 0.07598062246448112, 0.052172157983541356, 0.06366194474837883, 0.056241961934094475, 0.06025657109942717]}, "mutation_prompt": null}
{"id": "df1fd978-29f2-442e-9e2f-b9a08f8f2784", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "5a62c8d7-75eb-471d-9417-2b9c72507562", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "33f4db95-041b-429f-b693-c92fc0ef4a00", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "f87612a1-164f-4b8a-a725-537f1a454ff0", "solution": "import numpy as np\n\nclass PerformanceImprovedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            np.clip(particles + velocities, -5.0, 5.0, out=particles)  # Optimizing particle position update\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            update_particles = np.where(particle_fitness < np.array([func(bp) for bp in best_particles]))[0]\n            best_particles[update_particles] = particles[update_particles]\n            \n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "PerformanceImprovedHDPSO", "description": "ImprovedHDPSO algorithm with further enhanced efficiency by optimizing calculation updates and reducing redundant operations.", "configspace": "", "generation": 96, "fitness": 0.2071726071502083, "feedback": "The algorithm PerformanceImprovedHDPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.22.", "error": "", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.6901288863534332, 0.5781740610590769, 0.5530012154718008, 0.7316496870996612, 0.6247012015050923, 0.5239461855547973, 0.5473038626577739, 0.5570900110220817, 0.5754873782910193, 0.34611518347222914, 0.11432283347604555, 0.03393881682003652, 0.40024115836626184, 0.21379301271525497, 0.2843267496936862, 0.3623427220616937, 0.3056273323530718, 0.3414961498593433, 0.08092280047962574, 0.08577218345847815, 0.07177083253017535, 0.07968467518723976, 0.09401338730799014, 0.07946383088043929, 0.06558287764933723, 0.07498144861963352, 0.06803811170445273, 0.08025831481621226, 0.05705465908388363, 0.05411915057409644, 0.0781029832110628, 0.07127206967819255, 0.0826010134560542, 0.06816140556590855, 0.07012094390239632, 0.06470883748207834, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.24776848778859506, 0.05858197991251601, 0.1452375662546187, 0.14420645805636578, 0.1871086545107984, 0.16080969528332756, 0.18778542199167303, 0.19848485710337016, 0.08706051116963553, 0.2247478122382961, 0.18658774101543418, 0.17346353384813773, 0.1947504906390941, 0.1916893704717455, 0.18983085408659395, 0.12280104148356152, 0.2068826156206084, 0.16507640074161267, 0.08568330275200442, 0.12813443467158736, 0.17129010789885069, 0.13708932431279663, 0.15623207153704932, 9.999999999998899e-05, 0.1407466989293985, 0.11803685213979642, 0.15826165997428665, 0.23405233921322488, 0.10491856650465636, 0.1556885182384714, 0.14211062100625727, 0.082273976435433, 0.1304514073110229, 0.19100212101014225, 0.03359912226673423, 0.15125164949369574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0483321682220651, 0.01309601789823156, 0.049035740387279314, 0.05631821835643025, 0.001154143679884534, 0.004580747820392528, 0.04205007365413749, 0.01342197945614243, 0.012585539117712874, 0.04117981888902089, 0.026847019635720115, 0.03242464169973447, 0.057048807051636174, 0.09012520271794455, 0.053352577530876966, 0.08235415896211529, 0.06481762786973744, 0.05769989914062712, 0.09549927642018996, 0.036928626660994945, 0.13622594542354494, 0.03496548612190309, 0.005851597255449259, 0.046799170746242846, 0.07717569275625102, 0.07402461994162646, 0.07691554019283309, 0.4297273204993206, 0.3716056031671554, 0.40162270584022886, 0.2078867582835583, 0.3911954295763531, 0.3758361635788382, 0.4268774038251738, 0.42214890137841754, 0.43131996800595784, 0.06312067215986994, 0.07800167839986771, 0.07441653151825633, 0.06684540652706639, 0.06441800943348519, 0.06975389794892639, 0.09192427295724415, 0.06711300688298893, 0.08070325730978145, 0.1873470053432199, 0.3244761785737911, 0.19091256604020823, 0.22165052316589717, 0.1496057249518129, 0.15419579458945099, 0.1778115533303679, 0.1220792922743138, 0.20813815887172726, 0.23515913991568516, 0.29665300631683145, 0.2576753996756257, 0.24794955436524257, 0.2490702469748659, 0.23375781681569885, 0.27879343935295176, 0.28160082092045435, 0.2589458916943751, 0.12241733264931176, 0.16213096400278404, 0.16547457223548334, 0.15969994632919193, 0.19095705402201968, 0.2092975763451621, 0.1970319905165463, 0.2117081220941971, 0.19681824979203733, 0.16445179108229946, 0.15435067294922633, 0.1836030405852871, 0.155194865251285, 0.16406806719822942, 0.15463909174308832, 0.18200323072447577, 0.16064403529295812, 0.1668451927432374, 0.16684782238498774, 0.1742388029486479, 0.1718202119661868, 0.1633833802675172, 0.17142824576240312, 0.16131598450198448, 0.18342144249091796, 0.16916548276175858, 0.17826619478301742, 0.7325042725107744, 0.1614250826936524, 0.14971836487132217, 0.7192479316614302, 0.1993853490343589, 0.12954197340096962, 0.13605838620132493, 0.16910291313334824, 0.19279836788115767, 0.5432351195801377, 0.15023059555150098, 0.3033362138766461, 0.3749471714307365, 0.2746950502802561, 0.20794808470187642, 0.20361071465832825, 0.20806652438683082, 0.18772186278444158, 0.17631361372345478, 0.18549384303671546, 0.18317923469806208, 0.18519538523760148, 0.18908570788509038, 0.18297929864394635, 0.18538792143380411, 0.17631034962203285, 0.18437019270075983, 0.06814485128525027, 0.06202876302283744, 0.06877737351620217, 0.05709097794138651, 0.06299981896755402, 0.05483956250673072, 0.052834488581245065, 0.05926731583385936, 0.07875441193048804]}, "mutation_prompt": null}
{"id": "5b3b36f4-69d9-49ab-9a84-260c15fb8c44", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "d814679c-d9f1-4e27-a482-83510df02894", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
{"id": "98a632d9-d1db-49d4-b7d5-2d0e87f7419f", "solution": "import numpy as np\n\nclass EnhancedHDPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        n_particles = 30\n        max_iter = self.budget // n_particles\n        c1 = 2.05\n        c2 = 2.05\n        w_max = 0.9\n        w_min = 0.4\n        \n        # Initialization\n        particles = np.random.uniform(low=-5.0, high=5.0, size=(n_particles, self.dim))\n        velocities = np.zeros((n_particles, self.dim))\n        best_particles = particles.copy()\n        best_global = particles[np.argmin([func(p) for p in particles])]\n        \n        for _ in range(max_iter):\n            # Vectorized particle update\n            r1, r2 = np.random.rand(n_particles, self.dim), np.random.rand(n_particles, self.dim)\n            velocities = 0.5 * velocities + c1 * r1 * (best_particles - particles) + c2 * r2 * (best_global - particles)\n            particles = np.clip(particles + velocities, -5.0, 5.0)\n            \n            particle_fitness = np.array([func(p) for p in particles])\n            best_particle_fitness = np.array([func(bp) for bp in best_particles])\n            update_particles = np.where(particle_fitness < best_particle_fitness)[0]\n            best_particles[update_particles] = particles[update_particles]\n            update_global = np.argmin(particle_fitness)\n            if particle_fitness[update_global] < func(best_global):\n                best_global = particles[update_global]\n        \n        return best_global", "name": "EnhancedHDPSO", "description": "ImprovedHDPSO algorithm with enhanced efficiency by implementing vectorized operations and optimizing particle updates.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a46bd724-2060-46b9-be31-6e2855a4d3ec", "metadata": {"aucs": [0.7762322110455315, 0.7701634959482292, 0.8062904426570721, 0.8287448208898929, 0.7772256187419275, 0.7246093132155633, 0.7562633841878481, 0.717896879347178, 0.7225699539015877, 0.0376731458620756, 0.3162981644524383, 0.34351246589084317, 0.04048983384377791, 0.3722843148106757, 0.48116075189800145, 0.5280704512284127, 0.08945435676835312, 0.42298343243975445, 0.06837345280238494, 0.05379023272852068, 0.16153327104991344, 0.11208534531866154, 0.10983239892549268, 0.144857114502413, 0.15229877389523372, 0.3670596389209989, 0.11223271547446312, 0.12699090441026184, 0.14819414225733962, 0.1552685052118642, 0.1376084569767725, 0.1311275001651746, 0.11578593907287815, 0.12239272218565767, 0.11083957640411335, 0.14121574799841996, 0.9850767898162948, 0.9851931357605525, 0.9844840641549477, 0.975182581960305, 0.9737015232520401, 0.9812197083535183, 0.9808019292783758, 0.9850108950108378, 0.9746003868230242, 0.42820684072322546, 0.32161628430806044, 0.36148023083517655, 0.1540989709166095, 0.3700632829848922, 0.33566597293071265, 0.08361754510123409, 0.35765092120768394, 0.31197844453086876, 0.22348112560367495, 0.18168446009346118, 0.20804319615975508, 0.19511792579777187, 0.20324346770777268, 0.34819433929723353, 0.1223125090156052, 0.1609421497159652, 0.3262310394723562, 0.15040573365042476, 0.17338105021680383, 0.19558774120368927, 0.1539501894349674, 0.14122937298580107, 9.999999999998899e-05, 0.14299731134243843, 0.15762946843731696, 0.16391961929815646, 0.1700163788622029, 0.12335624449429361, 0.11845521666154724, 0.17061829301505127, 0.10276555181757407, 0.14719823273810018, 0.16027111642540093, 0.03344541716551952, 0.09596421537660194, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296302299017484, 0.03130230905366549, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028400166240660774, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894308332877739, 0.023086395206151633, 0.14187921896256717, 0.07897439458818245, 9.999999999998899e-05, 0.011965926250158243, 0.06399891098771426, 0.04791659626030598, 0.04866256224255883, 0.043214972250732675, 0.0308124593825716, 0.04467754369265564, 0.1543573201035786, 0.16183574058489303, 0.06884708899677028, 0.08140895701286177, 0.22168826922040885, 0.0639878252416265, 0.06852428225100593, 9.999999999998899e-05, 0.2442771884402335, 0.03672095264758224, 0.006049201771961998, 0.04992501075276634, 0.13701821674785986, 0.07701705379575174, 0.07963952005011121, 0.6018480352303219, 0.49107918036672704, 0.4679194647493248, 0.4924342762601249, 0.5173861802543374, 0.4927906068178183, 0.4722332034629638, 0.4607331599344553, 0.4657059297295927, 0.05932355657423627, 0.06755244387547632, 0.07236246958621873, 0.12929905687986665, 0.07468115119468488, 0.09489020855012908, 0.10259052434280314, 0.07152127219512916, 0.09744591447357942, 0.2527485647507801, 0.3547259496485078, 0.21257141801140444, 0.25055404888904864, 0.38655152383337865, 0.22297861748818948, 0.20484118200999535, 0.20506978482717664, 0.17893838660439254, 0.2971965763341866, 0.3270722760922081, 0.30600112808092017, 0.26439626375398706, 0.36202301717554575, 0.18411797308234967, 0.3737888662322957, 0.3015934641920759, 0.367686100994686, 0.14407821657657827, 0.16437081361583983, 0.22646668799580416, 0.2660512273872859, 0.26386705309887093, 0.20788609885999998, 0.29190157972553377, 0.21960571067831247, 0.20276650424262055, 0.17450640200391077, 0.14306692391010345, 0.19714942831685445, 0.20331057781143358, 0.2108610115104268, 0.1654506407437082, 0.19981572949894755, 0.21369451205299905, 0.22933458627715098, 0.22072073485596366, 0.20660279477046428, 0.24436362572886172, 0.21905921188914113, 0.1769177506883599, 0.18642403337761926, 0.21499085814290075, 0.5237937640936372, 0.21760259918725955, 0.8320280310423354, 0.1627640838547486, 0.1581802269661945, 0.769165731751148, 0.19903173510725736, 0.11620931613700669, 0.11458063801814733, 0.16918768742358192, 0.20145517976745442, 0.5260758877792038, 0.15228555187752102, 0.10975572409531631, 0.32746058744221995, 0.22672633177425272, 0.2106785035924993, 0.10436515121536172, 0.20823320682941726, 0.36033244443309087, 0.1912690239697964, 0.2150392845718192, 0.17970595698944614, 0.18904584183726292, 0.18167475081066464, 0.19534547820679216, 0.18738798651685473, 0.18593516416092404, 0.17719266552263724, 0.09106582068318658, 0.08657228213982238, 0.08602794078992049, 0.08814370076649014, 0.07624891782642784, 0.07447675826989475, 0.11465063348286186, 0.07091975426741626, 0.07156431206509206]}, "mutation_prompt": null}
