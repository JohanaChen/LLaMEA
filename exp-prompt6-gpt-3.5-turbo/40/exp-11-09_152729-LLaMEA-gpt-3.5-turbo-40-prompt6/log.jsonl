{"id": "dc898f8b-5465-44d3-947d-59391e217a95", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.cr = 0.9\n        self.f = 0.8\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = self.w * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n        return objective_function(gbest)", "name": "DEPSO", "description": "An innovative metaheuristic algorithm combining Differential Evolution (DE) and Particle Swarm Optimization (PSO) to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.11288515482511716, "feedback": "The algorithm DEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.18.", "error": "", "parent_id": null, "metadata": {"aucs": [0.1694352697217566, 0.17372180728992792, 0.1440946573058105, 0.15355058649158948, 0.1649906884068978, 0.16801118210899602, 0.15432457035650526, 0.16247747034514703, 0.16710416426516372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028664778116215484, 0.04215778008978954, 0.036607940018812624, 0.039797852149075164, 0.03349741240842663, 0.0427145772368458, 0.0504968828428346, 0.029887187258253234, 0.052982056737711725, 0.023606137609508582, 0.030553066786568883, 0.029286649377687324, 0.024971838616230757, 0.007028821192713086, 0.015087220316396976, 0.01062278533582961, 0.021506784396864487, 0.023558290501250467, 0.9527095260317746, 0.9161280492880131, 0.8849877193295509, 0.854183450965697, 0.9921318159992264, 0.751075378684934, 0.9861049169984726, 0.8147756698253235, 0.9945312738489014, 0.0815604982671575, 0.07373326200913466, 0.06046346466215746, 0.04019088096528267, 0.07569274547260063, 0.06010824317623664, 0.06908405069946644, 0.05836765425867796, 0.0552793531099276, 0.11557760053624933, 0.1090263717310127, 0.09295445107127376, 0.11623889148402011, 0.13951069535941008, 0.10239891352467256, 0.11720688036097149, 0.11224380468038686, 0.09877168180885598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02439030482205473, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005585730168543468, 9.999999999998899e-05, 0.0034270325074128305, 9.999999999998899e-05, 0.0015423237038021398, 9.999999999998899e-05, 9.999999999998899e-05, 0.017412665706061148, 0.027226030796580702, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01807577922223136, 0.04502358117736727, 0.017969623600298967, 0.014728973956081082, 0.013701667732523903, 0.052268290229937175, 0.03504464176116939, 0.031041636330026212, 0.03695717742871618, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00659491207439622, 9.999999999998899e-05, 9.999999999998899e-05, 0.000731508140485726, 9.999999999998899e-05, 9.999999999998899e-05, 0.2122483145453986, 0.17520933404483474, 0.17243381290012727, 0.18563788391326697, 0.1885928053112711, 0.1920322271897883, 0.18343283591993131, 0.20575835403358533, 0.18703678412333036, 0.04459534499325524, 0.05165439864742838, 0.04975228750264482, 0.026186105447206676, 0.02893361997988486, 0.043203232164841565, 0.038498402295419676, 0.03184424892991233, 0.03290060778169501, 0.1496398471003415, 0.11922973640273771, 0.12895809217409637, 0.13284391014529962, 0.12116094224570517, 0.1172559661212621, 0.14714095267561256, 0.14308592724618197, 0.12639744679093934, 0.14720980311058085, 0.1464388513636966, 0.15755508931514928, 0.14342980497913083, 0.14714112603870888, 0.14593199545294266, 0.14214766591714012, 0.17377774300845283, 0.15162603591096646, 0.08375611751906475, 0.09605360464145418, 0.09739802701851608, 0.0910443925488893, 0.11328552453339413, 0.09660602983262756, 0.0980735579869586, 0.10876780741215497, 0.08657726531333121, 0.1413553157610269, 0.15996598363857373, 0.16702894148313063, 0.14014487530932385, 0.14685234164028693, 0.14191428531000516, 0.138471072253728, 0.14682468781910685, 0.13209580810773658, 0.11495044185359549, 0.1058480985063266, 0.12819342071621342, 0.13283698021277268, 0.14142992373919117, 0.060634175314324246, 0.1097780172165469, 0.06938168882660034, 0.12873658018869993, 0.13334745039650697, 0.1447132757554347, 0.16255235239672017, 0.11854040811366517, 0.15182178034856242, 0.13630670029843095, 0.15647283713723414, 0.14144538908690008, 0.1394023870367409, 0.1651104454613398, 0.1478159846690119, 0.12595731507049457, 0.10220037252132375, 0.09854778598641911, 0.09457552564019134, 0.14663946514833137, 0.1579185157289157, 0.19732751120456782, 0.18546434442451032, 0.18905174150819237, 0.17155022301732648, 0.16603556747619042, 0.17584440224744124, 0.1930391367347274, 0.17289537359588336, 0.17244616723231487, 0.17044083848378633, 0.03383639207453448, 0.03964304120918227, 0.040522593795857764, 0.05155650280891677, 0.048020590088891146, 0.05603433129027913, 0.054970795198191036, 0.04205730232796445, 0.04806451549409119]}, "mutation_prompt": null}
{"id": "e0cc2c24-ebe8-4792-861d-292eb348955f", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.cr = 0.9\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        \n        for t in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n            \n            if t < 0.4 * self.budget:\n                f = 0.8\n            elif t < 0.8 * self.budget:\n                f = 0.6\n            else:\n                f = 0.4\n\n            mutant = within_bounds(xr1 + f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[t % self.population_size])\n\n            v = self.w * population[t % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[t % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[t % self.population_size])\n\n            population[t % self.population_size] = within_bounds(v)\n\n            fitness_values[t % self.population_size] = objective_function(population[t % self.population_size])\n\n            if fitness_values[t % self.population_size] < fitness_values[best_index]:\n                best_index = t % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[t % self.population_size] < objective_function(gbest):\n                gbest = population[t % self.population_size]\n\n        return objective_function(gbest)", "name": "ImprovedDEPSO", "description": "Enhance convergence speed by dynamically adjusting the mutation strength based on iteration progress.", "configspace": "", "generation": 1, "fitness": 0.11283587234043176, "feedback": "The algorithm ImprovedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.18.", "error": "", "parent_id": "dc898f8b-5465-44d3-947d-59391e217a95", "metadata": {"aucs": [0.1694352697217566, 0.17372180728992792, 0.1518133380886615, 0.1518621391354118, 0.1649906884068978, 0.16801118210899602, 0.15432457035650526, 0.16247747034514703, 0.16710416426516372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028664778116215484, 0.04215778008978954, 0.036607940018812624, 0.039797852149075164, 0.03349741240842663, 0.0427145772368458, 0.0504968828428346, 0.02991192212645688, 0.052982056737711725, 0.023606137609508582, 0.030553066786568883, 0.027896307518329055, 0.024971838616230757, 0.008485684985156339, 0.015087220316396976, 0.01062278533582961, 0.021588213834059178, 0.023558290501250467, 0.9527095260317746, 0.9161280492880131, 0.8849877193295509, 0.854183450965697, 0.9921318159992264, 0.751075378684934, 0.9861049169984726, 0.8147756698253235, 0.9945312738489014, 0.0815604982671575, 0.07373326200913466, 0.06046346466215746, 0.03717328810117926, 0.07569274547260063, 0.06010824317623664, 0.06908405069946644, 0.05836765425867796, 0.0552793531099276, 0.11557760053624933, 0.1090263717310127, 0.09295445107127376, 0.11623889148402011, 0.13951069535941008, 0.0997157413627483, 0.11720688036097149, 0.11224380468038686, 0.09425650136646513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02439030482205473, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005585730168543468, 9.999999999998899e-05, 0.0034270325074128305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017412665706061148, 0.027226030796580702, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018175422655386186, 0.04502358117736727, 0.01926987197084218, 0.014728973956081082, 0.013370732639559901, 0.052268290229937175, 0.03504464176116939, 0.029349995970993192, 0.035143933625358614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00659491207439622, 9.999999999998899e-05, 9.999999999998899e-05, 0.000731508140485726, 9.999999999998899e-05, 9.999999999998899e-05, 0.2122483145453986, 0.17520933404483474, 0.17243381290012727, 0.18563788391326697, 0.1885928053112711, 0.1920322271897883, 0.18343283591993131, 0.20575835403358533, 0.18703678412333036, 0.04476360077318753, 0.05165439864742838, 0.04975228750264482, 0.026186105447206676, 0.029160617272248945, 0.043203232164841565, 0.040095445094885274, 0.03184424892991233, 0.03290060778169501, 0.1496398471003415, 0.11922973640273771, 0.12895809217409637, 0.13284391014529962, 0.12116094224570517, 0.11511904971131148, 0.14714095267561256, 0.14308592724618197, 0.12639744679093934, 0.14720980311058085, 0.1464388513636966, 0.15755508931514928, 0.14342980497913083, 0.14714112603870888, 0.14593199545294266, 0.14131850396947632, 0.17377774300845283, 0.14949984384619552, 0.08408266540621423, 0.09241910626358019, 0.09739802701851608, 0.09103206132664166, 0.11328552453339413, 0.09454488991767196, 0.09811087947600738, 0.10571295149594606, 0.08693563282160355, 0.1413553157610269, 0.15996598363857373, 0.16702894148313063, 0.14014487530932385, 0.14685234164028693, 0.14191428531000516, 0.138471072253728, 0.14695265362043264, 0.13653464391929016, 0.11495044185359549, 0.10718884599822087, 0.12819342071621342, 0.13283698021277268, 0.14142992373919117, 0.060634175314324246, 0.10946933345037746, 0.06938168882660034, 0.12910013285777755, 0.1375740285307967, 0.1447132757554347, 0.16255235239672017, 0.11847358637616012, 0.15182178034856242, 0.13630670029843095, 0.15647283713723414, 0.14144538908690008, 0.1394023870367409, 0.1651104454613398, 0.1478159846690119, 0.12432641456061155, 0.10220037252132375, 0.09992777879004244, 0.09457552564019134, 0.14663946514833137, 0.1579185157289157, 0.19732751120456782, 0.18546434442451032, 0.18905174150819237, 0.17157747521794442, 0.16603556747619042, 0.17410099769493004, 0.1930391367347274, 0.17289537359588336, 0.17244616723231487, 0.17087830599781406, 0.03374569672399541, 0.03964304120918227, 0.040522593795857764, 0.05155650280891677, 0.048020590088891146, 0.05603433129027913, 0.054970795198191036, 0.041942239182275465, 0.04806451549409119]}, "mutation_prompt": null}
{"id": "3938f4c1-a3d6-4509-aaad-52ff6794f957", "solution": "import numpy as np\n\nclass AdaptiveDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.cr = 0.9\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n\n        diversity = np.mean(np.std(population, axis=0))\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            f = np.clip(np.abs(np.random.normal(0.5, 0.1)) * (1 + diversity), 0.1, 1.0)\n            mutant = within_bounds(xr1 + f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = self.w * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            diversity = np.mean(np.std(population, axis=0))\n\n        return objective_function(gbest)", "name": "AdaptiveDEPSO", "description": "Accelerating convergence by adaptively adjusting the mutation factor based on population diversity.", "configspace": "", "generation": 2, "fitness": 0.11285622755688272, "feedback": "The algorithm AdaptiveDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "dc898f8b-5465-44d3-947d-59391e217a95", "metadata": {"aucs": [0.14229888384161782, 0.14989348653262025, 0.14849647440091007, 0.18631802892695581, 0.16154041248996331, 0.2074194236429282, 0.15831890888961353, 0.15303793499221297, 0.18016096014552763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02784419846446129, 0.03245862580826919, 0.030535221110590816, 0.03213966387757483, 0.03723944220564712, 0.04273301937236229, 0.03497632187010136, 0.03242183210835248, 0.0386540406322996, 0.010691922210105842, 0.01133512723653296, 0.0071527405267490796, 0.024495405004580584, 0.020812163351471957, 0.007433461399316776, 0.005770510997682887, 0.016844819041149317, 0.01269356281683054, 0.9912937154605542, 0.995220926138092, 0.9925010754224107, 0.8979479618428904, 0.8574832575837146, 0.9879059397987949, 0.9930385878073684, 0.9681691283910041, 0.9136763458027657, 0.0753831192651151, 0.045533917319439565, 0.061252443913054955, 0.07010730851182001, 0.043759067504871796, 0.0430056254761797, 0.07120162409605435, 0.05970790103836421, 0.06652128856559136, 0.10983858767586352, 0.09298008178962514, 0.12931775647882204, 0.10314024429979762, 0.0860030675113701, 0.10084722120372536, 0.11218326029419246, 0.08354338076756052, 0.09624841376719984, 9.999999999998899e-05, 0.008193349479253098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018697502636189856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004456584170322797, 0.00268869997631338, 9.999999999998899e-05, 0.000833316813761642, 9.999999999998899e-05, 0.02037923816434073, 9.999999999998899e-05, 0.0008551810779283686, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020571126437509135, 0.03121919341423307, 0.03288274801534352, 0.016306753188165768, 0.04384887991284192, 0.0744778763093149, 0.017858813132115348, 0.04473329452164654, 0.013432114091079583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16691732638842494, 0.15658888194400866, 0.1999340563876918, 0.1718526507579725, 0.19461187708277827, 0.1823363837068388, 0.1641769767666308, 0.161054078887379, 0.16949343010366935, 0.04342719225571745, 0.050441394859241706, 0.05306996573952516, 0.03861651191382531, 0.04539878585196988, 0.03262544780272825, 0.03180825898504136, 0.036328187694639524, 0.04339157962219942, 0.12691291284112483, 0.1259225665407464, 0.14319381479315652, 0.11868283978916405, 0.1434982233289548, 0.15695067114654393, 0.13888847499038348, 0.11124313400600316, 0.13001535631079209, 0.1496210644333702, 0.14652479607530744, 0.1760719473770168, 0.15875999569574673, 0.14519770875282478, 0.1511386764904411, 0.15636340655693426, 0.17377774300845283, 0.15149843404101815, 0.08825252414046081, 0.07843320500454953, 0.08269532111826228, 0.09514318016551393, 0.08076328175031033, 0.09467859146093283, 0.09092839623432569, 0.1000242171786907, 0.10191223914985115, 0.15396517065302617, 0.1280898272763208, 0.14929925096902552, 0.1282580834889444, 0.14592094115637533, 0.1505661667854854, 0.1356613521284693, 0.15978626431401222, 0.13166227666018437, 0.041415645251629774, 0.07770506881767891, 0.1515658735301888, 0.07860541709584778, 0.1457913443318486, 0.12608775892360247, 0.1382903176160507, 0.10991006405382209, 0.1407555194244785, 0.1338836912097937, 0.1282938951662822, 0.12852812979267003, 0.14477614698065844, 0.16297077265548154, 0.1303329845198492, 0.14764484518543253, 0.14005639330235975, 0.12383543701163802, 0.11040265245322212, 0.1363658496877297, 0.1108716193854079, 0.11389995998959535, 0.09662404990730689, 0.11317121290756327, 0.1616333098217032, 0.1637069412954918, 0.13659930291508915, 0.1806909586511467, 0.17917549013800982, 0.18800203176346997, 0.19064071471564248, 0.1800869515511191, 0.17447044342817442, 0.1832750278213917, 0.1847841493773864, 0.17398147443691103, 0.031243836213347476, 0.03882237104733044, 0.054690652039197984, 0.03429389794793514, 0.050757787647666364, 0.06266005354609538, 0.03088652924241997, 0.03362283277956035, 0.05109819318140596]}, "mutation_prompt": null}
{"id": "193c2109-ffa3-475c-9714-1b80bf177a2b", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.cr = 0.9\n        self.f = 0.8\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = self.w * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n        return objective_function(gbest)", "name": "DEPSO", "description": "An innovative metaheuristic algorithm combining Differential Evolution (DE) and Particle Swarm Optimization (PSO) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc898f8b-5465-44d3-947d-59391e217a95", "metadata": {"aucs": [0.1694352697217566, 0.17372180728992792, 0.1440946573058105, 0.15355058649158948, 0.1649906884068978, 0.16801118210899602, 0.15432457035650526, 0.16247747034514703, 0.16710416426516372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028664778116215484, 0.04215778008978954, 0.036607940018812624, 0.039797852149075164, 0.03349741240842663, 0.0427145772368458, 0.0504968828428346, 0.029887187258253234, 0.052982056737711725, 0.023606137609508582, 0.030553066786568883, 0.029286649377687324, 0.024971838616230757, 0.007028821192713086, 0.015087220316396976, 0.01062278533582961, 0.021506784396864487, 0.023558290501250467, 0.9527095260317746, 0.9161280492880131, 0.8849877193295509, 0.854183450965697, 0.9921318159992264, 0.751075378684934, 0.9861049169984726, 0.8147756698253235, 0.9945312738489014, 0.0815604982671575, 0.07373326200913466, 0.06046346466215746, 0.04019088096528267, 0.07569274547260063, 0.06010824317623664, 0.06908405069946644, 0.05836765425867796, 0.0552793531099276, 0.11557760053624933, 0.1090263717310127, 0.09295445107127376, 0.11623889148402011, 0.13951069535941008, 0.10239891352467256, 0.11720688036097149, 0.11224380468038686, 0.09877168180885598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02439030482205473, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005585730168543468, 9.999999999998899e-05, 0.0034270325074128305, 9.999999999998899e-05, 0.0015423237038021398, 9.999999999998899e-05, 9.999999999998899e-05, 0.017412665706061148, 0.027226030796580702, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01807577922223136, 0.04502358117736727, 0.017969623600298967, 0.014728973956081082, 0.013701667732523903, 0.052268290229937175, 0.03504464176116939, 0.031041636330026212, 0.03695717742871618, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00659491207439622, 9.999999999998899e-05, 9.999999999998899e-05, 0.000731508140485726, 9.999999999998899e-05, 9.999999999998899e-05, 0.2122483145453986, 0.17520933404483474, 0.17243381290012727, 0.18563788391326697, 0.1885928053112711, 0.1920322271897883, 0.18343283591993131, 0.20575835403358533, 0.18703678412333036, 0.04459534499325524, 0.05165439864742838, 0.04975228750264482, 0.026186105447206676, 0.02893361997988486, 0.043203232164841565, 0.038498402295419676, 0.03184424892991233, 0.03290060778169501, 0.1496398471003415, 0.11922973640273771, 0.12895809217409637, 0.13284391014529962, 0.12116094224570517, 0.1172559661212621, 0.14714095267561256, 0.14308592724618197, 0.12639744679093934, 0.14720980311058085, 0.1464388513636966, 0.15755508931514928, 0.14342980497913083, 0.14714112603870888, 0.14593199545294266, 0.14214766591714012, 0.17377774300845283, 0.15162603591096646, 0.08375611751906475, 0.09605360464145418, 0.09739802701851608, 0.0910443925488893, 0.11328552453339413, 0.09660602983262756, 0.0980735579869586, 0.10876780741215497, 0.08657726531333121, 0.1413553157610269, 0.15996598363857373, 0.16702894148313063, 0.14014487530932385, 0.14685234164028693, 0.14191428531000516, 0.138471072253728, 0.14682468781910685, 0.13209580810773658, 0.11495044185359549, 0.1058480985063266, 0.12819342071621342, 0.13283698021277268, 0.14142992373919117, 0.060634175314324246, 0.1097780172165469, 0.06938168882660034, 0.12873658018869993, 0.13334745039650697, 0.1447132757554347, 0.16255235239672017, 0.11854040811366517, 0.15182178034856242, 0.13630670029843095, 0.15647283713723414, 0.14144538908690008, 0.1394023870367409, 0.1651104454613398, 0.1478159846690119, 0.12595731507049457, 0.10220037252132375, 0.09854778598641911, 0.09457552564019134, 0.14663946514833137, 0.1579185157289157, 0.19732751120456782, 0.18546434442451032, 0.18905174150819237, 0.17155022301732648, 0.16603556747619042, 0.17584440224744124, 0.1930391367347274, 0.17289537359588336, 0.17244616723231487, 0.17044083848378633, 0.03383639207453448, 0.03964304120918227, 0.040522593795857764, 0.05155650280891677, 0.048020590088891146, 0.05603433129027913, 0.054970795198191036, 0.04205730232796445, 0.04806451549409119]}, "mutation_prompt": null}
{"id": "e78c9723-62da-455a-8b40-1a8101c6dcfd", "solution": "import numpy as np\n\nclass FastDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.w = 0.6\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = self.w * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n        return objective_function(gbest)", "name": "FastDEPSO", "description": "Improved DEPSO algorithm with enhanced mutation strategy to accelerate convergence speed.", "configspace": "", "generation": 4, "fitness": 0.1189627304804275, "feedback": "The algorithm FastDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.15.", "error": "", "parent_id": "dc898f8b-5465-44d3-947d-59391e217a95", "metadata": {"aucs": [0.20470498383144764, 0.17233756143795376, 0.19609687304161438, 0.1844492410456513, 0.15971077317180193, 0.19544913935841257, 0.17376514208760419, 0.15785773467568143, 0.1813347842435824, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037706762709263986, 0.04511128238595008, 0.03211714399954124, 0.06613226813927409, 0.03802690012661114, 0.050989237049587244, 0.043506074472882794, 0.049980018956963024, 0.04463080951979792, 0.04168617687999465, 0.03948177799283292, 0.02629272231995583, 0.054193691689737755, 0.02666628120729897, 0.023283310193663365, 0.024678222572475872, 0.06885094071325415, 0.026632069576800088, 0.5973804103166628, 0.9286077036068148, 0.5732520893272908, 0.5335230356507259, 0.993380834787824, 0.7319798410314662, 0.6842946694042333, 0.9773505698812994, 0.7046681555266177, 0.0770059500476642, 0.07269381814467868, 0.08826244212773948, 0.07872968424893112, 0.10083876057625274, 0.08624703178047388, 0.06491207027779788, 0.06905295965777603, 0.10523853842925912, 0.13881250107774346, 0.1286531752624902, 0.11455443023974732, 0.1430430552570251, 0.11777513404432849, 0.10401928108989456, 0.10340977521055661, 0.12239833161125879, 0.11220456347663255, 9.999999999998899e-05, 0.036035729391555305, 0.007435309211382468, 9.999999999998899e-05, 0.021751634862255953, 9.999999999998899e-05, 0.00855011912121717, 0.0001324855514476253, 0.048988823133667925, 0.006719768301760798, 0.005622627547380188, 0.009703433180669574, 0.0158447997044735, 0.032017000731966117, 0.013272666315454207, 0.04865931911828325, 0.007453997170553506, 0.019661079507280244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08363054776906287, 0.0628323019395799, 0.027882121680067762, 0.0641705429794569, 0.04575933113826891, 0.04171876672261865, 0.05340937798568102, 0.04175481917177404, 0.030063063488337316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004541417722961905, 9.999999999998899e-05, 9.999999999998899e-05, 0.0064754516779055304, 0.0033376744320782192, 9.999999999998899e-05, 9.999999999998899e-05, 0.2177388251247513, 0.1849970437023759, 0.19192243795394393, 0.18350191284438466, 0.18830722339409045, 0.20552225176472405, 0.22214607342127668, 0.20440229521364306, 0.18747328954266296, 0.04706523471024471, 0.051920184076570286, 0.042867764826781785, 0.04343356616338023, 0.06534111203009985, 0.04838912598187184, 0.05480729800812967, 0.05000098184106316, 0.0548832592059616, 0.1254229879261205, 0.10399008735495463, 0.12497662325176373, 0.15050847574826443, 0.12501773198008503, 0.12359283496667905, 0.13718477261077477, 0.129042111805592, 0.11751220228849579, 0.1665583381349185, 0.1703122106053463, 0.16445490145767616, 0.17079596298395494, 0.165876091023215, 0.16699436618801233, 0.1860898214065937, 0.17377774300845283, 0.1581400202962272, 0.10653817693304424, 0.10227891648103027, 0.1105982883762705, 0.11352315231335486, 0.11934324573728483, 0.12185487763554448, 0.10811386431626802, 0.1291739790200538, 0.12403537627344141, 0.14630135967254065, 0.15362579812832156, 0.1505528007459085, 0.15875661197389634, 0.20708381927116992, 0.15293462823910453, 0.14229966608831524, 0.15040536892691037, 0.16387538701082427, 0.15428795498896886, 0.15437364236999385, 0.15715436271383498, 0.1575965857676509, 0.15068016640087567, 0.1445104780140697, 0.13783943528178788, 0.14086775012896324, 0.14893137540288048, 0.1491901221490307, 0.12418171725228999, 0.2743796339535082, 0.1593083980482759, 0.16323841116881999, 0.15120280889770032, 0.17370765098909957, 0.1889799647219923, 0.16337759052926137, 0.32856060271170995, 0.19850859770761942, 0.16554144331841159, 0.12243387866568589, 0.1971137459405382, 0.14619745432758158, 0.22008985736818953, 0.14688353269988108, 0.14550857169593823, 0.18330027642865676, 0.1942352571915712, 0.17645431862018046, 0.19689212206551654, 0.16761661947760897, 0.1809090604504241, 0.17345471064710605, 0.17199655136281966, 0.17565304904754975, 0.06620048228115227, 0.05452539283157165, 0.04102421781955179, 0.050146722981170955, 0.045677821826920595, 0.04906230396582201, 0.06580505837551032, 0.044736160366685596, 0.05836649978163533]}, "mutation_prompt": null}
{"id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "DynamicInertiaDEPSO", "description": "Utilizing a dynamic inertia weight to enhance exploration and exploitation balance, thereby improving convergence speed.", "configspace": "", "generation": 5, "fitness": 0.12333305518159679, "feedback": "The algorithm DynamicInertiaDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.15.", "error": "", "parent_id": "e78c9723-62da-455a-8b40-1a8101c6dcfd", "metadata": {"aucs": [0.22027472730466258, 0.17810835794520807, 0.205357851968343, 0.21109790533792316, 0.2007390265529343, 0.2224724651595228, 0.18890374387118314, 0.19908741429723475, 0.21235150905275246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036998496544355275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058988781206239405, 0.058162826016164626, 0.05819994101096526, 0.07176358791553994, 0.05019881607155097, 0.05359918380111017, 0.05512035412004024, 0.049257215417671585, 0.0602626014565798, 0.036404240177963954, 0.04233589554969042, 0.0377339363147603, 0.03625659968529216, 0.04141189813488033, 0.04024900122220809, 0.033482772710707986, 0.03576900121000903, 0.02611770918872025, 0.9918243923648012, 0.7257671093089031, 0.36208379522271705, 0.859709020184676, 0.9933911621621321, 0.4781939840132502, 0.6575390790159346, 0.6869602044413677, 0.5647263298041728, 0.0998466462607408, 0.09838967145241184, 0.09593820160094924, 0.08693374376193574, 0.11083603740011172, 0.08888205793178094, 0.11911119081802934, 0.10325236972234275, 0.11073776098313104, 0.17421016463956152, 0.10813509261475118, 0.1175214417807372, 0.1539239405052718, 0.1748837998217856, 0.12901967454193397, 0.1360121010696972, 0.16700654275139282, 0.20048918290198303, 0.025043328096461814, 0.08019494963606244, 9.999999999998899e-05, 0.008410719397912159, 9.999999999998899e-05, 0.04325420976908967, 0.012584048074561593, 0.016459608428190053, 0.011104034890959569, 0.02325896834906105, 0.019202981268348074, 0.022059163740006604, 0.008925630585296163, 0.065918049819093, 0.05001497706764335, 0.007855844529553901, 0.013973916765022798, 0.023388251206964195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05045361196359788, 0.045247764921431344, 0.041696839530885654, 0.034254704982004336, 0.06124834058888806, 0.04290179679293671, 0.048188819215772116, 0.04724432396366007, 0.03400218429358792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006588123978200633, 0.0038126411960096585, 9.999999999998899e-05, 0.002039016241202285, 0.011160285845837836, 0.00961283609186847, 0.012084774954082778, 0.004553142899355378, 9.999999999998899e-05, 0.19593469838610933, 0.22338670176983721, 0.2117117950325781, 0.22022774222846342, 0.2155193197080728, 0.21879457654651513, 0.22474873284891905, 0.25354769311357195, 0.21207051070190464, 0.05887415993849787, 0.04891750568777986, 0.06704871713463656, 0.046893300721319475, 0.055312048294934524, 0.05711227189645374, 0.04965076568475524, 0.04162411486171458, 0.05384828160993271, 0.14869547903475888, 0.1195168158840334, 0.13012893660249758, 0.14025704647718285, 0.14109994866436104, 0.16024771272566907, 0.12971420890714236, 0.12452914813332483, 0.12152339275685631, 0.1734949957094406, 0.16593792786992234, 0.2028314381419717, 0.1845900689028741, 0.17603613110446548, 0.1711452885255732, 0.17443624347977782, 0.1988891729985035, 0.16648116921445266, 0.11980488117803711, 0.13580595019384434, 0.12321681577106214, 0.12056369732452099, 0.1240389334954427, 0.10692550883662932, 0.1206842170731085, 0.11188264703063922, 0.11604094726527969, 0.17277522778457166, 0.15849565247241515, 0.16693635673913287, 0.15967646096258015, 0.16335452747317214, 0.16902201823537322, 0.21028027798350057, 0.1677031136485595, 0.1640640543503541, 0.16209760844015741, 0.13838332272869014, 0.1406756677571409, 0.14930117794930697, 0.14590967342810068, 0.14754252248165578, 0.14535090229132908, 0.1592271292666364, 0.153593348487006, 0.1705117399534538, 0.19448965924017925, 0.17851029477737612, 0.15499551921955101, 0.17608678672319034, 0.14207584695248154, 0.1734561158940885, 0.20065230963251268, 0.14449182454888687, 0.15721801899128118, 0.14330992726035585, 0.14272916383486123, 0.11751043441993136, 0.20568315154553019, 0.2690737286717193, 0.1658269509027498, 0.15359027534057823, 0.1666476382983939, 0.18767448849349122, 0.20422436472286876, 0.1810221121244181, 0.17334095675270278, 0.19617291970667616, 0.17286808195274084, 0.17432494784327524, 0.1689366154250933, 0.18121343009750257, 0.046072453937105684, 0.05260121637960258, 0.06659024916801792, 0.05405152536895752, 0.05588779989221948, 0.06106838437836992, 0.056974371618490616, 0.05798747136755067, 0.05409930801776952]}, "mutation_prompt": null}
{"id": "17b8ae3a-55eb-4dbb-b77b-8e1f4bc5bb2f", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "DynamicInertiaDEPSO", "description": "Utilizing a dynamic inertia weight to enhance exploration and exploitation balance, thereby improving convergence speed.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.22027472730466258, 0.17810835794520807, 0.205357851968343, 0.21109790533792316, 0.2007390265529343, 0.2224724651595228, 0.18890374387118314, 0.19908741429723475, 0.21235150905275246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036998496544355275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058988781206239405, 0.058162826016164626, 0.05819994101096526, 0.07176358791553994, 0.05019881607155097, 0.05359918380111017, 0.05512035412004024, 0.049257215417671585, 0.0602626014565798, 0.036404240177963954, 0.04233589554969042, 0.0377339363147603, 0.03625659968529216, 0.04141189813488033, 0.04024900122220809, 0.033482772710707986, 0.03576900121000903, 0.02611770918872025, 0.9918243923648012, 0.7257671093089031, 0.36208379522271705, 0.859709020184676, 0.9933911621621321, 0.4781939840132502, 0.6575390790159346, 0.6869602044413677, 0.5647263298041728, 0.0998466462607408, 0.09838967145241184, 0.09593820160094924, 0.08693374376193574, 0.11083603740011172, 0.08888205793178094, 0.11911119081802934, 0.10325236972234275, 0.11073776098313104, 0.17421016463956152, 0.10813509261475118, 0.1175214417807372, 0.1539239405052718, 0.1748837998217856, 0.12901967454193397, 0.1360121010696972, 0.16700654275139282, 0.20048918290198303, 0.025043328096461814, 0.08019494963606244, 9.999999999998899e-05, 0.008410719397912159, 9.999999999998899e-05, 0.04325420976908967, 0.012584048074561593, 0.016459608428190053, 0.011104034890959569, 0.02325896834906105, 0.019202981268348074, 0.022059163740006604, 0.008925630585296163, 0.065918049819093, 0.05001497706764335, 0.007855844529553901, 0.013973916765022798, 0.023388251206964195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05045361196359788, 0.045247764921431344, 0.041696839530885654, 0.034254704982004336, 0.06124834058888806, 0.04290179679293671, 0.048188819215772116, 0.04724432396366007, 0.03400218429358792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006588123978200633, 0.0038126411960096585, 9.999999999998899e-05, 0.002039016241202285, 0.011160285845837836, 0.00961283609186847, 0.012084774954082778, 0.004553142899355378, 9.999999999998899e-05, 0.19593469838610933, 0.22338670176983721, 0.2117117950325781, 0.22022774222846342, 0.2155193197080728, 0.21879457654651513, 0.22474873284891905, 0.25354769311357195, 0.21207051070190464, 0.05887415993849787, 0.04891750568777986, 0.06704871713463656, 0.046893300721319475, 0.055312048294934524, 0.05711227189645374, 0.04965076568475524, 0.04162411486171458, 0.05384828160993271, 0.14869547903475888, 0.1195168158840334, 0.13012893660249758, 0.14025704647718285, 0.14109994866436104, 0.16024771272566907, 0.12971420890714236, 0.12452914813332483, 0.12152339275685631, 0.1734949957094406, 0.16593792786992234, 0.2028314381419717, 0.1845900689028741, 0.17603613110446548, 0.1711452885255732, 0.17443624347977782, 0.1988891729985035, 0.16648116921445266, 0.11980488117803711, 0.13580595019384434, 0.12321681577106214, 0.12056369732452099, 0.1240389334954427, 0.10692550883662932, 0.1206842170731085, 0.11188264703063922, 0.11604094726527969, 0.17277522778457166, 0.15849565247241515, 0.16693635673913287, 0.15967646096258015, 0.16335452747317214, 0.16902201823537322, 0.21028027798350057, 0.1677031136485595, 0.1640640543503541, 0.16209760844015741, 0.13838332272869014, 0.1406756677571409, 0.14930117794930697, 0.14590967342810068, 0.14754252248165578, 0.14535090229132908, 0.1592271292666364, 0.153593348487006, 0.1705117399534538, 0.19448965924017925, 0.17851029477737612, 0.15499551921955101, 0.17608678672319034, 0.14207584695248154, 0.1734561158940885, 0.20065230963251268, 0.14449182454888687, 0.15721801899128118, 0.14330992726035585, 0.14272916383486123, 0.11751043441993136, 0.20568315154553019, 0.2690737286717193, 0.1658269509027498, 0.15359027534057823, 0.1666476382983939, 0.18767448849349122, 0.20422436472286876, 0.1810221121244181, 0.17334095675270278, 0.19617291970667616, 0.17286808195274084, 0.17432494784327524, 0.1689366154250933, 0.18121343009750257, 0.046072453937105684, 0.05260121637960258, 0.06659024916801792, 0.05405152536895752, 0.05588779989221948, 0.06106838437836992, 0.056974371618490616, 0.05798747136755067, 0.05409930801776952]}, "mutation_prompt": null}
{"id": "4b8eea84-bd89-4eae-b1e4-5705cd584bf2", "solution": "import numpy as np\n\nclass AdaptiveDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f_min = 0.5\n        self.f_max = 1.0\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            diversity = np.mean(np.std(population, axis=0))\n\n            f = self.f_min + (self.f_max - self.f_min) * np.exp(-2.0 * diversity)\n\n            mutant = within_bounds(xr1 + f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "AdaptiveDEPSO", "description": "Introducing a novel Adaptive Differential Evolution Strategy (ADES) by dynamically adjusting the mutation strategy and scaling factor based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": 0.120274433351961, "feedback": "The algorithm AdaptiveDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.14.", "error": "", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.19914465274124182, 0.20414525717735654, 0.22788072800380554, 0.2037472163182832, 0.19703836203252167, 0.21210010808660817, 0.23940416109692597, 0.19132882598646117, 0.1840389000460153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061235030898515674, 0.05113962149865692, 0.049062318846671005, 0.05398680553904034, 0.048472485337442195, 0.05014933700297275, 0.05108307193523087, 0.048825727623339144, 0.05471691269573109, 0.031166040610562606, 0.03436517053391852, 0.026637351005305954, 0.05719775947088779, 0.03259489815089034, 0.0396002847794612, 0.04314176293908334, 0.055491031403032354, 0.0462020848114304, 0.9918244431615864, 0.5733617743886446, 0.7438156866878893, 0.19040459982917646, 0.993391146840627, 0.7836606512126393, 0.572189321899643, 0.4997992090684802, 0.6103649827450989, 0.07693900926162989, 0.1165988208683757, 0.10516459661237099, 0.08688518975219395, 0.08552966859314404, 0.06722125144595081, 0.08854738204994994, 0.09747658992663333, 0.10475047458315079, 0.14122409824270055, 0.12252396508507668, 0.12843831314219079, 0.15475973713942526, 0.125561548835314, 0.16775870413611194, 0.12954247141791397, 0.13652026197000033, 0.1676851354135317, 0.005728545152305919, 0.02056134777824281, 0.00046279261984527587, 0.02969499654030383, 0.0036335663086696224, 0.07886984840462197, 0.009611495013993943, 0.017823936855978384, 0.009563284634787839, 0.023871502213405282, 0.0010952138699164005, 0.013499821115888322, 0.0062717087948993555, 0.011250534681175872, 0.009957724026041448, 9.999999999998899e-05, 0.01935605483717695, 0.04348996697717522, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05390921749521893, 0.049724346676811915, 0.05798260566123359, 0.02437027830607752, 0.025339439410391407, 0.055267550893045136, 0.07117986478905114, 0.0512779541854006, 0.030949625723494467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013068512899752416, 9.999999999998899e-05, 0.018756026648586666, 0.0019505998023409132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003097927716476101, 0.19601749505134647, 0.22511338175882512, 0.23320698789319505, 0.2545142190580788, 0.23468350813836858, 0.21522204128544098, 0.2290811794669506, 0.2546905577143981, 0.21691987961389791, 0.05406223104296082, 0.06614523305969655, 0.06757921557262436, 0.046273549649794576, 0.05581986116522164, 0.06201470692894795, 0.053836682448875406, 0.047729678601453274, 0.047587770799894846, 0.12083946312960925, 0.12476395526644302, 0.15031931332042947, 0.1478160865339545, 0.12446525814283504, 0.13215137165558577, 0.12319636044560667, 0.11202017167510603, 0.12638168053641818, 0.15833403998314732, 0.17038497684509113, 0.1710842719706781, 0.17020394857891696, 0.17288886030117134, 0.19250537532804224, 0.17332201211795473, 0.1866857849662289, 0.18927744763477716, 0.11530613459856309, 0.10124258088835536, 0.1227828092112, 0.11443196568867842, 0.10797923305621082, 0.11890361480236844, 0.15351576470709027, 0.11884217911126493, 0.11049835835743993, 0.1520809697977662, 0.15264675863191957, 0.15592445500229457, 0.15258333095260423, 0.15077260257913438, 0.15003659924035784, 0.1570853342046763, 0.1653733311920329, 0.18115003465475743, 0.15341360213580812, 0.1420777690935625, 0.1443796273273007, 0.15679822883190153, 0.1561556151866642, 0.14369285804097975, 0.15001800576622248, 0.15903148506559284, 0.16525553665932635, 0.19943967454818246, 0.15640811492742246, 0.14488831048619466, 0.15206315888455246, 0.17428585844818223, 0.24394184430206556, 0.16176713058408787, 0.2708135512514388, 0.14967322570179753, 0.16109161396204508, 0.23721943324558747, 0.2101946931537222, 0.13838709986794606, 0.17552218817400989, 0.15338117019032016, 0.1640659821582514, 0.15574683569312187, 0.14924596598405837, 0.18935094154090537, 0.16529874953895518, 0.18207510943586447, 0.1854396292151148, 0.17127127664250985, 0.16731882564972456, 0.17753601267852703, 0.17497259716251012, 0.1779954631622198, 0.04560095537837838, 0.07960673766720361, 0.05281058543947237, 0.054705034659759066, 0.059647782896295576, 0.05486395846515102, 0.057206385863465714, 0.05637056120944506, 0.04920257247589577]}, "mutation_prompt": null}
{"id": "9d19dad7-5efb-410d-9cd1-64056a939f39", "solution": "import numpy as np\n\nclass AdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.adaptive_factor = 2.0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + np.clip(self.adaptive_factor / (fitness_values[r1] + 1e-10) * (xr2 - xr3), -1.0, 1.0))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "AdaptiveMutationDEPSO", "description": "Introducing a novel adaptive mutation strategy based on the individual's fitness to enhance exploration and exploit the best solutions more effectively, thus accelerating convergence.", "configspace": "", "generation": 8, "fitness": 0.12245840431970433, "feedback": "The algorithm AdaptiveMutationDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.13.", "error": "", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.2150358646122209, 0.21734013038987354, 0.22563418369549504, 0.1972930757166238, 0.19855610041101535, 0.2358995353826041, 0.2117939010057085, 0.24628177042062738, 0.20716897762982922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08040746554427514, 0.08126264647042392, 0.05292739761136489, 0.05349803333739167, 0.061552538495390996, 0.04216451566335311, 0.055463854177304484, 0.05790973526850807, 0.04063981612757639, 0.048645120499885564, 0.053775817362240574, 0.03329081280362667, 0.05008791392293699, 0.042021181227860915, 0.05950869269814396, 0.05136061193970343, 0.03641881681761405, 0.041624863241693455, 0.5845932424391933, 0.23768016023949445, 0.16713559730354666, 0.33468954358591785, 0.9933887823112357, 0.21718924055155764, 0.9120973444522309, 0.7356505772843303, 0.8542708121876716, 0.09336637610250054, 0.10012971892442823, 0.08821829446911267, 0.08572360109869548, 0.07830921166481553, 0.11543547300697754, 0.10666776494775698, 0.10968566678396985, 0.10042238356719912, 0.15166989100543793, 0.160215292606378, 0.15489590005318365, 0.15729738874339239, 0.16990279481271942, 0.14856630517518166, 0.16217982590898372, 0.17258102764464278, 0.1421625981301986, 0.014167661537057064, 9.999999999998899e-05, 0.04660318937432406, 0.021404808543406206, 0.013731438090801573, 0.0368642337458881, 0.050798007885206053, 0.04982650181698445, 0.025293826246359785, 0.041975303431504796, 0.059584207557332736, 0.031417136310171956, 0.04150216165897236, 0.05730855729957307, 0.033527623504806425, 0.019968310465787398, 0.021155827862438303, 0.06021803728920272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07142106253631186, 0.04927258527567757, 0.08553422694266932, 0.08099957301249727, 0.02825648369699174, 0.030533016868971585, 0.03910459537248534, 0.05330451199717756, 0.07072595308207696, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007009125798246751, 9.999999999998899e-05, 9.999999999998899e-05, 0.008019808254637772, 0.0055003946923590785, 0.2369784837107759, 0.21361260919637215, 0.2648632356119759, 0.22516822254044377, 0.24757804025951524, 0.24491684400187064, 0.24870691491256514, 0.21051786267597827, 0.24817477323522852, 0.060108650068031566, 0.0584277652544557, 0.060633673254240406, 0.05454994545878289, 0.061537240535462834, 0.048090795194110414, 0.0625813260419742, 0.06331201687343979, 0.054448679816852974, 0.14789163433061148, 0.15199168499132176, 0.14131581937020032, 0.13428052077263364, 0.13425717643567492, 0.12419930292311199, 0.1328961467777211, 0.12556617936903858, 0.1391415026224253, 0.17201768109212134, 0.18390876800716727, 0.1767116705921662, 0.1992316544777113, 0.19152919271925317, 0.18336596363138136, 0.17358202442299553, 0.19341031784025142, 0.18038817571092236, 0.12096472166744188, 0.13056904464358465, 0.11783083437487951, 0.12364753366112236, 0.11511119290084859, 0.15526205038093754, 0.1324647129220743, 0.11890291254381014, 0.12560621769114455, 0.153917321973978, 0.17806168676564504, 0.1516247209625391, 0.1506967507781043, 0.16174964713054973, 0.16621640852499164, 0.1625754960480601, 0.1598590970823971, 0.18529228309919898, 0.16509051057399993, 0.1559659593695425, 0.15814927628576658, 0.16238196133834737, 0.15534198488586448, 0.1536534476140401, 0.15417473908997603, 0.15710237552356487, 0.15201008232403257, 0.1650659769760936, 0.22436900984479713, 0.20510276218900847, 0.15817477004197822, 0.1506837990195341, 0.14560133991293567, 0.16186323084141008, 0.21372239857858888, 0.21911717018462906, 0.18753529045590123, 0.28492575687158805, 0.15970252673300833, 0.1490695752478861, 0.1579438574957448, 0.22458235884936484, 0.1401688351892344, 0.1729768454368501, 0.1953040506805216, 0.17329038939118835, 0.19205229716775607, 0.19038205358700966, 0.18910221185787823, 0.17577251343809908, 0.17846483956102743, 0.1785438452055994, 0.17035892444320777, 0.19958331666719042, 0.06122901221364241, 0.049267345095466264, 0.05621190800901854, 0.054635438334704856, 0.05512976619721355, 0.06295419944680491, 0.05853587058093723, 0.0648942855053134, 0.06046573929580934]}, "mutation_prompt": null}
{"id": "ca8a0161-4e60-4347-a92a-b4c2f1a84c82", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "DynamicInertiaDEPSO", "description": "Utilizing a dynamic inertia weight to enhance exploration and exploitation balance, thereby improving convergence speed.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.22027472730466258, 0.17810835794520807, 0.205357851968343, 0.21109790533792316, 0.2007390265529343, 0.2224724651595228, 0.18890374387118314, 0.19908741429723475, 0.21235150905275246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036998496544355275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058988781206239405, 0.058162826016164626, 0.05819994101096526, 0.07176358791553994, 0.05019881607155097, 0.05359918380111017, 0.05512035412004024, 0.049257215417671585, 0.0602626014565798, 0.036404240177963954, 0.04233589554969042, 0.0377339363147603, 0.03625659968529216, 0.04141189813488033, 0.04024900122220809, 0.033482772710707986, 0.03576900121000903, 0.02611770918872025, 0.9918243923648012, 0.7257671093089031, 0.36208379522271705, 0.859709020184676, 0.9933911621621321, 0.4781939840132502, 0.6575390790159346, 0.6869602044413677, 0.5647263298041728, 0.0998466462607408, 0.09838967145241184, 0.09593820160094924, 0.08693374376193574, 0.11083603740011172, 0.08888205793178094, 0.11911119081802934, 0.10325236972234275, 0.11073776098313104, 0.17421016463956152, 0.10813509261475118, 0.1175214417807372, 0.1539239405052718, 0.1748837998217856, 0.12901967454193397, 0.1360121010696972, 0.16700654275139282, 0.20048918290198303, 0.025043328096461814, 0.08019494963606244, 9.999999999998899e-05, 0.008410719397912159, 9.999999999998899e-05, 0.04325420976908967, 0.012584048074561593, 0.016459608428190053, 0.011104034890959569, 0.02325896834906105, 0.019202981268348074, 0.022059163740006604, 0.008925630585296163, 0.065918049819093, 0.05001497706764335, 0.007855844529553901, 0.013973916765022798, 0.023388251206964195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05045361196359788, 0.045247764921431344, 0.041696839530885654, 0.034254704982004336, 0.06124834058888806, 0.04290179679293671, 0.048188819215772116, 0.04724432396366007, 0.03400218429358792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006588123978200633, 0.0038126411960096585, 9.999999999998899e-05, 0.002039016241202285, 0.011160285845837836, 0.00961283609186847, 0.012084774954082778, 0.004553142899355378, 9.999999999998899e-05, 0.19593469838610933, 0.22338670176983721, 0.2117117950325781, 0.22022774222846342, 0.2155193197080728, 0.21879457654651513, 0.22474873284891905, 0.25354769311357195, 0.21207051070190464, 0.05887415993849787, 0.04891750568777986, 0.06704871713463656, 0.046893300721319475, 0.055312048294934524, 0.05711227189645374, 0.04965076568475524, 0.04162411486171458, 0.05384828160993271, 0.14869547903475888, 0.1195168158840334, 0.13012893660249758, 0.14025704647718285, 0.14109994866436104, 0.16024771272566907, 0.12971420890714236, 0.12452914813332483, 0.12152339275685631, 0.1734949957094406, 0.16593792786992234, 0.2028314381419717, 0.1845900689028741, 0.17603613110446548, 0.1711452885255732, 0.17443624347977782, 0.1988891729985035, 0.16648116921445266, 0.11980488117803711, 0.13580595019384434, 0.12321681577106214, 0.12056369732452099, 0.1240389334954427, 0.10692550883662932, 0.1206842170731085, 0.11188264703063922, 0.11604094726527969, 0.17277522778457166, 0.15849565247241515, 0.16693635673913287, 0.15967646096258015, 0.16335452747317214, 0.16902201823537322, 0.21028027798350057, 0.1677031136485595, 0.1640640543503541, 0.16209760844015741, 0.13838332272869014, 0.1406756677571409, 0.14930117794930697, 0.14590967342810068, 0.14754252248165578, 0.14535090229132908, 0.1592271292666364, 0.153593348487006, 0.1705117399534538, 0.19448965924017925, 0.17851029477737612, 0.15499551921955101, 0.17608678672319034, 0.14207584695248154, 0.1734561158940885, 0.20065230963251268, 0.14449182454888687, 0.15721801899128118, 0.14330992726035585, 0.14272916383486123, 0.11751043441993136, 0.20568315154553019, 0.2690737286717193, 0.1658269509027498, 0.15359027534057823, 0.1666476382983939, 0.18767448849349122, 0.20422436472286876, 0.1810221121244181, 0.17334095675270278, 0.19617291970667616, 0.17286808195274084, 0.17432494784327524, 0.1689366154250933, 0.18121343009750257, 0.046072453937105684, 0.05260121637960258, 0.06659024916801792, 0.05405152536895752, 0.05588779989221948, 0.06106838437836992, 0.056974371618490616, 0.05798747136755067, 0.05409930801776952]}, "mutation_prompt": null}
{"id": "1e24b667-129f-4b31-bb66-d752b0b280cc", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "DynamicInertiaDEPSO", "description": "Utilizing a dynamic inertia weight to enhance exploration and exploitation balance, thereby improving convergence speed.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.22027472730466258, 0.17810835794520807, 0.205357851968343, 0.21109790533792316, 0.2007390265529343, 0.2224724651595228, 0.18890374387118314, 0.19908741429723475, 0.21235150905275246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036998496544355275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058988781206239405, 0.058162826016164626, 0.05819994101096526, 0.07176358791553994, 0.05019881607155097, 0.05359918380111017, 0.05512035412004024, 0.049257215417671585, 0.0602626014565798, 0.036404240177963954, 0.04233589554969042, 0.0377339363147603, 0.03625659968529216, 0.04141189813488033, 0.04024900122220809, 0.033482772710707986, 0.03576900121000903, 0.02611770918872025, 0.9918243923648012, 0.7257671093089031, 0.36208379522271705, 0.859709020184676, 0.9933911621621321, 0.4781939840132502, 0.6575390790159346, 0.6869602044413677, 0.5647263298041728, 0.0998466462607408, 0.09838967145241184, 0.09593820160094924, 0.08693374376193574, 0.11083603740011172, 0.08888205793178094, 0.11911119081802934, 0.10325236972234275, 0.11073776098313104, 0.17421016463956152, 0.10813509261475118, 0.1175214417807372, 0.1539239405052718, 0.1748837998217856, 0.12901967454193397, 0.1360121010696972, 0.16700654275139282, 0.20048918290198303, 0.025043328096461814, 0.08019494963606244, 9.999999999998899e-05, 0.008410719397912159, 9.999999999998899e-05, 0.04325420976908967, 0.012584048074561593, 0.016459608428190053, 0.011104034890959569, 0.02325896834906105, 0.019202981268348074, 0.022059163740006604, 0.008925630585296163, 0.065918049819093, 0.05001497706764335, 0.007855844529553901, 0.013973916765022798, 0.023388251206964195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05045361196359788, 0.045247764921431344, 0.041696839530885654, 0.034254704982004336, 0.06124834058888806, 0.04290179679293671, 0.048188819215772116, 0.04724432396366007, 0.03400218429358792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006588123978200633, 0.0038126411960096585, 9.999999999998899e-05, 0.002039016241202285, 0.011160285845837836, 0.00961283609186847, 0.012084774954082778, 0.004553142899355378, 9.999999999998899e-05, 0.19593469838610933, 0.22338670176983721, 0.2117117950325781, 0.22022774222846342, 0.2155193197080728, 0.21879457654651513, 0.22474873284891905, 0.25354769311357195, 0.21207051070190464, 0.05887415993849787, 0.04891750568777986, 0.06704871713463656, 0.046893300721319475, 0.055312048294934524, 0.05711227189645374, 0.04965076568475524, 0.04162411486171458, 0.05384828160993271, 0.14869547903475888, 0.1195168158840334, 0.13012893660249758, 0.14025704647718285, 0.14109994866436104, 0.16024771272566907, 0.12971420890714236, 0.12452914813332483, 0.12152339275685631, 0.1734949957094406, 0.16593792786992234, 0.2028314381419717, 0.1845900689028741, 0.17603613110446548, 0.1711452885255732, 0.17443624347977782, 0.1988891729985035, 0.16648116921445266, 0.11980488117803711, 0.13580595019384434, 0.12321681577106214, 0.12056369732452099, 0.1240389334954427, 0.10692550883662932, 0.1206842170731085, 0.11188264703063922, 0.11604094726527969, 0.17277522778457166, 0.15849565247241515, 0.16693635673913287, 0.15967646096258015, 0.16335452747317214, 0.16902201823537322, 0.21028027798350057, 0.1677031136485595, 0.1640640543503541, 0.16209760844015741, 0.13838332272869014, 0.1406756677571409, 0.14930117794930697, 0.14590967342810068, 0.14754252248165578, 0.14535090229132908, 0.1592271292666364, 0.153593348487006, 0.1705117399534538, 0.19448965924017925, 0.17851029477737612, 0.15499551921955101, 0.17608678672319034, 0.14207584695248154, 0.1734561158940885, 0.20065230963251268, 0.14449182454888687, 0.15721801899128118, 0.14330992726035585, 0.14272916383486123, 0.11751043441993136, 0.20568315154553019, 0.2690737286717193, 0.1658269509027498, 0.15359027534057823, 0.1666476382983939, 0.18767448849349122, 0.20422436472286876, 0.1810221121244181, 0.17334095675270278, 0.19617291970667616, 0.17286808195274084, 0.17432494784327524, 0.1689366154250933, 0.18121343009750257, 0.046072453937105684, 0.05260121637960258, 0.06659024916801792, 0.05405152536895752, 0.05588779989221948, 0.06106838437836992, 0.056974371618490616, 0.05798747136755067, 0.05409930801776952]}, "mutation_prompt": null}
{"id": "4633036d-c2b1-48c2-aa8c-618b55509b0e", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "DynamicInertiaDEPSO", "description": "Utilizing a dynamic inertia weight to enhance exploration and exploitation balance, thereby improving convergence speed.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.22027472730466258, 0.17810835794520807, 0.205357851968343, 0.21109790533792316, 0.2007390265529343, 0.2224724651595228, 0.18890374387118314, 0.19908741429723475, 0.21235150905275246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036998496544355275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058988781206239405, 0.058162826016164626, 0.05819994101096526, 0.07176358791553994, 0.05019881607155097, 0.05359918380111017, 0.05512035412004024, 0.049257215417671585, 0.0602626014565798, 0.036404240177963954, 0.04233589554969042, 0.0377339363147603, 0.03625659968529216, 0.04141189813488033, 0.04024900122220809, 0.033482772710707986, 0.03576900121000903, 0.02611770918872025, 0.9918243923648012, 0.7257671093089031, 0.36208379522271705, 0.859709020184676, 0.9933911621621321, 0.4781939840132502, 0.6575390790159346, 0.6869602044413677, 0.5647263298041728, 0.0998466462607408, 0.09838967145241184, 0.09593820160094924, 0.08693374376193574, 0.11083603740011172, 0.08888205793178094, 0.11911119081802934, 0.10325236972234275, 0.11073776098313104, 0.17421016463956152, 0.10813509261475118, 0.1175214417807372, 0.1539239405052718, 0.1748837998217856, 0.12901967454193397, 0.1360121010696972, 0.16700654275139282, 0.20048918290198303, 0.025043328096461814, 0.08019494963606244, 9.999999999998899e-05, 0.008410719397912159, 9.999999999998899e-05, 0.04325420976908967, 0.012584048074561593, 0.016459608428190053, 0.011104034890959569, 0.02325896834906105, 0.019202981268348074, 0.022059163740006604, 0.008925630585296163, 0.065918049819093, 0.05001497706764335, 0.007855844529553901, 0.013973916765022798, 0.023388251206964195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05045361196359788, 0.045247764921431344, 0.041696839530885654, 0.034254704982004336, 0.06124834058888806, 0.04290179679293671, 0.048188819215772116, 0.04724432396366007, 0.03400218429358792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006588123978200633, 0.0038126411960096585, 9.999999999998899e-05, 0.002039016241202285, 0.011160285845837836, 0.00961283609186847, 0.012084774954082778, 0.004553142899355378, 9.999999999998899e-05, 0.19593469838610933, 0.22338670176983721, 0.2117117950325781, 0.22022774222846342, 0.2155193197080728, 0.21879457654651513, 0.22474873284891905, 0.25354769311357195, 0.21207051070190464, 0.05887415993849787, 0.04891750568777986, 0.06704871713463656, 0.046893300721319475, 0.055312048294934524, 0.05711227189645374, 0.04965076568475524, 0.04162411486171458, 0.05384828160993271, 0.14869547903475888, 0.1195168158840334, 0.13012893660249758, 0.14025704647718285, 0.14109994866436104, 0.16024771272566907, 0.12971420890714236, 0.12452914813332483, 0.12152339275685631, 0.1734949957094406, 0.16593792786992234, 0.2028314381419717, 0.1845900689028741, 0.17603613110446548, 0.1711452885255732, 0.17443624347977782, 0.1988891729985035, 0.16648116921445266, 0.11980488117803711, 0.13580595019384434, 0.12321681577106214, 0.12056369732452099, 0.1240389334954427, 0.10692550883662932, 0.1206842170731085, 0.11188264703063922, 0.11604094726527969, 0.17277522778457166, 0.15849565247241515, 0.16693635673913287, 0.15967646096258015, 0.16335452747317214, 0.16902201823537322, 0.21028027798350057, 0.1677031136485595, 0.1640640543503541, 0.16209760844015741, 0.13838332272869014, 0.1406756677571409, 0.14930117794930697, 0.14590967342810068, 0.14754252248165578, 0.14535090229132908, 0.1592271292666364, 0.153593348487006, 0.1705117399534538, 0.19448965924017925, 0.17851029477737612, 0.15499551921955101, 0.17608678672319034, 0.14207584695248154, 0.1734561158940885, 0.20065230963251268, 0.14449182454888687, 0.15721801899128118, 0.14330992726035585, 0.14272916383486123, 0.11751043441993136, 0.20568315154553019, 0.2690737286717193, 0.1658269509027498, 0.15359027534057823, 0.1666476382983939, 0.18767448849349122, 0.20422436472286876, 0.1810221121244181, 0.17334095675270278, 0.19617291970667616, 0.17286808195274084, 0.17432494784327524, 0.1689366154250933, 0.18121343009750257, 0.046072453937105684, 0.05260121637960258, 0.06659024916801792, 0.05405152536895752, 0.05588779989221948, 0.06106838437836992, 0.056974371618490616, 0.05798747136755067, 0.05409930801776952]}, "mutation_prompt": null}
{"id": "f4cfb652-5e88-4d60-9421-27cdbc0c8b13", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "DynamicInertiaDEPSO", "description": "Utilizing a dynamic inertia weight to enhance exploration and exploitation balance, thereby improving convergence speed.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.22027472730466258, 0.17810835794520807, 0.205357851968343, 0.21109790533792316, 0.2007390265529343, 0.2224724651595228, 0.18890374387118314, 0.19908741429723475, 0.21235150905275246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036998496544355275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058988781206239405, 0.058162826016164626, 0.05819994101096526, 0.07176358791553994, 0.05019881607155097, 0.05359918380111017, 0.05512035412004024, 0.049257215417671585, 0.0602626014565798, 0.036404240177963954, 0.04233589554969042, 0.0377339363147603, 0.03625659968529216, 0.04141189813488033, 0.04024900122220809, 0.033482772710707986, 0.03576900121000903, 0.02611770918872025, 0.9918243923648012, 0.7257671093089031, 0.36208379522271705, 0.859709020184676, 0.9933911621621321, 0.4781939840132502, 0.6575390790159346, 0.6869602044413677, 0.5647263298041728, 0.0998466462607408, 0.09838967145241184, 0.09593820160094924, 0.08693374376193574, 0.11083603740011172, 0.08888205793178094, 0.11911119081802934, 0.10325236972234275, 0.11073776098313104, 0.17421016463956152, 0.10813509261475118, 0.1175214417807372, 0.1539239405052718, 0.1748837998217856, 0.12901967454193397, 0.1360121010696972, 0.16700654275139282, 0.20048918290198303, 0.025043328096461814, 0.08019494963606244, 9.999999999998899e-05, 0.008410719397912159, 9.999999999998899e-05, 0.04325420976908967, 0.012584048074561593, 0.016459608428190053, 0.011104034890959569, 0.02325896834906105, 0.019202981268348074, 0.022059163740006604, 0.008925630585296163, 0.065918049819093, 0.05001497706764335, 0.007855844529553901, 0.013973916765022798, 0.023388251206964195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05045361196359788, 0.045247764921431344, 0.041696839530885654, 0.034254704982004336, 0.06124834058888806, 0.04290179679293671, 0.048188819215772116, 0.04724432396366007, 0.03400218429358792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006588123978200633, 0.0038126411960096585, 9.999999999998899e-05, 0.002039016241202285, 0.011160285845837836, 0.00961283609186847, 0.012084774954082778, 0.004553142899355378, 9.999999999998899e-05, 0.19593469838610933, 0.22338670176983721, 0.2117117950325781, 0.22022774222846342, 0.2155193197080728, 0.21879457654651513, 0.22474873284891905, 0.25354769311357195, 0.21207051070190464, 0.05887415993849787, 0.04891750568777986, 0.06704871713463656, 0.046893300721319475, 0.055312048294934524, 0.05711227189645374, 0.04965076568475524, 0.04162411486171458, 0.05384828160993271, 0.14869547903475888, 0.1195168158840334, 0.13012893660249758, 0.14025704647718285, 0.14109994866436104, 0.16024771272566907, 0.12971420890714236, 0.12452914813332483, 0.12152339275685631, 0.1734949957094406, 0.16593792786992234, 0.2028314381419717, 0.1845900689028741, 0.17603613110446548, 0.1711452885255732, 0.17443624347977782, 0.1988891729985035, 0.16648116921445266, 0.11980488117803711, 0.13580595019384434, 0.12321681577106214, 0.12056369732452099, 0.1240389334954427, 0.10692550883662932, 0.1206842170731085, 0.11188264703063922, 0.11604094726527969, 0.17277522778457166, 0.15849565247241515, 0.16693635673913287, 0.15967646096258015, 0.16335452747317214, 0.16902201823537322, 0.21028027798350057, 0.1677031136485595, 0.1640640543503541, 0.16209760844015741, 0.13838332272869014, 0.1406756677571409, 0.14930117794930697, 0.14590967342810068, 0.14754252248165578, 0.14535090229132908, 0.1592271292666364, 0.153593348487006, 0.1705117399534538, 0.19448965924017925, 0.17851029477737612, 0.15499551921955101, 0.17608678672319034, 0.14207584695248154, 0.1734561158940885, 0.20065230963251268, 0.14449182454888687, 0.15721801899128118, 0.14330992726035585, 0.14272916383486123, 0.11751043441993136, 0.20568315154553019, 0.2690737286717193, 0.1658269509027498, 0.15359027534057823, 0.1666476382983939, 0.18767448849349122, 0.20422436472286876, 0.1810221121244181, 0.17334095675270278, 0.19617291970667616, 0.17286808195274084, 0.17432494784327524, 0.1689366154250933, 0.18121343009750257, 0.046072453937105684, 0.05260121637960258, 0.06659024916801792, 0.05405152536895752, 0.05588779989221948, 0.06106838437836992, 0.056974371618490616, 0.05798747136755067, 0.05409930801776952]}, "mutation_prompt": null}
{"id": "52db707a-9085-40cc-8cb1-2fd917a52e73", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "DynamicInertiaDEPSO", "description": "Utilizing a dynamic inertia weight to enhance exploration and exploitation balance, thereby improving convergence speed.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.22027472730466258, 0.17810835794520807, 0.205357851968343, 0.21109790533792316, 0.2007390265529343, 0.2224724651595228, 0.18890374387118314, 0.19908741429723475, 0.21235150905275246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036998496544355275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058988781206239405, 0.058162826016164626, 0.05819994101096526, 0.07176358791553994, 0.05019881607155097, 0.05359918380111017, 0.05512035412004024, 0.049257215417671585, 0.0602626014565798, 0.036404240177963954, 0.04233589554969042, 0.0377339363147603, 0.03625659968529216, 0.04141189813488033, 0.04024900122220809, 0.033482772710707986, 0.03576900121000903, 0.02611770918872025, 0.9918243923648012, 0.7257671093089031, 0.36208379522271705, 0.859709020184676, 0.9933911621621321, 0.4781939840132502, 0.6575390790159346, 0.6869602044413677, 0.5647263298041728, 0.0998466462607408, 0.09838967145241184, 0.09593820160094924, 0.08693374376193574, 0.11083603740011172, 0.08888205793178094, 0.11911119081802934, 0.10325236972234275, 0.11073776098313104, 0.17421016463956152, 0.10813509261475118, 0.1175214417807372, 0.1539239405052718, 0.1748837998217856, 0.12901967454193397, 0.1360121010696972, 0.16700654275139282, 0.20048918290198303, 0.025043328096461814, 0.08019494963606244, 9.999999999998899e-05, 0.008410719397912159, 9.999999999998899e-05, 0.04325420976908967, 0.012584048074561593, 0.016459608428190053, 0.011104034890959569, 0.02325896834906105, 0.019202981268348074, 0.022059163740006604, 0.008925630585296163, 0.065918049819093, 0.05001497706764335, 0.007855844529553901, 0.013973916765022798, 0.023388251206964195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05045361196359788, 0.045247764921431344, 0.041696839530885654, 0.034254704982004336, 0.06124834058888806, 0.04290179679293671, 0.048188819215772116, 0.04724432396366007, 0.03400218429358792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006588123978200633, 0.0038126411960096585, 9.999999999998899e-05, 0.002039016241202285, 0.011160285845837836, 0.00961283609186847, 0.012084774954082778, 0.004553142899355378, 9.999999999998899e-05, 0.19593469838610933, 0.22338670176983721, 0.2117117950325781, 0.22022774222846342, 0.2155193197080728, 0.21879457654651513, 0.22474873284891905, 0.25354769311357195, 0.21207051070190464, 0.05887415993849787, 0.04891750568777986, 0.06704871713463656, 0.046893300721319475, 0.055312048294934524, 0.05711227189645374, 0.04965076568475524, 0.04162411486171458, 0.05384828160993271, 0.14869547903475888, 0.1195168158840334, 0.13012893660249758, 0.14025704647718285, 0.14109994866436104, 0.16024771272566907, 0.12971420890714236, 0.12452914813332483, 0.12152339275685631, 0.1734949957094406, 0.16593792786992234, 0.2028314381419717, 0.1845900689028741, 0.17603613110446548, 0.1711452885255732, 0.17443624347977782, 0.1988891729985035, 0.16648116921445266, 0.11980488117803711, 0.13580595019384434, 0.12321681577106214, 0.12056369732452099, 0.1240389334954427, 0.10692550883662932, 0.1206842170731085, 0.11188264703063922, 0.11604094726527969, 0.17277522778457166, 0.15849565247241515, 0.16693635673913287, 0.15967646096258015, 0.16335452747317214, 0.16902201823537322, 0.21028027798350057, 0.1677031136485595, 0.1640640543503541, 0.16209760844015741, 0.13838332272869014, 0.1406756677571409, 0.14930117794930697, 0.14590967342810068, 0.14754252248165578, 0.14535090229132908, 0.1592271292666364, 0.153593348487006, 0.1705117399534538, 0.19448965924017925, 0.17851029477737612, 0.15499551921955101, 0.17608678672319034, 0.14207584695248154, 0.1734561158940885, 0.20065230963251268, 0.14449182454888687, 0.15721801899128118, 0.14330992726035585, 0.14272916383486123, 0.11751043441993136, 0.20568315154553019, 0.2690737286717193, 0.1658269509027498, 0.15359027534057823, 0.1666476382983939, 0.18767448849349122, 0.20422436472286876, 0.1810221121244181, 0.17334095675270278, 0.19617291970667616, 0.17286808195274084, 0.17432494784327524, 0.1689366154250933, 0.18121343009750257, 0.046072453937105684, 0.05260121637960258, 0.06659024916801792, 0.05405152536895752, 0.05588779989221948, 0.06106838437836992, 0.056974371618490616, 0.05798747136755067, 0.05409930801776952]}, "mutation_prompt": null}
{"id": "4bad2099-10ce-4a16-b0d3-a92c50aeb51e", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "DynamicInertiaDEPSO", "description": "Utilizing a dynamic inertia weight to enhance exploration and exploitation balance, thereby improving convergence speed.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.22027472730466258, 0.17810835794520807, 0.205357851968343, 0.21109790533792316, 0.2007390265529343, 0.2224724651595228, 0.18890374387118314, 0.19908741429723475, 0.21235150905275246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036998496544355275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058988781206239405, 0.058162826016164626, 0.05819994101096526, 0.07176358791553994, 0.05019881607155097, 0.05359918380111017, 0.05512035412004024, 0.049257215417671585, 0.0602626014565798, 0.036404240177963954, 0.04233589554969042, 0.0377339363147603, 0.03625659968529216, 0.04141189813488033, 0.04024900122220809, 0.033482772710707986, 0.03576900121000903, 0.02611770918872025, 0.9918243923648012, 0.7257671093089031, 0.36208379522271705, 0.859709020184676, 0.9933911621621321, 0.4781939840132502, 0.6575390790159346, 0.6869602044413677, 0.5647263298041728, 0.0998466462607408, 0.09838967145241184, 0.09593820160094924, 0.08693374376193574, 0.11083603740011172, 0.08888205793178094, 0.11911119081802934, 0.10325236972234275, 0.11073776098313104, 0.17421016463956152, 0.10813509261475118, 0.1175214417807372, 0.1539239405052718, 0.1748837998217856, 0.12901967454193397, 0.1360121010696972, 0.16700654275139282, 0.20048918290198303, 0.025043328096461814, 0.08019494963606244, 9.999999999998899e-05, 0.008410719397912159, 9.999999999998899e-05, 0.04325420976908967, 0.012584048074561593, 0.016459608428190053, 0.011104034890959569, 0.02325896834906105, 0.019202981268348074, 0.022059163740006604, 0.008925630585296163, 0.065918049819093, 0.05001497706764335, 0.007855844529553901, 0.013973916765022798, 0.023388251206964195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05045361196359788, 0.045247764921431344, 0.041696839530885654, 0.034254704982004336, 0.06124834058888806, 0.04290179679293671, 0.048188819215772116, 0.04724432396366007, 0.03400218429358792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006588123978200633, 0.0038126411960096585, 9.999999999998899e-05, 0.002039016241202285, 0.011160285845837836, 0.00961283609186847, 0.012084774954082778, 0.004553142899355378, 9.999999999998899e-05, 0.19593469838610933, 0.22338670176983721, 0.2117117950325781, 0.22022774222846342, 0.2155193197080728, 0.21879457654651513, 0.22474873284891905, 0.25354769311357195, 0.21207051070190464, 0.05887415993849787, 0.04891750568777986, 0.06704871713463656, 0.046893300721319475, 0.055312048294934524, 0.05711227189645374, 0.04965076568475524, 0.04162411486171458, 0.05384828160993271, 0.14869547903475888, 0.1195168158840334, 0.13012893660249758, 0.14025704647718285, 0.14109994866436104, 0.16024771272566907, 0.12971420890714236, 0.12452914813332483, 0.12152339275685631, 0.1734949957094406, 0.16593792786992234, 0.2028314381419717, 0.1845900689028741, 0.17603613110446548, 0.1711452885255732, 0.17443624347977782, 0.1988891729985035, 0.16648116921445266, 0.11980488117803711, 0.13580595019384434, 0.12321681577106214, 0.12056369732452099, 0.1240389334954427, 0.10692550883662932, 0.1206842170731085, 0.11188264703063922, 0.11604094726527969, 0.17277522778457166, 0.15849565247241515, 0.16693635673913287, 0.15967646096258015, 0.16335452747317214, 0.16902201823537322, 0.21028027798350057, 0.1677031136485595, 0.1640640543503541, 0.16209760844015741, 0.13838332272869014, 0.1406756677571409, 0.14930117794930697, 0.14590967342810068, 0.14754252248165578, 0.14535090229132908, 0.1592271292666364, 0.153593348487006, 0.1705117399534538, 0.19448965924017925, 0.17851029477737612, 0.15499551921955101, 0.17608678672319034, 0.14207584695248154, 0.1734561158940885, 0.20065230963251268, 0.14449182454888687, 0.15721801899128118, 0.14330992726035585, 0.14272916383486123, 0.11751043441993136, 0.20568315154553019, 0.2690737286717193, 0.1658269509027498, 0.15359027534057823, 0.1666476382983939, 0.18767448849349122, 0.20422436472286876, 0.1810221121244181, 0.17334095675270278, 0.19617291970667616, 0.17286808195274084, 0.17432494784327524, 0.1689366154250933, 0.18121343009750257, 0.046072453937105684, 0.05260121637960258, 0.06659024916801792, 0.05405152536895752, 0.05588779989221948, 0.06106838437836992, 0.056974371618490616, 0.05798747136755067, 0.05409930801776952]}, "mutation_prompt": null}
{"id": "9e8eed7a-edfa-4241-bf03-ecc452378c1c", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "DynamicInertiaDEPSO", "description": "Utilizing a dynamic inertia weight to enhance exploration and exploitation balance, thereby improving convergence speed.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.22027472730466258, 0.17810835794520807, 0.205357851968343, 0.21109790533792316, 0.2007390265529343, 0.2224724651595228, 0.18890374387118314, 0.19908741429723475, 0.21235150905275246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036998496544355275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058988781206239405, 0.058162826016164626, 0.05819994101096526, 0.07176358791553994, 0.05019881607155097, 0.05359918380111017, 0.05512035412004024, 0.049257215417671585, 0.0602626014565798, 0.036404240177963954, 0.04233589554969042, 0.0377339363147603, 0.03625659968529216, 0.04141189813488033, 0.04024900122220809, 0.033482772710707986, 0.03576900121000903, 0.02611770918872025, 0.9918243923648012, 0.7257671093089031, 0.36208379522271705, 0.859709020184676, 0.9933911621621321, 0.4781939840132502, 0.6575390790159346, 0.6869602044413677, 0.5647263298041728, 0.0998466462607408, 0.09838967145241184, 0.09593820160094924, 0.08693374376193574, 0.11083603740011172, 0.08888205793178094, 0.11911119081802934, 0.10325236972234275, 0.11073776098313104, 0.17421016463956152, 0.10813509261475118, 0.1175214417807372, 0.1539239405052718, 0.1748837998217856, 0.12901967454193397, 0.1360121010696972, 0.16700654275139282, 0.20048918290198303, 0.025043328096461814, 0.08019494963606244, 9.999999999998899e-05, 0.008410719397912159, 9.999999999998899e-05, 0.04325420976908967, 0.012584048074561593, 0.016459608428190053, 0.011104034890959569, 0.02325896834906105, 0.019202981268348074, 0.022059163740006604, 0.008925630585296163, 0.065918049819093, 0.05001497706764335, 0.007855844529553901, 0.013973916765022798, 0.023388251206964195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05045361196359788, 0.045247764921431344, 0.041696839530885654, 0.034254704982004336, 0.06124834058888806, 0.04290179679293671, 0.048188819215772116, 0.04724432396366007, 0.03400218429358792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006588123978200633, 0.0038126411960096585, 9.999999999998899e-05, 0.002039016241202285, 0.011160285845837836, 0.00961283609186847, 0.012084774954082778, 0.004553142899355378, 9.999999999998899e-05, 0.19593469838610933, 0.22338670176983721, 0.2117117950325781, 0.22022774222846342, 0.2155193197080728, 0.21879457654651513, 0.22474873284891905, 0.25354769311357195, 0.21207051070190464, 0.05887415993849787, 0.04891750568777986, 0.06704871713463656, 0.046893300721319475, 0.055312048294934524, 0.05711227189645374, 0.04965076568475524, 0.04162411486171458, 0.05384828160993271, 0.14869547903475888, 0.1195168158840334, 0.13012893660249758, 0.14025704647718285, 0.14109994866436104, 0.16024771272566907, 0.12971420890714236, 0.12452914813332483, 0.12152339275685631, 0.1734949957094406, 0.16593792786992234, 0.2028314381419717, 0.1845900689028741, 0.17603613110446548, 0.1711452885255732, 0.17443624347977782, 0.1988891729985035, 0.16648116921445266, 0.11980488117803711, 0.13580595019384434, 0.12321681577106214, 0.12056369732452099, 0.1240389334954427, 0.10692550883662932, 0.1206842170731085, 0.11188264703063922, 0.11604094726527969, 0.17277522778457166, 0.15849565247241515, 0.16693635673913287, 0.15967646096258015, 0.16335452747317214, 0.16902201823537322, 0.21028027798350057, 0.1677031136485595, 0.1640640543503541, 0.16209760844015741, 0.13838332272869014, 0.1406756677571409, 0.14930117794930697, 0.14590967342810068, 0.14754252248165578, 0.14535090229132908, 0.1592271292666364, 0.153593348487006, 0.1705117399534538, 0.19448965924017925, 0.17851029477737612, 0.15499551921955101, 0.17608678672319034, 0.14207584695248154, 0.1734561158940885, 0.20065230963251268, 0.14449182454888687, 0.15721801899128118, 0.14330992726035585, 0.14272916383486123, 0.11751043441993136, 0.20568315154553019, 0.2690737286717193, 0.1658269509027498, 0.15359027534057823, 0.1666476382983939, 0.18767448849349122, 0.20422436472286876, 0.1810221121244181, 0.17334095675270278, 0.19617291970667616, 0.17286808195274084, 0.17432494784327524, 0.1689366154250933, 0.18121343009750257, 0.046072453937105684, 0.05260121637960258, 0.06659024916801792, 0.05405152536895752, 0.05588779989221948, 0.06106838437836992, 0.056974371618490616, 0.05798747136755067, 0.05409930801776952]}, "mutation_prompt": null}
{"id": "5fb850e5-b659-4f70-a346-543307e0602b", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "DynamicInertiaDEPSO", "description": "Utilizing a dynamic inertia weight to enhance exploration and exploitation balance, thereby improving convergence speed.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.22027472730466258, 0.17810835794520807, 0.205357851968343, 0.21109790533792316, 0.2007390265529343, 0.2224724651595228, 0.18890374387118314, 0.19908741429723475, 0.21235150905275246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036998496544355275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058988781206239405, 0.058162826016164626, 0.05819994101096526, 0.07176358791553994, 0.05019881607155097, 0.05359918380111017, 0.05512035412004024, 0.049257215417671585, 0.0602626014565798, 0.036404240177963954, 0.04233589554969042, 0.0377339363147603, 0.03625659968529216, 0.04141189813488033, 0.04024900122220809, 0.033482772710707986, 0.03576900121000903, 0.02611770918872025, 0.9918243923648012, 0.7257671093089031, 0.36208379522271705, 0.859709020184676, 0.9933911621621321, 0.4781939840132502, 0.6575390790159346, 0.6869602044413677, 0.5647263298041728, 0.0998466462607408, 0.09838967145241184, 0.09593820160094924, 0.08693374376193574, 0.11083603740011172, 0.08888205793178094, 0.11911119081802934, 0.10325236972234275, 0.11073776098313104, 0.17421016463956152, 0.10813509261475118, 0.1175214417807372, 0.1539239405052718, 0.1748837998217856, 0.12901967454193397, 0.1360121010696972, 0.16700654275139282, 0.20048918290198303, 0.025043328096461814, 0.08019494963606244, 9.999999999998899e-05, 0.008410719397912159, 9.999999999998899e-05, 0.04325420976908967, 0.012584048074561593, 0.016459608428190053, 0.011104034890959569, 0.02325896834906105, 0.019202981268348074, 0.022059163740006604, 0.008925630585296163, 0.065918049819093, 0.05001497706764335, 0.007855844529553901, 0.013973916765022798, 0.023388251206964195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05045361196359788, 0.045247764921431344, 0.041696839530885654, 0.034254704982004336, 0.06124834058888806, 0.04290179679293671, 0.048188819215772116, 0.04724432396366007, 0.03400218429358792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006588123978200633, 0.0038126411960096585, 9.999999999998899e-05, 0.002039016241202285, 0.011160285845837836, 0.00961283609186847, 0.012084774954082778, 0.004553142899355378, 9.999999999998899e-05, 0.19593469838610933, 0.22338670176983721, 0.2117117950325781, 0.22022774222846342, 0.2155193197080728, 0.21879457654651513, 0.22474873284891905, 0.25354769311357195, 0.21207051070190464, 0.05887415993849787, 0.04891750568777986, 0.06704871713463656, 0.046893300721319475, 0.055312048294934524, 0.05711227189645374, 0.04965076568475524, 0.04162411486171458, 0.05384828160993271, 0.14869547903475888, 0.1195168158840334, 0.13012893660249758, 0.14025704647718285, 0.14109994866436104, 0.16024771272566907, 0.12971420890714236, 0.12452914813332483, 0.12152339275685631, 0.1734949957094406, 0.16593792786992234, 0.2028314381419717, 0.1845900689028741, 0.17603613110446548, 0.1711452885255732, 0.17443624347977782, 0.1988891729985035, 0.16648116921445266, 0.11980488117803711, 0.13580595019384434, 0.12321681577106214, 0.12056369732452099, 0.1240389334954427, 0.10692550883662932, 0.1206842170731085, 0.11188264703063922, 0.11604094726527969, 0.17277522778457166, 0.15849565247241515, 0.16693635673913287, 0.15967646096258015, 0.16335452747317214, 0.16902201823537322, 0.21028027798350057, 0.1677031136485595, 0.1640640543503541, 0.16209760844015741, 0.13838332272869014, 0.1406756677571409, 0.14930117794930697, 0.14590967342810068, 0.14754252248165578, 0.14535090229132908, 0.1592271292666364, 0.153593348487006, 0.1705117399534538, 0.19448965924017925, 0.17851029477737612, 0.15499551921955101, 0.17608678672319034, 0.14207584695248154, 0.1734561158940885, 0.20065230963251268, 0.14449182454888687, 0.15721801899128118, 0.14330992726035585, 0.14272916383486123, 0.11751043441993136, 0.20568315154553019, 0.2690737286717193, 0.1658269509027498, 0.15359027534057823, 0.1666476382983939, 0.18767448849349122, 0.20422436472286876, 0.1810221121244181, 0.17334095675270278, 0.19617291970667616, 0.17286808195274084, 0.17432494784327524, 0.1689366154250933, 0.18121343009750257, 0.046072453937105684, 0.05260121637960258, 0.06659024916801792, 0.05405152536895752, 0.05588779989221948, 0.06106838437836992, 0.056974371618490616, 0.05798747136755067, 0.05409930801776952]}, "mutation_prompt": null}
{"id": "1518e994-18e7-45be-93c0-559346fea29a", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "DynamicInertiaDEPSO", "description": "Utilizing a dynamic inertia weight to enhance exploration and exploitation balance, thereby improving convergence speed.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.22027472730466258, 0.17810835794520807, 0.205357851968343, 0.21109790533792316, 0.2007390265529343, 0.2224724651595228, 0.18890374387118314, 0.19908741429723475, 0.21235150905275246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036998496544355275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058988781206239405, 0.058162826016164626, 0.05819994101096526, 0.07176358791553994, 0.05019881607155097, 0.05359918380111017, 0.05512035412004024, 0.049257215417671585, 0.0602626014565798, 0.036404240177963954, 0.04233589554969042, 0.0377339363147603, 0.03625659968529216, 0.04141189813488033, 0.04024900122220809, 0.033482772710707986, 0.03576900121000903, 0.02611770918872025, 0.9918243923648012, 0.7257671093089031, 0.36208379522271705, 0.859709020184676, 0.9933911621621321, 0.4781939840132502, 0.6575390790159346, 0.6869602044413677, 0.5647263298041728, 0.0998466462607408, 0.09838967145241184, 0.09593820160094924, 0.08693374376193574, 0.11083603740011172, 0.08888205793178094, 0.11911119081802934, 0.10325236972234275, 0.11073776098313104, 0.17421016463956152, 0.10813509261475118, 0.1175214417807372, 0.1539239405052718, 0.1748837998217856, 0.12901967454193397, 0.1360121010696972, 0.16700654275139282, 0.20048918290198303, 0.025043328096461814, 0.08019494963606244, 9.999999999998899e-05, 0.008410719397912159, 9.999999999998899e-05, 0.04325420976908967, 0.012584048074561593, 0.016459608428190053, 0.011104034890959569, 0.02325896834906105, 0.019202981268348074, 0.022059163740006604, 0.008925630585296163, 0.065918049819093, 0.05001497706764335, 0.007855844529553901, 0.013973916765022798, 0.023388251206964195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05045361196359788, 0.045247764921431344, 0.041696839530885654, 0.034254704982004336, 0.06124834058888806, 0.04290179679293671, 0.048188819215772116, 0.04724432396366007, 0.03400218429358792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006588123978200633, 0.0038126411960096585, 9.999999999998899e-05, 0.002039016241202285, 0.011160285845837836, 0.00961283609186847, 0.012084774954082778, 0.004553142899355378, 9.999999999998899e-05, 0.19593469838610933, 0.22338670176983721, 0.2117117950325781, 0.22022774222846342, 0.2155193197080728, 0.21879457654651513, 0.22474873284891905, 0.25354769311357195, 0.21207051070190464, 0.05887415993849787, 0.04891750568777986, 0.06704871713463656, 0.046893300721319475, 0.055312048294934524, 0.05711227189645374, 0.04965076568475524, 0.04162411486171458, 0.05384828160993271, 0.14869547903475888, 0.1195168158840334, 0.13012893660249758, 0.14025704647718285, 0.14109994866436104, 0.16024771272566907, 0.12971420890714236, 0.12452914813332483, 0.12152339275685631, 0.1734949957094406, 0.16593792786992234, 0.2028314381419717, 0.1845900689028741, 0.17603613110446548, 0.1711452885255732, 0.17443624347977782, 0.1988891729985035, 0.16648116921445266, 0.11980488117803711, 0.13580595019384434, 0.12321681577106214, 0.12056369732452099, 0.1240389334954427, 0.10692550883662932, 0.1206842170731085, 0.11188264703063922, 0.11604094726527969, 0.17277522778457166, 0.15849565247241515, 0.16693635673913287, 0.15967646096258015, 0.16335452747317214, 0.16902201823537322, 0.21028027798350057, 0.1677031136485595, 0.1640640543503541, 0.16209760844015741, 0.13838332272869014, 0.1406756677571409, 0.14930117794930697, 0.14590967342810068, 0.14754252248165578, 0.14535090229132908, 0.1592271292666364, 0.153593348487006, 0.1705117399534538, 0.19448965924017925, 0.17851029477737612, 0.15499551921955101, 0.17608678672319034, 0.14207584695248154, 0.1734561158940885, 0.20065230963251268, 0.14449182454888687, 0.15721801899128118, 0.14330992726035585, 0.14272916383486123, 0.11751043441993136, 0.20568315154553019, 0.2690737286717193, 0.1658269509027498, 0.15359027534057823, 0.1666476382983939, 0.18767448849349122, 0.20422436472286876, 0.1810221121244181, 0.17334095675270278, 0.19617291970667616, 0.17286808195274084, 0.17432494784327524, 0.1689366154250933, 0.18121343009750257, 0.046072453937105684, 0.05260121637960258, 0.06659024916801792, 0.05405152536895752, 0.05588779989221948, 0.06106838437836992, 0.056974371618490616, 0.05798747136755067, 0.05409930801776952]}, "mutation_prompt": null}
{"id": "688bd8f4-b1d8-4460-9629-3ba6a08398a9", "solution": "import numpy as np\n\nclass AdaptiveControlDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f_min = 0.4\n        self.f_max = 0.9\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            f = self.f_min + (_ / (self.budget - self.population_size)) * (self.f_max - self.f_min)\n\n            mutant = within_bounds(xr1 + f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "AdaptiveControlDEPSO", "description": "Introducing a novel variant of DEPSO with adaptive control over mutation strategy to enhance exploration and exploitation, leading to faster convergence.", "configspace": "", "generation": 18, "fitness": 0.12209719493097644, "feedback": "The algorithm AdaptiveControlDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.14.", "error": "", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.1870494653902427, 0.20142364790762735, 0.18705102297984033, 0.20079625378953658, 0.19843740828351975, 0.2158275756279251, 0.20622389008995312, 0.2041163794033135, 0.20020961234285084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04809783555704694, 0.04980355043238072, 0.05108740720127558, 0.05836061264530712, 0.06819528963282684, 0.05584428830345367, 0.05314782567394283, 0.06892164495769537, 0.05125465040444266, 0.03643598385226521, 0.04119859422364802, 0.041566679487850866, 0.04026867643046228, 0.034300316476872594, 0.03821486671585339, 0.03145452520054948, 0.03653660184367569, 0.04213649701648681, 0.9918185508056392, 0.3204967245247249, 0.732830308796725, 0.6395278478252666, 0.9933927227754983, 0.5375498897173301, 0.9322324706616152, 0.49508511086572393, 0.3617232210201663, 0.08945689435682402, 0.0856760357418932, 0.06962906745073982, 0.08530181454647245, 0.11075110242910957, 0.08506737475341253, 0.10927403047443163, 0.08950496553726739, 0.1008795869852569, 0.1626368027589069, 0.17349160213758918, 0.12398643285453215, 0.17181314114706492, 0.1654786786315975, 0.13923578872072218, 0.1433751308359088, 0.14246691032719172, 0.1431063954961841, 0.015175842077938428, 0.0029536341411682265, 0.013001784678035033, 0.019968112935973115, 0.023980103991778412, 0.015450005349082696, 0.05987801611032717, 9.999999999998899e-05, 0.03957658496962069, 0.0007573708595848272, 0.02776198302833166, 0.042357343991473284, 0.001929991570961076, 0.021855331925130672, 0.03141566129313067, 0.04463926081580105, 0.027860225761899726, 0.023598486350018377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03723077832900945, 0.07662902318525722, 0.032655578092952275, 0.03581664971360443, 0.033824387609672324, 0.06662111055374476, 0.06717679533738041, 0.04331441931303037, 0.035058775250724095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007388749181521548, 0.01906792269957569, 0.0040780552214362276, 0.021231146465311213, 0.010474325565724585, 0.004859942654235394, 9.999999999998899e-05, 0.03575539409773831, 0.19856384195122678, 0.20171163172188045, 0.21455225711758974, 0.2554338543625161, 0.21496152327593643, 0.20223162539308737, 0.206853569578078, 0.2588266970078533, 0.23679203107117386, 0.05630990718617779, 0.06423757999727098, 0.059918967104160004, 0.046576352162512547, 0.049269223239730486, 0.04659937784853663, 0.05254648854020394, 0.04907989691421788, 0.04774352848969521, 0.13695622441486754, 0.13653843776925167, 0.11983581052946957, 0.13490016227223478, 0.12762439994372488, 0.1252944628402083, 0.13457527306263195, 0.12328834649670584, 0.13135637495523567, 0.18161142555092435, 0.18142484307542617, 0.1906085499688377, 0.19401443860721423, 0.15852698167196777, 0.20590894330961196, 0.1691088227783908, 0.18678733383207913, 0.18215316399214654, 0.13016750229252316, 0.10784084886454692, 0.1373483453790163, 0.1320815655239529, 0.13493311898197968, 0.12713963074243462, 0.13066294122996225, 0.13490278047736814, 0.13053881413137047, 0.15784983317340207, 0.15401529456564644, 0.17054210737796216, 0.18338420429246816, 0.179147834184055, 0.16115874567293098, 0.1573163995924891, 0.16527256429105108, 0.16659626890247126, 0.1568788365834456, 0.14624171842561096, 0.14136776301621834, 0.16022910535043466, 0.16873057914173895, 0.14355615092931073, 0.13646420032204865, 0.14837632646809074, 0.1566072970596626, 0.16211005317705474, 0.1573244982553078, 0.16927111278173834, 0.15615834085841018, 0.2399832061156576, 0.16670251016000603, 0.13674430556602746, 0.16965872842690244, 0.1574708590206898, 0.20090630162174206, 0.16111460932109256, 0.13137998989434818, 0.14004415563847394, 0.1662707560122042, 0.14320066827416833, 0.33640612688172955, 0.1538547084084101, 0.147590377220031, 0.18704902027177517, 0.2059935900257509, 0.18765726017882767, 0.17558268687411016, 0.17787640198215338, 0.1881712022116726, 0.1811902177889011, 0.2010601913694955, 0.18243468067590485, 0.04963047995618053, 0.046380020553182466, 0.05465770972022033, 0.05189710657417923, 0.056609189902174006, 0.05126644372500322, 0.06409335807255356, 0.07827804245383463, 0.04480957294621635]}, "mutation_prompt": null}
{"id": "192dc4b9-68c6-4d24-8920-04dcfcee0fce", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "DynamicInertiaDEPSO", "description": "Utilizing a dynamic inertia weight to enhance exploration and exploitation balance, thereby improving convergence speed.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.22027472730466258, 0.17810835794520807, 0.205357851968343, 0.21109790533792316, 0.2007390265529343, 0.2224724651595228, 0.18890374387118314, 0.19908741429723475, 0.21235150905275246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036998496544355275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058988781206239405, 0.058162826016164626, 0.05819994101096526, 0.07176358791553994, 0.05019881607155097, 0.05359918380111017, 0.05512035412004024, 0.049257215417671585, 0.0602626014565798, 0.036404240177963954, 0.04233589554969042, 0.0377339363147603, 0.03625659968529216, 0.04141189813488033, 0.04024900122220809, 0.033482772710707986, 0.03576900121000903, 0.02611770918872025, 0.9918243923648012, 0.7257671093089031, 0.36208379522271705, 0.859709020184676, 0.9933911621621321, 0.4781939840132502, 0.6575390790159346, 0.6869602044413677, 0.5647263298041728, 0.0998466462607408, 0.09838967145241184, 0.09593820160094924, 0.08693374376193574, 0.11083603740011172, 0.08888205793178094, 0.11911119081802934, 0.10325236972234275, 0.11073776098313104, 0.17421016463956152, 0.10813509261475118, 0.1175214417807372, 0.1539239405052718, 0.1748837998217856, 0.12901967454193397, 0.1360121010696972, 0.16700654275139282, 0.20048918290198303, 0.025043328096461814, 0.08019494963606244, 9.999999999998899e-05, 0.008410719397912159, 9.999999999998899e-05, 0.04325420976908967, 0.012584048074561593, 0.016459608428190053, 0.011104034890959569, 0.02325896834906105, 0.019202981268348074, 0.022059163740006604, 0.008925630585296163, 0.065918049819093, 0.05001497706764335, 0.007855844529553901, 0.013973916765022798, 0.023388251206964195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05045361196359788, 0.045247764921431344, 0.041696839530885654, 0.034254704982004336, 0.06124834058888806, 0.04290179679293671, 0.048188819215772116, 0.04724432396366007, 0.03400218429358792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006588123978200633, 0.0038126411960096585, 9.999999999998899e-05, 0.002039016241202285, 0.011160285845837836, 0.00961283609186847, 0.012084774954082778, 0.004553142899355378, 9.999999999998899e-05, 0.19593469838610933, 0.22338670176983721, 0.2117117950325781, 0.22022774222846342, 0.2155193197080728, 0.21879457654651513, 0.22474873284891905, 0.25354769311357195, 0.21207051070190464, 0.05887415993849787, 0.04891750568777986, 0.06704871713463656, 0.046893300721319475, 0.055312048294934524, 0.05711227189645374, 0.04965076568475524, 0.04162411486171458, 0.05384828160993271, 0.14869547903475888, 0.1195168158840334, 0.13012893660249758, 0.14025704647718285, 0.14109994866436104, 0.16024771272566907, 0.12971420890714236, 0.12452914813332483, 0.12152339275685631, 0.1734949957094406, 0.16593792786992234, 0.2028314381419717, 0.1845900689028741, 0.17603613110446548, 0.1711452885255732, 0.17443624347977782, 0.1988891729985035, 0.16648116921445266, 0.11980488117803711, 0.13580595019384434, 0.12321681577106214, 0.12056369732452099, 0.1240389334954427, 0.10692550883662932, 0.1206842170731085, 0.11188264703063922, 0.11604094726527969, 0.17277522778457166, 0.15849565247241515, 0.16693635673913287, 0.15967646096258015, 0.16335452747317214, 0.16902201823537322, 0.21028027798350057, 0.1677031136485595, 0.1640640543503541, 0.16209760844015741, 0.13838332272869014, 0.1406756677571409, 0.14930117794930697, 0.14590967342810068, 0.14754252248165578, 0.14535090229132908, 0.1592271292666364, 0.153593348487006, 0.1705117399534538, 0.19448965924017925, 0.17851029477737612, 0.15499551921955101, 0.17608678672319034, 0.14207584695248154, 0.1734561158940885, 0.20065230963251268, 0.14449182454888687, 0.15721801899128118, 0.14330992726035585, 0.14272916383486123, 0.11751043441993136, 0.20568315154553019, 0.2690737286717193, 0.1658269509027498, 0.15359027534057823, 0.1666476382983939, 0.18767448849349122, 0.20422436472286876, 0.1810221121244181, 0.17334095675270278, 0.19617291970667616, 0.17286808195274084, 0.17432494784327524, 0.1689366154250933, 0.18121343009750257, 0.046072453937105684, 0.05260121637960258, 0.06659024916801792, 0.05405152536895752, 0.05588779989221948, 0.06106838437836992, 0.056974371618490616, 0.05798747136755067, 0.05409930801776952]}, "mutation_prompt": null}
{"id": "8be201fe-0b3b-4bf4-bf10-2357cfba0b8b", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "DynamicInertiaDEPSO", "description": "Utilizing a dynamic inertia weight to enhance exploration and exploitation balance, thereby improving convergence speed.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.22027472730466258, 0.17810835794520807, 0.205357851968343, 0.21109790533792316, 0.2007390265529343, 0.2224724651595228, 0.18890374387118314, 0.19908741429723475, 0.21235150905275246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036998496544355275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058988781206239405, 0.058162826016164626, 0.05819994101096526, 0.07176358791553994, 0.05019881607155097, 0.05359918380111017, 0.05512035412004024, 0.049257215417671585, 0.0602626014565798, 0.036404240177963954, 0.04233589554969042, 0.0377339363147603, 0.03625659968529216, 0.04141189813488033, 0.04024900122220809, 0.033482772710707986, 0.03576900121000903, 0.02611770918872025, 0.9918243923648012, 0.7257671093089031, 0.36208379522271705, 0.859709020184676, 0.9933911621621321, 0.4781939840132502, 0.6575390790159346, 0.6869602044413677, 0.5647263298041728, 0.0998466462607408, 0.09838967145241184, 0.09593820160094924, 0.08693374376193574, 0.11083603740011172, 0.08888205793178094, 0.11911119081802934, 0.10325236972234275, 0.11073776098313104, 0.17421016463956152, 0.10813509261475118, 0.1175214417807372, 0.1539239405052718, 0.1748837998217856, 0.12901967454193397, 0.1360121010696972, 0.16700654275139282, 0.20048918290198303, 0.025043328096461814, 0.08019494963606244, 9.999999999998899e-05, 0.008410719397912159, 9.999999999998899e-05, 0.04325420976908967, 0.012584048074561593, 0.016459608428190053, 0.011104034890959569, 0.02325896834906105, 0.019202981268348074, 0.022059163740006604, 0.008925630585296163, 0.065918049819093, 0.05001497706764335, 0.007855844529553901, 0.013973916765022798, 0.023388251206964195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05045361196359788, 0.045247764921431344, 0.041696839530885654, 0.034254704982004336, 0.06124834058888806, 0.04290179679293671, 0.048188819215772116, 0.04724432396366007, 0.03400218429358792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006588123978200633, 0.0038126411960096585, 9.999999999998899e-05, 0.002039016241202285, 0.011160285845837836, 0.00961283609186847, 0.012084774954082778, 0.004553142899355378, 9.999999999998899e-05, 0.19593469838610933, 0.22338670176983721, 0.2117117950325781, 0.22022774222846342, 0.2155193197080728, 0.21879457654651513, 0.22474873284891905, 0.25354769311357195, 0.21207051070190464, 0.05887415993849787, 0.04891750568777986, 0.06704871713463656, 0.046893300721319475, 0.055312048294934524, 0.05711227189645374, 0.04965076568475524, 0.04162411486171458, 0.05384828160993271, 0.14869547903475888, 0.1195168158840334, 0.13012893660249758, 0.14025704647718285, 0.14109994866436104, 0.16024771272566907, 0.12971420890714236, 0.12452914813332483, 0.12152339275685631, 0.1734949957094406, 0.16593792786992234, 0.2028314381419717, 0.1845900689028741, 0.17603613110446548, 0.1711452885255732, 0.17443624347977782, 0.1988891729985035, 0.16648116921445266, 0.11980488117803711, 0.13580595019384434, 0.12321681577106214, 0.12056369732452099, 0.1240389334954427, 0.10692550883662932, 0.1206842170731085, 0.11188264703063922, 0.11604094726527969, 0.17277522778457166, 0.15849565247241515, 0.16693635673913287, 0.15967646096258015, 0.16335452747317214, 0.16902201823537322, 0.21028027798350057, 0.1677031136485595, 0.1640640543503541, 0.16209760844015741, 0.13838332272869014, 0.1406756677571409, 0.14930117794930697, 0.14590967342810068, 0.14754252248165578, 0.14535090229132908, 0.1592271292666364, 0.153593348487006, 0.1705117399534538, 0.19448965924017925, 0.17851029477737612, 0.15499551921955101, 0.17608678672319034, 0.14207584695248154, 0.1734561158940885, 0.20065230963251268, 0.14449182454888687, 0.15721801899128118, 0.14330992726035585, 0.14272916383486123, 0.11751043441993136, 0.20568315154553019, 0.2690737286717193, 0.1658269509027498, 0.15359027534057823, 0.1666476382983939, 0.18767448849349122, 0.20422436472286876, 0.1810221121244181, 0.17334095675270278, 0.19617291970667616, 0.17286808195274084, 0.17432494784327524, 0.1689366154250933, 0.18121343009750257, 0.046072453937105684, 0.05260121637960258, 0.06659024916801792, 0.05405152536895752, 0.05588779989221948, 0.06106838437836992, 0.056974371618490616, 0.05798747136755067, 0.05409930801776952]}, "mutation_prompt": null}
{"id": "fbe68a19-e24a-4184-bfb4-c6507283dc5e", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "DynamicInertiaDEPSO", "description": "Utilizing a dynamic inertia weight to enhance exploration and exploitation balance, thereby improving convergence speed.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.22027472730466258, 0.17810835794520807, 0.205357851968343, 0.21109790533792316, 0.2007390265529343, 0.2224724651595228, 0.18890374387118314, 0.19908741429723475, 0.21235150905275246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036998496544355275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058988781206239405, 0.058162826016164626, 0.05819994101096526, 0.07176358791553994, 0.05019881607155097, 0.05359918380111017, 0.05512035412004024, 0.049257215417671585, 0.0602626014565798, 0.036404240177963954, 0.04233589554969042, 0.0377339363147603, 0.03625659968529216, 0.04141189813488033, 0.04024900122220809, 0.033482772710707986, 0.03576900121000903, 0.02611770918872025, 0.9918243923648012, 0.7257671093089031, 0.36208379522271705, 0.859709020184676, 0.9933911621621321, 0.4781939840132502, 0.6575390790159346, 0.6869602044413677, 0.5647263298041728, 0.0998466462607408, 0.09838967145241184, 0.09593820160094924, 0.08693374376193574, 0.11083603740011172, 0.08888205793178094, 0.11911119081802934, 0.10325236972234275, 0.11073776098313104, 0.17421016463956152, 0.10813509261475118, 0.1175214417807372, 0.1539239405052718, 0.1748837998217856, 0.12901967454193397, 0.1360121010696972, 0.16700654275139282, 0.20048918290198303, 0.025043328096461814, 0.08019494963606244, 9.999999999998899e-05, 0.008410719397912159, 9.999999999998899e-05, 0.04325420976908967, 0.012584048074561593, 0.016459608428190053, 0.011104034890959569, 0.02325896834906105, 0.019202981268348074, 0.022059163740006604, 0.008925630585296163, 0.065918049819093, 0.05001497706764335, 0.007855844529553901, 0.013973916765022798, 0.023388251206964195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05045361196359788, 0.045247764921431344, 0.041696839530885654, 0.034254704982004336, 0.06124834058888806, 0.04290179679293671, 0.048188819215772116, 0.04724432396366007, 0.03400218429358792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006588123978200633, 0.0038126411960096585, 9.999999999998899e-05, 0.002039016241202285, 0.011160285845837836, 0.00961283609186847, 0.012084774954082778, 0.004553142899355378, 9.999999999998899e-05, 0.19593469838610933, 0.22338670176983721, 0.2117117950325781, 0.22022774222846342, 0.2155193197080728, 0.21879457654651513, 0.22474873284891905, 0.25354769311357195, 0.21207051070190464, 0.05887415993849787, 0.04891750568777986, 0.06704871713463656, 0.046893300721319475, 0.055312048294934524, 0.05711227189645374, 0.04965076568475524, 0.04162411486171458, 0.05384828160993271, 0.14869547903475888, 0.1195168158840334, 0.13012893660249758, 0.14025704647718285, 0.14109994866436104, 0.16024771272566907, 0.12971420890714236, 0.12452914813332483, 0.12152339275685631, 0.1734949957094406, 0.16593792786992234, 0.2028314381419717, 0.1845900689028741, 0.17603613110446548, 0.1711452885255732, 0.17443624347977782, 0.1988891729985035, 0.16648116921445266, 0.11980488117803711, 0.13580595019384434, 0.12321681577106214, 0.12056369732452099, 0.1240389334954427, 0.10692550883662932, 0.1206842170731085, 0.11188264703063922, 0.11604094726527969, 0.17277522778457166, 0.15849565247241515, 0.16693635673913287, 0.15967646096258015, 0.16335452747317214, 0.16902201823537322, 0.21028027798350057, 0.1677031136485595, 0.1640640543503541, 0.16209760844015741, 0.13838332272869014, 0.1406756677571409, 0.14930117794930697, 0.14590967342810068, 0.14754252248165578, 0.14535090229132908, 0.1592271292666364, 0.153593348487006, 0.1705117399534538, 0.19448965924017925, 0.17851029477737612, 0.15499551921955101, 0.17608678672319034, 0.14207584695248154, 0.1734561158940885, 0.20065230963251268, 0.14449182454888687, 0.15721801899128118, 0.14330992726035585, 0.14272916383486123, 0.11751043441993136, 0.20568315154553019, 0.2690737286717193, 0.1658269509027498, 0.15359027534057823, 0.1666476382983939, 0.18767448849349122, 0.20422436472286876, 0.1810221121244181, 0.17334095675270278, 0.19617291970667616, 0.17286808195274084, 0.17432494784327524, 0.1689366154250933, 0.18121343009750257, 0.046072453937105684, 0.05260121637960258, 0.06659024916801792, 0.05405152536895752, 0.05588779989221948, 0.06106838437836992, 0.056974371618490616, 0.05798747136755067, 0.05409930801776952]}, "mutation_prompt": null}
{"id": "e1c16f61-5fe6-4f41-bab2-7bc3fe54a680", "solution": "import numpy as np\n\nclass AdaptiveMutDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            # Adaptive mutation based on individual performance\n            f_individual = np.maximum(0.1, self.f - (_ / self.budget) * 0.4)  # Adaptive mutation factor\n            mutant = within_bounds(xr1 + f_individual * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "AdaptiveMutDEPSO", "description": "Introducing a novel adaptive mutation mechanism based on individual performance to enhance exploration and exploitation balance, thereby accelerating convergence speed.", "configspace": "", "generation": 22, "fitness": 0.1117365472011171, "feedback": "The algorithm AdaptiveMutDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.12.", "error": "", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.25285347708512895, 0.18029185244229318, 0.2308324944615897, 0.22420466355708957, 0.2099661891011999, 0.2140503555469736, 0.20334153951367506, 0.2148236631123296, 0.2028015018836149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044363993692933534, 0.042199963944376084, 0.06874291392668896, 0.06959242901190466, 0.051999975712811675, 0.06075176550896466, 0.05959159038390516, 0.04461514259054, 0.06844699889681816, 0.029428583662208574, 0.043594483161529585, 0.04151808772991006, 0.026483496879289525, 0.03412433320873565, 0.033286204045523626, 0.04710426693134884, 0.04579209843015397, 0.036408270521269714, 0.9918243672050621, 0.21395577945340305, 0.41714115615216507, 0.35812860896354315, 0.993391168996214, 0.27221318989599963, 0.17114003408343648, 0.4169926264567184, 0.41433902041809945, 0.08327066584808218, 0.08098342139981363, 0.0886294503124111, 0.09014276052425207, 0.10282299061462907, 0.09424898577765217, 0.12292122694796215, 0.10275234324153115, 0.11342649073229927, 0.17157393183915737, 0.13820100792251155, 0.15142019265596807, 0.13849016540664383, 0.15804655090197717, 0.12355112942629909, 0.1374719731195655, 0.12170581600865027, 0.12532634064637638, 0.009281090978546347, 0.006921066860361869, 0.019657674892440635, 0.0669742314335765, 0.010021504179595797, 0.030273625661187187, 0.02552768278028672, 0.009828159594624797, 9.999999999998899e-05, 0.023384294572335818, 0.03385783427354194, 0.06969835745143482, 0.010361999888070184, 0.04133902842589854, 0.002935510287994325, 0.01971325392907397, 0.0018418201318987082, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04410101061090299, 0.06322323867887081, 0.044616674095753095, 0.025614824441383077, 0.06612595796717491, 0.05151746318575079, 0.03750757498029467, 0.03837389037192929, 0.04948408646277036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011849074970322171, 9.999999999998899e-05, 0.00498588999513272, 9.999999999998899e-05, 9.999999999998899e-05, 0.01250132151692429, 9.999999999998899e-05, 0.1999543856275946, 0.2145999576482157, 0.21181459811801295, 0.28684524006929013, 0.21729392835934846, 0.22938084918341628, 0.20966347057386825, 0.23287241685055415, 0.23517490189846635, 0.04667634651228092, 0.06203849548123985, 0.06214686103411604, 0.05010393710250971, 0.05522566144888408, 0.04629695274725676, 0.048488622649853985, 0.049662946142979725, 0.0506857881384174, 0.1056934911658387, 0.11319069823334249, 0.11750476994135839, 0.13958509241969985, 0.12923166167660838, 0.12760523588404105, 0.15117873873961796, 0.13669147880349286, 0.13499660650329792, 0.18583208847481458, 0.18085455635837577, 0.1829670861622411, 0.1731392048983582, 0.15837026270857912, 0.17134164020246845, 0.17836962692121283, 0.1825927899371731, 0.17034683200605016, 0.11781560536986346, 0.11182123096129581, 0.11836675064672908, 0.1270864702496992, 0.11466585330359702, 0.15225768605196188, 0.11856932071694426, 0.1214313517486808, 0.11621447394110473, 0.1486375827452905, 0.15652551084635158, 0.1581424142538166, 0.17294405907197885, 0.17367890468476543, 0.16361422789124647, 0.16663725922837946, 0.17211857069563252, 0.16988763992504496, 0.15012656548077608, 0.14230003584773154, 0.1472325727341477, 0.15231012666026222, 0.1585132293640923, 0.1571169603884338, 0.14346626179970667, 0.1634097018592704, 0.15404179991833566, 0.14060735862212637, 0.16217973682321007, 0.16906785092931753, 0.17162959248359622, 0.1596239958897926, 0.15242220395888073, 0.15506205036405185, 0.17126323960857026, 0.15880938769816166, 0.16873625259382774, 0.1831989555253828, 0.14403732027144156, 0.14264137663049392, 0.14897260835755477, 0.1507915845235751, 0.11055425932815666, 0.1476577907250266, 0.141016621773694, 0.18376615741917135, 0.1792440961842583, 0.17344339921273455, 0.16841093579638677, 0.1776170872692444, 0.2001743215459505, 0.18713599764027933, 0.18838236919335083, 0.17392686479798336, 0.05263857485361456, 0.05061096297215595, 0.0694654870976652, 0.04812791683264317, 0.05556648438622869, 0.05859444403133529, 0.055429781788092214, 0.07287801262517313, 0.05371985616884145]}, "mutation_prompt": null}
{"id": "3e8e9460-00e3-46d1-9566-f85655b80912", "solution": "import numpy as np\n\nclass AdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        mutation_param = 0.5\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + mutation_param * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n            mutation_param = 0.5 - 0.1 * (_ / (self.budget - self.population_size))\n\n        return objective_function(gbest)", "name": "AdaptiveMutationDEPSO", "description": "Implementing adaptive control of the mutation parameter to dynamically adjust exploration and exploitation rates, enhancing convergence speed by promoting more efficient search behavior.", "configspace": "", "generation": 23, "fitness": 0.11685006675977558, "feedback": "The algorithm AdaptiveMutationDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.14.", "error": "", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.2054406832291128, 0.20109584520004187, 0.20007760548395892, 0.21189220472006165, 0.18525959805162118, 0.19598419503464337, 0.18403665996497454, 0.18250170904172125, 0.22148897228910047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07080537333165138, 0.05595147934428768, 0.05939592545746164, 0.05127883528954513, 0.04992767716013935, 0.05958897297176313, 0.05264523811716426, 0.05240584426575701, 0.06981715123188315, 0.04745621576818615, 0.03934561582915652, 0.03257213957247773, 0.03450048987981913, 0.041196722700414856, 0.036168908685791035, 0.031642294374316426, 0.03527571905212257, 0.037687285419727434, 0.9918243862814253, 0.19210212420073347, 0.44330126303435113, 0.20990559912016726, 0.9933911637199516, 0.6578984030320789, 0.5785182586999602, 0.5682966391235178, 0.793156747263581, 0.08350043265782037, 0.11045110934661861, 0.08562524218528456, 0.10558993255838722, 0.06716669754557603, 0.10118494492162167, 0.1472371686446029, 0.09984926725747045, 0.08921932506803787, 0.13243024591147368, 0.13162936802711844, 0.15654043104912196, 0.13180232795303404, 0.16439492409954526, 0.15048435093114643, 0.16722792372099682, 0.13963696039890838, 0.13703028764756686, 0.0064534915793234005, 0.01043959523348481, 9.999999999998899e-05, 0.027374422064114667, 0.009179674687269435, 0.03486816046170749, 0.039110978959884024, 0.006382249936759177, 0.01969876725230535, 0.03320723278142779, 0.009886859895139821, 0.006237679911573979, 0.00948102257313399, 0.015678306838174616, 0.010835865155456093, 0.024370812306061418, 0.00043689386201295477, 0.04109958352693244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05234949577878356, 0.05824822950767916, 0.06083988996260703, 0.051383220345068925, 0.05306670820561976, 0.05732400026773121, 0.08475109614548604, 0.0398648222663327, 0.043997160969716065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000681800515317077, 9.999999999998899e-05, 0.0029839521421206605, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013321144081776426, 9.999999999998899e-05, 0.008915188006046848, 0.20125124930518445, 0.22231725834489624, 0.22979904425809328, 0.22651916077823286, 0.23444613527952007, 0.23171343664288946, 0.2129311836382266, 0.25348469668931406, 0.2077707552647413, 0.058445599605708054, 0.05688275801921949, 0.06145752930610271, 0.05157402033744385, 0.05934595463443981, 0.053576330597548405, 0.04109201066070345, 0.054970626020651614, 0.06649268293658317, 0.11937645206264513, 0.11634030634791948, 0.12264839157846452, 0.11456664704923258, 0.12182606386625505, 0.12218287103086911, 0.14300333460120784, 0.1385825489488487, 0.13502994137444335, 0.17068908514654102, 0.18150922313184437, 0.17794231724610932, 0.16865142759978968, 0.16568674840347353, 0.17662351938658472, 0.17125801595341184, 0.18176902079812185, 0.16788321609530232, 0.1253251856089257, 0.12315960969346629, 0.11147457747786416, 0.12106866890627266, 0.11761280404464414, 0.12129135375455302, 0.129747651028156, 0.11144843460952925, 0.11124077342810246, 0.1534510392752696, 0.16024686502521324, 0.150666833776109, 0.16917957559414676, 0.1686362246600549, 0.16841527834774583, 0.14706238907659286, 0.15318483315618125, 0.17209993701626858, 0.16276452208130154, 0.1483443574802934, 0.13520235576487571, 0.15487647849001063, 0.1472261593333538, 0.15546678272708503, 0.13996618831777508, 0.15939981760801314, 0.1539991420883864, 0.14316913349697546, 0.14747662332011624, 0.1548083044324312, 0.15250928576674883, 0.16347867934184523, 0.1284974760770421, 0.21207087957950643, 0.17202366668840152, 0.14644704666717812, 0.17011714122620036, 0.20199378639775545, 0.18154437224337594, 0.15063251119703835, 0.15523632271810306, 0.1675217381263897, 0.15280194138136116, 0.16106262283708672, 0.14990192929901403, 0.17777528321334923, 0.20331118071084187, 0.17137761538985685, 0.17914604422037905, 0.1722593771653308, 0.17243157718088697, 0.17058298389932514, 0.17628408608018054, 0.1724370769537138, 0.05996825548638407, 0.05170132994089638, 0.058693731972741636, 0.051296035741674184, 0.058682948189230255, 0.050413864636537076, 0.05281373299560432, 0.08874178662818244, 0.05760345651304288]}, "mutation_prompt": null}
{"id": "4d65be90-d636-4cd4-a9e7-f718d4ca3cf0", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "DynamicInertiaDEPSO", "description": "Utilizing a dynamic inertia weight to enhance exploration and exploitation balance, thereby improving convergence speed.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.22027472730466258, 0.17810835794520807, 0.205357851968343, 0.21109790533792316, 0.2007390265529343, 0.2224724651595228, 0.18890374387118314, 0.19908741429723475, 0.21235150905275246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036998496544355275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058988781206239405, 0.058162826016164626, 0.05819994101096526, 0.07176358791553994, 0.05019881607155097, 0.05359918380111017, 0.05512035412004024, 0.049257215417671585, 0.0602626014565798, 0.036404240177963954, 0.04233589554969042, 0.0377339363147603, 0.03625659968529216, 0.04141189813488033, 0.04024900122220809, 0.033482772710707986, 0.03576900121000903, 0.02611770918872025, 0.9918243923648012, 0.7257671093089031, 0.36208379522271705, 0.859709020184676, 0.9933911621621321, 0.4781939840132502, 0.6575390790159346, 0.6869602044413677, 0.5647263298041728, 0.0998466462607408, 0.09838967145241184, 0.09593820160094924, 0.08693374376193574, 0.11083603740011172, 0.08888205793178094, 0.11911119081802934, 0.10325236972234275, 0.11073776098313104, 0.17421016463956152, 0.10813509261475118, 0.1175214417807372, 0.1539239405052718, 0.1748837998217856, 0.12901967454193397, 0.1360121010696972, 0.16700654275139282, 0.20048918290198303, 0.025043328096461814, 0.08019494963606244, 9.999999999998899e-05, 0.008410719397912159, 9.999999999998899e-05, 0.04325420976908967, 0.012584048074561593, 0.016459608428190053, 0.011104034890959569, 0.02325896834906105, 0.019202981268348074, 0.022059163740006604, 0.008925630585296163, 0.065918049819093, 0.05001497706764335, 0.007855844529553901, 0.013973916765022798, 0.023388251206964195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05045361196359788, 0.045247764921431344, 0.041696839530885654, 0.034254704982004336, 0.06124834058888806, 0.04290179679293671, 0.048188819215772116, 0.04724432396366007, 0.03400218429358792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006588123978200633, 0.0038126411960096585, 9.999999999998899e-05, 0.002039016241202285, 0.011160285845837836, 0.00961283609186847, 0.012084774954082778, 0.004553142899355378, 9.999999999998899e-05, 0.19593469838610933, 0.22338670176983721, 0.2117117950325781, 0.22022774222846342, 0.2155193197080728, 0.21879457654651513, 0.22474873284891905, 0.25354769311357195, 0.21207051070190464, 0.05887415993849787, 0.04891750568777986, 0.06704871713463656, 0.046893300721319475, 0.055312048294934524, 0.05711227189645374, 0.04965076568475524, 0.04162411486171458, 0.05384828160993271, 0.14869547903475888, 0.1195168158840334, 0.13012893660249758, 0.14025704647718285, 0.14109994866436104, 0.16024771272566907, 0.12971420890714236, 0.12452914813332483, 0.12152339275685631, 0.1734949957094406, 0.16593792786992234, 0.2028314381419717, 0.1845900689028741, 0.17603613110446548, 0.1711452885255732, 0.17443624347977782, 0.1988891729985035, 0.16648116921445266, 0.11980488117803711, 0.13580595019384434, 0.12321681577106214, 0.12056369732452099, 0.1240389334954427, 0.10692550883662932, 0.1206842170731085, 0.11188264703063922, 0.11604094726527969, 0.17277522778457166, 0.15849565247241515, 0.16693635673913287, 0.15967646096258015, 0.16335452747317214, 0.16902201823537322, 0.21028027798350057, 0.1677031136485595, 0.1640640543503541, 0.16209760844015741, 0.13838332272869014, 0.1406756677571409, 0.14930117794930697, 0.14590967342810068, 0.14754252248165578, 0.14535090229132908, 0.1592271292666364, 0.153593348487006, 0.1705117399534538, 0.19448965924017925, 0.17851029477737612, 0.15499551921955101, 0.17608678672319034, 0.14207584695248154, 0.1734561158940885, 0.20065230963251268, 0.14449182454888687, 0.15721801899128118, 0.14330992726035585, 0.14272916383486123, 0.11751043441993136, 0.20568315154553019, 0.2690737286717193, 0.1658269509027498, 0.15359027534057823, 0.1666476382983939, 0.18767448849349122, 0.20422436472286876, 0.1810221121244181, 0.17334095675270278, 0.19617291970667616, 0.17286808195274084, 0.17432494784327524, 0.1689366154250933, 0.18121343009750257, 0.046072453937105684, 0.05260121637960258, 0.06659024916801792, 0.05405152536895752, 0.05588779989221948, 0.06106838437836992, 0.056974371618490616, 0.05798747136755067, 0.05409930801776952]}, "mutation_prompt": null}
{"id": "d959ae28-d12b-4222-a4ef-701275341b49", "solution": "import numpy as np\n\nclass AdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        f_mutate = 0.5\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            f_mutate = 0.5 + 0.5 * np.tanh(np.mean(fitness_values) - fitness_values[best_index])\n\n            mutant = within_bounds(xr1 + f_mutate * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "AdaptiveMutationDEPSO", "description": "Enhancing convergence speed by dynamically adapting the mutation step size and strategy based on individual performance.", "configspace": "", "generation": 25, "fitness": 0.11182667151482915, "feedback": "The algorithm AdaptiveMutationDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.13.", "error": "", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.1797795959566345, 0.21759876584772697, 0.21225676139557015, 0.21347559631377855, 0.18327433394434622, 0.24848592719191798, 0.20156696377480343, 0.18289843762727565, 0.1705338953551474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04876748857286439, 0.05073503454368056, 0.03886691518685659, 0.04330872674592434, 0.06375848535701711, 0.03609470346257182, 0.05616670777897359, 0.05364249213481054, 0.04570914983165508, 0.06661910388068115, 0.02876755305883616, 0.03186263998837224, 0.02538811044139644, 0.03084666268360392, 0.032847007228581804, 0.02732389059145157, 0.055179167983397615, 0.03782398064992254, 0.409699436505055, 0.6827157740842114, 0.9946207250618578, 0.8559110710273522, 0.8054038641372491, 0.5715394707874639, 0.48679146701738696, 0.2054082416375218, 0.20280623370155304, 0.10298249212549782, 0.09402175836325155, 0.06304077983336376, 0.06718703047826546, 0.06870552903792848, 0.05932427884705738, 0.0923351756982036, 0.11582066188538576, 0.09213569707233438, 0.14967138333506336, 0.11575587442192858, 0.12068479781125774, 0.11572633666411802, 0.12186534220204814, 0.11367098587305768, 0.15110115684956693, 0.14386893865383388, 0.12757333777043756, 9.999999999998899e-05, 0.02363494872354366, 0.06457205645973096, 9.999999999998899e-05, 0.024099341604067903, 0.02365610947689145, 0.0028419050504128185, 0.027039967936088205, 0.05932851289590457, 0.03457039960712449, 9.999999999998899e-05, 9.999999999998899e-05, 0.00342564833494019, 9.999999999998899e-05, 0.0496126915934223, 0.0005526910407904762, 9.999999999998899e-05, 0.06654649153074788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018966774882931192, 0.03826659780648256, 0.05509583702008436, 0.08629162608012064, 0.016507489157653765, 0.06490534084586774, 0.05823005595519459, 0.03384840612950979, 0.04770848609636047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005458692932071796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00292938615671845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17992379538644487, 0.2053610656101985, 0.20262417586443848, 0.21988978283205374, 0.21970946877151665, 0.21882230501899735, 0.19253126814685906, 0.19686986786024852, 0.18434189812942536, 0.05670739926639379, 0.0513346201882412, 0.05966368913701858, 0.04974152658179498, 0.04366527712539703, 0.0465325985730799, 0.05055918039960816, 0.048899920098480654, 0.06620447343373403, 0.12802482626952005, 0.12333937551110608, 0.1161256128173983, 0.1236117329163029, 0.13606754829859713, 0.11170391803273227, 0.1146834647264039, 0.12920779843452035, 0.14088088522491438, 0.17156158349937778, 0.18559807093285952, 0.16213636979881263, 0.16471265945417257, 0.16161819150990486, 0.15705817065158867, 0.1906650392543221, 0.18851233132077427, 0.16368053671765315, 0.10644455503788564, 0.13522381143967233, 0.10943019366317419, 0.09793363977234548, 0.10488246525244704, 0.11774211780946953, 0.1230992029818534, 0.11916052544329103, 0.10235125771954212, 0.14809518024677637, 0.15311594580222898, 0.15134215531222694, 0.16548193777364417, 0.15388289425420132, 0.1466723463507309, 0.19227646051353053, 0.14043721265288445, 0.18929217018773803, 0.14294656106033077, 0.1493194076745482, 0.1600035751003661, 0.145710042004899, 0.12551375232531115, 0.14801676101127836, 0.14405647393741638, 0.15241414332768544, 0.14725354990526507, 0.13926724619748365, 0.1425891346660344, 0.14756053973118288, 0.13673783506711568, 0.1675682247713648, 0.16506139665043396, 0.22198986329588066, 0.16321573191405403, 0.16335053177815517, 0.15168665242212787, 0.145872486470641, 0.11304102570207974, 0.15848201436635523, 0.14756532560945512, 0.1534888360831368, 0.1998236493838469, 0.17781539780135103, 0.16477879684779306, 0.17173757278763024, 0.18543142494032416, 0.18191374720217268, 0.18653203289527387, 0.1730612470035361, 0.1687280681512615, 0.1721870304683485, 0.17493741684757935, 0.164089162096817, 0.049168703549260284, 0.05315003624419623, 0.04950591712201935, 0.05144564068593993, 0.057001496479003655, 0.05697308373928012, 0.05694335342590218, 0.0375529540430809, 0.043603308680633335]}, "mutation_prompt": null}
{"id": "a57415ae-9301-431b-8706-8fdee32df120", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "DynamicInertiaDEPSO", "description": "Utilizing a dynamic inertia weight to enhance exploration and exploitation balance, thereby improving convergence speed.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.22027472730466258, 0.17810835794520807, 0.205357851968343, 0.21109790533792316, 0.2007390265529343, 0.2224724651595228, 0.18890374387118314, 0.19908741429723475, 0.21235150905275246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036998496544355275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058988781206239405, 0.058162826016164626, 0.05819994101096526, 0.07176358791553994, 0.05019881607155097, 0.05359918380111017, 0.05512035412004024, 0.049257215417671585, 0.0602626014565798, 0.036404240177963954, 0.04233589554969042, 0.0377339363147603, 0.03625659968529216, 0.04141189813488033, 0.04024900122220809, 0.033482772710707986, 0.03576900121000903, 0.02611770918872025, 0.9918243923648012, 0.7257671093089031, 0.36208379522271705, 0.859709020184676, 0.9933911621621321, 0.4781939840132502, 0.6575390790159346, 0.6869602044413677, 0.5647263298041728, 0.0998466462607408, 0.09838967145241184, 0.09593820160094924, 0.08693374376193574, 0.11083603740011172, 0.08888205793178094, 0.11911119081802934, 0.10325236972234275, 0.11073776098313104, 0.17421016463956152, 0.10813509261475118, 0.1175214417807372, 0.1539239405052718, 0.1748837998217856, 0.12901967454193397, 0.1360121010696972, 0.16700654275139282, 0.20048918290198303, 0.025043328096461814, 0.08019494963606244, 9.999999999998899e-05, 0.008410719397912159, 9.999999999998899e-05, 0.04325420976908967, 0.012584048074561593, 0.016459608428190053, 0.011104034890959569, 0.02325896834906105, 0.019202981268348074, 0.022059163740006604, 0.008925630585296163, 0.065918049819093, 0.05001497706764335, 0.007855844529553901, 0.013973916765022798, 0.023388251206964195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05045361196359788, 0.045247764921431344, 0.041696839530885654, 0.034254704982004336, 0.06124834058888806, 0.04290179679293671, 0.048188819215772116, 0.04724432396366007, 0.03400218429358792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006588123978200633, 0.0038126411960096585, 9.999999999998899e-05, 0.002039016241202285, 0.011160285845837836, 0.00961283609186847, 0.012084774954082778, 0.004553142899355378, 9.999999999998899e-05, 0.19593469838610933, 0.22338670176983721, 0.2117117950325781, 0.22022774222846342, 0.2155193197080728, 0.21879457654651513, 0.22474873284891905, 0.25354769311357195, 0.21207051070190464, 0.05887415993849787, 0.04891750568777986, 0.06704871713463656, 0.046893300721319475, 0.055312048294934524, 0.05711227189645374, 0.04965076568475524, 0.04162411486171458, 0.05384828160993271, 0.14869547903475888, 0.1195168158840334, 0.13012893660249758, 0.14025704647718285, 0.14109994866436104, 0.16024771272566907, 0.12971420890714236, 0.12452914813332483, 0.12152339275685631, 0.1734949957094406, 0.16593792786992234, 0.2028314381419717, 0.1845900689028741, 0.17603613110446548, 0.1711452885255732, 0.17443624347977782, 0.1988891729985035, 0.16648116921445266, 0.11980488117803711, 0.13580595019384434, 0.12321681577106214, 0.12056369732452099, 0.1240389334954427, 0.10692550883662932, 0.1206842170731085, 0.11188264703063922, 0.11604094726527969, 0.17277522778457166, 0.15849565247241515, 0.16693635673913287, 0.15967646096258015, 0.16335452747317214, 0.16902201823537322, 0.21028027798350057, 0.1677031136485595, 0.1640640543503541, 0.16209760844015741, 0.13838332272869014, 0.1406756677571409, 0.14930117794930697, 0.14590967342810068, 0.14754252248165578, 0.14535090229132908, 0.1592271292666364, 0.153593348487006, 0.1705117399534538, 0.19448965924017925, 0.17851029477737612, 0.15499551921955101, 0.17608678672319034, 0.14207584695248154, 0.1734561158940885, 0.20065230963251268, 0.14449182454888687, 0.15721801899128118, 0.14330992726035585, 0.14272916383486123, 0.11751043441993136, 0.20568315154553019, 0.2690737286717193, 0.1658269509027498, 0.15359027534057823, 0.1666476382983939, 0.18767448849349122, 0.20422436472286876, 0.1810221121244181, 0.17334095675270278, 0.19617291970667616, 0.17286808195274084, 0.17432494784327524, 0.1689366154250933, 0.18121343009750257, 0.046072453937105684, 0.05260121637960258, 0.06659024916801792, 0.05405152536895752, 0.05588779989221948, 0.06106838437836992, 0.056974371618490616, 0.05798747136755067, 0.05409930801776952]}, "mutation_prompt": null}
{"id": "2ba3cc9a-b636-400e-9670-a5194342049d", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "DynamicInertiaDEPSO", "description": "Utilizing a dynamic inertia weight to enhance exploration and exploitation balance, thereby improving convergence speed.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.22027472730466258, 0.17810835794520807, 0.205357851968343, 0.21109790533792316, 0.2007390265529343, 0.2224724651595228, 0.18890374387118314, 0.19908741429723475, 0.21235150905275246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036998496544355275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058988781206239405, 0.058162826016164626, 0.05819994101096526, 0.07176358791553994, 0.05019881607155097, 0.05359918380111017, 0.05512035412004024, 0.049257215417671585, 0.0602626014565798, 0.036404240177963954, 0.04233589554969042, 0.0377339363147603, 0.03625659968529216, 0.04141189813488033, 0.04024900122220809, 0.033482772710707986, 0.03576900121000903, 0.02611770918872025, 0.9918243923648012, 0.7257671093089031, 0.36208379522271705, 0.859709020184676, 0.9933911621621321, 0.4781939840132502, 0.6575390790159346, 0.6869602044413677, 0.5647263298041728, 0.0998466462607408, 0.09838967145241184, 0.09593820160094924, 0.08693374376193574, 0.11083603740011172, 0.08888205793178094, 0.11911119081802934, 0.10325236972234275, 0.11073776098313104, 0.17421016463956152, 0.10813509261475118, 0.1175214417807372, 0.1539239405052718, 0.1748837998217856, 0.12901967454193397, 0.1360121010696972, 0.16700654275139282, 0.20048918290198303, 0.025043328096461814, 0.08019494963606244, 9.999999999998899e-05, 0.008410719397912159, 9.999999999998899e-05, 0.04325420976908967, 0.012584048074561593, 0.016459608428190053, 0.011104034890959569, 0.02325896834906105, 0.019202981268348074, 0.022059163740006604, 0.008925630585296163, 0.065918049819093, 0.05001497706764335, 0.007855844529553901, 0.013973916765022798, 0.023388251206964195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05045361196359788, 0.045247764921431344, 0.041696839530885654, 0.034254704982004336, 0.06124834058888806, 0.04290179679293671, 0.048188819215772116, 0.04724432396366007, 0.03400218429358792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006588123978200633, 0.0038126411960096585, 9.999999999998899e-05, 0.002039016241202285, 0.011160285845837836, 0.00961283609186847, 0.012084774954082778, 0.004553142899355378, 9.999999999998899e-05, 0.19593469838610933, 0.22338670176983721, 0.2117117950325781, 0.22022774222846342, 0.2155193197080728, 0.21879457654651513, 0.22474873284891905, 0.25354769311357195, 0.21207051070190464, 0.05887415993849787, 0.04891750568777986, 0.06704871713463656, 0.046893300721319475, 0.055312048294934524, 0.05711227189645374, 0.04965076568475524, 0.04162411486171458, 0.05384828160993271, 0.14869547903475888, 0.1195168158840334, 0.13012893660249758, 0.14025704647718285, 0.14109994866436104, 0.16024771272566907, 0.12971420890714236, 0.12452914813332483, 0.12152339275685631, 0.1734949957094406, 0.16593792786992234, 0.2028314381419717, 0.1845900689028741, 0.17603613110446548, 0.1711452885255732, 0.17443624347977782, 0.1988891729985035, 0.16648116921445266, 0.11980488117803711, 0.13580595019384434, 0.12321681577106214, 0.12056369732452099, 0.1240389334954427, 0.10692550883662932, 0.1206842170731085, 0.11188264703063922, 0.11604094726527969, 0.17277522778457166, 0.15849565247241515, 0.16693635673913287, 0.15967646096258015, 0.16335452747317214, 0.16902201823537322, 0.21028027798350057, 0.1677031136485595, 0.1640640543503541, 0.16209760844015741, 0.13838332272869014, 0.1406756677571409, 0.14930117794930697, 0.14590967342810068, 0.14754252248165578, 0.14535090229132908, 0.1592271292666364, 0.153593348487006, 0.1705117399534538, 0.19448965924017925, 0.17851029477737612, 0.15499551921955101, 0.17608678672319034, 0.14207584695248154, 0.1734561158940885, 0.20065230963251268, 0.14449182454888687, 0.15721801899128118, 0.14330992726035585, 0.14272916383486123, 0.11751043441993136, 0.20568315154553019, 0.2690737286717193, 0.1658269509027498, 0.15359027534057823, 0.1666476382983939, 0.18767448849349122, 0.20422436472286876, 0.1810221121244181, 0.17334095675270278, 0.19617291970667616, 0.17286808195274084, 0.17432494784327524, 0.1689366154250933, 0.18121343009750257, 0.046072453937105684, 0.05260121637960258, 0.06659024916801792, 0.05405152536895752, 0.05588779989221948, 0.06106838437836992, 0.056974371618490616, 0.05798747136755067, 0.05409930801776952]}, "mutation_prompt": null}
{"id": "19c786fe-bc34-4b24-8b63-a89b2581bf73", "solution": "import numpy as np\n\nclass AdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size)) * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3), 0.1, 0.9)\n\n        return objective_function(gbest)", "name": "AdaptiveInertiaDEPSO", "description": "Implementing a self-adaptive mechanism to adjust the inertia weight during optimization to accelerate convergence speed.", "configspace": "", "generation": 28, "fitness": 0.12594360288175246, "feedback": "The algorithm AdaptiveInertiaDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.16.", "error": "", "parent_id": "5fc41393-e56d-4d4b-97f0-f3395efdd48d", "metadata": {"aucs": [0.2105328315709748, 0.2287237653099946, 0.2391720551218799, 0.22310358091595894, 0.23098032883198716, 0.20714964981947082, 0.21299462103319178, 0.2217385366686614, 0.20835967817888712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06582498465405773, 0.05683951085545358, 0.06128651778463279, 0.05781811136353043, 0.06254907972293056, 0.05275714972852186, 0.04229850741059449, 0.038942369315357994, 0.04394037160676467, 0.03940002405577159, 0.03816650695096391, 0.03766360297945415, 0.049996529519184096, 0.03527834573971689, 0.053981134420557075, 0.03429899005328729, 0.03782702379871694, 0.03772941376526395, 0.8579268862660422, 0.7757320727951523, 0.9924036324456419, 0.2047187084797567, 0.9923790724424201, 0.974936080020159, 0.19957967239773622, 0.733442430719858, 0.9749212177531063, 0.10041882141790681, 0.1575729475971659, 0.09742331173861474, 0.07783735629055877, 0.11875096848600575, 0.10631252089614829, 0.0961104948292999, 0.08776894638415345, 0.11013049902088445, 0.16394058134007028, 0.11979751836025931, 0.16164442787968236, 0.12735338736136892, 0.13173304612966963, 0.1363828825060176, 0.1246916438392196, 0.12741774581462073, 0.1435789594118958, 9.999999999998899e-05, 0.010387851067205522, 0.06974797735704363, 0.017501019448046495, 0.01733856677038892, 0.02384688559990278, 0.004971672660513682, 0.02745063433904127, 0.03100375709649328, 0.002413524307603221, 0.05571951008291742, 0.0030876268031976295, 0.007065899122010388, 0.015950613301102035, 0.02551271357556739, 0.02220829348104958, 0.03635040719803584, 0.012702712322878673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028423856597167507, 0.029466165841295022, 0.10926854443423839, 0.041471199378458, 0.02612471548663975, 0.04192965760497014, 0.023699275006337173, 0.05836794205490803, 0.012737551688699056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023020801242739752, 0.0036172966020764363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006881617441724885, 0.02127083917129513, 0.21046177468111404, 0.2077473271731255, 0.3015961628071858, 0.20621185765772776, 0.2031442659418683, 0.20378956922637992, 0.2393141735373916, 0.19573227327873, 0.22959753530775862, 0.05223347673556089, 0.05941443148727954, 0.04867663065538963, 0.062219234392268286, 0.05588568724923282, 0.05601892154730137, 0.046890171696497784, 0.04868414177719038, 0.051332366108944316, 0.11878001264366389, 0.12218289664080217, 0.1548706901349879, 0.13128414179748082, 0.14440802029114785, 0.15897541803255977, 0.1234328540792643, 0.19452318283758163, 0.1211482338848966, 0.1735519929812379, 0.17395902188833423, 0.18245721255494562, 0.17736689578214115, 0.17521508940048403, 0.16868025906188044, 0.16727538227371386, 0.17642818570372343, 0.19012616719257824, 0.11977978257957489, 0.1143201812642397, 0.1252063885018384, 0.1298487926856129, 0.10325072719274853, 0.1154337771679107, 0.12554837445737888, 0.11967861316880812, 0.13427109043444874, 0.16950785602050655, 0.17735373671235344, 0.1666682830838352, 0.1636275912244377, 0.1602951617193823, 0.16174638737826152, 0.16117616736866736, 0.1622850441057857, 0.1675814826521751, 0.15509437451037134, 0.1457033671193373, 0.15741152717758233, 0.14849163823313516, 0.15985545518517918, 0.15472601118979423, 0.17732405040317556, 0.15454550536278255, 0.15071528996256567, 0.21897067818104243, 0.14939384391829957, 0.153891331021055, 0.2555272147938271, 0.16618329842343593, 0.2285215892142055, 0.19102555099583063, 0.14925493887281116, 0.19500503825387938, 0.16612176484630836, 0.19681357290916335, 0.19148916236549918, 0.16142106048394866, 0.14594675535731694, 0.19256956714513263, 0.17394183387671402, 0.16585162967730538, 0.15086349723304904, 0.18247925285511257, 0.17020521535117317, 0.16327627056111793, 0.18990738501476867, 0.17387633231983668, 0.18290938882004804, 0.17653482690154743, 0.20729512573460662, 0.1782987153870016, 0.05280033975975129, 0.05221607725515531, 0.048124869938143466, 0.046080325488098595, 0.05865867794886903, 0.05467173136567505, 0.05378209418514235, 0.05572206858616269, 0.05202670123051012]}, "mutation_prompt": null}
{"id": "fec753f5-dbb2-4d0b-b054-91324fecec75", "solution": "import numpy as np\n\nclass AdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size)) * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3), 0.1, 0.9)\n\n        return objective_function(gbest)", "name": "AdaptiveInertiaDEPSO", "description": "Implementing a self-adaptive mechanism to adjust the inertia weight during optimization to accelerate convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "19c786fe-bc34-4b24-8b63-a89b2581bf73", "metadata": {"aucs": [0.2105328315709748, 0.2287237653099946, 0.2391720551218799, 0.22310358091595894, 0.23098032883198716, 0.20714964981947082, 0.21299462103319178, 0.2217385366686614, 0.20835967817888712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06582498465405773, 0.05683951085545358, 0.06128651778463279, 0.05781811136353043, 0.06254907972293056, 0.05275714972852186, 0.04229850741059449, 0.038942369315357994, 0.04394037160676467, 0.03940002405577159, 0.03816650695096391, 0.03766360297945415, 0.049996529519184096, 0.03527834573971689, 0.053981134420557075, 0.03429899005328729, 0.03782702379871694, 0.03772941376526395, 0.8579268862660422, 0.7757320727951523, 0.9924036324456419, 0.2047187084797567, 0.9923790724424201, 0.974936080020159, 0.19957967239773622, 0.733442430719858, 0.9749212177531063, 0.10041882141790681, 0.1575729475971659, 0.09742331173861474, 0.07783735629055877, 0.11875096848600575, 0.10631252089614829, 0.0961104948292999, 0.08776894638415345, 0.11013049902088445, 0.16394058134007028, 0.11979751836025931, 0.16164442787968236, 0.12735338736136892, 0.13173304612966963, 0.1363828825060176, 0.1246916438392196, 0.12741774581462073, 0.1435789594118958, 9.999999999998899e-05, 0.010387851067205522, 0.06974797735704363, 0.017501019448046495, 0.01733856677038892, 0.02384688559990278, 0.004971672660513682, 0.02745063433904127, 0.03100375709649328, 0.002413524307603221, 0.05571951008291742, 0.0030876268031976295, 0.007065899122010388, 0.015950613301102035, 0.02551271357556739, 0.02220829348104958, 0.03635040719803584, 0.012702712322878673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028423856597167507, 0.029466165841295022, 0.10926854443423839, 0.041471199378458, 0.02612471548663975, 0.04192965760497014, 0.023699275006337173, 0.05836794205490803, 0.012737551688699056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023020801242739752, 0.0036172966020764363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006881617441724885, 0.02127083917129513, 0.21046177468111404, 0.2077473271731255, 0.3015961628071858, 0.20621185765772776, 0.2031442659418683, 0.20378956922637992, 0.2393141735373916, 0.19573227327873, 0.22959753530775862, 0.05223347673556089, 0.05941443148727954, 0.04867663065538963, 0.062219234392268286, 0.05588568724923282, 0.05601892154730137, 0.046890171696497784, 0.04868414177719038, 0.051332366108944316, 0.11878001264366389, 0.12218289664080217, 0.1548706901349879, 0.13128414179748082, 0.14440802029114785, 0.15897541803255977, 0.1234328540792643, 0.19452318283758163, 0.1211482338848966, 0.1735519929812379, 0.17395902188833423, 0.18245721255494562, 0.17736689578214115, 0.17521508940048403, 0.16868025906188044, 0.16727538227371386, 0.17642818570372343, 0.19012616719257824, 0.11977978257957489, 0.1143201812642397, 0.1252063885018384, 0.1298487926856129, 0.10325072719274853, 0.1154337771679107, 0.12554837445737888, 0.11967861316880812, 0.13427109043444874, 0.16950785602050655, 0.17735373671235344, 0.1666682830838352, 0.1636275912244377, 0.1602951617193823, 0.16174638737826152, 0.16117616736866736, 0.1622850441057857, 0.1675814826521751, 0.15509437451037134, 0.1457033671193373, 0.15741152717758233, 0.14849163823313516, 0.15985545518517918, 0.15472601118979423, 0.17732405040317556, 0.15454550536278255, 0.15071528996256567, 0.21897067818104243, 0.14939384391829957, 0.153891331021055, 0.2555272147938271, 0.16618329842343593, 0.2285215892142055, 0.19102555099583063, 0.14925493887281116, 0.19500503825387938, 0.16612176484630836, 0.19681357290916335, 0.19148916236549918, 0.16142106048394866, 0.14594675535731694, 0.19256956714513263, 0.17394183387671402, 0.16585162967730538, 0.15086349723304904, 0.18247925285511257, 0.17020521535117317, 0.16327627056111793, 0.18990738501476867, 0.17387633231983668, 0.18290938882004804, 0.17653482690154743, 0.20729512573460662, 0.1782987153870016, 0.05280033975975129, 0.05221607725515531, 0.048124869938143466, 0.046080325488098595, 0.05865867794886903, 0.05467173136567505, 0.05378209418514235, 0.05572206858616269, 0.05202670123051012]}, "mutation_prompt": null}
{"id": "54313fbf-cf85-4996-8cf6-5acb10c797b5", "solution": "import numpy as np\n\nclass AdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size)) * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3), 0.1, 0.9)\n\n        return objective_function(gbest)", "name": "AdaptiveInertiaDEPSO", "description": "Implementing a self-adaptive mechanism to adjust the inertia weight during optimization to accelerate convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "19c786fe-bc34-4b24-8b63-a89b2581bf73", "metadata": {"aucs": [0.2105328315709748, 0.2287237653099946, 0.2391720551218799, 0.22310358091595894, 0.23098032883198716, 0.20714964981947082, 0.21299462103319178, 0.2217385366686614, 0.20835967817888712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06582498465405773, 0.05683951085545358, 0.06128651778463279, 0.05781811136353043, 0.06254907972293056, 0.05275714972852186, 0.04229850741059449, 0.038942369315357994, 0.04394037160676467, 0.03940002405577159, 0.03816650695096391, 0.03766360297945415, 0.049996529519184096, 0.03527834573971689, 0.053981134420557075, 0.03429899005328729, 0.03782702379871694, 0.03772941376526395, 0.8579268862660422, 0.7757320727951523, 0.9924036324456419, 0.2047187084797567, 0.9923790724424201, 0.974936080020159, 0.19957967239773622, 0.733442430719858, 0.9749212177531063, 0.10041882141790681, 0.1575729475971659, 0.09742331173861474, 0.07783735629055877, 0.11875096848600575, 0.10631252089614829, 0.0961104948292999, 0.08776894638415345, 0.11013049902088445, 0.16394058134007028, 0.11979751836025931, 0.16164442787968236, 0.12735338736136892, 0.13173304612966963, 0.1363828825060176, 0.1246916438392196, 0.12741774581462073, 0.1435789594118958, 9.999999999998899e-05, 0.010387851067205522, 0.06974797735704363, 0.017501019448046495, 0.01733856677038892, 0.02384688559990278, 0.004971672660513682, 0.02745063433904127, 0.03100375709649328, 0.002413524307603221, 0.05571951008291742, 0.0030876268031976295, 0.007065899122010388, 0.015950613301102035, 0.02551271357556739, 0.02220829348104958, 0.03635040719803584, 0.012702712322878673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028423856597167507, 0.029466165841295022, 0.10926854443423839, 0.041471199378458, 0.02612471548663975, 0.04192965760497014, 0.023699275006337173, 0.05836794205490803, 0.012737551688699056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023020801242739752, 0.0036172966020764363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006881617441724885, 0.02127083917129513, 0.21046177468111404, 0.2077473271731255, 0.3015961628071858, 0.20621185765772776, 0.2031442659418683, 0.20378956922637992, 0.2393141735373916, 0.19573227327873, 0.22959753530775862, 0.05223347673556089, 0.05941443148727954, 0.04867663065538963, 0.062219234392268286, 0.05588568724923282, 0.05601892154730137, 0.046890171696497784, 0.04868414177719038, 0.051332366108944316, 0.11878001264366389, 0.12218289664080217, 0.1548706901349879, 0.13128414179748082, 0.14440802029114785, 0.15897541803255977, 0.1234328540792643, 0.19452318283758163, 0.1211482338848966, 0.1735519929812379, 0.17395902188833423, 0.18245721255494562, 0.17736689578214115, 0.17521508940048403, 0.16868025906188044, 0.16727538227371386, 0.17642818570372343, 0.19012616719257824, 0.11977978257957489, 0.1143201812642397, 0.1252063885018384, 0.1298487926856129, 0.10325072719274853, 0.1154337771679107, 0.12554837445737888, 0.11967861316880812, 0.13427109043444874, 0.16950785602050655, 0.17735373671235344, 0.1666682830838352, 0.1636275912244377, 0.1602951617193823, 0.16174638737826152, 0.16117616736866736, 0.1622850441057857, 0.1675814826521751, 0.15509437451037134, 0.1457033671193373, 0.15741152717758233, 0.14849163823313516, 0.15985545518517918, 0.15472601118979423, 0.17732405040317556, 0.15454550536278255, 0.15071528996256567, 0.21897067818104243, 0.14939384391829957, 0.153891331021055, 0.2555272147938271, 0.16618329842343593, 0.2285215892142055, 0.19102555099583063, 0.14925493887281116, 0.19500503825387938, 0.16612176484630836, 0.19681357290916335, 0.19148916236549918, 0.16142106048394866, 0.14594675535731694, 0.19256956714513263, 0.17394183387671402, 0.16585162967730538, 0.15086349723304904, 0.18247925285511257, 0.17020521535117317, 0.16327627056111793, 0.18990738501476867, 0.17387633231983668, 0.18290938882004804, 0.17653482690154743, 0.20729512573460662, 0.1782987153870016, 0.05280033975975129, 0.05221607725515531, 0.048124869938143466, 0.046080325488098595, 0.05865867794886903, 0.05467173136567505, 0.05378209418514235, 0.05572206858616269, 0.05202670123051012]}, "mutation_prompt": null}
{"id": "fde4c39a-cdff-4b3b-8fdb-d75796eba71d", "solution": "import numpy as np\n\nclass AdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size)) * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3), 0.1, 0.9)\n\n        return objective_function(gbest)", "name": "AdaptiveInertiaDEPSO", "description": "Implementing a self-adaptive mechanism to adjust the inertia weight during optimization to accelerate convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "19c786fe-bc34-4b24-8b63-a89b2581bf73", "metadata": {"aucs": [0.2105328315709748, 0.2287237653099946, 0.2391720551218799, 0.22310358091595894, 0.23098032883198716, 0.20714964981947082, 0.21299462103319178, 0.2217385366686614, 0.20835967817888712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06582498465405773, 0.05683951085545358, 0.06128651778463279, 0.05781811136353043, 0.06254907972293056, 0.05275714972852186, 0.04229850741059449, 0.038942369315357994, 0.04394037160676467, 0.03940002405577159, 0.03816650695096391, 0.03766360297945415, 0.049996529519184096, 0.03527834573971689, 0.053981134420557075, 0.03429899005328729, 0.03782702379871694, 0.03772941376526395, 0.8579268862660422, 0.7757320727951523, 0.9924036324456419, 0.2047187084797567, 0.9923790724424201, 0.974936080020159, 0.19957967239773622, 0.733442430719858, 0.9749212177531063, 0.10041882141790681, 0.1575729475971659, 0.09742331173861474, 0.07783735629055877, 0.11875096848600575, 0.10631252089614829, 0.0961104948292999, 0.08776894638415345, 0.11013049902088445, 0.16394058134007028, 0.11979751836025931, 0.16164442787968236, 0.12735338736136892, 0.13173304612966963, 0.1363828825060176, 0.1246916438392196, 0.12741774581462073, 0.1435789594118958, 9.999999999998899e-05, 0.010387851067205522, 0.06974797735704363, 0.017501019448046495, 0.01733856677038892, 0.02384688559990278, 0.004971672660513682, 0.02745063433904127, 0.03100375709649328, 0.002413524307603221, 0.05571951008291742, 0.0030876268031976295, 0.007065899122010388, 0.015950613301102035, 0.02551271357556739, 0.02220829348104958, 0.03635040719803584, 0.012702712322878673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028423856597167507, 0.029466165841295022, 0.10926854443423839, 0.041471199378458, 0.02612471548663975, 0.04192965760497014, 0.023699275006337173, 0.05836794205490803, 0.012737551688699056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023020801242739752, 0.0036172966020764363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006881617441724885, 0.02127083917129513, 0.21046177468111404, 0.2077473271731255, 0.3015961628071858, 0.20621185765772776, 0.2031442659418683, 0.20378956922637992, 0.2393141735373916, 0.19573227327873, 0.22959753530775862, 0.05223347673556089, 0.05941443148727954, 0.04867663065538963, 0.062219234392268286, 0.05588568724923282, 0.05601892154730137, 0.046890171696497784, 0.04868414177719038, 0.051332366108944316, 0.11878001264366389, 0.12218289664080217, 0.1548706901349879, 0.13128414179748082, 0.14440802029114785, 0.15897541803255977, 0.1234328540792643, 0.19452318283758163, 0.1211482338848966, 0.1735519929812379, 0.17395902188833423, 0.18245721255494562, 0.17736689578214115, 0.17521508940048403, 0.16868025906188044, 0.16727538227371386, 0.17642818570372343, 0.19012616719257824, 0.11977978257957489, 0.1143201812642397, 0.1252063885018384, 0.1298487926856129, 0.10325072719274853, 0.1154337771679107, 0.12554837445737888, 0.11967861316880812, 0.13427109043444874, 0.16950785602050655, 0.17735373671235344, 0.1666682830838352, 0.1636275912244377, 0.1602951617193823, 0.16174638737826152, 0.16117616736866736, 0.1622850441057857, 0.1675814826521751, 0.15509437451037134, 0.1457033671193373, 0.15741152717758233, 0.14849163823313516, 0.15985545518517918, 0.15472601118979423, 0.17732405040317556, 0.15454550536278255, 0.15071528996256567, 0.21897067818104243, 0.14939384391829957, 0.153891331021055, 0.2555272147938271, 0.16618329842343593, 0.2285215892142055, 0.19102555099583063, 0.14925493887281116, 0.19500503825387938, 0.16612176484630836, 0.19681357290916335, 0.19148916236549918, 0.16142106048394866, 0.14594675535731694, 0.19256956714513263, 0.17394183387671402, 0.16585162967730538, 0.15086349723304904, 0.18247925285511257, 0.17020521535117317, 0.16327627056111793, 0.18990738501476867, 0.17387633231983668, 0.18290938882004804, 0.17653482690154743, 0.20729512573460662, 0.1782987153870016, 0.05280033975975129, 0.05221607725515531, 0.048124869938143466, 0.046080325488098595, 0.05865867794886903, 0.05467173136567505, 0.05378209418514235, 0.05572206858616269, 0.05202670123051012]}, "mutation_prompt": null}
{"id": "aac534eb-13fa-4ab6-9459-9567dde33bba", "solution": "import numpy as np\n\nclass EnhancedConvergenceDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + np.clip(np.random.normal(0, 1, self.dim), -1, 1) * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n\n        return objective_function(gbest)", "name": "EnhancedConvergenceDEPSO", "description": "Utilizing a dynamic mutation operator based on the fitness landscape to enhance exploration and exploitation while maintaining diversity to accelerate convergence.", "configspace": "", "generation": 32, "fitness": 0.12128656167798628, "feedback": "The algorithm EnhancedConvergenceDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.16.", "error": "", "parent_id": "19c786fe-bc34-4b24-8b63-a89b2581bf73", "metadata": {"aucs": [0.2138822018003982, 0.21175949141379613, 0.19128341092868073, 0.22944353154391117, 0.21217593650699296, 0.20944812350290576, 0.22931986687931383, 0.21881184047618374, 0.20560636776140795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057604229509790494, 0.06805016343534354, 0.07457672212667144, 0.05168192291289575, 0.05911702180153422, 0.0477535135530428, 0.06878395755394262, 0.08617867937408796, 0.049105487091353095, 0.02931674294710096, 0.02991765145564529, 0.055918502592891106, 0.031135680802951704, 0.035710377157914586, 0.03491966679001668, 0.041956374688696396, 0.03740664226360402, 0.038628412379855925, 0.9903865957981318, 0.2156431809104904, 0.9961650790470593, 0.158228581143792, 0.3615337202526129, 0.8644010851319063, 0.7896777557782116, 0.8887348123440737, 0.9816911679193673, 0.10579029890952185, 0.11394699950671927, 0.0873767974756422, 0.0828339343182497, 0.06693124040565801, 0.10786898742791529, 0.08867444800945756, 0.0942776472832606, 0.10824418623488452, 0.13598965267233776, 0.12789986574028878, 0.12803897466517788, 0.15256336166575435, 0.1206500529286384, 0.15117789361600353, 0.12045108723580777, 0.14994814245663768, 0.13693845679128402, 0.00464388336826016, 0.029071694904083012, 0.028961724869175698, 0.025547634198883507, 0.02355741900362851, 0.016994930017214083, 0.026280726261476928, 0.020012009657657148, 0.0031131661121096554, 0.003754772946613749, 9.999999999998899e-05, 0.02817830737726723, 0.004944865411053767, 0.01567354934849352, 0.04079906737470318, 0.02190796786304805, 0.040710496693566856, 0.004517598686790691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03897650159871724, 0.06591285435005301, 0.05841991006428093, 0.018249614271931724, 0.044207103858696195, 0.06137663210694322, 0.028112918541723264, 0.03764106474709372, 0.028773075124496117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009927690390123978, 9.999999999998899e-05, 0.007270014061743546, 9.999999999998899e-05, 0.19068640509530477, 0.2573941129539329, 0.21525372304954304, 0.1945366560313313, 0.20639200227652754, 0.2448703577841217, 0.21240790365607332, 0.19532619200947665, 0.22312620051565757, 0.08283901027492868, 0.05037264412657283, 0.08917449028474678, 0.04415971275539354, 0.0445946710973012, 0.05703032571923505, 0.047125925152927683, 0.06345269208260174, 0.04217372261907093, 0.1255668207250239, 0.14720151630406286, 0.15990110933656176, 0.11427845819757598, 0.11582480773503612, 0.11220224322691263, 0.11528917650514081, 0.11422391590641268, 0.13434838763878776, 0.16309186782536855, 0.1870827213926355, 0.17553836465630357, 0.1599490923506921, 0.17374867263265548, 0.18608000401220592, 0.185824795491228, 0.17714554208629785, 0.21314153154102355, 0.10512691288193599, 0.10888272534284715, 0.12004388051277803, 0.11215802333258384, 0.11811411998445875, 0.13299796385949159, 0.12916083913425513, 0.11971458347092778, 0.11670245720969363, 0.15423566379798015, 0.20575522175833627, 0.15728473463553727, 0.1582368523799449, 0.15507294306146846, 0.16565075879575109, 0.17325245079769624, 0.142976179374373, 0.16250351311911904, 0.17178332581141365, 0.14641492938357425, 0.1628585893591893, 0.16453969377486788, 0.15548107422696322, 0.15261980230383887, 0.14245873638318862, 0.14429708594350088, 0.15933423341159847, 0.14830689215811454, 0.24728315445828608, 0.13882899966339934, 0.1460606454449166, 0.14625313640426063, 0.1562812819409668, 0.15802299345199589, 0.1521474212898971, 0.14248595003895115, 0.22344119082652836, 0.17212438971490152, 0.24923673669580448, 0.13235272302684065, 0.18993120704871658, 0.12366977411574076, 0.15767990432549905, 0.15854225240380215, 0.16043480210008276, 0.17242506725925089, 0.1681742716580671, 0.1761689088276024, 0.20029027930288779, 0.18341355048423735, 0.1976012995016373, 0.18282011724399627, 0.17786313138807364, 0.19086695981192692, 0.0627818852464227, 0.04665421591323338, 0.04638978728525067, 0.06726930552352628, 0.06833238018018872, 0.05412719672503774, 0.05413159146001867, 0.05396101813424503, 0.0459361141651039]}, "mutation_prompt": null}
{"id": "34e6e421-0da2-49ae-8c0a-0de3f9cdec9b", "solution": "import numpy as np\n\nclass AdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size)) * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3), 0.1, 0.9)\n\n        return objective_function(gbest)", "name": "AdaptiveInertiaDEPSO", "description": "Implementing a self-adaptive mechanism to adjust the inertia weight during optimization to accelerate convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "19c786fe-bc34-4b24-8b63-a89b2581bf73", "metadata": {"aucs": [0.2105328315709748, 0.2287237653099946, 0.2391720551218799, 0.22310358091595894, 0.23098032883198716, 0.20714964981947082, 0.21299462103319178, 0.2217385366686614, 0.20835967817888712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06582498465405773, 0.05683951085545358, 0.06128651778463279, 0.05781811136353043, 0.06254907972293056, 0.05275714972852186, 0.04229850741059449, 0.038942369315357994, 0.04394037160676467, 0.03940002405577159, 0.03816650695096391, 0.03766360297945415, 0.049996529519184096, 0.03527834573971689, 0.053981134420557075, 0.03429899005328729, 0.03782702379871694, 0.03772941376526395, 0.8579268862660422, 0.7757320727951523, 0.9924036324456419, 0.2047187084797567, 0.9923790724424201, 0.974936080020159, 0.19957967239773622, 0.733442430719858, 0.9749212177531063, 0.10041882141790681, 0.1575729475971659, 0.09742331173861474, 0.07783735629055877, 0.11875096848600575, 0.10631252089614829, 0.0961104948292999, 0.08776894638415345, 0.11013049902088445, 0.16394058134007028, 0.11979751836025931, 0.16164442787968236, 0.12735338736136892, 0.13173304612966963, 0.1363828825060176, 0.1246916438392196, 0.12741774581462073, 0.1435789594118958, 9.999999999998899e-05, 0.010387851067205522, 0.06974797735704363, 0.017501019448046495, 0.01733856677038892, 0.02384688559990278, 0.004971672660513682, 0.02745063433904127, 0.03100375709649328, 0.002413524307603221, 0.05571951008291742, 0.0030876268031976295, 0.007065899122010388, 0.015950613301102035, 0.02551271357556739, 0.02220829348104958, 0.03635040719803584, 0.012702712322878673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028423856597167507, 0.029466165841295022, 0.10926854443423839, 0.041471199378458, 0.02612471548663975, 0.04192965760497014, 0.023699275006337173, 0.05836794205490803, 0.012737551688699056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023020801242739752, 0.0036172966020764363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006881617441724885, 0.02127083917129513, 0.21046177468111404, 0.2077473271731255, 0.3015961628071858, 0.20621185765772776, 0.2031442659418683, 0.20378956922637992, 0.2393141735373916, 0.19573227327873, 0.22959753530775862, 0.05223347673556089, 0.05941443148727954, 0.04867663065538963, 0.062219234392268286, 0.05588568724923282, 0.05601892154730137, 0.046890171696497784, 0.04868414177719038, 0.051332366108944316, 0.11878001264366389, 0.12218289664080217, 0.1548706901349879, 0.13128414179748082, 0.14440802029114785, 0.15897541803255977, 0.1234328540792643, 0.19452318283758163, 0.1211482338848966, 0.1735519929812379, 0.17395902188833423, 0.18245721255494562, 0.17736689578214115, 0.17521508940048403, 0.16868025906188044, 0.16727538227371386, 0.17642818570372343, 0.19012616719257824, 0.11977978257957489, 0.1143201812642397, 0.1252063885018384, 0.1298487926856129, 0.10325072719274853, 0.1154337771679107, 0.12554837445737888, 0.11967861316880812, 0.13427109043444874, 0.16950785602050655, 0.17735373671235344, 0.1666682830838352, 0.1636275912244377, 0.1602951617193823, 0.16174638737826152, 0.16117616736866736, 0.1622850441057857, 0.1675814826521751, 0.15509437451037134, 0.1457033671193373, 0.15741152717758233, 0.14849163823313516, 0.15985545518517918, 0.15472601118979423, 0.17732405040317556, 0.15454550536278255, 0.15071528996256567, 0.21897067818104243, 0.14939384391829957, 0.153891331021055, 0.2555272147938271, 0.16618329842343593, 0.2285215892142055, 0.19102555099583063, 0.14925493887281116, 0.19500503825387938, 0.16612176484630836, 0.19681357290916335, 0.19148916236549918, 0.16142106048394866, 0.14594675535731694, 0.19256956714513263, 0.17394183387671402, 0.16585162967730538, 0.15086349723304904, 0.18247925285511257, 0.17020521535117317, 0.16327627056111793, 0.18990738501476867, 0.17387633231983668, 0.18290938882004804, 0.17653482690154743, 0.20729512573460662, 0.1782987153870016, 0.05280033975975129, 0.05221607725515531, 0.048124869938143466, 0.046080325488098595, 0.05865867794886903, 0.05467173136567505, 0.05378209418514235, 0.05572206858616269, 0.05202670123051012]}, "mutation_prompt": null}
{"id": "e76915cd-9196-4cfd-ace0-2f406be708d3", "solution": "import numpy as np\n\nclass AdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size)) * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3), 0.1, 0.9)\n\n        return objective_function(gbest)", "name": "AdaptiveInertiaDEPSO", "description": "Implementing a self-adaptive mechanism to adjust the inertia weight during optimization to accelerate convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "19c786fe-bc34-4b24-8b63-a89b2581bf73", "metadata": {"aucs": [0.2105328315709748, 0.2287237653099946, 0.2391720551218799, 0.22310358091595894, 0.23098032883198716, 0.20714964981947082, 0.21299462103319178, 0.2217385366686614, 0.20835967817888712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06582498465405773, 0.05683951085545358, 0.06128651778463279, 0.05781811136353043, 0.06254907972293056, 0.05275714972852186, 0.04229850741059449, 0.038942369315357994, 0.04394037160676467, 0.03940002405577159, 0.03816650695096391, 0.03766360297945415, 0.049996529519184096, 0.03527834573971689, 0.053981134420557075, 0.03429899005328729, 0.03782702379871694, 0.03772941376526395, 0.8579268862660422, 0.7757320727951523, 0.9924036324456419, 0.2047187084797567, 0.9923790724424201, 0.974936080020159, 0.19957967239773622, 0.733442430719858, 0.9749212177531063, 0.10041882141790681, 0.1575729475971659, 0.09742331173861474, 0.07783735629055877, 0.11875096848600575, 0.10631252089614829, 0.0961104948292999, 0.08776894638415345, 0.11013049902088445, 0.16394058134007028, 0.11979751836025931, 0.16164442787968236, 0.12735338736136892, 0.13173304612966963, 0.1363828825060176, 0.1246916438392196, 0.12741774581462073, 0.1435789594118958, 9.999999999998899e-05, 0.010387851067205522, 0.06974797735704363, 0.017501019448046495, 0.01733856677038892, 0.02384688559990278, 0.004971672660513682, 0.02745063433904127, 0.03100375709649328, 0.002413524307603221, 0.05571951008291742, 0.0030876268031976295, 0.007065899122010388, 0.015950613301102035, 0.02551271357556739, 0.02220829348104958, 0.03635040719803584, 0.012702712322878673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028423856597167507, 0.029466165841295022, 0.10926854443423839, 0.041471199378458, 0.02612471548663975, 0.04192965760497014, 0.023699275006337173, 0.05836794205490803, 0.012737551688699056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023020801242739752, 0.0036172966020764363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006881617441724885, 0.02127083917129513, 0.21046177468111404, 0.2077473271731255, 0.3015961628071858, 0.20621185765772776, 0.2031442659418683, 0.20378956922637992, 0.2393141735373916, 0.19573227327873, 0.22959753530775862, 0.05223347673556089, 0.05941443148727954, 0.04867663065538963, 0.062219234392268286, 0.05588568724923282, 0.05601892154730137, 0.046890171696497784, 0.04868414177719038, 0.051332366108944316, 0.11878001264366389, 0.12218289664080217, 0.1548706901349879, 0.13128414179748082, 0.14440802029114785, 0.15897541803255977, 0.1234328540792643, 0.19452318283758163, 0.1211482338848966, 0.1735519929812379, 0.17395902188833423, 0.18245721255494562, 0.17736689578214115, 0.17521508940048403, 0.16868025906188044, 0.16727538227371386, 0.17642818570372343, 0.19012616719257824, 0.11977978257957489, 0.1143201812642397, 0.1252063885018384, 0.1298487926856129, 0.10325072719274853, 0.1154337771679107, 0.12554837445737888, 0.11967861316880812, 0.13427109043444874, 0.16950785602050655, 0.17735373671235344, 0.1666682830838352, 0.1636275912244377, 0.1602951617193823, 0.16174638737826152, 0.16117616736866736, 0.1622850441057857, 0.1675814826521751, 0.15509437451037134, 0.1457033671193373, 0.15741152717758233, 0.14849163823313516, 0.15985545518517918, 0.15472601118979423, 0.17732405040317556, 0.15454550536278255, 0.15071528996256567, 0.21897067818104243, 0.14939384391829957, 0.153891331021055, 0.2555272147938271, 0.16618329842343593, 0.2285215892142055, 0.19102555099583063, 0.14925493887281116, 0.19500503825387938, 0.16612176484630836, 0.19681357290916335, 0.19148916236549918, 0.16142106048394866, 0.14594675535731694, 0.19256956714513263, 0.17394183387671402, 0.16585162967730538, 0.15086349723304904, 0.18247925285511257, 0.17020521535117317, 0.16327627056111793, 0.18990738501476867, 0.17387633231983668, 0.18290938882004804, 0.17653482690154743, 0.20729512573460662, 0.1782987153870016, 0.05280033975975129, 0.05221607725515531, 0.048124869938143466, 0.046080325488098595, 0.05865867794886903, 0.05467173136567505, 0.05378209418514235, 0.05572206858616269, 0.05202670123051012]}, "mutation_prompt": null}
{"id": "7f593b99-d4d1-4813-af0e-3f22d7fc1a5f", "solution": "import numpy as np\n\nclass AdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size)) * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3), 0.1, 0.9)\n\n        return objective_function(gbest)", "name": "AdaptiveInertiaDEPSO", "description": "Implementing a self-adaptive mechanism to adjust the inertia weight during optimization to accelerate convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "19c786fe-bc34-4b24-8b63-a89b2581bf73", "metadata": {"aucs": [0.2105328315709748, 0.2287237653099946, 0.2391720551218799, 0.22310358091595894, 0.23098032883198716, 0.20714964981947082, 0.21299462103319178, 0.2217385366686614, 0.20835967817888712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06582498465405773, 0.05683951085545358, 0.06128651778463279, 0.05781811136353043, 0.06254907972293056, 0.05275714972852186, 0.04229850741059449, 0.038942369315357994, 0.04394037160676467, 0.03940002405577159, 0.03816650695096391, 0.03766360297945415, 0.049996529519184096, 0.03527834573971689, 0.053981134420557075, 0.03429899005328729, 0.03782702379871694, 0.03772941376526395, 0.8579268862660422, 0.7757320727951523, 0.9924036324456419, 0.2047187084797567, 0.9923790724424201, 0.974936080020159, 0.19957967239773622, 0.733442430719858, 0.9749212177531063, 0.10041882141790681, 0.1575729475971659, 0.09742331173861474, 0.07783735629055877, 0.11875096848600575, 0.10631252089614829, 0.0961104948292999, 0.08776894638415345, 0.11013049902088445, 0.16394058134007028, 0.11979751836025931, 0.16164442787968236, 0.12735338736136892, 0.13173304612966963, 0.1363828825060176, 0.1246916438392196, 0.12741774581462073, 0.1435789594118958, 9.999999999998899e-05, 0.010387851067205522, 0.06974797735704363, 0.017501019448046495, 0.01733856677038892, 0.02384688559990278, 0.004971672660513682, 0.02745063433904127, 0.03100375709649328, 0.002413524307603221, 0.05571951008291742, 0.0030876268031976295, 0.007065899122010388, 0.015950613301102035, 0.02551271357556739, 0.02220829348104958, 0.03635040719803584, 0.012702712322878673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028423856597167507, 0.029466165841295022, 0.10926854443423839, 0.041471199378458, 0.02612471548663975, 0.04192965760497014, 0.023699275006337173, 0.05836794205490803, 0.012737551688699056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023020801242739752, 0.0036172966020764363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006881617441724885, 0.02127083917129513, 0.21046177468111404, 0.2077473271731255, 0.3015961628071858, 0.20621185765772776, 0.2031442659418683, 0.20378956922637992, 0.2393141735373916, 0.19573227327873, 0.22959753530775862, 0.05223347673556089, 0.05941443148727954, 0.04867663065538963, 0.062219234392268286, 0.05588568724923282, 0.05601892154730137, 0.046890171696497784, 0.04868414177719038, 0.051332366108944316, 0.11878001264366389, 0.12218289664080217, 0.1548706901349879, 0.13128414179748082, 0.14440802029114785, 0.15897541803255977, 0.1234328540792643, 0.19452318283758163, 0.1211482338848966, 0.1735519929812379, 0.17395902188833423, 0.18245721255494562, 0.17736689578214115, 0.17521508940048403, 0.16868025906188044, 0.16727538227371386, 0.17642818570372343, 0.19012616719257824, 0.11977978257957489, 0.1143201812642397, 0.1252063885018384, 0.1298487926856129, 0.10325072719274853, 0.1154337771679107, 0.12554837445737888, 0.11967861316880812, 0.13427109043444874, 0.16950785602050655, 0.17735373671235344, 0.1666682830838352, 0.1636275912244377, 0.1602951617193823, 0.16174638737826152, 0.16117616736866736, 0.1622850441057857, 0.1675814826521751, 0.15509437451037134, 0.1457033671193373, 0.15741152717758233, 0.14849163823313516, 0.15985545518517918, 0.15472601118979423, 0.17732405040317556, 0.15454550536278255, 0.15071528996256567, 0.21897067818104243, 0.14939384391829957, 0.153891331021055, 0.2555272147938271, 0.16618329842343593, 0.2285215892142055, 0.19102555099583063, 0.14925493887281116, 0.19500503825387938, 0.16612176484630836, 0.19681357290916335, 0.19148916236549918, 0.16142106048394866, 0.14594675535731694, 0.19256956714513263, 0.17394183387671402, 0.16585162967730538, 0.15086349723304904, 0.18247925285511257, 0.17020521535117317, 0.16327627056111793, 0.18990738501476867, 0.17387633231983668, 0.18290938882004804, 0.17653482690154743, 0.20729512573460662, 0.1782987153870016, 0.05280033975975129, 0.05221607725515531, 0.048124869938143466, 0.046080325488098595, 0.05865867794886903, 0.05467173136567505, 0.05378209418514235, 0.05572206858616269, 0.05202670123051012]}, "mutation_prompt": null}
{"id": "72294230-2559-40a8-a303-05bd70c0675d", "solution": "import numpy as np\n\nclass AdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size)) * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3), 0.1, 0.9)\n\n        return objective_function(gbest)", "name": "AdaptiveInertiaDEPSO", "description": "Implementing a self-adaptive mechanism to adjust the inertia weight during optimization to accelerate convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "19c786fe-bc34-4b24-8b63-a89b2581bf73", "metadata": {"aucs": [0.2105328315709748, 0.2287237653099946, 0.2391720551218799, 0.22310358091595894, 0.23098032883198716, 0.20714964981947082, 0.21299462103319178, 0.2217385366686614, 0.20835967817888712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06582498465405773, 0.05683951085545358, 0.06128651778463279, 0.05781811136353043, 0.06254907972293056, 0.05275714972852186, 0.04229850741059449, 0.038942369315357994, 0.04394037160676467, 0.03940002405577159, 0.03816650695096391, 0.03766360297945415, 0.049996529519184096, 0.03527834573971689, 0.053981134420557075, 0.03429899005328729, 0.03782702379871694, 0.03772941376526395, 0.8579268862660422, 0.7757320727951523, 0.9924036324456419, 0.2047187084797567, 0.9923790724424201, 0.974936080020159, 0.19957967239773622, 0.733442430719858, 0.9749212177531063, 0.10041882141790681, 0.1575729475971659, 0.09742331173861474, 0.07783735629055877, 0.11875096848600575, 0.10631252089614829, 0.0961104948292999, 0.08776894638415345, 0.11013049902088445, 0.16394058134007028, 0.11979751836025931, 0.16164442787968236, 0.12735338736136892, 0.13173304612966963, 0.1363828825060176, 0.1246916438392196, 0.12741774581462073, 0.1435789594118958, 9.999999999998899e-05, 0.010387851067205522, 0.06974797735704363, 0.017501019448046495, 0.01733856677038892, 0.02384688559990278, 0.004971672660513682, 0.02745063433904127, 0.03100375709649328, 0.002413524307603221, 0.05571951008291742, 0.0030876268031976295, 0.007065899122010388, 0.015950613301102035, 0.02551271357556739, 0.02220829348104958, 0.03635040719803584, 0.012702712322878673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028423856597167507, 0.029466165841295022, 0.10926854443423839, 0.041471199378458, 0.02612471548663975, 0.04192965760497014, 0.023699275006337173, 0.05836794205490803, 0.012737551688699056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023020801242739752, 0.0036172966020764363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006881617441724885, 0.02127083917129513, 0.21046177468111404, 0.2077473271731255, 0.3015961628071858, 0.20621185765772776, 0.2031442659418683, 0.20378956922637992, 0.2393141735373916, 0.19573227327873, 0.22959753530775862, 0.05223347673556089, 0.05941443148727954, 0.04867663065538963, 0.062219234392268286, 0.05588568724923282, 0.05601892154730137, 0.046890171696497784, 0.04868414177719038, 0.051332366108944316, 0.11878001264366389, 0.12218289664080217, 0.1548706901349879, 0.13128414179748082, 0.14440802029114785, 0.15897541803255977, 0.1234328540792643, 0.19452318283758163, 0.1211482338848966, 0.1735519929812379, 0.17395902188833423, 0.18245721255494562, 0.17736689578214115, 0.17521508940048403, 0.16868025906188044, 0.16727538227371386, 0.17642818570372343, 0.19012616719257824, 0.11977978257957489, 0.1143201812642397, 0.1252063885018384, 0.1298487926856129, 0.10325072719274853, 0.1154337771679107, 0.12554837445737888, 0.11967861316880812, 0.13427109043444874, 0.16950785602050655, 0.17735373671235344, 0.1666682830838352, 0.1636275912244377, 0.1602951617193823, 0.16174638737826152, 0.16117616736866736, 0.1622850441057857, 0.1675814826521751, 0.15509437451037134, 0.1457033671193373, 0.15741152717758233, 0.14849163823313516, 0.15985545518517918, 0.15472601118979423, 0.17732405040317556, 0.15454550536278255, 0.15071528996256567, 0.21897067818104243, 0.14939384391829957, 0.153891331021055, 0.2555272147938271, 0.16618329842343593, 0.2285215892142055, 0.19102555099583063, 0.14925493887281116, 0.19500503825387938, 0.16612176484630836, 0.19681357290916335, 0.19148916236549918, 0.16142106048394866, 0.14594675535731694, 0.19256956714513263, 0.17394183387671402, 0.16585162967730538, 0.15086349723304904, 0.18247925285511257, 0.17020521535117317, 0.16327627056111793, 0.18990738501476867, 0.17387633231983668, 0.18290938882004804, 0.17653482690154743, 0.20729512573460662, 0.1782987153870016, 0.05280033975975129, 0.05221607725515531, 0.048124869938143466, 0.046080325488098595, 0.05865867794886903, 0.05467173136567505, 0.05378209418514235, 0.05572206858616269, 0.05202670123051012]}, "mutation_prompt": null}
{"id": "35723305-11d9-43e5-a7d1-d91d267f7346", "solution": "import numpy as np\n\nclass AdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size)) * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3), 0.1, 0.9)\n\n        return objective_function(gbest)", "name": "AdaptiveInertiaDEPSO", "description": "Implementing a self-adaptive mechanism to adjust the inertia weight during optimization to accelerate convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "19c786fe-bc34-4b24-8b63-a89b2581bf73", "metadata": {"aucs": [0.2105328315709748, 0.2287237653099946, 0.2391720551218799, 0.22310358091595894, 0.23098032883198716, 0.20714964981947082, 0.21299462103319178, 0.2217385366686614, 0.20835967817888712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06582498465405773, 0.05683951085545358, 0.06128651778463279, 0.05781811136353043, 0.06254907972293056, 0.05275714972852186, 0.04229850741059449, 0.038942369315357994, 0.04394037160676467, 0.03940002405577159, 0.03816650695096391, 0.03766360297945415, 0.049996529519184096, 0.03527834573971689, 0.053981134420557075, 0.03429899005328729, 0.03782702379871694, 0.03772941376526395, 0.8579268862660422, 0.7757320727951523, 0.9924036324456419, 0.2047187084797567, 0.9923790724424201, 0.974936080020159, 0.19957967239773622, 0.733442430719858, 0.9749212177531063, 0.10041882141790681, 0.1575729475971659, 0.09742331173861474, 0.07783735629055877, 0.11875096848600575, 0.10631252089614829, 0.0961104948292999, 0.08776894638415345, 0.11013049902088445, 0.16394058134007028, 0.11979751836025931, 0.16164442787968236, 0.12735338736136892, 0.13173304612966963, 0.1363828825060176, 0.1246916438392196, 0.12741774581462073, 0.1435789594118958, 9.999999999998899e-05, 0.010387851067205522, 0.06974797735704363, 0.017501019448046495, 0.01733856677038892, 0.02384688559990278, 0.004971672660513682, 0.02745063433904127, 0.03100375709649328, 0.002413524307603221, 0.05571951008291742, 0.0030876268031976295, 0.007065899122010388, 0.015950613301102035, 0.02551271357556739, 0.02220829348104958, 0.03635040719803584, 0.012702712322878673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028423856597167507, 0.029466165841295022, 0.10926854443423839, 0.041471199378458, 0.02612471548663975, 0.04192965760497014, 0.023699275006337173, 0.05836794205490803, 0.012737551688699056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023020801242739752, 0.0036172966020764363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006881617441724885, 0.02127083917129513, 0.21046177468111404, 0.2077473271731255, 0.3015961628071858, 0.20621185765772776, 0.2031442659418683, 0.20378956922637992, 0.2393141735373916, 0.19573227327873, 0.22959753530775862, 0.05223347673556089, 0.05941443148727954, 0.04867663065538963, 0.062219234392268286, 0.05588568724923282, 0.05601892154730137, 0.046890171696497784, 0.04868414177719038, 0.051332366108944316, 0.11878001264366389, 0.12218289664080217, 0.1548706901349879, 0.13128414179748082, 0.14440802029114785, 0.15897541803255977, 0.1234328540792643, 0.19452318283758163, 0.1211482338848966, 0.1735519929812379, 0.17395902188833423, 0.18245721255494562, 0.17736689578214115, 0.17521508940048403, 0.16868025906188044, 0.16727538227371386, 0.17642818570372343, 0.19012616719257824, 0.11977978257957489, 0.1143201812642397, 0.1252063885018384, 0.1298487926856129, 0.10325072719274853, 0.1154337771679107, 0.12554837445737888, 0.11967861316880812, 0.13427109043444874, 0.16950785602050655, 0.17735373671235344, 0.1666682830838352, 0.1636275912244377, 0.1602951617193823, 0.16174638737826152, 0.16117616736866736, 0.1622850441057857, 0.1675814826521751, 0.15509437451037134, 0.1457033671193373, 0.15741152717758233, 0.14849163823313516, 0.15985545518517918, 0.15472601118979423, 0.17732405040317556, 0.15454550536278255, 0.15071528996256567, 0.21897067818104243, 0.14939384391829957, 0.153891331021055, 0.2555272147938271, 0.16618329842343593, 0.2285215892142055, 0.19102555099583063, 0.14925493887281116, 0.19500503825387938, 0.16612176484630836, 0.19681357290916335, 0.19148916236549918, 0.16142106048394866, 0.14594675535731694, 0.19256956714513263, 0.17394183387671402, 0.16585162967730538, 0.15086349723304904, 0.18247925285511257, 0.17020521535117317, 0.16327627056111793, 0.18990738501476867, 0.17387633231983668, 0.18290938882004804, 0.17653482690154743, 0.20729512573460662, 0.1782987153870016, 0.05280033975975129, 0.05221607725515531, 0.048124869938143466, 0.046080325488098595, 0.05865867794886903, 0.05467173136567505, 0.05378209418514235, 0.05572206858616269, 0.05202670123051012]}, "mutation_prompt": null}
{"id": "cf9260b2-3bb0-401e-b7b1-e553749f1a6b", "solution": "import numpy as np\n\nclass AdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size)) * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3), 0.1, 0.9)\n\n        return objective_function(gbest)", "name": "AdaptiveInertiaDEPSO", "description": "Implementing a self-adaptive mechanism to adjust the inertia weight during optimization to accelerate convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "19c786fe-bc34-4b24-8b63-a89b2581bf73", "metadata": {"aucs": [0.2105328315709748, 0.2287237653099946, 0.2391720551218799, 0.22310358091595894, 0.23098032883198716, 0.20714964981947082, 0.21299462103319178, 0.2217385366686614, 0.20835967817888712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06582498465405773, 0.05683951085545358, 0.06128651778463279, 0.05781811136353043, 0.06254907972293056, 0.05275714972852186, 0.04229850741059449, 0.038942369315357994, 0.04394037160676467, 0.03940002405577159, 0.03816650695096391, 0.03766360297945415, 0.049996529519184096, 0.03527834573971689, 0.053981134420557075, 0.03429899005328729, 0.03782702379871694, 0.03772941376526395, 0.8579268862660422, 0.7757320727951523, 0.9924036324456419, 0.2047187084797567, 0.9923790724424201, 0.974936080020159, 0.19957967239773622, 0.733442430719858, 0.9749212177531063, 0.10041882141790681, 0.1575729475971659, 0.09742331173861474, 0.07783735629055877, 0.11875096848600575, 0.10631252089614829, 0.0961104948292999, 0.08776894638415345, 0.11013049902088445, 0.16394058134007028, 0.11979751836025931, 0.16164442787968236, 0.12735338736136892, 0.13173304612966963, 0.1363828825060176, 0.1246916438392196, 0.12741774581462073, 0.1435789594118958, 9.999999999998899e-05, 0.010387851067205522, 0.06974797735704363, 0.017501019448046495, 0.01733856677038892, 0.02384688559990278, 0.004971672660513682, 0.02745063433904127, 0.03100375709649328, 0.002413524307603221, 0.05571951008291742, 0.0030876268031976295, 0.007065899122010388, 0.015950613301102035, 0.02551271357556739, 0.02220829348104958, 0.03635040719803584, 0.012702712322878673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028423856597167507, 0.029466165841295022, 0.10926854443423839, 0.041471199378458, 0.02612471548663975, 0.04192965760497014, 0.023699275006337173, 0.05836794205490803, 0.012737551688699056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023020801242739752, 0.0036172966020764363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006881617441724885, 0.02127083917129513, 0.21046177468111404, 0.2077473271731255, 0.3015961628071858, 0.20621185765772776, 0.2031442659418683, 0.20378956922637992, 0.2393141735373916, 0.19573227327873, 0.22959753530775862, 0.05223347673556089, 0.05941443148727954, 0.04867663065538963, 0.062219234392268286, 0.05588568724923282, 0.05601892154730137, 0.046890171696497784, 0.04868414177719038, 0.051332366108944316, 0.11878001264366389, 0.12218289664080217, 0.1548706901349879, 0.13128414179748082, 0.14440802029114785, 0.15897541803255977, 0.1234328540792643, 0.19452318283758163, 0.1211482338848966, 0.1735519929812379, 0.17395902188833423, 0.18245721255494562, 0.17736689578214115, 0.17521508940048403, 0.16868025906188044, 0.16727538227371386, 0.17642818570372343, 0.19012616719257824, 0.11977978257957489, 0.1143201812642397, 0.1252063885018384, 0.1298487926856129, 0.10325072719274853, 0.1154337771679107, 0.12554837445737888, 0.11967861316880812, 0.13427109043444874, 0.16950785602050655, 0.17735373671235344, 0.1666682830838352, 0.1636275912244377, 0.1602951617193823, 0.16174638737826152, 0.16117616736866736, 0.1622850441057857, 0.1675814826521751, 0.15509437451037134, 0.1457033671193373, 0.15741152717758233, 0.14849163823313516, 0.15985545518517918, 0.15472601118979423, 0.17732405040317556, 0.15454550536278255, 0.15071528996256567, 0.21897067818104243, 0.14939384391829957, 0.153891331021055, 0.2555272147938271, 0.16618329842343593, 0.2285215892142055, 0.19102555099583063, 0.14925493887281116, 0.19500503825387938, 0.16612176484630836, 0.19681357290916335, 0.19148916236549918, 0.16142106048394866, 0.14594675535731694, 0.19256956714513263, 0.17394183387671402, 0.16585162967730538, 0.15086349723304904, 0.18247925285511257, 0.17020521535117317, 0.16327627056111793, 0.18990738501476867, 0.17387633231983668, 0.18290938882004804, 0.17653482690154743, 0.20729512573460662, 0.1782987153870016, 0.05280033975975129, 0.05221607725515531, 0.048124869938143466, 0.046080325488098595, 0.05865867794886903, 0.05467173136567505, 0.05378209418514235, 0.05572206858616269, 0.05202670123051012]}, "mutation_prompt": null}
{"id": "51ec83ed-fcf9-46d0-b171-3bed9ae557e8", "solution": "import numpy as np\n\nclass AdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size)) * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3), 0.1, 0.9)\n\n        return objective_function(gbest)", "name": "AdaptiveInertiaDEPSO", "description": "Implementing a self-adaptive mechanism to adjust the inertia weight during optimization to accelerate convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "19c786fe-bc34-4b24-8b63-a89b2581bf73", "metadata": {"aucs": [0.2105328315709748, 0.2287237653099946, 0.2391720551218799, 0.22310358091595894, 0.23098032883198716, 0.20714964981947082, 0.21299462103319178, 0.2217385366686614, 0.20835967817888712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06582498465405773, 0.05683951085545358, 0.06128651778463279, 0.05781811136353043, 0.06254907972293056, 0.05275714972852186, 0.04229850741059449, 0.038942369315357994, 0.04394037160676467, 0.03940002405577159, 0.03816650695096391, 0.03766360297945415, 0.049996529519184096, 0.03527834573971689, 0.053981134420557075, 0.03429899005328729, 0.03782702379871694, 0.03772941376526395, 0.8579268862660422, 0.7757320727951523, 0.9924036324456419, 0.2047187084797567, 0.9923790724424201, 0.974936080020159, 0.19957967239773622, 0.733442430719858, 0.9749212177531063, 0.10041882141790681, 0.1575729475971659, 0.09742331173861474, 0.07783735629055877, 0.11875096848600575, 0.10631252089614829, 0.0961104948292999, 0.08776894638415345, 0.11013049902088445, 0.16394058134007028, 0.11979751836025931, 0.16164442787968236, 0.12735338736136892, 0.13173304612966963, 0.1363828825060176, 0.1246916438392196, 0.12741774581462073, 0.1435789594118958, 9.999999999998899e-05, 0.010387851067205522, 0.06974797735704363, 0.017501019448046495, 0.01733856677038892, 0.02384688559990278, 0.004971672660513682, 0.02745063433904127, 0.03100375709649328, 0.002413524307603221, 0.05571951008291742, 0.0030876268031976295, 0.007065899122010388, 0.015950613301102035, 0.02551271357556739, 0.02220829348104958, 0.03635040719803584, 0.012702712322878673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028423856597167507, 0.029466165841295022, 0.10926854443423839, 0.041471199378458, 0.02612471548663975, 0.04192965760497014, 0.023699275006337173, 0.05836794205490803, 0.012737551688699056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023020801242739752, 0.0036172966020764363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006881617441724885, 0.02127083917129513, 0.21046177468111404, 0.2077473271731255, 0.3015961628071858, 0.20621185765772776, 0.2031442659418683, 0.20378956922637992, 0.2393141735373916, 0.19573227327873, 0.22959753530775862, 0.05223347673556089, 0.05941443148727954, 0.04867663065538963, 0.062219234392268286, 0.05588568724923282, 0.05601892154730137, 0.046890171696497784, 0.04868414177719038, 0.051332366108944316, 0.11878001264366389, 0.12218289664080217, 0.1548706901349879, 0.13128414179748082, 0.14440802029114785, 0.15897541803255977, 0.1234328540792643, 0.19452318283758163, 0.1211482338848966, 0.1735519929812379, 0.17395902188833423, 0.18245721255494562, 0.17736689578214115, 0.17521508940048403, 0.16868025906188044, 0.16727538227371386, 0.17642818570372343, 0.19012616719257824, 0.11977978257957489, 0.1143201812642397, 0.1252063885018384, 0.1298487926856129, 0.10325072719274853, 0.1154337771679107, 0.12554837445737888, 0.11967861316880812, 0.13427109043444874, 0.16950785602050655, 0.17735373671235344, 0.1666682830838352, 0.1636275912244377, 0.1602951617193823, 0.16174638737826152, 0.16117616736866736, 0.1622850441057857, 0.1675814826521751, 0.15509437451037134, 0.1457033671193373, 0.15741152717758233, 0.14849163823313516, 0.15985545518517918, 0.15472601118979423, 0.17732405040317556, 0.15454550536278255, 0.15071528996256567, 0.21897067818104243, 0.14939384391829957, 0.153891331021055, 0.2555272147938271, 0.16618329842343593, 0.2285215892142055, 0.19102555099583063, 0.14925493887281116, 0.19500503825387938, 0.16612176484630836, 0.19681357290916335, 0.19148916236549918, 0.16142106048394866, 0.14594675535731694, 0.19256956714513263, 0.17394183387671402, 0.16585162967730538, 0.15086349723304904, 0.18247925285511257, 0.17020521535117317, 0.16327627056111793, 0.18990738501476867, 0.17387633231983668, 0.18290938882004804, 0.17653482690154743, 0.20729512573460662, 0.1782987153870016, 0.05280033975975129, 0.05221607725515531, 0.048124869938143466, 0.046080325488098595, 0.05865867794886903, 0.05467173136567505, 0.05378209418514235, 0.05572206858616269, 0.05202670123051012]}, "mutation_prompt": null}
{"id": "ab91e977-141c-47ae-9531-d26345a6548e", "solution": "import numpy as np\n\nclass AdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size)) * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size)) * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3), 0.1, 0.9)\n\n        return objective_function(gbest)", "name": "AdaptiveInertiaDEPSO", "description": "Implementing a self-adaptive mechanism to adjust the inertia weight during optimization to accelerate convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "19c786fe-bc34-4b24-8b63-a89b2581bf73", "metadata": {"aucs": [0.2105328315709748, 0.2287237653099946, 0.2391720551218799, 0.22310358091595894, 0.23098032883198716, 0.20714964981947082, 0.21299462103319178, 0.2217385366686614, 0.20835967817888712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06582498465405773, 0.05683951085545358, 0.06128651778463279, 0.05781811136353043, 0.06254907972293056, 0.05275714972852186, 0.04229850741059449, 0.038942369315357994, 0.04394037160676467, 0.03940002405577159, 0.03816650695096391, 0.03766360297945415, 0.049996529519184096, 0.03527834573971689, 0.053981134420557075, 0.03429899005328729, 0.03782702379871694, 0.03772941376526395, 0.8579268862660422, 0.7757320727951523, 0.9924036324456419, 0.2047187084797567, 0.9923790724424201, 0.974936080020159, 0.19957967239773622, 0.733442430719858, 0.9749212177531063, 0.10041882141790681, 0.1575729475971659, 0.09742331173861474, 0.07783735629055877, 0.11875096848600575, 0.10631252089614829, 0.0961104948292999, 0.08776894638415345, 0.11013049902088445, 0.16394058134007028, 0.11979751836025931, 0.16164442787968236, 0.12735338736136892, 0.13173304612966963, 0.1363828825060176, 0.1246916438392196, 0.12741774581462073, 0.1435789594118958, 9.999999999998899e-05, 0.010387851067205522, 0.06974797735704363, 0.017501019448046495, 0.01733856677038892, 0.02384688559990278, 0.004971672660513682, 0.02745063433904127, 0.03100375709649328, 0.002413524307603221, 0.05571951008291742, 0.0030876268031976295, 0.007065899122010388, 0.015950613301102035, 0.02551271357556739, 0.02220829348104958, 0.03635040719803584, 0.012702712322878673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028423856597167507, 0.029466165841295022, 0.10926854443423839, 0.041471199378458, 0.02612471548663975, 0.04192965760497014, 0.023699275006337173, 0.05836794205490803, 0.012737551688699056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023020801242739752, 0.0036172966020764363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006881617441724885, 0.02127083917129513, 0.21046177468111404, 0.2077473271731255, 0.3015961628071858, 0.20621185765772776, 0.2031442659418683, 0.20378956922637992, 0.2393141735373916, 0.19573227327873, 0.22959753530775862, 0.05223347673556089, 0.05941443148727954, 0.04867663065538963, 0.062219234392268286, 0.05588568724923282, 0.05601892154730137, 0.046890171696497784, 0.04868414177719038, 0.051332366108944316, 0.11878001264366389, 0.12218289664080217, 0.1548706901349879, 0.13128414179748082, 0.14440802029114785, 0.15897541803255977, 0.1234328540792643, 0.19452318283758163, 0.1211482338848966, 0.1735519929812379, 0.17395902188833423, 0.18245721255494562, 0.17736689578214115, 0.17521508940048403, 0.16868025906188044, 0.16727538227371386, 0.17642818570372343, 0.19012616719257824, 0.11977978257957489, 0.1143201812642397, 0.1252063885018384, 0.1298487926856129, 0.10325072719274853, 0.1154337771679107, 0.12554837445737888, 0.11967861316880812, 0.13427109043444874, 0.16950785602050655, 0.17735373671235344, 0.1666682830838352, 0.1636275912244377, 0.1602951617193823, 0.16174638737826152, 0.16117616736866736, 0.1622850441057857, 0.1675814826521751, 0.15509437451037134, 0.1457033671193373, 0.15741152717758233, 0.14849163823313516, 0.15985545518517918, 0.15472601118979423, 0.17732405040317556, 0.15454550536278255, 0.15071528996256567, 0.21897067818104243, 0.14939384391829957, 0.153891331021055, 0.2555272147938271, 0.16618329842343593, 0.2285215892142055, 0.19102555099583063, 0.14925493887281116, 0.19500503825387938, 0.16612176484630836, 0.19681357290916335, 0.19148916236549918, 0.16142106048394866, 0.14594675535731694, 0.19256956714513263, 0.17394183387671402, 0.16585162967730538, 0.15086349723304904, 0.18247925285511257, 0.17020521535117317, 0.16327627056111793, 0.18990738501476867, 0.17387633231983668, 0.18290938882004804, 0.17653482690154743, 0.20729512573460662, 0.1782987153870016, 0.05280033975975129, 0.05221607725515531, 0.048124869938143466, 0.046080325488098595, 0.05865867794886903, 0.05467173136567505, 0.05378209418514235, 0.05572206858616269, 0.05202670123051012]}, "mutation_prompt": null}
{"id": "5de288ba-e150-43a2-9f77-a8bfeed24067", "solution": "import numpy as np\n\nclass FastAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size))**1.2 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size))**1.2 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3*0.9), 0.1, 0.9)\n            \n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3*0.9), 0.1, 0.9) \n\n        return objective_function(gbest)", "name": "FastAdaptiveInertiaDEPSO", "description": "Accelerating convergence speed by dynamically adjusting the mutation factor and crossover rate to exploit promising regions more effectively.", "configspace": "", "generation": 41, "fitness": 0.1326702486486668, "feedback": "The algorithm FastAdaptiveInertiaDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "19c786fe-bc34-4b24-8b63-a89b2581bf73", "metadata": {"aucs": [0.2621899481435921, 0.27571838628438483, 0.2619489373293803, 0.21456512561968488, 0.21784646839091815, 0.26918841547977446, 0.22530551212918482, 0.24691498666456568, 0.2294478627688783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058399298690485324, 0.08675665819313638, 0.07761109950731937, 0.0784113004533783, 0.05711127462299537, 0.06258843625701827, 0.07869818830271402, 0.07462378791865909, 0.07488621787739247, 0.04912772494913242, 0.0814868858614507, 0.05644288513514517, 0.05234696578261788, 0.05240094306281173, 0.0594586911942222, 0.05889666793752091, 0.05979698178791004, 0.06158027820799217, 0.16157728253246717, 0.666817659504604, 0.1692056363451937, 0.17320141297938663, 0.8186852981576207, 0.16056556345806472, 0.2756768532845558, 0.8184172797464423, 0.3169499357151211, 0.09866724398854876, 0.11411437396015822, 0.12139087147959615, 0.1181173801048826, 0.10901485897648966, 0.11725002617413305, 0.12698251005615224, 0.14402058806052742, 0.10939873409171619, 0.18448718553356525, 0.17451878046869385, 0.171759049942114, 0.16801027234769605, 0.16260042998426238, 0.162444268042522, 0.17898930579830508, 0.19896814178847666, 0.1691795699319435, 0.07505563923098912, 0.06177069832377946, 0.07864233565627843, 0.08491400878231814, 0.10965739601164837, 0.05091539504894249, 0.06017413844923869, 0.05060827307478233, 0.03311831956938582, 0.13385645328044682, 0.11747716461776503, 0.10804684309223245, 0.14274022603694447, 0.13333412417487, 0.13212462346070009, 0.13873931675989948, 0.13204159679333738, 0.1182067024333292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06704705256434262, 0.0586036792051271, 0.08332937922845196, 0.048311938501796825, 0.052482977756011295, 0.0487381425466068, 0.06634236362384238, 0.09053829115744116, 0.05414191147384895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02273431296824968, 0.005684470201508196, 0.002219104025057872, 0.009138647197879934, 0.0077374179235873974, 0.005178405564159272, 0.012391100177164716, 0.02528497621186221, 9.999999999998899e-05, 0.27226981124367244, 0.25187163429962756, 0.33497571187512754, 0.28787916843265926, 0.2583730676328021, 0.23386917912059824, 0.28994668201005014, 0.28499181426371667, 0.3074474058471266, 0.06398963658729406, 0.06427285952680017, 0.05011347179979697, 0.07356488252532944, 0.06727840693365705, 0.07231110558667242, 0.06446128948964303, 0.061753807324015586, 0.058027280810119874, 0.17380484683237407, 0.13939793788600818, 0.13927516722527944, 0.1472887978221603, 0.13261784838299795, 0.12605017347817316, 0.12587838393133532, 0.1620431400874608, 0.12361138624572976, 0.18148402739646086, 0.19231540867670582, 0.1877964265361517, 0.21924266627356315, 0.22551462926764843, 0.22138652742660014, 0.18340075622017749, 0.18618996610174454, 0.19195782455185972, 0.1301996288270717, 0.11758438931327653, 0.13827343546704995, 0.16289792023574023, 0.15223377514742786, 0.1570518398462224, 0.12402114369112482, 0.13239993086107193, 0.13365321627004667, 0.20722105342819264, 0.21271146727848123, 0.18155207694258813, 0.19647216958780822, 0.1668770438192232, 0.2118394843075011, 0.19227240149843405, 0.18669444524761436, 0.2162251332664017, 0.16565414733180095, 0.15779083880891298, 0.16798817470715544, 0.16863039573395744, 0.15962735560375318, 0.16672846759045623, 0.16771413111513445, 0.16586664951722052, 0.16314719695349156, 0.16337918070415058, 0.17239955605756663, 0.1560217173829036, 0.18257597483013244, 0.21814070229240168, 0.19126226582727301, 0.1639052429711766, 0.2650465127057907, 0.22999536357206452, 0.3249466131396549, 0.20793983047273445, 0.23511354931469064, 0.22823277993107494, 0.19046799915439994, 0.19515413622686906, 0.17408787389787317, 0.21349891238763707, 0.22708112856035034, 0.18126190636631723, 0.19515589506329212, 0.17879607667551622, 0.17735193940061422, 0.16725059563685551, 0.18370222620110566, 0.17749808998192362, 0.17338930147519427, 0.19306528607743634, 0.06616408442119903, 0.07635922381823257, 0.07557900182310784, 0.06552516625366644, 0.06561667812928695, 0.07886079080850761, 0.07531204099760103, 0.06516638514852602, 0.06260077222727212]}, "mutation_prompt": null}
{"id": "9f1c4633-684a-4f89-9596-791aaa6c8809", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3*1.1), 0.1, 0.9)\n            \n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3*1.1), 0.1, 0.9) \n\n        return objective_function(gbest)", "name": "ImprovedFastAdaptiveInertiaDEPSO", "description": "Improving convergence speed by dynamically adjusting the mutation factor and crossover rate based on the population diversity to exploit promising regions more effectively.", "configspace": "", "generation": 42, "fitness": 0.13078852403357338, "feedback": "The algorithm ImprovedFastAdaptiveInertiaDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.10.", "error": "", "parent_id": "5de288ba-e150-43a2-9f77-a8bfeed24067", "metadata": {"aucs": [0.2905338666748507, 0.2993612303230444, 0.2861273187392097, 0.21336980042745057, 0.22753896341980884, 0.21402909557663508, 0.23347569146692215, 0.2398193229340816, 0.21734233901497824, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02315582762948909, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06818126227372467, 0.06030357944052922, 0.07926718801644839, 0.06258791084513426, 0.06335113173761764, 0.05755444118203046, 0.06727300951913406, 0.06518164100146373, 0.09234923441346088, 0.05592950898719695, 0.0667866617526992, 0.07167408296030864, 0.05531143687440632, 0.04777090343777579, 0.06467480676073933, 0.04927059080139029, 0.06995374499282503, 0.08363195316894434, 0.16467889961308335, 0.1563946425623266, 0.8474301871625034, 0.16374070749901604, 0.5417096613897873, 0.13010206110195977, 0.5263024957203226, 0.1771508690817023, 0.18230380152752357, 0.108615044532823, 0.10279718713449748, 0.12515819731757982, 0.10566666146377335, 0.11838879202479524, 0.14150225446896425, 0.1366870332830873, 0.15978577864096, 0.11797564817247674, 0.1961646984067239, 0.19691062046941565, 0.17866086771889544, 0.20672450808623255, 0.1850878156797382, 0.1630117282735255, 0.14476982096062707, 0.1563582161947965, 0.1701898055029073, 0.059127808881923594, 0.07765808755291181, 0.08859693754087294, 0.06092099783477356, 0.0780822286088545, 0.06340659003597082, 0.10668137953131662, 0.050579451411703835, 0.05786583465763073, 0.12470210551275629, 0.13028871959839672, 0.08699283983143291, 0.11902205197582405, 0.13090218256174013, 0.1529431427750878, 0.11112855820349399, 0.12217803689842954, 0.12995777981913847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04515651378841379, 0.06511444825691992, 0.06792847887260722, 0.06271689428508342, 0.07669321996427247, 0.04554005296268138, 0.10461941667196151, 0.06777865693301932, 0.0646252542708251, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008383115056229684, 0.005794501969658583, 0.0050425156078565125, 0.0070411213243485316, 0.011441110206523941, 0.00848377373975584, 0.014119169101017404, 0.03208667014335076, 0.004106881970850962, 0.24339068364983218, 0.2675969398039456, 0.2607230497818397, 0.2505299575642608, 0.2518242047937286, 0.28006195159106173, 0.27688299624566803, 0.24235612823828978, 0.29077869884936347, 0.057492650410707946, 0.057051703430885614, 0.06100413384893322, 0.06072525372395088, 0.059664212738270495, 0.06710665341326749, 0.06683017019702109, 0.06341719961815484, 0.086649727466378, 0.14928664385185897, 0.1310618878429357, 0.1594910755592056, 0.12929839677451505, 0.12814291606101236, 0.14406500661424093, 0.12292147714878898, 0.13403600893866952, 0.12648376053281007, 0.1933749337531525, 0.1800549375339242, 0.18206578364113812, 0.22065934187066005, 0.21972408298906754, 0.2200190736205888, 0.18671245462395925, 0.18563169156926196, 0.19108435057457096, 0.13260432044079207, 0.13252732989422056, 0.12865476612966775, 0.1513338503523579, 0.16498702321074943, 0.15688480268828275, 0.1373524010624182, 0.1375994030534643, 0.13929065719602474, 0.20085238816752093, 0.18157998833737887, 0.17766753628403364, 0.1939302103117434, 0.19466592133405702, 0.18994074415536955, 0.19234844024438302, 0.19025308783587624, 0.1907375118092759, 0.1720735148379443, 0.17678694518440985, 0.16995088807035552, 0.16417470508065868, 0.16674711014006005, 0.17483712015740582, 0.17095500044946732, 0.16110987733731275, 0.1799399259906188, 0.2223613804650939, 0.16664802597607598, 0.16564905546259379, 0.17202182883202333, 0.23007747240950382, 0.2425516385088412, 0.28951728709575786, 0.3344819482258181, 0.3305582391159342, 0.25097370628341364, 0.23815762560657994, 0.27196320253887407, 0.2135639207127601, 0.21668526363571006, 0.17132439028170432, 0.16861494045393577, 0.1637343693661356, 0.15636156044567817, 0.2192191868768516, 0.18275672915604402, 0.17893739201964964, 0.17392650211673244, 0.17434466317200326, 0.17810579416860106, 0.18024862816999043, 0.17802240922901724, 0.18588391157770312, 0.05882807033484039, 0.067682134191558, 0.0830875581157492, 0.07018258922928, 0.0793931220657168, 0.07849551919587461, 0.06080330855731042, 0.06451220810761094, 0.07227892420913062]}, "mutation_prompt": null}
{"id": "742ad0fc-d66f-4499-9cad-63ef03805d5e", "solution": "# import numpy as np\n\nclass EnhancedSelfAdaptiveDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size))**1.2 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size))**1.2 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3*0.9), 0.1, 0.9)\n            \n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3*0.9), 0.1, 0.9) \n            \n            # Introducing a self-adaptive strategy to adjust mutation and crossover rates based on population performance\n            self.c1 = np.clip(self.c1 + np.random.normal(0.0, c3*0.9), 0.1, 2.0)\n            self.c2 = np.clip(self.c2 + np.random.normal(0.0, c3*0.9), 0.1, 2.0)\n\n        return objective_function(gbest)", "name": "EnhancedSelfAdaptiveDEPSO", "description": "Utilizing a self-adaptive strategy to dynamically adjust mutation and crossover rates, enhancing exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 43, "fitness": 0.11071227224311836, "feedback": "The algorithm EnhancedSelfAdaptiveDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "5de288ba-e150-43a2-9f77-a8bfeed24067", "metadata": {"aucs": [0.182556955065176, 0.27837297667898053, 0.2003984067775657, 0.20450693097415884, 0.13155982607169536, 0.15895445356515925, 0.1914197655584453, 0.21073257110820254, 0.26327577062611285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03721845865483808, 0.06622112432135441, 0.046757811292791995, 0.03468417467331619, 0.07323480011387251, 0.06454305585848508, 0.0462644916530045, 0.06081343143142748, 0.05907786547900773, 0.04700233450199376, 0.04270934573685259, 0.03664562751998257, 0.0374352749475273, 0.04749496585201474, 0.041437745196889586, 0.017982585579050858, 0.0555590162911096, 0.048011855427474104, 0.19568081868244536, 0.06810579489496793, 0.11043031512123103, 0.11315127040488349, 0.07542593289313027, 0.08107904886780193, 0.20405287051492182, 0.11546236835701784, 0.10957777588436735, 0.059206402772193134, 0.10116231483956839, 0.026788381238253667, 0.08823568058351339, 0.06363269528133186, 0.06345087882308231, 0.1203855708605861, 0.044470242798096526, 0.07819616202435642, 0.17132558454772373, 0.150703122917906, 0.16934586810702934, 0.10869675377301158, 0.12752818780544672, 0.08520910755911004, 0.15453216244656565, 0.2195390682829732, 0.15011787160116963, 0.03255494536675818, 0.05866642200199845, 0.08964139111637337, 9.999999999998899e-05, 0.00808970865420311, 0.005664189666804487, 0.008583135883448056, 0.010202252811658541, 0.04445808081095781, 0.18663127100701848, 0.12818914964800365, 0.1637821040652827, 0.1637232988417412, 0.1773506993142373, 0.16154881198945803, 0.21836714241431887, 0.1625052380143367, 0.209689830921846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07062680074620853, 0.03018175266354428, 0.08128990152806914, 0.05897069875532979, 0.050758352380686156, 0.04940044810994004, 0.09410061377286238, 0.06074124270113279, 0.09460851418736771, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01914730247787555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010176486200248691, 9.999999999998899e-05, 0.24790490880921168, 0.2797862023352995, 0.25266741009179783, 0.22952335696901782, 0.23346844177149706, 0.2234973345654635, 0.25686938103849244, 0.2422165286799075, 0.2453644630287416, 0.04954086192915985, 0.030376534951862433, 0.025921032414328526, 0.042986174516648545, 0.05625623077260078, 0.07368581990382572, 0.07058672245147135, 0.056301159010127555, 0.047937580680005865, 0.1558340705939878, 0.09865350810972817, 0.1333561147749771, 0.14063317884479498, 0.10869080624286709, 0.10056875475463711, 0.14047582932650837, 0.1574297832804863, 0.11139484856882587, 0.1464531073652794, 0.19416189250735738, 0.16548678356655377, 0.18267462091718534, 0.2251426797691648, 0.19654038796886475, 0.16613743875506548, 0.17967149611712518, 0.14952440180959548, 0.07193896045203785, 0.13464722004058438, 0.09914556068829516, 0.14395852739521975, 0.14545406396186022, 0.12866748345250767, 0.1065834304876675, 0.12970376684597174, 0.09011732878372991, 0.3135597527096524, 0.24644688493518252, 0.267538723813751, 0.26965771755641066, 0.2859946449485593, 0.28733193681163516, 0.27458921151987215, 0.2937535077783112, 0.2893835362383582, 0.15695308152400778, 0.15895941974768224, 0.15584847127243595, 0.1609149168412758, 0.15679359946939897, 0.16035968988489657, 0.16205398202098364, 0.16317231190003512, 0.16190900041874845, 0.16753143706854912, 0.17905553880934144, 0.16869139562629643, 0.16616287214569525, 0.16304359575888616, 0.14571718603954942, 0.10574226385012175, 0.13002615778576332, 0.11551557376882171, 0.37643762367242795, 0.34279471896360836, 0.18248974070932755, 0.14216038296230904, 0.16682552444263543, 0.1652865556159242, 0.09246930614008597, 0.1667080102842532, 0.1008829227318605, 0.18045456991177056, 0.16948104103863626, 0.18253345748969574, 0.19383556414160152, 0.1716357040142964, 0.1722221414780315, 0.16586696578270388, 0.17566054942549603, 0.17790821345516816, 0.0795540063478064, 0.07114369713828761, 0.07363676913013717, 0.04852532427136991, 0.07634469580580805, 0.0785207288507459, 0.06157657720059673, 0.050740043973016014, 0.07999971110052362]}, "mutation_prompt": null}
{"id": "f7a79077-d0d4-40f8-848e-8a52e43ed6fc", "solution": "import numpy as np\n\nclass FastAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size))**1.2 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size))**1.2 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3*0.9), 0.1, 0.9)\n            \n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3*0.9), 0.1, 0.9) \n\n        return objective_function(gbest)", "name": "FastAdaptiveInertiaDEPSO", "description": "Accelerating convergence speed by dynamically adjusting the mutation factor and crossover rate to exploit promising regions more effectively.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5de288ba-e150-43a2-9f77-a8bfeed24067", "metadata": {"aucs": [0.2621899481435921, 0.27571838628438483, 0.2619489373293803, 0.21456512561968488, 0.21784646839091815, 0.26918841547977446, 0.22530551212918482, 0.24691498666456568, 0.2294478627688783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058399298690485324, 0.08675665819313638, 0.07761109950731937, 0.0784113004533783, 0.05711127462299537, 0.06258843625701827, 0.07869818830271402, 0.07462378791865909, 0.07488621787739247, 0.04912772494913242, 0.0814868858614507, 0.05644288513514517, 0.05234696578261788, 0.05240094306281173, 0.0594586911942222, 0.05889666793752091, 0.05979698178791004, 0.06158027820799217, 0.16157728253246717, 0.666817659504604, 0.1692056363451937, 0.17320141297938663, 0.8186852981576207, 0.16056556345806472, 0.2756768532845558, 0.8184172797464423, 0.3169499357151211, 0.09866724398854876, 0.11411437396015822, 0.12139087147959615, 0.1181173801048826, 0.10901485897648966, 0.11725002617413305, 0.12698251005615224, 0.14402058806052742, 0.10939873409171619, 0.18448718553356525, 0.17451878046869385, 0.171759049942114, 0.16801027234769605, 0.16260042998426238, 0.162444268042522, 0.17898930579830508, 0.19896814178847666, 0.1691795699319435, 0.07505563923098912, 0.06177069832377946, 0.07864233565627843, 0.08491400878231814, 0.10965739601164837, 0.05091539504894249, 0.06017413844923869, 0.05060827307478233, 0.03311831956938582, 0.13385645328044682, 0.11747716461776503, 0.10804684309223245, 0.14274022603694447, 0.13333412417487, 0.13212462346070009, 0.13873931675989948, 0.13204159679333738, 0.1182067024333292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06704705256434262, 0.0586036792051271, 0.08332937922845196, 0.048311938501796825, 0.052482977756011295, 0.0487381425466068, 0.06634236362384238, 0.09053829115744116, 0.05414191147384895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02273431296824968, 0.005684470201508196, 0.002219104025057872, 0.009138647197879934, 0.0077374179235873974, 0.005178405564159272, 0.012391100177164716, 0.02528497621186221, 9.999999999998899e-05, 0.27226981124367244, 0.25187163429962756, 0.33497571187512754, 0.28787916843265926, 0.2583730676328021, 0.23386917912059824, 0.28994668201005014, 0.28499181426371667, 0.3074474058471266, 0.06398963658729406, 0.06427285952680017, 0.05011347179979697, 0.07356488252532944, 0.06727840693365705, 0.07231110558667242, 0.06446128948964303, 0.061753807324015586, 0.058027280810119874, 0.17380484683237407, 0.13939793788600818, 0.13927516722527944, 0.1472887978221603, 0.13261784838299795, 0.12605017347817316, 0.12587838393133532, 0.1620431400874608, 0.12361138624572976, 0.18148402739646086, 0.19231540867670582, 0.1877964265361517, 0.21924266627356315, 0.22551462926764843, 0.22138652742660014, 0.18340075622017749, 0.18618996610174454, 0.19195782455185972, 0.1301996288270717, 0.11758438931327653, 0.13827343546704995, 0.16289792023574023, 0.15223377514742786, 0.1570518398462224, 0.12402114369112482, 0.13239993086107193, 0.13365321627004667, 0.20722105342819264, 0.21271146727848123, 0.18155207694258813, 0.19647216958780822, 0.1668770438192232, 0.2118394843075011, 0.19227240149843405, 0.18669444524761436, 0.2162251332664017, 0.16565414733180095, 0.15779083880891298, 0.16798817470715544, 0.16863039573395744, 0.15962735560375318, 0.16672846759045623, 0.16771413111513445, 0.16586664951722052, 0.16314719695349156, 0.16337918070415058, 0.17239955605756663, 0.1560217173829036, 0.18257597483013244, 0.21814070229240168, 0.19126226582727301, 0.1639052429711766, 0.2650465127057907, 0.22999536357206452, 0.3249466131396549, 0.20793983047273445, 0.23511354931469064, 0.22823277993107494, 0.19046799915439994, 0.19515413622686906, 0.17408787389787317, 0.21349891238763707, 0.22708112856035034, 0.18126190636631723, 0.19515589506329212, 0.17879607667551622, 0.17735193940061422, 0.16725059563685551, 0.18370222620110566, 0.17749808998192362, 0.17338930147519427, 0.19306528607743634, 0.06616408442119903, 0.07635922381823257, 0.07557900182310784, 0.06552516625366644, 0.06561667812928695, 0.07886079080850761, 0.07531204099760103, 0.06516638514852602, 0.06260077222727212]}, "mutation_prompt": null}
{"id": "a4a5358e-a166-40da-b507-5f9ee010a7d0", "solution": "import numpy as np\n\nclass FastAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size))**1.2 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size))**1.2 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3*0.9), 0.1, 0.9)\n            \n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3*0.9), 0.1, 0.9) \n\n        return objective_function(gbest)", "name": "FastAdaptiveInertiaDEPSO", "description": "Accelerating convergence speed by dynamically adjusting the mutation factor and crossover rate to exploit promising regions more effectively.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5de288ba-e150-43a2-9f77-a8bfeed24067", "metadata": {"aucs": [0.2621899481435921, 0.27571838628438483, 0.2619489373293803, 0.21456512561968488, 0.21784646839091815, 0.26918841547977446, 0.22530551212918482, 0.24691498666456568, 0.2294478627688783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058399298690485324, 0.08675665819313638, 0.07761109950731937, 0.0784113004533783, 0.05711127462299537, 0.06258843625701827, 0.07869818830271402, 0.07462378791865909, 0.07488621787739247, 0.04912772494913242, 0.0814868858614507, 0.05644288513514517, 0.05234696578261788, 0.05240094306281173, 0.0594586911942222, 0.05889666793752091, 0.05979698178791004, 0.06158027820799217, 0.16157728253246717, 0.666817659504604, 0.1692056363451937, 0.17320141297938663, 0.8186852981576207, 0.16056556345806472, 0.2756768532845558, 0.8184172797464423, 0.3169499357151211, 0.09866724398854876, 0.11411437396015822, 0.12139087147959615, 0.1181173801048826, 0.10901485897648966, 0.11725002617413305, 0.12698251005615224, 0.14402058806052742, 0.10939873409171619, 0.18448718553356525, 0.17451878046869385, 0.171759049942114, 0.16801027234769605, 0.16260042998426238, 0.162444268042522, 0.17898930579830508, 0.19896814178847666, 0.1691795699319435, 0.07505563923098912, 0.06177069832377946, 0.07864233565627843, 0.08491400878231814, 0.10965739601164837, 0.05091539504894249, 0.06017413844923869, 0.05060827307478233, 0.03311831956938582, 0.13385645328044682, 0.11747716461776503, 0.10804684309223245, 0.14274022603694447, 0.13333412417487, 0.13212462346070009, 0.13873931675989948, 0.13204159679333738, 0.1182067024333292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06704705256434262, 0.0586036792051271, 0.08332937922845196, 0.048311938501796825, 0.052482977756011295, 0.0487381425466068, 0.06634236362384238, 0.09053829115744116, 0.05414191147384895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02273431296824968, 0.005684470201508196, 0.002219104025057872, 0.009138647197879934, 0.0077374179235873974, 0.005178405564159272, 0.012391100177164716, 0.02528497621186221, 9.999999999998899e-05, 0.27226981124367244, 0.25187163429962756, 0.33497571187512754, 0.28787916843265926, 0.2583730676328021, 0.23386917912059824, 0.28994668201005014, 0.28499181426371667, 0.3074474058471266, 0.06398963658729406, 0.06427285952680017, 0.05011347179979697, 0.07356488252532944, 0.06727840693365705, 0.07231110558667242, 0.06446128948964303, 0.061753807324015586, 0.058027280810119874, 0.17380484683237407, 0.13939793788600818, 0.13927516722527944, 0.1472887978221603, 0.13261784838299795, 0.12605017347817316, 0.12587838393133532, 0.1620431400874608, 0.12361138624572976, 0.18148402739646086, 0.19231540867670582, 0.1877964265361517, 0.21924266627356315, 0.22551462926764843, 0.22138652742660014, 0.18340075622017749, 0.18618996610174454, 0.19195782455185972, 0.1301996288270717, 0.11758438931327653, 0.13827343546704995, 0.16289792023574023, 0.15223377514742786, 0.1570518398462224, 0.12402114369112482, 0.13239993086107193, 0.13365321627004667, 0.20722105342819264, 0.21271146727848123, 0.18155207694258813, 0.19647216958780822, 0.1668770438192232, 0.2118394843075011, 0.19227240149843405, 0.18669444524761436, 0.2162251332664017, 0.16565414733180095, 0.15779083880891298, 0.16798817470715544, 0.16863039573395744, 0.15962735560375318, 0.16672846759045623, 0.16771413111513445, 0.16586664951722052, 0.16314719695349156, 0.16337918070415058, 0.17239955605756663, 0.1560217173829036, 0.18257597483013244, 0.21814070229240168, 0.19126226582727301, 0.1639052429711766, 0.2650465127057907, 0.22999536357206452, 0.3249466131396549, 0.20793983047273445, 0.23511354931469064, 0.22823277993107494, 0.19046799915439994, 0.19515413622686906, 0.17408787389787317, 0.21349891238763707, 0.22708112856035034, 0.18126190636631723, 0.19515589506329212, 0.17879607667551622, 0.17735193940061422, 0.16725059563685551, 0.18370222620110566, 0.17749808998192362, 0.17338930147519427, 0.19306528607743634, 0.06616408442119903, 0.07635922381823257, 0.07557900182310784, 0.06552516625366644, 0.06561667812928695, 0.07886079080850761, 0.07531204099760103, 0.06516638514852602, 0.06260077222727212]}, "mutation_prompt": null}
{"id": "79366306-68e2-46df-b17a-a913df99a9e0", "solution": "import numpy as np\n\nclass FastAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size))**1.2 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size))**1.2 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3*0.9), 0.1, 0.9)\n            \n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3*0.9), 0.1, 0.9) \n\n        return objective_function(gbest)", "name": "FastAdaptiveInertiaDEPSO", "description": "Accelerating convergence speed by dynamically adjusting the mutation factor and crossover rate to exploit promising regions more effectively.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5de288ba-e150-43a2-9f77-a8bfeed24067", "metadata": {"aucs": [0.2621899481435921, 0.27571838628438483, 0.2619489373293803, 0.21456512561968488, 0.21784646839091815, 0.26918841547977446, 0.22530551212918482, 0.24691498666456568, 0.2294478627688783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058399298690485324, 0.08675665819313638, 0.07761109950731937, 0.0784113004533783, 0.05711127462299537, 0.06258843625701827, 0.07869818830271402, 0.07462378791865909, 0.07488621787739247, 0.04912772494913242, 0.0814868858614507, 0.05644288513514517, 0.05234696578261788, 0.05240094306281173, 0.0594586911942222, 0.05889666793752091, 0.05979698178791004, 0.06158027820799217, 0.16157728253246717, 0.666817659504604, 0.1692056363451937, 0.17320141297938663, 0.8186852981576207, 0.16056556345806472, 0.2756768532845558, 0.8184172797464423, 0.3169499357151211, 0.09866724398854876, 0.11411437396015822, 0.12139087147959615, 0.1181173801048826, 0.10901485897648966, 0.11725002617413305, 0.12698251005615224, 0.14402058806052742, 0.10939873409171619, 0.18448718553356525, 0.17451878046869385, 0.171759049942114, 0.16801027234769605, 0.16260042998426238, 0.162444268042522, 0.17898930579830508, 0.19896814178847666, 0.1691795699319435, 0.07505563923098912, 0.06177069832377946, 0.07864233565627843, 0.08491400878231814, 0.10965739601164837, 0.05091539504894249, 0.06017413844923869, 0.05060827307478233, 0.03311831956938582, 0.13385645328044682, 0.11747716461776503, 0.10804684309223245, 0.14274022603694447, 0.13333412417487, 0.13212462346070009, 0.13873931675989948, 0.13204159679333738, 0.1182067024333292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06704705256434262, 0.0586036792051271, 0.08332937922845196, 0.048311938501796825, 0.052482977756011295, 0.0487381425466068, 0.06634236362384238, 0.09053829115744116, 0.05414191147384895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02273431296824968, 0.005684470201508196, 0.002219104025057872, 0.009138647197879934, 0.0077374179235873974, 0.005178405564159272, 0.012391100177164716, 0.02528497621186221, 9.999999999998899e-05, 0.27226981124367244, 0.25187163429962756, 0.33497571187512754, 0.28787916843265926, 0.2583730676328021, 0.23386917912059824, 0.28994668201005014, 0.28499181426371667, 0.3074474058471266, 0.06398963658729406, 0.06427285952680017, 0.05011347179979697, 0.07356488252532944, 0.06727840693365705, 0.07231110558667242, 0.06446128948964303, 0.061753807324015586, 0.058027280810119874, 0.17380484683237407, 0.13939793788600818, 0.13927516722527944, 0.1472887978221603, 0.13261784838299795, 0.12605017347817316, 0.12587838393133532, 0.1620431400874608, 0.12361138624572976, 0.18148402739646086, 0.19231540867670582, 0.1877964265361517, 0.21924266627356315, 0.22551462926764843, 0.22138652742660014, 0.18340075622017749, 0.18618996610174454, 0.19195782455185972, 0.1301996288270717, 0.11758438931327653, 0.13827343546704995, 0.16289792023574023, 0.15223377514742786, 0.1570518398462224, 0.12402114369112482, 0.13239993086107193, 0.13365321627004667, 0.20722105342819264, 0.21271146727848123, 0.18155207694258813, 0.19647216958780822, 0.1668770438192232, 0.2118394843075011, 0.19227240149843405, 0.18669444524761436, 0.2162251332664017, 0.16565414733180095, 0.15779083880891298, 0.16798817470715544, 0.16863039573395744, 0.15962735560375318, 0.16672846759045623, 0.16771413111513445, 0.16586664951722052, 0.16314719695349156, 0.16337918070415058, 0.17239955605756663, 0.1560217173829036, 0.18257597483013244, 0.21814070229240168, 0.19126226582727301, 0.1639052429711766, 0.2650465127057907, 0.22999536357206452, 0.3249466131396549, 0.20793983047273445, 0.23511354931469064, 0.22823277993107494, 0.19046799915439994, 0.19515413622686906, 0.17408787389787317, 0.21349891238763707, 0.22708112856035034, 0.18126190636631723, 0.19515589506329212, 0.17879607667551622, 0.17735193940061422, 0.16725059563685551, 0.18370222620110566, 0.17749808998192362, 0.17338930147519427, 0.19306528607743634, 0.06616408442119903, 0.07635922381823257, 0.07557900182310784, 0.06552516625366644, 0.06561667812928695, 0.07886079080850761, 0.07531204099760103, 0.06516638514852602, 0.06260077222727212]}, "mutation_prompt": null}
{"id": "4a34a7b7-e56c-4606-bf22-ba3f8f3440d8", "solution": "import numpy as np\n\nclass FastAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size))**1.2 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size))**1.2 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3*0.9), 0.1, 0.9)\n            \n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3*0.9), 0.1, 0.9) \n\n        return objective_function(gbest)", "name": "FastAdaptiveInertiaDEPSO", "description": "Accelerating convergence speed by dynamically adjusting the mutation factor and crossover rate to exploit promising regions more effectively.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5de288ba-e150-43a2-9f77-a8bfeed24067", "metadata": {"aucs": [0.2621899481435921, 0.27571838628438483, 0.2619489373293803, 0.21456512561968488, 0.21784646839091815, 0.26918841547977446, 0.22530551212918482, 0.24691498666456568, 0.2294478627688783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058399298690485324, 0.08675665819313638, 0.07761109950731937, 0.0784113004533783, 0.05711127462299537, 0.06258843625701827, 0.07869818830271402, 0.07462378791865909, 0.07488621787739247, 0.04912772494913242, 0.0814868858614507, 0.05644288513514517, 0.05234696578261788, 0.05240094306281173, 0.0594586911942222, 0.05889666793752091, 0.05979698178791004, 0.06158027820799217, 0.16157728253246717, 0.666817659504604, 0.1692056363451937, 0.17320141297938663, 0.8186852981576207, 0.16056556345806472, 0.2756768532845558, 0.8184172797464423, 0.3169499357151211, 0.09866724398854876, 0.11411437396015822, 0.12139087147959615, 0.1181173801048826, 0.10901485897648966, 0.11725002617413305, 0.12698251005615224, 0.14402058806052742, 0.10939873409171619, 0.18448718553356525, 0.17451878046869385, 0.171759049942114, 0.16801027234769605, 0.16260042998426238, 0.162444268042522, 0.17898930579830508, 0.19896814178847666, 0.1691795699319435, 0.07505563923098912, 0.06177069832377946, 0.07864233565627843, 0.08491400878231814, 0.10965739601164837, 0.05091539504894249, 0.06017413844923869, 0.05060827307478233, 0.03311831956938582, 0.13385645328044682, 0.11747716461776503, 0.10804684309223245, 0.14274022603694447, 0.13333412417487, 0.13212462346070009, 0.13873931675989948, 0.13204159679333738, 0.1182067024333292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06704705256434262, 0.0586036792051271, 0.08332937922845196, 0.048311938501796825, 0.052482977756011295, 0.0487381425466068, 0.06634236362384238, 0.09053829115744116, 0.05414191147384895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02273431296824968, 0.005684470201508196, 0.002219104025057872, 0.009138647197879934, 0.0077374179235873974, 0.005178405564159272, 0.012391100177164716, 0.02528497621186221, 9.999999999998899e-05, 0.27226981124367244, 0.25187163429962756, 0.33497571187512754, 0.28787916843265926, 0.2583730676328021, 0.23386917912059824, 0.28994668201005014, 0.28499181426371667, 0.3074474058471266, 0.06398963658729406, 0.06427285952680017, 0.05011347179979697, 0.07356488252532944, 0.06727840693365705, 0.07231110558667242, 0.06446128948964303, 0.061753807324015586, 0.058027280810119874, 0.17380484683237407, 0.13939793788600818, 0.13927516722527944, 0.1472887978221603, 0.13261784838299795, 0.12605017347817316, 0.12587838393133532, 0.1620431400874608, 0.12361138624572976, 0.18148402739646086, 0.19231540867670582, 0.1877964265361517, 0.21924266627356315, 0.22551462926764843, 0.22138652742660014, 0.18340075622017749, 0.18618996610174454, 0.19195782455185972, 0.1301996288270717, 0.11758438931327653, 0.13827343546704995, 0.16289792023574023, 0.15223377514742786, 0.1570518398462224, 0.12402114369112482, 0.13239993086107193, 0.13365321627004667, 0.20722105342819264, 0.21271146727848123, 0.18155207694258813, 0.19647216958780822, 0.1668770438192232, 0.2118394843075011, 0.19227240149843405, 0.18669444524761436, 0.2162251332664017, 0.16565414733180095, 0.15779083880891298, 0.16798817470715544, 0.16863039573395744, 0.15962735560375318, 0.16672846759045623, 0.16771413111513445, 0.16586664951722052, 0.16314719695349156, 0.16337918070415058, 0.17239955605756663, 0.1560217173829036, 0.18257597483013244, 0.21814070229240168, 0.19126226582727301, 0.1639052429711766, 0.2650465127057907, 0.22999536357206452, 0.3249466131396549, 0.20793983047273445, 0.23511354931469064, 0.22823277993107494, 0.19046799915439994, 0.19515413622686906, 0.17408787389787317, 0.21349891238763707, 0.22708112856035034, 0.18126190636631723, 0.19515589506329212, 0.17879607667551622, 0.17735193940061422, 0.16725059563685551, 0.18370222620110566, 0.17749808998192362, 0.17338930147519427, 0.19306528607743634, 0.06616408442119903, 0.07635922381823257, 0.07557900182310784, 0.06552516625366644, 0.06561667812928695, 0.07886079080850761, 0.07531204099760103, 0.06516638514852602, 0.06260077222727212]}, "mutation_prompt": null}
{"id": "081c659d-d1cf-444a-8e1d-29994e470273", "solution": "import numpy as np\n\nclass FastAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size))**1.2 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size))**1.2 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3*0.9), 0.1, 0.9)\n            \n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3*0.9), 0.1, 0.9) \n\n        return objective_function(gbest)", "name": "FastAdaptiveInertiaDEPSO", "description": "Accelerating convergence speed by dynamically adjusting the mutation factor and crossover rate to exploit promising regions more effectively.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5de288ba-e150-43a2-9f77-a8bfeed24067", "metadata": {"aucs": [0.2621899481435921, 0.27571838628438483, 0.2619489373293803, 0.21456512561968488, 0.21784646839091815, 0.26918841547977446, 0.22530551212918482, 0.24691498666456568, 0.2294478627688783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058399298690485324, 0.08675665819313638, 0.07761109950731937, 0.0784113004533783, 0.05711127462299537, 0.06258843625701827, 0.07869818830271402, 0.07462378791865909, 0.07488621787739247, 0.04912772494913242, 0.0814868858614507, 0.05644288513514517, 0.05234696578261788, 0.05240094306281173, 0.0594586911942222, 0.05889666793752091, 0.05979698178791004, 0.06158027820799217, 0.16157728253246717, 0.666817659504604, 0.1692056363451937, 0.17320141297938663, 0.8186852981576207, 0.16056556345806472, 0.2756768532845558, 0.8184172797464423, 0.3169499357151211, 0.09866724398854876, 0.11411437396015822, 0.12139087147959615, 0.1181173801048826, 0.10901485897648966, 0.11725002617413305, 0.12698251005615224, 0.14402058806052742, 0.10939873409171619, 0.18448718553356525, 0.17451878046869385, 0.171759049942114, 0.16801027234769605, 0.16260042998426238, 0.162444268042522, 0.17898930579830508, 0.19896814178847666, 0.1691795699319435, 0.07505563923098912, 0.06177069832377946, 0.07864233565627843, 0.08491400878231814, 0.10965739601164837, 0.05091539504894249, 0.06017413844923869, 0.05060827307478233, 0.03311831956938582, 0.13385645328044682, 0.11747716461776503, 0.10804684309223245, 0.14274022603694447, 0.13333412417487, 0.13212462346070009, 0.13873931675989948, 0.13204159679333738, 0.1182067024333292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06704705256434262, 0.0586036792051271, 0.08332937922845196, 0.048311938501796825, 0.052482977756011295, 0.0487381425466068, 0.06634236362384238, 0.09053829115744116, 0.05414191147384895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02273431296824968, 0.005684470201508196, 0.002219104025057872, 0.009138647197879934, 0.0077374179235873974, 0.005178405564159272, 0.012391100177164716, 0.02528497621186221, 9.999999999998899e-05, 0.27226981124367244, 0.25187163429962756, 0.33497571187512754, 0.28787916843265926, 0.2583730676328021, 0.23386917912059824, 0.28994668201005014, 0.28499181426371667, 0.3074474058471266, 0.06398963658729406, 0.06427285952680017, 0.05011347179979697, 0.07356488252532944, 0.06727840693365705, 0.07231110558667242, 0.06446128948964303, 0.061753807324015586, 0.058027280810119874, 0.17380484683237407, 0.13939793788600818, 0.13927516722527944, 0.1472887978221603, 0.13261784838299795, 0.12605017347817316, 0.12587838393133532, 0.1620431400874608, 0.12361138624572976, 0.18148402739646086, 0.19231540867670582, 0.1877964265361517, 0.21924266627356315, 0.22551462926764843, 0.22138652742660014, 0.18340075622017749, 0.18618996610174454, 0.19195782455185972, 0.1301996288270717, 0.11758438931327653, 0.13827343546704995, 0.16289792023574023, 0.15223377514742786, 0.1570518398462224, 0.12402114369112482, 0.13239993086107193, 0.13365321627004667, 0.20722105342819264, 0.21271146727848123, 0.18155207694258813, 0.19647216958780822, 0.1668770438192232, 0.2118394843075011, 0.19227240149843405, 0.18669444524761436, 0.2162251332664017, 0.16565414733180095, 0.15779083880891298, 0.16798817470715544, 0.16863039573395744, 0.15962735560375318, 0.16672846759045623, 0.16771413111513445, 0.16586664951722052, 0.16314719695349156, 0.16337918070415058, 0.17239955605756663, 0.1560217173829036, 0.18257597483013244, 0.21814070229240168, 0.19126226582727301, 0.1639052429711766, 0.2650465127057907, 0.22999536357206452, 0.3249466131396549, 0.20793983047273445, 0.23511354931469064, 0.22823277993107494, 0.19046799915439994, 0.19515413622686906, 0.17408787389787317, 0.21349891238763707, 0.22708112856035034, 0.18126190636631723, 0.19515589506329212, 0.17879607667551622, 0.17735193940061422, 0.16725059563685551, 0.18370222620110566, 0.17749808998192362, 0.17338930147519427, 0.19306528607743634, 0.06616408442119903, 0.07635922381823257, 0.07557900182310784, 0.06552516625366644, 0.06561667812928695, 0.07886079080850761, 0.07531204099760103, 0.06516638514852602, 0.06260077222727212]}, "mutation_prompt": null}
{"id": "c123b15d-fac4-4845-b4f0-29f7e57629e6", "solution": "import numpy as np\n\nclass FastAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size))**1.2 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size))**1.2 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3*0.9), 0.1, 0.9)\n            \n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3*0.9), 0.1, 0.9) \n\n        return objective_function(gbest)", "name": "FastAdaptiveInertiaDEPSO", "description": "Accelerating convergence speed by dynamically adjusting the mutation factor and crossover rate to exploit promising regions more effectively.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5de288ba-e150-43a2-9f77-a8bfeed24067", "metadata": {"aucs": [0.2621899481435921, 0.27571838628438483, 0.2619489373293803, 0.21456512561968488, 0.21784646839091815, 0.26918841547977446, 0.22530551212918482, 0.24691498666456568, 0.2294478627688783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058399298690485324, 0.08675665819313638, 0.07761109950731937, 0.0784113004533783, 0.05711127462299537, 0.06258843625701827, 0.07869818830271402, 0.07462378791865909, 0.07488621787739247, 0.04912772494913242, 0.0814868858614507, 0.05644288513514517, 0.05234696578261788, 0.05240094306281173, 0.0594586911942222, 0.05889666793752091, 0.05979698178791004, 0.06158027820799217, 0.16157728253246717, 0.666817659504604, 0.1692056363451937, 0.17320141297938663, 0.8186852981576207, 0.16056556345806472, 0.2756768532845558, 0.8184172797464423, 0.3169499357151211, 0.09866724398854876, 0.11411437396015822, 0.12139087147959615, 0.1181173801048826, 0.10901485897648966, 0.11725002617413305, 0.12698251005615224, 0.14402058806052742, 0.10939873409171619, 0.18448718553356525, 0.17451878046869385, 0.171759049942114, 0.16801027234769605, 0.16260042998426238, 0.162444268042522, 0.17898930579830508, 0.19896814178847666, 0.1691795699319435, 0.07505563923098912, 0.06177069832377946, 0.07864233565627843, 0.08491400878231814, 0.10965739601164837, 0.05091539504894249, 0.06017413844923869, 0.05060827307478233, 0.03311831956938582, 0.13385645328044682, 0.11747716461776503, 0.10804684309223245, 0.14274022603694447, 0.13333412417487, 0.13212462346070009, 0.13873931675989948, 0.13204159679333738, 0.1182067024333292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06704705256434262, 0.0586036792051271, 0.08332937922845196, 0.048311938501796825, 0.052482977756011295, 0.0487381425466068, 0.06634236362384238, 0.09053829115744116, 0.05414191147384895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02273431296824968, 0.005684470201508196, 0.002219104025057872, 0.009138647197879934, 0.0077374179235873974, 0.005178405564159272, 0.012391100177164716, 0.02528497621186221, 9.999999999998899e-05, 0.27226981124367244, 0.25187163429962756, 0.33497571187512754, 0.28787916843265926, 0.2583730676328021, 0.23386917912059824, 0.28994668201005014, 0.28499181426371667, 0.3074474058471266, 0.06398963658729406, 0.06427285952680017, 0.05011347179979697, 0.07356488252532944, 0.06727840693365705, 0.07231110558667242, 0.06446128948964303, 0.061753807324015586, 0.058027280810119874, 0.17380484683237407, 0.13939793788600818, 0.13927516722527944, 0.1472887978221603, 0.13261784838299795, 0.12605017347817316, 0.12587838393133532, 0.1620431400874608, 0.12361138624572976, 0.18148402739646086, 0.19231540867670582, 0.1877964265361517, 0.21924266627356315, 0.22551462926764843, 0.22138652742660014, 0.18340075622017749, 0.18618996610174454, 0.19195782455185972, 0.1301996288270717, 0.11758438931327653, 0.13827343546704995, 0.16289792023574023, 0.15223377514742786, 0.1570518398462224, 0.12402114369112482, 0.13239993086107193, 0.13365321627004667, 0.20722105342819264, 0.21271146727848123, 0.18155207694258813, 0.19647216958780822, 0.1668770438192232, 0.2118394843075011, 0.19227240149843405, 0.18669444524761436, 0.2162251332664017, 0.16565414733180095, 0.15779083880891298, 0.16798817470715544, 0.16863039573395744, 0.15962735560375318, 0.16672846759045623, 0.16771413111513445, 0.16586664951722052, 0.16314719695349156, 0.16337918070415058, 0.17239955605756663, 0.1560217173829036, 0.18257597483013244, 0.21814070229240168, 0.19126226582727301, 0.1639052429711766, 0.2650465127057907, 0.22999536357206452, 0.3249466131396549, 0.20793983047273445, 0.23511354931469064, 0.22823277993107494, 0.19046799915439994, 0.19515413622686906, 0.17408787389787317, 0.21349891238763707, 0.22708112856035034, 0.18126190636631723, 0.19515589506329212, 0.17879607667551622, 0.17735193940061422, 0.16725059563685551, 0.18370222620110566, 0.17749808998192362, 0.17338930147519427, 0.19306528607743634, 0.06616408442119903, 0.07635922381823257, 0.07557900182310784, 0.06552516625366644, 0.06561667812928695, 0.07886079080850761, 0.07531204099760103, 0.06516638514852602, 0.06260077222727212]}, "mutation_prompt": null}
{"id": "ff1bc61a-078b-46e6-b0d0-c58e17b333e3", "solution": "import numpy as np\n\nclass DynamicMutationFastAdaptiveInertiaDEPSO(FastAdaptiveInertiaDEPSO):\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n        mutation_factors = np.full(self.population_size, self.f)\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + mutation_factors * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size))**1.2 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size))**1.2 * (self.max_c3 - self.min_c3)\n\n            mutation_factors = np.clip(mutation_factors * (1 + (fitness_values - fitness_values.mean())), 0.1, 0.9)\n            \n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3*0.9), 0.1, 0.9) \n\n        return objective_function(gbest)", "name": "DynamicMutationFastAdaptiveInertiaDEPSO", "description": "Implementing a dynamic mechanism to adjust the mutation factor based on individual fitness to enhance convergence speed significantly.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (30,) (5,) ').", "error": "ValueError('operands could not be broadcast together with shapes (30,) (5,) ')", "parent_id": "5de288ba-e150-43a2-9f77-a8bfeed24067", "metadata": {}, "mutation_prompt": null}
{"id": "1e200755-1ba6-4270-a337-c5da333a773c", "solution": "import numpy as np\n\nclass FastAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size))**1.2 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size))**1.2 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3*0.9), 0.1, 0.9)\n            \n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3*0.9), 0.1, 0.9) \n\n        return objective_function(gbest)", "name": "FastAdaptiveInertiaDEPSO", "description": "Accelerating convergence speed by dynamically adjusting the mutation factor and crossover rate to exploit promising regions more effectively.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5de288ba-e150-43a2-9f77-a8bfeed24067", "metadata": {"aucs": [0.2621899481435921, 0.27571838628438483, 0.2619489373293803, 0.21456512561968488, 0.21784646839091815, 0.26918841547977446, 0.22530551212918482, 0.24691498666456568, 0.2294478627688783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058399298690485324, 0.08675665819313638, 0.07761109950731937, 0.0784113004533783, 0.05711127462299537, 0.06258843625701827, 0.07869818830271402, 0.07462378791865909, 0.07488621787739247, 0.04912772494913242, 0.0814868858614507, 0.05644288513514517, 0.05234696578261788, 0.05240094306281173, 0.0594586911942222, 0.05889666793752091, 0.05979698178791004, 0.06158027820799217, 0.16157728253246717, 0.666817659504604, 0.1692056363451937, 0.17320141297938663, 0.8186852981576207, 0.16056556345806472, 0.2756768532845558, 0.8184172797464423, 0.3169499357151211, 0.09866724398854876, 0.11411437396015822, 0.12139087147959615, 0.1181173801048826, 0.10901485897648966, 0.11725002617413305, 0.12698251005615224, 0.14402058806052742, 0.10939873409171619, 0.18448718553356525, 0.17451878046869385, 0.171759049942114, 0.16801027234769605, 0.16260042998426238, 0.162444268042522, 0.17898930579830508, 0.19896814178847666, 0.1691795699319435, 0.07505563923098912, 0.06177069832377946, 0.07864233565627843, 0.08491400878231814, 0.10965739601164837, 0.05091539504894249, 0.06017413844923869, 0.05060827307478233, 0.03311831956938582, 0.13385645328044682, 0.11747716461776503, 0.10804684309223245, 0.14274022603694447, 0.13333412417487, 0.13212462346070009, 0.13873931675989948, 0.13204159679333738, 0.1182067024333292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06704705256434262, 0.0586036792051271, 0.08332937922845196, 0.048311938501796825, 0.052482977756011295, 0.0487381425466068, 0.06634236362384238, 0.09053829115744116, 0.05414191147384895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02273431296824968, 0.005684470201508196, 0.002219104025057872, 0.009138647197879934, 0.0077374179235873974, 0.005178405564159272, 0.012391100177164716, 0.02528497621186221, 9.999999999998899e-05, 0.27226981124367244, 0.25187163429962756, 0.33497571187512754, 0.28787916843265926, 0.2583730676328021, 0.23386917912059824, 0.28994668201005014, 0.28499181426371667, 0.3074474058471266, 0.06398963658729406, 0.06427285952680017, 0.05011347179979697, 0.07356488252532944, 0.06727840693365705, 0.07231110558667242, 0.06446128948964303, 0.061753807324015586, 0.058027280810119874, 0.17380484683237407, 0.13939793788600818, 0.13927516722527944, 0.1472887978221603, 0.13261784838299795, 0.12605017347817316, 0.12587838393133532, 0.1620431400874608, 0.12361138624572976, 0.18148402739646086, 0.19231540867670582, 0.1877964265361517, 0.21924266627356315, 0.22551462926764843, 0.22138652742660014, 0.18340075622017749, 0.18618996610174454, 0.19195782455185972, 0.1301996288270717, 0.11758438931327653, 0.13827343546704995, 0.16289792023574023, 0.15223377514742786, 0.1570518398462224, 0.12402114369112482, 0.13239993086107193, 0.13365321627004667, 0.20722105342819264, 0.21271146727848123, 0.18155207694258813, 0.19647216958780822, 0.1668770438192232, 0.2118394843075011, 0.19227240149843405, 0.18669444524761436, 0.2162251332664017, 0.16565414733180095, 0.15779083880891298, 0.16798817470715544, 0.16863039573395744, 0.15962735560375318, 0.16672846759045623, 0.16771413111513445, 0.16586664951722052, 0.16314719695349156, 0.16337918070415058, 0.17239955605756663, 0.1560217173829036, 0.18257597483013244, 0.21814070229240168, 0.19126226582727301, 0.1639052429711766, 0.2650465127057907, 0.22999536357206452, 0.3249466131396549, 0.20793983047273445, 0.23511354931469064, 0.22823277993107494, 0.19046799915439994, 0.19515413622686906, 0.17408787389787317, 0.21349891238763707, 0.22708112856035034, 0.18126190636631723, 0.19515589506329212, 0.17879607667551622, 0.17735193940061422, 0.16725059563685551, 0.18370222620110566, 0.17749808998192362, 0.17338930147519427, 0.19306528607743634, 0.06616408442119903, 0.07635922381823257, 0.07557900182310784, 0.06552516625366644, 0.06561667812928695, 0.07886079080850761, 0.07531204099760103, 0.06516638514852602, 0.06260077222727212]}, "mutation_prompt": null}
{"id": "8a9d5af4-cc9e-4b6f-aa3c-6b090e616ffb", "solution": "import numpy as np\n\nclass FastAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (_ / (self.budget - self.population_size))**1.2 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (_ / (self.budget - self.population_size))**1.2 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3*0.9), 0.1, 0.9)\n            \n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3*0.9), 0.1, 0.9) \n\n        return objective_function(gbest)", "name": "FastAdaptiveInertiaDEPSO", "description": "Accelerating convergence speed by dynamically adjusting the mutation factor and crossover rate to exploit promising regions more effectively.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5de288ba-e150-43a2-9f77-a8bfeed24067", "metadata": {"aucs": [0.2621899481435921, 0.27571838628438483, 0.2619489373293803, 0.21456512561968488, 0.21784646839091815, 0.26918841547977446, 0.22530551212918482, 0.24691498666456568, 0.2294478627688783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058399298690485324, 0.08675665819313638, 0.07761109950731937, 0.0784113004533783, 0.05711127462299537, 0.06258843625701827, 0.07869818830271402, 0.07462378791865909, 0.07488621787739247, 0.04912772494913242, 0.0814868858614507, 0.05644288513514517, 0.05234696578261788, 0.05240094306281173, 0.0594586911942222, 0.05889666793752091, 0.05979698178791004, 0.06158027820799217, 0.16157728253246717, 0.666817659504604, 0.1692056363451937, 0.17320141297938663, 0.8186852981576207, 0.16056556345806472, 0.2756768532845558, 0.8184172797464423, 0.3169499357151211, 0.09866724398854876, 0.11411437396015822, 0.12139087147959615, 0.1181173801048826, 0.10901485897648966, 0.11725002617413305, 0.12698251005615224, 0.14402058806052742, 0.10939873409171619, 0.18448718553356525, 0.17451878046869385, 0.171759049942114, 0.16801027234769605, 0.16260042998426238, 0.162444268042522, 0.17898930579830508, 0.19896814178847666, 0.1691795699319435, 0.07505563923098912, 0.06177069832377946, 0.07864233565627843, 0.08491400878231814, 0.10965739601164837, 0.05091539504894249, 0.06017413844923869, 0.05060827307478233, 0.03311831956938582, 0.13385645328044682, 0.11747716461776503, 0.10804684309223245, 0.14274022603694447, 0.13333412417487, 0.13212462346070009, 0.13873931675989948, 0.13204159679333738, 0.1182067024333292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06704705256434262, 0.0586036792051271, 0.08332937922845196, 0.048311938501796825, 0.052482977756011295, 0.0487381425466068, 0.06634236362384238, 0.09053829115744116, 0.05414191147384895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02273431296824968, 0.005684470201508196, 0.002219104025057872, 0.009138647197879934, 0.0077374179235873974, 0.005178405564159272, 0.012391100177164716, 0.02528497621186221, 9.999999999998899e-05, 0.27226981124367244, 0.25187163429962756, 0.33497571187512754, 0.28787916843265926, 0.2583730676328021, 0.23386917912059824, 0.28994668201005014, 0.28499181426371667, 0.3074474058471266, 0.06398963658729406, 0.06427285952680017, 0.05011347179979697, 0.07356488252532944, 0.06727840693365705, 0.07231110558667242, 0.06446128948964303, 0.061753807324015586, 0.058027280810119874, 0.17380484683237407, 0.13939793788600818, 0.13927516722527944, 0.1472887978221603, 0.13261784838299795, 0.12605017347817316, 0.12587838393133532, 0.1620431400874608, 0.12361138624572976, 0.18148402739646086, 0.19231540867670582, 0.1877964265361517, 0.21924266627356315, 0.22551462926764843, 0.22138652742660014, 0.18340075622017749, 0.18618996610174454, 0.19195782455185972, 0.1301996288270717, 0.11758438931327653, 0.13827343546704995, 0.16289792023574023, 0.15223377514742786, 0.1570518398462224, 0.12402114369112482, 0.13239993086107193, 0.13365321627004667, 0.20722105342819264, 0.21271146727848123, 0.18155207694258813, 0.19647216958780822, 0.1668770438192232, 0.2118394843075011, 0.19227240149843405, 0.18669444524761436, 0.2162251332664017, 0.16565414733180095, 0.15779083880891298, 0.16798817470715544, 0.16863039573395744, 0.15962735560375318, 0.16672846759045623, 0.16771413111513445, 0.16586664951722052, 0.16314719695349156, 0.16337918070415058, 0.17239955605756663, 0.1560217173829036, 0.18257597483013244, 0.21814070229240168, 0.19126226582727301, 0.1639052429711766, 0.2650465127057907, 0.22999536357206452, 0.3249466131396549, 0.20793983047273445, 0.23511354931469064, 0.22823277993107494, 0.19046799915439994, 0.19515413622686906, 0.17408787389787317, 0.21349891238763707, 0.22708112856035034, 0.18126190636631723, 0.19515589506329212, 0.17879607667551622, 0.17735193940061422, 0.16725059563685551, 0.18370222620110566, 0.17749808998192362, 0.17338930147519427, 0.19306528607743634, 0.06616408442119903, 0.07635922381823257, 0.07557900182310784, 0.06552516625366644, 0.06561667812928695, 0.07886079080850761, 0.07531204099760103, 0.06516638514852602, 0.06260077222727212]}, "mutation_prompt": null}
{"id": "9debbf58-a970-4324-83f7-f7a8126b9e02", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveInertiaDEPSO", "description": "Enhancing convergence speed by incorporating a dynamic adaptive mechanism for mutation and crossover rates based on individual performance.", "configspace": "", "generation": 53, "fitness": 0.13693383172753776, "feedback": "The algorithm EnhancedAdaptiveInertiaDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.12.", "error": "", "parent_id": "5de288ba-e150-43a2-9f77-a8bfeed24067", "metadata": {"aucs": [0.2545683273648798, 0.284188126675587, 0.2435356808734649, 0.24558796876314493, 0.23993203470929958, 0.21066912272606153, 0.2885688272841469, 0.24489845049704873, 0.2543459540573283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07826296786967979, 0.07959299907902573, 0.07419060373996034, 0.05554130773326993, 0.06368382067753742, 0.07519538172300089, 0.0817322715390183, 0.061189854112671305, 0.07149230146103114, 0.05618333627973937, 0.05738833228135587, 0.058161190945672736, 0.050521008913915644, 0.054388103270047394, 0.05601027530311842, 0.06199819974728127, 0.04968736745604019, 0.061444574688368836, 0.16157116193771615, 0.13389904320892454, 0.16134591419112476, 0.9465090708847774, 0.5248110460938689, 0.8423434905058523, 0.20878395822164963, 0.6547220617030742, 0.14886156391269156, 0.1343470545416836, 0.1250806564356286, 0.14344591952854369, 0.10483423045553353, 0.11048992989308204, 0.10216192075631203, 0.12199728332914761, 0.13857821969751805, 0.13064283303445923, 0.18955214924534247, 0.1864614337749726, 0.1969421310555738, 0.1752518136906781, 0.17864272533857273, 0.2056638491250269, 0.1701636119510811, 0.2068617975885979, 0.2149484998989034, 0.10723177444512055, 0.07518448712157133, 0.0640409469442258, 0.030194727528811582, 0.041340294715132786, 0.06011358543051559, 0.09807946635917342, 0.09396651721856597, 0.05550992925572995, 0.1372598370716962, 0.11807208709962158, 0.11676495717461399, 0.13729030221163907, 0.12235335745136677, 0.14129401047386037, 0.1303803795529902, 0.12342858076635055, 0.11942476350087472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057766030416029235, 0.03776879688143797, 0.06642900377652972, 0.05869290758672485, 0.07007092271955973, 0.06674030234480888, 0.06682492911388149, 0.07866139118575521, 0.07403417907026344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063120525025147645, 0.008617236041764564, 0.0010669869705548507, 0.008174530345699038, 9.999999999998899e-05, 9.999999999998899e-05, 0.018459916763430395, 0.03809951748852147, 0.0019320818743113755, 0.2822044462540647, 0.2652809731859441, 0.2772079026417146, 0.27651049721892473, 0.2580406197121373, 0.2685014891363341, 0.290288803222146, 0.2802544164932754, 0.27957348876293653, 0.06547980258293262, 0.0526330228237013, 0.0479252098107783, 0.05822015031445771, 0.08154611428004988, 0.059991982573906366, 0.06401575839698981, 0.0716243882250246, 0.05857656011712409, 0.14704339821183388, 0.1300174414596933, 0.13818039007312333, 0.14200383159293706, 0.14237914840976484, 0.16397557028282572, 0.14472500977150216, 0.15129331464467488, 0.12400880239052525, 0.18490929630542552, 0.19549054086812434, 0.2066815737789619, 0.20283123565301697, 0.20591287247039314, 0.22024066503259743, 0.18678692200776692, 0.20847054408905075, 0.21159791178555232, 0.13480244290700616, 0.14015745795248824, 0.1480881100978928, 0.16297613565976132, 0.18333007977735705, 0.16770476402377776, 0.1290666718111364, 0.12152145494863476, 0.12962749086025327, 0.26191187373955427, 0.24463614546099277, 0.17863186958558142, 0.1716017444877691, 0.20769049573179732, 0.19524683362436512, 0.19840532435432623, 0.18456223105171887, 0.20192112195099132, 0.16087605689466455, 0.16094418073757666, 0.16035246604044429, 0.1680823266999225, 0.16445515411684952, 0.1653133514520443, 0.1608220095043209, 0.16265861621329625, 0.1694235781032266, 0.17981446957752922, 0.18548425630575727, 0.17637498516161887, 0.2031687625741918, 0.23214554773630958, 0.32187985477622594, 0.2530240335091133, 0.31672797121378005, 0.27673948787129754, 0.28793441646514817, 0.22868004177115986, 0.19249569999399252, 0.1662840904642684, 0.16772973801457325, 0.206996676024372, 0.3054152302811143, 0.18990274276622598, 0.2182794159054886, 0.17937624767207638, 0.1853460273336175, 0.16694349917588092, 0.1802742278697338, 0.17940618259415264, 0.17830943089428986, 0.19979654880034559, 0.19172558110341786, 0.1763620930604617, 0.07289159505703169, 0.06068313813375592, 0.05949311559880843, 0.06313973437748888, 0.0641191852603461, 0.06831549648773694, 0.06481218571225578, 0.07383311215692956, 0.05821619990401927]}, "mutation_prompt": null}
{"id": "9cb9ca59-feda-460e-a136-8419a9b23e0c", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveInertiaDEPSO", "description": "Enhancing convergence speed by incorporating a dynamic adaptive mechanism for mutation and crossover rates based on individual performance.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9debbf58-a970-4324-83f7-f7a8126b9e02", "metadata": {"aucs": [0.2545683273648798, 0.284188126675587, 0.2435356808734649, 0.24558796876314493, 0.23993203470929958, 0.21066912272606153, 0.2885688272841469, 0.24489845049704873, 0.2543459540573283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07826296786967979, 0.07959299907902573, 0.07419060373996034, 0.05554130773326993, 0.06368382067753742, 0.07519538172300089, 0.0817322715390183, 0.061189854112671305, 0.07149230146103114, 0.05618333627973937, 0.05738833228135587, 0.058161190945672736, 0.050521008913915644, 0.054388103270047394, 0.05601027530311842, 0.06199819974728127, 0.04968736745604019, 0.061444574688368836, 0.16157116193771615, 0.13389904320892454, 0.16134591419112476, 0.9465090708847774, 0.5248110460938689, 0.8423434905058523, 0.20878395822164963, 0.6547220617030742, 0.14886156391269156, 0.1343470545416836, 0.1250806564356286, 0.14344591952854369, 0.10483423045553353, 0.11048992989308204, 0.10216192075631203, 0.12199728332914761, 0.13857821969751805, 0.13064283303445923, 0.18955214924534247, 0.1864614337749726, 0.1969421310555738, 0.1752518136906781, 0.17864272533857273, 0.2056638491250269, 0.1701636119510811, 0.2068617975885979, 0.2149484998989034, 0.10723177444512055, 0.07518448712157133, 0.0640409469442258, 0.030194727528811582, 0.041340294715132786, 0.06011358543051559, 0.09807946635917342, 0.09396651721856597, 0.05550992925572995, 0.1372598370716962, 0.11807208709962158, 0.11676495717461399, 0.13729030221163907, 0.12235335745136677, 0.14129401047386037, 0.1303803795529902, 0.12342858076635055, 0.11942476350087472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057766030416029235, 0.03776879688143797, 0.06642900377652972, 0.05869290758672485, 0.07007092271955973, 0.06674030234480888, 0.06682492911388149, 0.07866139118575521, 0.07403417907026344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063120525025147645, 0.008617236041764564, 0.0010669869705548507, 0.008174530345699038, 9.999999999998899e-05, 9.999999999998899e-05, 0.018459916763430395, 0.03809951748852147, 0.0019320818743113755, 0.2822044462540647, 0.2652809731859441, 0.2772079026417146, 0.27651049721892473, 0.2580406197121373, 0.2685014891363341, 0.290288803222146, 0.2802544164932754, 0.27957348876293653, 0.06547980258293262, 0.0526330228237013, 0.0479252098107783, 0.05822015031445771, 0.08154611428004988, 0.059991982573906366, 0.06401575839698981, 0.0716243882250246, 0.05857656011712409, 0.14704339821183388, 0.1300174414596933, 0.13818039007312333, 0.14200383159293706, 0.14237914840976484, 0.16397557028282572, 0.14472500977150216, 0.15129331464467488, 0.12400880239052525, 0.18490929630542552, 0.19549054086812434, 0.2066815737789619, 0.20283123565301697, 0.20591287247039314, 0.22024066503259743, 0.18678692200776692, 0.20847054408905075, 0.21159791178555232, 0.13480244290700616, 0.14015745795248824, 0.1480881100978928, 0.16297613565976132, 0.18333007977735705, 0.16770476402377776, 0.1290666718111364, 0.12152145494863476, 0.12962749086025327, 0.26191187373955427, 0.24463614546099277, 0.17863186958558142, 0.1716017444877691, 0.20769049573179732, 0.19524683362436512, 0.19840532435432623, 0.18456223105171887, 0.20192112195099132, 0.16087605689466455, 0.16094418073757666, 0.16035246604044429, 0.1680823266999225, 0.16445515411684952, 0.1653133514520443, 0.1608220095043209, 0.16265861621329625, 0.1694235781032266, 0.17981446957752922, 0.18548425630575727, 0.17637498516161887, 0.2031687625741918, 0.23214554773630958, 0.32187985477622594, 0.2530240335091133, 0.31672797121378005, 0.27673948787129754, 0.28793441646514817, 0.22868004177115986, 0.19249569999399252, 0.1662840904642684, 0.16772973801457325, 0.206996676024372, 0.3054152302811143, 0.18990274276622598, 0.2182794159054886, 0.17937624767207638, 0.1853460273336175, 0.16694349917588092, 0.1802742278697338, 0.17940618259415264, 0.17830943089428986, 0.19979654880034559, 0.19172558110341786, 0.1763620930604617, 0.07289159505703169, 0.06068313813375592, 0.05949311559880843, 0.06313973437748888, 0.0641191852603461, 0.06831549648773694, 0.06481218571225578, 0.07383311215692956, 0.05821619990401927]}, "mutation_prompt": null}
{"id": "f853ccb0-29f7-48bb-90a0-0f4bd2460315", "solution": "# import numpy as np\n\nclass AcceleratedAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.35 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.35 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "AcceleratedAdaptiveInertiaDEPSO", "description": "Accelerating convergence by incorporating adaptive mutation and crossover probabilities based on individual performance.", "configspace": "", "generation": 55, "fitness": 0.12879877794120828, "feedback": "The algorithm AcceleratedAdaptiveInertiaDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.10.", "error": "", "parent_id": "9debbf58-a970-4324-83f7-f7a8126b9e02", "metadata": {"aucs": [0.23831015670958333, 0.28484512014022245, 0.2549391357003127, 0.25434225494871043, 0.2292045155280883, 0.21584580811950738, 0.24572369097644298, 0.24510388611138711, 0.24396315747882635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020038473236898224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06638917062664218, 0.0714455335020091, 0.07420694972377229, 0.057711185051934843, 0.05996929400222506, 0.07417694721708035, 0.06435476070718993, 0.061640149161167, 0.08015412741153627, 0.04991926273129288, 0.06336998279324146, 0.0651170704961096, 0.050432951040071394, 0.054733996185113765, 0.06364149087051452, 0.05077193203181518, 0.05495833251422677, 0.05074707473396922, 0.1615712102783189, 0.14354129346705413, 0.4543887356432996, 0.946512589697883, 0.15314804325070996, 0.15697192147700734, 0.13433366747277342, 0.13372661793692753, 0.14625044943410426, 0.13750376284689414, 0.11369257542270805, 0.14281437042547518, 0.13536772379944417, 0.1044065826573003, 0.11246524092313792, 0.13185420631694322, 0.140084682693005, 0.11000764832513199, 0.1658653132174348, 0.1869713929259872, 0.1746093197085995, 0.16336815311047215, 0.16510824331188245, 0.16871313527103904, 0.17577690871775808, 0.15593081075747905, 0.18673055110732872, 0.06848643551773093, 0.052934590390895764, 0.08844143755342515, 0.07232282806682144, 0.03124669016822934, 0.041532809129765536, 0.07256097320555888, 0.04435447182374597, 0.056608537494039046, 0.15008284585185683, 0.12704113971355835, 0.10275768991907974, 0.1250697622099286, 0.11883484461300309, 0.1360231671671147, 0.13833533328256287, 0.12040653358802733, 0.14707387770907188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05402327551033792, 0.06611241923433842, 0.06399346882084778, 0.0492035348651787, 0.06809136196635313, 0.04766588006919015, 0.05442190874588104, 0.0883548105388201, 0.07284459632785512, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016310055855843553, 0.0465994303323114, 0.0046941171617606026, 0.009747457767822376, 0.01031671727820882, 0.019050524901835564, 0.0003086517096053676, 0.03799726418902938, 0.010469416851269342, 0.29877534472730927, 0.2644327391060768, 0.28711427986581983, 0.2770260430306325, 0.26268192719685457, 0.2629405591726076, 0.29371628858756826, 0.2858873342494809, 0.25276008562296215, 0.06181378024947948, 0.061908752392268784, 0.07802542503133247, 0.06587394627375143, 0.06533142539490966, 0.05984295110067084, 0.07646567722566855, 0.07261901824913952, 0.05934931480810557, 0.11322083724819387, 0.14497313142827384, 0.13619567201889948, 0.1288935010665928, 0.15040968412741385, 0.14077185726314367, 0.1173563414041191, 0.13510061902359904, 0.15872128285849318, 0.19384058524057868, 0.1911758223998995, 0.19611061051458623, 0.2147499568984751, 0.2212008113543682, 0.23290295715266174, 0.18500632421504903, 0.181156721631188, 0.19656458089728357, 0.13600852636742056, 0.14208051834206148, 0.1508064251911435, 0.1553554873440306, 0.16883519149865966, 0.18749039915291021, 0.1431268736665161, 0.13156696484815744, 0.14222713639709128, 0.1926432216961378, 0.20946902066937234, 0.1920124399288219, 0.17791408321701563, 0.19691188887038413, 0.18977187441964627, 0.2030935083524772, 0.1967510491652188, 0.21096998947618373, 0.1681278567419282, 0.1654620013487036, 0.16332131052050702, 0.1644602145751014, 0.16284603335374725, 0.16525509269297767, 0.16727965395238265, 0.16056691515350163, 0.16901436331716335, 0.18155435791567853, 0.16050439452844933, 0.17697386309737084, 0.1864553973200367, 0.21088057434848428, 0.3181983555753254, 0.21464994914387703, 0.22365552396258837, 0.2768628483285239, 0.2932385783718482, 0.16987648033620462, 0.2546672575095712, 0.1710525580017329, 0.21940963829784932, 0.18882008838532438, 0.29927838590298317, 0.19973558390223467, 0.1956417326800205, 0.17611670640506727, 0.17114172854291743, 0.18543883257227545, 0.18012876186490612, 0.1669094795227296, 0.19495433609086854, 0.2074664301787139, 0.18591252291324467, 0.18394621377093034, 0.06445645001894607, 0.06295920426629587, 0.06716740555452139, 0.0732462298500346, 0.06501341287601459, 0.06603673341261906, 0.07617413942243345, 0.08025026395476509, 0.06878696771199178]}, "mutation_prompt": null}
{"id": "1e661756-1e4c-4457-a093-612eb440455b", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.4 * (self.max_inertia - self.min_inertia)  # Adjusted from 1.3 to 1.4 for faster convergence\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.4 * (self.max_c3 - self.min_c3)  # Adjusted from 1.3 to 1.4 for faster convergence\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveInertiaDEPSO", "description": "Improved convergence speed by dynamically adjusting mutation and crossover rates based on individual and global performance to enhance exploration and exploitation balance.", "configspace": "", "generation": 56, "fitness": 0.132900879741658, "feedback": "The algorithm EnhancedAdaptiveInertiaDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "9debbf58-a970-4324-83f7-f7a8126b9e02", "metadata": {"aucs": [0.28084820752512885, 0.28386932420723465, 0.2945393331115993, 0.2160738928898298, 0.22951045579596308, 0.225524263424431, 0.23065764138020617, 0.24526306550516075, 0.2670088721794218, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023294324995924764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0890131567534469, 0.06686672850320519, 0.07421839191611379, 0.06173187425385673, 0.07435670805295325, 0.06846761567546422, 0.06315406365168696, 0.09843407642052282, 0.06681799003976852, 0.07079785220112966, 0.04897562155280122, 0.06215835630270505, 0.05488622661903886, 0.06195326118894695, 0.07592802348277561, 0.08088846214276979, 0.05127912863491313, 0.05807114600793006, 0.3678816413176368, 0.13813318269150898, 0.37541246142089335, 0.9465154854227567, 0.7252988600750685, 0.15937570696222103, 0.2556260457544538, 0.13238915290471942, 0.13818333584230313, 0.13408470871526645, 0.10850195407315555, 0.14235069556695967, 0.10669738814422436, 0.1012843298194257, 0.13994483159471383, 0.13316175063482782, 0.13756495301056726, 0.13478133246292434, 0.1768706700618311, 0.18836575538693845, 0.17504532631956082, 0.16028177934760224, 0.1788529885416441, 0.2444354784375129, 0.18242490485500362, 0.14335057050618183, 0.16563312689066045, 0.07144643811651219, 0.06870567889429491, 0.054887859676437945, 0.061967485332972916, 0.04660004552790176, 0.05272311755380088, 0.06388099793253821, 0.031243779853740272, 0.0610531331029035, 0.16077128556356346, 0.11271975612414331, 0.11524227775007145, 0.11291736278786779, 0.12570948346234057, 0.13666246590077258, 0.12832895722493232, 0.12753961515174073, 0.10009614138777545, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023614085747507896, 0.08745907216468407, 0.05264910414186019, 0.05851533868871339, 0.051051601981815686, 0.08029136054493413, 0.06116738985499637, 0.05739065118845044, 0.07573343313301661, 0.0795357640175769, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007354295818931655, 0.00724002604622076, 9.999999999998899e-05, 0.0036078866165405454, 0.015549207971141565, 0.022376978817067905, 9.999999999998899e-05, 0.037980959429778305, 0.008638617820966643, 0.2719805439206384, 0.26196920396355583, 0.28707387159285414, 0.27995446513773437, 0.2558599825028167, 0.2551775387722939, 0.3105441504673371, 0.26359939839379287, 0.2674125953150007, 0.060071748974370176, 0.06573619951524545, 0.07837881940139801, 0.058342211277554235, 0.06263802470061641, 0.06283845875399074, 0.06864927483435768, 0.06866851272166274, 0.06543032198735799, 0.13910131839416695, 0.13219885999486136, 0.12995128629724517, 0.1266992546866058, 0.18069200677810915, 0.12253380237245126, 0.12954554511052452, 0.13958013996259555, 0.13686300099785698, 0.1812271296201624, 0.20557684155058453, 0.2083672156563644, 0.2285907318424868, 0.2316795219406632, 0.2193591566992954, 0.17843144790512744, 0.1762341199710581, 0.18991048813090305, 0.13701027192234472, 0.14095907223561133, 0.14118644013443404, 0.16612460581280952, 0.16009245764496705, 0.15464628358311305, 0.13726946214515356, 0.14492967888310015, 0.12800623418752566, 0.18174770995641032, 0.21153499131218734, 0.19184028903061368, 0.19101136705424537, 0.18588373340098874, 0.17228939985691816, 0.19532116014298206, 0.19261621235279003, 0.17932872975530212, 0.16361763733489987, 0.16078673502179064, 0.16563309922878566, 0.16364669509910512, 0.16508228774044897, 0.16297401038351178, 0.16250956911848657, 0.160220680007635, 0.16942461590498226, 0.17307758376943716, 0.16599000607712056, 0.16521469311537473, 0.2261823416896208, 0.20115575476705827, 0.31448524174291625, 0.24135346886592324, 0.17399024246241168, 0.33429870080536217, 0.33730265130200054, 0.1889838928855866, 0.25406835956987517, 0.19415591792569564, 0.2323695369791211, 0.18454181322111762, 0.19786163826426295, 0.187465532105771, 0.21199237764744527, 0.16718581220502382, 0.16977950781279738, 0.1675429388994284, 0.18063413905791315, 0.21209629365394633, 0.187384176314363, 0.1833774242386782, 0.187052423122956, 0.17490309184295605, 0.06550812107685255, 0.07085522929610177, 0.06650693175000322, 0.06323802960594183, 0.0768946108294778, 0.06865880152850568, 0.06337457633587895, 0.07500590087446213, 0.07315350665795761]}, "mutation_prompt": null}
{"id": "3b752458-d3f9-4a5a-bd14-0c054e0e906d", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveInertiaDEPSO", "description": "Enhancing convergence speed by incorporating a dynamic adaptive mechanism for mutation and crossover rates based on individual performance.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9debbf58-a970-4324-83f7-f7a8126b9e02", "metadata": {"aucs": [0.2545683273648798, 0.284188126675587, 0.2435356808734649, 0.24558796876314493, 0.23993203470929958, 0.21066912272606153, 0.2885688272841469, 0.24489845049704873, 0.2543459540573283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07826296786967979, 0.07959299907902573, 0.07419060373996034, 0.05554130773326993, 0.06368382067753742, 0.07519538172300089, 0.0817322715390183, 0.061189854112671305, 0.07149230146103114, 0.05618333627973937, 0.05738833228135587, 0.058161190945672736, 0.050521008913915644, 0.054388103270047394, 0.05601027530311842, 0.06199819974728127, 0.04968736745604019, 0.061444574688368836, 0.16157116193771615, 0.13389904320892454, 0.16134591419112476, 0.9465090708847774, 0.5248110460938689, 0.8423434905058523, 0.20878395822164963, 0.6547220617030742, 0.14886156391269156, 0.1343470545416836, 0.1250806564356286, 0.14344591952854369, 0.10483423045553353, 0.11048992989308204, 0.10216192075631203, 0.12199728332914761, 0.13857821969751805, 0.13064283303445923, 0.18955214924534247, 0.1864614337749726, 0.1969421310555738, 0.1752518136906781, 0.17864272533857273, 0.2056638491250269, 0.1701636119510811, 0.2068617975885979, 0.2149484998989034, 0.10723177444512055, 0.07518448712157133, 0.0640409469442258, 0.030194727528811582, 0.041340294715132786, 0.06011358543051559, 0.09807946635917342, 0.09396651721856597, 0.05550992925572995, 0.1372598370716962, 0.11807208709962158, 0.11676495717461399, 0.13729030221163907, 0.12235335745136677, 0.14129401047386037, 0.1303803795529902, 0.12342858076635055, 0.11942476350087472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057766030416029235, 0.03776879688143797, 0.06642900377652972, 0.05869290758672485, 0.07007092271955973, 0.06674030234480888, 0.06682492911388149, 0.07866139118575521, 0.07403417907026344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063120525025147645, 0.008617236041764564, 0.0010669869705548507, 0.008174530345699038, 9.999999999998899e-05, 9.999999999998899e-05, 0.018459916763430395, 0.03809951748852147, 0.0019320818743113755, 0.2822044462540647, 0.2652809731859441, 0.2772079026417146, 0.27651049721892473, 0.2580406197121373, 0.2685014891363341, 0.290288803222146, 0.2802544164932754, 0.27957348876293653, 0.06547980258293262, 0.0526330228237013, 0.0479252098107783, 0.05822015031445771, 0.08154611428004988, 0.059991982573906366, 0.06401575839698981, 0.0716243882250246, 0.05857656011712409, 0.14704339821183388, 0.1300174414596933, 0.13818039007312333, 0.14200383159293706, 0.14237914840976484, 0.16397557028282572, 0.14472500977150216, 0.15129331464467488, 0.12400880239052525, 0.18490929630542552, 0.19549054086812434, 0.2066815737789619, 0.20283123565301697, 0.20591287247039314, 0.22024066503259743, 0.18678692200776692, 0.20847054408905075, 0.21159791178555232, 0.13480244290700616, 0.14015745795248824, 0.1480881100978928, 0.16297613565976132, 0.18333007977735705, 0.16770476402377776, 0.1290666718111364, 0.12152145494863476, 0.12962749086025327, 0.26191187373955427, 0.24463614546099277, 0.17863186958558142, 0.1716017444877691, 0.20769049573179732, 0.19524683362436512, 0.19840532435432623, 0.18456223105171887, 0.20192112195099132, 0.16087605689466455, 0.16094418073757666, 0.16035246604044429, 0.1680823266999225, 0.16445515411684952, 0.1653133514520443, 0.1608220095043209, 0.16265861621329625, 0.1694235781032266, 0.17981446957752922, 0.18548425630575727, 0.17637498516161887, 0.2031687625741918, 0.23214554773630958, 0.32187985477622594, 0.2530240335091133, 0.31672797121378005, 0.27673948787129754, 0.28793441646514817, 0.22868004177115986, 0.19249569999399252, 0.1662840904642684, 0.16772973801457325, 0.206996676024372, 0.3054152302811143, 0.18990274276622598, 0.2182794159054886, 0.17937624767207638, 0.1853460273336175, 0.16694349917588092, 0.1802742278697338, 0.17940618259415264, 0.17830943089428986, 0.19979654880034559, 0.19172558110341786, 0.1763620930604617, 0.07289159505703169, 0.06068313813375592, 0.05949311559880843, 0.06313973437748888, 0.0641191852603461, 0.06831549648773694, 0.06481218571225578, 0.07383311215692956, 0.05821619990401927]}, "mutation_prompt": null}
{"id": "339929eb-8875-442e-8d16-36ae4032446e", "solution": "# import numpy as np\n\nclass FastAdaptiveConvergenceDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.4 * (self.max_inertia - self.min_inertia) # Modified power term\n\n            # Dynamic adaptation with greater influence from personal best\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.4 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "FastAdaptiveConvergenceDEPSO", "description": "Accelerating convergence by dynamically adapting mutation and crossover rates with a distinctive influence from personal best performance.", "configspace": "", "generation": 58, "fitness": 0.132900879741658, "feedback": "The algorithm FastAdaptiveConvergenceDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "9debbf58-a970-4324-83f7-f7a8126b9e02", "metadata": {"aucs": [0.28084820752512885, 0.28386932420723465, 0.2945393331115993, 0.2160738928898298, 0.22951045579596308, 0.225524263424431, 0.23065764138020617, 0.24526306550516075, 0.2670088721794218, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023294324995924764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0890131567534469, 0.06686672850320519, 0.07421839191611379, 0.06173187425385673, 0.07435670805295325, 0.06846761567546422, 0.06315406365168696, 0.09843407642052282, 0.06681799003976852, 0.07079785220112966, 0.04897562155280122, 0.06215835630270505, 0.05488622661903886, 0.06195326118894695, 0.07592802348277561, 0.08088846214276979, 0.05127912863491313, 0.05807114600793006, 0.3678816413176368, 0.13813318269150898, 0.37541246142089335, 0.9465154854227567, 0.7252988600750685, 0.15937570696222103, 0.2556260457544538, 0.13238915290471942, 0.13818333584230313, 0.13408470871526645, 0.10850195407315555, 0.14235069556695967, 0.10669738814422436, 0.1012843298194257, 0.13994483159471383, 0.13316175063482782, 0.13756495301056726, 0.13478133246292434, 0.1768706700618311, 0.18836575538693845, 0.17504532631956082, 0.16028177934760224, 0.1788529885416441, 0.2444354784375129, 0.18242490485500362, 0.14335057050618183, 0.16563312689066045, 0.07144643811651219, 0.06870567889429491, 0.054887859676437945, 0.061967485332972916, 0.04660004552790176, 0.05272311755380088, 0.06388099793253821, 0.031243779853740272, 0.0610531331029035, 0.16077128556356346, 0.11271975612414331, 0.11524227775007145, 0.11291736278786779, 0.12570948346234057, 0.13666246590077258, 0.12832895722493232, 0.12753961515174073, 0.10009614138777545, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023614085747507896, 0.08745907216468407, 0.05264910414186019, 0.05851533868871339, 0.051051601981815686, 0.08029136054493413, 0.06116738985499637, 0.05739065118845044, 0.07573343313301661, 0.0795357640175769, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007354295818931655, 0.00724002604622076, 9.999999999998899e-05, 0.0036078866165405454, 0.015549207971141565, 0.022376978817067905, 9.999999999998899e-05, 0.037980959429778305, 0.008638617820966643, 0.2719805439206384, 0.26196920396355583, 0.28707387159285414, 0.27995446513773437, 0.2558599825028167, 0.2551775387722939, 0.3105441504673371, 0.26359939839379287, 0.2674125953150007, 0.060071748974370176, 0.06573619951524545, 0.07837881940139801, 0.058342211277554235, 0.06263802470061641, 0.06283845875399074, 0.06864927483435768, 0.06866851272166274, 0.06543032198735799, 0.13910131839416695, 0.13219885999486136, 0.12995128629724517, 0.1266992546866058, 0.18069200677810915, 0.12253380237245126, 0.12954554511052452, 0.13958013996259555, 0.13686300099785698, 0.1812271296201624, 0.20557684155058453, 0.2083672156563644, 0.2285907318424868, 0.2316795219406632, 0.2193591566992954, 0.17843144790512744, 0.1762341199710581, 0.18991048813090305, 0.13701027192234472, 0.14095907223561133, 0.14118644013443404, 0.16612460581280952, 0.16009245764496705, 0.15464628358311305, 0.13726946214515356, 0.14492967888310015, 0.12800623418752566, 0.18174770995641032, 0.21153499131218734, 0.19184028903061368, 0.19101136705424537, 0.18588373340098874, 0.17228939985691816, 0.19532116014298206, 0.19261621235279003, 0.17932872975530212, 0.16361763733489987, 0.16078673502179064, 0.16563309922878566, 0.16364669509910512, 0.16508228774044897, 0.16297401038351178, 0.16250956911848657, 0.160220680007635, 0.16942461590498226, 0.17307758376943716, 0.16599000607712056, 0.16521469311537473, 0.2261823416896208, 0.20115575476705827, 0.31448524174291625, 0.24135346886592324, 0.17399024246241168, 0.33429870080536217, 0.33730265130200054, 0.1889838928855866, 0.25406835956987517, 0.19415591792569564, 0.2323695369791211, 0.18454181322111762, 0.19786163826426295, 0.187465532105771, 0.21199237764744527, 0.16718581220502382, 0.16977950781279738, 0.1675429388994284, 0.18063413905791315, 0.21209629365394633, 0.187384176314363, 0.1833774242386782, 0.187052423122956, 0.17490309184295605, 0.06550812107685255, 0.07085522929610177, 0.06650693175000322, 0.06323802960594183, 0.0768946108294778, 0.06865880152850568, 0.06337457633587895, 0.07500590087446213, 0.07315350665795761]}, "mutation_prompt": null}
{"id": "e22620a6-b1cc-4ab6-866f-c3190e076045", "solution": "import numpy as np\n\nclass AcceleratedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95) + 0.1, 0.1, 0.9)  # Adjusted mutation rate update\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95) - 0.1, 0.1, 0.9)  # Adjusted crossover rate update\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "AcceleratedDEPSO", "description": "Accelerating convergence speed by dynamically adjusting mutation and crossover rates based on individual performance while introducing a novel diversification mechanism to escape local optima.", "configspace": "", "generation": 59, "fitness": 0.1299231317696277, "feedback": "The algorithm AcceleratedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "9debbf58-a970-4324-83f7-f7a8126b9e02", "metadata": {"aucs": [0.2683356571245281, 0.27208780444307157, 0.29773027378564143, 0.22700225807302532, 0.1993009067094218, 0.21159647480951305, 0.26859851072186147, 0.25761293235516525, 0.27309221563622543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06087820580924708, 0.0669499225861051, 0.07370281786909705, 0.06970517322229441, 0.058637677353863715, 0.07947143881977259, 0.07580735564208319, 0.06512345209944537, 0.061122198110741044, 0.05690909105975939, 0.07527470129462055, 0.05535711320615044, 0.04730929948384166, 0.07190472559227112, 0.07226637780608558, 0.05972495394190569, 0.07851761945769598, 0.0631978008404871, 0.1652861138529188, 0.14306839171734265, 0.15765843903132504, 0.14245544042200653, 0.13405264087267366, 0.19292352797827061, 0.7192884466599057, 0.12417457599776793, 0.139576544448206, 0.10912961683795297, 0.12475928093920252, 0.10183627831628728, 0.1109154052410255, 0.11688956466153266, 0.1163177276827757, 0.10567620419118817, 0.115954214705559, 0.12818231026744198, 0.20672571599351197, 0.20894801798640839, 0.19393654339468602, 0.1873996448008315, 0.17733345722329852, 0.16972658419607434, 0.22446128713693458, 0.17583624252670937, 0.16991522043951557, 0.09280487456890585, 0.0916992653312112, 0.0785429712873994, 0.07474046679369062, 0.07038214111315522, 0.02039774905409375, 0.09260566101707612, 0.09032892901955059, 0.08623328178090961, 0.20954409139989816, 0.1569949276358673, 0.14759971747450906, 0.16446116958458712, 0.16005384906051134, 0.15158493009586016, 0.20436777469944545, 0.15980901229179723, 0.1691903038041308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08042976325871565, 0.07992288226577804, 0.06974527597691171, 0.08590240330279719, 0.05209091934805199, 0.05905035781763768, 0.06128271670600827, 0.10019735183417922, 0.09684299237031335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013019489027899511, 0.023132723478323403, 0.008512469481597562, 0.0035035182948622845, 0.008343066192724624, 0.027888211346530967, 0.020124105784829815, 0.027063681560981045, 0.0009787377344160353, 0.2717868151249272, 0.3170127369492438, 0.2910229020987253, 0.2827067335191664, 0.26257978622080813, 0.2459399719991634, 0.30994243437947966, 0.33280515315322057, 0.28301898859969876, 0.05022121657480716, 0.057551623814763975, 0.06768479403303007, 0.0582855628341884, 0.07835526579451457, 0.06241752219307095, 0.058171012074471395, 0.07954921088804334, 0.09093996524325776, 0.1392316198389113, 0.14752482553604163, 0.1418836440093897, 0.15284552011313646, 0.12109408609045491, 0.1202917112047579, 0.1417859235894623, 0.1288972611075464, 0.16042080435158823, 0.20572570711517713, 0.1711560638232308, 0.17648643171400058, 0.2396999829800187, 0.21768191120935376, 0.23752352668371746, 0.19429672296084932, 0.20131515654283105, 0.2034943660425821, 0.14263422672272696, 0.1497334336931332, 0.14436566437502096, 0.18299318987644098, 0.16828119573802924, 0.18270259796913746, 0.14290552609164608, 0.13786059096408065, 0.1324275242871492, 0.20515533198006564, 0.1910967146116066, 0.2002353233646973, 0.2155437403360898, 0.18215722894563346, 0.21174334567389597, 0.21795735842582553, 0.20344101626099687, 0.21656730426813153, 0.1695930465982548, 0.17305663807065008, 0.16394998062086996, 0.163471356936986, 0.15879365698895886, 0.1628788702874957, 0.17369296073657348, 0.17092742876971334, 0.16829657456816205, 0.18079793624893248, 0.17441147074690833, 0.18113132811992427, 0.22584801069673133, 0.1967625743571808, 0.16595767302161057, 0.1462258156931182, 0.21611021219896187, 0.3962224233474787, 0.2287556042568586, 0.22549983320836187, 0.27135111808560175, 0.16681559035017812, 0.2221740458862992, 0.17105553292015374, 0.11126910207308593, 0.17689295854215248, 0.18644721117466168, 0.18563876983837868, 0.1722119834883784, 0.1802101967842915, 0.16994113303836034, 0.18052224663537997, 0.1814039656602221, 0.18399547846165476, 0.17447004997737514, 0.17667818594314466, 0.07407946370796359, 0.061415487013853465, 0.061967167483413355, 0.06998313737052797, 0.06811781554321938, 0.06546791601155089, 0.058154650023649834, 0.06855799008387442, 0.08132741950610967]}, "mutation_prompt": null}
{"id": "34fd5e5e-5fc7-4a46-bddc-baecc754443a", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveInertiaDEPSO", "description": "Enhancing convergence speed by incorporating a dynamic adaptive mechanism for mutation and crossover rates based on individual performance.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9debbf58-a970-4324-83f7-f7a8126b9e02", "metadata": {"aucs": [0.2545683273648798, 0.284188126675587, 0.2435356808734649, 0.24558796876314493, 0.23993203470929958, 0.21066912272606153, 0.2885688272841469, 0.24489845049704873, 0.2543459540573283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07826296786967979, 0.07959299907902573, 0.07419060373996034, 0.05554130773326993, 0.06368382067753742, 0.07519538172300089, 0.0817322715390183, 0.061189854112671305, 0.07149230146103114, 0.05618333627973937, 0.05738833228135587, 0.058161190945672736, 0.050521008913915644, 0.054388103270047394, 0.05601027530311842, 0.06199819974728127, 0.04968736745604019, 0.061444574688368836, 0.16157116193771615, 0.13389904320892454, 0.16134591419112476, 0.9465090708847774, 0.5248110460938689, 0.8423434905058523, 0.20878395822164963, 0.6547220617030742, 0.14886156391269156, 0.1343470545416836, 0.1250806564356286, 0.14344591952854369, 0.10483423045553353, 0.11048992989308204, 0.10216192075631203, 0.12199728332914761, 0.13857821969751805, 0.13064283303445923, 0.18955214924534247, 0.1864614337749726, 0.1969421310555738, 0.1752518136906781, 0.17864272533857273, 0.2056638491250269, 0.1701636119510811, 0.2068617975885979, 0.2149484998989034, 0.10723177444512055, 0.07518448712157133, 0.0640409469442258, 0.030194727528811582, 0.041340294715132786, 0.06011358543051559, 0.09807946635917342, 0.09396651721856597, 0.05550992925572995, 0.1372598370716962, 0.11807208709962158, 0.11676495717461399, 0.13729030221163907, 0.12235335745136677, 0.14129401047386037, 0.1303803795529902, 0.12342858076635055, 0.11942476350087472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057766030416029235, 0.03776879688143797, 0.06642900377652972, 0.05869290758672485, 0.07007092271955973, 0.06674030234480888, 0.06682492911388149, 0.07866139118575521, 0.07403417907026344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063120525025147645, 0.008617236041764564, 0.0010669869705548507, 0.008174530345699038, 9.999999999998899e-05, 9.999999999998899e-05, 0.018459916763430395, 0.03809951748852147, 0.0019320818743113755, 0.2822044462540647, 0.2652809731859441, 0.2772079026417146, 0.27651049721892473, 0.2580406197121373, 0.2685014891363341, 0.290288803222146, 0.2802544164932754, 0.27957348876293653, 0.06547980258293262, 0.0526330228237013, 0.0479252098107783, 0.05822015031445771, 0.08154611428004988, 0.059991982573906366, 0.06401575839698981, 0.0716243882250246, 0.05857656011712409, 0.14704339821183388, 0.1300174414596933, 0.13818039007312333, 0.14200383159293706, 0.14237914840976484, 0.16397557028282572, 0.14472500977150216, 0.15129331464467488, 0.12400880239052525, 0.18490929630542552, 0.19549054086812434, 0.2066815737789619, 0.20283123565301697, 0.20591287247039314, 0.22024066503259743, 0.18678692200776692, 0.20847054408905075, 0.21159791178555232, 0.13480244290700616, 0.14015745795248824, 0.1480881100978928, 0.16297613565976132, 0.18333007977735705, 0.16770476402377776, 0.1290666718111364, 0.12152145494863476, 0.12962749086025327, 0.26191187373955427, 0.24463614546099277, 0.17863186958558142, 0.1716017444877691, 0.20769049573179732, 0.19524683362436512, 0.19840532435432623, 0.18456223105171887, 0.20192112195099132, 0.16087605689466455, 0.16094418073757666, 0.16035246604044429, 0.1680823266999225, 0.16445515411684952, 0.1653133514520443, 0.1608220095043209, 0.16265861621329625, 0.1694235781032266, 0.17981446957752922, 0.18548425630575727, 0.17637498516161887, 0.2031687625741918, 0.23214554773630958, 0.32187985477622594, 0.2530240335091133, 0.31672797121378005, 0.27673948787129754, 0.28793441646514817, 0.22868004177115986, 0.19249569999399252, 0.1662840904642684, 0.16772973801457325, 0.206996676024372, 0.3054152302811143, 0.18990274276622598, 0.2182794159054886, 0.17937624767207638, 0.1853460273336175, 0.16694349917588092, 0.1802742278697338, 0.17940618259415264, 0.17830943089428986, 0.19979654880034559, 0.19172558110341786, 0.1763620930604617, 0.07289159505703169, 0.06068313813375592, 0.05949311559880843, 0.06313973437748888, 0.0641191852603461, 0.06831549648773694, 0.06481218571225578, 0.07383311215692956, 0.05821619990401927]}, "mutation_prompt": null}
{"id": "ce9ad5bf-2ca1-4b12-8635-16a15f61c48c", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveInertiaDEPSO", "description": "Enhancing convergence speed by incorporating a dynamic adaptive mechanism for mutation and crossover rates based on individual performance.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9debbf58-a970-4324-83f7-f7a8126b9e02", "metadata": {"aucs": [0.2545683273648798, 0.284188126675587, 0.2435356808734649, 0.24558796876314493, 0.23993203470929958, 0.21066912272606153, 0.2885688272841469, 0.24489845049704873, 0.2543459540573283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07826296786967979, 0.07959299907902573, 0.07419060373996034, 0.05554130773326993, 0.06368382067753742, 0.07519538172300089, 0.0817322715390183, 0.061189854112671305, 0.07149230146103114, 0.05618333627973937, 0.05738833228135587, 0.058161190945672736, 0.050521008913915644, 0.054388103270047394, 0.05601027530311842, 0.06199819974728127, 0.04968736745604019, 0.061444574688368836, 0.16157116193771615, 0.13389904320892454, 0.16134591419112476, 0.9465090708847774, 0.5248110460938689, 0.8423434905058523, 0.20878395822164963, 0.6547220617030742, 0.14886156391269156, 0.1343470545416836, 0.1250806564356286, 0.14344591952854369, 0.10483423045553353, 0.11048992989308204, 0.10216192075631203, 0.12199728332914761, 0.13857821969751805, 0.13064283303445923, 0.18955214924534247, 0.1864614337749726, 0.1969421310555738, 0.1752518136906781, 0.17864272533857273, 0.2056638491250269, 0.1701636119510811, 0.2068617975885979, 0.2149484998989034, 0.10723177444512055, 0.07518448712157133, 0.0640409469442258, 0.030194727528811582, 0.041340294715132786, 0.06011358543051559, 0.09807946635917342, 0.09396651721856597, 0.05550992925572995, 0.1372598370716962, 0.11807208709962158, 0.11676495717461399, 0.13729030221163907, 0.12235335745136677, 0.14129401047386037, 0.1303803795529902, 0.12342858076635055, 0.11942476350087472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057766030416029235, 0.03776879688143797, 0.06642900377652972, 0.05869290758672485, 0.07007092271955973, 0.06674030234480888, 0.06682492911388149, 0.07866139118575521, 0.07403417907026344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063120525025147645, 0.008617236041764564, 0.0010669869705548507, 0.008174530345699038, 9.999999999998899e-05, 9.999999999998899e-05, 0.018459916763430395, 0.03809951748852147, 0.0019320818743113755, 0.2822044462540647, 0.2652809731859441, 0.2772079026417146, 0.27651049721892473, 0.2580406197121373, 0.2685014891363341, 0.290288803222146, 0.2802544164932754, 0.27957348876293653, 0.06547980258293262, 0.0526330228237013, 0.0479252098107783, 0.05822015031445771, 0.08154611428004988, 0.059991982573906366, 0.06401575839698981, 0.0716243882250246, 0.05857656011712409, 0.14704339821183388, 0.1300174414596933, 0.13818039007312333, 0.14200383159293706, 0.14237914840976484, 0.16397557028282572, 0.14472500977150216, 0.15129331464467488, 0.12400880239052525, 0.18490929630542552, 0.19549054086812434, 0.2066815737789619, 0.20283123565301697, 0.20591287247039314, 0.22024066503259743, 0.18678692200776692, 0.20847054408905075, 0.21159791178555232, 0.13480244290700616, 0.14015745795248824, 0.1480881100978928, 0.16297613565976132, 0.18333007977735705, 0.16770476402377776, 0.1290666718111364, 0.12152145494863476, 0.12962749086025327, 0.26191187373955427, 0.24463614546099277, 0.17863186958558142, 0.1716017444877691, 0.20769049573179732, 0.19524683362436512, 0.19840532435432623, 0.18456223105171887, 0.20192112195099132, 0.16087605689466455, 0.16094418073757666, 0.16035246604044429, 0.1680823266999225, 0.16445515411684952, 0.1653133514520443, 0.1608220095043209, 0.16265861621329625, 0.1694235781032266, 0.17981446957752922, 0.18548425630575727, 0.17637498516161887, 0.2031687625741918, 0.23214554773630958, 0.32187985477622594, 0.2530240335091133, 0.31672797121378005, 0.27673948787129754, 0.28793441646514817, 0.22868004177115986, 0.19249569999399252, 0.1662840904642684, 0.16772973801457325, 0.206996676024372, 0.3054152302811143, 0.18990274276622598, 0.2182794159054886, 0.17937624767207638, 0.1853460273336175, 0.16694349917588092, 0.1802742278697338, 0.17940618259415264, 0.17830943089428986, 0.19979654880034559, 0.19172558110341786, 0.1763620930604617, 0.07289159505703169, 0.06068313813375592, 0.05949311559880843, 0.06313973437748888, 0.0641191852603461, 0.06831549648773694, 0.06481218571225578, 0.07383311215692956, 0.05821619990401927]}, "mutation_prompt": null}
{"id": "e25c4559-8cab-409d-ada2-7b2ae35f60dd", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveInertiaDEPSO", "description": "Enhancing convergence speed by incorporating a dynamic adaptive mechanism for mutation and crossover rates based on individual performance.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9debbf58-a970-4324-83f7-f7a8126b9e02", "metadata": {"aucs": [0.2545683273648798, 0.284188126675587, 0.2435356808734649, 0.24558796876314493, 0.23993203470929958, 0.21066912272606153, 0.2885688272841469, 0.24489845049704873, 0.2543459540573283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07826296786967979, 0.07959299907902573, 0.07419060373996034, 0.05554130773326993, 0.06368382067753742, 0.07519538172300089, 0.0817322715390183, 0.061189854112671305, 0.07149230146103114, 0.05618333627973937, 0.05738833228135587, 0.058161190945672736, 0.050521008913915644, 0.054388103270047394, 0.05601027530311842, 0.06199819974728127, 0.04968736745604019, 0.061444574688368836, 0.16157116193771615, 0.13389904320892454, 0.16134591419112476, 0.9465090708847774, 0.5248110460938689, 0.8423434905058523, 0.20878395822164963, 0.6547220617030742, 0.14886156391269156, 0.1343470545416836, 0.1250806564356286, 0.14344591952854369, 0.10483423045553353, 0.11048992989308204, 0.10216192075631203, 0.12199728332914761, 0.13857821969751805, 0.13064283303445923, 0.18955214924534247, 0.1864614337749726, 0.1969421310555738, 0.1752518136906781, 0.17864272533857273, 0.2056638491250269, 0.1701636119510811, 0.2068617975885979, 0.2149484998989034, 0.10723177444512055, 0.07518448712157133, 0.0640409469442258, 0.030194727528811582, 0.041340294715132786, 0.06011358543051559, 0.09807946635917342, 0.09396651721856597, 0.05550992925572995, 0.1372598370716962, 0.11807208709962158, 0.11676495717461399, 0.13729030221163907, 0.12235335745136677, 0.14129401047386037, 0.1303803795529902, 0.12342858076635055, 0.11942476350087472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057766030416029235, 0.03776879688143797, 0.06642900377652972, 0.05869290758672485, 0.07007092271955973, 0.06674030234480888, 0.06682492911388149, 0.07866139118575521, 0.07403417907026344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063120525025147645, 0.008617236041764564, 0.0010669869705548507, 0.008174530345699038, 9.999999999998899e-05, 9.999999999998899e-05, 0.018459916763430395, 0.03809951748852147, 0.0019320818743113755, 0.2822044462540647, 0.2652809731859441, 0.2772079026417146, 0.27651049721892473, 0.2580406197121373, 0.2685014891363341, 0.290288803222146, 0.2802544164932754, 0.27957348876293653, 0.06547980258293262, 0.0526330228237013, 0.0479252098107783, 0.05822015031445771, 0.08154611428004988, 0.059991982573906366, 0.06401575839698981, 0.0716243882250246, 0.05857656011712409, 0.14704339821183388, 0.1300174414596933, 0.13818039007312333, 0.14200383159293706, 0.14237914840976484, 0.16397557028282572, 0.14472500977150216, 0.15129331464467488, 0.12400880239052525, 0.18490929630542552, 0.19549054086812434, 0.2066815737789619, 0.20283123565301697, 0.20591287247039314, 0.22024066503259743, 0.18678692200776692, 0.20847054408905075, 0.21159791178555232, 0.13480244290700616, 0.14015745795248824, 0.1480881100978928, 0.16297613565976132, 0.18333007977735705, 0.16770476402377776, 0.1290666718111364, 0.12152145494863476, 0.12962749086025327, 0.26191187373955427, 0.24463614546099277, 0.17863186958558142, 0.1716017444877691, 0.20769049573179732, 0.19524683362436512, 0.19840532435432623, 0.18456223105171887, 0.20192112195099132, 0.16087605689466455, 0.16094418073757666, 0.16035246604044429, 0.1680823266999225, 0.16445515411684952, 0.1653133514520443, 0.1608220095043209, 0.16265861621329625, 0.1694235781032266, 0.17981446957752922, 0.18548425630575727, 0.17637498516161887, 0.2031687625741918, 0.23214554773630958, 0.32187985477622594, 0.2530240335091133, 0.31672797121378005, 0.27673948787129754, 0.28793441646514817, 0.22868004177115986, 0.19249569999399252, 0.1662840904642684, 0.16772973801457325, 0.206996676024372, 0.3054152302811143, 0.18990274276622598, 0.2182794159054886, 0.17937624767207638, 0.1853460273336175, 0.16694349917588092, 0.1802742278697338, 0.17940618259415264, 0.17830943089428986, 0.19979654880034559, 0.19172558110341786, 0.1763620930604617, 0.07289159505703169, 0.06068313813375592, 0.05949311559880843, 0.06313973437748888, 0.0641191852603461, 0.06831549648773694, 0.06481218571225578, 0.07383311215692956, 0.05821619990401927]}, "mutation_prompt": null}
{"id": "62f63935-9f41-46dc-b14b-64f00e8476c6", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveInertiaDEPSO", "description": "Enhanced convergence speed by dynamically adjusting mutation and crossover rates with adaptive inertia weight based on both global and individual performance.", "configspace": "", "generation": 63, "fitness": 0.13693383172753776, "feedback": "The algorithm EnhancedAdaptiveInertiaDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.12.", "error": "", "parent_id": "9debbf58-a970-4324-83f7-f7a8126b9e02", "metadata": {"aucs": [0.2545683273648798, 0.284188126675587, 0.2435356808734649, 0.24558796876314493, 0.23993203470929958, 0.21066912272606153, 0.2885688272841469, 0.24489845049704873, 0.2543459540573283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07826296786967979, 0.07959299907902573, 0.07419060373996034, 0.05554130773326993, 0.06368382067753742, 0.07519538172300089, 0.0817322715390183, 0.061189854112671305, 0.07149230146103114, 0.05618333627973937, 0.05738833228135587, 0.058161190945672736, 0.050521008913915644, 0.054388103270047394, 0.05601027530311842, 0.06199819974728127, 0.04968736745604019, 0.061444574688368836, 0.16157116193771615, 0.13389904320892454, 0.16134591419112476, 0.9465090708847774, 0.5248110460938689, 0.8423434905058523, 0.20878395822164963, 0.6547220617030742, 0.14886156391269156, 0.1343470545416836, 0.1250806564356286, 0.14344591952854369, 0.10483423045553353, 0.11048992989308204, 0.10216192075631203, 0.12199728332914761, 0.13857821969751805, 0.13064283303445923, 0.18955214924534247, 0.1864614337749726, 0.1969421310555738, 0.1752518136906781, 0.17864272533857273, 0.2056638491250269, 0.1701636119510811, 0.2068617975885979, 0.2149484998989034, 0.10723177444512055, 0.07518448712157133, 0.0640409469442258, 0.030194727528811582, 0.041340294715132786, 0.06011358543051559, 0.09807946635917342, 0.09396651721856597, 0.05550992925572995, 0.1372598370716962, 0.11807208709962158, 0.11676495717461399, 0.13729030221163907, 0.12235335745136677, 0.14129401047386037, 0.1303803795529902, 0.12342858076635055, 0.11942476350087472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057766030416029235, 0.03776879688143797, 0.06642900377652972, 0.05869290758672485, 0.07007092271955973, 0.06674030234480888, 0.06682492911388149, 0.07866139118575521, 0.07403417907026344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063120525025147645, 0.008617236041764564, 0.0010669869705548507, 0.008174530345699038, 9.999999999998899e-05, 9.999999999998899e-05, 0.018459916763430395, 0.03809951748852147, 0.0019320818743113755, 0.2822044462540647, 0.2652809731859441, 0.2772079026417146, 0.27651049721892473, 0.2580406197121373, 0.2685014891363341, 0.290288803222146, 0.2802544164932754, 0.27957348876293653, 0.06547980258293262, 0.0526330228237013, 0.0479252098107783, 0.05822015031445771, 0.08154611428004988, 0.059991982573906366, 0.06401575839698981, 0.0716243882250246, 0.05857656011712409, 0.14704339821183388, 0.1300174414596933, 0.13818039007312333, 0.14200383159293706, 0.14237914840976484, 0.16397557028282572, 0.14472500977150216, 0.15129331464467488, 0.12400880239052525, 0.18490929630542552, 0.19549054086812434, 0.2066815737789619, 0.20283123565301697, 0.20591287247039314, 0.22024066503259743, 0.18678692200776692, 0.20847054408905075, 0.21159791178555232, 0.13480244290700616, 0.14015745795248824, 0.1480881100978928, 0.16297613565976132, 0.18333007977735705, 0.16770476402377776, 0.1290666718111364, 0.12152145494863476, 0.12962749086025327, 0.26191187373955427, 0.24463614546099277, 0.17863186958558142, 0.1716017444877691, 0.20769049573179732, 0.19524683362436512, 0.19840532435432623, 0.18456223105171887, 0.20192112195099132, 0.16087605689466455, 0.16094418073757666, 0.16035246604044429, 0.1680823266999225, 0.16445515411684952, 0.1653133514520443, 0.1608220095043209, 0.16265861621329625, 0.1694235781032266, 0.17981446957752922, 0.18548425630575727, 0.17637498516161887, 0.2031687625741918, 0.23214554773630958, 0.32187985477622594, 0.2530240335091133, 0.31672797121378005, 0.27673948787129754, 0.28793441646514817, 0.22868004177115986, 0.19249569999399252, 0.1662840904642684, 0.16772973801457325, 0.206996676024372, 0.3054152302811143, 0.18990274276622598, 0.2182794159054886, 0.17937624767207638, 0.1853460273336175, 0.16694349917588092, 0.1802742278697338, 0.17940618259415264, 0.17830943089428986, 0.19979654880034559, 0.19172558110341786, 0.1763620930604617, 0.07289159505703169, 0.06068313813375592, 0.05949311559880843, 0.06313973437748888, 0.0641191852603461, 0.06831549648773694, 0.06481218571225578, 0.07383311215692956, 0.05821619990401927]}, "mutation_prompt": null}
{"id": "4fa6777f-f942-4ef2-ada4-a07e6a38ebcb", "solution": "# import numpy as np\n\nclass ImprovedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Updated mutation process to focus more on promising regions\n            v = np.where(np.random.rand(self.dim) < 0.8, v, gbest)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "ImprovedAdaptiveMutationDEPSO", "description": "Improving convergence speed by adapting the mutation process to focus more on promising regions based on fitness.", "configspace": "", "generation": 64, "fitness": 0.13966855165686853, "feedback": "The algorithm ImprovedAdaptiveMutationDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.11.", "error": "", "parent_id": "9debbf58-a970-4324-83f7-f7a8126b9e02", "metadata": {"aucs": [0.286190818522995, 0.3170531914426782, 0.3081134657804917, 0.25632217438971316, 0.2320523593280639, 0.21268489800977974, 0.25346879814954326, 0.2587885282813619, 0.30194133289280267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02740161175128253, 0.039808358168538005, 0.01173210909461575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06681147852245883, 0.057914440001833656, 0.0668734468224289, 0.07657010000862496, 0.08093841255057688, 0.07529359348836584, 0.07737453853047993, 0.09766014088871722, 0.07176005004170405, 0.06776204962600496, 0.05511281607400942, 0.050563584400283745, 0.07218721970312603, 0.08507296173230805, 0.07946491211543671, 0.07480259723061067, 0.07030498528812479, 0.08824150154672716, 0.994214509204301, 0.18236556445094942, 0.12777605925707614, 0.16686990045488115, 0.13938902908739004, 0.14545225080120328, 0.3522006205437721, 0.14596377338736533, 0.19545501107633945, 0.2020325192406104, 0.10723341498615369, 0.10808094906518617, 0.12963954028821523, 0.12060007362745073, 0.10007241809838541, 0.11689308420062916, 0.14543375166716854, 0.14558700727298657, 0.17012057049188078, 0.20260496949536866, 0.19085766928745274, 0.21131247075026294, 0.20642312004031538, 0.1796695778151658, 0.1788101507073797, 0.20995382343748092, 0.16355849930167354, 0.13007352672251893, 0.17021577665927556, 0.1545721976566059, 0.01649544235380418, 0.046837185188125297, 0.05417875202693867, 0.10710576522456339, 0.055411871654371, 0.09433791024565685, 0.16719625448795283, 0.19590967588830988, 0.17297254622400615, 0.17401384277238507, 0.1735449050575666, 0.18014126451193846, 0.23062833712654096, 0.2005825349203808, 0.2250625437728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07000539495140146, 0.09699146630106792, 0.07312979752886406, 0.054642287448148474, 0.06152263918428302, 0.057976789487385605, 0.11584354719173695, 0.07225426949852831, 0.10290555671488888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018864422053354257, 0.031299884813572154, 0.028467781300727246, 0.01913944337331719, 0.022037010206603758, 0.028626041571059635, 0.03791683176597127, 0.012276321973575088, 0.016179961467860604, 0.28141895467096834, 0.31340066264398014, 0.2915299663992711, 0.2858189979646887, 0.2801033196308472, 0.2626356363513844, 0.31398587037205516, 0.2825513551881631, 0.28828965411100727, 0.0535467671212686, 0.044140658002074784, 0.051300133817276716, 0.0643215554339055, 0.050715029309417514, 0.06442029371302904, 0.07528404760594021, 0.07426886029917623, 0.07006606617310385, 0.1518822211296187, 0.18528504916206423, 0.14533604975924286, 0.15539677223933956, 0.20708643515704472, 0.15924134067150808, 0.17739175003111707, 0.1729200884023998, 0.163072708255521, 0.22151117562758005, 0.22662569333601446, 0.17778489735529945, 0.23560027665951022, 0.2312022933860861, 0.21614645570383395, 0.19891539490974952, 0.21423355690698065, 0.18749956555553704, 0.1347656305294026, 0.16058583147122263, 0.15829443882896466, 0.19280577306531954, 0.16968537172854326, 0.1896900595398835, 0.1613437796287881, 0.1468557734848075, 0.14399425027542578, 0.20998127664595134, 0.23529149944366567, 0.21061190056740065, 0.2179408979896028, 0.21232964525145082, 0.22010522948424827, 0.22449668711954174, 0.23045100360467097, 0.20633700022818424, 0.16829346368206588, 0.17311941760782634, 0.1718278738207797, 0.17668590532118267, 0.17250363428690163, 0.17069046984043146, 0.1679172031554299, 0.1654964628384905, 0.1725417090130873, 0.2190115386586996, 0.17531721198183003, 0.1666772755605418, 0.3301869739495966, 0.1729482965370871, 0.17374216861856728, 0.22816920160005838, 0.13711603640630565, 0.37355109525583785, 0.23388862964654822, 0.22853094690863085, 0.2037593510525808, 0.21675036491595767, 0.21459918455400218, 0.16504144723425618, 0.14073597250836756, 0.16205891080366674, 0.23956685076703477, 0.17294389228723617, 0.17250302918308247, 0.17497146200123426, 0.16233529694597104, 0.17851501823051752, 0.18988320773849365, 0.19266495921716686, 0.17912028015683812, 0.17242165831911893, 0.0625407361772291, 0.08082327337813533, 0.06754851919054194, 0.0733263835211736, 0.06871671149712144, 0.06626511025311832, 0.06831917168361556, 0.06738063753132228, 0.06630803035602895]}, "mutation_prompt": null}
{"id": "f14fcc01-4f14-49be-9050-10accc622533", "solution": "# import numpy as np\n\nclass ImprovedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Updated mutation process to focus more on promising regions\n            v = np.where(np.random.rand(self.dim) < 0.8, v, gbest)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "ImprovedAdaptiveMutationDEPSO", "description": "Improving convergence speed by adapting the mutation process to focus more on promising regions based on fitness.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fa6777f-f942-4ef2-ada4-a07e6a38ebcb", "metadata": {"aucs": [0.286190818522995, 0.3170531914426782, 0.3081134657804917, 0.25632217438971316, 0.2320523593280639, 0.21268489800977974, 0.25346879814954326, 0.2587885282813619, 0.30194133289280267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02740161175128253, 0.039808358168538005, 0.01173210909461575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06681147852245883, 0.057914440001833656, 0.0668734468224289, 0.07657010000862496, 0.08093841255057688, 0.07529359348836584, 0.07737453853047993, 0.09766014088871722, 0.07176005004170405, 0.06776204962600496, 0.05511281607400942, 0.050563584400283745, 0.07218721970312603, 0.08507296173230805, 0.07946491211543671, 0.07480259723061067, 0.07030498528812479, 0.08824150154672716, 0.994214509204301, 0.18236556445094942, 0.12777605925707614, 0.16686990045488115, 0.13938902908739004, 0.14545225080120328, 0.3522006205437721, 0.14596377338736533, 0.19545501107633945, 0.2020325192406104, 0.10723341498615369, 0.10808094906518617, 0.12963954028821523, 0.12060007362745073, 0.10007241809838541, 0.11689308420062916, 0.14543375166716854, 0.14558700727298657, 0.17012057049188078, 0.20260496949536866, 0.19085766928745274, 0.21131247075026294, 0.20642312004031538, 0.1796695778151658, 0.1788101507073797, 0.20995382343748092, 0.16355849930167354, 0.13007352672251893, 0.17021577665927556, 0.1545721976566059, 0.01649544235380418, 0.046837185188125297, 0.05417875202693867, 0.10710576522456339, 0.055411871654371, 0.09433791024565685, 0.16719625448795283, 0.19590967588830988, 0.17297254622400615, 0.17401384277238507, 0.1735449050575666, 0.18014126451193846, 0.23062833712654096, 0.2005825349203808, 0.2250625437728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07000539495140146, 0.09699146630106792, 0.07312979752886406, 0.054642287448148474, 0.06152263918428302, 0.057976789487385605, 0.11584354719173695, 0.07225426949852831, 0.10290555671488888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018864422053354257, 0.031299884813572154, 0.028467781300727246, 0.01913944337331719, 0.022037010206603758, 0.028626041571059635, 0.03791683176597127, 0.012276321973575088, 0.016179961467860604, 0.28141895467096834, 0.31340066264398014, 0.2915299663992711, 0.2858189979646887, 0.2801033196308472, 0.2626356363513844, 0.31398587037205516, 0.2825513551881631, 0.28828965411100727, 0.0535467671212686, 0.044140658002074784, 0.051300133817276716, 0.0643215554339055, 0.050715029309417514, 0.06442029371302904, 0.07528404760594021, 0.07426886029917623, 0.07006606617310385, 0.1518822211296187, 0.18528504916206423, 0.14533604975924286, 0.15539677223933956, 0.20708643515704472, 0.15924134067150808, 0.17739175003111707, 0.1729200884023998, 0.163072708255521, 0.22151117562758005, 0.22662569333601446, 0.17778489735529945, 0.23560027665951022, 0.2312022933860861, 0.21614645570383395, 0.19891539490974952, 0.21423355690698065, 0.18749956555553704, 0.1347656305294026, 0.16058583147122263, 0.15829443882896466, 0.19280577306531954, 0.16968537172854326, 0.1896900595398835, 0.1613437796287881, 0.1468557734848075, 0.14399425027542578, 0.20998127664595134, 0.23529149944366567, 0.21061190056740065, 0.2179408979896028, 0.21232964525145082, 0.22010522948424827, 0.22449668711954174, 0.23045100360467097, 0.20633700022818424, 0.16829346368206588, 0.17311941760782634, 0.1718278738207797, 0.17668590532118267, 0.17250363428690163, 0.17069046984043146, 0.1679172031554299, 0.1654964628384905, 0.1725417090130873, 0.2190115386586996, 0.17531721198183003, 0.1666772755605418, 0.3301869739495966, 0.1729482965370871, 0.17374216861856728, 0.22816920160005838, 0.13711603640630565, 0.37355109525583785, 0.23388862964654822, 0.22853094690863085, 0.2037593510525808, 0.21675036491595767, 0.21459918455400218, 0.16504144723425618, 0.14073597250836756, 0.16205891080366674, 0.23956685076703477, 0.17294389228723617, 0.17250302918308247, 0.17497146200123426, 0.16233529694597104, 0.17851501823051752, 0.18988320773849365, 0.19266495921716686, 0.17912028015683812, 0.17242165831911893, 0.0625407361772291, 0.08082327337813533, 0.06754851919054194, 0.0733263835211736, 0.06871671149712144, 0.06626511025311832, 0.06831917168361556, 0.06738063753132228, 0.06630803035602895]}, "mutation_prompt": null}
{"id": "9c6dc1ea-feab-48f1-b5d1-4a2f9f4a8faf", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation process based on individual performance\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Enhancing convergence speed by dynamically adjusting the mutation process based on individual performance for faster exploration and exploitation.", "configspace": "", "generation": 66, "fitness": 0.14085627584296123, "feedback": "The algorithm EnhancedAdaptiveMutationDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "4fa6777f-f942-4ef2-ada4-a07e6a38ebcb", "metadata": {"aucs": [0.3984286985613493, 0.31266707486249345, 0.36501284211140084, 0.21322006407278227, 0.2869657984148276, 0.2318140565910669, 0.3227310196867994, 0.30174876118206084, 0.3310767809743198, 9.999999999998899e-05, 9.999999999998899e-05, 0.013698351168261569, 0.08308717069344562, 0.036905460769867005, 0.05463390731032691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09674447413832954, 0.07490948752161353, 0.07620230021569785, 0.10000838371388088, 0.08904114994471368, 0.1008638691685757, 0.09755112718120673, 0.09617895716278202, 0.08157592464370644, 0.07373492409838367, 0.052907101411826085, 0.0597625219942538, 0.06911657622587042, 0.08279434629230165, 0.09105947634263611, 0.10266342163775677, 0.08208324489692387, 0.090401413658029, 0.14809898491990547, 0.13727834586472598, 0.15553796197566516, 0.1668522652897314, 0.16001102456810745, 0.1988552960661979, 0.26702774872547674, 0.13438488734124165, 0.18639379024228342, 0.08400220758584076, 0.1572117430832699, 0.17883940407775933, 0.11982108231013389, 0.14060247656046354, 0.1369106873108067, 0.19776895203810319, 0.09888449562467849, 0.13381302181101395, 0.1986360214558195, 0.14619215836482347, 0.21029427556090563, 0.23520231598343921, 0.16285109865962766, 0.20147647840149274, 0.17826529308948225, 0.17733438049956307, 0.14834729388194123, 0.16310843654687923, 0.22744047783537868, 0.1818396804796828, 0.08405308873184425, 9.999999999998899e-05, 0.15165525629927346, 0.11847131591394833, 0.12259319276910319, 0.08871068912474145, 0.21823035895395437, 0.19404969546345696, 0.1519680731946943, 0.1839695408829788, 0.2005254157176185, 0.18792144974238778, 0.254453886517099, 0.2005796357065911, 0.237464320262179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042321277533669655, 0.11724326889988146, 0.09620547105447463, 0.10060932361097308, 0.05802888998802902, 0.051486399552529316, 0.06128754052969576, 0.10603632223197823, 0.1328343134232648, 0.06472482757277065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03343276795636141, 0.04350845856909924, 0.06038791078681949, 0.0329432677018191, 0.020951066103449323, 0.014026249389805567, 0.05423917058567296, 9.999999999998899e-05, 0.02177241758964188, 0.29137196951961564, 0.25839287584789905, 0.3106636879478971, 0.3175328450172151, 0.2832586982718235, 0.29400752500541083, 0.3268490005195428, 0.3123715781425711, 0.31278068763819256, 0.06892730129666702, 0.048904837067061946, 0.02817872930780818, 0.05543464382370278, 0.03394098016103375, 0.07720751400217163, 0.07893441793039035, 0.07521332433276617, 0.07221794475513799, 0.18221090380285654, 0.13783065315226595, 0.15587177884325776, 0.12916176888091668, 0.11653736833739681, 0.11553622024469057, 0.14862756827048595, 0.12688576052520295, 0.17760356771855879, 0.18538996526774332, 0.17866550605798748, 0.16697577711203448, 0.23633529059129132, 0.18460422162236334, 0.1968018207138127, 0.21055749697629034, 0.21110336096873716, 0.16909744582787478, 0.10824597847242234, 0.11362378181487132, 0.12743432028040313, 0.1584968532713691, 0.1484594976935808, 0.1505537025186766, 0.16410935801025295, 0.1321813349306391, 0.09521610061114749, 0.2905013658683462, 0.30850148416372014, 0.26806684238875134, 0.28949808929710474, 0.2946745967064033, 0.2722567412365605, 0.32942476083541894, 0.3237184693767785, 0.2996767868346695, 0.16817845404259335, 0.1951653262018399, 0.17126706277232862, 0.17727568216742617, 0.16519220510596422, 0.18353496911589373, 0.17028519262777952, 0.16694398670258592, 0.16955816483037034, 0.17325788269066855, 0.16994211220118927, 0.15798438404329407, 0.21383959292199106, 0.19121672910587673, 0.18989527387147298, 0.23679076087936324, 0.166167335174355, 0.21157789821064799, 0.3393990741381655, 0.3667654896973105, 0.07939512670287363, 0.16711924238846187, 0.18716021556590645, 0.16577077603956825, 0.11156305517537635, 0.10314938465330092, 0.14871051367378663, 0.19448157059825122, 0.22135981974234897, 0.18473938748907526, 0.1841037003219329, 0.182450883107106, 0.18323796976453555, 0.2022991076799614, 0.19703870926575184, 0.20003199140772554, 0.0688081064528906, 0.04975872039586193, 0.08378774832947089, 0.06402667053025057, 0.056318244644465665, 0.06761232983548437, 0.05265602519110857, 0.0635976397638659, 0.0589601318856221]}, "mutation_prompt": null}
{"id": "42666502-2b6f-4432-b00e-efd91fb48f93", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation process based on individual performance\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Enhancing convergence speed by dynamically adjusting the mutation process based on individual performance for faster exploration and exploitation.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c6dc1ea-feab-48f1-b5d1-4a2f9f4a8faf", "metadata": {"aucs": [0.3984286985613493, 0.31266707486249345, 0.36501284211140084, 0.21322006407278227, 0.2869657984148276, 0.2318140565910669, 0.3227310196867994, 0.30174876118206084, 0.3310767809743198, 9.999999999998899e-05, 9.999999999998899e-05, 0.013698351168261569, 0.08308717069344562, 0.036905460769867005, 0.05463390731032691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09674447413832954, 0.07490948752161353, 0.07620230021569785, 0.10000838371388088, 0.08904114994471368, 0.1008638691685757, 0.09755112718120673, 0.09617895716278202, 0.08157592464370644, 0.07373492409838367, 0.052907101411826085, 0.0597625219942538, 0.06911657622587042, 0.08279434629230165, 0.09105947634263611, 0.10266342163775677, 0.08208324489692387, 0.090401413658029, 0.14809898491990547, 0.13727834586472598, 0.15553796197566516, 0.1668522652897314, 0.16001102456810745, 0.1988552960661979, 0.26702774872547674, 0.13438488734124165, 0.18639379024228342, 0.08400220758584076, 0.1572117430832699, 0.17883940407775933, 0.11982108231013389, 0.14060247656046354, 0.1369106873108067, 0.19776895203810319, 0.09888449562467849, 0.13381302181101395, 0.1986360214558195, 0.14619215836482347, 0.21029427556090563, 0.23520231598343921, 0.16285109865962766, 0.20147647840149274, 0.17826529308948225, 0.17733438049956307, 0.14834729388194123, 0.16310843654687923, 0.22744047783537868, 0.1818396804796828, 0.08405308873184425, 9.999999999998899e-05, 0.15165525629927346, 0.11847131591394833, 0.12259319276910319, 0.08871068912474145, 0.21823035895395437, 0.19404969546345696, 0.1519680731946943, 0.1839695408829788, 0.2005254157176185, 0.18792144974238778, 0.254453886517099, 0.2005796357065911, 0.237464320262179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042321277533669655, 0.11724326889988146, 0.09620547105447463, 0.10060932361097308, 0.05802888998802902, 0.051486399552529316, 0.06128754052969576, 0.10603632223197823, 0.1328343134232648, 0.06472482757277065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03343276795636141, 0.04350845856909924, 0.06038791078681949, 0.0329432677018191, 0.020951066103449323, 0.014026249389805567, 0.05423917058567296, 9.999999999998899e-05, 0.02177241758964188, 0.29137196951961564, 0.25839287584789905, 0.3106636879478971, 0.3175328450172151, 0.2832586982718235, 0.29400752500541083, 0.3268490005195428, 0.3123715781425711, 0.31278068763819256, 0.06892730129666702, 0.048904837067061946, 0.02817872930780818, 0.05543464382370278, 0.03394098016103375, 0.07720751400217163, 0.07893441793039035, 0.07521332433276617, 0.07221794475513799, 0.18221090380285654, 0.13783065315226595, 0.15587177884325776, 0.12916176888091668, 0.11653736833739681, 0.11553622024469057, 0.14862756827048595, 0.12688576052520295, 0.17760356771855879, 0.18538996526774332, 0.17866550605798748, 0.16697577711203448, 0.23633529059129132, 0.18460422162236334, 0.1968018207138127, 0.21055749697629034, 0.21110336096873716, 0.16909744582787478, 0.10824597847242234, 0.11362378181487132, 0.12743432028040313, 0.1584968532713691, 0.1484594976935808, 0.1505537025186766, 0.16410935801025295, 0.1321813349306391, 0.09521610061114749, 0.2905013658683462, 0.30850148416372014, 0.26806684238875134, 0.28949808929710474, 0.2946745967064033, 0.2722567412365605, 0.32942476083541894, 0.3237184693767785, 0.2996767868346695, 0.16817845404259335, 0.1951653262018399, 0.17126706277232862, 0.17727568216742617, 0.16519220510596422, 0.18353496911589373, 0.17028519262777952, 0.16694398670258592, 0.16955816483037034, 0.17325788269066855, 0.16994211220118927, 0.15798438404329407, 0.21383959292199106, 0.19121672910587673, 0.18989527387147298, 0.23679076087936324, 0.166167335174355, 0.21157789821064799, 0.3393990741381655, 0.3667654896973105, 0.07939512670287363, 0.16711924238846187, 0.18716021556590645, 0.16577077603956825, 0.11156305517537635, 0.10314938465330092, 0.14871051367378663, 0.19448157059825122, 0.22135981974234897, 0.18473938748907526, 0.1841037003219329, 0.182450883107106, 0.18323796976453555, 0.2022991076799614, 0.19703870926575184, 0.20003199140772554, 0.0688081064528906, 0.04975872039586193, 0.08378774832947089, 0.06402667053025057, 0.056318244644465665, 0.06761232983548437, 0.05265602519110857, 0.0635976397638659, 0.0589601318856221]}, "mutation_prompt": null}
{"id": "4fc48e9a-0800-46b5-a48a-5de75d85857f", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation process based on individual performance\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Enhancing convergence speed by dynamically adjusting the mutation process based on individual performance for faster exploration and exploitation.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c6dc1ea-feab-48f1-b5d1-4a2f9f4a8faf", "metadata": {"aucs": [0.3984286985613493, 0.31266707486249345, 0.36501284211140084, 0.21322006407278227, 0.2869657984148276, 0.2318140565910669, 0.3227310196867994, 0.30174876118206084, 0.3310767809743198, 9.999999999998899e-05, 9.999999999998899e-05, 0.013698351168261569, 0.08308717069344562, 0.036905460769867005, 0.05463390731032691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09674447413832954, 0.07490948752161353, 0.07620230021569785, 0.10000838371388088, 0.08904114994471368, 0.1008638691685757, 0.09755112718120673, 0.09617895716278202, 0.08157592464370644, 0.07373492409838367, 0.052907101411826085, 0.0597625219942538, 0.06911657622587042, 0.08279434629230165, 0.09105947634263611, 0.10266342163775677, 0.08208324489692387, 0.090401413658029, 0.14809898491990547, 0.13727834586472598, 0.15553796197566516, 0.1668522652897314, 0.16001102456810745, 0.1988552960661979, 0.26702774872547674, 0.13438488734124165, 0.18639379024228342, 0.08400220758584076, 0.1572117430832699, 0.17883940407775933, 0.11982108231013389, 0.14060247656046354, 0.1369106873108067, 0.19776895203810319, 0.09888449562467849, 0.13381302181101395, 0.1986360214558195, 0.14619215836482347, 0.21029427556090563, 0.23520231598343921, 0.16285109865962766, 0.20147647840149274, 0.17826529308948225, 0.17733438049956307, 0.14834729388194123, 0.16310843654687923, 0.22744047783537868, 0.1818396804796828, 0.08405308873184425, 9.999999999998899e-05, 0.15165525629927346, 0.11847131591394833, 0.12259319276910319, 0.08871068912474145, 0.21823035895395437, 0.19404969546345696, 0.1519680731946943, 0.1839695408829788, 0.2005254157176185, 0.18792144974238778, 0.254453886517099, 0.2005796357065911, 0.237464320262179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042321277533669655, 0.11724326889988146, 0.09620547105447463, 0.10060932361097308, 0.05802888998802902, 0.051486399552529316, 0.06128754052969576, 0.10603632223197823, 0.1328343134232648, 0.06472482757277065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03343276795636141, 0.04350845856909924, 0.06038791078681949, 0.0329432677018191, 0.020951066103449323, 0.014026249389805567, 0.05423917058567296, 9.999999999998899e-05, 0.02177241758964188, 0.29137196951961564, 0.25839287584789905, 0.3106636879478971, 0.3175328450172151, 0.2832586982718235, 0.29400752500541083, 0.3268490005195428, 0.3123715781425711, 0.31278068763819256, 0.06892730129666702, 0.048904837067061946, 0.02817872930780818, 0.05543464382370278, 0.03394098016103375, 0.07720751400217163, 0.07893441793039035, 0.07521332433276617, 0.07221794475513799, 0.18221090380285654, 0.13783065315226595, 0.15587177884325776, 0.12916176888091668, 0.11653736833739681, 0.11553622024469057, 0.14862756827048595, 0.12688576052520295, 0.17760356771855879, 0.18538996526774332, 0.17866550605798748, 0.16697577711203448, 0.23633529059129132, 0.18460422162236334, 0.1968018207138127, 0.21055749697629034, 0.21110336096873716, 0.16909744582787478, 0.10824597847242234, 0.11362378181487132, 0.12743432028040313, 0.1584968532713691, 0.1484594976935808, 0.1505537025186766, 0.16410935801025295, 0.1321813349306391, 0.09521610061114749, 0.2905013658683462, 0.30850148416372014, 0.26806684238875134, 0.28949808929710474, 0.2946745967064033, 0.2722567412365605, 0.32942476083541894, 0.3237184693767785, 0.2996767868346695, 0.16817845404259335, 0.1951653262018399, 0.17126706277232862, 0.17727568216742617, 0.16519220510596422, 0.18353496911589373, 0.17028519262777952, 0.16694398670258592, 0.16955816483037034, 0.17325788269066855, 0.16994211220118927, 0.15798438404329407, 0.21383959292199106, 0.19121672910587673, 0.18989527387147298, 0.23679076087936324, 0.166167335174355, 0.21157789821064799, 0.3393990741381655, 0.3667654896973105, 0.07939512670287363, 0.16711924238846187, 0.18716021556590645, 0.16577077603956825, 0.11156305517537635, 0.10314938465330092, 0.14871051367378663, 0.19448157059825122, 0.22135981974234897, 0.18473938748907526, 0.1841037003219329, 0.182450883107106, 0.18323796976453555, 0.2022991076799614, 0.19703870926575184, 0.20003199140772554, 0.0688081064528906, 0.04975872039586193, 0.08378774832947089, 0.06402667053025057, 0.056318244644465665, 0.06761232983548437, 0.05265602519110857, 0.0635976397638659, 0.0589601318856221]}, "mutation_prompt": null}
{"id": "09680d4b-2ea9-4928-8bcc-049b9c8c7f52", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation process based on individual performance\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Enhancing convergence speed by dynamically adjusting the mutation process based on individual performance for faster exploration and exploitation.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c6dc1ea-feab-48f1-b5d1-4a2f9f4a8faf", "metadata": {"aucs": [0.3984286985613493, 0.31266707486249345, 0.36501284211140084, 0.21322006407278227, 0.2869657984148276, 0.2318140565910669, 0.3227310196867994, 0.30174876118206084, 0.3310767809743198, 9.999999999998899e-05, 9.999999999998899e-05, 0.013698351168261569, 0.08308717069344562, 0.036905460769867005, 0.05463390731032691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09674447413832954, 0.07490948752161353, 0.07620230021569785, 0.10000838371388088, 0.08904114994471368, 0.1008638691685757, 0.09755112718120673, 0.09617895716278202, 0.08157592464370644, 0.07373492409838367, 0.052907101411826085, 0.0597625219942538, 0.06911657622587042, 0.08279434629230165, 0.09105947634263611, 0.10266342163775677, 0.08208324489692387, 0.090401413658029, 0.14809898491990547, 0.13727834586472598, 0.15553796197566516, 0.1668522652897314, 0.16001102456810745, 0.1988552960661979, 0.26702774872547674, 0.13438488734124165, 0.18639379024228342, 0.08400220758584076, 0.1572117430832699, 0.17883940407775933, 0.11982108231013389, 0.14060247656046354, 0.1369106873108067, 0.19776895203810319, 0.09888449562467849, 0.13381302181101395, 0.1986360214558195, 0.14619215836482347, 0.21029427556090563, 0.23520231598343921, 0.16285109865962766, 0.20147647840149274, 0.17826529308948225, 0.17733438049956307, 0.14834729388194123, 0.16310843654687923, 0.22744047783537868, 0.1818396804796828, 0.08405308873184425, 9.999999999998899e-05, 0.15165525629927346, 0.11847131591394833, 0.12259319276910319, 0.08871068912474145, 0.21823035895395437, 0.19404969546345696, 0.1519680731946943, 0.1839695408829788, 0.2005254157176185, 0.18792144974238778, 0.254453886517099, 0.2005796357065911, 0.237464320262179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042321277533669655, 0.11724326889988146, 0.09620547105447463, 0.10060932361097308, 0.05802888998802902, 0.051486399552529316, 0.06128754052969576, 0.10603632223197823, 0.1328343134232648, 0.06472482757277065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03343276795636141, 0.04350845856909924, 0.06038791078681949, 0.0329432677018191, 0.020951066103449323, 0.014026249389805567, 0.05423917058567296, 9.999999999998899e-05, 0.02177241758964188, 0.29137196951961564, 0.25839287584789905, 0.3106636879478971, 0.3175328450172151, 0.2832586982718235, 0.29400752500541083, 0.3268490005195428, 0.3123715781425711, 0.31278068763819256, 0.06892730129666702, 0.048904837067061946, 0.02817872930780818, 0.05543464382370278, 0.03394098016103375, 0.07720751400217163, 0.07893441793039035, 0.07521332433276617, 0.07221794475513799, 0.18221090380285654, 0.13783065315226595, 0.15587177884325776, 0.12916176888091668, 0.11653736833739681, 0.11553622024469057, 0.14862756827048595, 0.12688576052520295, 0.17760356771855879, 0.18538996526774332, 0.17866550605798748, 0.16697577711203448, 0.23633529059129132, 0.18460422162236334, 0.1968018207138127, 0.21055749697629034, 0.21110336096873716, 0.16909744582787478, 0.10824597847242234, 0.11362378181487132, 0.12743432028040313, 0.1584968532713691, 0.1484594976935808, 0.1505537025186766, 0.16410935801025295, 0.1321813349306391, 0.09521610061114749, 0.2905013658683462, 0.30850148416372014, 0.26806684238875134, 0.28949808929710474, 0.2946745967064033, 0.2722567412365605, 0.32942476083541894, 0.3237184693767785, 0.2996767868346695, 0.16817845404259335, 0.1951653262018399, 0.17126706277232862, 0.17727568216742617, 0.16519220510596422, 0.18353496911589373, 0.17028519262777952, 0.16694398670258592, 0.16955816483037034, 0.17325788269066855, 0.16994211220118927, 0.15798438404329407, 0.21383959292199106, 0.19121672910587673, 0.18989527387147298, 0.23679076087936324, 0.166167335174355, 0.21157789821064799, 0.3393990741381655, 0.3667654896973105, 0.07939512670287363, 0.16711924238846187, 0.18716021556590645, 0.16577077603956825, 0.11156305517537635, 0.10314938465330092, 0.14871051367378663, 0.19448157059825122, 0.22135981974234897, 0.18473938748907526, 0.1841037003219329, 0.182450883107106, 0.18323796976453555, 0.2022991076799614, 0.19703870926575184, 0.20003199140772554, 0.0688081064528906, 0.04975872039586193, 0.08378774832947089, 0.06402667053025057, 0.056318244644465665, 0.06761232983548437, 0.05265602519110857, 0.0635976397638659, 0.0589601318856221]}, "mutation_prompt": null}
{"id": "8721169a-de61-475e-b033-b1f3c6bf053a", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation process based on individual performance\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Enhancing convergence speed by dynamically adjusting the mutation process based on individual performance for faster exploration and exploitation.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c6dc1ea-feab-48f1-b5d1-4a2f9f4a8faf", "metadata": {"aucs": [0.3984286985613493, 0.31266707486249345, 0.36501284211140084, 0.21322006407278227, 0.2869657984148276, 0.2318140565910669, 0.3227310196867994, 0.30174876118206084, 0.3310767809743198, 9.999999999998899e-05, 9.999999999998899e-05, 0.013698351168261569, 0.08308717069344562, 0.036905460769867005, 0.05463390731032691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09674447413832954, 0.07490948752161353, 0.07620230021569785, 0.10000838371388088, 0.08904114994471368, 0.1008638691685757, 0.09755112718120673, 0.09617895716278202, 0.08157592464370644, 0.07373492409838367, 0.052907101411826085, 0.0597625219942538, 0.06911657622587042, 0.08279434629230165, 0.09105947634263611, 0.10266342163775677, 0.08208324489692387, 0.090401413658029, 0.14809898491990547, 0.13727834586472598, 0.15553796197566516, 0.1668522652897314, 0.16001102456810745, 0.1988552960661979, 0.26702774872547674, 0.13438488734124165, 0.18639379024228342, 0.08400220758584076, 0.1572117430832699, 0.17883940407775933, 0.11982108231013389, 0.14060247656046354, 0.1369106873108067, 0.19776895203810319, 0.09888449562467849, 0.13381302181101395, 0.1986360214558195, 0.14619215836482347, 0.21029427556090563, 0.23520231598343921, 0.16285109865962766, 0.20147647840149274, 0.17826529308948225, 0.17733438049956307, 0.14834729388194123, 0.16310843654687923, 0.22744047783537868, 0.1818396804796828, 0.08405308873184425, 9.999999999998899e-05, 0.15165525629927346, 0.11847131591394833, 0.12259319276910319, 0.08871068912474145, 0.21823035895395437, 0.19404969546345696, 0.1519680731946943, 0.1839695408829788, 0.2005254157176185, 0.18792144974238778, 0.254453886517099, 0.2005796357065911, 0.237464320262179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042321277533669655, 0.11724326889988146, 0.09620547105447463, 0.10060932361097308, 0.05802888998802902, 0.051486399552529316, 0.06128754052969576, 0.10603632223197823, 0.1328343134232648, 0.06472482757277065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03343276795636141, 0.04350845856909924, 0.06038791078681949, 0.0329432677018191, 0.020951066103449323, 0.014026249389805567, 0.05423917058567296, 9.999999999998899e-05, 0.02177241758964188, 0.29137196951961564, 0.25839287584789905, 0.3106636879478971, 0.3175328450172151, 0.2832586982718235, 0.29400752500541083, 0.3268490005195428, 0.3123715781425711, 0.31278068763819256, 0.06892730129666702, 0.048904837067061946, 0.02817872930780818, 0.05543464382370278, 0.03394098016103375, 0.07720751400217163, 0.07893441793039035, 0.07521332433276617, 0.07221794475513799, 0.18221090380285654, 0.13783065315226595, 0.15587177884325776, 0.12916176888091668, 0.11653736833739681, 0.11553622024469057, 0.14862756827048595, 0.12688576052520295, 0.17760356771855879, 0.18538996526774332, 0.17866550605798748, 0.16697577711203448, 0.23633529059129132, 0.18460422162236334, 0.1968018207138127, 0.21055749697629034, 0.21110336096873716, 0.16909744582787478, 0.10824597847242234, 0.11362378181487132, 0.12743432028040313, 0.1584968532713691, 0.1484594976935808, 0.1505537025186766, 0.16410935801025295, 0.1321813349306391, 0.09521610061114749, 0.2905013658683462, 0.30850148416372014, 0.26806684238875134, 0.28949808929710474, 0.2946745967064033, 0.2722567412365605, 0.32942476083541894, 0.3237184693767785, 0.2996767868346695, 0.16817845404259335, 0.1951653262018399, 0.17126706277232862, 0.17727568216742617, 0.16519220510596422, 0.18353496911589373, 0.17028519262777952, 0.16694398670258592, 0.16955816483037034, 0.17325788269066855, 0.16994211220118927, 0.15798438404329407, 0.21383959292199106, 0.19121672910587673, 0.18989527387147298, 0.23679076087936324, 0.166167335174355, 0.21157789821064799, 0.3393990741381655, 0.3667654896973105, 0.07939512670287363, 0.16711924238846187, 0.18716021556590645, 0.16577077603956825, 0.11156305517537635, 0.10314938465330092, 0.14871051367378663, 0.19448157059825122, 0.22135981974234897, 0.18473938748907526, 0.1841037003219329, 0.182450883107106, 0.18323796976453555, 0.2022991076799614, 0.19703870926575184, 0.20003199140772554, 0.0688081064528906, 0.04975872039586193, 0.08378774832947089, 0.06402667053025057, 0.056318244644465665, 0.06761232983548437, 0.05265602519110857, 0.0635976397638659, 0.0589601318856221]}, "mutation_prompt": null}
{"id": "4c92a181-8973-46ae-81dc-e64caf77e755", "solution": "# import numpy as np\n\nclass ImprovedConvergenceDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation and crossover rates based on population diversity\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * np.std(population), 0.6, 0.8), v, gbest)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "ImprovedConvergenceDEPSO", "description": "Improving convergence speed by adapting the mutation and crossover rates dynamically based on population diversity for enhanced exploration and exploitation.", "configspace": "", "generation": 71, "fitness": 0.14044376966730232, "feedback": "The algorithm ImprovedConvergenceDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "9c6dc1ea-feab-48f1-b5d1-4a2f9f4a8faf", "metadata": {"aucs": [0.37041656512557797, 0.3661815882364986, 0.3524630763915131, 0.2531679315253883, 0.3003057910660545, 0.298725300659309, 0.2565208960853046, 0.31277170221096073, 0.3074052708266223, 0.0293099495559922, 9.999999999998899e-05, 9.999999999998899e-05, 0.08915483943675884, 0.024293371632239547, 0.09732960351991993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0786240213961753, 0.07490948752161353, 0.07894731485058348, 0.08514396236886512, 0.06776040458249677, 0.08981845644960718, 0.12168157293888016, 0.09775007583398487, 0.0954549404174333, 0.057126232768453744, 0.0817099574482767, 0.07651954275952444, 0.07559023618578486, 0.07786596673759594, 0.08998015489823796, 0.07907884030205681, 0.08208324489692387, 0.10380890421515654, 0.15192241725653055, 0.11325363142303324, 0.15553796197566516, 0.12665294220165269, 0.16001102456810745, 0.1988552960661979, 0.26702774872547674, 0.13438488734124165, 0.18639379024228342, 0.08400220758584076, 0.1572117430832699, 0.17883940407775933, 0.14931387430151932, 0.10503991062724238, 0.16730956074452719, 0.12545690659792186, 0.18145340762060969, 0.11324913514043433, 0.1803645028389328, 0.14618124038175506, 0.13621812575476266, 0.2254004435675918, 0.16285109865962766, 0.20757937518452185, 0.17302388053677553, 0.17733438049956307, 0.16044784674961776, 0.16148480443602398, 0.14119933612180224, 0.14716924418708355, 0.1139680348248574, 0.06076485707492263, 0.15165525629927346, 0.15287111679265764, 0.11111927677315236, 0.009834148352835248, 0.2140975327390685, 0.1923681149186135, 0.17646125114027256, 0.2095138933297459, 0.20326353222850913, 0.183934755978707, 0.20946389505706986, 0.19007244369265808, 0.2324357762858441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007574313396688792, 0.010930289417126149, 0.0325928582661309, 0.1319827319585134, 0.09278188535737575, 0.06778031171500754, 0.052012927997313496, 0.053640280656991446, 0.04628176167836795, 0.11357246158772616, 0.06814795340304114, 0.061584432383648524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032707626812483404, 0.03952315491131431, 0.04505467041362987, 0.031189170069526484, 0.049076977418177514, 0.018411493731930073, 0.04453246678153411, 0.038204356041949716, 0.008361698417289842, 0.27979849514464605, 0.2865996254502946, 0.2712223377534235, 0.27288872902709005, 0.2832586982718235, 0.31455899711814395, 0.35837553037679204, 0.2964411549731454, 0.3395433903825523, 0.03864723080168475, 0.04719749457253197, 0.0267516022815536, 0.08158927187935039, 0.038676126375743136, 0.04734109280605703, 0.08459682312639438, 0.05836321057821403, 0.07095303289086263, 0.14885233250779928, 0.14052887104644374, 0.17018569813435136, 0.1467784334365293, 0.13286047328979567, 0.15248236854941022, 0.14106586882195693, 0.16390925086398234, 0.1909774954078589, 0.18376474174642243, 0.17866550605798748, 0.1665938082833518, 0.19025834162555144, 0.2261186046962277, 0.23227537877977456, 0.22078937104432483, 0.2031769182855202, 0.16262965887490521, 0.11052689262738946, 0.11362378181487132, 0.11629722563544331, 0.13874701645288245, 0.14037676329895366, 0.21624712208219277, 0.1435379813954376, 0.13587183260953895, 0.09521610061114749, 0.2959623821378041, 0.2554877214648905, 0.27655686835302284, 0.26440090988793885, 0.27728780326923674, 0.26195645722246286, 0.2824357863752318, 0.3064422487002946, 0.26763344905907094, 0.17102528195580724, 0.1951653262018399, 0.1820727801302141, 0.18906619044560424, 0.1865065504443696, 0.18024500014820155, 0.1733762218185706, 0.16800720057454932, 0.17214090522828485, 0.1655323648715683, 0.180976908261968, 0.13169476944958747, 0.24885541779004228, 0.19699192774130148, 0.19403892045897275, 0.35582785781202053, 0.16670409666993513, 0.2955152178725663, 0.3393990741381655, 0.2802736860966035, 0.07290649627189272, 0.1887328621976221, 0.1769831237401952, 0.1681847657554537, 0.11275514587024649, 0.10310802169264666, 0.16578043363492379, 0.18808440225262246, 0.19591177773322443, 0.18648555899246533, 0.1875731310302714, 0.19202691166746244, 0.20480617344362906, 0.19775233608168308, 0.21240794701756327, 0.19694724156625287, 0.08142964251734264, 0.05521209592435228, 0.05627000716091424, 0.06347089505183989, 0.062387826957880144, 0.05932527814651056, 0.06810975943186148, 0.05648670873897177, 0.05513865964387621]}, "mutation_prompt": null}
{"id": "148e51dd-5fc4-413b-ac56-689e67bfc79e", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation process based on individual performance\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Enhancing convergence speed by dynamically adjusting the mutation process based on individual performance for faster exploration and exploitation.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c6dc1ea-feab-48f1-b5d1-4a2f9f4a8faf", "metadata": {"aucs": [0.3984286985613493, 0.31266707486249345, 0.36501284211140084, 0.21322006407278227, 0.2869657984148276, 0.2318140565910669, 0.3227310196867994, 0.30174876118206084, 0.3310767809743198, 9.999999999998899e-05, 9.999999999998899e-05, 0.013698351168261569, 0.08308717069344562, 0.036905460769867005, 0.05463390731032691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09674447413832954, 0.07490948752161353, 0.07620230021569785, 0.10000838371388088, 0.08904114994471368, 0.1008638691685757, 0.09755112718120673, 0.09617895716278202, 0.08157592464370644, 0.07373492409838367, 0.052907101411826085, 0.0597625219942538, 0.06911657622587042, 0.08279434629230165, 0.09105947634263611, 0.10266342163775677, 0.08208324489692387, 0.090401413658029, 0.14809898491990547, 0.13727834586472598, 0.15553796197566516, 0.1668522652897314, 0.16001102456810745, 0.1988552960661979, 0.26702774872547674, 0.13438488734124165, 0.18639379024228342, 0.08400220758584076, 0.1572117430832699, 0.17883940407775933, 0.11982108231013389, 0.14060247656046354, 0.1369106873108067, 0.19776895203810319, 0.09888449562467849, 0.13381302181101395, 0.1986360214558195, 0.14619215836482347, 0.21029427556090563, 0.23520231598343921, 0.16285109865962766, 0.20147647840149274, 0.17826529308948225, 0.17733438049956307, 0.14834729388194123, 0.16310843654687923, 0.22744047783537868, 0.1818396804796828, 0.08405308873184425, 9.999999999998899e-05, 0.15165525629927346, 0.11847131591394833, 0.12259319276910319, 0.08871068912474145, 0.21823035895395437, 0.19404969546345696, 0.1519680731946943, 0.1839695408829788, 0.2005254157176185, 0.18792144974238778, 0.254453886517099, 0.2005796357065911, 0.237464320262179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042321277533669655, 0.11724326889988146, 0.09620547105447463, 0.10060932361097308, 0.05802888998802902, 0.051486399552529316, 0.06128754052969576, 0.10603632223197823, 0.1328343134232648, 0.06472482757277065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03343276795636141, 0.04350845856909924, 0.06038791078681949, 0.0329432677018191, 0.020951066103449323, 0.014026249389805567, 0.05423917058567296, 9.999999999998899e-05, 0.02177241758964188, 0.29137196951961564, 0.25839287584789905, 0.3106636879478971, 0.3175328450172151, 0.2832586982718235, 0.29400752500541083, 0.3268490005195428, 0.3123715781425711, 0.31278068763819256, 0.06892730129666702, 0.048904837067061946, 0.02817872930780818, 0.05543464382370278, 0.03394098016103375, 0.07720751400217163, 0.07893441793039035, 0.07521332433276617, 0.07221794475513799, 0.18221090380285654, 0.13783065315226595, 0.15587177884325776, 0.12916176888091668, 0.11653736833739681, 0.11553622024469057, 0.14862756827048595, 0.12688576052520295, 0.17760356771855879, 0.18538996526774332, 0.17866550605798748, 0.16697577711203448, 0.23633529059129132, 0.18460422162236334, 0.1968018207138127, 0.21055749697629034, 0.21110336096873716, 0.16909744582787478, 0.10824597847242234, 0.11362378181487132, 0.12743432028040313, 0.1584968532713691, 0.1484594976935808, 0.1505537025186766, 0.16410935801025295, 0.1321813349306391, 0.09521610061114749, 0.2905013658683462, 0.30850148416372014, 0.26806684238875134, 0.28949808929710474, 0.2946745967064033, 0.2722567412365605, 0.32942476083541894, 0.3237184693767785, 0.2996767868346695, 0.16817845404259335, 0.1951653262018399, 0.17126706277232862, 0.17727568216742617, 0.16519220510596422, 0.18353496911589373, 0.17028519262777952, 0.16694398670258592, 0.16955816483037034, 0.17325788269066855, 0.16994211220118927, 0.15798438404329407, 0.21383959292199106, 0.19121672910587673, 0.18989527387147298, 0.23679076087936324, 0.166167335174355, 0.21157789821064799, 0.3393990741381655, 0.3667654896973105, 0.07939512670287363, 0.16711924238846187, 0.18716021556590645, 0.16577077603956825, 0.11156305517537635, 0.10314938465330092, 0.14871051367378663, 0.19448157059825122, 0.22135981974234897, 0.18473938748907526, 0.1841037003219329, 0.182450883107106, 0.18323796976453555, 0.2022991076799614, 0.19703870926575184, 0.20003199140772554, 0.0688081064528906, 0.04975872039586193, 0.08378774832947089, 0.06402667053025057, 0.056318244644465665, 0.06761232983548437, 0.05265602519110857, 0.0635976397638659, 0.0589601318856221]}, "mutation_prompt": null}
{"id": "35c7f31c-554a-4879-8986-5a7b2869a991", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation process based on individual performance\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Enhancing convergence speed by dynamically adjusting the mutation process based on individual performance for faster exploration and exploitation.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c6dc1ea-feab-48f1-b5d1-4a2f9f4a8faf", "metadata": {"aucs": [0.3984286985613493, 0.31266707486249345, 0.36501284211140084, 0.21322006407278227, 0.2869657984148276, 0.2318140565910669, 0.3227310196867994, 0.30174876118206084, 0.3310767809743198, 9.999999999998899e-05, 9.999999999998899e-05, 0.013698351168261569, 0.08308717069344562, 0.036905460769867005, 0.05463390731032691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09674447413832954, 0.07490948752161353, 0.07620230021569785, 0.10000838371388088, 0.08904114994471368, 0.1008638691685757, 0.09755112718120673, 0.09617895716278202, 0.08157592464370644, 0.07373492409838367, 0.052907101411826085, 0.0597625219942538, 0.06911657622587042, 0.08279434629230165, 0.09105947634263611, 0.10266342163775677, 0.08208324489692387, 0.090401413658029, 0.14809898491990547, 0.13727834586472598, 0.15553796197566516, 0.1668522652897314, 0.16001102456810745, 0.1988552960661979, 0.26702774872547674, 0.13438488734124165, 0.18639379024228342, 0.08400220758584076, 0.1572117430832699, 0.17883940407775933, 0.11982108231013389, 0.14060247656046354, 0.1369106873108067, 0.19776895203810319, 0.09888449562467849, 0.13381302181101395, 0.1986360214558195, 0.14619215836482347, 0.21029427556090563, 0.23520231598343921, 0.16285109865962766, 0.20147647840149274, 0.17826529308948225, 0.17733438049956307, 0.14834729388194123, 0.16310843654687923, 0.22744047783537868, 0.1818396804796828, 0.08405308873184425, 9.999999999998899e-05, 0.15165525629927346, 0.11847131591394833, 0.12259319276910319, 0.08871068912474145, 0.21823035895395437, 0.19404969546345696, 0.1519680731946943, 0.1839695408829788, 0.2005254157176185, 0.18792144974238778, 0.254453886517099, 0.2005796357065911, 0.237464320262179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042321277533669655, 0.11724326889988146, 0.09620547105447463, 0.10060932361097308, 0.05802888998802902, 0.051486399552529316, 0.06128754052969576, 0.10603632223197823, 0.1328343134232648, 0.06472482757277065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03343276795636141, 0.04350845856909924, 0.06038791078681949, 0.0329432677018191, 0.020951066103449323, 0.014026249389805567, 0.05423917058567296, 9.999999999998899e-05, 0.02177241758964188, 0.29137196951961564, 0.25839287584789905, 0.3106636879478971, 0.3175328450172151, 0.2832586982718235, 0.29400752500541083, 0.3268490005195428, 0.3123715781425711, 0.31278068763819256, 0.06892730129666702, 0.048904837067061946, 0.02817872930780818, 0.05543464382370278, 0.03394098016103375, 0.07720751400217163, 0.07893441793039035, 0.07521332433276617, 0.07221794475513799, 0.18221090380285654, 0.13783065315226595, 0.15587177884325776, 0.12916176888091668, 0.11653736833739681, 0.11553622024469057, 0.14862756827048595, 0.12688576052520295, 0.17760356771855879, 0.18538996526774332, 0.17866550605798748, 0.16697577711203448, 0.23633529059129132, 0.18460422162236334, 0.1968018207138127, 0.21055749697629034, 0.21110336096873716, 0.16909744582787478, 0.10824597847242234, 0.11362378181487132, 0.12743432028040313, 0.1584968532713691, 0.1484594976935808, 0.1505537025186766, 0.16410935801025295, 0.1321813349306391, 0.09521610061114749, 0.2905013658683462, 0.30850148416372014, 0.26806684238875134, 0.28949808929710474, 0.2946745967064033, 0.2722567412365605, 0.32942476083541894, 0.3237184693767785, 0.2996767868346695, 0.16817845404259335, 0.1951653262018399, 0.17126706277232862, 0.17727568216742617, 0.16519220510596422, 0.18353496911589373, 0.17028519262777952, 0.16694398670258592, 0.16955816483037034, 0.17325788269066855, 0.16994211220118927, 0.15798438404329407, 0.21383959292199106, 0.19121672910587673, 0.18989527387147298, 0.23679076087936324, 0.166167335174355, 0.21157789821064799, 0.3393990741381655, 0.3667654896973105, 0.07939512670287363, 0.16711924238846187, 0.18716021556590645, 0.16577077603956825, 0.11156305517537635, 0.10314938465330092, 0.14871051367378663, 0.19448157059825122, 0.22135981974234897, 0.18473938748907526, 0.1841037003219329, 0.182450883107106, 0.18323796976453555, 0.2022991076799614, 0.19703870926575184, 0.20003199140772554, 0.0688081064528906, 0.04975872039586193, 0.08378774832947089, 0.06402667053025057, 0.056318244644465665, 0.06761232983548437, 0.05265602519110857, 0.0635976397638659, 0.0589601318856221]}, "mutation_prompt": null}
{"id": "de02b1c9-3b61-4db1-945b-c3a30acb2946", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation process based on individual performance\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Enhancing convergence speed by dynamically adjusting the mutation process based on individual performance for faster exploration and exploitation.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c6dc1ea-feab-48f1-b5d1-4a2f9f4a8faf", "metadata": {"aucs": [0.3984286985613493, 0.31266707486249345, 0.36501284211140084, 0.21322006407278227, 0.2869657984148276, 0.2318140565910669, 0.3227310196867994, 0.30174876118206084, 0.3310767809743198, 9.999999999998899e-05, 9.999999999998899e-05, 0.013698351168261569, 0.08308717069344562, 0.036905460769867005, 0.05463390731032691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09674447413832954, 0.07490948752161353, 0.07620230021569785, 0.10000838371388088, 0.08904114994471368, 0.1008638691685757, 0.09755112718120673, 0.09617895716278202, 0.08157592464370644, 0.07373492409838367, 0.052907101411826085, 0.0597625219942538, 0.06911657622587042, 0.08279434629230165, 0.09105947634263611, 0.10266342163775677, 0.08208324489692387, 0.090401413658029, 0.14809898491990547, 0.13727834586472598, 0.15553796197566516, 0.1668522652897314, 0.16001102456810745, 0.1988552960661979, 0.26702774872547674, 0.13438488734124165, 0.18639379024228342, 0.08400220758584076, 0.1572117430832699, 0.17883940407775933, 0.11982108231013389, 0.14060247656046354, 0.1369106873108067, 0.19776895203810319, 0.09888449562467849, 0.13381302181101395, 0.1986360214558195, 0.14619215836482347, 0.21029427556090563, 0.23520231598343921, 0.16285109865962766, 0.20147647840149274, 0.17826529308948225, 0.17733438049956307, 0.14834729388194123, 0.16310843654687923, 0.22744047783537868, 0.1818396804796828, 0.08405308873184425, 9.999999999998899e-05, 0.15165525629927346, 0.11847131591394833, 0.12259319276910319, 0.08871068912474145, 0.21823035895395437, 0.19404969546345696, 0.1519680731946943, 0.1839695408829788, 0.2005254157176185, 0.18792144974238778, 0.254453886517099, 0.2005796357065911, 0.237464320262179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042321277533669655, 0.11724326889988146, 0.09620547105447463, 0.10060932361097308, 0.05802888998802902, 0.051486399552529316, 0.06128754052969576, 0.10603632223197823, 0.1328343134232648, 0.06472482757277065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03343276795636141, 0.04350845856909924, 0.06038791078681949, 0.0329432677018191, 0.020951066103449323, 0.014026249389805567, 0.05423917058567296, 9.999999999998899e-05, 0.02177241758964188, 0.29137196951961564, 0.25839287584789905, 0.3106636879478971, 0.3175328450172151, 0.2832586982718235, 0.29400752500541083, 0.3268490005195428, 0.3123715781425711, 0.31278068763819256, 0.06892730129666702, 0.048904837067061946, 0.02817872930780818, 0.05543464382370278, 0.03394098016103375, 0.07720751400217163, 0.07893441793039035, 0.07521332433276617, 0.07221794475513799, 0.18221090380285654, 0.13783065315226595, 0.15587177884325776, 0.12916176888091668, 0.11653736833739681, 0.11553622024469057, 0.14862756827048595, 0.12688576052520295, 0.17760356771855879, 0.18538996526774332, 0.17866550605798748, 0.16697577711203448, 0.23633529059129132, 0.18460422162236334, 0.1968018207138127, 0.21055749697629034, 0.21110336096873716, 0.16909744582787478, 0.10824597847242234, 0.11362378181487132, 0.12743432028040313, 0.1584968532713691, 0.1484594976935808, 0.1505537025186766, 0.16410935801025295, 0.1321813349306391, 0.09521610061114749, 0.2905013658683462, 0.30850148416372014, 0.26806684238875134, 0.28949808929710474, 0.2946745967064033, 0.2722567412365605, 0.32942476083541894, 0.3237184693767785, 0.2996767868346695, 0.16817845404259335, 0.1951653262018399, 0.17126706277232862, 0.17727568216742617, 0.16519220510596422, 0.18353496911589373, 0.17028519262777952, 0.16694398670258592, 0.16955816483037034, 0.17325788269066855, 0.16994211220118927, 0.15798438404329407, 0.21383959292199106, 0.19121672910587673, 0.18989527387147298, 0.23679076087936324, 0.166167335174355, 0.21157789821064799, 0.3393990741381655, 0.3667654896973105, 0.07939512670287363, 0.16711924238846187, 0.18716021556590645, 0.16577077603956825, 0.11156305517537635, 0.10314938465330092, 0.14871051367378663, 0.19448157059825122, 0.22135981974234897, 0.18473938748907526, 0.1841037003219329, 0.182450883107106, 0.18323796976453555, 0.2022991076799614, 0.19703870926575184, 0.20003199140772554, 0.0688081064528906, 0.04975872039586193, 0.08378774832947089, 0.06402667053025057, 0.056318244644465665, 0.06761232983548437, 0.05265602519110857, 0.0635976397638659, 0.0589601318856221]}, "mutation_prompt": null}
{"id": "60e4539b-c048-48e9-882b-247602cb770a", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation process based on individual performance\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Enhancing convergence speed by dynamically adjusting the mutation process based on individual performance for faster exploration and exploitation.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c6dc1ea-feab-48f1-b5d1-4a2f9f4a8faf", "metadata": {"aucs": [0.3984286985613493, 0.31266707486249345, 0.36501284211140084, 0.21322006407278227, 0.2869657984148276, 0.2318140565910669, 0.3227310196867994, 0.30174876118206084, 0.3310767809743198, 9.999999999998899e-05, 9.999999999998899e-05, 0.013698351168261569, 0.08308717069344562, 0.036905460769867005, 0.05463390731032691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09674447413832954, 0.07490948752161353, 0.07620230021569785, 0.10000838371388088, 0.08904114994471368, 0.1008638691685757, 0.09755112718120673, 0.09617895716278202, 0.08157592464370644, 0.07373492409838367, 0.052907101411826085, 0.0597625219942538, 0.06911657622587042, 0.08279434629230165, 0.09105947634263611, 0.10266342163775677, 0.08208324489692387, 0.090401413658029, 0.14809898491990547, 0.13727834586472598, 0.15553796197566516, 0.1668522652897314, 0.16001102456810745, 0.1988552960661979, 0.26702774872547674, 0.13438488734124165, 0.18639379024228342, 0.08400220758584076, 0.1572117430832699, 0.17883940407775933, 0.11982108231013389, 0.14060247656046354, 0.1369106873108067, 0.19776895203810319, 0.09888449562467849, 0.13381302181101395, 0.1986360214558195, 0.14619215836482347, 0.21029427556090563, 0.23520231598343921, 0.16285109865962766, 0.20147647840149274, 0.17826529308948225, 0.17733438049956307, 0.14834729388194123, 0.16310843654687923, 0.22744047783537868, 0.1818396804796828, 0.08405308873184425, 9.999999999998899e-05, 0.15165525629927346, 0.11847131591394833, 0.12259319276910319, 0.08871068912474145, 0.21823035895395437, 0.19404969546345696, 0.1519680731946943, 0.1839695408829788, 0.2005254157176185, 0.18792144974238778, 0.254453886517099, 0.2005796357065911, 0.237464320262179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042321277533669655, 0.11724326889988146, 0.09620547105447463, 0.10060932361097308, 0.05802888998802902, 0.051486399552529316, 0.06128754052969576, 0.10603632223197823, 0.1328343134232648, 0.06472482757277065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03343276795636141, 0.04350845856909924, 0.06038791078681949, 0.0329432677018191, 0.020951066103449323, 0.014026249389805567, 0.05423917058567296, 9.999999999998899e-05, 0.02177241758964188, 0.29137196951961564, 0.25839287584789905, 0.3106636879478971, 0.3175328450172151, 0.2832586982718235, 0.29400752500541083, 0.3268490005195428, 0.3123715781425711, 0.31278068763819256, 0.06892730129666702, 0.048904837067061946, 0.02817872930780818, 0.05543464382370278, 0.03394098016103375, 0.07720751400217163, 0.07893441793039035, 0.07521332433276617, 0.07221794475513799, 0.18221090380285654, 0.13783065315226595, 0.15587177884325776, 0.12916176888091668, 0.11653736833739681, 0.11553622024469057, 0.14862756827048595, 0.12688576052520295, 0.17760356771855879, 0.18538996526774332, 0.17866550605798748, 0.16697577711203448, 0.23633529059129132, 0.18460422162236334, 0.1968018207138127, 0.21055749697629034, 0.21110336096873716, 0.16909744582787478, 0.10824597847242234, 0.11362378181487132, 0.12743432028040313, 0.1584968532713691, 0.1484594976935808, 0.1505537025186766, 0.16410935801025295, 0.1321813349306391, 0.09521610061114749, 0.2905013658683462, 0.30850148416372014, 0.26806684238875134, 0.28949808929710474, 0.2946745967064033, 0.2722567412365605, 0.32942476083541894, 0.3237184693767785, 0.2996767868346695, 0.16817845404259335, 0.1951653262018399, 0.17126706277232862, 0.17727568216742617, 0.16519220510596422, 0.18353496911589373, 0.17028519262777952, 0.16694398670258592, 0.16955816483037034, 0.17325788269066855, 0.16994211220118927, 0.15798438404329407, 0.21383959292199106, 0.19121672910587673, 0.18989527387147298, 0.23679076087936324, 0.166167335174355, 0.21157789821064799, 0.3393990741381655, 0.3667654896973105, 0.07939512670287363, 0.16711924238846187, 0.18716021556590645, 0.16577077603956825, 0.11156305517537635, 0.10314938465330092, 0.14871051367378663, 0.19448157059825122, 0.22135981974234897, 0.18473938748907526, 0.1841037003219329, 0.182450883107106, 0.18323796976453555, 0.2022991076799614, 0.19703870926575184, 0.20003199140772554, 0.0688081064528906, 0.04975872039586193, 0.08378774832947089, 0.06402667053025057, 0.056318244644465665, 0.06761232983548437, 0.05265602519110857, 0.0635976397638659, 0.0589601318856221]}, "mutation_prompt": null}
{"id": "af394137-a993-43e2-b7a8-038b328c2dd7", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation process based on individual performance\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Enhancing convergence speed by dynamically adjusting the mutation process based on individual performance for faster exploration and exploitation.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c6dc1ea-feab-48f1-b5d1-4a2f9f4a8faf", "metadata": {"aucs": [0.3984286985613493, 0.31266707486249345, 0.36501284211140084, 0.21322006407278227, 0.2869657984148276, 0.2318140565910669, 0.3227310196867994, 0.30174876118206084, 0.3310767809743198, 9.999999999998899e-05, 9.999999999998899e-05, 0.013698351168261569, 0.08308717069344562, 0.036905460769867005, 0.05463390731032691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09674447413832954, 0.07490948752161353, 0.07620230021569785, 0.10000838371388088, 0.08904114994471368, 0.1008638691685757, 0.09755112718120673, 0.09617895716278202, 0.08157592464370644, 0.07373492409838367, 0.052907101411826085, 0.0597625219942538, 0.06911657622587042, 0.08279434629230165, 0.09105947634263611, 0.10266342163775677, 0.08208324489692387, 0.090401413658029, 0.14809898491990547, 0.13727834586472598, 0.15553796197566516, 0.1668522652897314, 0.16001102456810745, 0.1988552960661979, 0.26702774872547674, 0.13438488734124165, 0.18639379024228342, 0.08400220758584076, 0.1572117430832699, 0.17883940407775933, 0.11982108231013389, 0.14060247656046354, 0.1369106873108067, 0.19776895203810319, 0.09888449562467849, 0.13381302181101395, 0.1986360214558195, 0.14619215836482347, 0.21029427556090563, 0.23520231598343921, 0.16285109865962766, 0.20147647840149274, 0.17826529308948225, 0.17733438049956307, 0.14834729388194123, 0.16310843654687923, 0.22744047783537868, 0.1818396804796828, 0.08405308873184425, 9.999999999998899e-05, 0.15165525629927346, 0.11847131591394833, 0.12259319276910319, 0.08871068912474145, 0.21823035895395437, 0.19404969546345696, 0.1519680731946943, 0.1839695408829788, 0.2005254157176185, 0.18792144974238778, 0.254453886517099, 0.2005796357065911, 0.237464320262179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042321277533669655, 0.11724326889988146, 0.09620547105447463, 0.10060932361097308, 0.05802888998802902, 0.051486399552529316, 0.06128754052969576, 0.10603632223197823, 0.1328343134232648, 0.06472482757277065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03343276795636141, 0.04350845856909924, 0.06038791078681949, 0.0329432677018191, 0.020951066103449323, 0.014026249389805567, 0.05423917058567296, 9.999999999998899e-05, 0.02177241758964188, 0.29137196951961564, 0.25839287584789905, 0.3106636879478971, 0.3175328450172151, 0.2832586982718235, 0.29400752500541083, 0.3268490005195428, 0.3123715781425711, 0.31278068763819256, 0.06892730129666702, 0.048904837067061946, 0.02817872930780818, 0.05543464382370278, 0.03394098016103375, 0.07720751400217163, 0.07893441793039035, 0.07521332433276617, 0.07221794475513799, 0.18221090380285654, 0.13783065315226595, 0.15587177884325776, 0.12916176888091668, 0.11653736833739681, 0.11553622024469057, 0.14862756827048595, 0.12688576052520295, 0.17760356771855879, 0.18538996526774332, 0.17866550605798748, 0.16697577711203448, 0.23633529059129132, 0.18460422162236334, 0.1968018207138127, 0.21055749697629034, 0.21110336096873716, 0.16909744582787478, 0.10824597847242234, 0.11362378181487132, 0.12743432028040313, 0.1584968532713691, 0.1484594976935808, 0.1505537025186766, 0.16410935801025295, 0.1321813349306391, 0.09521610061114749, 0.2905013658683462, 0.30850148416372014, 0.26806684238875134, 0.28949808929710474, 0.2946745967064033, 0.2722567412365605, 0.32942476083541894, 0.3237184693767785, 0.2996767868346695, 0.16817845404259335, 0.1951653262018399, 0.17126706277232862, 0.17727568216742617, 0.16519220510596422, 0.18353496911589373, 0.17028519262777952, 0.16694398670258592, 0.16955816483037034, 0.17325788269066855, 0.16994211220118927, 0.15798438404329407, 0.21383959292199106, 0.19121672910587673, 0.18989527387147298, 0.23679076087936324, 0.166167335174355, 0.21157789821064799, 0.3393990741381655, 0.3667654896973105, 0.07939512670287363, 0.16711924238846187, 0.18716021556590645, 0.16577077603956825, 0.11156305517537635, 0.10314938465330092, 0.14871051367378663, 0.19448157059825122, 0.22135981974234897, 0.18473938748907526, 0.1841037003219329, 0.182450883107106, 0.18323796976453555, 0.2022991076799614, 0.19703870926575184, 0.20003199140772554, 0.0688081064528906, 0.04975872039586193, 0.08378774832947089, 0.06402667053025057, 0.056318244644465665, 0.06761232983548437, 0.05265602519110857, 0.0635976397638659, 0.0589601318856221]}, "mutation_prompt": null}
{"id": "a5d00e42-0d88-4d27-8cf2-a2f888996a92", "solution": "# import numpy as np\n\nclass DynamicPopulationSizeDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population(pop_size):\n            return np.random.uniform(self.lb, self.ub, (pop_size, self.dim))\n\n        population_size = 30\n        population = create_population(population_size)\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - population_size):\n            r1, r2, r3 = np.random.randint(0, population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % population_size])\n\n            v = inertia_weight * population[_ % population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % population_size])\n\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            population[_ % population_size] = within_bounds(v)\n\n            fitness_values[_ % population_size] = objective_function(population[_ % population_size])\n\n            if fitness_values[_ % population_size] < fitness_values[best_index]:\n                best_index = _ % population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % population_size] < objective_function(gbest):\n                gbest = population[_ % population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n            # Dynamic adaptation of population size\n            if self.iteration_count % 10 == 0:\n                population_size = int(30 + 20 * np.sin(0.1 * self.iteration_count))\n                population = create_population(population_size)\n                fitness_values = np.array([objective_function(individual) for individual in population])\n\n        return objective_function(gbest)", "name": "DynamicPopulationSizeDEPSO", "description": "Utilizing a dynamic population size adaptation strategy to enhance convergence speed while maintaining algorithmic robustness.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 13 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 13 is out of bounds for axis 0 with size 10')", "parent_id": "9c6dc1ea-feab-48f1-b5d1-4a2f9f4a8faf", "metadata": {}, "mutation_prompt": null}
{"id": "41628d46-496f-4d1e-825e-7574ca946a1a", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation process based on individual performance\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Enhancing convergence speed by dynamically adjusting the mutation process based on individual performance for faster exploration and exploitation.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c6dc1ea-feab-48f1-b5d1-4a2f9f4a8faf", "metadata": {"aucs": [0.3984286985613493, 0.31266707486249345, 0.36501284211140084, 0.21322006407278227, 0.2869657984148276, 0.2318140565910669, 0.3227310196867994, 0.30174876118206084, 0.3310767809743198, 9.999999999998899e-05, 9.999999999998899e-05, 0.013698351168261569, 0.08308717069344562, 0.036905460769867005, 0.05463390731032691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09674447413832954, 0.07490948752161353, 0.07620230021569785, 0.10000838371388088, 0.08904114994471368, 0.1008638691685757, 0.09755112718120673, 0.09617895716278202, 0.08157592464370644, 0.07373492409838367, 0.052907101411826085, 0.0597625219942538, 0.06911657622587042, 0.08279434629230165, 0.09105947634263611, 0.10266342163775677, 0.08208324489692387, 0.090401413658029, 0.14809898491990547, 0.13727834586472598, 0.15553796197566516, 0.1668522652897314, 0.16001102456810745, 0.1988552960661979, 0.26702774872547674, 0.13438488734124165, 0.18639379024228342, 0.08400220758584076, 0.1572117430832699, 0.17883940407775933, 0.11982108231013389, 0.14060247656046354, 0.1369106873108067, 0.19776895203810319, 0.09888449562467849, 0.13381302181101395, 0.1986360214558195, 0.14619215836482347, 0.21029427556090563, 0.23520231598343921, 0.16285109865962766, 0.20147647840149274, 0.17826529308948225, 0.17733438049956307, 0.14834729388194123, 0.16310843654687923, 0.22744047783537868, 0.1818396804796828, 0.08405308873184425, 9.999999999998899e-05, 0.15165525629927346, 0.11847131591394833, 0.12259319276910319, 0.08871068912474145, 0.21823035895395437, 0.19404969546345696, 0.1519680731946943, 0.1839695408829788, 0.2005254157176185, 0.18792144974238778, 0.254453886517099, 0.2005796357065911, 0.237464320262179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042321277533669655, 0.11724326889988146, 0.09620547105447463, 0.10060932361097308, 0.05802888998802902, 0.051486399552529316, 0.06128754052969576, 0.10603632223197823, 0.1328343134232648, 0.06472482757277065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03343276795636141, 0.04350845856909924, 0.06038791078681949, 0.0329432677018191, 0.020951066103449323, 0.014026249389805567, 0.05423917058567296, 9.999999999998899e-05, 0.02177241758964188, 0.29137196951961564, 0.25839287584789905, 0.3106636879478971, 0.3175328450172151, 0.2832586982718235, 0.29400752500541083, 0.3268490005195428, 0.3123715781425711, 0.31278068763819256, 0.06892730129666702, 0.048904837067061946, 0.02817872930780818, 0.05543464382370278, 0.03394098016103375, 0.07720751400217163, 0.07893441793039035, 0.07521332433276617, 0.07221794475513799, 0.18221090380285654, 0.13783065315226595, 0.15587177884325776, 0.12916176888091668, 0.11653736833739681, 0.11553622024469057, 0.14862756827048595, 0.12688576052520295, 0.17760356771855879, 0.18538996526774332, 0.17866550605798748, 0.16697577711203448, 0.23633529059129132, 0.18460422162236334, 0.1968018207138127, 0.21055749697629034, 0.21110336096873716, 0.16909744582787478, 0.10824597847242234, 0.11362378181487132, 0.12743432028040313, 0.1584968532713691, 0.1484594976935808, 0.1505537025186766, 0.16410935801025295, 0.1321813349306391, 0.09521610061114749, 0.2905013658683462, 0.30850148416372014, 0.26806684238875134, 0.28949808929710474, 0.2946745967064033, 0.2722567412365605, 0.32942476083541894, 0.3237184693767785, 0.2996767868346695, 0.16817845404259335, 0.1951653262018399, 0.17126706277232862, 0.17727568216742617, 0.16519220510596422, 0.18353496911589373, 0.17028519262777952, 0.16694398670258592, 0.16955816483037034, 0.17325788269066855, 0.16994211220118927, 0.15798438404329407, 0.21383959292199106, 0.19121672910587673, 0.18989527387147298, 0.23679076087936324, 0.166167335174355, 0.21157789821064799, 0.3393990741381655, 0.3667654896973105, 0.07939512670287363, 0.16711924238846187, 0.18716021556590645, 0.16577077603956825, 0.11156305517537635, 0.10314938465330092, 0.14871051367378663, 0.19448157059825122, 0.22135981974234897, 0.18473938748907526, 0.1841037003219329, 0.182450883107106, 0.18323796976453555, 0.2022991076799614, 0.19703870926575184, 0.20003199140772554, 0.0688081064528906, 0.04975872039586193, 0.08378774832947089, 0.06402667053025057, 0.056318244644465665, 0.06761232983548437, 0.05265602519110857, 0.0635976397638659, 0.0589601318856221]}, "mutation_prompt": null}
{"id": "2d6d4a26-24e7-41e9-b987-e883fe1a28fd", "solution": "import numpy as np\n\nclass AcceleratedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            mutation_impact = np.clip(0.6 + 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.4, 0.8)\n            crossover_impact = np.clip(0.6 + 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.4, 0.8)\n            v = np.where(np.random.rand(self.dim) < mutation_impact, v, gbest)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "AcceleratedAdaptiveMutationDEPSO", "description": "Accelerating convergence by introducing a dynamic update mechanism for the mutation rate and crossover probability with a more significant impact on the algorithm's performance.", "configspace": "", "generation": 79, "fitness": 0.14047879645269884, "feedback": "The algorithm AcceleratedAdaptiveMutationDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.10.", "error": "", "parent_id": "9c6dc1ea-feab-48f1-b5d1-4a2f9f4a8faf", "metadata": {"aucs": [0.29208791453333627, 0.2796100723252056, 0.3110909533748041, 0.23621350911406847, 0.19438592919331144, 0.23248875818585868, 0.31474507363041293, 0.2969325633860742, 0.2751708083692478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05140543245701934, 0.012922482712255268, 0.08523199316189367, 9.999999999998899e-05, 0.0024758791251059398, 9.999999999998899e-05, 0.06972069736363051, 0.07569882262929861, 0.08249148691632457, 0.09973647589466805, 0.08562428486019036, 0.08248919152564194, 0.09923437109118294, 0.08155412804691553, 0.09492400662564382, 0.06452414202880896, 0.05879710509938374, 0.05971962832101996, 0.07950447924600934, 0.0944456634426386, 0.07551270790419129, 0.09586688691897294, 0.08528399502058615, 0.0965713007397695, 0.994214509204301, 0.17580159070307033, 0.12324837857464577, 0.17370468329116917, 0.1419267552253679, 0.14364186823234137, 0.3522006205437721, 0.15838729183210742, 0.19545501107633945, 0.11492979870833209, 0.14029133057295462, 0.14465534078817877, 0.1399349572224743, 0.12682556566293257, 0.13426851842704723, 0.1335881757587598, 0.13755250837639066, 0.12758025321376787, 0.1816223135947076, 0.20100417646908986, 0.16067732506442733, 0.1971108967017169, 0.19025803569230026, 0.17017846250446433, 0.16989848574918764, 0.17772120574841554, 0.17520078130661554, 0.17885568529174212, 0.14241150678267422, 0.13028697549327883, 0.0939761135231818, 0.07495563209070022, 0.08921108365084873, 0.14745326467796782, 0.09547197790880146, 0.0971401215349541, 0.21591185820265602, 0.21200179906054617, 0.1450837827316498, 0.16304062204504555, 0.17720159324532092, 0.16923207944167384, 0.21835946007370088, 0.20644503622703614, 0.22832457200677347, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015045245043937783, 0.07434704641545564, 0.07302921920826333, 0.07513189356935113, 0.052287728247969234, 0.041070770790113564, 0.045561676517325234, 0.12629705528884938, 0.09287462940509739, 0.08531298928704023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02849752139821904, 0.01202280494570418, 0.030601146068012675, 0.023332222512101763, 0.014262774190869298, 0.01661943313189662, 0.02500834417607367, 0.039726966399795116, 0.015807150042567608, 0.2721095046244093, 0.3094580847357875, 0.25757717898292054, 0.2464048311851148, 0.2813308062165525, 0.27747282945045904, 0.2976930379612628, 0.297810652826897, 0.31917178064161933, 0.06704113393931055, 0.042065270981442304, 0.04936883066616227, 0.07499139505175723, 0.06158487841933369, 0.0695259058542802, 0.06914635774759226, 0.07382994990492386, 0.057248158272563576, 0.1468702498858072, 0.1406588474302174, 0.1421913971846126, 0.1636938214879734, 0.1518432400118378, 0.12770769077188782, 0.13819990579175578, 0.14897329103778478, 0.13564606931750134, 0.22151117562758005, 0.1921263625135471, 0.1929658676546424, 0.22693534072907373, 0.21982808429532208, 0.21303490569220007, 0.180890546020112, 0.1882256699453596, 0.18032073079672972, 0.14132844072317075, 0.1489562828282578, 0.1427789664357979, 0.19509843874725397, 0.17548330152527924, 0.19271511486250326, 0.14371949284942642, 0.14187977954609454, 0.12907101214573136, 0.2902917017341693, 0.22905543327774214, 0.25491050901407186, 0.24663194745221206, 0.22446621367155228, 0.2801174574169556, 0.24322679059101826, 0.24756756679159686, 0.2011377036378792, 0.1677760683329801, 0.18299136889716594, 0.17013013618012396, 0.16815210676017123, 0.17475621434550903, 0.1733101099299692, 0.17490770611096018, 0.1694156250483818, 0.16573351888700472, 0.24011615370970674, 0.18048810084142863, 0.15943103512937318, 0.22465817634888463, 0.18724265007184226, 0.16246016201038949, 0.16424498566577073, 0.13111864142725227, 0.3603234139540191, 0.2726321722838111, 0.36660635903819994, 0.1881744589767924, 0.2685500532011237, 0.1999765565601902, 0.16206407030404657, 0.10353251401810992, 0.12317261743542007, 0.1587602728677734, 0.17718503219260506, 0.1824801412568462, 0.18069988013667393, 0.17161407919241078, 0.20369977954007112, 0.17865300023667074, 0.1868414027829315, 0.17612791248616855, 0.1739782631074378, 0.08001450810562505, 0.06636520764408615, 0.060078173161347115, 0.07495776153085443, 0.06538028532580487, 0.06280050485491917, 0.07283154384873292, 0.07462797797710974, 0.06773003104366415]}, "mutation_prompt": null}
{"id": "2fcf9a9c-bb31-4841-aa7c-728b7a912302", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation process based on individual performance\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Enhancing convergence speed by dynamically adjusting the mutation process based on individual performance for faster exploration and exploitation.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c6dc1ea-feab-48f1-b5d1-4a2f9f4a8faf", "metadata": {"aucs": [0.3984286985613493, 0.31266707486249345, 0.36501284211140084, 0.21322006407278227, 0.2869657984148276, 0.2318140565910669, 0.3227310196867994, 0.30174876118206084, 0.3310767809743198, 9.999999999998899e-05, 9.999999999998899e-05, 0.013698351168261569, 0.08308717069344562, 0.036905460769867005, 0.05463390731032691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09674447413832954, 0.07490948752161353, 0.07620230021569785, 0.10000838371388088, 0.08904114994471368, 0.1008638691685757, 0.09755112718120673, 0.09617895716278202, 0.08157592464370644, 0.07373492409838367, 0.052907101411826085, 0.0597625219942538, 0.06911657622587042, 0.08279434629230165, 0.09105947634263611, 0.10266342163775677, 0.08208324489692387, 0.090401413658029, 0.14809898491990547, 0.13727834586472598, 0.15553796197566516, 0.1668522652897314, 0.16001102456810745, 0.1988552960661979, 0.26702774872547674, 0.13438488734124165, 0.18639379024228342, 0.08400220758584076, 0.1572117430832699, 0.17883940407775933, 0.11982108231013389, 0.14060247656046354, 0.1369106873108067, 0.19776895203810319, 0.09888449562467849, 0.13381302181101395, 0.1986360214558195, 0.14619215836482347, 0.21029427556090563, 0.23520231598343921, 0.16285109865962766, 0.20147647840149274, 0.17826529308948225, 0.17733438049956307, 0.14834729388194123, 0.16310843654687923, 0.22744047783537868, 0.1818396804796828, 0.08405308873184425, 9.999999999998899e-05, 0.15165525629927346, 0.11847131591394833, 0.12259319276910319, 0.08871068912474145, 0.21823035895395437, 0.19404969546345696, 0.1519680731946943, 0.1839695408829788, 0.2005254157176185, 0.18792144974238778, 0.254453886517099, 0.2005796357065911, 0.237464320262179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042321277533669655, 0.11724326889988146, 0.09620547105447463, 0.10060932361097308, 0.05802888998802902, 0.051486399552529316, 0.06128754052969576, 0.10603632223197823, 0.1328343134232648, 0.06472482757277065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03343276795636141, 0.04350845856909924, 0.06038791078681949, 0.0329432677018191, 0.020951066103449323, 0.014026249389805567, 0.05423917058567296, 9.999999999998899e-05, 0.02177241758964188, 0.29137196951961564, 0.25839287584789905, 0.3106636879478971, 0.3175328450172151, 0.2832586982718235, 0.29400752500541083, 0.3268490005195428, 0.3123715781425711, 0.31278068763819256, 0.06892730129666702, 0.048904837067061946, 0.02817872930780818, 0.05543464382370278, 0.03394098016103375, 0.07720751400217163, 0.07893441793039035, 0.07521332433276617, 0.07221794475513799, 0.18221090380285654, 0.13783065315226595, 0.15587177884325776, 0.12916176888091668, 0.11653736833739681, 0.11553622024469057, 0.14862756827048595, 0.12688576052520295, 0.17760356771855879, 0.18538996526774332, 0.17866550605798748, 0.16697577711203448, 0.23633529059129132, 0.18460422162236334, 0.1968018207138127, 0.21055749697629034, 0.21110336096873716, 0.16909744582787478, 0.10824597847242234, 0.11362378181487132, 0.12743432028040313, 0.1584968532713691, 0.1484594976935808, 0.1505537025186766, 0.16410935801025295, 0.1321813349306391, 0.09521610061114749, 0.2905013658683462, 0.30850148416372014, 0.26806684238875134, 0.28949808929710474, 0.2946745967064033, 0.2722567412365605, 0.32942476083541894, 0.3237184693767785, 0.2996767868346695, 0.16817845404259335, 0.1951653262018399, 0.17126706277232862, 0.17727568216742617, 0.16519220510596422, 0.18353496911589373, 0.17028519262777952, 0.16694398670258592, 0.16955816483037034, 0.17325788269066855, 0.16994211220118927, 0.15798438404329407, 0.21383959292199106, 0.19121672910587673, 0.18989527387147298, 0.23679076087936324, 0.166167335174355, 0.21157789821064799, 0.3393990741381655, 0.3667654896973105, 0.07939512670287363, 0.16711924238846187, 0.18716021556590645, 0.16577077603956825, 0.11156305517537635, 0.10314938465330092, 0.14871051367378663, 0.19448157059825122, 0.22135981974234897, 0.18473938748907526, 0.1841037003219329, 0.182450883107106, 0.18323796976453555, 0.2022991076799614, 0.19703870926575184, 0.20003199140772554, 0.0688081064528906, 0.04975872039586193, 0.08378774832947089, 0.06402667053025057, 0.056318244644465665, 0.06761232983548437, 0.05265602519110857, 0.0635976397638659, 0.0589601318856221]}, "mutation_prompt": null}
{"id": "6e3ad277-82a4-4bc9-9910-e457b47fbcc9", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation process based on individual performance\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Enhancing convergence speed by dynamically adjusting the mutation process based on individual performance for faster exploration and exploitation.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c6dc1ea-feab-48f1-b5d1-4a2f9f4a8faf", "metadata": {"aucs": [0.3984286985613493, 0.31266707486249345, 0.36501284211140084, 0.21322006407278227, 0.2869657984148276, 0.2318140565910669, 0.3227310196867994, 0.30174876118206084, 0.3310767809743198, 9.999999999998899e-05, 9.999999999998899e-05, 0.013698351168261569, 0.08308717069344562, 0.036905460769867005, 0.05463390731032691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09674447413832954, 0.07490948752161353, 0.07620230021569785, 0.10000838371388088, 0.08904114994471368, 0.1008638691685757, 0.09755112718120673, 0.09617895716278202, 0.08157592464370644, 0.07373492409838367, 0.052907101411826085, 0.0597625219942538, 0.06911657622587042, 0.08279434629230165, 0.09105947634263611, 0.10266342163775677, 0.08208324489692387, 0.090401413658029, 0.14809898491990547, 0.13727834586472598, 0.15553796197566516, 0.1668522652897314, 0.16001102456810745, 0.1988552960661979, 0.26702774872547674, 0.13438488734124165, 0.18639379024228342, 0.08400220758584076, 0.1572117430832699, 0.17883940407775933, 0.11982108231013389, 0.14060247656046354, 0.1369106873108067, 0.19776895203810319, 0.09888449562467849, 0.13381302181101395, 0.1986360214558195, 0.14619215836482347, 0.21029427556090563, 0.23520231598343921, 0.16285109865962766, 0.20147647840149274, 0.17826529308948225, 0.17733438049956307, 0.14834729388194123, 0.16310843654687923, 0.22744047783537868, 0.1818396804796828, 0.08405308873184425, 9.999999999998899e-05, 0.15165525629927346, 0.11847131591394833, 0.12259319276910319, 0.08871068912474145, 0.21823035895395437, 0.19404969546345696, 0.1519680731946943, 0.1839695408829788, 0.2005254157176185, 0.18792144974238778, 0.254453886517099, 0.2005796357065911, 0.237464320262179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042321277533669655, 0.11724326889988146, 0.09620547105447463, 0.10060932361097308, 0.05802888998802902, 0.051486399552529316, 0.06128754052969576, 0.10603632223197823, 0.1328343134232648, 0.06472482757277065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03343276795636141, 0.04350845856909924, 0.06038791078681949, 0.0329432677018191, 0.020951066103449323, 0.014026249389805567, 0.05423917058567296, 9.999999999998899e-05, 0.02177241758964188, 0.29137196951961564, 0.25839287584789905, 0.3106636879478971, 0.3175328450172151, 0.2832586982718235, 0.29400752500541083, 0.3268490005195428, 0.3123715781425711, 0.31278068763819256, 0.06892730129666702, 0.048904837067061946, 0.02817872930780818, 0.05543464382370278, 0.03394098016103375, 0.07720751400217163, 0.07893441793039035, 0.07521332433276617, 0.07221794475513799, 0.18221090380285654, 0.13783065315226595, 0.15587177884325776, 0.12916176888091668, 0.11653736833739681, 0.11553622024469057, 0.14862756827048595, 0.12688576052520295, 0.17760356771855879, 0.18538996526774332, 0.17866550605798748, 0.16697577711203448, 0.23633529059129132, 0.18460422162236334, 0.1968018207138127, 0.21055749697629034, 0.21110336096873716, 0.16909744582787478, 0.10824597847242234, 0.11362378181487132, 0.12743432028040313, 0.1584968532713691, 0.1484594976935808, 0.1505537025186766, 0.16410935801025295, 0.1321813349306391, 0.09521610061114749, 0.2905013658683462, 0.30850148416372014, 0.26806684238875134, 0.28949808929710474, 0.2946745967064033, 0.2722567412365605, 0.32942476083541894, 0.3237184693767785, 0.2996767868346695, 0.16817845404259335, 0.1951653262018399, 0.17126706277232862, 0.17727568216742617, 0.16519220510596422, 0.18353496911589373, 0.17028519262777952, 0.16694398670258592, 0.16955816483037034, 0.17325788269066855, 0.16994211220118927, 0.15798438404329407, 0.21383959292199106, 0.19121672910587673, 0.18989527387147298, 0.23679076087936324, 0.166167335174355, 0.21157789821064799, 0.3393990741381655, 0.3667654896973105, 0.07939512670287363, 0.16711924238846187, 0.18716021556590645, 0.16577077603956825, 0.11156305517537635, 0.10314938465330092, 0.14871051367378663, 0.19448157059825122, 0.22135981974234897, 0.18473938748907526, 0.1841037003219329, 0.182450883107106, 0.18323796976453555, 0.2022991076799614, 0.19703870926575184, 0.20003199140772554, 0.0688081064528906, 0.04975872039586193, 0.08378774832947089, 0.06402667053025057, 0.056318244644465665, 0.06761232983548437, 0.05265602519110857, 0.0635976397638659, 0.0589601318856221]}, "mutation_prompt": null}
{"id": "58204c8d-785d-406f-b081-d0e1fc239e97", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation process based on individual performance\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Enhancing convergence speed by dynamically adjusting the mutation process based on individual performance for faster exploration and exploitation.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c6dc1ea-feab-48f1-b5d1-4a2f9f4a8faf", "metadata": {"aucs": [0.3984286985613493, 0.31266707486249345, 0.36501284211140084, 0.21322006407278227, 0.2869657984148276, 0.2318140565910669, 0.3227310196867994, 0.30174876118206084, 0.3310767809743198, 9.999999999998899e-05, 9.999999999998899e-05, 0.013698351168261569, 0.08308717069344562, 0.036905460769867005, 0.05463390731032691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09674447413832954, 0.07490948752161353, 0.07620230021569785, 0.10000838371388088, 0.08904114994471368, 0.1008638691685757, 0.09755112718120673, 0.09617895716278202, 0.08157592464370644, 0.07373492409838367, 0.052907101411826085, 0.0597625219942538, 0.06911657622587042, 0.08279434629230165, 0.09105947634263611, 0.10266342163775677, 0.08208324489692387, 0.090401413658029, 0.14809898491990547, 0.13727834586472598, 0.15553796197566516, 0.1668522652897314, 0.16001102456810745, 0.1988552960661979, 0.26702774872547674, 0.13438488734124165, 0.18639379024228342, 0.08400220758584076, 0.1572117430832699, 0.17883940407775933, 0.11982108231013389, 0.14060247656046354, 0.1369106873108067, 0.19776895203810319, 0.09888449562467849, 0.13381302181101395, 0.1986360214558195, 0.14619215836482347, 0.21029427556090563, 0.23520231598343921, 0.16285109865962766, 0.20147647840149274, 0.17826529308948225, 0.17733438049956307, 0.14834729388194123, 0.16310843654687923, 0.22744047783537868, 0.1818396804796828, 0.08405308873184425, 9.999999999998899e-05, 0.15165525629927346, 0.11847131591394833, 0.12259319276910319, 0.08871068912474145, 0.21823035895395437, 0.19404969546345696, 0.1519680731946943, 0.1839695408829788, 0.2005254157176185, 0.18792144974238778, 0.254453886517099, 0.2005796357065911, 0.237464320262179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042321277533669655, 0.11724326889988146, 0.09620547105447463, 0.10060932361097308, 0.05802888998802902, 0.051486399552529316, 0.06128754052969576, 0.10603632223197823, 0.1328343134232648, 0.06472482757277065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03343276795636141, 0.04350845856909924, 0.06038791078681949, 0.0329432677018191, 0.020951066103449323, 0.014026249389805567, 0.05423917058567296, 9.999999999998899e-05, 0.02177241758964188, 0.29137196951961564, 0.25839287584789905, 0.3106636879478971, 0.3175328450172151, 0.2832586982718235, 0.29400752500541083, 0.3268490005195428, 0.3123715781425711, 0.31278068763819256, 0.06892730129666702, 0.048904837067061946, 0.02817872930780818, 0.05543464382370278, 0.03394098016103375, 0.07720751400217163, 0.07893441793039035, 0.07521332433276617, 0.07221794475513799, 0.18221090380285654, 0.13783065315226595, 0.15587177884325776, 0.12916176888091668, 0.11653736833739681, 0.11553622024469057, 0.14862756827048595, 0.12688576052520295, 0.17760356771855879, 0.18538996526774332, 0.17866550605798748, 0.16697577711203448, 0.23633529059129132, 0.18460422162236334, 0.1968018207138127, 0.21055749697629034, 0.21110336096873716, 0.16909744582787478, 0.10824597847242234, 0.11362378181487132, 0.12743432028040313, 0.1584968532713691, 0.1484594976935808, 0.1505537025186766, 0.16410935801025295, 0.1321813349306391, 0.09521610061114749, 0.2905013658683462, 0.30850148416372014, 0.26806684238875134, 0.28949808929710474, 0.2946745967064033, 0.2722567412365605, 0.32942476083541894, 0.3237184693767785, 0.2996767868346695, 0.16817845404259335, 0.1951653262018399, 0.17126706277232862, 0.17727568216742617, 0.16519220510596422, 0.18353496911589373, 0.17028519262777952, 0.16694398670258592, 0.16955816483037034, 0.17325788269066855, 0.16994211220118927, 0.15798438404329407, 0.21383959292199106, 0.19121672910587673, 0.18989527387147298, 0.23679076087936324, 0.166167335174355, 0.21157789821064799, 0.3393990741381655, 0.3667654896973105, 0.07939512670287363, 0.16711924238846187, 0.18716021556590645, 0.16577077603956825, 0.11156305517537635, 0.10314938465330092, 0.14871051367378663, 0.19448157059825122, 0.22135981974234897, 0.18473938748907526, 0.1841037003219329, 0.182450883107106, 0.18323796976453555, 0.2022991076799614, 0.19703870926575184, 0.20003199140772554, 0.0688081064528906, 0.04975872039586193, 0.08378774832947089, 0.06402667053025057, 0.056318244644465665, 0.06761232983548437, 0.05265602519110857, 0.0635976397638659, 0.0589601318856221]}, "mutation_prompt": null}
{"id": "d385fbdf-9a51-403f-a258-ba188e8983b8", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation and crossover rates based on global and individual performance\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Accelerating convergence by dynamically adjusting mutation and crossover rates based on global and individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 83, "fitness": 0.14117160689173835, "feedback": "The algorithm EnhancedAdaptiveMutationDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "9c6dc1ea-feab-48f1-b5d1-4a2f9f4a8faf", "metadata": {"aucs": [0.39844143226976947, 0.3126748822448572, 0.36502971242576254, 0.27054943736291026, 0.2869585151133357, 0.23180639567802042, 0.3227476935078918, 0.30175540603152495, 0.33108590265285154, 9.999999999998899e-05, 9.999999999998899e-05, 0.013975586776781124, 0.08170252483852802, 0.04098587087856742, 0.05475292156108025, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09674622832794177, 0.07490997880349026, 0.07966544106428752, 0.10000434330972163, 0.08903779486855079, 0.10085938685989382, 0.09746014049732499, 0.09611983488190456, 0.08162134052919123, 0.07373145488630051, 0.05290659863543645, 0.059741666201212906, 0.06910001630534968, 0.0828315872090376, 0.09110265035217802, 0.10265940178259225, 0.08263855204502435, 0.0904025584751762, 0.14809976934980518, 0.1372767850709803, 0.15553793575927888, 0.16685144230836757, 0.16001067035138894, 0.19885463650882673, 0.26701806510786086, 0.1343848120175628, 0.18639378832977327, 0.08400689268149908, 0.15721178404302572, 0.17884131173068707, 0.12159434953372406, 0.13761881110047647, 0.1410649759645246, 0.19775740820054555, 0.09888387825710687, 0.13381584567336158, 0.1986360214558195, 0.14619215836482347, 0.21029427556090563, 0.23520231598343921, 0.16285109865962766, 0.19609689430940025, 0.17826529308948225, 0.17733438049956307, 0.1483388729767927, 0.16111601753221838, 0.22743806397101385, 0.18205133555583408, 0.0840534535273979, 9.999999999998899e-05, 0.15165563848900165, 0.1088399103626525, 0.12259181909385575, 0.08870139026764623, 0.2182539584029568, 0.19406367347074316, 0.1519659717123062, 0.18396908477744978, 0.2004502579517351, 0.18792457913830407, 0.25447207908194436, 0.19350286774131398, 0.23733167733925686, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042271306580208834, 0.11692190290350213, 0.09599260480462668, 0.10957496517074905, 0.05691896588023426, 0.052654662435258404, 0.061267868165513883, 0.10617769514878417, 0.1349479758691945, 0.06031926365585294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03343300539529215, 0.0435246238042033, 0.06030820357110056, 0.032934192286496855, 0.020960516463492285, 0.01403120423784876, 0.054229250483905145, 9.999999999998899e-05, 0.02177648321508041, 0.2913656979852891, 0.25839066129053256, 0.31061425927478936, 0.3175646764153397, 0.2832587879676689, 0.29401353097576843, 0.3268683548614447, 0.31229296546439533, 0.3127665410524264, 0.06887782786053998, 0.04890470451000528, 0.02817879218077779, 0.055425476555652, 0.036823421781685295, 0.07720757048871352, 0.07893460229057436, 0.07522893576528444, 0.06896708878302504, 0.18226269931696448, 0.13966667956043644, 0.1556799710010044, 0.14263890228403564, 0.12499159645096225, 0.138839411642403, 0.12844652972708792, 0.12126372040203626, 0.18653102054437798, 0.1840034908175875, 0.17866510852417428, 0.16697506189894407, 0.23634796076213738, 0.19573558782723244, 0.19680315015944505, 0.210584933337838, 0.21110327772123738, 0.16909849894027906, 0.10827525909402613, 0.11360749545193738, 0.12743116752319894, 0.15855416971380054, 0.14845880237164544, 0.1505725145311526, 0.16412838967065058, 0.13218048847736286, 0.09521685090112642, 0.2621922434973921, 0.2983006880903406, 0.26649181895924945, 0.28948915551013354, 0.2946389987959086, 0.3001744378854997, 0.32939468921427506, 0.288666554040638, 0.30600140447652713, 0.16916826034063548, 0.19518319246143023, 0.19034571441863113, 0.17727666442162848, 0.1651937259162758, 0.17207140330424175, 0.17714293767621092, 0.16694328006978287, 0.17102074764342579, 0.17325983619727048, 0.16993695741103243, 0.1579876709784903, 0.21384635530970908, 0.1912165907201001, 0.18989438541141157, 0.23721399490612582, 0.16616730089562715, 0.2115775271239566, 0.339409039196391, 0.36675649453725856, 0.07939512622218403, 0.16452009706609783, 0.1871639600268128, 0.1657618486099629, 0.11153049750472566, 0.10315043298307247, 0.1487179275255115, 0.1833412841697346, 0.22145777169516268, 0.17603858790898208, 0.1882385154957238, 0.1836928826685592, 0.19252124990865482, 0.204722947319672, 0.20463915512379371, 0.2004534188989956, 0.06881318359248612, 0.0497533988501373, 0.08381127734877114, 0.06402354265047472, 0.05629833016977959, 0.06761354096689354, 0.05266894901056951, 0.0636043290092424, 0.058959932570767704]}, "mutation_prompt": null}
{"id": "855d15da-cec7-43fe-a4fe-48bb4a5c9f74", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation and crossover rates based on global and individual performance\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Accelerating convergence by dynamically adjusting mutation and crossover rates based on global and individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d385fbdf-9a51-403f-a258-ba188e8983b8", "metadata": {"aucs": [0.39844143226976947, 0.3126748822448572, 0.36502971242576254, 0.27054943736291026, 0.2869585151133357, 0.23180639567802042, 0.3227476935078918, 0.30175540603152495, 0.33108590265285154, 9.999999999998899e-05, 9.999999999998899e-05, 0.013975586776781124, 0.08170252483852802, 0.04098587087856742, 0.05475292156108025, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09674622832794177, 0.07490997880349026, 0.07966544106428752, 0.10000434330972163, 0.08903779486855079, 0.10085938685989382, 0.09746014049732499, 0.09611983488190456, 0.08162134052919123, 0.07373145488630051, 0.05290659863543645, 0.059741666201212906, 0.06910001630534968, 0.0828315872090376, 0.09110265035217802, 0.10265940178259225, 0.08263855204502435, 0.0904025584751762, 0.14809976934980518, 0.1372767850709803, 0.15553793575927888, 0.16685144230836757, 0.16001067035138894, 0.19885463650882673, 0.26701806510786086, 0.1343848120175628, 0.18639378832977327, 0.08400689268149908, 0.15721178404302572, 0.17884131173068707, 0.12159434953372406, 0.13761881110047647, 0.1410649759645246, 0.19775740820054555, 0.09888387825710687, 0.13381584567336158, 0.1986360214558195, 0.14619215836482347, 0.21029427556090563, 0.23520231598343921, 0.16285109865962766, 0.19609689430940025, 0.17826529308948225, 0.17733438049956307, 0.1483388729767927, 0.16111601753221838, 0.22743806397101385, 0.18205133555583408, 0.0840534535273979, 9.999999999998899e-05, 0.15165563848900165, 0.1088399103626525, 0.12259181909385575, 0.08870139026764623, 0.2182539584029568, 0.19406367347074316, 0.1519659717123062, 0.18396908477744978, 0.2004502579517351, 0.18792457913830407, 0.25447207908194436, 0.19350286774131398, 0.23733167733925686, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042271306580208834, 0.11692190290350213, 0.09599260480462668, 0.10957496517074905, 0.05691896588023426, 0.052654662435258404, 0.061267868165513883, 0.10617769514878417, 0.1349479758691945, 0.06031926365585294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03343300539529215, 0.0435246238042033, 0.06030820357110056, 0.032934192286496855, 0.020960516463492285, 0.01403120423784876, 0.054229250483905145, 9.999999999998899e-05, 0.02177648321508041, 0.2913656979852891, 0.25839066129053256, 0.31061425927478936, 0.3175646764153397, 0.2832587879676689, 0.29401353097576843, 0.3268683548614447, 0.31229296546439533, 0.3127665410524264, 0.06887782786053998, 0.04890470451000528, 0.02817879218077779, 0.055425476555652, 0.036823421781685295, 0.07720757048871352, 0.07893460229057436, 0.07522893576528444, 0.06896708878302504, 0.18226269931696448, 0.13966667956043644, 0.1556799710010044, 0.14263890228403564, 0.12499159645096225, 0.138839411642403, 0.12844652972708792, 0.12126372040203626, 0.18653102054437798, 0.1840034908175875, 0.17866510852417428, 0.16697506189894407, 0.23634796076213738, 0.19573558782723244, 0.19680315015944505, 0.210584933337838, 0.21110327772123738, 0.16909849894027906, 0.10827525909402613, 0.11360749545193738, 0.12743116752319894, 0.15855416971380054, 0.14845880237164544, 0.1505725145311526, 0.16412838967065058, 0.13218048847736286, 0.09521685090112642, 0.2621922434973921, 0.2983006880903406, 0.26649181895924945, 0.28948915551013354, 0.2946389987959086, 0.3001744378854997, 0.32939468921427506, 0.288666554040638, 0.30600140447652713, 0.16916826034063548, 0.19518319246143023, 0.19034571441863113, 0.17727666442162848, 0.1651937259162758, 0.17207140330424175, 0.17714293767621092, 0.16694328006978287, 0.17102074764342579, 0.17325983619727048, 0.16993695741103243, 0.1579876709784903, 0.21384635530970908, 0.1912165907201001, 0.18989438541141157, 0.23721399490612582, 0.16616730089562715, 0.2115775271239566, 0.339409039196391, 0.36675649453725856, 0.07939512622218403, 0.16452009706609783, 0.1871639600268128, 0.1657618486099629, 0.11153049750472566, 0.10315043298307247, 0.1487179275255115, 0.1833412841697346, 0.22145777169516268, 0.17603858790898208, 0.1882385154957238, 0.1836928826685592, 0.19252124990865482, 0.204722947319672, 0.20463915512379371, 0.2004534188989956, 0.06881318359248612, 0.0497533988501373, 0.08381127734877114, 0.06402354265047472, 0.05629833016977959, 0.06761354096689354, 0.05266894901056951, 0.0636043290092424, 0.058959932570767704]}, "mutation_prompt": null}
{"id": "28895cf7-6f48-4832-9951-08bfaa38b8ea", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation and crossover rates based on global and individual performance\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n            self.cr = np.clip(self.cr + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Accelerating convergence by dynamically adjusting mutation and crossover rates based on global and individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d385fbdf-9a51-403f-a258-ba188e8983b8", "metadata": {"aucs": [0.39844143226976947, 0.3126748822448572, 0.36502971242576254, 0.27054943736291026, 0.2869585151133357, 0.23180639567802042, 0.3227476935078918, 0.30175540603152495, 0.33108590265285154, 9.999999999998899e-05, 9.999999999998899e-05, 0.013975586776781124, 0.08170252483852802, 0.04098587087856742, 0.05475292156108025, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09674622832794177, 0.07490997880349026, 0.07966544106428752, 0.10000434330972163, 0.08903779486855079, 0.10085938685989382, 0.09746014049732499, 0.09611983488190456, 0.08162134052919123, 0.07373145488630051, 0.05290659863543645, 0.059741666201212906, 0.06910001630534968, 0.0828315872090376, 0.09110265035217802, 0.10265940178259225, 0.08263855204502435, 0.0904025584751762, 0.14809976934980518, 0.1372767850709803, 0.15553793575927888, 0.16685144230836757, 0.16001067035138894, 0.19885463650882673, 0.26701806510786086, 0.1343848120175628, 0.18639378832977327, 0.08400689268149908, 0.15721178404302572, 0.17884131173068707, 0.12159434953372406, 0.13761881110047647, 0.1410649759645246, 0.19775740820054555, 0.09888387825710687, 0.13381584567336158, 0.1986360214558195, 0.14619215836482347, 0.21029427556090563, 0.23520231598343921, 0.16285109865962766, 0.19609689430940025, 0.17826529308948225, 0.17733438049956307, 0.1483388729767927, 0.16111601753221838, 0.22743806397101385, 0.18205133555583408, 0.0840534535273979, 9.999999999998899e-05, 0.15165563848900165, 0.1088399103626525, 0.12259181909385575, 0.08870139026764623, 0.2182539584029568, 0.19406367347074316, 0.1519659717123062, 0.18396908477744978, 0.2004502579517351, 0.18792457913830407, 0.25447207908194436, 0.19350286774131398, 0.23733167733925686, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042271306580208834, 0.11692190290350213, 0.09599260480462668, 0.10957496517074905, 0.05691896588023426, 0.052654662435258404, 0.061267868165513883, 0.10617769514878417, 0.1349479758691945, 0.06031926365585294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03343300539529215, 0.0435246238042033, 0.06030820357110056, 0.032934192286496855, 0.020960516463492285, 0.01403120423784876, 0.054229250483905145, 9.999999999998899e-05, 0.02177648321508041, 0.2913656979852891, 0.25839066129053256, 0.31061425927478936, 0.3175646764153397, 0.2832587879676689, 0.29401353097576843, 0.3268683548614447, 0.31229296546439533, 0.3127665410524264, 0.06887782786053998, 0.04890470451000528, 0.02817879218077779, 0.055425476555652, 0.036823421781685295, 0.07720757048871352, 0.07893460229057436, 0.07522893576528444, 0.06896708878302504, 0.18226269931696448, 0.13966667956043644, 0.1556799710010044, 0.14263890228403564, 0.12499159645096225, 0.138839411642403, 0.12844652972708792, 0.12126372040203626, 0.18653102054437798, 0.1840034908175875, 0.17866510852417428, 0.16697506189894407, 0.23634796076213738, 0.19573558782723244, 0.19680315015944505, 0.210584933337838, 0.21110327772123738, 0.16909849894027906, 0.10827525909402613, 0.11360749545193738, 0.12743116752319894, 0.15855416971380054, 0.14845880237164544, 0.1505725145311526, 0.16412838967065058, 0.13218048847736286, 0.09521685090112642, 0.2621922434973921, 0.2983006880903406, 0.26649181895924945, 0.28948915551013354, 0.2946389987959086, 0.3001744378854997, 0.32939468921427506, 0.288666554040638, 0.30600140447652713, 0.16916826034063548, 0.19518319246143023, 0.19034571441863113, 0.17727666442162848, 0.1651937259162758, 0.17207140330424175, 0.17714293767621092, 0.16694328006978287, 0.17102074764342579, 0.17325983619727048, 0.16993695741103243, 0.1579876709784903, 0.21384635530970908, 0.1912165907201001, 0.18989438541141157, 0.23721399490612582, 0.16616730089562715, 0.2115775271239566, 0.339409039196391, 0.36675649453725856, 0.07939512622218403, 0.16452009706609783, 0.1871639600268128, 0.1657618486099629, 0.11153049750472566, 0.10315043298307247, 0.1487179275255115, 0.1833412841697346, 0.22145777169516268, 0.17603858790898208, 0.1882385154957238, 0.1836928826685592, 0.19252124990865482, 0.204722947319672, 0.20463915512379371, 0.2004534188989956, 0.06881318359248612, 0.0497533988501373, 0.08381127734877114, 0.06402354265047472, 0.05629833016977959, 0.06761354096689354, 0.05266894901056951, 0.0636043290092424, 0.058959932570767704]}, "mutation_prompt": null}
{"id": "cb971243-c612-4124-9af4-d6a5121de655", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            # Dynamic adjustment of mutation strategy based on individual performance\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.3 * (self.max_c3 - self.min_c3)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Accelerating convergence by adapting the mutation strategy dynamically based on individual performance to improve exploration and exploitation.", "configspace": "", "generation": 86, "fitness": 0.17344119366235655, "feedback": "The algorithm EnhancedAdaptiveMutationDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "d385fbdf-9a51-403f-a258-ba188e8983b8", "metadata": {"aucs": [0.31148966254190236, 0.325847419291626, 0.32844190222877756, 0.2823626618481846, 0.27333425153611524, 0.26206090017026784, 0.29970255289678216, 0.311332011338604, 0.3063411725644408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052475294474508494, 0.05594207895610892, 0.10254986036264269, 0.0009469924984698563, 0.016972661829004365, 9.999999999998899e-05, 0.09829067938192182, 0.09135602465660153, 0.0954164042126242, 0.08866868109655757, 0.0902512972511248, 0.0850668355046188, 0.09562872480821494, 0.0947342354204973, 0.08994750257818884, 0.07670963308629175, 0.07222620325638851, 0.08808203453667063, 0.0773546079264561, 0.09902829572968785, 0.07004732632862853, 0.08403405875487857, 0.08396044886793219, 0.08948815117639008, 0.8178972568585656, 0.9855693372501119, 0.9925959745347459, 0.8891461770161373, 0.8139855639221645, 0.8319998648291206, 0.921890518696017, 0.9935669582583465, 0.37170034407254493, 0.14125190065880033, 0.14727495011667047, 0.16192316513228944, 0.18339488764482925, 0.13081205749411695, 0.16093132805945132, 0.16473721055057977, 0.14586281660238765, 0.14260265726326138, 0.22677327429220184, 0.19232858425984067, 0.18373159025647579, 0.2079109522911835, 0.2035481367182227, 0.19178826443975572, 0.2267615025184181, 0.1853065709009013, 0.22126328847826293, 0.15190069892385238, 0.12421892644066579, 0.1536000212017954, 0.07121676877237004, 0.11792516700819577, 0.05814338218156767, 0.16099936757827127, 0.13116173092052252, 0.1500133652825023, 0.1773957895256335, 0.17959058506472758, 0.22991293264641766, 0.1683966025329553, 0.17423969399053763, 0.1752313003182584, 0.16472981486049032, 0.18836269550353113, 0.1906655628040056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004774228829146354, 0.038621299605654524, 0.10599325184179376, 0.06355892569065891, 0.08395052149828863, 0.043668725194879854, 0.043970925551844675, 0.07905716914801109, 0.12073772309864106, 0.07480189023074368, 0.08309069659371637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030666270667237816, 0.03216507270189417, 0.039163928663087266, 0.027610412289332587, 0.04023639269024115, 0.028274377754061053, 0.0824653916922975, 0.03431882443789014, 0.04218202829806139, 0.30237690165938735, 0.302806264051645, 0.3315136558211461, 0.2833327523616118, 0.28263644739588256, 0.31799807033429084, 0.3029324878354902, 0.3223217998484039, 0.3142616416766588, 0.06459856687502652, 0.09416076285961372, 0.07293258708452122, 0.07245428152804978, 0.07818862699733597, 0.06733248340521714, 0.07475949841416529, 0.08642138498309271, 0.08196410230154905, 0.14753237448085288, 0.17411097165990064, 0.14334500808763928, 0.14732657943564098, 0.17477183001004015, 0.2008101676789431, 0.1394360214929602, 0.1449750553019714, 0.19046893787848607, 0.21627763683116297, 0.1958573464039327, 0.21237270091585558, 0.2164894569411855, 0.22234613095770395, 0.24132966546521029, 0.19965150718028457, 0.22547772115666953, 0.2125631889442876, 0.140083320755631, 0.1530887933978503, 0.15869233090541568, 0.20356704559277683, 0.19300697844931036, 0.18964878288052023, 0.1550933588378397, 0.1390345467760733, 0.1382561994305075, 0.18229996499000023, 0.1795271660550829, 0.19708805507677585, 0.20184137170110694, 0.20015854053293747, 0.22600523780925763, 0.20780029210029083, 0.1872721850974558, 0.2376185854500099, 0.18438133137433688, 0.17608439693430378, 0.18186510924513122, 0.1835146422154479, 0.1860312175241341, 0.17533102746585993, 0.1789275409793598, 0.17569935099964262, 0.17241263005954643, 0.17998718329568697, 0.17999685764521878, 0.17620373462544392, 0.3731823139889697, 0.26524405625444714, 0.20974840584985754, 0.1797470448439833, 0.26644772496295577, 0.35523755821874725, 0.2807986306689111, 0.24323129545337074, 0.2717479641083149, 0.2903139181838056, 0.2309082740151781, 0.19074401811805386, 0.17482547989991837, 0.17502494396270485, 0.17303274914436828, 0.17400928247725622, 0.20668599134128496, 0.16813701977129714, 0.16944660940884748, 0.16854374027374774, 0.16888627221061947, 0.17659959902687228, 0.20318475790350132, 0.18099875527963183, 0.07391298300078031, 0.08395817946108985, 0.07283235147082578, 0.07148176708634768, 0.08206092982064006, 0.07124946215626082, 0.07476705796255212, 0.07281231627855778, 0.06348262769248592]}, "mutation_prompt": null}
{"id": "c71d4e77-78e0-47cd-92f3-ac0dd23992ff", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_c3 - self.min_c3)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "ImprovedAdaptiveMutationDEPSO", "description": "Implementing a novel adaptive inertia weight update strategy based on fitness progress to enhance convergence speed while maintaining diversity.", "configspace": "", "generation": 87, "fitness": 0.1735248546667235, "feedback": "The algorithm ImprovedAdaptiveMutationDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.16.", "error": "", "parent_id": "cb971243-c612-4124-9af4-d6a5121de655", "metadata": {"aucs": [0.3166231802101358, 0.3594642548189999, 0.3450983437185673, 0.2983687097138289, 0.2646982128009129, 0.31977405210523335, 0.3165492452683101, 0.28530822073958184, 0.3068777001175629, 0.02965213342615447, 0.006144044079455679, 0.03546393514245161, 0.06309616226641934, 0.04549767988687259, 0.030983238114971723, 9.999999999998899e-05, 0.032391170765308064, 9.999999999998899e-05, 0.09239181224601234, 0.0947773509166695, 0.08029004104450266, 0.10764844028132703, 0.106524514577228, 0.09123489946791563, 0.09179157020617534, 0.1164340164017329, 0.11268644791104399, 0.07830051343399225, 0.07833580435022869, 0.0831890063849523, 0.09388718311002286, 0.08763586705004967, 0.09906530953751158, 0.09946062736025851, 0.09861702762985936, 0.09615911357052831, 0.5822716602369383, 0.9855700607210752, 0.9925959762717657, 0.5228397069307339, 0.6064152295237327, 0.8600323078833717, 0.9219078747967431, 0.9935669859254488, 0.7411523601369916, 0.18180221286736808, 0.15662981786661279, 0.16307774678726694, 0.16404186471289828, 0.14022339928584393, 0.15016330888997143, 0.17931739111267797, 0.18757818013460037, 0.17984718066429273, 0.2280417544557859, 0.2496963682788107, 0.21002358500154028, 0.20592943984329592, 0.2065258345283134, 0.24529238033242295, 0.19414399092194012, 0.1785856719166431, 0.15913775455622814, 0.18623118373793557, 0.15536051167557619, 0.1855287567155226, 0.07961084770207127, 0.11940033267032757, 0.09001979741456145, 0.11753869507474424, 0.10511776439396436, 0.14755179813528452, 0.19319449954303236, 0.17999550025440092, 0.18659877572464478, 0.1844879124855715, 0.17708549979675503, 0.17156948611928025, 0.22733466141169723, 0.19412024994346477, 0.23158889594505194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018893681962290243, 0.00025037023621787835, 0.012738782614770905, 0.0925026151302254, 0.11270294924999291, 0.10455403084847803, 0.0572640494459119, 0.05716630636835052, 0.06590533626411521, 0.06347846924690914, 0.07728270268170978, 0.11884508859944998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061397302660612385, 0.04742338568071913, 0.028833543846623844, 0.042484916704746634, 0.02766684330048852, 0.05458717411624425, 0.061938744602471174, 0.04156134604912298, 0.031615124506034764, 0.3268431892074486, 0.2973920686218251, 0.3031859504194355, 0.30879391713983395, 0.31588735375871657, 0.3206508719304467, 0.3557668410532264, 0.3058714992943702, 0.34275145628706816, 0.07034813303429144, 0.08414022346523109, 0.06009283342376692, 0.07400322279704474, 0.061200143825276276, 0.0689042678859203, 0.08537386852190443, 0.06742028178256332, 0.07425276168703954, 0.14127345686670156, 0.15239542302893982, 0.17889036632407074, 0.17069683253128587, 0.16480639338782088, 0.17959591801387575, 0.17544873861380417, 0.19498137310992503, 0.21296400733118304, 0.2143371162936082, 0.20629300735299638, 0.20454743106559015, 0.20881194952111914, 0.23387214804610978, 0.22255805310324972, 0.20145074978396538, 0.23154542163866387, 0.2044011875293591, 0.15588736934734426, 0.127264947981799, 0.19242861730171523, 0.17694036888943976, 0.17763518178263515, 0.19999156287309783, 0.16597989182911355, 0.15890401943307497, 0.16081481641079276, 0.18582389072739447, 0.21073455024439092, 0.1935872227220996, 0.2149241502515422, 0.20146210592565517, 0.19113258769386576, 0.1876813251557623, 0.20473345447360392, 0.2102152430192712, 0.1832573475567265, 0.18783892579338324, 0.17726404273608565, 0.17979363234043066, 0.18262391269082234, 0.1831464980839692, 0.18842610865061526, 0.1758507117921847, 0.16873454014903544, 0.1840458254328008, 0.1762219581789477, 0.16697955325855984, 0.26015539421801104, 0.2213710345326726, 0.20085085830172245, 0.2070619355039648, 0.16501091171198645, 0.2390031109817834, 0.2200605301954075, 0.22637469300607904, 0.32324282037310215, 0.329576387968611, 0.17746788829852667, 0.1941158300307957, 0.14355093978951494, 0.1768422275026662, 0.22045214336434704, 0.17929748420071412, 0.17637118181150213, 0.17976399458750825, 0.16873287659556913, 0.17324361275238387, 0.17375390956769332, 0.174952277196192, 0.17891671882584326, 0.1752608331237696, 0.06924241292637068, 0.08060628956849447, 0.06690701642710573, 0.0695957771382053, 0.07091734230323876, 0.07569810977989577, 0.06736705760981587, 0.0685640755314787, 0.0710103057859991]}, "mutation_prompt": null}
{"id": "95366abe-414a-44fb-be60-924a67caf18a", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_c3 - self.min_c3)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "ImprovedAdaptiveMutationDEPSO", "description": "Implementing a novel adaptive inertia weight update strategy based on fitness progress to enhance convergence speed while maintaining diversity.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c71d4e77-78e0-47cd-92f3-ac0dd23992ff", "metadata": {"aucs": [0.3166231802101358, 0.3594642548189999, 0.3450983437185673, 0.2983687097138289, 0.2646982128009129, 0.31977405210523335, 0.3165492452683101, 0.28530822073958184, 0.3068777001175629, 0.02965213342615447, 0.006144044079455679, 0.03546393514245161, 0.06309616226641934, 0.04549767988687259, 0.030983238114971723, 9.999999999998899e-05, 0.032391170765308064, 9.999999999998899e-05, 0.09239181224601234, 0.0947773509166695, 0.08029004104450266, 0.10764844028132703, 0.106524514577228, 0.09123489946791563, 0.09179157020617534, 0.1164340164017329, 0.11268644791104399, 0.07830051343399225, 0.07833580435022869, 0.0831890063849523, 0.09388718311002286, 0.08763586705004967, 0.09906530953751158, 0.09946062736025851, 0.09861702762985936, 0.09615911357052831, 0.5822716602369383, 0.9855700607210752, 0.9925959762717657, 0.5228397069307339, 0.6064152295237327, 0.8600323078833717, 0.9219078747967431, 0.9935669859254488, 0.7411523601369916, 0.18180221286736808, 0.15662981786661279, 0.16307774678726694, 0.16404186471289828, 0.14022339928584393, 0.15016330888997143, 0.17931739111267797, 0.18757818013460037, 0.17984718066429273, 0.2280417544557859, 0.2496963682788107, 0.21002358500154028, 0.20592943984329592, 0.2065258345283134, 0.24529238033242295, 0.19414399092194012, 0.1785856719166431, 0.15913775455622814, 0.18623118373793557, 0.15536051167557619, 0.1855287567155226, 0.07961084770207127, 0.11940033267032757, 0.09001979741456145, 0.11753869507474424, 0.10511776439396436, 0.14755179813528452, 0.19319449954303236, 0.17999550025440092, 0.18659877572464478, 0.1844879124855715, 0.17708549979675503, 0.17156948611928025, 0.22733466141169723, 0.19412024994346477, 0.23158889594505194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018893681962290243, 0.00025037023621787835, 0.012738782614770905, 0.0925026151302254, 0.11270294924999291, 0.10455403084847803, 0.0572640494459119, 0.05716630636835052, 0.06590533626411521, 0.06347846924690914, 0.07728270268170978, 0.11884508859944998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061397302660612385, 0.04742338568071913, 0.028833543846623844, 0.042484916704746634, 0.02766684330048852, 0.05458717411624425, 0.061938744602471174, 0.04156134604912298, 0.031615124506034764, 0.3268431892074486, 0.2973920686218251, 0.3031859504194355, 0.30879391713983395, 0.31588735375871657, 0.3206508719304467, 0.3557668410532264, 0.3058714992943702, 0.34275145628706816, 0.07034813303429144, 0.08414022346523109, 0.06009283342376692, 0.07400322279704474, 0.061200143825276276, 0.0689042678859203, 0.08537386852190443, 0.06742028178256332, 0.07425276168703954, 0.14127345686670156, 0.15239542302893982, 0.17889036632407074, 0.17069683253128587, 0.16480639338782088, 0.17959591801387575, 0.17544873861380417, 0.19498137310992503, 0.21296400733118304, 0.2143371162936082, 0.20629300735299638, 0.20454743106559015, 0.20881194952111914, 0.23387214804610978, 0.22255805310324972, 0.20145074978396538, 0.23154542163866387, 0.2044011875293591, 0.15588736934734426, 0.127264947981799, 0.19242861730171523, 0.17694036888943976, 0.17763518178263515, 0.19999156287309783, 0.16597989182911355, 0.15890401943307497, 0.16081481641079276, 0.18582389072739447, 0.21073455024439092, 0.1935872227220996, 0.2149241502515422, 0.20146210592565517, 0.19113258769386576, 0.1876813251557623, 0.20473345447360392, 0.2102152430192712, 0.1832573475567265, 0.18783892579338324, 0.17726404273608565, 0.17979363234043066, 0.18262391269082234, 0.1831464980839692, 0.18842610865061526, 0.1758507117921847, 0.16873454014903544, 0.1840458254328008, 0.1762219581789477, 0.16697955325855984, 0.26015539421801104, 0.2213710345326726, 0.20085085830172245, 0.2070619355039648, 0.16501091171198645, 0.2390031109817834, 0.2200605301954075, 0.22637469300607904, 0.32324282037310215, 0.329576387968611, 0.17746788829852667, 0.1941158300307957, 0.14355093978951494, 0.1768422275026662, 0.22045214336434704, 0.17929748420071412, 0.17637118181150213, 0.17976399458750825, 0.16873287659556913, 0.17324361275238387, 0.17375390956769332, 0.174952277196192, 0.17891671882584326, 0.1752608331237696, 0.06924241292637068, 0.08060628956849447, 0.06690701642710573, 0.0695957771382053, 0.07091734230323876, 0.07569810977989577, 0.06736705760981587, 0.0685640755314787, 0.0710103057859991]}, "mutation_prompt": null}
{"id": "86fab1e5-dcfb-4e02-aa1a-6a679bcd1c28", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_c3 - self.min_c3)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "ImprovedAdaptiveMutationDEPSO", "description": "Implementing a novel adaptive inertia weight update strategy based on fitness progress to enhance convergence speed while maintaining diversity.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c71d4e77-78e0-47cd-92f3-ac0dd23992ff", "metadata": {"aucs": [0.3166231802101358, 0.3594642548189999, 0.3450983437185673, 0.2983687097138289, 0.2646982128009129, 0.31977405210523335, 0.3165492452683101, 0.28530822073958184, 0.3068777001175629, 0.02965213342615447, 0.006144044079455679, 0.03546393514245161, 0.06309616226641934, 0.04549767988687259, 0.030983238114971723, 9.999999999998899e-05, 0.032391170765308064, 9.999999999998899e-05, 0.09239181224601234, 0.0947773509166695, 0.08029004104450266, 0.10764844028132703, 0.106524514577228, 0.09123489946791563, 0.09179157020617534, 0.1164340164017329, 0.11268644791104399, 0.07830051343399225, 0.07833580435022869, 0.0831890063849523, 0.09388718311002286, 0.08763586705004967, 0.09906530953751158, 0.09946062736025851, 0.09861702762985936, 0.09615911357052831, 0.5822716602369383, 0.9855700607210752, 0.9925959762717657, 0.5228397069307339, 0.6064152295237327, 0.8600323078833717, 0.9219078747967431, 0.9935669859254488, 0.7411523601369916, 0.18180221286736808, 0.15662981786661279, 0.16307774678726694, 0.16404186471289828, 0.14022339928584393, 0.15016330888997143, 0.17931739111267797, 0.18757818013460037, 0.17984718066429273, 0.2280417544557859, 0.2496963682788107, 0.21002358500154028, 0.20592943984329592, 0.2065258345283134, 0.24529238033242295, 0.19414399092194012, 0.1785856719166431, 0.15913775455622814, 0.18623118373793557, 0.15536051167557619, 0.1855287567155226, 0.07961084770207127, 0.11940033267032757, 0.09001979741456145, 0.11753869507474424, 0.10511776439396436, 0.14755179813528452, 0.19319449954303236, 0.17999550025440092, 0.18659877572464478, 0.1844879124855715, 0.17708549979675503, 0.17156948611928025, 0.22733466141169723, 0.19412024994346477, 0.23158889594505194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018893681962290243, 0.00025037023621787835, 0.012738782614770905, 0.0925026151302254, 0.11270294924999291, 0.10455403084847803, 0.0572640494459119, 0.05716630636835052, 0.06590533626411521, 0.06347846924690914, 0.07728270268170978, 0.11884508859944998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061397302660612385, 0.04742338568071913, 0.028833543846623844, 0.042484916704746634, 0.02766684330048852, 0.05458717411624425, 0.061938744602471174, 0.04156134604912298, 0.031615124506034764, 0.3268431892074486, 0.2973920686218251, 0.3031859504194355, 0.30879391713983395, 0.31588735375871657, 0.3206508719304467, 0.3557668410532264, 0.3058714992943702, 0.34275145628706816, 0.07034813303429144, 0.08414022346523109, 0.06009283342376692, 0.07400322279704474, 0.061200143825276276, 0.0689042678859203, 0.08537386852190443, 0.06742028178256332, 0.07425276168703954, 0.14127345686670156, 0.15239542302893982, 0.17889036632407074, 0.17069683253128587, 0.16480639338782088, 0.17959591801387575, 0.17544873861380417, 0.19498137310992503, 0.21296400733118304, 0.2143371162936082, 0.20629300735299638, 0.20454743106559015, 0.20881194952111914, 0.23387214804610978, 0.22255805310324972, 0.20145074978396538, 0.23154542163866387, 0.2044011875293591, 0.15588736934734426, 0.127264947981799, 0.19242861730171523, 0.17694036888943976, 0.17763518178263515, 0.19999156287309783, 0.16597989182911355, 0.15890401943307497, 0.16081481641079276, 0.18582389072739447, 0.21073455024439092, 0.1935872227220996, 0.2149241502515422, 0.20146210592565517, 0.19113258769386576, 0.1876813251557623, 0.20473345447360392, 0.2102152430192712, 0.1832573475567265, 0.18783892579338324, 0.17726404273608565, 0.17979363234043066, 0.18262391269082234, 0.1831464980839692, 0.18842610865061526, 0.1758507117921847, 0.16873454014903544, 0.1840458254328008, 0.1762219581789477, 0.16697955325855984, 0.26015539421801104, 0.2213710345326726, 0.20085085830172245, 0.2070619355039648, 0.16501091171198645, 0.2390031109817834, 0.2200605301954075, 0.22637469300607904, 0.32324282037310215, 0.329576387968611, 0.17746788829852667, 0.1941158300307957, 0.14355093978951494, 0.1768422275026662, 0.22045214336434704, 0.17929748420071412, 0.17637118181150213, 0.17976399458750825, 0.16873287659556913, 0.17324361275238387, 0.17375390956769332, 0.174952277196192, 0.17891671882584326, 0.1752608331237696, 0.06924241292637068, 0.08060628956849447, 0.06690701642710573, 0.0695957771382053, 0.07091734230323876, 0.07569810977989577, 0.06736705760981587, 0.0685640755314787, 0.0710103057859991]}, "mutation_prompt": null}
{"id": "bea487b1-58c0-46af-b59d-c8c86c880ee0", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_c3 - self.min_c3)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "ImprovedAdaptiveMutationDEPSO", "description": "Implementing a novel adaptive inertia weight update strategy based on fitness progress to enhance convergence speed while maintaining diversity.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c71d4e77-78e0-47cd-92f3-ac0dd23992ff", "metadata": {"aucs": [0.3166231802101358, 0.3594642548189999, 0.3450983437185673, 0.2983687097138289, 0.2646982128009129, 0.31977405210523335, 0.3165492452683101, 0.28530822073958184, 0.3068777001175629, 0.02965213342615447, 0.006144044079455679, 0.03546393514245161, 0.06309616226641934, 0.04549767988687259, 0.030983238114971723, 9.999999999998899e-05, 0.032391170765308064, 9.999999999998899e-05, 0.09239181224601234, 0.0947773509166695, 0.08029004104450266, 0.10764844028132703, 0.106524514577228, 0.09123489946791563, 0.09179157020617534, 0.1164340164017329, 0.11268644791104399, 0.07830051343399225, 0.07833580435022869, 0.0831890063849523, 0.09388718311002286, 0.08763586705004967, 0.09906530953751158, 0.09946062736025851, 0.09861702762985936, 0.09615911357052831, 0.5822716602369383, 0.9855700607210752, 0.9925959762717657, 0.5228397069307339, 0.6064152295237327, 0.8600323078833717, 0.9219078747967431, 0.9935669859254488, 0.7411523601369916, 0.18180221286736808, 0.15662981786661279, 0.16307774678726694, 0.16404186471289828, 0.14022339928584393, 0.15016330888997143, 0.17931739111267797, 0.18757818013460037, 0.17984718066429273, 0.2280417544557859, 0.2496963682788107, 0.21002358500154028, 0.20592943984329592, 0.2065258345283134, 0.24529238033242295, 0.19414399092194012, 0.1785856719166431, 0.15913775455622814, 0.18623118373793557, 0.15536051167557619, 0.1855287567155226, 0.07961084770207127, 0.11940033267032757, 0.09001979741456145, 0.11753869507474424, 0.10511776439396436, 0.14755179813528452, 0.19319449954303236, 0.17999550025440092, 0.18659877572464478, 0.1844879124855715, 0.17708549979675503, 0.17156948611928025, 0.22733466141169723, 0.19412024994346477, 0.23158889594505194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018893681962290243, 0.00025037023621787835, 0.012738782614770905, 0.0925026151302254, 0.11270294924999291, 0.10455403084847803, 0.0572640494459119, 0.05716630636835052, 0.06590533626411521, 0.06347846924690914, 0.07728270268170978, 0.11884508859944998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061397302660612385, 0.04742338568071913, 0.028833543846623844, 0.042484916704746634, 0.02766684330048852, 0.05458717411624425, 0.061938744602471174, 0.04156134604912298, 0.031615124506034764, 0.3268431892074486, 0.2973920686218251, 0.3031859504194355, 0.30879391713983395, 0.31588735375871657, 0.3206508719304467, 0.3557668410532264, 0.3058714992943702, 0.34275145628706816, 0.07034813303429144, 0.08414022346523109, 0.06009283342376692, 0.07400322279704474, 0.061200143825276276, 0.0689042678859203, 0.08537386852190443, 0.06742028178256332, 0.07425276168703954, 0.14127345686670156, 0.15239542302893982, 0.17889036632407074, 0.17069683253128587, 0.16480639338782088, 0.17959591801387575, 0.17544873861380417, 0.19498137310992503, 0.21296400733118304, 0.2143371162936082, 0.20629300735299638, 0.20454743106559015, 0.20881194952111914, 0.23387214804610978, 0.22255805310324972, 0.20145074978396538, 0.23154542163866387, 0.2044011875293591, 0.15588736934734426, 0.127264947981799, 0.19242861730171523, 0.17694036888943976, 0.17763518178263515, 0.19999156287309783, 0.16597989182911355, 0.15890401943307497, 0.16081481641079276, 0.18582389072739447, 0.21073455024439092, 0.1935872227220996, 0.2149241502515422, 0.20146210592565517, 0.19113258769386576, 0.1876813251557623, 0.20473345447360392, 0.2102152430192712, 0.1832573475567265, 0.18783892579338324, 0.17726404273608565, 0.17979363234043066, 0.18262391269082234, 0.1831464980839692, 0.18842610865061526, 0.1758507117921847, 0.16873454014903544, 0.1840458254328008, 0.1762219581789477, 0.16697955325855984, 0.26015539421801104, 0.2213710345326726, 0.20085085830172245, 0.2070619355039648, 0.16501091171198645, 0.2390031109817834, 0.2200605301954075, 0.22637469300607904, 0.32324282037310215, 0.329576387968611, 0.17746788829852667, 0.1941158300307957, 0.14355093978951494, 0.1768422275026662, 0.22045214336434704, 0.17929748420071412, 0.17637118181150213, 0.17976399458750825, 0.16873287659556913, 0.17324361275238387, 0.17375390956769332, 0.174952277196192, 0.17891671882584326, 0.1752608331237696, 0.06924241292637068, 0.08060628956849447, 0.06690701642710573, 0.0695957771382053, 0.07091734230323876, 0.07569810977989577, 0.06736705760981587, 0.0685640755314787, 0.0710103057859991]}, "mutation_prompt": null}
{"id": "5d97af98-b89a-4033-858c-23fb655e7ca0", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_c3 - self.min_c3)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "ImprovedAdaptiveMutationDEPSO", "description": "Implementing a novel adaptive inertia weight update strategy based on fitness progress to enhance convergence speed while maintaining diversity.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c71d4e77-78e0-47cd-92f3-ac0dd23992ff", "metadata": {"aucs": [0.3166231802101358, 0.3594642548189999, 0.3450983437185673, 0.2983687097138289, 0.2646982128009129, 0.31977405210523335, 0.3165492452683101, 0.28530822073958184, 0.3068777001175629, 0.02965213342615447, 0.006144044079455679, 0.03546393514245161, 0.06309616226641934, 0.04549767988687259, 0.030983238114971723, 9.999999999998899e-05, 0.032391170765308064, 9.999999999998899e-05, 0.09239181224601234, 0.0947773509166695, 0.08029004104450266, 0.10764844028132703, 0.106524514577228, 0.09123489946791563, 0.09179157020617534, 0.1164340164017329, 0.11268644791104399, 0.07830051343399225, 0.07833580435022869, 0.0831890063849523, 0.09388718311002286, 0.08763586705004967, 0.09906530953751158, 0.09946062736025851, 0.09861702762985936, 0.09615911357052831, 0.5822716602369383, 0.9855700607210752, 0.9925959762717657, 0.5228397069307339, 0.6064152295237327, 0.8600323078833717, 0.9219078747967431, 0.9935669859254488, 0.7411523601369916, 0.18180221286736808, 0.15662981786661279, 0.16307774678726694, 0.16404186471289828, 0.14022339928584393, 0.15016330888997143, 0.17931739111267797, 0.18757818013460037, 0.17984718066429273, 0.2280417544557859, 0.2496963682788107, 0.21002358500154028, 0.20592943984329592, 0.2065258345283134, 0.24529238033242295, 0.19414399092194012, 0.1785856719166431, 0.15913775455622814, 0.18623118373793557, 0.15536051167557619, 0.1855287567155226, 0.07961084770207127, 0.11940033267032757, 0.09001979741456145, 0.11753869507474424, 0.10511776439396436, 0.14755179813528452, 0.19319449954303236, 0.17999550025440092, 0.18659877572464478, 0.1844879124855715, 0.17708549979675503, 0.17156948611928025, 0.22733466141169723, 0.19412024994346477, 0.23158889594505194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018893681962290243, 0.00025037023621787835, 0.012738782614770905, 0.0925026151302254, 0.11270294924999291, 0.10455403084847803, 0.0572640494459119, 0.05716630636835052, 0.06590533626411521, 0.06347846924690914, 0.07728270268170978, 0.11884508859944998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061397302660612385, 0.04742338568071913, 0.028833543846623844, 0.042484916704746634, 0.02766684330048852, 0.05458717411624425, 0.061938744602471174, 0.04156134604912298, 0.031615124506034764, 0.3268431892074486, 0.2973920686218251, 0.3031859504194355, 0.30879391713983395, 0.31588735375871657, 0.3206508719304467, 0.3557668410532264, 0.3058714992943702, 0.34275145628706816, 0.07034813303429144, 0.08414022346523109, 0.06009283342376692, 0.07400322279704474, 0.061200143825276276, 0.0689042678859203, 0.08537386852190443, 0.06742028178256332, 0.07425276168703954, 0.14127345686670156, 0.15239542302893982, 0.17889036632407074, 0.17069683253128587, 0.16480639338782088, 0.17959591801387575, 0.17544873861380417, 0.19498137310992503, 0.21296400733118304, 0.2143371162936082, 0.20629300735299638, 0.20454743106559015, 0.20881194952111914, 0.23387214804610978, 0.22255805310324972, 0.20145074978396538, 0.23154542163866387, 0.2044011875293591, 0.15588736934734426, 0.127264947981799, 0.19242861730171523, 0.17694036888943976, 0.17763518178263515, 0.19999156287309783, 0.16597989182911355, 0.15890401943307497, 0.16081481641079276, 0.18582389072739447, 0.21073455024439092, 0.1935872227220996, 0.2149241502515422, 0.20146210592565517, 0.19113258769386576, 0.1876813251557623, 0.20473345447360392, 0.2102152430192712, 0.1832573475567265, 0.18783892579338324, 0.17726404273608565, 0.17979363234043066, 0.18262391269082234, 0.1831464980839692, 0.18842610865061526, 0.1758507117921847, 0.16873454014903544, 0.1840458254328008, 0.1762219581789477, 0.16697955325855984, 0.26015539421801104, 0.2213710345326726, 0.20085085830172245, 0.2070619355039648, 0.16501091171198645, 0.2390031109817834, 0.2200605301954075, 0.22637469300607904, 0.32324282037310215, 0.329576387968611, 0.17746788829852667, 0.1941158300307957, 0.14355093978951494, 0.1768422275026662, 0.22045214336434704, 0.17929748420071412, 0.17637118181150213, 0.17976399458750825, 0.16873287659556913, 0.17324361275238387, 0.17375390956769332, 0.174952277196192, 0.17891671882584326, 0.1752608331237696, 0.06924241292637068, 0.08060628956849447, 0.06690701642710573, 0.0695957771382053, 0.07091734230323876, 0.07569810977989577, 0.06736705760981587, 0.0685640755314787, 0.0710103057859991]}, "mutation_prompt": null}
{"id": "97fd3d92-c5a1-4b56-9496-f341d6af6237", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_c3 - self.min_c3)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "ImprovedAdaptiveMutationDEPSO", "description": "Implementing a novel adaptive inertia weight update strategy based on fitness progress to enhance convergence speed while maintaining diversity.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c71d4e77-78e0-47cd-92f3-ac0dd23992ff", "metadata": {"aucs": [0.3166231802101358, 0.3594642548189999, 0.3450983437185673, 0.2983687097138289, 0.2646982128009129, 0.31977405210523335, 0.3165492452683101, 0.28530822073958184, 0.3068777001175629, 0.02965213342615447, 0.006144044079455679, 0.03546393514245161, 0.06309616226641934, 0.04549767988687259, 0.030983238114971723, 9.999999999998899e-05, 0.032391170765308064, 9.999999999998899e-05, 0.09239181224601234, 0.0947773509166695, 0.08029004104450266, 0.10764844028132703, 0.106524514577228, 0.09123489946791563, 0.09179157020617534, 0.1164340164017329, 0.11268644791104399, 0.07830051343399225, 0.07833580435022869, 0.0831890063849523, 0.09388718311002286, 0.08763586705004967, 0.09906530953751158, 0.09946062736025851, 0.09861702762985936, 0.09615911357052831, 0.5822716602369383, 0.9855700607210752, 0.9925959762717657, 0.5228397069307339, 0.6064152295237327, 0.8600323078833717, 0.9219078747967431, 0.9935669859254488, 0.7411523601369916, 0.18180221286736808, 0.15662981786661279, 0.16307774678726694, 0.16404186471289828, 0.14022339928584393, 0.15016330888997143, 0.17931739111267797, 0.18757818013460037, 0.17984718066429273, 0.2280417544557859, 0.2496963682788107, 0.21002358500154028, 0.20592943984329592, 0.2065258345283134, 0.24529238033242295, 0.19414399092194012, 0.1785856719166431, 0.15913775455622814, 0.18623118373793557, 0.15536051167557619, 0.1855287567155226, 0.07961084770207127, 0.11940033267032757, 0.09001979741456145, 0.11753869507474424, 0.10511776439396436, 0.14755179813528452, 0.19319449954303236, 0.17999550025440092, 0.18659877572464478, 0.1844879124855715, 0.17708549979675503, 0.17156948611928025, 0.22733466141169723, 0.19412024994346477, 0.23158889594505194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018893681962290243, 0.00025037023621787835, 0.012738782614770905, 0.0925026151302254, 0.11270294924999291, 0.10455403084847803, 0.0572640494459119, 0.05716630636835052, 0.06590533626411521, 0.06347846924690914, 0.07728270268170978, 0.11884508859944998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061397302660612385, 0.04742338568071913, 0.028833543846623844, 0.042484916704746634, 0.02766684330048852, 0.05458717411624425, 0.061938744602471174, 0.04156134604912298, 0.031615124506034764, 0.3268431892074486, 0.2973920686218251, 0.3031859504194355, 0.30879391713983395, 0.31588735375871657, 0.3206508719304467, 0.3557668410532264, 0.3058714992943702, 0.34275145628706816, 0.07034813303429144, 0.08414022346523109, 0.06009283342376692, 0.07400322279704474, 0.061200143825276276, 0.0689042678859203, 0.08537386852190443, 0.06742028178256332, 0.07425276168703954, 0.14127345686670156, 0.15239542302893982, 0.17889036632407074, 0.17069683253128587, 0.16480639338782088, 0.17959591801387575, 0.17544873861380417, 0.19498137310992503, 0.21296400733118304, 0.2143371162936082, 0.20629300735299638, 0.20454743106559015, 0.20881194952111914, 0.23387214804610978, 0.22255805310324972, 0.20145074978396538, 0.23154542163866387, 0.2044011875293591, 0.15588736934734426, 0.127264947981799, 0.19242861730171523, 0.17694036888943976, 0.17763518178263515, 0.19999156287309783, 0.16597989182911355, 0.15890401943307497, 0.16081481641079276, 0.18582389072739447, 0.21073455024439092, 0.1935872227220996, 0.2149241502515422, 0.20146210592565517, 0.19113258769386576, 0.1876813251557623, 0.20473345447360392, 0.2102152430192712, 0.1832573475567265, 0.18783892579338324, 0.17726404273608565, 0.17979363234043066, 0.18262391269082234, 0.1831464980839692, 0.18842610865061526, 0.1758507117921847, 0.16873454014903544, 0.1840458254328008, 0.1762219581789477, 0.16697955325855984, 0.26015539421801104, 0.2213710345326726, 0.20085085830172245, 0.2070619355039648, 0.16501091171198645, 0.2390031109817834, 0.2200605301954075, 0.22637469300607904, 0.32324282037310215, 0.329576387968611, 0.17746788829852667, 0.1941158300307957, 0.14355093978951494, 0.1768422275026662, 0.22045214336434704, 0.17929748420071412, 0.17637118181150213, 0.17976399458750825, 0.16873287659556913, 0.17324361275238387, 0.17375390956769332, 0.174952277196192, 0.17891671882584326, 0.1752608331237696, 0.06924241292637068, 0.08060628956849447, 0.06690701642710573, 0.0695957771382053, 0.07091734230323876, 0.07569810977989577, 0.06736705760981587, 0.0685640755314787, 0.0710103057859991]}, "mutation_prompt": null}
{"id": "2fcbb0ef-9b5a-40fe-b9ce-bd562a761622", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.8 * (self.max_inertia - self.min_inertia)  # Adjusted exponent to 1.8 for faster convergence\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.8 * (self.max_c3 - self.min_c3)  # Adjusted exponent to 1.8 for faster convergence\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "ImprovedAdaptiveMutationDEPSO", "description": "Improving convergence speed by dynamically adjusting inertia weight and mutation parameters based on the fitness progress of the population.", "configspace": "", "generation": 93, "fitness": 0.17054201763902077, "feedback": "The algorithm ImprovedAdaptiveMutationDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.16.", "error": "", "parent_id": "c71d4e77-78e0-47cd-92f3-ac0dd23992ff", "metadata": {"aucs": [0.35254920232975084, 0.34605658163784925, 0.34333335863693415, 0.25925965887489844, 0.25136574300931613, 0.2808123746445216, 0.3136187220736063, 0.2917061544521966, 0.2876358396825459, 9.999999999998899e-05, 9.999999999998899e-05, 0.006526904277564083, 0.01314080495242631, 0.08628568463343966, 0.05380901124403337, 9.999999999998899e-05, 9.999999999998899e-05, 0.02143297209874162, 0.09538677374699278, 0.09047822866808242, 0.0814845067486385, 0.10890125965890307, 0.087947953378405, 0.1201178877091661, 0.10964183204979494, 0.08941011196697579, 0.08984207804825906, 0.08380472730743438, 0.07073415051466692, 0.08130071203968614, 0.07340110788514809, 0.10109492600323666, 0.08303549635828289, 0.08828832163804146, 0.0955954129325437, 0.07939380982095667, 0.78189249396193, 0.9855701800941353, 0.9925959764938148, 0.244595717545381, 0.6193084750192661, 0.17761973146448506, 0.921911781962804, 0.9935669888733573, 0.7490536726197838, 0.14910635068823597, 0.1567390549140658, 0.16191033075285355, 0.19441436061415762, 0.13681352205477304, 0.15675585199971065, 0.17308653675044627, 0.16615197408451332, 0.17966777903910336, 0.22807056826547545, 0.2065531713459977, 0.21146618806415662, 0.2254553701428632, 0.22388583173184184, 0.21591501057092377, 0.18825788603430083, 0.17225863664109697, 0.2580853060254553, 0.1394897855265681, 0.13226862664294825, 0.21215416336679893, 0.07525374203084556, 0.12217132179636081, 0.09635108866286413, 0.09422356915265151, 0.1153486308789674, 0.13438469838590994, 0.18528368283946361, 0.1867089152726028, 0.20043886304193848, 0.16599850424404505, 0.15428762681989028, 0.16789252300433732, 0.1761530879421478, 0.17340802653706178, 0.20297195476474017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04885821704808713, 0.011654376189849214, 0.01981298317994895, 0.07482933477842812, 0.06324547812524162, 0.06845729966125147, 0.0784347971913969, 0.07183179407369211, 0.057326727702954994, 0.07507459114504877, 0.08712884256992892, 0.0866005320000569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028698836618189838, 0.04492818219397554, 0.041731130674742545, 0.025522909207452926, 0.044766671268353875, 0.03332695602687474, 0.05644982739266635, 0.03158203615050481, 0.03904904302464607, 0.35433129880711656, 0.2878889742162467, 0.30761742971291595, 0.2951474623311563, 0.3166066002786566, 0.29320560561282805, 0.3023230500047219, 0.33644912239026215, 0.31948026744075975, 0.07045523909980589, 0.07035375822756507, 0.07178398361994753, 0.07867912761289386, 0.08814697311516806, 0.09770942522627812, 0.07589192202193795, 0.07358435409947484, 0.0786131743675147, 0.16043398107353857, 0.14438339462013938, 0.18009720255796668, 0.1505317496728179, 0.16459257985896225, 0.14768817323872607, 0.1653200183475465, 0.150242161959258, 0.1637565108485678, 0.1965499749574684, 0.1870211247011241, 0.21475602902345015, 0.23936518016487318, 0.23390378878923934, 0.24586977810342292, 0.19032606205731473, 0.22959346529653157, 0.20301626313234644, 0.14344256670783329, 0.15202652772602798, 0.17001108695907186, 0.1875056944045258, 0.1715659171799735, 0.20941734250958466, 0.15523346228318902, 0.16552537481579277, 0.1540423766521004, 0.1872240741838539, 0.1913817025798379, 0.1962284024969011, 0.19194710248585978, 0.18752207544213462, 0.186866126600582, 0.19112466679726048, 0.2053845268613843, 0.23155351875460228, 0.17582177065396243, 0.17487243801525787, 0.16771954083781293, 0.18490867291976731, 0.18103689980426996, 0.1836123648225484, 0.18291070291803002, 0.1754820122290346, 0.17923001239376157, 0.18484875541157608, 0.17300768275969913, 0.17870683142571064, 0.21471490345994715, 0.28425959509943666, 0.2569036406488896, 0.3998629055433779, 0.40528281764770113, 0.3142612281068058, 0.21158971565397955, 0.20261122513996432, 0.3303074667016763, 0.32834679451858473, 0.1923138296045086, 0.19023874755425174, 0.2827099847019645, 0.1983686747423551, 0.20114826966298538, 0.18338587109094517, 0.18345555588287166, 0.18445976334053915, 0.17592550802511764, 0.19241879310887633, 0.17839782252011882, 0.17940828150832766, 0.1691702607834744, 0.19916479347637195, 0.07018332081059253, 0.07682643170452774, 0.06753917251651476, 0.06990781515603828, 0.07302570886455884, 0.06988370418039047, 0.07703476607627124, 0.07170779032535102, 0.06228478173927632]}, "mutation_prompt": null}
{"id": "feb7b8aa-826e-4f85-aa7b-2d9ac1ebb04e", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_c3 - self.min_c3)\n\n            # Dynamic adaptation based on individual performance\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                self.c1 = np.clip(self.c1 * 1.05, 1.7, 2.0)\n                self.c2 = np.clip(self.c2 * 1.05, 1.7, 2.0)\n                self.cr = np.clip(self.cr + 0.05, 0.8, 1.0)\n            else:\n                self.c1 = np.clip(self.c1 * 0.95, 1.0, 1.7)\n                self.c2 = np.clip(self.c2 * 0.95, 1.0, 1.7)\n                self.cr = np.clip(self.cr - 0.05, 0.6, 0.8)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedDynamicMutationDEPSO", "description": "Implementing a dynamic strategy to adjust mutation and crossover rates based on individual performance for enhanced convergence. ", "configspace": "", "generation": 94, "fitness": 0.10760512530931153, "feedback": "The algorithm EnhancedDynamicMutationDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "c71d4e77-78e0-47cd-92f3-ac0dd23992ff", "metadata": {"aucs": [0.2570912829815468, 0.2743430375696253, 0.3070197983287386, 0.1250658602079735, 0.24911729018226914, 0.20731213265390414, 0.2075987411359812, 0.18157731158398438, 0.20851598642614455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0385383726881291, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059727037570585395, 0.05075275608404095, 0.061810234054752944, 0.050137671536940265, 0.0743638617731136, 0.0642272863179858, 0.07105535643616856, 0.05647719134201035, 0.03976517790480116, 0.08705016286565259, 0.05158766456199171, 0.04787275813255709, 0.07192566734601735, 0.05494435871992975, 0.059218197026961406, 0.016321957831946232, 0.04454202030985965, 0.03518681336883733, 0.13316843681876545, 0.0789469046388045, 0.09199578211222614, 0.07577874142575802, 0.08635037379984933, 0.07511930944169254, 0.07073635356506636, 0.08571560911664022, 0.07699708661416249, 0.040655044179541466, 0.031460487107346835, 0.14668175881163947, 0.03192210688653119, 0.09044160539739354, 0.10017413268885744, 0.08516401279954644, 0.12050575121369278, 0.0501263856316807, 0.15165317819693958, 0.1310965033990178, 0.17185694389136474, 0.17477808755526092, 0.17393528270699532, 0.20258770797374903, 0.09914978586959766, 0.11947434598291273, 0.03853199216454728, 9.999999999998899e-05, 0.0333280880868464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03928778151142065, 0.08743194511969632, 0.04809427631440266, 0.10576823211233444, 0.14487128841495722, 0.08664826457590535, 0.09511952263260426, 0.07607960181327744, 0.16523601422462142, 0.1729195409174803, 0.11877619792487426, 0.2255179410380178, 0.07670602705222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04301039888441027, 0.04040166315809379, 0.09256371762012183, 0.050979516462884344, 0.022609694024559257, 0.04031822207853364, 0.09255605793167776, 0.01868031413640836, 0.03797957463739188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04822566417890173, 9.999999999998899e-05, 9.999999999998899e-05, 0.0045193075080008915, 9.999999999998899e-05, 9.999999999998899e-05, 0.016056498348341997, 9.999999999998899e-05, 9.999999999998899e-05, 0.30573296744706047, 0.348303525406117, 0.24586206574430147, 0.2015005455123191, 0.24442788107042668, 0.2606998803352846, 0.3106827061871458, 0.2280194336735054, 0.2841014704276299, 0.050598814518268975, 0.032457198877762994, 0.034287148029875425, 0.045832664848860394, 0.0372707637340276, 0.06043100240866828, 0.054856799484527485, 0.053314738139728646, 0.05502925555657456, 0.13158624586777745, 0.11808876108394795, 0.12789500979806723, 0.14218322794652827, 0.1248666405251464, 0.1306448674849504, 0.12690967940296283, 0.09359647448930997, 0.10601262590972549, 0.15899907870220398, 0.18605836074478377, 0.17072124203831684, 0.1854920806196526, 0.20405402456962718, 0.21008759395800358, 0.20764427012583198, 0.21463570893125705, 0.18472201146909362, 0.1102454792361981, 0.07642506408519056, 0.10529489538385894, 0.15545760102127082, 0.1715855493405677, 0.1581615646399257, 0.1381004042108709, 0.14299237310725998, 0.11018777353658915, 0.2629866792962007, 0.25943513258266515, 0.25034863024244913, 0.25612401532592566, 0.24499223309093832, 0.2399951475896812, 0.259336990250993, 0.2588312237348507, 0.24890115896494736, 0.157271716473254, 0.1541603507225715, 0.17476684011378418, 0.15567721568137127, 0.16703608402082903, 0.16285558391629007, 0.1567765554258158, 0.16958754833193146, 0.16183153107638626, 0.28156522285605257, 0.11650273225645325, 0.11642469949735312, 0.141808961876564, 0.16916295923943747, 0.16619689554375505, 0.11156311574521838, 0.16529886589264864, 0.16125634534441635, 0.27802818870374, 0.2055308877157912, 0.07315398447451715, 0.16299597517239273, 0.16798332367797497, 0.11434411307578107, 0.10302523743504732, 0.09918665325900167, 0.15088656850555893, 0.18400826620358957, 0.18204669144872743, 0.19944373722849795, 0.15935134491335634, 0.16046006080703168, 0.18277223893145078, 0.17207484344736002, 0.15881909032227048, 0.19837008896898112, 0.05446207753949406, 0.044163488810818996, 0.049788220656189486, 0.050572391166357034, 0.07066873846353261, 0.05683470692111947, 0.06708240974421564, 0.051317447831288665, 0.05314933902339947]}, "mutation_prompt": null}
{"id": "de058d7b-dba2-4c28-8220-1a434ab575e7", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_c3 - self.min_c3)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "ImprovedAdaptiveMutationDEPSO", "description": "Implementing a novel adaptive inertia weight update strategy based on fitness progress to enhance convergence speed while maintaining diversity.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c71d4e77-78e0-47cd-92f3-ac0dd23992ff", "metadata": {"aucs": [0.3166231802101358, 0.3594642548189999, 0.3450983437185673, 0.2983687097138289, 0.2646982128009129, 0.31977405210523335, 0.3165492452683101, 0.28530822073958184, 0.3068777001175629, 0.02965213342615447, 0.006144044079455679, 0.03546393514245161, 0.06309616226641934, 0.04549767988687259, 0.030983238114971723, 9.999999999998899e-05, 0.032391170765308064, 9.999999999998899e-05, 0.09239181224601234, 0.0947773509166695, 0.08029004104450266, 0.10764844028132703, 0.106524514577228, 0.09123489946791563, 0.09179157020617534, 0.1164340164017329, 0.11268644791104399, 0.07830051343399225, 0.07833580435022869, 0.0831890063849523, 0.09388718311002286, 0.08763586705004967, 0.09906530953751158, 0.09946062736025851, 0.09861702762985936, 0.09615911357052831, 0.5822716602369383, 0.9855700607210752, 0.9925959762717657, 0.5228397069307339, 0.6064152295237327, 0.8600323078833717, 0.9219078747967431, 0.9935669859254488, 0.7411523601369916, 0.18180221286736808, 0.15662981786661279, 0.16307774678726694, 0.16404186471289828, 0.14022339928584393, 0.15016330888997143, 0.17931739111267797, 0.18757818013460037, 0.17984718066429273, 0.2280417544557859, 0.2496963682788107, 0.21002358500154028, 0.20592943984329592, 0.2065258345283134, 0.24529238033242295, 0.19414399092194012, 0.1785856719166431, 0.15913775455622814, 0.18623118373793557, 0.15536051167557619, 0.1855287567155226, 0.07961084770207127, 0.11940033267032757, 0.09001979741456145, 0.11753869507474424, 0.10511776439396436, 0.14755179813528452, 0.19319449954303236, 0.17999550025440092, 0.18659877572464478, 0.1844879124855715, 0.17708549979675503, 0.17156948611928025, 0.22733466141169723, 0.19412024994346477, 0.23158889594505194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018893681962290243, 0.00025037023621787835, 0.012738782614770905, 0.0925026151302254, 0.11270294924999291, 0.10455403084847803, 0.0572640494459119, 0.05716630636835052, 0.06590533626411521, 0.06347846924690914, 0.07728270268170978, 0.11884508859944998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061397302660612385, 0.04742338568071913, 0.028833543846623844, 0.042484916704746634, 0.02766684330048852, 0.05458717411624425, 0.061938744602471174, 0.04156134604912298, 0.031615124506034764, 0.3268431892074486, 0.2973920686218251, 0.3031859504194355, 0.30879391713983395, 0.31588735375871657, 0.3206508719304467, 0.3557668410532264, 0.3058714992943702, 0.34275145628706816, 0.07034813303429144, 0.08414022346523109, 0.06009283342376692, 0.07400322279704474, 0.061200143825276276, 0.0689042678859203, 0.08537386852190443, 0.06742028178256332, 0.07425276168703954, 0.14127345686670156, 0.15239542302893982, 0.17889036632407074, 0.17069683253128587, 0.16480639338782088, 0.17959591801387575, 0.17544873861380417, 0.19498137310992503, 0.21296400733118304, 0.2143371162936082, 0.20629300735299638, 0.20454743106559015, 0.20881194952111914, 0.23387214804610978, 0.22255805310324972, 0.20145074978396538, 0.23154542163866387, 0.2044011875293591, 0.15588736934734426, 0.127264947981799, 0.19242861730171523, 0.17694036888943976, 0.17763518178263515, 0.19999156287309783, 0.16597989182911355, 0.15890401943307497, 0.16081481641079276, 0.18582389072739447, 0.21073455024439092, 0.1935872227220996, 0.2149241502515422, 0.20146210592565517, 0.19113258769386576, 0.1876813251557623, 0.20473345447360392, 0.2102152430192712, 0.1832573475567265, 0.18783892579338324, 0.17726404273608565, 0.17979363234043066, 0.18262391269082234, 0.1831464980839692, 0.18842610865061526, 0.1758507117921847, 0.16873454014903544, 0.1840458254328008, 0.1762219581789477, 0.16697955325855984, 0.26015539421801104, 0.2213710345326726, 0.20085085830172245, 0.2070619355039648, 0.16501091171198645, 0.2390031109817834, 0.2200605301954075, 0.22637469300607904, 0.32324282037310215, 0.329576387968611, 0.17746788829852667, 0.1941158300307957, 0.14355093978951494, 0.1768422275026662, 0.22045214336434704, 0.17929748420071412, 0.17637118181150213, 0.17976399458750825, 0.16873287659556913, 0.17324361275238387, 0.17375390956769332, 0.174952277196192, 0.17891671882584326, 0.1752608331237696, 0.06924241292637068, 0.08060628956849447, 0.06690701642710573, 0.0695957771382053, 0.07091734230323876, 0.07569810977989577, 0.06736705760981587, 0.0685640755314787, 0.0710103057859991]}, "mutation_prompt": null}
{"id": "0acd8087-9540-44bb-aaa8-82577155707b", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_c3 - self.min_c3)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "ImprovedAdaptiveMutationDEPSO", "description": "Implementing a novel adaptive inertia weight update strategy based on fitness progress to enhance convergence speed while maintaining diversity.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c71d4e77-78e0-47cd-92f3-ac0dd23992ff", "metadata": {"aucs": [0.3166231802101358, 0.3594642548189999, 0.3450983437185673, 0.2983687097138289, 0.2646982128009129, 0.31977405210523335, 0.3165492452683101, 0.28530822073958184, 0.3068777001175629, 0.02965213342615447, 0.006144044079455679, 0.03546393514245161, 0.06309616226641934, 0.04549767988687259, 0.030983238114971723, 9.999999999998899e-05, 0.032391170765308064, 9.999999999998899e-05, 0.09239181224601234, 0.0947773509166695, 0.08029004104450266, 0.10764844028132703, 0.106524514577228, 0.09123489946791563, 0.09179157020617534, 0.1164340164017329, 0.11268644791104399, 0.07830051343399225, 0.07833580435022869, 0.0831890063849523, 0.09388718311002286, 0.08763586705004967, 0.09906530953751158, 0.09946062736025851, 0.09861702762985936, 0.09615911357052831, 0.5822716602369383, 0.9855700607210752, 0.9925959762717657, 0.5228397069307339, 0.6064152295237327, 0.8600323078833717, 0.9219078747967431, 0.9935669859254488, 0.7411523601369916, 0.18180221286736808, 0.15662981786661279, 0.16307774678726694, 0.16404186471289828, 0.14022339928584393, 0.15016330888997143, 0.17931739111267797, 0.18757818013460037, 0.17984718066429273, 0.2280417544557859, 0.2496963682788107, 0.21002358500154028, 0.20592943984329592, 0.2065258345283134, 0.24529238033242295, 0.19414399092194012, 0.1785856719166431, 0.15913775455622814, 0.18623118373793557, 0.15536051167557619, 0.1855287567155226, 0.07961084770207127, 0.11940033267032757, 0.09001979741456145, 0.11753869507474424, 0.10511776439396436, 0.14755179813528452, 0.19319449954303236, 0.17999550025440092, 0.18659877572464478, 0.1844879124855715, 0.17708549979675503, 0.17156948611928025, 0.22733466141169723, 0.19412024994346477, 0.23158889594505194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018893681962290243, 0.00025037023621787835, 0.012738782614770905, 0.0925026151302254, 0.11270294924999291, 0.10455403084847803, 0.0572640494459119, 0.05716630636835052, 0.06590533626411521, 0.06347846924690914, 0.07728270268170978, 0.11884508859944998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061397302660612385, 0.04742338568071913, 0.028833543846623844, 0.042484916704746634, 0.02766684330048852, 0.05458717411624425, 0.061938744602471174, 0.04156134604912298, 0.031615124506034764, 0.3268431892074486, 0.2973920686218251, 0.3031859504194355, 0.30879391713983395, 0.31588735375871657, 0.3206508719304467, 0.3557668410532264, 0.3058714992943702, 0.34275145628706816, 0.07034813303429144, 0.08414022346523109, 0.06009283342376692, 0.07400322279704474, 0.061200143825276276, 0.0689042678859203, 0.08537386852190443, 0.06742028178256332, 0.07425276168703954, 0.14127345686670156, 0.15239542302893982, 0.17889036632407074, 0.17069683253128587, 0.16480639338782088, 0.17959591801387575, 0.17544873861380417, 0.19498137310992503, 0.21296400733118304, 0.2143371162936082, 0.20629300735299638, 0.20454743106559015, 0.20881194952111914, 0.23387214804610978, 0.22255805310324972, 0.20145074978396538, 0.23154542163866387, 0.2044011875293591, 0.15588736934734426, 0.127264947981799, 0.19242861730171523, 0.17694036888943976, 0.17763518178263515, 0.19999156287309783, 0.16597989182911355, 0.15890401943307497, 0.16081481641079276, 0.18582389072739447, 0.21073455024439092, 0.1935872227220996, 0.2149241502515422, 0.20146210592565517, 0.19113258769386576, 0.1876813251557623, 0.20473345447360392, 0.2102152430192712, 0.1832573475567265, 0.18783892579338324, 0.17726404273608565, 0.17979363234043066, 0.18262391269082234, 0.1831464980839692, 0.18842610865061526, 0.1758507117921847, 0.16873454014903544, 0.1840458254328008, 0.1762219581789477, 0.16697955325855984, 0.26015539421801104, 0.2213710345326726, 0.20085085830172245, 0.2070619355039648, 0.16501091171198645, 0.2390031109817834, 0.2200605301954075, 0.22637469300607904, 0.32324282037310215, 0.329576387968611, 0.17746788829852667, 0.1941158300307957, 0.14355093978951494, 0.1768422275026662, 0.22045214336434704, 0.17929748420071412, 0.17637118181150213, 0.17976399458750825, 0.16873287659556913, 0.17324361275238387, 0.17375390956769332, 0.174952277196192, 0.17891671882584326, 0.1752608331237696, 0.06924241292637068, 0.08060628956849447, 0.06690701642710573, 0.0695957771382053, 0.07091734230323876, 0.07569810977989577, 0.06736705760981587, 0.0685640755314787, 0.0710103057859991]}, "mutation_prompt": null}
{"id": "f164ff7f-256e-4036-8e0e-6727ffdb9962", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            v = np.where(np.random.rand(self.dim) < np.clip(0.9 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.9), v, gbest)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.7 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.7 * (self.max_c3 - self.min_c3)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "EnhancedAdaptiveMutationDEPSO", "description": "Enhancing convergence speed by adaptively adjusting mutation control parameters based on population diversity and fitness progress.", "configspace": "", "generation": 97, "fitness": 0.1690000785953376, "feedback": "The algorithm EnhancedAdaptiveMutationDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.15.", "error": "", "parent_id": "c71d4e77-78e0-47cd-92f3-ac0dd23992ff", "metadata": {"aucs": [0.2906145357045823, 0.31450485356622515, 0.39244676010903545, 0.26570300939991187, 0.28548886089095304, 0.27462629513132963, 0.3035198097493226, 0.3421875208502595, 0.3308962443030766, 9.999999999998899e-05, 9.999999999998899e-05, 0.0711967389401661, 0.04691012505451131, 0.0442078411475928, 0.05432811308499108, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10830440657491747, 0.11000416793763956, 0.09020004578230889, 0.09622406723536392, 0.09447390251413723, 0.08440871546931306, 0.10402251134268703, 0.09652121973983052, 0.10343283032613759, 0.08777676730953554, 0.09007141358123993, 0.07441083744950483, 0.08251566614031036, 0.07311642263777651, 0.10265776717506303, 0.07777354443942586, 0.08968519529945718, 0.08845931392525486, 0.24781734278737255, 0.9855701360405746, 0.9925959764168598, 0.8078087215144252, 0.49586045156720593, 0.6388247966631373, 0.7171769488717643, 0.9935669878920969, 0.6598977582879606, 0.15259955506457623, 0.17004202659480327, 0.161769897281701, 0.17462918734927857, 0.14730366773482761, 0.17708636187760018, 0.1671985866608222, 0.15641157322006694, 0.17012283577232612, 0.17131877201826462, 0.2010744716590076, 0.2094381793531671, 0.22036796127274816, 0.24852370389480372, 0.1912121088875539, 0.22784122250615935, 0.22970849919456438, 0.19894755669482533, 0.1665967682505286, 0.1578488668712662, 0.15190703383432158, 0.15772539458196988, 0.11191573947603706, 0.08846667951902876, 0.10362423089835826, 0.10006735034987835, 0.11910155729670391, 0.1550484616811032, 0.17499722041357857, 0.1757928761170373, 0.1840328357839649, 0.1841260520004917, 0.18132977683255125, 0.18080871356748307, 0.18244302409276325, 0.21807169165079976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007043094979000686, 0.0004061972942074332, 9.999999999998899e-05, 0.08033489648313097, 0.05391399168068578, 0.07884470814691358, 0.04376471354098954, 0.05891942454426824, 0.05950277379812963, 0.07761399159568938, 0.08373655806046432, 0.12005026121007445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02689202092224441, 0.06216445807768656, 0.029220988712967078, 0.04090550243649482, 0.03529850526769496, 0.03436873752936931, 0.039617312728093546, 0.04652319772469293, 0.03280390445923986, 0.333652145186916, 0.30485417957851346, 0.2956355791684927, 0.2975306726192968, 0.29281971651017014, 0.2946723054134752, 0.31892458947130364, 0.30002973409559186, 0.3101694663521183, 0.06528028173560252, 0.0786447803328032, 0.06516927140420337, 0.07448415884455406, 0.07561731908200986, 0.08666006436270524, 0.06710913966533316, 0.06401756846808382, 0.07578438714026248, 0.16778090960975534, 0.1411992813298799, 0.18045598620232317, 0.15043633394242661, 0.15301934651580973, 0.14322544195037246, 0.13826147532670452, 0.15561059714208736, 0.14495888651817646, 0.20404907455928423, 0.17518092892700066, 0.1812715309714974, 0.2356701767655599, 0.21837346396545776, 0.24343499997829188, 0.200081996352521, 0.23106299384738183, 0.20105006640573542, 0.1314121701432619, 0.15012799770656238, 0.15071027190370334, 0.17435673980007627, 0.1598551570906258, 0.17965868061361556, 0.15489237448261917, 0.15018607340366763, 0.13790372651477556, 0.18517025691566802, 0.20544478580643977, 0.20602047818834324, 0.19413714516561542, 0.20531650529056622, 0.20954979034282128, 0.19563820281948197, 0.1909557554621759, 0.2004239494310508, 0.17194255404876313, 0.1753511607309729, 0.17229554688283222, 0.17256633790886566, 0.18446331362058022, 0.17725541136321954, 0.1813280426574745, 0.1776317959435184, 0.18999748248338466, 0.1805653774922963, 0.16734832411672285, 0.17583436530132657, 0.2176800149622804, 0.3023101748783651, 0.26801074449715, 0.2813756828751022, 0.30090869671431697, 0.353265623261816, 0.31182117158077516, 0.22398021333857454, 0.3266591970175464, 0.3443429478148927, 0.21482475969511194, 0.18268043844003046, 0.22501270752154812, 0.1653354464684429, 0.16442423602948109, 0.16462297077924637, 0.191425453683311, 0.17154859474754425, 0.1896852782733316, 0.19738824740982408, 0.17123891442265537, 0.1757060309596027, 0.1895939132288983, 0.18033785566946514, 0.06771359537539923, 0.07450696476042307, 0.059523701133557316, 0.06989124042536699, 0.06930298179840177, 0.0796958169378944, 0.06562963696959889, 0.0617453046209433, 0.07397549462904207]}, "mutation_prompt": null}
{"id": "00d919a2-bb9f-483f-9a33-b5701f306540", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.2 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_c3 - self.min_c3)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "ImprovedAdaptiveMutationDEPSO", "description": "Implementing a novel adaptive inertia weight update strategy based on fitness progress to enhance convergence speed while maintaining diversity.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c71d4e77-78e0-47cd-92f3-ac0dd23992ff", "metadata": {"aucs": [0.3166231802101358, 0.3594642548189999, 0.3450983437185673, 0.2983687097138289, 0.2646982128009129, 0.31977405210523335, 0.3165492452683101, 0.28530822073958184, 0.3068777001175629, 0.02965213342615447, 0.006144044079455679, 0.03546393514245161, 0.06309616226641934, 0.04549767988687259, 0.030983238114971723, 9.999999999998899e-05, 0.032391170765308064, 9.999999999998899e-05, 0.09239181224601234, 0.0947773509166695, 0.08029004104450266, 0.10764844028132703, 0.106524514577228, 0.09123489946791563, 0.09179157020617534, 0.1164340164017329, 0.11268644791104399, 0.07830051343399225, 0.07833580435022869, 0.0831890063849523, 0.09388718311002286, 0.08763586705004967, 0.09906530953751158, 0.09946062736025851, 0.09861702762985936, 0.09615911357052831, 0.5822716602369383, 0.9855700607210752, 0.9925959762717657, 0.5228397069307339, 0.6064152295237327, 0.8600323078833717, 0.9219078747967431, 0.9935669859254488, 0.7411523601369916, 0.18180221286736808, 0.15662981786661279, 0.16307774678726694, 0.16404186471289828, 0.14022339928584393, 0.15016330888997143, 0.17931739111267797, 0.18757818013460037, 0.17984718066429273, 0.2280417544557859, 0.2496963682788107, 0.21002358500154028, 0.20592943984329592, 0.2065258345283134, 0.24529238033242295, 0.19414399092194012, 0.1785856719166431, 0.15913775455622814, 0.18623118373793557, 0.15536051167557619, 0.1855287567155226, 0.07961084770207127, 0.11940033267032757, 0.09001979741456145, 0.11753869507474424, 0.10511776439396436, 0.14755179813528452, 0.19319449954303236, 0.17999550025440092, 0.18659877572464478, 0.1844879124855715, 0.17708549979675503, 0.17156948611928025, 0.22733466141169723, 0.19412024994346477, 0.23158889594505194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018893681962290243, 0.00025037023621787835, 0.012738782614770905, 0.0925026151302254, 0.11270294924999291, 0.10455403084847803, 0.0572640494459119, 0.05716630636835052, 0.06590533626411521, 0.06347846924690914, 0.07728270268170978, 0.11884508859944998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061397302660612385, 0.04742338568071913, 0.028833543846623844, 0.042484916704746634, 0.02766684330048852, 0.05458717411624425, 0.061938744602471174, 0.04156134604912298, 0.031615124506034764, 0.3268431892074486, 0.2973920686218251, 0.3031859504194355, 0.30879391713983395, 0.31588735375871657, 0.3206508719304467, 0.3557668410532264, 0.3058714992943702, 0.34275145628706816, 0.07034813303429144, 0.08414022346523109, 0.06009283342376692, 0.07400322279704474, 0.061200143825276276, 0.0689042678859203, 0.08537386852190443, 0.06742028178256332, 0.07425276168703954, 0.14127345686670156, 0.15239542302893982, 0.17889036632407074, 0.17069683253128587, 0.16480639338782088, 0.17959591801387575, 0.17544873861380417, 0.19498137310992503, 0.21296400733118304, 0.2143371162936082, 0.20629300735299638, 0.20454743106559015, 0.20881194952111914, 0.23387214804610978, 0.22255805310324972, 0.20145074978396538, 0.23154542163866387, 0.2044011875293591, 0.15588736934734426, 0.127264947981799, 0.19242861730171523, 0.17694036888943976, 0.17763518178263515, 0.19999156287309783, 0.16597989182911355, 0.15890401943307497, 0.16081481641079276, 0.18582389072739447, 0.21073455024439092, 0.1935872227220996, 0.2149241502515422, 0.20146210592565517, 0.19113258769386576, 0.1876813251557623, 0.20473345447360392, 0.2102152430192712, 0.1832573475567265, 0.18783892579338324, 0.17726404273608565, 0.17979363234043066, 0.18262391269082234, 0.1831464980839692, 0.18842610865061526, 0.1758507117921847, 0.16873454014903544, 0.1840458254328008, 0.1762219581789477, 0.16697955325855984, 0.26015539421801104, 0.2213710345326726, 0.20085085830172245, 0.2070619355039648, 0.16501091171198645, 0.2390031109817834, 0.2200605301954075, 0.22637469300607904, 0.32324282037310215, 0.329576387968611, 0.17746788829852667, 0.1941158300307957, 0.14355093978951494, 0.1768422275026662, 0.22045214336434704, 0.17929748420071412, 0.17637118181150213, 0.17976399458750825, 0.16873287659556913, 0.17324361275238387, 0.17375390956769332, 0.174952277196192, 0.17891671882584326, 0.1752608331237696, 0.06924241292637068, 0.08060628956849447, 0.06690701642710573, 0.0695957771382053, 0.07091734230323876, 0.07569810977989577, 0.06736705760981587, 0.0685640755314787, 0.0710103057859991]}, "mutation_prompt": null}
{"id": "1f5457bf-f0c0-41c2-ba01-2e2bd47d42cf", "solution": "# import numpy as np\n\nclass ImprovedAdaptiveMutationDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.min_c3 = 0.1\n        self.max_c3 = 0.5\n        self.cr = 0.8\n        self.f = 0.5\n        self.lb = -5.0 * np.ones(dim)\n        self.ub = 5.0 * np.ones(dim)\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        population = create_population()\n        fitness_values = np.array([objective_function(individual) for individual in population])\n        best_index = np.argmin(fitness_values)\n        best_individual = population[best_index]\n        gbest = best_individual.copy()\n        inertia_weight = self.max_inertia\n        c3 = self.max_c3\n\n        for _ in range(self.budget - self.population_size):\n            r1, r2, r3 = np.random.randint(0, self.population_size, 3)\n            xr1 = population[r1]\n            xr2 = population[r2]\n            xr3 = population[r3]\n\n            mutant = within_bounds(xr1 + self.f * (xr2 - xr3))\n\n            trial = np.where(np.random.rand(self.dim) < self.cr, mutant, population[_ % self.population_size])\n\n            v = inertia_weight * population[_ % self.population_size] + self.c1 * np.random.rand(self.dim) * (gbest - population[_ % self.population_size]) + self.c2 * np.random.rand(self.dim) * (trial - population[_ % self.population_size])\n\n            v = np.where(np.random.rand(self.dim) < np.clip(0.8 - 0.3 * (fitness_values[_ % self.population_size] - fitness_values[best_index]), 0.6, 0.8), v, gbest)\n\n            self.f = np.clip(self.f + np.random.normal(0.0, c3 * 0.95), 0.1, 0.9)\n\n            population[_ % self.population_size] = within_bounds(v)\n\n            fitness_values[_ % self.population_size] = objective_function(population[_ % self.population_size])\n\n            if fitness_values[_ % self.population_size] < fitness_values[best_index]:\n                best_index = _ % self.population_size\n                best_individual = population[best_index]\n\n            if fitness_values[_ % self.population_size] < objective_function(gbest):\n                gbest = population[_ % self.population_size]\n\n            inertia_weight = self.max_inertia - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_inertia - self.min_inertia)\n            c3 = self.max_c3 - (self.iteration_count / (self.budget - self.population_size))**1.6 * (self.max_c3 - self.min_c3)\n\n            self.iteration_count += 1\n\n        return objective_function(gbest)", "name": "ImprovedAdaptiveMutationDEPSO", "description": "Employing a dynamic mutation strategy based on fitness diversity to enhance population exploration and convergence speed.", "configspace": "", "generation": 99, "fitness": 0.1741434189896148, "feedback": "The algorithm ImprovedAdaptiveMutationDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.16.", "error": "", "parent_id": "c71d4e77-78e0-47cd-92f3-ac0dd23992ff", "metadata": {"aucs": [0.3088681151123721, 0.33371188677255703, 0.3535348681080118, 0.2735628283778939, 0.27958544241623573, 0.2902703289007823, 0.34611424166069626, 0.28398379661666306, 0.367819066911111, 0.02965213342615447, 0.007069386106547615, 0.03546393514245161, 0.06309616226641934, 0.04549767988687259, 0.0253809942282347, 9.999999999998899e-05, 0.032391170765308064, 9.999999999998899e-05, 0.11285905515748818, 0.08919802180724434, 0.08387265427144086, 0.11159710118053734, 0.106524514577228, 0.09004347206775798, 0.10109665136073875, 0.1164340164017329, 0.10687517951958725, 0.077474254337769, 0.07362076529560213, 0.0831890063849523, 0.09763282336497325, 0.08407776088064589, 0.13148364314018712, 0.09950450212802975, 0.09819394938542103, 0.09615911357052831, 0.5552500400189906, 0.9855700607210752, 0.9925959762717657, 0.42465692611709405, 0.8798283170805449, 0.7369728914127183, 0.9219078747967431, 0.9935669859254488, 0.5341127313062656, 0.147769869451002, 0.15662981786661279, 0.1617867264484214, 0.16671062491741395, 0.1409373745346738, 0.1604152797453009, 0.20114673843396125, 0.14235600017805994, 0.1788536797915844, 0.2280417544557859, 0.17542440837101037, 0.19497769828603873, 0.22211837330604411, 0.20128875609840458, 0.20658263059525772, 0.2511825996872149, 0.20492535989822158, 0.17678610801710803, 0.19878582234829156, 0.13452040027929013, 0.20220317271207877, 0.07961084770207127, 0.11940033267032757, 0.09001979741456145, 0.11753869507474424, 0.10511776439396436, 0.1503085992239137, 0.19318991608595615, 0.155763933077539, 0.1873300608769667, 0.17184076338790655, 0.1792907975888013, 0.17140187627691705, 0.22127368980476325, 0.17923078864273811, 0.24529842073669883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018893681962290243, 0.00025037023621787835, 0.012738782614770905, 0.0925026151302254, 0.11270294924999291, 0.10428170774796397, 0.0572640494459119, 0.05716630636835052, 0.06590533626411521, 0.064791042392768, 0.07721529696076179, 0.11884508859944998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061397302660612385, 0.03962526013253753, 0.028833543846623844, 0.042484916704746634, 0.03964177922283818, 0.03705859470546169, 0.061938744602471174, 0.04156134604912298, 0.031615124506034764, 0.3059385791707362, 0.3266508100154403, 0.38262944522003306, 0.2849306839406992, 0.29118236266739106, 0.3148674791387389, 0.3694620905814191, 0.3127329914435871, 0.35889791997375564, 0.07034813303429144, 0.08414022346523109, 0.061916860645522265, 0.07400322279704474, 0.06672670001957359, 0.07753989971496644, 0.07276153113707329, 0.088735257989491, 0.06979678448947402, 0.1592432557781136, 0.15239542302893982, 0.17889036632407074, 0.14012920188328337, 0.19287629929151073, 0.16842888603156025, 0.17544873861380417, 0.19498137310992503, 0.21226839440556455, 0.19906500536035998, 0.2169324275707103, 0.18326293462615495, 0.2554370020105845, 0.24804600084106965, 0.23426821602224623, 0.21318703841076692, 0.23299073973837836, 0.20557872310809988, 0.152655678097382, 0.14029672274734328, 0.19242861730171523, 0.19594661189854046, 0.1790325401126851, 0.1861043011776352, 0.16669790346504865, 0.14671832805306773, 0.15372452601536057, 0.20011151360279122, 0.19186676402221214, 0.19062576226027272, 0.20151353209121592, 0.1873422565134687, 0.19714111739293927, 0.19529919509421467, 0.19321770170037278, 0.20360561963544543, 0.17004565977337893, 0.19598561953145488, 0.18877878458998865, 0.1795748458701948, 0.18579197679177595, 0.19015710310233336, 0.19096133353698208, 0.17734933666387864, 0.17720734699355112, 0.1822560976974762, 0.17477448633592396, 0.17833772477214116, 0.17535450281541687, 0.2082514571000601, 0.29741333137810677, 0.2853474843415591, 0.17074148923908872, 0.293917035839926, 0.19255255549514438, 0.2640262721603899, 0.3231875163686808, 0.3164591565491919, 0.23734710186927144, 0.18763312540240284, 0.18000079435585448, 0.1395517605245803, 0.20030051113660063, 0.18755832854517807, 0.1895607811973451, 0.18142921883470275, 0.17577501990200595, 0.17372054961041417, 0.17243105881340215, 0.17674347870598306, 0.17891671882584326, 0.17548034602939455, 0.07799067497458123, 0.08363248279084967, 0.06835751742209217, 0.06679723559633188, 0.0681336147512398, 0.07569810977989577, 0.06518234485524987, 0.06893235034915124, 0.06554092479271623]}, "mutation_prompt": null}
