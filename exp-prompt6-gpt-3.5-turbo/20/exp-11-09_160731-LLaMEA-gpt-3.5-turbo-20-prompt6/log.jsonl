{"id": "062a6874-54c3-477e-9fd1-e25e4e29a88c", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n\n        return g_best", "name": "DEPSO", "description": "An Evolutionary Algorithm based on a Hybrid of Differential Evolution (DE) and Particle Swarm Optimization (PSO) for Black Box Optimization in Continuous Search Spaces.", "configspace": "", "generation": 0, "fitness": 0.26094135065967544, "feedback": "The algorithm DEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.26.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8237029129180384, 0.81993562304579, 0.8646729878112017, 0.8398657159281666, 0.7973956103713009, 0.8373065925369356, 0.8101844530770932, 0.83781302904997, 0.8610709343514519, 0.603828159042453, 0.4677229597489201, 0.5037297512331438, 0.5753805853922371, 0.41316674867047043, 0.6866243224646917, 0.05402822015212372, 0.5775242984762752, 0.6441455952928946, 0.0489721246400332, 0.07365681254405843, 0.06781114061078974, 0.12473618555871346, 0.07045736788632162, 0.07534183428568964, 0.07805660746230914, 0.11250033399631898, 0.10600698053579949, 0.09508075261162263, 0.10615899547919128, 0.055232576844835735, 0.09424430144562279, 0.025721143169110117, 0.03886331484514527, 0.04102166425648024, 0.11261535771995823, 0.06323368058177148, 0.9916378194466307, 0.9877834962384225, 0.9954404951180206, 0.9857739545555091, 0.9807567903958835, 0.9777172912285211, 0.9702546686252207, 0.9901492689072653, 0.982037273650429, 0.2265148370126001, 0.12500786288663712, 0.3652286757952463, 0.228589227962246, 0.40649380724638273, 0.15173839694894709, 0.2528771210599452, 0.30685426579049535, 0.25215570476159477, 0.15639900703199872, 0.09315357824351433, 0.12970474237919516, 0.2568717002922072, 0.15396107456367003, 0.14503344487950032, 0.14961281571526885, 0.13267833621937497, 0.07354577235421289, 0.2967189499749415, 0.11892197049778575, 0.12541474608838088, 0.19234867318681548, 0.3477085557258347, 0.5308886337071754, 0.3698218700167143, 0.12717468430275258, 0.18875543900824387, 0.2506630134762734, 0.197977716822078, 0.17482134572216512, 0.3625830302585836, 0.16708321915275215, 0.1309642779126141, 0.34068144481654294, 0.12709586614967028, 0.330876193441895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035646716353782137, 9.999999999998899e-05, 0.00917038374706225, 0.07723271497375994, 0.16129453416650064, 0.034322786042237374, 0.08451862037899172, 0.0873116552542268, 0.08693008011158054, 0.06677335018164687, 0.007316251342026403, 0.03166823138008801, 0.13988987589600332, 0.056094037416744125, 0.06585240548281601, 0.0809605576029595, 0.11501302126999513, 0.21786775484088183, 0.3369233309137539, 0.10534858601802155, 0.07616058037556162, 0.1763287533061706, 0.07750485432586407, 0.06971483116541588, 0.24632172704447397, 0.19325969677191346, 0.25362673830939386, 0.0058602016820284986, 0.10943090094670116, 0.07169634256245827, 0.13919762740180142, 0.10663412282236517, 0.07924400486764138, 0.6381534683813823, 0.5844302565105965, 0.578024248054542, 0.5503484782617913, 0.5542226084810085, 0.543377581498727, 0.635536190576624, 0.5929005886926848, 0.5013021547407763, 0.10895650005572044, 0.0697588889038625, 0.04373282123942901, 0.07001854903532767, 0.06687616918593653, 0.10564881066350573, 0.04621643886076887, 0.08637142787947871, 0.08065784607909521, 0.11605396888452868, 0.20392003269455838, 0.209867966870684, 0.16157310985292805, 0.1703210198617795, 0.12553968106333524, 0.167441948772453, 0.14872800785744478, 0.1669948913282131, 0.1619680262430636, 0.19790779205890208, 0.2757674938481799, 0.21852366032303605, 0.27751984459832524, 0.19414347954240363, 0.21202449297814618, 0.22338368879965742, 0.21184204234502568, 0.12704119566372007, 0.24713685139835195, 0.14242255621699118, 0.24533053718207454, 0.23408940454415428, 0.1515597321324762, 0.15754926120129475, 0.2795139374901374, 0.14514900185741475, 0.19544598061746388, 0.16053910074232958, 0.14868338094400335, 0.19558926110398633, 0.1508126546063211, 0.18890709485951807, 0.20918506695309458, 0.1357855338951447, 0.21048794833401618, 0.18239633745587003, 0.17979684735311163, 0.17198993067437063, 0.21426498888080892, 0.18998902405470952, 0.17578874483072593, 0.17663080227392491, 0.1861634661122693, 0.1987424370397517, 0.9027476513645158, 0.12560133742528012, 0.15333307483552128, 0.8705734627672612, 0.20016677891902868, 0.19740165576703994, 0.09974905158007163, 0.16824530356454037, 0.843565346431238, 0.811508501002877, 0.15589635716083572, 0.11171932931312345, 0.10336867177323639, 0.1678452686521691, 0.2037982975494177, 0.10373644272587934, 0.10480767232565191, 0.7523731418836328, 0.1754417999006057, 0.1993026981242746, 0.18155991608773492, 0.22910263926572083, 0.15381731750910133, 0.2201850784985433, 0.1979768053567058, 0.17448360815169528, 0.19229509677709333, 0.06349876252027242, 0.0485701443387776, 0.06694026768499539, 0.056527149096035956, 0.07016198526821993, 0.07052916483340654, 0.10446416551496152, 0.07210955169536226, 0.07916902953956051]}, "mutation_prompt": null}
{"id": "76ff390d-b45c-4a85-bb62-088d7f4b2f8a", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n\n        return g_best", "name": "DEPSO", "description": "An Evolutionary Algorithm based on a Hybrid of Differential Evolution (DE) and Particle Swarm Optimization (PSO) for Black Box Optimization in Continuous Search Spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "062a6874-54c3-477e-9fd1-e25e4e29a88c", "metadata": {"aucs": [0.8237029129180384, 0.81993562304579, 0.8646729878112017, 0.8398657159281666, 0.7973956103713009, 0.8373065925369356, 0.8101844530770932, 0.83781302904997, 0.8610709343514519, 0.603828159042453, 0.4677229597489201, 0.5037297512331438, 0.5753805853922371, 0.41316674867047043, 0.6866243224646917, 0.05402822015212372, 0.5775242984762752, 0.6441455952928946, 0.0489721246400332, 0.07365681254405843, 0.06781114061078974, 0.12473618555871346, 0.07045736788632162, 0.07534183428568964, 0.07805660746230914, 0.11250033399631898, 0.10600698053579949, 0.09508075261162263, 0.10615899547919128, 0.055232576844835735, 0.09424430144562279, 0.025721143169110117, 0.03886331484514527, 0.04102166425648024, 0.11261535771995823, 0.06323368058177148, 0.9916378194466307, 0.9877834962384225, 0.9954404951180206, 0.9857739545555091, 0.9807567903958835, 0.9777172912285211, 0.9702546686252207, 0.9901492689072653, 0.982037273650429, 0.2265148370126001, 0.12500786288663712, 0.3652286757952463, 0.228589227962246, 0.40649380724638273, 0.15173839694894709, 0.2528771210599452, 0.30685426579049535, 0.25215570476159477, 0.15639900703199872, 0.09315357824351433, 0.12970474237919516, 0.2568717002922072, 0.15396107456367003, 0.14503344487950032, 0.14961281571526885, 0.13267833621937497, 0.07354577235421289, 0.2967189499749415, 0.11892197049778575, 0.12541474608838088, 0.19234867318681548, 0.3477085557258347, 0.5308886337071754, 0.3698218700167143, 0.12717468430275258, 0.18875543900824387, 0.2506630134762734, 0.197977716822078, 0.17482134572216512, 0.3625830302585836, 0.16708321915275215, 0.1309642779126141, 0.34068144481654294, 0.12709586614967028, 0.330876193441895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035646716353782137, 9.999999999998899e-05, 0.00917038374706225, 0.07723271497375994, 0.16129453416650064, 0.034322786042237374, 0.08451862037899172, 0.0873116552542268, 0.08693008011158054, 0.06677335018164687, 0.007316251342026403, 0.03166823138008801, 0.13988987589600332, 0.056094037416744125, 0.06585240548281601, 0.0809605576029595, 0.11501302126999513, 0.21786775484088183, 0.3369233309137539, 0.10534858601802155, 0.07616058037556162, 0.1763287533061706, 0.07750485432586407, 0.06971483116541588, 0.24632172704447397, 0.19325969677191346, 0.25362673830939386, 0.0058602016820284986, 0.10943090094670116, 0.07169634256245827, 0.13919762740180142, 0.10663412282236517, 0.07924400486764138, 0.6381534683813823, 0.5844302565105965, 0.578024248054542, 0.5503484782617913, 0.5542226084810085, 0.543377581498727, 0.635536190576624, 0.5929005886926848, 0.5013021547407763, 0.10895650005572044, 0.0697588889038625, 0.04373282123942901, 0.07001854903532767, 0.06687616918593653, 0.10564881066350573, 0.04621643886076887, 0.08637142787947871, 0.08065784607909521, 0.11605396888452868, 0.20392003269455838, 0.209867966870684, 0.16157310985292805, 0.1703210198617795, 0.12553968106333524, 0.167441948772453, 0.14872800785744478, 0.1669948913282131, 0.1619680262430636, 0.19790779205890208, 0.2757674938481799, 0.21852366032303605, 0.27751984459832524, 0.19414347954240363, 0.21202449297814618, 0.22338368879965742, 0.21184204234502568, 0.12704119566372007, 0.24713685139835195, 0.14242255621699118, 0.24533053718207454, 0.23408940454415428, 0.1515597321324762, 0.15754926120129475, 0.2795139374901374, 0.14514900185741475, 0.19544598061746388, 0.16053910074232958, 0.14868338094400335, 0.19558926110398633, 0.1508126546063211, 0.18890709485951807, 0.20918506695309458, 0.1357855338951447, 0.21048794833401618, 0.18239633745587003, 0.17979684735311163, 0.17198993067437063, 0.21426498888080892, 0.18998902405470952, 0.17578874483072593, 0.17663080227392491, 0.1861634661122693, 0.1987424370397517, 0.9027476513645158, 0.12560133742528012, 0.15333307483552128, 0.8705734627672612, 0.20016677891902868, 0.19740165576703994, 0.09974905158007163, 0.16824530356454037, 0.843565346431238, 0.811508501002877, 0.15589635716083572, 0.11171932931312345, 0.10336867177323639, 0.1678452686521691, 0.2037982975494177, 0.10373644272587934, 0.10480767232565191, 0.7523731418836328, 0.1754417999006057, 0.1993026981242746, 0.18155991608773492, 0.22910263926572083, 0.15381731750910133, 0.2201850784985433, 0.1979768053567058, 0.17448360815169528, 0.19229509677709333, 0.06349876252027242, 0.0485701443387776, 0.06694026768499539, 0.056527149096035956, 0.07016198526821993, 0.07052916483340654, 0.10446416551496152, 0.07210955169536226, 0.07916902953956051]}, "mutation_prompt": null}
{"id": "c70c450f-edd4-4612-9014-b90f2809f017", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n\n        return g_best", "name": "DEPSO", "description": "An Evolutionary Algorithm based on a Hybrid of Differential Evolution (DE) and Particle Swarm Optimization (PSO) for Black Box Optimization in Continuous Search Spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "062a6874-54c3-477e-9fd1-e25e4e29a88c", "metadata": {"aucs": [0.8237029129180384, 0.81993562304579, 0.8646729878112017, 0.8398657159281666, 0.7973956103713009, 0.8373065925369356, 0.8101844530770932, 0.83781302904997, 0.8610709343514519, 0.603828159042453, 0.4677229597489201, 0.5037297512331438, 0.5753805853922371, 0.41316674867047043, 0.6866243224646917, 0.05402822015212372, 0.5775242984762752, 0.6441455952928946, 0.0489721246400332, 0.07365681254405843, 0.06781114061078974, 0.12473618555871346, 0.07045736788632162, 0.07534183428568964, 0.07805660746230914, 0.11250033399631898, 0.10600698053579949, 0.09508075261162263, 0.10615899547919128, 0.055232576844835735, 0.09424430144562279, 0.025721143169110117, 0.03886331484514527, 0.04102166425648024, 0.11261535771995823, 0.06323368058177148, 0.9916378194466307, 0.9877834962384225, 0.9954404951180206, 0.9857739545555091, 0.9807567903958835, 0.9777172912285211, 0.9702546686252207, 0.9901492689072653, 0.982037273650429, 0.2265148370126001, 0.12500786288663712, 0.3652286757952463, 0.228589227962246, 0.40649380724638273, 0.15173839694894709, 0.2528771210599452, 0.30685426579049535, 0.25215570476159477, 0.15639900703199872, 0.09315357824351433, 0.12970474237919516, 0.2568717002922072, 0.15396107456367003, 0.14503344487950032, 0.14961281571526885, 0.13267833621937497, 0.07354577235421289, 0.2967189499749415, 0.11892197049778575, 0.12541474608838088, 0.19234867318681548, 0.3477085557258347, 0.5308886337071754, 0.3698218700167143, 0.12717468430275258, 0.18875543900824387, 0.2506630134762734, 0.197977716822078, 0.17482134572216512, 0.3625830302585836, 0.16708321915275215, 0.1309642779126141, 0.34068144481654294, 0.12709586614967028, 0.330876193441895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035646716353782137, 9.999999999998899e-05, 0.00917038374706225, 0.07723271497375994, 0.16129453416650064, 0.034322786042237374, 0.08451862037899172, 0.0873116552542268, 0.08693008011158054, 0.06677335018164687, 0.007316251342026403, 0.03166823138008801, 0.13988987589600332, 0.056094037416744125, 0.06585240548281601, 0.0809605576029595, 0.11501302126999513, 0.21786775484088183, 0.3369233309137539, 0.10534858601802155, 0.07616058037556162, 0.1763287533061706, 0.07750485432586407, 0.06971483116541588, 0.24632172704447397, 0.19325969677191346, 0.25362673830939386, 0.0058602016820284986, 0.10943090094670116, 0.07169634256245827, 0.13919762740180142, 0.10663412282236517, 0.07924400486764138, 0.6381534683813823, 0.5844302565105965, 0.578024248054542, 0.5503484782617913, 0.5542226084810085, 0.543377581498727, 0.635536190576624, 0.5929005886926848, 0.5013021547407763, 0.10895650005572044, 0.0697588889038625, 0.04373282123942901, 0.07001854903532767, 0.06687616918593653, 0.10564881066350573, 0.04621643886076887, 0.08637142787947871, 0.08065784607909521, 0.11605396888452868, 0.20392003269455838, 0.209867966870684, 0.16157310985292805, 0.1703210198617795, 0.12553968106333524, 0.167441948772453, 0.14872800785744478, 0.1669948913282131, 0.1619680262430636, 0.19790779205890208, 0.2757674938481799, 0.21852366032303605, 0.27751984459832524, 0.19414347954240363, 0.21202449297814618, 0.22338368879965742, 0.21184204234502568, 0.12704119566372007, 0.24713685139835195, 0.14242255621699118, 0.24533053718207454, 0.23408940454415428, 0.1515597321324762, 0.15754926120129475, 0.2795139374901374, 0.14514900185741475, 0.19544598061746388, 0.16053910074232958, 0.14868338094400335, 0.19558926110398633, 0.1508126546063211, 0.18890709485951807, 0.20918506695309458, 0.1357855338951447, 0.21048794833401618, 0.18239633745587003, 0.17979684735311163, 0.17198993067437063, 0.21426498888080892, 0.18998902405470952, 0.17578874483072593, 0.17663080227392491, 0.1861634661122693, 0.1987424370397517, 0.9027476513645158, 0.12560133742528012, 0.15333307483552128, 0.8705734627672612, 0.20016677891902868, 0.19740165576703994, 0.09974905158007163, 0.16824530356454037, 0.843565346431238, 0.811508501002877, 0.15589635716083572, 0.11171932931312345, 0.10336867177323639, 0.1678452686521691, 0.2037982975494177, 0.10373644272587934, 0.10480767232565191, 0.7523731418836328, 0.1754417999006057, 0.1993026981242746, 0.18155991608773492, 0.22910263926572083, 0.15381731750910133, 0.2201850784985433, 0.1979768053567058, 0.17448360815169528, 0.19229509677709333, 0.06349876252027242, 0.0485701443387776, 0.06694026768499539, 0.056527149096035956, 0.07016198526821993, 0.07052916483340654, 0.10446416551496152, 0.07210955169536226, 0.07916902953956051]}, "mutation_prompt": null}
{"id": "1e392ba4-7a38-4f68-983b-7240a0d0741a", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n\n        return g_best", "name": "DEPSO", "description": "An Evolutionary Algorithm based on a Hybrid of Differential Evolution (DE) and Particle Swarm Optimization (PSO) for Black Box Optimization in Continuous Search Spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "062a6874-54c3-477e-9fd1-e25e4e29a88c", "metadata": {"aucs": [0.8237029129180384, 0.81993562304579, 0.8646729878112017, 0.8398657159281666, 0.7973956103713009, 0.8373065925369356, 0.8101844530770932, 0.83781302904997, 0.8610709343514519, 0.603828159042453, 0.4677229597489201, 0.5037297512331438, 0.5753805853922371, 0.41316674867047043, 0.6866243224646917, 0.05402822015212372, 0.5775242984762752, 0.6441455952928946, 0.0489721246400332, 0.07365681254405843, 0.06781114061078974, 0.12473618555871346, 0.07045736788632162, 0.07534183428568964, 0.07805660746230914, 0.11250033399631898, 0.10600698053579949, 0.09508075261162263, 0.10615899547919128, 0.055232576844835735, 0.09424430144562279, 0.025721143169110117, 0.03886331484514527, 0.04102166425648024, 0.11261535771995823, 0.06323368058177148, 0.9916378194466307, 0.9877834962384225, 0.9954404951180206, 0.9857739545555091, 0.9807567903958835, 0.9777172912285211, 0.9702546686252207, 0.9901492689072653, 0.982037273650429, 0.2265148370126001, 0.12500786288663712, 0.3652286757952463, 0.228589227962246, 0.40649380724638273, 0.15173839694894709, 0.2528771210599452, 0.30685426579049535, 0.25215570476159477, 0.15639900703199872, 0.09315357824351433, 0.12970474237919516, 0.2568717002922072, 0.15396107456367003, 0.14503344487950032, 0.14961281571526885, 0.13267833621937497, 0.07354577235421289, 0.2967189499749415, 0.11892197049778575, 0.12541474608838088, 0.19234867318681548, 0.3477085557258347, 0.5308886337071754, 0.3698218700167143, 0.12717468430275258, 0.18875543900824387, 0.2506630134762734, 0.197977716822078, 0.17482134572216512, 0.3625830302585836, 0.16708321915275215, 0.1309642779126141, 0.34068144481654294, 0.12709586614967028, 0.330876193441895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035646716353782137, 9.999999999998899e-05, 0.00917038374706225, 0.07723271497375994, 0.16129453416650064, 0.034322786042237374, 0.08451862037899172, 0.0873116552542268, 0.08693008011158054, 0.06677335018164687, 0.007316251342026403, 0.03166823138008801, 0.13988987589600332, 0.056094037416744125, 0.06585240548281601, 0.0809605576029595, 0.11501302126999513, 0.21786775484088183, 0.3369233309137539, 0.10534858601802155, 0.07616058037556162, 0.1763287533061706, 0.07750485432586407, 0.06971483116541588, 0.24632172704447397, 0.19325969677191346, 0.25362673830939386, 0.0058602016820284986, 0.10943090094670116, 0.07169634256245827, 0.13919762740180142, 0.10663412282236517, 0.07924400486764138, 0.6381534683813823, 0.5844302565105965, 0.578024248054542, 0.5503484782617913, 0.5542226084810085, 0.543377581498727, 0.635536190576624, 0.5929005886926848, 0.5013021547407763, 0.10895650005572044, 0.0697588889038625, 0.04373282123942901, 0.07001854903532767, 0.06687616918593653, 0.10564881066350573, 0.04621643886076887, 0.08637142787947871, 0.08065784607909521, 0.11605396888452868, 0.20392003269455838, 0.209867966870684, 0.16157310985292805, 0.1703210198617795, 0.12553968106333524, 0.167441948772453, 0.14872800785744478, 0.1669948913282131, 0.1619680262430636, 0.19790779205890208, 0.2757674938481799, 0.21852366032303605, 0.27751984459832524, 0.19414347954240363, 0.21202449297814618, 0.22338368879965742, 0.21184204234502568, 0.12704119566372007, 0.24713685139835195, 0.14242255621699118, 0.24533053718207454, 0.23408940454415428, 0.1515597321324762, 0.15754926120129475, 0.2795139374901374, 0.14514900185741475, 0.19544598061746388, 0.16053910074232958, 0.14868338094400335, 0.19558926110398633, 0.1508126546063211, 0.18890709485951807, 0.20918506695309458, 0.1357855338951447, 0.21048794833401618, 0.18239633745587003, 0.17979684735311163, 0.17198993067437063, 0.21426498888080892, 0.18998902405470952, 0.17578874483072593, 0.17663080227392491, 0.1861634661122693, 0.1987424370397517, 0.9027476513645158, 0.12560133742528012, 0.15333307483552128, 0.8705734627672612, 0.20016677891902868, 0.19740165576703994, 0.09974905158007163, 0.16824530356454037, 0.843565346431238, 0.811508501002877, 0.15589635716083572, 0.11171932931312345, 0.10336867177323639, 0.1678452686521691, 0.2037982975494177, 0.10373644272587934, 0.10480767232565191, 0.7523731418836328, 0.1754417999006057, 0.1993026981242746, 0.18155991608773492, 0.22910263926572083, 0.15381731750910133, 0.2201850784985433, 0.1979768053567058, 0.17448360815169528, 0.19229509677709333, 0.06349876252027242, 0.0485701443387776, 0.06694026768499539, 0.056527149096035956, 0.07016198526821993, 0.07052916483340654, 0.10446416551496152, 0.07210955169536226, 0.07916902953956051]}, "mutation_prompt": null}
{"id": "05667989-dd3b-4212-a1c4-45d7b21c037d", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n\n        return g_best", "name": "DEPSO", "description": "An Evolutionary Algorithm based on a Hybrid of Differential Evolution (DE) and Particle Swarm Optimization (PSO) for Black Box Optimization in Continuous Search Spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "062a6874-54c3-477e-9fd1-e25e4e29a88c", "metadata": {"aucs": [0.8237029129180384, 0.81993562304579, 0.8646729878112017, 0.8398657159281666, 0.7973956103713009, 0.8373065925369356, 0.8101844530770932, 0.83781302904997, 0.8610709343514519, 0.603828159042453, 0.4677229597489201, 0.5037297512331438, 0.5753805853922371, 0.41316674867047043, 0.6866243224646917, 0.05402822015212372, 0.5775242984762752, 0.6441455952928946, 0.0489721246400332, 0.07365681254405843, 0.06781114061078974, 0.12473618555871346, 0.07045736788632162, 0.07534183428568964, 0.07805660746230914, 0.11250033399631898, 0.10600698053579949, 0.09508075261162263, 0.10615899547919128, 0.055232576844835735, 0.09424430144562279, 0.025721143169110117, 0.03886331484514527, 0.04102166425648024, 0.11261535771995823, 0.06323368058177148, 0.9916378194466307, 0.9877834962384225, 0.9954404951180206, 0.9857739545555091, 0.9807567903958835, 0.9777172912285211, 0.9702546686252207, 0.9901492689072653, 0.982037273650429, 0.2265148370126001, 0.12500786288663712, 0.3652286757952463, 0.228589227962246, 0.40649380724638273, 0.15173839694894709, 0.2528771210599452, 0.30685426579049535, 0.25215570476159477, 0.15639900703199872, 0.09315357824351433, 0.12970474237919516, 0.2568717002922072, 0.15396107456367003, 0.14503344487950032, 0.14961281571526885, 0.13267833621937497, 0.07354577235421289, 0.2967189499749415, 0.11892197049778575, 0.12541474608838088, 0.19234867318681548, 0.3477085557258347, 0.5308886337071754, 0.3698218700167143, 0.12717468430275258, 0.18875543900824387, 0.2506630134762734, 0.197977716822078, 0.17482134572216512, 0.3625830302585836, 0.16708321915275215, 0.1309642779126141, 0.34068144481654294, 0.12709586614967028, 0.330876193441895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035646716353782137, 9.999999999998899e-05, 0.00917038374706225, 0.07723271497375994, 0.16129453416650064, 0.034322786042237374, 0.08451862037899172, 0.0873116552542268, 0.08693008011158054, 0.06677335018164687, 0.007316251342026403, 0.03166823138008801, 0.13988987589600332, 0.056094037416744125, 0.06585240548281601, 0.0809605576029595, 0.11501302126999513, 0.21786775484088183, 0.3369233309137539, 0.10534858601802155, 0.07616058037556162, 0.1763287533061706, 0.07750485432586407, 0.06971483116541588, 0.24632172704447397, 0.19325969677191346, 0.25362673830939386, 0.0058602016820284986, 0.10943090094670116, 0.07169634256245827, 0.13919762740180142, 0.10663412282236517, 0.07924400486764138, 0.6381534683813823, 0.5844302565105965, 0.578024248054542, 0.5503484782617913, 0.5542226084810085, 0.543377581498727, 0.635536190576624, 0.5929005886926848, 0.5013021547407763, 0.10895650005572044, 0.0697588889038625, 0.04373282123942901, 0.07001854903532767, 0.06687616918593653, 0.10564881066350573, 0.04621643886076887, 0.08637142787947871, 0.08065784607909521, 0.11605396888452868, 0.20392003269455838, 0.209867966870684, 0.16157310985292805, 0.1703210198617795, 0.12553968106333524, 0.167441948772453, 0.14872800785744478, 0.1669948913282131, 0.1619680262430636, 0.19790779205890208, 0.2757674938481799, 0.21852366032303605, 0.27751984459832524, 0.19414347954240363, 0.21202449297814618, 0.22338368879965742, 0.21184204234502568, 0.12704119566372007, 0.24713685139835195, 0.14242255621699118, 0.24533053718207454, 0.23408940454415428, 0.1515597321324762, 0.15754926120129475, 0.2795139374901374, 0.14514900185741475, 0.19544598061746388, 0.16053910074232958, 0.14868338094400335, 0.19558926110398633, 0.1508126546063211, 0.18890709485951807, 0.20918506695309458, 0.1357855338951447, 0.21048794833401618, 0.18239633745587003, 0.17979684735311163, 0.17198993067437063, 0.21426498888080892, 0.18998902405470952, 0.17578874483072593, 0.17663080227392491, 0.1861634661122693, 0.1987424370397517, 0.9027476513645158, 0.12560133742528012, 0.15333307483552128, 0.8705734627672612, 0.20016677891902868, 0.19740165576703994, 0.09974905158007163, 0.16824530356454037, 0.843565346431238, 0.811508501002877, 0.15589635716083572, 0.11171932931312345, 0.10336867177323639, 0.1678452686521691, 0.2037982975494177, 0.10373644272587934, 0.10480767232565191, 0.7523731418836328, 0.1754417999006057, 0.1993026981242746, 0.18155991608773492, 0.22910263926572083, 0.15381731750910133, 0.2201850784985433, 0.1979768053567058, 0.17448360815169528, 0.19229509677709333, 0.06349876252027242, 0.0485701443387776, 0.06694026768499539, 0.056527149096035956, 0.07016198526821993, 0.07052916483340654, 0.10446416551496152, 0.07210955169536226, 0.07916902953956051]}, "mutation_prompt": null}
{"id": "cef24048-22d6-4b7c-acff-b51200e6f914", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n\n        return g_best", "name": "DEPSO", "description": "An Evolutionary Algorithm based on a Hybrid of Differential Evolution (DE) and Particle Swarm Optimization (PSO) for Black Box Optimization in Continuous Search Spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "062a6874-54c3-477e-9fd1-e25e4e29a88c", "metadata": {"aucs": [0.8237029129180384, 0.81993562304579, 0.8646729878112017, 0.8398657159281666, 0.7973956103713009, 0.8373065925369356, 0.8101844530770932, 0.83781302904997, 0.8610709343514519, 0.603828159042453, 0.4677229597489201, 0.5037297512331438, 0.5753805853922371, 0.41316674867047043, 0.6866243224646917, 0.05402822015212372, 0.5775242984762752, 0.6441455952928946, 0.0489721246400332, 0.07365681254405843, 0.06781114061078974, 0.12473618555871346, 0.07045736788632162, 0.07534183428568964, 0.07805660746230914, 0.11250033399631898, 0.10600698053579949, 0.09508075261162263, 0.10615899547919128, 0.055232576844835735, 0.09424430144562279, 0.025721143169110117, 0.03886331484514527, 0.04102166425648024, 0.11261535771995823, 0.06323368058177148, 0.9916378194466307, 0.9877834962384225, 0.9954404951180206, 0.9857739545555091, 0.9807567903958835, 0.9777172912285211, 0.9702546686252207, 0.9901492689072653, 0.982037273650429, 0.2265148370126001, 0.12500786288663712, 0.3652286757952463, 0.228589227962246, 0.40649380724638273, 0.15173839694894709, 0.2528771210599452, 0.30685426579049535, 0.25215570476159477, 0.15639900703199872, 0.09315357824351433, 0.12970474237919516, 0.2568717002922072, 0.15396107456367003, 0.14503344487950032, 0.14961281571526885, 0.13267833621937497, 0.07354577235421289, 0.2967189499749415, 0.11892197049778575, 0.12541474608838088, 0.19234867318681548, 0.3477085557258347, 0.5308886337071754, 0.3698218700167143, 0.12717468430275258, 0.18875543900824387, 0.2506630134762734, 0.197977716822078, 0.17482134572216512, 0.3625830302585836, 0.16708321915275215, 0.1309642779126141, 0.34068144481654294, 0.12709586614967028, 0.330876193441895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035646716353782137, 9.999999999998899e-05, 0.00917038374706225, 0.07723271497375994, 0.16129453416650064, 0.034322786042237374, 0.08451862037899172, 0.0873116552542268, 0.08693008011158054, 0.06677335018164687, 0.007316251342026403, 0.03166823138008801, 0.13988987589600332, 0.056094037416744125, 0.06585240548281601, 0.0809605576029595, 0.11501302126999513, 0.21786775484088183, 0.3369233309137539, 0.10534858601802155, 0.07616058037556162, 0.1763287533061706, 0.07750485432586407, 0.06971483116541588, 0.24632172704447397, 0.19325969677191346, 0.25362673830939386, 0.0058602016820284986, 0.10943090094670116, 0.07169634256245827, 0.13919762740180142, 0.10663412282236517, 0.07924400486764138, 0.6381534683813823, 0.5844302565105965, 0.578024248054542, 0.5503484782617913, 0.5542226084810085, 0.543377581498727, 0.635536190576624, 0.5929005886926848, 0.5013021547407763, 0.10895650005572044, 0.0697588889038625, 0.04373282123942901, 0.07001854903532767, 0.06687616918593653, 0.10564881066350573, 0.04621643886076887, 0.08637142787947871, 0.08065784607909521, 0.11605396888452868, 0.20392003269455838, 0.209867966870684, 0.16157310985292805, 0.1703210198617795, 0.12553968106333524, 0.167441948772453, 0.14872800785744478, 0.1669948913282131, 0.1619680262430636, 0.19790779205890208, 0.2757674938481799, 0.21852366032303605, 0.27751984459832524, 0.19414347954240363, 0.21202449297814618, 0.22338368879965742, 0.21184204234502568, 0.12704119566372007, 0.24713685139835195, 0.14242255621699118, 0.24533053718207454, 0.23408940454415428, 0.1515597321324762, 0.15754926120129475, 0.2795139374901374, 0.14514900185741475, 0.19544598061746388, 0.16053910074232958, 0.14868338094400335, 0.19558926110398633, 0.1508126546063211, 0.18890709485951807, 0.20918506695309458, 0.1357855338951447, 0.21048794833401618, 0.18239633745587003, 0.17979684735311163, 0.17198993067437063, 0.21426498888080892, 0.18998902405470952, 0.17578874483072593, 0.17663080227392491, 0.1861634661122693, 0.1987424370397517, 0.9027476513645158, 0.12560133742528012, 0.15333307483552128, 0.8705734627672612, 0.20016677891902868, 0.19740165576703994, 0.09974905158007163, 0.16824530356454037, 0.843565346431238, 0.811508501002877, 0.15589635716083572, 0.11171932931312345, 0.10336867177323639, 0.1678452686521691, 0.2037982975494177, 0.10373644272587934, 0.10480767232565191, 0.7523731418836328, 0.1754417999006057, 0.1993026981242746, 0.18155991608773492, 0.22910263926572083, 0.15381731750910133, 0.2201850784985433, 0.1979768053567058, 0.17448360815169528, 0.19229509677709333, 0.06349876252027242, 0.0485701443387776, 0.06694026768499539, 0.056527149096035956, 0.07016198526821993, 0.07052916483340654, 0.10446416551496152, 0.07210955169536226, 0.07916902953956051]}, "mutation_prompt": null}
{"id": "84083848-7152-4d54-9c43-5ae619ea648b", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n\n        return g_best", "name": "DEPSO", "description": "An Evolutionary Algorithm based on a Hybrid of Differential Evolution (DE) and Particle Swarm Optimization (PSO) for Black Box Optimization in Continuous Search Spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "062a6874-54c3-477e-9fd1-e25e4e29a88c", "metadata": {"aucs": [0.8237029129180384, 0.81993562304579, 0.8646729878112017, 0.8398657159281666, 0.7973956103713009, 0.8373065925369356, 0.8101844530770932, 0.83781302904997, 0.8610709343514519, 0.603828159042453, 0.4677229597489201, 0.5037297512331438, 0.5753805853922371, 0.41316674867047043, 0.6866243224646917, 0.05402822015212372, 0.5775242984762752, 0.6441455952928946, 0.0489721246400332, 0.07365681254405843, 0.06781114061078974, 0.12473618555871346, 0.07045736788632162, 0.07534183428568964, 0.07805660746230914, 0.11250033399631898, 0.10600698053579949, 0.09508075261162263, 0.10615899547919128, 0.055232576844835735, 0.09424430144562279, 0.025721143169110117, 0.03886331484514527, 0.04102166425648024, 0.11261535771995823, 0.06323368058177148, 0.9916378194466307, 0.9877834962384225, 0.9954404951180206, 0.9857739545555091, 0.9807567903958835, 0.9777172912285211, 0.9702546686252207, 0.9901492689072653, 0.982037273650429, 0.2265148370126001, 0.12500786288663712, 0.3652286757952463, 0.228589227962246, 0.40649380724638273, 0.15173839694894709, 0.2528771210599452, 0.30685426579049535, 0.25215570476159477, 0.15639900703199872, 0.09315357824351433, 0.12970474237919516, 0.2568717002922072, 0.15396107456367003, 0.14503344487950032, 0.14961281571526885, 0.13267833621937497, 0.07354577235421289, 0.2967189499749415, 0.11892197049778575, 0.12541474608838088, 0.19234867318681548, 0.3477085557258347, 0.5308886337071754, 0.3698218700167143, 0.12717468430275258, 0.18875543900824387, 0.2506630134762734, 0.197977716822078, 0.17482134572216512, 0.3625830302585836, 0.16708321915275215, 0.1309642779126141, 0.34068144481654294, 0.12709586614967028, 0.330876193441895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035646716353782137, 9.999999999998899e-05, 0.00917038374706225, 0.07723271497375994, 0.16129453416650064, 0.034322786042237374, 0.08451862037899172, 0.0873116552542268, 0.08693008011158054, 0.06677335018164687, 0.007316251342026403, 0.03166823138008801, 0.13988987589600332, 0.056094037416744125, 0.06585240548281601, 0.0809605576029595, 0.11501302126999513, 0.21786775484088183, 0.3369233309137539, 0.10534858601802155, 0.07616058037556162, 0.1763287533061706, 0.07750485432586407, 0.06971483116541588, 0.24632172704447397, 0.19325969677191346, 0.25362673830939386, 0.0058602016820284986, 0.10943090094670116, 0.07169634256245827, 0.13919762740180142, 0.10663412282236517, 0.07924400486764138, 0.6381534683813823, 0.5844302565105965, 0.578024248054542, 0.5503484782617913, 0.5542226084810085, 0.543377581498727, 0.635536190576624, 0.5929005886926848, 0.5013021547407763, 0.10895650005572044, 0.0697588889038625, 0.04373282123942901, 0.07001854903532767, 0.06687616918593653, 0.10564881066350573, 0.04621643886076887, 0.08637142787947871, 0.08065784607909521, 0.11605396888452868, 0.20392003269455838, 0.209867966870684, 0.16157310985292805, 0.1703210198617795, 0.12553968106333524, 0.167441948772453, 0.14872800785744478, 0.1669948913282131, 0.1619680262430636, 0.19790779205890208, 0.2757674938481799, 0.21852366032303605, 0.27751984459832524, 0.19414347954240363, 0.21202449297814618, 0.22338368879965742, 0.21184204234502568, 0.12704119566372007, 0.24713685139835195, 0.14242255621699118, 0.24533053718207454, 0.23408940454415428, 0.1515597321324762, 0.15754926120129475, 0.2795139374901374, 0.14514900185741475, 0.19544598061746388, 0.16053910074232958, 0.14868338094400335, 0.19558926110398633, 0.1508126546063211, 0.18890709485951807, 0.20918506695309458, 0.1357855338951447, 0.21048794833401618, 0.18239633745587003, 0.17979684735311163, 0.17198993067437063, 0.21426498888080892, 0.18998902405470952, 0.17578874483072593, 0.17663080227392491, 0.1861634661122693, 0.1987424370397517, 0.9027476513645158, 0.12560133742528012, 0.15333307483552128, 0.8705734627672612, 0.20016677891902868, 0.19740165576703994, 0.09974905158007163, 0.16824530356454037, 0.843565346431238, 0.811508501002877, 0.15589635716083572, 0.11171932931312345, 0.10336867177323639, 0.1678452686521691, 0.2037982975494177, 0.10373644272587934, 0.10480767232565191, 0.7523731418836328, 0.1754417999006057, 0.1993026981242746, 0.18155991608773492, 0.22910263926572083, 0.15381731750910133, 0.2201850784985433, 0.1979768053567058, 0.17448360815169528, 0.19229509677709333, 0.06349876252027242, 0.0485701443387776, 0.06694026768499539, 0.056527149096035956, 0.07016198526821993, 0.07052916483340654, 0.10446416551496152, 0.07210955169536226, 0.07916902953956051]}, "mutation_prompt": null}
{"id": "11bdb39d-c8e2-485d-bb00-fa209e3bfcbe", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n        w_min = 0.4\n        w_max = 0.9\n\n        for _ in range(self.max_iter):\n            w = w_max - (_ / self.max_iter) * (w_max - w_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Implementing a dynamic inertia weight adaptation strategy along with a novel mutation scheme to enhance exploration-exploitation balance and accelerate convergence.", "configspace": "", "generation": 7, "fitness": 0.20109714693030212, "feedback": "The algorithm ImprovedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.23.", "error": "", "parent_id": "062a6874-54c3-477e-9fd1-e25e4e29a88c", "metadata": {"aucs": [0.7955970752524518, 0.6950913322279041, 0.7932865938199284, 0.7559891717555949, 0.12224080780707514, 0.1601591859215572, 0.8184146981766118, 0.12808451430298196, 0.7856927561101517, 0.45011692011562654, 9.999999999998899e-05, 9.999999999998899e-05, 0.0426789524039225, 0.38262863481818454, 0.16933711935199425, 0.04835004669105769, 0.033393102862107615, 0.6166345213066531, 0.1577233675371701, 0.04970946272222976, 0.10541252027843151, 0.03676933676586891, 0.007331279952294767, 0.05354506685452742, 0.10802077841214774, 0.05117141839969519, 0.04638411589481439, 0.07637017803192614, 0.047320708724210236, 0.07749405491915606, 0.07668047636295228, 0.024266010018436646, 0.04681005349227052, 0.002885645679948201, 0.027769421589965537, 0.062059565936541494, 0.9915272792522738, 0.9910432795141955, 0.9954895772872406, 0.9881557144391148, 0.977544485487572, 0.9793236550296964, 0.9881675895037197, 0.9911538486222766, 0.987504717970903, 0.20015866890623413, 0.16541346567804083, 0.2697937913672107, 0.12339643737948414, 0.13805438709113882, 0.12829073365742638, 0.3045249176437904, 0.23754039646342795, 9.999999999998899e-05, 0.13601168230412164, 0.131088309854822, 0.129112926448112, 0.1856599653725155, 0.18696970949554992, 0.18849005273291997, 0.10620103719670537, 0.12189031815223628, 0.11276332196696925, 0.24894040367015435, 0.17315898483202186, 9.999999999998899e-05, 0.11674885984147299, 0.12318167638183442, 9.999999999998899e-05, 0.2641901341195625, 0.2383396549368728, 0.2506368689110814, 0.1927847307732743, 0.1385424377568022, 9.999999999998899e-05, 0.12386666986448236, 0.03403335392486262, 0.24066209252899928, 0.20017401277544522, 0.15222286459284184, 0.03362999405347111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02399497448721266, 0.05024565927399549, 9.999999999998899e-05, 0.07404570446586256, 0.04733412855733532, 0.06893091353016156, 0.10798134999744036, 0.07792013705180212, 0.00028398194548973077, 0.0622694412339293, 0.21892006116428486, 0.11832964174804295, 0.02806219357168227, 0.04502011000406658, 0.04403142161835216, 0.1203028660110298, 0.08607822729323966, 0.06519727875373482, 0.06373709354457546, 0.08769964864364954, 0.06453385903046038, 0.07888173696158207, 0.07717641756687321, 0.11641763157495022, 0.12323560729363858, 0.21327897389281814, 0.10308117925543647, 0.19209670504226428, 0.14326167770905796, 9.999999999998899e-05, 0.07474563703921211, 0.5431550998297991, 0.5748313485305839, 0.5239027281987783, 0.20542008795731403, 0.5607847689692238, 0.20576404109705082, 0.5577042746052274, 0.13530044771287464, 0.5472219160734395, 0.051193936576052645, 0.052136758123122906, 0.019940578681905796, 0.08935752968247779, 0.01716929994972416, 0.1263198098812598, 0.033105367051029844, 0.05665613458332497, 0.06898198795198585, 0.22975778664340707, 0.19504973566834416, 0.1055149630059341, 0.1592997183360363, 0.24915531019856163, 0.14155632238313687, 0.15729145282257173, 0.1526486364539067, 0.1342674392305837, 0.17316742225526705, 0.13657021899765642, 0.16788925072018757, 0.17526605848738486, 0.17144996984835348, 0.22225980395204725, 0.21281902282363319, 0.2311711675902154, 0.186489512129679, 0.1519671384072686, 0.17005193190393997, 0.19797730933995183, 0.12317985795735042, 0.09167557323015285, 0.15997862406315722, 0.1990314014262361, 0.20287060143591618, 0.15873969070913996, 0.21895513895177288, 0.12530456323492034, 0.15482653844311844, 0.16422255688991538, 0.17503059105391838, 0.22039580468211484, 0.2745306326335115, 0.1342649387563375, 0.1952564564124033, 0.24636774304115283, 0.17100341361624327, 0.18815426644858757, 0.154385202298833, 0.1835191137665404, 0.15470697030110114, 0.16212484193973364, 0.17864441206291792, 0.1660754350743524, 0.10373584141303949, 0.12595516310469446, 0.09987621375341715, 0.16570513481783877, 0.19806943178618508, 0.19705269359133126, 0.09944413883735437, 0.1668276469404827, 0.2017328052762164, 0.7348658405213462, 0.15371147690443143, 0.11119279576935281, 0.2360670674417369, 0.16580072384355604, 0.2009337784803823, 0.10444361285674753, 0.20267327043160843, 0.7743701453039855, 0.21208883438103798, 0.19917196811413396, 0.17380506828049525, 0.20291724824520052, 0.14919598374671572, 0.23602854471555768, 0.24476018988904058, 0.1871840834410179, 0.25481686886961374, 0.07557181443135397, 0.061036528599266004, 0.05668526648538974, 0.08009102094433762, 0.07235760293689197, 0.061095077169603385, 0.022483218814635775, 0.044343535011067026, 0.04688628617407742]}, "mutation_prompt": null}
{"id": "2162a3da-4be1-4348-a864-ab28e2e98084", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n\n        return g_best", "name": "DEPSO", "description": "An Evolutionary Algorithm based on a Hybrid of Differential Evolution (DE) and Particle Swarm Optimization (PSO) for Black Box Optimization in Continuous Search Spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "062a6874-54c3-477e-9fd1-e25e4e29a88c", "metadata": {"aucs": [0.8237029129180384, 0.81993562304579, 0.8646729878112017, 0.8398657159281666, 0.7973956103713009, 0.8373065925369356, 0.8101844530770932, 0.83781302904997, 0.8610709343514519, 0.603828159042453, 0.4677229597489201, 0.5037297512331438, 0.5753805853922371, 0.41316674867047043, 0.6866243224646917, 0.05402822015212372, 0.5775242984762752, 0.6441455952928946, 0.0489721246400332, 0.07365681254405843, 0.06781114061078974, 0.12473618555871346, 0.07045736788632162, 0.07534183428568964, 0.07805660746230914, 0.11250033399631898, 0.10600698053579949, 0.09508075261162263, 0.10615899547919128, 0.055232576844835735, 0.09424430144562279, 0.025721143169110117, 0.03886331484514527, 0.04102166425648024, 0.11261535771995823, 0.06323368058177148, 0.9916378194466307, 0.9877834962384225, 0.9954404951180206, 0.9857739545555091, 0.9807567903958835, 0.9777172912285211, 0.9702546686252207, 0.9901492689072653, 0.982037273650429, 0.2265148370126001, 0.12500786288663712, 0.3652286757952463, 0.228589227962246, 0.40649380724638273, 0.15173839694894709, 0.2528771210599452, 0.30685426579049535, 0.25215570476159477, 0.15639900703199872, 0.09315357824351433, 0.12970474237919516, 0.2568717002922072, 0.15396107456367003, 0.14503344487950032, 0.14961281571526885, 0.13267833621937497, 0.07354577235421289, 0.2967189499749415, 0.11892197049778575, 0.12541474608838088, 0.19234867318681548, 0.3477085557258347, 0.5308886337071754, 0.3698218700167143, 0.12717468430275258, 0.18875543900824387, 0.2506630134762734, 0.197977716822078, 0.17482134572216512, 0.3625830302585836, 0.16708321915275215, 0.1309642779126141, 0.34068144481654294, 0.12709586614967028, 0.330876193441895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035646716353782137, 9.999999999998899e-05, 0.00917038374706225, 0.07723271497375994, 0.16129453416650064, 0.034322786042237374, 0.08451862037899172, 0.0873116552542268, 0.08693008011158054, 0.06677335018164687, 0.007316251342026403, 0.03166823138008801, 0.13988987589600332, 0.056094037416744125, 0.06585240548281601, 0.0809605576029595, 0.11501302126999513, 0.21786775484088183, 0.3369233309137539, 0.10534858601802155, 0.07616058037556162, 0.1763287533061706, 0.07750485432586407, 0.06971483116541588, 0.24632172704447397, 0.19325969677191346, 0.25362673830939386, 0.0058602016820284986, 0.10943090094670116, 0.07169634256245827, 0.13919762740180142, 0.10663412282236517, 0.07924400486764138, 0.6381534683813823, 0.5844302565105965, 0.578024248054542, 0.5503484782617913, 0.5542226084810085, 0.543377581498727, 0.635536190576624, 0.5929005886926848, 0.5013021547407763, 0.10895650005572044, 0.0697588889038625, 0.04373282123942901, 0.07001854903532767, 0.06687616918593653, 0.10564881066350573, 0.04621643886076887, 0.08637142787947871, 0.08065784607909521, 0.11605396888452868, 0.20392003269455838, 0.209867966870684, 0.16157310985292805, 0.1703210198617795, 0.12553968106333524, 0.167441948772453, 0.14872800785744478, 0.1669948913282131, 0.1619680262430636, 0.19790779205890208, 0.2757674938481799, 0.21852366032303605, 0.27751984459832524, 0.19414347954240363, 0.21202449297814618, 0.22338368879965742, 0.21184204234502568, 0.12704119566372007, 0.24713685139835195, 0.14242255621699118, 0.24533053718207454, 0.23408940454415428, 0.1515597321324762, 0.15754926120129475, 0.2795139374901374, 0.14514900185741475, 0.19544598061746388, 0.16053910074232958, 0.14868338094400335, 0.19558926110398633, 0.1508126546063211, 0.18890709485951807, 0.20918506695309458, 0.1357855338951447, 0.21048794833401618, 0.18239633745587003, 0.17979684735311163, 0.17198993067437063, 0.21426498888080892, 0.18998902405470952, 0.17578874483072593, 0.17663080227392491, 0.1861634661122693, 0.1987424370397517, 0.9027476513645158, 0.12560133742528012, 0.15333307483552128, 0.8705734627672612, 0.20016677891902868, 0.19740165576703994, 0.09974905158007163, 0.16824530356454037, 0.843565346431238, 0.811508501002877, 0.15589635716083572, 0.11171932931312345, 0.10336867177323639, 0.1678452686521691, 0.2037982975494177, 0.10373644272587934, 0.10480767232565191, 0.7523731418836328, 0.1754417999006057, 0.1993026981242746, 0.18155991608773492, 0.22910263926572083, 0.15381731750910133, 0.2201850784985433, 0.1979768053567058, 0.17448360815169528, 0.19229509677709333, 0.06349876252027242, 0.0485701443387776, 0.06694026768499539, 0.056527149096035956, 0.07016198526821993, 0.07052916483340654, 0.10446416551496152, 0.07210955169536226, 0.07916902953956051]}, "mutation_prompt": null}
{"id": "5b64b680-bb98-47e6-9427-e87aeb11f90a", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n\n        return g_best", "name": "DEPSO", "description": "An Evolutionary Algorithm based on a Hybrid of Differential Evolution (DE) and Particle Swarm Optimization (PSO) for Black Box Optimization in Continuous Search Spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "062a6874-54c3-477e-9fd1-e25e4e29a88c", "metadata": {"aucs": [0.8237029129180384, 0.81993562304579, 0.8646729878112017, 0.8398657159281666, 0.7973956103713009, 0.8373065925369356, 0.8101844530770932, 0.83781302904997, 0.8610709343514519, 0.603828159042453, 0.4677229597489201, 0.5037297512331438, 0.5753805853922371, 0.41316674867047043, 0.6866243224646917, 0.05402822015212372, 0.5775242984762752, 0.6441455952928946, 0.0489721246400332, 0.07365681254405843, 0.06781114061078974, 0.12473618555871346, 0.07045736788632162, 0.07534183428568964, 0.07805660746230914, 0.11250033399631898, 0.10600698053579949, 0.09508075261162263, 0.10615899547919128, 0.055232576844835735, 0.09424430144562279, 0.025721143169110117, 0.03886331484514527, 0.04102166425648024, 0.11261535771995823, 0.06323368058177148, 0.9916378194466307, 0.9877834962384225, 0.9954404951180206, 0.9857739545555091, 0.9807567903958835, 0.9777172912285211, 0.9702546686252207, 0.9901492689072653, 0.982037273650429, 0.2265148370126001, 0.12500786288663712, 0.3652286757952463, 0.228589227962246, 0.40649380724638273, 0.15173839694894709, 0.2528771210599452, 0.30685426579049535, 0.25215570476159477, 0.15639900703199872, 0.09315357824351433, 0.12970474237919516, 0.2568717002922072, 0.15396107456367003, 0.14503344487950032, 0.14961281571526885, 0.13267833621937497, 0.07354577235421289, 0.2967189499749415, 0.11892197049778575, 0.12541474608838088, 0.19234867318681548, 0.3477085557258347, 0.5308886337071754, 0.3698218700167143, 0.12717468430275258, 0.18875543900824387, 0.2506630134762734, 0.197977716822078, 0.17482134572216512, 0.3625830302585836, 0.16708321915275215, 0.1309642779126141, 0.34068144481654294, 0.12709586614967028, 0.330876193441895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035646716353782137, 9.999999999998899e-05, 0.00917038374706225, 0.07723271497375994, 0.16129453416650064, 0.034322786042237374, 0.08451862037899172, 0.0873116552542268, 0.08693008011158054, 0.06677335018164687, 0.007316251342026403, 0.03166823138008801, 0.13988987589600332, 0.056094037416744125, 0.06585240548281601, 0.0809605576029595, 0.11501302126999513, 0.21786775484088183, 0.3369233309137539, 0.10534858601802155, 0.07616058037556162, 0.1763287533061706, 0.07750485432586407, 0.06971483116541588, 0.24632172704447397, 0.19325969677191346, 0.25362673830939386, 0.0058602016820284986, 0.10943090094670116, 0.07169634256245827, 0.13919762740180142, 0.10663412282236517, 0.07924400486764138, 0.6381534683813823, 0.5844302565105965, 0.578024248054542, 0.5503484782617913, 0.5542226084810085, 0.543377581498727, 0.635536190576624, 0.5929005886926848, 0.5013021547407763, 0.10895650005572044, 0.0697588889038625, 0.04373282123942901, 0.07001854903532767, 0.06687616918593653, 0.10564881066350573, 0.04621643886076887, 0.08637142787947871, 0.08065784607909521, 0.11605396888452868, 0.20392003269455838, 0.209867966870684, 0.16157310985292805, 0.1703210198617795, 0.12553968106333524, 0.167441948772453, 0.14872800785744478, 0.1669948913282131, 0.1619680262430636, 0.19790779205890208, 0.2757674938481799, 0.21852366032303605, 0.27751984459832524, 0.19414347954240363, 0.21202449297814618, 0.22338368879965742, 0.21184204234502568, 0.12704119566372007, 0.24713685139835195, 0.14242255621699118, 0.24533053718207454, 0.23408940454415428, 0.1515597321324762, 0.15754926120129475, 0.2795139374901374, 0.14514900185741475, 0.19544598061746388, 0.16053910074232958, 0.14868338094400335, 0.19558926110398633, 0.1508126546063211, 0.18890709485951807, 0.20918506695309458, 0.1357855338951447, 0.21048794833401618, 0.18239633745587003, 0.17979684735311163, 0.17198993067437063, 0.21426498888080892, 0.18998902405470952, 0.17578874483072593, 0.17663080227392491, 0.1861634661122693, 0.1987424370397517, 0.9027476513645158, 0.12560133742528012, 0.15333307483552128, 0.8705734627672612, 0.20016677891902868, 0.19740165576703994, 0.09974905158007163, 0.16824530356454037, 0.843565346431238, 0.811508501002877, 0.15589635716083572, 0.11171932931312345, 0.10336867177323639, 0.1678452686521691, 0.2037982975494177, 0.10373644272587934, 0.10480767232565191, 0.7523731418836328, 0.1754417999006057, 0.1993026981242746, 0.18155991608773492, 0.22910263926572083, 0.15381731750910133, 0.2201850784985433, 0.1979768053567058, 0.17448360815169528, 0.19229509677709333, 0.06349876252027242, 0.0485701443387776, 0.06694026768499539, 0.056527149096035956, 0.07016198526821993, 0.07052916483340654, 0.10446416551496152, 0.07210955169536226, 0.07916902953956051]}, "mutation_prompt": null}
{"id": "f506f22c-0319-447a-9f97-06e03dbfd446", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 10, "fitness": 0.2689197680494273, "feedback": "The algorithm ImprovedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "062a6874-54c3-477e-9fd1-e25e4e29a88c", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "8b53eabb-139b-4edb-aa43-cfd99fec6a30", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "571aa6a4-db52-4dd0-88e1-c8aab04c7d65", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "f1602edd-1ea4-4730-8ac5-622b6db94459", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "bad5032e-49be-4517-9510-f03aa2e2ccf6", "solution": "import numpy as np\n\nclass FastDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            mutation_step = np.mean(np.std(population, axis=0)) * 0.1 # Dynamic mutation step\n                            u[j] += np.random.uniform(-mutation_step, mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "FastDEPSO", "description": "Accelerating convergence by introducing a dynamic adaptation of mutation step size based on population diversity to enhance exploration-exploitation trade-off.", "configspace": "", "generation": 14, "fitness": 0.261447926695121, "feedback": "The algorithm FastDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.8583049026992917, 0.7935911436398919, 0.8405009348865705, 0.8370580412733684, 0.8096643499315006, 0.794775457022748, 0.8555597816116723, 0.8872141125319172, 0.8390359888165113, 0.5280682757864539, 0.5330992287917327, 0.6211978128991553, 0.5159134313743177, 0.27341990991149756, 0.5464894888784593, 0.5256569007355443, 0.49579582197625227, 0.5225324704119234, 0.07851402847040556, 0.09867932384807576, 0.027932439957453425, 0.07381050275394174, 0.11331309062952477, 0.054179377053441224, 0.08887020292403891, 0.043424569392337964, 0.07672092423583088, 0.11316054209973314, 0.05627876734831172, 0.06792826804013652, 0.07992430264185257, 0.12269942916536969, 0.08101250386467673, 0.05684732676355686, 0.02274128722674318, 0.12145127185884452, 0.9736393021361791, 0.9912402291948631, 0.9917070353108319, 0.9818613100932673, 0.9905917123165587, 0.970187459260736, 0.9799640730742191, 0.9741123653410344, 0.9688482004959063, 0.17522584522657036, 0.22566629088005974, 0.2626413195094297, 0.39657383021393267, 0.20422165676493853, 0.4397166877991643, 0.396161268343295, 0.19399523656027684, 0.19741904870652693, 0.1937030468109171, 0.1337375805815043, 0.15760777220092714, 0.17634379816025647, 0.37477200998799864, 0.19086166457368126, 0.12548976002269152, 0.0971175425189551, 0.17136137473302082, 0.19885808839601138, 0.45444126097910853, 0.19604255152525107, 0.19266185596137797, 0.40639520654346506, 0.13856247768359975, 0.1300995773894159, 0.2024881627296341, 0.27219039039995085, 0.22797663019049286, 0.24349641409948997, 0.20148973513091928, 0.6698952126474926, 0.23947709733367328, 0.19929452438777506, 0.5773318042484568, 0.25447279795201805, 0.13188962717073904, 0.02920430102708993, 0.0027873278409867863, 0.05852637667920135, 0.08904439568006806, 0.07428880698662255, 9.999999999998899e-05, 0.0501660776134506, 0.06194702130249319, 0.03422278552867464, 0.10611774975135502, 0.044968489241202225, 0.12280753624779317, 0.1095149986008821, 0.019783433412915885, 0.051744206824686945, 0.08228741263172856, 0.12227919220315364, 0.12004067217925352, 0.13849612478501216, 0.08846623008412458, 0.053069052789608384, 0.08222252183789691, 0.13141119819015745, 0.4206693616640875, 0.22313114351039143, 0.1377031323658071, 0.08032761553039769, 0.13093230018096547, 0.127917358063253, 0.2129535469782825, 0.11222202602695142, 0.12380876618725778, 0.09577756602900445, 0.06490554323949327, 0.11442561970769571, 0.11934706254082705, 0.6711079240584208, 0.6098648502145652, 0.4899592287189941, 0.48468463772227155, 0.5120698945309935, 0.5373659304602281, 0.6063711766174338, 0.564284920967411, 0.6005549342623978, 0.06130939432724558, 0.039133723657866715, 0.08275555312645178, 0.1305131595207295, 0.053844060335945354, 0.10992488184250782, 0.06106926979054428, 0.1167242607082224, 0.062312473156156734, 0.12577911353767834, 0.14835875578245594, 0.20808831188256305, 0.16660733692214957, 0.28485081787445676, 0.15010828379974372, 0.4631432507009544, 0.13210700155701904, 0.2091099849551048, 0.19110222174188496, 0.16180878139510002, 0.167790281329382, 0.19279758768311772, 0.2312433722518764, 0.20471228276947195, 0.19897041710038343, 0.24983653527704297, 0.27127792644437676, 0.13880990327245746, 0.21012531826507108, 0.14742241429872938, 0.18176681373885162, 0.20260161697980228, 0.25777031727973987, 0.17492286246502753, 0.1582017335189435, 0.17724370348941176, 0.15783222344624392, 0.2058973016717669, 0.18685674438741284, 0.20366180350442742, 0.22813035071703502, 0.2005830163918233, 0.19416996713891532, 0.19185779734788322, 0.19665027683296643, 0.16877341889158248, 0.1774287134199951, 0.1799142247479122, 0.170589107228313, 0.217337356781526, 0.17870744128146887, 0.19267589135714147, 0.17153622309236527, 0.17810664549105348, 0.652711019225478, 0.12639460414297132, 0.15324005600103086, 0.17273202189175751, 0.20094622575508658, 0.11693170776177975, 0.09975042943400492, 0.1689736938012466, 0.20957037677755375, 0.815860875546123, 0.15655570919344608, 0.110269763965542, 0.20373612988259915, 0.16665238048746356, 0.21012792808221625, 0.10406838406072327, 0.1047952048699412, 0.759070907188626, 0.17672653353820456, 0.18804398891386975, 0.18628693162197418, 0.22373182581725537, 0.18842171676858532, 0.164643663245143, 0.18580907855080964, 0.18819233519324852, 0.22041896500666414, 0.05208879386869991, 0.07871796324037028, 0.07175578277549433, 0.07896496950412824, 0.0854910961485279, 0.09397633498877589, 0.0658525438636649, 0.03041212187855402, 0.09490037859108869]}, "mutation_prompt": null}
{"id": "04d6f7c8-d3a9-4aa1-877f-5545d3dad4a7", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "54280eab-958d-4612-81cc-f6e8d49ff1e6", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "fbebded5-6303-4bad-8f6f-581a9bd7ffc3", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "86a4cd86-7c30-4c4b-95c7-ba56c06e2409", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "9bc0025f-67d2-412a-9b0b-ad0a69f8288a", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "ea0596f5-157f-42cd-9564-8ac297f033ed", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "f78618b2-c142-4784-8620-6828514d8ecb", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "8a3596e1-373e-409a-9266-6127b011c0af", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "23539bff-0efe-4726-9ad0-1594e610e493", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "46f49c7a-dc7a-4ee5-bb7e-8cf566df30c0", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for t in range(self.max_iter):\n            w = self.w_max - (self.w_max - self.w_min) * t / self.max_iter\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "DynamicInertiaDEPSO", "description": "Utilizing a dynamic inertia weight to enhance exploration and exploitation by adaptively adjusting the solution search behavior.", "configspace": "", "generation": 24, "fitness": 0.24966993996509468, "feedback": "The algorithm DynamicInertiaDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.738525569840073, 0.7057798161931887, 0.7288100688815355, 0.6783116014456285, 0.7446549323015714, 0.7027979374791136, 0.7465385872424443, 0.7387565923623975, 0.7354152022599914, 0.5044120226828038, 0.5765139777296318, 0.4520871095761553, 0.4935957000557918, 0.5553980714694977, 0.5605228261908819, 0.4793035941916238, 0.5287721833650196, 0.5629685688460779, 0.16076783622931035, 0.42309302690890294, 0.13795681919822378, 0.16546761387730657, 0.10967891021795917, 0.1190960264749088, 0.13918630958406264, 0.16867665457428904, 0.1865434944786991, 0.1394026099093051, 0.14531581802768723, 0.1405838460264569, 0.10436778588560724, 0.10327647102595716, 0.15717285320134722, 0.08972178825547583, 0.11734972156238055, 0.09297373727529279, 0.9764659492038873, 0.9963407740717056, 0.9943554883903701, 0.9828450520627038, 0.9924002358086181, 0.9673023760282339, 0.9905302990709487, 0.9861660381797919, 0.9924434283300398, 0.24740485988705918, 0.23089448191682982, 0.24325828213388045, 0.1448526142240255, 0.30719423436363835, 0.30751569054572614, 0.27526924999251634, 0.2438232111406362, 0.2924715427265506, 0.1942806059817732, 0.20405042343649238, 0.15011170768841986, 0.19501727465427643, 0.2716987303045183, 0.15746142188308498, 0.2138157616352625, 0.22077989552085686, 0.2074182266346789, 0.1302055186465545, 0.24626772958640308, 0.1571065349750086, 0.18956399907349075, 0.20177214167557966, 0.16446002700180018, 0.2523092138942896, 0.22567232769442702, 0.3049993091870713, 0.11869687998373668, 0.10002438111417211, 0.09456902256011968, 0.22226482189281382, 0.14469498838818762, 0.12203031526644137, 0.2568066989678085, 0.004018874145320317, 0.09324073213739015, 0.050007399332374525, 0.0033119365453480043, 9.999999999998899e-05, 0.051060546645058436, 9.999999999998899e-05, 9.999999999998899e-05, 0.08339976380049852, 0.10368817340373226, 0.10706545837836257, 0.06554057113768541, 0.09339105352571675, 0.0749633363020501, 0.10307774420672089, 9.999999999998899e-05, 0.02080945176769311, 0.12261970615344786, 0.06819948127142872, 0.098846037762917, 0.12239981328336691, 0.030241798561515654, 0.03346961868994347, 0.12128550475379196, 0.0661432929098894, 0.07875151676481784, 0.06914390959656136, 0.12404784405684155, 0.11329286673380645, 0.20174306741765835, 0.03973356806242301, 0.22385653628860092, 0.09941469830292737, 0.1714702036299286, 0.1444606429320886, 0.051120319144292936, 0.1498524796848415, 0.1350843047720377, 0.480230444006044, 0.5658467917435028, 0.4545174036514674, 0.45535724878096473, 0.4586227288837307, 0.5374156328835791, 0.5300521818138106, 0.48071979982586555, 0.5032962213938241, 0.09084570249979462, 0.12160668448230516, 0.06045895399568324, 0.10196248696710897, 0.09437788024206561, 0.09211351208183094, 0.05308990608397979, 0.10871560398839497, 0.08766307306351351, 0.16875904485856552, 0.2267195655999571, 0.16003888010210265, 0.26828973874739126, 0.2165031737286266, 0.13891881510947846, 0.2665979599287782, 0.19721923247081885, 0.24663968201294817, 0.21029334998325144, 0.27023682213394185, 0.292602976802009, 0.289896464723297, 0.14447861128164674, 0.24913486485231062, 0.31451503190787644, 0.2176450268953979, 0.2448771476331666, 0.1297578838200577, 0.12982219485261393, 0.2204675006045823, 0.16809832223547239, 0.18667700084618888, 0.17014629683909932, 0.22199175465571375, 0.23444801314194152, 0.1678916905468235, 0.19079322670601773, 0.1495948584471165, 0.16152858308262752, 0.16758954377346869, 0.15699953674446498, 0.1709852467777231, 0.20143225141794674, 0.16982312017269796, 0.1722879618079276, 0.17724628180218083, 0.1968498762205, 0.2393857510654286, 0.22301014316197632, 0.5927259458356432, 0.18611322887115989, 0.20353422830147383, 0.19688562405859655, 0.22462000853480435, 0.16088118042581623, 0.12440331534782778, 0.15243118518874021, 0.17112148004838568, 0.19640862396809688, 0.1966886763454586, 0.09940279369792593, 0.16971783380111338, 0.20268545486968026, 0.6314967921307906, 0.15297823859804016, 0.10861451968558034, 0.10304783357444758, 0.16836462551025744, 0.20530633629453265, 0.10338044004853686, 0.20994555936062675, 0.7095199832450161, 0.17828129719318497, 0.17312263535467642, 0.19119962689268555, 0.18457060599716746, 0.19323054326119282, 0.18533817809778497, 0.1750657531335863, 0.17901024426109546, 0.21958703572468963, 0.07799454122259764, 0.06458397516209968, 0.07082089111459322, 0.057840436008365526, 0.07946587775288338, 0.08949196015943794, 0.042753885512061385, 0.051491518362662636, 0.0669387329734269]}, "mutation_prompt": null}
{"id": "fb7f4c38-491d-42b8-9daa-f3eaff223e2a", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "d57f6d0c-4786-48af-aab6-76d6bc81a1ae", "solution": "import numpy as np\n\nclass ChaoticDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n        self.chaotic_map = LogisticMap(0.7, 0.9, 1000)  # Initialize chaotic map\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            self.mutation_step = self.chaotic_map.next() * 5.0  # Dynamic mutation step adjustment\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best\n\nclass LogisticMap:\n    def __init__(self, x0, r, iterations):\n        self.x = x0\n        self.r = r\n        self.iterations = iterations\n\n    def next(self):\n        for _ in range(self.iterations):\n            self.x = self.r * self.x * (1 - self.x)\n        return self.x", "name": "ChaoticDEPSO", "description": "Utilizing a chaotic map to dynamically adjust the mutation step during the search process to enhance exploration-exploitation balance and accelerate convergence.", "configspace": "", "generation": 26, "fitness": 0.24689183568101733, "feedback": "The algorithm ChaoticDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.25.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.8564280425076465, 0.8517536900092298, 0.7693285268445506, 0.827786690018874, 0.8370046461884201, 0.8345335648878264, 0.8520830649733928, 0.8525178583580718, 0.8060053573873415, 0.03989804998936963, 0.604332479202565, 9.999999999998899e-05, 0.38551667220959107, 0.5058991547789505, 9.999999999998899e-05, 0.5518220223314235, 0.5876650385357562, 0.5009921893853986, 0.0880641180434375, 0.061547755481133226, 0.07600400337737157, 0.07921751371500252, 0.06280537631031691, 0.06844652792712203, 0.10534321864481011, 0.04180632130393769, 0.0671421338258058, 0.024160626234489113, 0.06117032409610346, 0.06382574268350905, 0.08581125640324228, 0.048539395964921406, 0.05976056098394944, 0.05059107725712164, 0.050389088555657824, 0.05066644111610352, 0.97374210867418, 0.9910745276467681, 0.9903738403547565, 0.9769654162598012, 0.9907670029775345, 0.9705686653476345, 0.9798778609105095, 0.9602549159322028, 0.9803178362997662, 0.18166210812177164, 0.3419708180990255, 0.3710656672316899, 0.264228311835761, 0.30784232538377787, 0.2413367539981045, 0.1802780267451506, 0.1748513397543887, 0.41189828834005426, 0.18097022729339218, 0.07043955752546827, 0.13072547179564586, 0.23331568433040306, 0.17369692079477483, 0.12177079030451021, 0.09028030512010554, 0.12134330123045889, 0.14900416246777437, 0.1785875794297095, 0.18705092390701217, 0.1584077998414285, 0.1183876401070535, 0.18598683377530267, 0.14567773614284085, 0.40352886563601365, 0.19588417958473825, 0.19534986256412956, 0.25093381432934514, 0.23104376180819552, 0.15577008037037898, 0.628900154477052, 0.37742722086891445, 0.2878291963016778, 0.2613211404312711, 0.23606882423892683, 0.10224480630302002, 9.999999999998899e-05, 0.08511048789487718, 0.0008705168939672214, 0.06291105122984098, 0.06226970392475939, 0.02868928127284731, 0.13996621808247833, 0.03527219028568873, 0.08174178972585855, 0.09472374326894462, 0.04171001317252798, 0.07704230928060496, 0.16074869453613538, 0.00648754798845419, 0.016568815063065845, 0.05262775156448074, 0.09410414105320619, 0.061918986415298805, 0.11190184837054096, 0.09660485073803271, 0.1362822454206165, 0.09577734513325553, 0.11649897741402782, 0.1741513870341398, 0.26190846329831907, 0.1372665127783106, 0.08335884652954095, 0.13026929892845596, 0.05127432527336473, 0.17755606287964243, 0.10772974254841516, 0.08387612970346014, 0.09005001349410047, 0.10138047476061873, 0.06113353792728593, 0.09667207693596225, 0.5820620709215809, 0.5084261838800097, 0.5852615354562083, 0.5301692492162908, 0.5144706369747234, 0.4933155267779228, 0.660936110066513, 0.5348727845962871, 0.5874032364309327, 0.08099456730416954, 0.050888569533382944, 0.1056931054701099, 0.08881063208524953, 0.058831518382265524, 0.10718686760859786, 0.04244483389382914, 0.0647360468941035, 0.06908712179873033, 0.17887762487671244, 0.14541402055969121, 0.1498148548692132, 0.1601239350732916, 0.2297901168749431, 0.13508401998160313, 0.2044062138302657, 0.13629756390546832, 0.15367374032049064, 0.18705380561393137, 0.16968433753669032, 0.24794795777999357, 0.19116578955967567, 0.23191831438700616, 0.19811441408442265, 0.18239619160687803, 0.2224933073000016, 0.19790790693613214, 0.14499731157438478, 0.09279582933911423, 0.13003102127552246, 0.16478361071657366, 0.12105253515213865, 0.1406162902489887, 0.1582072341788564, 0.18107058471055315, 0.18003795878470996, 0.22826296870523988, 0.15738302481717514, 0.1436532989896232, 0.18777147380320502, 0.1588943298692841, 0.21046631402650762, 0.24818628765567896, 0.20935742566193627, 0.22497231293968023, 0.19420405715024414, 0.17607024156483297, 0.17728300843181855, 0.1668475286780733, 0.21068387684441103, 0.18327233772056506, 0.17780095677474472, 0.1858455147288247, 0.2018015431079997, 0.10380119214462413, 0.1262117115975725, 0.149527383140169, 0.173392854844033, 0.20031163352317194, 0.8775676512861302, 0.09949811342258619, 0.1677627840848287, 0.8804046011076986, 0.7251049082592711, 0.15613645196271042, 0.10974142368447737, 0.1030405013325364, 0.16716468149192865, 0.2107486605675961, 0.10348006443287927, 0.10421469049238419, 0.79493055398066, 0.18851222583783533, 0.18295303094154136, 0.18589977624977316, 0.19226031448887804, 0.19437257390381757, 0.20502245051839618, 0.23705354073994145, 0.20043932906704676, 0.17954391838751504, 0.08735144450502053, 0.0695285028336069, 0.07064130496058274, 0.08477365233158984, 0.0760587084372435, 0.06953354790196686, 0.09716290763994928, 0.06409230664513688, 0.05965695527065307]}, "mutation_prompt": null}
{"id": "51679836-e44f-459f-b43c-1bd0ad0a0403", "solution": "import numpy as np\n\nclass FastImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n        historical_improvements = []\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    improvement = abs(func(u) - func(g_best)) / func(g_best)\n                    historical_improvements.append(improvement)\n                    self.mutation_step *= 1.0 - np.mean(historical_improvements[-int(len(historical_improvements)*0.2):])\n\n        return g_best", "name": "FastImprovedDEPSO", "description": "Increasing convergence speed by introducing adaptive parameter control for mutation step based on historical fitness improvements.", "configspace": "", "generation": 27, "fitness": 0.1996015255973756, "feedback": "The algorithm FastImprovedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.4439959313438743, 0.43114590946411313, 0.4486636385682772, 0.44482223480777416, 0.40975339794805543, 0.42530632416436964, 0.4077119210560868, 0.4326580607929903, 0.4859286152035994, 0.10434424657354846, 0.16279635271545323, 0.15520384833116918, 0.19763905013192495, 0.16486814355698587, 0.1729221627065921, 0.12809546207840572, 0.14271234821965062, 0.16294694364809426, 0.08767478823330588, 0.11675665200621166, 0.1313742422931371, 0.13030939577340883, 0.1418912819335968, 0.1420692660958175, 0.11462262724427652, 0.10482045232817583, 0.09047179057835075, 0.05568746533286517, 0.11047135754782378, 0.09857943578012929, 0.11026708704016297, 0.09883093814287025, 0.11303842296521105, 0.08869621926067972, 0.1035693493224471, 0.09961530859082746, 0.9865636979709793, 0.9927226098637824, 0.9931818654376339, 0.9755345316816373, 0.9471847218505611, 0.981408645312686, 0.9767210772776318, 0.945274279058615, 0.9711540293296218, 0.20988121837528328, 0.22916298737816165, 0.23367316007803174, 0.24923433902591963, 0.24235092192538032, 0.23110634260312413, 0.2541418662457139, 0.21947435742185428, 0.21602139812187005, 0.23256165160640108, 0.20439543611791822, 0.2057952341830792, 0.21022877735105205, 0.2704616145159534, 0.206406761329596, 0.2367434530783038, 0.2544802861737977, 0.2731586103910085, 0.13594684533276757, 0.15155171939973755, 0.09324692162860138, 0.12883022121466436, 0.12588783613675147, 0.09055919797598266, 0.11300082325007899, 0.11353034375663917, 0.13491746373954028, 0.11765344620836404, 0.17905379233106034, 0.16363350596144122, 0.1313020861916493, 0.1519125656766771, 0.1269593683920771, 9.999999999998899e-05, 0.12385827025960061, 0.07824028100782454, 9.999999999998899e-05, 0.007190866996812706, 0.021462453572408613, 9.999999999998899e-05, 0.011842206808791667, 0.00806011625073988, 9.999999999998899e-05, 0.00035122731380721195, 0.07107398237905249, 0.07519877213168691, 0.045949113652331786, 0.08426885467282463, 0.09010372999259908, 0.04240186047514838, 0.025009276064375086, 0.06499712596968854, 0.06139543740632436, 0.03972235385975054, 0.009064712197093705, 9.999999999998899e-05, 0.001534930850041527, 9.999999999998899e-05, 0.0012371785237783595, 0.0031925998863858718, 9.999999999998899e-05, 9.999999999998899e-05, 0.006375291327360366, 0.05940178603326407, 0.07326066026574629, 0.05437070994140614, 0.13001275962174363, 0.13708731770000593, 0.10658936591819057, 0.11701938807339718, 0.1059082318999579, 0.06844696226434843, 0.40274537539381616, 0.3972533103840461, 0.3777852535056161, 0.39940069678511814, 0.36656888310155433, 0.383254465878029, 0.40197134008235813, 0.4153049459292697, 0.3789975216367384, 0.06472552828272948, 0.0781209208332635, 0.08669126188388177, 0.1069344792442507, 0.05172247149515663, 0.07954189353081897, 0.07777552153433409, 0.14152886892938255, 0.08627101308463048, 0.12685739405929597, 0.19387287944550557, 0.16214092339967445, 0.2001942727314252, 0.22624564715695594, 0.1396118276700119, 0.2814851014598245, 0.21863390831689644, 0.18474434416568275, 0.261271571217652, 0.2968019085289406, 0.25035200337973207, 0.19772921755160033, 0.27907851855632393, 0.22548144031894057, 0.22294870720456184, 0.24644677497657264, 0.2279591448291527, 0.1745976304886624, 0.12810563199859626, 0.20237675779648612, 0.1957886681780534, 0.18381036806329987, 0.20356106283991982, 0.16539731090925947, 0.21558085726425058, 0.22042342095564982, 0.17242368834058963, 0.1889112504529995, 0.16827253774615925, 0.16794638866264633, 0.22242420698462517, 0.17601206449426754, 0.17276550888398545, 0.16697790146224756, 0.19627963021964934, 0.19839967377780554, 0.1977060112459128, 0.19133485363139058, 0.22099467479540913, 0.3304611918668052, 0.18715712031191456, 0.1814585854166637, 0.18904035004043274, 0.18872860473091124, 0.5885089035541189, 0.12489268228437556, 0.1529315356380373, 0.17227479460819362, 0.19536382240635408, 0.19529077142030982, 0.09939923373071047, 0.1692099974914485, 0.20907959866359438, 0.42445564570376504, 0.1543518527597345, 0.12227261607749584, 0.19967689584213988, 0.16894156144067418, 0.20060899682655942, 0.10375402171578463, 0.10376150534413842, 0.2717102313301517, 0.16635699062172205, 0.18006136460120192, 0.16651237460851898, 0.174445698538237, 0.1687585970002654, 0.15810908364596, 0.1728954034723278, 0.17700135012118878, 0.1711151739100495, 0.07253155463427996, 0.07163336302060286, 0.0744798921556068, 0.052422793264395695, 0.08278467347927476, 0.06361910449903696, 0.052679002280483056, 0.05232266237480476, 0.06163198592687236]}, "mutation_prompt": null}
{"id": "58317a36-6fdd-4fc8-88e3-6907f29d3de5", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "85b453c0-4d6d-43dc-a2ee-c12bdb4aacbe", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "27cf565a-7aa9-456b-9282-1c841a9e0ffb", "solution": "import numpy as np\n\nclass FastConvergingDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n        w = 0.9 / np.log(2)\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                w = 0.5 + 0.4 * np.exp(-0.1 * _)\n                v = population[i] + w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n\n        return g_best", "name": "FastConvergingDEPSO", "description": "Enhancing convergence speed by incorporating an adaptive dynamic inertia weight adjustment strategy based on individual fitness improvement.", "configspace": "", "generation": 30, "fitness": 0.1934597578223748, "feedback": "The algorithm FastConvergingDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.40066816681213635, 0.42357741501486235, 0.5374806445152414, 0.4098890248134579, 0.4546522662765913, 0.41452767392218925, 0.4393301210417734, 0.4489981262404025, 0.432218511589158, 0.14285144800248528, 0.18827609237360898, 0.1345865132046602, 0.18324200421075887, 0.1544376163878931, 0.1753663759897841, 0.170293889214428, 0.18216980158962948, 0.12915546822334656, 0.11664179533715391, 0.10406067277463937, 0.11287181402412694, 0.10263661966495963, 0.11198727775248385, 0.10445377101208198, 0.14447871957323766, 0.1345986899580679, 0.12029814308413078, 0.10431853713673755, 0.11775119338663587, 0.07222192544422146, 0.1316139757464876, 0.10228937748969436, 0.09908701228494354, 0.03899723308585923, 0.08524157198644411, 0.08659686676774347, 0.9733691460505648, 0.9965306625090832, 0.9949021052667019, 0.9779560499371457, 0.9601209367714659, 0.984134050681949, 0.988037304478392, 0.9493052548711415, 0.9938350487050991, 0.20388942762742612, 0.22034945103579628, 0.24465489048691724, 0.22911707176621177, 0.2268483060392127, 0.2039174998894383, 0.237549118480595, 0.2343146226284345, 0.21645614060263696, 0.17035628977676442, 0.1944708859048373, 0.3064503982715905, 0.1949340895191244, 0.301918094701091, 0.26177085277925527, 0.19822941922323023, 0.21204429256249435, 0.21943910941926825, 0.1050156704120001, 0.1600576648861206, 9.999999999998899e-05, 0.14338464965694853, 0.12364775222936353, 0.1257688504383192, 0.13823753444679365, 0.13237221367645902, 0.12960655045077218, 0.12573342466389537, 0.06637799978706538, 0.08869102917871896, 0.11347762924635374, 0.1062526099205866, 0.13944515616815678, 0.12473901361476036, 9.999999999998899e-05, 0.06975455933504326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029794840267169054, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029960360436285582, 0.05018904499488741, 0.04472627753542635, 0.06740958080830495, 0.09829158740207966, 0.013618753255180138, 0.046777670443250874, 0.09010069312948576, 0.05318795185803138, 0.026705937210196873, 0.0028189171674188884, 0.012552284850092521, 9.999999999998899e-05, 0.01265738932202598, 0.005333154578260668, 0.006797922494193198, 0.025141385791992432, 0.0013752209766322299, 9.999999999998899e-05, 0.09567866152279725, 0.07619475772737827, 0.11550990346362067, 0.05979446377671027, 0.09844507811842618, 0.05608975895600821, 0.052274773621444726, 0.10892437937513244, 0.06929774166320435, 0.3569859189759872, 0.3751720513788227, 0.35574400429380926, 0.37233850268475577, 0.33906879641553433, 0.3891012045220922, 0.3629017960820613, 0.36256517692987855, 0.38679916892921795, 0.07816529146741524, 0.049200340599697356, 0.08100531619822848, 0.06142711584488547, 0.049205316868690674, 0.07903905705159231, 0.07137507976722335, 0.05399019024732876, 0.08020594717770524, 0.1772533909263624, 0.1944090286543726, 0.13593104983288962, 0.22807894747577973, 0.2510486948599485, 0.17091291810182951, 0.1513395670317884, 0.14467710694361136, 0.22874422777925352, 0.20240710599437894, 0.2478839793067441, 0.24127656214875215, 0.22431126159175896, 0.19812883005490545, 0.27601941990561174, 0.2763305976432926, 0.257225155788919, 0.20451837354030333, 0.20715281578928058, 0.19152042651789358, 0.16454565711141445, 0.21440582760624738, 0.17567541295792233, 0.12104052659368658, 0.228265101891732, 0.2170903164125645, 0.13902353611472495, 0.17066384756154052, 0.15150429724755632, 0.17144461089400087, 0.1771478594573802, 0.15657643085046202, 0.17908272293503757, 0.19353416452669592, 0.17662536940094087, 0.1861403517962772, 0.19919959686629574, 0.1983318221484658, 0.1837328286899499, 0.18629864850620326, 0.18304629574157005, 0.17836399198765396, 0.2034110763868746, 0.21076038247890394, 0.2314098557741009, 0.1649457432543553, 0.12364747637745299, 0.15245031304374257, 0.16900608348288626, 0.19594398870134933, 0.1960315785526604, 0.09903592979685383, 0.16990565511014355, 0.551276329817882, 0.39593247136522725, 0.15224634738154907, 0.11088402135613906, 0.10071827471287964, 0.1671096907284314, 0.20415243053114263, 0.10379676800884552, 0.1041727881552088, 0.32655236361813555, 0.17379120277396998, 0.19268040618819104, 0.17572986160673432, 0.16549402244340294, 0.19195056034680524, 0.16326852279951942, 0.16471494126780872, 0.17925725620497246, 0.1962477755032871, 0.0616314330089508, 0.0648755732964581, 0.06706314781163236, 0.05194992144087718, 0.07081506370589463, 0.06847247467633022, 0.0597982077861412, 0.03848611660003931, 0.05241500614133188]}, "mutation_prompt": null}
{"id": "5ecb6287-aa67-4b9c-8f09-a4ccf3e50e42", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "1665b502-4055-4c74-9663-9543e943c487", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "fdedd5de-9f68-40f7-8d3a-551f38579f9f", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.initial_mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def calculate_diversity(population):\n            return np.mean(np.std(population, axis=0))\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        mutation_step = self.initial_mutation_step\n\n        for _ in range(self.max_iter):\n            diversity = calculate_diversity(population)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-mutation_step, mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    \n            if diversity > 0.01:  # Dynamic control based on population diversity\n                mutation_step *= 1.1\n            else:\n                mutation_step *= 0.9\n\n        return g_best", "name": "EnhancedDEPSO", "description": "Enhancing the mutation strategy by incorporating a dynamic control mechanism for the mutation step size based on population diversity to accelerate convergence speed.", "configspace": "", "generation": 33, "fitness": 0.17660286469988973, "feedback": "The algorithm EnhancedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.4111204013137081, 0.4209482213844965, 0.39844226571192876, 0.3595226647653179, 0.36888113471801187, 0.3779870204973501, 0.33000139644630444, 0.3999706601730182, 0.35731371374527265, 0.035945861819303704, 0.07385570779294537, 0.07395941141742846, 0.043788225622818255, 0.09449864468599645, 0.1168899502121441, 0.07730250045347131, 0.1381103497874563, 0.09539735724100717, 0.07756026965757779, 0.08448895063375417, 0.1004875982440937, 0.09289922803224926, 0.08658207169229426, 0.08838929184217237, 0.0781059187863411, 0.0950890894193066, 0.08237528847888187, 0.06794837883184901, 0.0665193074484508, 0.08483037632332546, 0.09231587798889562, 0.07323521185524118, 0.0994307742898074, 0.05852662278057219, 0.1004418106025563, 0.09201711378992627, 0.9878950111480598, 0.9934832090192186, 0.9943018955903214, 0.9779515796774403, 0.9504241956523178, 0.9836245381278425, 0.9787773383546924, 0.9488660749434698, 0.9743187077348587, 0.12267634964727203, 0.15506175283537904, 0.20085636331069356, 0.12552409977652657, 0.1943027193959016, 0.12197161175636739, 0.167132803628963, 0.1653442435475999, 0.1860606135132703, 0.21051585951435114, 0.15387524267342634, 0.15718424011432197, 0.20024336570969514, 0.18200863892861563, 0.1880305341111963, 0.21115879994056963, 0.1636034246735638, 0.22007097594593028, 0.113301095917125, 0.11781606764101449, 9.999999999998899e-05, 0.09572903147723733, 0.11964749304074851, 0.09216503683960087, 0.10612995431960193, 0.10011095692475935, 0.12578246709858287, 0.11602651778920914, 0.14064346370624659, 0.18432027685158303, 0.11412409167633975, 0.14737726079832392, 0.15559167448239586, 0.07819270180058557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05718461517260498, 0.06534259099664286, 0.03044268577139808, 0.06948192581104773, 0.08540025024666265, 9.999999999998899e-05, 0.014748443619578055, 0.11098374100805719, 0.058205032702806636, 0.04122754335182943, 0.00021529158308764007, 9.999999999998899e-05, 0.00010892636358295071, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04111448419485664, 0.0633193918860141, 0.05300364775624056, 0.08687472485209624, 0.04928599899482888, 0.1132572883742452, 0.048741674643997035, 0.10071904912104479, 0.057523946037272955, 0.3381490681858307, 0.3431279927828833, 0.32559157885807977, 0.3205133329012577, 0.3240913531547428, 0.3230418851527941, 0.34924818444956385, 0.3831026767870026, 0.33419292507170206, 0.0824315059976336, 0.06441782077180103, 0.061288551327958185, 0.07706147662877516, 0.08064533641003113, 0.07254415651595536, 0.06134899525323467, 0.0879084538382513, 0.07511672513140744, 0.24125556704462525, 0.17283358766525347, 0.2207384942078866, 0.13789610832734545, 0.18916437476575954, 0.13532222979602848, 0.2494903415871642, 0.15031519781601388, 0.19150874084905012, 0.2112476039859723, 0.2485925944736317, 0.2452565981750403, 0.1938003027111458, 0.22420229420957638, 0.2633794483010987, 0.18732399424700497, 0.22201291927224365, 0.21014171125991488, 0.1454564973730187, 0.12828600474116225, 0.16117575880441637, 0.12374492580134844, 0.15974428630940185, 0.16182368116264056, 0.1583247668540877, 0.17651532420871552, 0.16464293463048252, 0.16975788451635854, 0.19362672748600962, 0.18882483910116854, 0.18248287209917657, 0.19914053868415071, 0.1580532888843662, 0.20593993300086044, 0.17454493641888125, 0.16806471213100305, 0.17109265840771148, 0.172426188733649, 0.17955614230034933, 0.18956660427194572, 0.24685273904264637, 0.18385562580103354, 0.17132351238076649, 0.19434571229436515, 0.1741166699981188, 0.2868669829112428, 0.12423223333034694, 0.19330958264274634, 0.35462070251571154, 0.19406729161474356, 0.17888023591050695, 0.09949489570475978, 0.16920463753571768, 0.2028070253619879, 0.2949889974891755, 0.15447696651682707, 0.11250644078406291, 0.19218207045089009, 0.16887543720375198, 0.18399758566880342, 0.10348099332214855, 0.10357370195375004, 0.2791355578499878, 0.1658030532815965, 0.16026593115777665, 0.1666146797884539, 0.19626907751248435, 0.1711172062061188, 0.1726217221893792, 0.17496032586656762, 0.1679252084506273, 0.16936355251897695, 0.058114877187648406, 0.058977642212214576, 0.05682815661782459, 0.056812306496717424, 0.07911906189488349, 0.0667751424304206, 0.06110087519085283, 0.0471054190111474, 0.0516711044354492]}, "mutation_prompt": null}
{"id": "408af0ba-b3ee-4dc3-a6dd-bf42ef2cc31a", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "f9d31f16-fcaf-44bb-af89-1085131c1e73", "solution": "import numpy as np\n\nclass FastConvergingDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.10 if func(u) < func(g_best) else 0.90  # Dynamic mutation adjustment for faster convergence\n\n        return g_best", "name": "FastConvergingDEPSO", "description": "Employ a dynamic mutation adaptation mechanism based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": 0.26646207967359337, "feedback": "The algorithm FastConvergingDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.8490051342212191, 0.8220231356968326, 0.8454419595043818, 0.8309184957497037, 0.829057609485716, 0.845705495787141, 0.8382963342664349, 0.8195683314060005, 0.861763105554326, 0.4332760788561192, 0.5900794483313216, 0.6349809294038895, 0.5712200476325895, 0.7065885436572887, 0.6200700643321655, 0.5910963418696817, 0.6792720994551359, 0.5753533252227377, 0.13153854612127291, 0.10593127769337729, 0.11959914041448738, 0.10122390578030549, 0.16626335790350877, 0.09886242900131348, 0.17660217233836661, 0.14902117520601255, 0.13963238118837618, 0.055768175012962606, 0.08336781429189011, 0.1228073634465996, 0.10748672982275531, 0.052221437975375706, 0.10559528559420361, 0.08309379842877174, 0.07732277323580328, 0.13100039556441356, 0.9788668522412645, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9913535075153146, 0.9472436324519821, 0.989510586042494, 0.989674114317037, 0.9647207884809627, 0.2980193309001644, 0.2395555556303216, 0.2918802111688421, 0.17570710641633736, 0.2723482525891786, 0.20091288013098807, 0.2695340820337788, 0.29412936524996836, 0.23818883395096824, 0.20376553682500065, 0.1352381754129578, 0.1499008417227753, 0.19187415218764614, 0.1731866209189291, 0.1908057155320222, 0.14087949122694265, 0.14815806115791497, 0.2268083447289766, 0.21580907034307406, 0.17945298670904963, 0.1643567604841505, 0.27780847967359057, 0.413422767215736, 0.12919496782298845, 0.20582061720498468, 0.18175988718224434, 0.2200372277839392, 0.17774910032990243, 0.21286161576338514, 0.32877832773612237, 0.19065792867339182, 0.20661430694540772, 0.1312254301671938, 0.17502989021466087, 0.19842500653896, 0.11161003525571922, 0.058105263921497285, 0.018839209119876577, 0.04805143059423522, 0.04209145230764211, 0.016044229415252298, 0.13752410955415906, 0.10968257325959696, 0.042266277173611866, 0.08772308254314576, 0.21683711930122507, 0.03297265639462843, 0.04447972256878874, 0.07363260699010443, 0.044836136596885234, 0.030735520098709057, 0.2231345138859201, 0.15837772444115983, 0.020450576415876442, 0.0832062488786185, 0.07657689221992425, 0.06909130825562082, 0.15149935727942143, 0.07419740199702662, 0.07463620257039716, 0.15594762535077822, 0.09174573452914103, 0.06497645524779327, 0.14742290650592837, 0.06587815409121445, 0.1950254984617692, 0.10964365528522524, 0.12853042793095282, 0.06828277900159974, 0.0915760760735439, 0.05599935189644656, 0.09449350663095613, 0.5488660819939515, 0.5541864177787497, 0.48982345512926884, 0.48481839632074086, 0.4662791394388752, 0.47927758811948085, 0.48396374739344905, 0.5598371277093332, 0.5985231968115271, 0.14086651344898637, 0.07843158396584071, 0.061586883908786305, 0.1286975627612199, 0.035121850170854896, 0.12768419438612633, 0.1384610483490636, 0.07671979106548465, 0.09052155361754577, 0.23738253451876878, 0.1863764072907962, 0.17892856790454137, 0.23906361656564956, 0.21298100700550393, 0.14435338233373318, 0.3023592457114104, 0.20918319986228362, 0.20696529210736503, 0.2329163867193036, 0.29236859508248647, 0.23120836877895645, 0.24672434226508289, 0.21566146989430135, 0.20941363172286598, 0.20045296840991467, 0.2304187179911289, 0.22546848442480283, 0.14840578504727342, 0.17429603704551677, 0.1724906878811937, 0.19520506259986692, 0.18476336009076177, 0.15826979211330094, 0.1723819098453092, 0.21743411450634031, 0.20778027411880273, 0.23378756478706686, 0.24686522804901956, 0.16709820892087224, 0.17607005257786368, 0.16508271996754886, 0.18045593706654017, 0.18445426718211844, 0.20683923756240818, 0.2062608002963645, 0.22764477091538038, 0.22053630361419807, 0.17943279273384416, 0.18665026566287735, 0.20863575302306725, 0.18620031506927026, 0.19675888516515583, 0.18411225407333265, 0.19389955841433248, 0.7804942567228295, 0.12547723984255044, 0.1524993928440075, 0.8754024492229008, 0.20001196522494835, 0.19934065035930126, 0.09953800559223147, 0.16877826962745057, 0.8853885240660658, 0.7207844734097415, 0.15659987135646591, 0.12395108717018921, 0.20729143245414028, 0.16743497131035256, 0.2081947667195484, 0.10391186921565587, 0.10366744297666697, 0.7781563852743266, 0.1769685420066306, 0.19399352012391335, 0.1645410855279058, 0.20751631684262706, 0.1732077826683539, 0.19131283233388996, 0.17155037195008171, 0.16079168358540774, 0.17731789384744967, 0.07616931922173753, 0.06547873482758537, 0.06080491681350031, 0.04869076052235999, 0.0682954934798301, 0.06197151301396586, 0.07054468201915365, 0.07391681150597018, 0.07591431008375171]}, "mutation_prompt": null}
{"id": "485351f6-812c-4119-848d-b38b7fcdcf46", "solution": "import numpy as np\n\nclass FastDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.base_mutation_step = 1.0  # Initial mutation step size\n        self.adapt_thresh = 0.2  # Threshold for adjusting mutation step\n        self.adapt_rate = 0.2  # Rate of mutation step adjustment\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        mutation_step = self.base_mutation_step\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-mutation_step, mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    if func(u) < func(g_best) * (1.0 - self.adapt_thresh):  # Dynamic mutation step adaptation\n                        mutation_step *= (1.0 - self.adapt_rate)\n                    elif func(u) > func(g_best) * (1.0 + self.adapt_thresh):\n                        mutation_step *= (1.0 + self.adapt_rate)\n\n        return g_best", "name": "FastDEPSO", "description": "Implementing a dynamic mutation step size adaptation based on fitness improvement to enhance exploration and convergence speed while maintaining a 20.0% difference in functionality.", "configspace": "", "generation": 36, "fitness": 0.2250617388403329, "feedback": "The algorithm FastDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.443189014869242, 0.43030508466716355, 0.4477633541957643, 0.4442619396841606, 0.40874230646880527, 0.4249444132386774, 0.8425853362862475, 0.7879525488279344, 0.83195963714379, 0.43980967682706384, 0.41283369889542354, 0.46415217960608557, 0.3404903274160782, 0.4093584538411571, 0.3529319900596698, 0.33422779324029184, 0.3275002281586794, 0.38905543094058603, 0.08481226794984686, 0.09238880323376741, 0.0648703729889929, 0.130150332735395, 0.14172119087561585, 0.1418087785234622, 0.11447661830692812, 0.10466526617678096, 0.09029743708432925, 0.09900382971617983, 0.10829608360591103, 0.1024755042864186, 0.11016508384970147, 0.0986847100802053, 0.11289596231439458, 0.08858393392172637, 0.10333796330226719, 0.09952666659379228, 0.9866353267612366, 0.9929851230015054, 0.9928085220534046, 0.9747288490163696, 0.946093600812352, 0.9806700143743005, 0.9760356569186116, 0.9437317289093883, 0.9700902515486366, 0.20909543471010006, 0.22861477169613076, 0.23329562261684933, 0.24869022864541213, 0.2418698454566458, 0.23060989177351088, 0.21453918237000003, 0.15297089159909605, 0.260990267933918, 0.23244552906770188, 0.20426270573721927, 0.2057120330474832, 0.2101694543501874, 0.2702866897965155, 0.20623195490343782, 0.23620669267775507, 0.25421702809145286, 0.27283651618816807, 0.13569138782021584, 0.15130468501931849, 0.09310633793988021, 0.1178566519337868, 0.13086584371360277, 0.22470089812719063, 0.11285435811581501, 0.11330933654506226, 0.13477035123543868, 0.11749400649755459, 0.1788525117751666, 0.16339233519022722, 0.13110113623797515, 0.15179538695856076, 0.12672400387662597, 9.999999999998899e-05, 0.1237164803805455, 0.0780541219831341, 9.999999999998899e-05, 0.0070194470065636505, 0.021267316924134638, 9.999999999998899e-05, 0.011758464982392303, 0.007938328724898969, 0.008680185836533738, 0.015640796299427162, 0.08631652217493979, 0.07515735037762428, 0.045910790850247074, 0.08418788016613832, 0.07262120557085638, 0.042213880001574444, 0.024966563214090964, 0.06486739683521991, 0.061385401491240055, 0.03971504574504525, 0.012292703292630769, 9.999999999998899e-05, 0.01154403089172007, 0.0012680748581720414, 0.004042788059745228, 0.0030114023561871317, 9.999999999998899e-05, 9.999999999998899e-05, 0.0061931634910451505, 0.05927141981826922, 0.07305508010931283, 0.05428044016057465, 0.19586645224811594, 0.1614536185655444, 0.1803934341681781, 0.1988411473667665, 0.22227526735461478, 0.09579629886247165, 0.6138854003149723, 0.5404245899708926, 0.6037086906171135, 0.4911067858828604, 0.627359248485863, 0.47775698366725095, 0.40173773756472364, 0.4148554428120418, 0.37863957531575154, 0.0646527626572615, 0.07805471872730063, 0.08659077706012541, 0.1068347400485814, 0.05168942506392338, 0.07952791201308029, 0.07005911918992458, 0.1074811847390259, 0.09875863790604433, 0.1268466298341998, 0.19378636691692241, 0.16201698881580762, 0.3111527197031323, 0.2374803349042509, 0.1591772535754884, 0.28127753640393927, 0.21852018387839167, 0.18470632453532676, 0.2044866371477727, 0.1940757466477382, 0.2505900156199451, 0.19766188196872114, 0.27891146726809324, 0.2253329626748023, 0.22288831546087573, 0.24640221524244232, 0.22790945348096037, 0.22790701192165863, 0.21590162541660307, 0.22474498938531273, 0.19563453913921358, 0.18367727471728557, 0.20340944191798316, 0.16535551345065957, 0.21550819761223805, 0.2201816090004689, 0.20962340299463444, 0.1723930534547624, 0.17149445289616982, 0.1679208604699397, 0.22237506906813398, 0.17596741609497746, 0.17269178964246856, 0.1669290864587456, 0.19627339452365, 0.16146598125874256, 0.17722760808005655, 0.1753698820464693, 0.22088929582227324, 0.3297394381910601, 0.18699109221752208, 0.18142538846480494, 0.18893787379051963, 0.18862063587496736, 0.5867720095564981, 0.12488143926197826, 0.15290613892996407, 0.1722583113955154, 0.19798839013470537, 0.19642272278633466, 0.09971988429919565, 0.1693835574515442, 0.2118231055744798, 0.7701625040676405, 0.15652413191215786, 0.12335741190900429, 0.19956280053968922, 0.1689037916364392, 0.20040368901353345, 0.10387745784898017, 0.1042063195537104, 0.6905725627672801, 0.16635212273511568, 0.1800307800376797, 0.16650690035034366, 0.17443354042108727, 0.16874167738718115, 0.15810352752927626, 0.16664967210807102, 0.16976777584828284, 0.18164107024572518, 0.07251171395864964, 0.0716039445671135, 0.07444137349595426, 0.05242187812664911, 0.08278045104660614, 0.06360386750618108, 0.05264311228549323, 0.05229704020678949, 0.061606457865890696]}, "mutation_prompt": null}
{"id": "ed2d8b4e-afcf-453d-a094-c1008c0a5e44", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "7b3c4188-d3cb-42bf-beb7-bf0037c13e3f", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "83cef145-b4c5-4b36-8d5b-e006d142ef33", "solution": "import numpy as np\n\nclass FastDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.base_mutation_step = 1.0  # Initial mutation step size\n        self.dynamic_scaling_factor = 0.1  # Factor for dynamically adjusting mutation step size\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            mutation_step = self.base_mutation_step * np.exp(-self.dynamic_scaling_factor * func(u))\n                            u[j] += np.random.uniform(-mutation_step, mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "FastDEPSO", "description": "Improving convergence speed by introducing a dynamic mutation step size adaptation based on the fitness landscape.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "An exception occurred: OverflowError('Range exceeds valid bounds').", "error": "OverflowError('Range exceeds valid bounds')", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {}, "mutation_prompt": null}
{"id": "1170d650-e089-4edd-9f80-ca8a5a39bf62", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "9cc2f71d-d332-4513-8553-c97ddec94067", "solution": "import numpy as np\n\nclass AcceleratedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n            # Introducing elitist strategy to retain the best individual\n            best_idx = np.argmin(evaluate_population(population))\n            population[best_idx] = g_best\n\n        return g_best", "name": "AcceleratedDEPSO", "description": "Accelerating convergence by incorporating an elitist strategy to retain the best individual in each iteration and adjusting the mutation strategy based on the population diversity.", "configspace": "", "generation": 41, "fitness": 0.2550185002257799, "feedback": "The algorithm AcceleratedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7347551074271492, 0.7874722456622012, 0.7663813987382889, 0.7762440020854852, 0.7998262986060969, 0.7438542603913005, 0.7788424931575113, 0.8056359708377252, 0.79387154124151, 0.5134513069534603, 0.5835139856542476, 0.5055723161030412, 0.5371112582157571, 0.5624609928720607, 0.5641368720862258, 0.535630583086105, 0.5377731993070649, 0.5650676220167551, 0.15402478288958954, 0.3930993195318251, 0.0903348930700989, 0.3121976370147689, 0.12687793725216523, 0.14934326846410717, 0.14139434109084925, 0.13215191505023482, 0.11502603635531417, 0.11113960159636005, 0.14752047613893082, 0.12313166300202971, 0.10563209940277629, 0.14164011655284592, 0.14754488849395142, 0.13654902354187526, 0.14378013245148158, 0.11382109792539774, 0.9708167784164308, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.968350084868703, 0.9806922536041928, 0.9713420583818313, 0.9625192610926042, 0.30721870461860656, 0.21749281113152785, 0.3501971712584909, 0.23412988139867308, 0.3482474552412643, 0.12455631906874765, 0.27227025129288673, 0.24629256047128467, 0.2468525377756613, 0.30562838470549947, 0.20079275957680076, 0.1772208859749842, 0.2291528785840219, 0.35277447753275637, 0.18996253439288247, 0.1273075200661602, 0.217328663942577, 0.34424656071907556, 0.33455221692610126, 0.21647217962540122, 0.0958417327221438, 0.22189713852286197, 0.2004225531439746, 0.10373870938264185, 0.18505334242739868, 0.12096005343990635, 0.20698503642458754, 0.33988578065270136, 0.20978536584819518, 0.1751039330693933, 0.17238390266323933, 0.23574279091613748, 0.16132150736356066, 0.21267452447375168, 0.04671293531584575, 0.10782369036807704, 0.005955740809862831, 0.06872425240756252, 0.03158764640962275, 0.025294007446824085, 0.01268226549064444, 0.0022945169841215307, 0.010209887956083352, 0.02066286017234431, 0.08300843713343731, 0.1022741048909036, 0.029776290058687316, 0.08007940242577893, 0.06149929066605453, 0.009758779465732226, 0.028048572909011416, 0.22890146781384446, 0.06066253406556166, 0.045143384795539365, 0.3084570316852375, 0.0683993379480502, 0.057841914420485585, 0.06122872599268503, 0.1058442357283127, 0.06473956899108324, 0.15129268842598398, 0.1700272136518024, 0.0734381003468545, 0.13031678096327437, 0.09705393109830418, 0.1498577447001499, 0.037501531468823845, 0.07903378486716262, 0.16307904134211548, 0.14297892184827232, 0.12452711988362353, 0.07650644734365686, 0.4539084481530895, 0.4991495281427185, 0.48717057507706063, 0.44766363289144007, 0.4765283933715615, 0.4946046733630677, 0.4552108219778519, 0.49640592317185384, 0.5072618945927211, 0.10070382190678773, 0.07693820094895965, 0.1257398192383452, 0.1185953210879368, 0.10551300707180566, 0.083553769869248, 0.06124470417306316, 0.05038332227235098, 0.05741664906934674, 0.1884097218182399, 0.23838427155841357, 0.1880957800590206, 0.2739007777077549, 0.22133750296857158, 0.14074808660107718, 0.26896952283318376, 0.1473458005406001, 0.1948900344808725, 0.2766365599556806, 0.25700021482472113, 0.24562250180692569, 0.18633383943412507, 0.2390874155460122, 0.2844878659228479, 0.2421731468793269, 0.22731776433152984, 0.2431523554406485, 0.14101563042832876, 0.24900339703647545, 0.22543546282092408, 0.12917978633570015, 0.14964538551858064, 0.20172213210858692, 0.19014974305309662, 0.22668668743039133, 0.21365168830281578, 0.17958877668227957, 0.16716463465770992, 0.17449555347019052, 0.1534621188970755, 0.17720359740573022, 0.17105179919580116, 0.1722248900248755, 0.18369516108887707, 0.1651918833389423, 0.19651352163169578, 0.190556293824663, 0.19027545917661526, 0.1998897120677552, 0.1763447159614534, 0.1902231216185849, 0.17996483720658418, 0.18505258083834997, 0.18096793410489198, 0.16863367902776738, 0.12525151455626982, 0.15263584414207476, 0.17131327272402908, 0.19939295219860398, 0.19812606468016392, 0.09950606263707962, 0.16808623850901827, 0.8455802599400055, 0.6630388157254407, 0.15545589924429626, 0.12462228931322583, 0.20265247655705232, 0.16862493665190392, 0.20357551730885726, 0.10406858591748591, 0.10380301385410962, 0.5897856359598628, 0.1671252366893552, 0.17565152121988326, 0.1618253281191644, 0.18110608136826734, 0.16806537592998505, 0.17744652528077842, 0.16663689320658082, 0.1923679635827935, 0.1687432373910216, 0.05886989974179446, 0.07385139062838375, 0.07093712708492927, 0.05419773432993058, 0.06256280482733123, 0.09043789068343833, 0.10137115559116772, 0.07204618487369774, 0.07175470597445621]}, "mutation_prompt": null}
{"id": "9fc21519-2117-4c9d-a327-7f235795dd5d", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_step *= 1.2 if func(u) < func(g_best) else 0.8\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Accelerating convergence by dynamically adjusting mutation step size based on historical performance in a self-adaptive manner.", "configspace": "", "generation": 42, "fitness": 0.263840277584977, "feedback": "The algorithm ImprovedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.8145318436702396, 0.8253378714368305, 0.8653298639425628, 0.8757436901613925, 0.8365680196612044, 0.8668473489315802, 0.8425853362862475, 0.7879525488279344, 0.83195963714379, 0.5367867038101592, 0.49505587282463237, 0.45739693185261465, 0.5830919990004875, 0.525449497577475, 0.4442789937210936, 0.49684725472916036, 0.5539068141150258, 0.35565305030819117, 0.08481226794984686, 0.09238880323376741, 0.0648703729889929, 0.08937716962067521, 0.09565019689749388, 0.08813903207737783, 0.139645752913497, 0.06231011016705723, 0.09411767124713455, 0.09900382971617983, 0.10829608360591103, 0.1024755042864186, 0.0914793155610314, 0.049219920820708696, 0.09559773290205154, 0.04817523558431003, 0.09511587124359411, 0.07875640155543606, 0.9876706489186545, 0.9929851230015054, 0.9935534657827106, 0.9830018363577547, 0.94316629937401, 0.982131386405057, 0.983818776919494, 0.942357189583549, 0.9715983997991803, 0.3283607472365724, 0.2542220880371683, 0.2869266770740466, 0.2938046859572905, 0.2939998493506165, 0.276201731892042, 0.21453918237000003, 0.15297089159909605, 0.1586146748100311, 0.21873655211595722, 0.16827996893011754, 0.2080524441622541, 0.195796940953186, 0.27222448515702113, 0.10445484751007295, 0.17165590673070874, 0.18205789784930182, 0.32626051426341407, 0.1612982746179802, 0.30403361397048567, 0.12212313688808918, 0.1178566519337868, 0.4411749253270403, 0.1587415257525756, 0.5188369854756028, 0.12304661135785022, 0.25569722799882655, 0.19979814905761173, 0.24925605677542428, 0.4438058141168628, 0.5449398525219102, 0.2055357943648205, 0.19925986016355224, 0.3577520948766587, 0.1604294213808677, 0.42815376647011494, 0.0017219439009042992, 0.007908763302474253, 0.14614833250809156, 0.006990421240840594, 0.0007023196635663753, 9.999999999998899e-05, 0.06133082937781731, 0.02095363277594009, 0.10826715355799099, 0.12446247915181319, 0.05102325797705576, 0.060405226897756625, 0.13609714176926646, 0.0033376801827272873, 0.08454949030529546, 0.19035774969715324, 0.09900870105009474, 0.04945578748065349, 0.14777680034584706, 0.08074825696524002, 0.04810966865659483, 0.09495705060849047, 0.09308714344327562, 0.0729672255712367, 0.18433509798623848, 0.09842340182086828, 0.0782025537190375, 0.3100542151936093, 0.12544053747989836, 0.2635795445052751, 0.16996053345144868, 0.17203319573621334, 0.1452750769643979, 0.11348131945708861, 0.14678444093543008, 0.09419832377089044, 0.6138854003149723, 0.5404245899708926, 0.6037086906171135, 0.4911067858828604, 0.627359248485863, 0.47775698366725095, 0.5389181587790357, 0.522009165916878, 0.5226237012578573, 0.0694764046975681, 0.03611961425842014, 0.11001327147648643, 0.09396528699426343, 0.041531886719558875, 0.11175131281114004, 0.06369280739163019, 0.09070985978152457, 0.05312266682444766, 0.24166023936444014, 0.39321266126787335, 0.1740978572524442, 0.3111527197031323, 0.2374803349042509, 0.1591772535754884, 0.40282025492510043, 0.15102556791898736, 0.218904340220209, 0.2044866371477727, 0.1940757466477382, 0.2505900156199451, 0.17745746751249658, 0.28178336682354477, 0.41717455160865813, 0.22214170752214235, 0.25340018914685536, 0.30249538384324903, 0.20545636718650961, 0.14083210988422812, 0.1345007132516357, 0.1742935200081127, 0.19701749074812636, 0.18503039588140313, 0.16848911452665927, 0.24032724555113305, 0.1863746717061786, 0.20962340299463444, 0.1723930534547624, 0.17149445289616982, 0.18946113627984185, 0.22581435233886327, 0.15704212677231533, 0.1983533038610803, 0.1944179474031411, 0.18102243374624027, 0.16146598125874256, 0.15663678203087206, 0.1753698820464693, 0.16570946886862836, 0.21056918763403842, 0.19102180886940323, 0.17893803709443545, 0.17732497564685035, 0.1658008730355638, 0.8219849346314093, 0.12603801553214655, 0.15329785411909325, 0.17257688599123433, 0.19992662775088654, 0.19794800462257534, 0.09971988429919565, 0.1693835574515442, 0.2118231055744798, 0.7701625040676405, 0.15652413191215786, 0.12335741190900429, 0.19904236229293182, 0.16916714719030113, 0.20594535058383923, 0.10387745784898017, 0.1042063195537104, 0.6905725627672801, 0.1608883648319407, 0.18949013782912993, 0.17822259725290046, 0.1905762141655316, 0.19027666713075164, 0.15727318678198898, 0.16664967210807102, 0.16976777584828284, 0.18164107024572518, 0.0648812286270839, 0.06403501534946354, 0.07996845139203301, 0.0659338084882033, 0.07040186532825377, 0.058908759068345695, 0.07126829746907137, 0.026630049586595095, 0.06486688991162759]}, "mutation_prompt": null}
{"id": "ae9f147c-0853-4bef-9b78-9d5b573d1743", "solution": "import numpy as np\n\nclass FastDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.base_mutation_step = 1.0\n        self.mutation_step = self.base_mutation_step\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n                    self.mutation_step = self.base_mutation_step * (1.0 - np.exp(-0.1 * func(u)))\n\n        return g_best", "name": "FastDEPSO", "description": "Enhancing convergence speed by introducing a dynamic adaptation of mutation step size based on the fitness improvement without altering the overall structure significantly.", "configspace": "", "generation": 43, "fitness": 0.2446819709237697, "feedback": "The algorithm FastDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.781151070042419, 0.8027943269425304, 0.7975849690006424, 0.807208941040858, 0.8263897162602942, 0.782539833366249, 0.6357624469220382, 0.564408359339607, 0.6013458666272404, 0.5850663602082703, 0.6207079067709131, 0.5903155871388421, 0.4780610086805449, 0.5556343742852399, 0.5695456783740924, 0.5910305140472308, 0.4303609564399722, 0.5681566707243815, 0.06569446416988178, 0.06483005907661632, 0.06831315487600353, 0.15488346727520397, 0.13067459816616578, 0.18550263889534935, 0.15083952777339693, 0.13771417154843235, 0.12445530201303523, 0.04811498430359351, 0.06974848303413961, 0.022037014341579897, 0.11141940627945024, 0.13762099812099682, 0.15070602886300877, 0.14668639491202795, 0.16956804990940832, 0.12691765054012016, 0.9727122061598705, 0.9907605789338241, 0.9931810917878939, 0.9887013737391936, 0.990000697346989, 0.9700449641075516, 0.9801635577695331, 0.972994909228434, 0.9641900033699881, 0.42734983593585685, 0.2746696091706411, 0.34755275645225403, 0.2717415091235531, 0.1757375535214516, 0.12809194530039147, 0.08470523552346221, 0.14692178124471522, 0.07727170816498596, 0.31281579466365406, 0.20363163833685183, 0.21159640495512988, 0.26897236550588377, 0.20740899008865576, 0.18987389132367205, 0.219669718429101, 0.2300794884310735, 0.3433852087643584, 0.4066693990507618, 0.24803002349952652, 0.12121338213052135, 0.14080800853615916, 0.10986107977005499, 0.09977855676425684, 0.2018356864145583, 0.12310749810537547, 0.23761573920803236, 0.3826966273461122, 0.22585958209077972, 0.21120561142484906, 0.1962298379036147, 0.27653057412460447, 0.22860188339182674, 0.21238996246672115, 0.06071133749442725, 0.11175011663057921, 0.010700251872410305, 0.0731401166060146, 0.03695911304679267, 0.027247962136210835, 0.020400403070712336, 0.005145348921087312, 0.06561879565782569, 0.01331140085678506, 0.08510472483941489, 0.10965114595359393, 0.03171368788744222, 0.09064516619594198, 0.0760221989190919, 0.00945739507051313, 0.04670782441041943, 0.26294636801922466, 0.06513804067964957, 0.054390572012940175, 0.33421247728219594, 0.0735965167343402, 0.062363385977865615, 0.06537014332045565, 0.11329471770461719, 0.06437770078650795, 0.1619612722352638, 0.18198656225621057, 0.0786571675382256, 0.1341407801387008, 0.10007228574432336, 0.1503895804463875, 0.039562879101235016, 0.07900581474833779, 0.1753213707728859, 0.07276012472133697, 0.05084008486013314, 0.06308107264564367, 0.5090992608909499, 0.37423043603171147, 0.3320746206978894, 0.43055216332638313, 0.44291750423307485, 0.43866620372980325, 0.49715754524009903, 0.5133997785850666, 0.5406605462973094, 0.10560295127950992, 0.07821312167674699, 0.1276124398793167, 0.12438146701049269, 0.10807156514555061, 0.11665279381711302, 0.07166798687080789, 0.10768674126308941, 0.07465026040046718, 0.20367030438731204, 0.23898045667500833, 0.19244846400788773, 0.22016729672332958, 0.23583575460741235, 0.1904190143091813, 0.2681315562225085, 0.15309103724706452, 0.19913532122278643, 0.1997254809086112, 0.2841101742487073, 0.22244927279210236, 0.20710886559621322, 0.23148693356770422, 0.2724510837107097, 0.24650787618743553, 0.22923875376881853, 0.24658457761132124, 0.1762731185786004, 0.217231235558498, 0.19228184274443683, 0.25138316290306306, 0.2033123318365596, 0.2525509609271128, 0.19496120792511817, 0.23113206282277043, 0.21560600276450648, 0.14523386378852754, 0.13255290243386386, 0.15321627188779563, 0.18299676767586293, 0.1958905810936188, 0.17004294530605601, 0.18053169206976327, 0.19215955850825606, 0.16799345434484092, 0.17754650413512285, 0.1491382871761021, 0.14590243393794877, 0.20200878547330003, 0.1767824506929584, 0.19169671941964828, 0.1824413974810093, 0.18626409163019864, 0.1816743148482165, 0.17031314957844623, 0.1256516926999911, 0.1528238013264015, 0.17177765128814082, 0.2002823152758243, 0.1981683237816162, 0.11557167168539217, 0.16049245886766006, 0.19553533280477609, 0.2633064690918979, 0.15288099548622558, 0.10513084151473318, 0.20432077098936463, 0.16874559810103895, 0.2049649641963074, 0.2001477001283477, 0.20546960453422347, 0.17934142268242104, 0.1846383314884048, 0.18029447572640478, 0.1614974588566369, 0.1999288982186317, 0.19312495248514638, 0.1887886714732554, 0.18114003179301585, 0.1829695570784643, 0.1722242981385531, 0.06068385613228544, 0.0749070834991109, 0.07585665288952037, 0.05580579113515194, 0.06334503054608887, 0.09523442396826653, 0.07725151988374224, 0.0816598759806344, 0.08518033086263987]}, "mutation_prompt": null}
{"id": "24e116a0-278b-4255-8b93-4309ea31d4fc", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "5f03cf3b-c077-48f3-aa41-cc1957c0a507", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "a8099bf5-592e-4703-9430-fc646f89714d", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "1a679db0-c54c-4df6-8566-2fc525849d22", "solution": "import numpy as np\n\nclass ImprovedDEPSO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    fitness_improvement_ratio = (func(g_best) - func(u)) / func(g_best)\n                    self.mutation_prob *= 1.05 if fitness_improvement_ratio > 0.1 else 0.95\n\n        return g_best", "name": "ImprovedDEPSO_FastConvergence", "description": "Enhancing mutation strategy by applying adaptive control of mutation probability based on the fitness improvement ratio to accelerate convergence speed while maintaining a 20.0% difference from the original algorithm.", "configspace": "", "generation": 47, "fitness": 0.267474667568884, "feedback": "The algorithm ImprovedDEPSO_FastConvergence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7745319997230272, 0.8153048826428478, 0.7968797975368076, 0.807208941040858, 0.8263897162602942, 0.782539833366249, 0.8074982904423684, 0.8309095808692777, 0.8195593955207892, 0.5758414227705467, 0.6396379043706906, 0.5672116640506782, 0.5951797599309014, 0.6201662353343371, 0.6177396765134511, 0.5945147445824203, 0.6009675761964288, 0.6241209922212452, 0.16124246365387207, 0.491552595550931, 0.09253052895335168, 0.41155668017917035, 0.13067505705226412, 0.18716751134583764, 0.15083656218069286, 0.13771425050825714, 0.12445515525005468, 0.11564032823384018, 0.1558405800363647, 0.13109272715318587, 0.11131806934337529, 0.150920237886088, 0.15070304473422313, 0.14669031242482744, 0.16956801674385313, 0.1270376010398726, 0.9725722977432019, 0.9906149075880726, 0.9931818654376339, 0.9887013737391936, 0.990000697346989, 0.9700449641075516, 0.9801632711267028, 0.9729949574734129, 0.9641899077810496, 0.34359081669024893, 0.22827010815593696, 0.38064338306980106, 0.2469490480225358, 0.3912208215814309, 0.1350727271057207, 0.3059906872394298, 0.260222775079597, 0.2639423989049674, 0.31283202986695213, 0.20363163833685183, 0.21159640495512988, 0.23096161181376096, 0.3592223707083829, 0.19053063860343689, 0.14381467297331196, 0.21855613767821347, 0.35117749547086163, 0.40597070679704406, 0.2480298799331907, 0.12121338457812403, 0.2610105636202137, 0.220477653666598, 0.10773057498732141, 0.20434344277555283, 0.12340098661939669, 0.22408915528571682, 0.3825724395567264, 0.22585988876449692, 0.1896361864370819, 0.1865626697238778, 0.2535554047449019, 0.18119814786950228, 0.24602358525801438, 0.060711337516766384, 0.11228395235595823, 0.010700251872410305, 0.0741422644012768, 0.0423209722128739, 0.026325613426031347, 0.020400419607711773, 0.005145348921406723, 0.022038500264306093, 0.02441470800783352, 0.09256538941422854, 0.11542506436455091, 0.03171390527829898, 0.09064436626250916, 0.06627089348266202, 0.014363334282023965, 0.03459462849269912, 0.24009792334328528, 0.06435737766741079, 0.049209074372296935, 0.33421247728219594, 0.07408790716218605, 0.06244674895867175, 0.06542234848578288, 0.11227093200577343, 0.06839913425330724, 0.16196127223520485, 0.18196951058866173, 0.07865716755916596, 0.1342696775615173, 0.10020209835166838, 0.1538218025028395, 0.04577656240529704, 0.07997527543199101, 0.1698695810923453, 0.147210588449466, 0.12901840601350445, 0.07806185935626397, 0.46777250106781343, 0.5215180171456666, 0.499823090978461, 0.46276562287458023, 0.4893693638383022, 0.5074596454050578, 0.4865028175794691, 0.5130044587871045, 0.5444593547059609, 0.10560295127950992, 0.07821312167674699, 0.1276124398793167, 0.12437456008778058, 0.10806786488079578, 0.0849592260083758, 0.06266342860175866, 0.050909156367846875, 0.05826547059162768, 0.19731789560177726, 0.2543097371360522, 0.19184673983092382, 0.28109318884665213, 0.22772471106031855, 0.14165715994122874, 0.28393455017699487, 0.15284539397601726, 0.19932348115783838, 0.2797699890608484, 0.25988282302864696, 0.2528186790196594, 0.18767545854602985, 0.24143231829988387, 0.2888916139764204, 0.24650787618756853, 0.22923875376603542, 0.24658457783210253, 0.1418766961031992, 0.2588574652964305, 0.2290900121256425, 0.1359876183165155, 0.15082651841034422, 0.20686626784890672, 0.19496120788700277, 0.23113206282280296, 0.2156060059289242, 0.1872813941895839, 0.16926822963756016, 0.18427044177378615, 0.1543416332478973, 0.18577180120567605, 0.17596823931219352, 0.1805316953558197, 0.19215956026684744, 0.16799344909144676, 0.19825568173842367, 0.19226265664089826, 0.19233677829108675, 0.20200878547330003, 0.1767824506929584, 0.19169671941964828, 0.18244139749784583, 0.18626409162379398, 0.18167431484404273, 0.17025703290567384, 0.12562045674023015, 0.1529667678907375, 0.1715988327855752, 0.1998150039717037, 0.19865965910428507, 0.09958367778539323, 0.16843721456742933, 0.8658184405410805, 0.7146319367498806, 0.15585468111030953, 0.12519820296279782, 0.20432077098936463, 0.16874559810103895, 0.2049649641963074, 0.10423472535572031, 0.10397131479587274, 0.6427567940892902, 0.16966445697472388, 0.177325930340113, 0.16442218165916733, 0.18296647679855704, 0.16963013600056842, 0.17823747725213146, 0.1683539554477902, 0.2037443934621933, 0.17704577548895228, 0.060683772789159374, 0.07490805805452205, 0.0757972032747084, 0.0558041556912765, 0.0633454257694952, 0.095237647780814, 0.10701143530272983, 0.07540941193618655, 0.07432552186560548]}, "mutation_prompt": null}
{"id": "a48337b0-5cf3-42c5-bed5-855778de346c", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for t in range(1, self.max_iter + 1):\n            w = self.w_max - (self.w_max - self.w_min) * t / self.max_iter\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Introducing a dynamic inertia weight updating mechanism for a faster convergence speed.", "configspace": "", "generation": 48, "fitness": 0.25131514076395617, "feedback": "The algorithm ImprovedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7168448023314397, 0.7041044982161877, 0.7231338216361598, 0.6818322159743226, 0.7938043936587508, 0.7180511818924318, 0.7333664150478361, 0.7432260444278322, 0.732948861637646, 0.560272127980574, 0.5347042576486805, 0.5475086870918414, 0.5672459066207589, 0.5023739310003791, 0.5470511689817575, 0.544083797974882, 0.5237900834192076, 0.5355952540497819, 0.3861055826727292, 0.15784909723289364, 0.14628578790995306, 0.15417349273187753, 0.15126185761802358, 0.14465487714900538, 0.14199398712949696, 0.3490696159271178, 0.12272256562128536, 0.1350890673342754, 0.13784618292735362, 0.2368359755241517, 0.12115561170473155, 0.08302070052209509, 0.20882493178413353, 0.12295505193362077, 0.12811113511843364, 0.1182309296150903, 0.9770749588459847, 0.9963406765798882, 0.9943554273798922, 0.9828713804993563, 0.9924001502194888, 0.9672989840165751, 0.9905301625480784, 0.9861590970048187, 0.9924391673254032, 0.31384200819073127, 0.35906502935837625, 0.28391026591010515, 0.26555710619928585, 0.28760273051264906, 0.240134877459234, 0.3276839081726546, 0.30725956159848733, 0.23626928103468225, 0.2767474880677907, 0.17377492372013092, 0.21855983150238567, 0.19505974239232238, 0.20312776338172966, 0.17860166028596902, 0.176470440375046, 0.22892874177320577, 0.14573250943553795, 0.1276189125968935, 0.2111647708780282, 0.04338560110921519, 0.23608842096540783, 0.19021136132071959, 0.17390966433039978, 0.1787648635536585, 0.38745274501307636, 0.2262609574763309, 0.1495840868343261, 0.05015798973097485, 0.3294358870782502, 0.24402624244648063, 0.11079777137763502, 0.12236177811611015, 0.25268937791215307, 0.07800746396742397, 0.19918886596481788, 0.03604457184686549, 0.08573031610241744, 9.999999999998899e-05, 0.06397501042085818, 0.04904204246548649, 0.007264291837909331, 0.08961192241610083, 0.0744589205932158, 0.0025988800829811476, 0.040463256230918176, 0.04744775194707984, 0.11999742895817778, 0.16084675822236638, 0.017137965089868756, 0.07954985877762777, 0.05960415871148472, 0.04842669284658008, 0.052634236878132845, 0.12502274530465152, 0.02488951460690081, 0.03897896634238118, 0.11880912319607884, 0.06072168805121114, 0.07200071019494858, 0.07602376387573273, 0.13966964305826113, 0.13345959476509228, 0.17721905118110992, 0.09617365734123873, 0.2367464391896793, 0.0862469724604793, 0.1762958977389053, 0.21238622288297537, 0.043745307961629676, 0.14196074584041674, 0.1012201585216681, 0.5386657173717181, 0.5294140001511658, 0.4785289927960821, 0.5330221498770265, 0.5053537796950034, 0.47584725215381507, 0.5829602917938073, 0.48926406864951344, 0.48271003900621234, 0.08590345251252307, 0.050349665888930195, 0.08307725444046887, 0.10049544906442753, 0.04377890857556399, 0.08398838952679322, 0.047098792475769535, 0.07794864895226161, 0.08921973435593222, 0.15945765053302752, 0.357893698972635, 0.1565375873130317, 0.24958794948343876, 0.18694518186313747, 0.1262558862886095, 0.2018498026457436, 0.12649474769762814, 0.23144057038500332, 0.16993053049571194, 0.26483285145304836, 0.2685446196558372, 0.3097440788858946, 0.14225780583743797, 0.1281387777649139, 0.330929004695532, 0.24477475465436194, 0.2720044046448741, 0.10945123832548465, 0.1753670543763206, 0.17423281338023733, 0.1607978211037724, 0.19409545326128141, 0.1752717794649743, 0.16173036885630188, 0.20379346610781968, 0.22348613397844375, 0.18113245786365617, 0.138013610169317, 0.16404507003023105, 0.15757972304445578, 0.17551805878158744, 0.15956120457969647, 0.18307111014565558, 0.15740757612367617, 0.17246641634882676, 0.17853602205311236, 0.23158421427048248, 0.2421123893132775, 0.22030250333071866, 0.18470066791791584, 0.18529980805635782, 0.20359207932418844, 0.20576366254770095, 0.18913610091942168, 0.16093498272882079, 0.12435877009779872, 0.15245665451475, 0.17121781498271482, 0.19652917130989422, 0.19716514781962668, 0.09941639725758467, 0.1698528591388342, 0.20041269400993578, 0.654456098175393, 0.15498298373972053, 0.1081980802075202, 0.10296245410386906, 0.16841374691068545, 0.20513596616781737, 0.10335163677409875, 0.2101046834837219, 0.5734641480180096, 0.2071466230044845, 0.17871987965091607, 0.17097548095789428, 0.15873066945677727, 0.17912580424301627, 0.16795114317037207, 0.1792932506824183, 0.1789685379232513, 0.1987649308383237, 0.08452422828892703, 0.07224180745287778, 0.094776237380507, 0.06379424536523781, 0.07794995752607614, 0.07474668245109783, 0.08871372289735069, 0.023948892444981884, 0.05545592715755354]}, "mutation_prompt": null}
{"id": "716ed673-365f-4bde-b235-5ffe425a6661", "solution": "import numpy as np\n\nclass FastDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n                    self.mutation_step *= 1.03 if func(u) < func(g_best) else 0.97  # Dynamic adjustment of mutation step size\n\n        return g_best", "name": "FastDEPSO", "description": "Enhancing convergence speed by introducing a dynamic adjustment of mutation step size based on fitness improvement to expedite exploration-exploitation balance.", "configspace": "", "generation": 49, "fitness": 0.26883497829473013, "feedback": "The algorithm FastDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.8087123229153224, 0.8346539129793334, 0.7850649462132968, 0.7952760202989679, 0.8196393222904933, 0.7742932060191897, 0.7970484900391029, 0.7911705227032405, 0.7984122813587976, 0.5146741594170741, 0.5944072258479882, 0.5185486050587149, 0.47022727756013905, 0.6136490061426673, 0.5760675880287475, 0.5198264932351552, 0.6321681451836374, 0.5657882029935786, 0.08766501192602738, 0.14078276531914924, 0.12357711098370328, 0.09144600490888866, 0.17949170028483552, 0.07922899903214531, 0.1669007042854791, 0.11764933376960984, 0.12217511040838036, 0.15909236988920816, 0.08513840242160697, 0.1096721902492398, 0.09985697188329323, 0.05511667165222256, 0.14807307195932573, 0.13400255117968607, 0.06676510317456774, 0.08696325567768104, 0.9717310791431414, 0.9901995266712569, 0.9928081439308688, 0.9882502071404249, 0.9893925140786429, 0.9681536959682978, 0.9796996370345852, 0.971994547564031, 0.9625264411490198, 0.2766962309968415, 0.2892749530199856, 0.40915775666185084, 0.4198421595555859, 0.3230365725076797, 0.3403232755500418, 0.29223803733114095, 0.3592907199363964, 0.3373815057278312, 0.8395073336873992, 0.13724078435585219, 0.20675605771989758, 0.2715719972165591, 0.31496133277923377, 0.20489772440657839, 0.13988271297623234, 0.16927327786799362, 0.22963219313070038, 0.441782812213541, 0.29897259952857025, 0.11322905274464279, 0.2051961154992582, 0.18666053329657128, 0.15131369448715992, 0.257714736869857, 0.12663195949799522, 0.2442582535808372, 0.18374089990819498, 0.24632385716224803, 0.3341647125780379, 0.3316277282537081, 0.3095574226649065, 0.24367472749299945, 0.20124746262580673, 0.09175427233551836, 0.11139579170120084, 0.02896249659515182, 0.06671294140018602, 0.05981418957117379, 0.002804690400526444, 0.04167154610521606, 0.06159356685415984, 0.07732646074404015, 0.030334247051797325, 0.1390245596669003, 0.07074027012801054, 0.06243791806535992, 0.08546971536390502, 0.07235034708806709, 0.026730385590689187, 0.03301971861677555, 0.177120218533367, 0.07820729800907467, 0.16532043296701826, 0.3383890864526412, 0.06887700060158641, 0.06570246092264276, 0.07234642644311118, 0.1303508400495803, 0.07216681298043515, 0.31039799124533074, 0.19898033425244155, 0.08665324424980425, 0.14622993664518125, 0.13916945945487735, 0.1789752635206927, 0.17591519782364062, 0.1855083809807181, 0.274358402882516, 0.16833824112549212, 0.09257815186265017, 0.09919071350351227, 0.5818720653656864, 0.5773779852392023, 0.539874174570865, 0.5034356068976702, 0.47193640563139383, 0.49368680162818324, 0.5596669892056931, 0.6292137772633777, 0.546203969772008, 0.05964047639237746, 0.04976272002971105, 0.12857794450029247, 0.07555590058124895, 0.12246819231442119, 0.1131141901001913, 0.17056028204335782, 0.07552683254709536, 0.12181789227796291, 0.22130927241364073, 0.22919728813594986, 0.18828561750542694, 0.2667622414149017, 0.23552918066823936, 0.13804424445288, 0.2684850820206909, 0.19282021364277946, 0.19874897119154455, 0.21891448500887123, 0.2023826380136876, 0.2411445416241681, 0.18387283556510914, 0.23425506387320394, 0.2959325292287599, 0.24571561492390714, 0.24539411875307016, 0.2836032603239005, 0.1649633634165506, 0.22341623413680678, 0.22925255345302342, 0.16345312614085217, 0.11210162467883134, 0.25623784036695774, 0.18091076397055472, 0.25668150844835924, 0.20494215211858313, 0.22706946370099612, 0.1983668640208598, 0.1675835779034609, 0.1823257933924759, 0.17765197843120728, 0.17409142013331025, 0.16920137490229048, 0.186718986667321, 0.18947426823109903, 0.21102136146113804, 0.20432296300590547, 0.18126751325896306, 0.19595793702843023, 0.22480304731603473, 0.19340242745479996, 0.18456042976887244, 0.19622453923978778, 0.18645238826501265, 0.10442895872766034, 0.12557385168826163, 0.1538974990323141, 0.1720385252756047, 0.19990047687289347, 0.19877445346492506, 0.09962444314145358, 0.16865998433655838, 0.20753386919655292, 0.7134590929776219, 0.15581153556773075, 0.12361703142123193, 0.20523254014561887, 0.16894521985164412, 0.20577661069823827, 0.10422051667063881, 0.104126998007393, 0.7022294271919114, 0.16604275168824856, 0.17429992695954621, 0.17051221406407135, 0.17106702816144703, 0.15514256429823325, 0.1886287853779789, 0.16585739504928987, 0.1745820926343815, 0.17110372841009325, 0.07423960963295506, 0.06378533068135495, 0.06497057876551537, 0.053449515856894836, 0.08004568239365994, 0.0928060141463487, 0.060486813864468636, 0.09037326103187371, 0.08200502275525201]}, "mutation_prompt": null}
{"id": "c2e36032-303d-4663-9e1a-95e7692dff6d", "solution": "import numpy as np\n\nclass AcceleratedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for t in range(self.max_iter):\n            diversity = np.std(population)\n            w = self.w_max - (((self.w_max - self.w_min) / self.max_iter) * t)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "AcceleratedDEPSO", "description": "Accelerating convergence by introducing a dynamic inertia weight that adapts based on population diversity to enhance exploration and exploitation balance.", "configspace": "", "generation": 50, "fitness": 0.24966993996509468, "feedback": "The algorithm AcceleratedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.738525569840073, 0.7057798161931887, 0.7288100688815355, 0.6783116014456285, 0.7446549323015714, 0.7027979374791136, 0.7465385872424443, 0.7387565923623975, 0.7354152022599914, 0.5044120226828038, 0.5765139777296318, 0.4520871095761553, 0.4935957000557918, 0.5553980714694977, 0.5605228261908819, 0.4793035941916238, 0.5287721833650196, 0.5629685688460779, 0.16076783622931035, 0.42309302690890294, 0.13795681919822378, 0.16546761387730657, 0.10967891021795917, 0.1190960264749088, 0.13918630958406264, 0.16867665457428904, 0.1865434944786991, 0.1394026099093051, 0.14531581802768723, 0.1405838460264569, 0.10436778588560724, 0.10327647102595716, 0.15717285320134722, 0.08972178825547583, 0.11734972156238055, 0.09297373727529279, 0.9764659492038873, 0.9963407740717056, 0.9943554883903701, 0.9828450520627038, 0.9924002358086181, 0.9673023760282339, 0.9905302990709487, 0.9861660381797919, 0.9924434283300398, 0.24740485988705918, 0.23089448191682982, 0.24325828213388045, 0.1448526142240255, 0.30719423436363835, 0.30751569054572614, 0.27526924999251634, 0.2438232111406362, 0.2924715427265506, 0.1942806059817732, 0.20405042343649238, 0.15011170768841986, 0.19501727465427643, 0.2716987303045183, 0.15746142188308498, 0.2138157616352625, 0.22077989552085686, 0.2074182266346789, 0.1302055186465545, 0.24626772958640308, 0.1571065349750086, 0.18956399907349075, 0.20177214167557966, 0.16446002700180018, 0.2523092138942896, 0.22567232769442702, 0.3049993091870713, 0.11869687998373668, 0.10002438111417211, 0.09456902256011968, 0.22226482189281382, 0.14469498838818762, 0.12203031526644137, 0.2568066989678085, 0.004018874145320317, 0.09324073213739015, 0.050007399332374525, 0.0033119365453480043, 9.999999999998899e-05, 0.051060546645058436, 9.999999999998899e-05, 9.999999999998899e-05, 0.08339976380049852, 0.10368817340373226, 0.10706545837836257, 0.06554057113768541, 0.09339105352571675, 0.0749633363020501, 0.10307774420672089, 9.999999999998899e-05, 0.02080945176769311, 0.12261970615344786, 0.06819948127142872, 0.098846037762917, 0.12239981328336691, 0.030241798561515654, 0.03346961868994347, 0.12128550475379196, 0.0661432929098894, 0.07875151676481784, 0.06914390959656136, 0.12404784405684155, 0.11329286673380645, 0.20174306741765835, 0.03973356806242301, 0.22385653628860092, 0.09941469830292737, 0.1714702036299286, 0.1444606429320886, 0.051120319144292936, 0.1498524796848415, 0.1350843047720377, 0.480230444006044, 0.5658467917435028, 0.4545174036514674, 0.45535724878096473, 0.4586227288837307, 0.5374156328835791, 0.5300521818138106, 0.48071979982586555, 0.5032962213938241, 0.09084570249979462, 0.12160668448230516, 0.06045895399568324, 0.10196248696710897, 0.09437788024206561, 0.09211351208183094, 0.05308990608397979, 0.10871560398839497, 0.08766307306351351, 0.16875904485856552, 0.2267195655999571, 0.16003888010210265, 0.26828973874739126, 0.2165031737286266, 0.13891881510947846, 0.2665979599287782, 0.19721923247081885, 0.24663968201294817, 0.21029334998325144, 0.27023682213394185, 0.292602976802009, 0.289896464723297, 0.14447861128164674, 0.24913486485231062, 0.31451503190787644, 0.2176450268953979, 0.2448771476331666, 0.1297578838200577, 0.12982219485261393, 0.2204675006045823, 0.16809832223547239, 0.18667700084618888, 0.17014629683909932, 0.22199175465571375, 0.23444801314194152, 0.1678916905468235, 0.19079322670601773, 0.1495948584471165, 0.16152858308262752, 0.16758954377346869, 0.15699953674446498, 0.1709852467777231, 0.20143225141794674, 0.16982312017269796, 0.1722879618079276, 0.17724628180218083, 0.1968498762205, 0.2393857510654286, 0.22301014316197632, 0.5927259458356432, 0.18611322887115989, 0.20353422830147383, 0.19688562405859655, 0.22462000853480435, 0.16088118042581623, 0.12440331534782778, 0.15243118518874021, 0.17112148004838568, 0.19640862396809688, 0.1966886763454586, 0.09940279369792593, 0.16971783380111338, 0.20268545486968026, 0.6314967921307906, 0.15297823859804016, 0.10861451968558034, 0.10304783357444758, 0.16836462551025744, 0.20530633629453265, 0.10338044004853686, 0.20994555936062675, 0.7095199832450161, 0.17828129719318497, 0.17312263535467642, 0.19119962689268555, 0.18457060599716746, 0.19323054326119282, 0.18533817809778497, 0.1750657531335863, 0.17901024426109546, 0.21958703572468963, 0.07799454122259764, 0.06458397516209968, 0.07082089111459322, 0.057840436008365526, 0.07946587775288338, 0.08949196015943794, 0.042753885512061385, 0.051491518362662636, 0.0669387329734269]}, "mutation_prompt": null}
{"id": "22c595ad-17c5-4317-a12e-63820889681d", "solution": "import numpy as np\n\nclass DynamicMutDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            mutation_scale = np.exp(-func(population[i]) / func(g_best))\n                            mutation_range = 5.0 * mutation_scale\n                            u[j] += np.random.uniform(-mutation_range, mutation_range)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "DynamicMutDEPSO", "description": "Implementing dynamic control of mutation step size alongside adaptive mutation probability based on fitness improvement to expedite convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "An exception occurred: OverflowError('Range exceeds valid bounds').", "error": "OverflowError('Range exceeds valid bounds')", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {}, "mutation_prompt": null}
{"id": "cc2507ff-14f1-4070-bcc8-aedb627a5bbc", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "1d553652-a8ca-4143-a3ff-d3baa0c72747", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "53dd53dc-cafe-4d2d-a75d-374b4413d5d1", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "4e31c309-9b31-4448-9d5f-79a90dbcd32d", "solution": "import numpy as np\n\nclass FastDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            w = 0.9 - _ / self.max_iter * 0.4  # Self-adaptive inertia weight\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n\n        return g_best", "name": "FastDEPSO", "description": "Implementing a self-adaptive inertia weight to dynamically adjust the exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 55, "fitness": 0.18883324211721172, "feedback": "The algorithm FastDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.3936480248322146, 0.4221129385599983, 0.43156275202794336, 0.35798242187262175, 0.40645287614583236, 0.39290348488713656, 0.40017418753838085, 0.4193886899960464, 0.37253048580330506, 0.09444918472955721, 0.10182639748501365, 0.1325497829462523, 0.15002565451960947, 0.1351649509428351, 0.13053919420814508, 0.16309202362880992, 0.18902648027448232, 0.09669847829426814, 0.13649265954513046, 0.09399944342488764, 0.10218376444190913, 0.11270195203956279, 0.09561470692476448, 0.11255677455930146, 0.12149905310375575, 0.10396901891834043, 0.10432594677191354, 0.10780514406336839, 0.08112719387904277, 0.0938410855401195, 0.09596931141159726, 0.07274274762073696, 0.09321153747690847, 0.10318819420118475, 0.08190446265828, 0.09149403744456941, 0.9733489191758912, 0.9965306625090832, 0.9949021052667019, 0.9779647248125444, 0.9601838188705336, 0.984134050681949, 0.988037304478392, 0.9489186015248741, 0.9938350487050991, 0.2492564634908806, 0.26750767591318614, 0.24948807032070197, 0.1954071058044854, 0.20568809999603832, 0.22635912162862037, 0.20642602367332907, 0.22054638176795427, 0.18295110975289985, 0.21826535126239854, 0.1564742744586861, 0.21268665739539927, 0.1945677405490578, 0.26765763111996066, 0.21757707752979394, 0.21357528380829438, 0.21265562932556203, 0.2492073183769956, 0.10023955114004879, 0.11987763360114512, 9.999999999998899e-05, 0.1227198069187303, 0.12008307899073445, 0.1292802517642856, 0.15206856933168733, 0.11730358191132328, 0.11948211950328391, 0.11921962391100493, 0.06848165163165154, 0.0902326663699361, 0.11289675117634046, 0.09679521900185029, 0.12709076661631602, 0.1113899907227307, 0.12725166080900074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015054108903840846, 0.035501096334451754, 9.999999999998899e-05, 0.022789384955218317, 9.999999999998899e-05, 0.009808880050239499, 0.0033437819558445048, 0.0670279729878055, 0.06003565076821249, 0.06011004732318126, 0.14272375456339925, 0.0012428998665869884, 0.015142730534707716, 0.0671528227825684, 0.048806527045806236, 0.02637612796822819, 9.999999999998899e-05, 0.0003614686118891264, 0.0004136754756435268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000239025704508955, 9.999999999998899e-05, 9.999999999998899e-05, 0.06869700700995673, 0.07870711751929227, 0.10356142587122974, 0.07040173872453492, 0.02654885094134718, 0.05573883863780682, 0.047966959322315095, 0.0743329053510442, 0.07757702811533818, 0.3564867131364431, 0.3738130133691687, 0.34105079318328424, 0.37490496106076043, 0.35671973446925664, 0.35808733685447136, 0.388634752363328, 0.3729910721160129, 0.38751718144516367, 0.0721898296321899, 0.04949964607251589, 0.07885617619349017, 0.07478945616151889, 0.08206770007586606, 0.0815346705497948, 0.05854029293851948, 0.06322251333593631, 0.09367368462566628, 0.18653116479602527, 0.17808809985384122, 0.15920960037192744, 0.22073507482408805, 0.21710839490991352, 0.14803570933110155, 0.18261618921129985, 0.20309715615459578, 0.22508361859163384, 0.2035574660546623, 0.28364255224939394, 0.20367803943552487, 0.2531814649120203, 0.1461576113743186, 0.2782553579991244, 0.2539945242938201, 0.23295436244230683, 0.23513843762899023, 0.16521874127208158, 0.087312790356738, 0.13574633888297283, 0.15031170448966458, 0.18317889873497073, 0.17967865298820995, 0.17810024120191825, 0.16684642322625587, 0.18103507837083876, 0.1914335010410937, 0.1404929906047333, 0.14937907813204543, 0.15961805647132754, 0.19621590350354368, 0.16018679445018336, 0.17864318104237942, 0.1607685544638493, 0.17514139350439217, 0.23192578368729522, 0.20786957293754926, 0.19117172042484576, 0.21000799111295143, 0.18192630221549166, 0.1873531148285832, 0.20283635922210919, 0.23507046571455648, 0.1784780822914609, 0.16384967334431422, 0.12282553008714181, 0.1520338179636599, 0.47673876315966357, 0.19652423339116998, 0.1957026865583894, 0.09911063914005314, 0.1697566166660317, 0.44674530555123015, 0.42289357637780056, 0.15386389215035945, 0.1562124146224414, 0.10220057143102568, 0.16658479654501313, 0.20449787794785002, 0.10394243661468461, 0.10392008543565956, 0.321268740519851, 0.17051153134281727, 0.1677840910324232, 0.16195727731540488, 0.1595954166134006, 0.18873590426877596, 0.17515123007550026, 0.17694938650077563, 0.1694505562958184, 0.20458337909112922, 0.07212386628481726, 0.04073830499199027, 0.06709740864060354, 0.05844606099319061, 0.06228403400599969, 0.07264715451295856, 0.04643218368884805, 0.0703864790338572, 0.04866026229085907]}, "mutation_prompt": null}
{"id": "70701775-5a89-484d-a8fa-026e836c65d7", "solution": "import numpy as np\n\nclass ImprovedDEPSOImprovedConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step) * (1 - 0.2)  # Dynamic mutation step adjustment\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSOImprovedConvergence", "description": "Utilizing a dynamic mutation step size adaptation strategy based on fitness improvement to accelerate convergence speed while maintaining exploration-exploitation balance and adaptive mutation probability control.", "configspace": "", "generation": 56, "fitness": 0.260783956218619, "feedback": "The algorithm ImprovedDEPSOImprovedConvergence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.8061966650313855, 0.8402474627641091, 0.7888323681123682, 0.7856725464144875, 0.8416811243761833, 0.7919853253745508, 0.8331491882203106, 0.7885786216071594, 0.7899852359987887, 0.6405835070418653, 0.5992737583100272, 0.6205488506384886, 0.6518014012696937, 0.6368588236205555, 0.5728562464970848, 0.5818221931448117, 0.622349948049754, 0.5384371474649162, 0.1464650810540563, 0.125735731858446, 0.12086360143738095, 0.13908944057919648, 0.1443006323208923, 0.0851003059077442, 0.16415591096244064, 0.12834259501951673, 0.11655949738351923, 0.09231877030165614, 0.1163621168370148, 0.12011569100063102, 0.12270667987128714, 0.08951910156017528, 0.11699208064144184, 0.0908874011286318, 0.11266434204089804, 0.13886572508373052, 0.9735084419399487, 0.9910762629115455, 0.9935555086877621, 0.9884754216148743, 0.9906022392769235, 0.9616512788911167, 0.9809108416045957, 0.9739679076792872, 0.9649319268654469, 0.3502831345317766, 0.2942280936164907, 0.3628571013614401, 0.28800883995602944, 0.3317168980439241, 0.37400794704410756, 0.40006812772797085, 0.278240332787818, 0.31132078955703757, 0.21372765013804784, 0.31060151232950206, 0.21916303824637562, 0.3202744401836637, 0.2974615033048129, 0.21196421193966952, 0.09143846648785225, 0.12668927116444517, 0.18827365199648072, 0.23916252921304626, 0.2706639742323902, 0.11202027217980581, 0.20316895315676153, 0.1812315933094094, 0.28306802890747806, 0.30631812205097786, 0.19192436084744868, 0.14277529455554416, 0.25777405013844756, 0.2520523703478289, 0.1058095182418427, 0.2607125209443516, 0.21518268214441216, 0.12750036478161308, 0.15912312001320184, 0.09414758188468508, 0.1002903500905773, 0.014362768894023215, 0.05935898463730338, 0.021947922275610154, 0.00019140236058079463, 0.005271543614175811, 0.015291267182335977, 0.06819276695688747, 0.008786434993639292, 0.07308377849617687, 0.053485542803118236, 0.10783236126561169, 0.08062366278226252, 0.06592976644823212, 0.04142533107255808, 0.06260271129267825, 0.2319404637612159, 0.07759521923832469, 0.04383424791327184, 0.19220863366752294, 0.07088525055260708, 0.07611818264483883, 0.10227009780959617, 0.11505742059163404, 0.08593029470849212, 0.2219217408995251, 0.06169884514655277, 0.060347307649906035, 0.10906426060439844, 0.1501425975824484, 0.09922051372113405, 0.12934578875228253, 0.12291295626724075, 0.09199945825337907, 0.16804609009780125, 0.05775646971075543, 0.12207799979152256, 0.5547161603442171, 0.54609326438639, 0.5637196520048438, 0.5555672227020783, 0.5347563426270597, 0.5063559532608655, 0.4919927913438269, 0.541116891904126, 0.5248701597109944, 0.11989471396820395, 0.055367965295344934, 0.094770091797314, 0.09166343026511936, 0.08030040500850322, 0.09530094285122637, 0.1280999897444628, 0.13256245736462602, 0.06589462144799074, 0.3458485099772022, 0.17924731262496607, 0.10427766785011061, 0.1959807410738449, 0.2343182048006559, 0.21253207283778497, 0.26228908825755537, 0.1813014988941416, 0.20275772374957746, 0.20801499335236806, 0.25923266364188535, 0.18564914819189426, 0.18135350685138696, 0.22690283304358594, 0.2567606200615755, 0.21469575129309593, 0.3319129127848276, 0.24583308469484477, 0.15240284282859595, 0.1080507521935733, 0.19677442738820106, 0.19893578528951716, 0.1236816201840838, 0.20403680186854833, 0.15201954887507618, 0.27024127947845666, 0.2830744838768031, 0.20612338147002385, 0.16419966553843657, 0.1732546072631993, 0.15643996946039784, 0.1586083974202417, 0.1693529334037578, 0.18813371052907646, 0.2109400161248277, 0.20686336452008003, 0.19667123483149496, 0.17208597500974354, 0.1732261362360369, 0.24889699061963477, 0.18883013556796846, 0.18889210751718366, 0.20017079008031846, 0.18040585714073565, 0.18700986368750305, 0.10400482425926327, 0.12558198352439054, 0.15285969806275101, 0.17235881324628188, 0.2005021116578114, 0.11682817346649932, 0.09975153058457653, 0.16846536142109958, 0.20456787035627133, 0.7893562545324173, 0.15585399591602922, 0.12390662707744815, 0.20465729225532014, 0.16908383861273124, 0.2084648866031964, 0.10364854342160101, 0.10413286124153542, 0.7682793385031225, 0.1874059262586979, 0.20084045635062908, 0.18620610389405623, 0.1694175245592856, 0.1590793111633051, 0.1712248379248611, 0.1687818407304641, 0.17918678621457895, 0.1975302884617557, 0.07728274026369597, 0.06824765220183815, 0.062153751498500776, 0.0663473411104587, 0.08862337286454636, 0.09126279529791503, 0.09199181605170781, 0.11023241419275964, 0.04734578073467799]}, "mutation_prompt": null}
{"id": "a2d6f83e-90af-4c15-9893-42131bb03ebc", "solution": "import numpy as np\n\nclass AcceleratedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_w = 0.4\n        self.max_w = 0.9\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n        w = self.max_w\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    w = self.min_w + (self.max_w - self.min_w) * (func(u) / func(g_best))\n\n        return g_best", "name": "AcceleratedDEPSO", "description": "Accelerating convergence speed by introducing a dynamic inertia weight that adapts based on fitness improvement.", "configspace": "", "generation": 57, "fitness": 0.18730813501404808, "feedback": "The algorithm AcceleratedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.42040782134622123, 0.4055876730353186, 0.41909135411970433, 0.4331675066882168, 0.3843538981321276, 0.3964419527006181, 0.3836089347812506, 0.41373134666072664, 0.3804911781771301, 0.12644039637375737, 0.13737671610553392, 0.09526573059622967, 0.13079968256792796, 0.1311432966544982, 0.06952397293750368, 0.13629187393909092, 0.07906435167905634, 0.119378587793186, 0.10867336630717606, 0.1306106458184524, 0.09755815098479148, 0.1105366565674949, 0.10639197809038747, 0.11476358530739794, 0.11708189138031355, 0.0995206860510105, 0.1003524007672899, 0.07400992369323844, 0.10545601772089142, 0.0704860482530445, 0.10673925083095948, 0.11182112970926483, 0.09803540632472818, 0.06745277549733786, 0.09737617056670755, 0.07561141611215083, 0.9717000301006098, 0.9963407740717056, 0.9943554883903701, 0.9766955684799143, 0.9581568225743539, 0.9826947253744054, 0.9869760527601085, 0.9459840297811296, 0.9931069804952312, 0.21064546264623862, 0.22088656719094757, 0.2361845848188826, 0.18672602558307538, 0.21776817287595873, 0.20980409318660165, 0.18772138128720173, 0.20342063029221424, 0.1680051605863413, 0.21958225786259378, 0.1876387540720139, 0.19704424257824726, 0.19443496800231153, 0.27112031795155045, 0.20499556553075604, 0.24583710974594153, 0.21454515898080728, 0.2178699077290679, 0.166464078608624, 0.14904365243123208, 0.00030524801744413743, 0.12317675251832028, 0.11922455816180733, 0.11843410169950552, 0.10993921934537099, 0.17575602650972377, 0.14293820167815263, 0.1271580940977841, 0.06792273151715056, 0.08227725641256567, 0.11195933135670844, 0.09735971878613636, 0.12673902037285212, 0.11915074638971423, 0.14260360513281334, 0.0013178421603095014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03244067371251114, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0787389556120155, 0.0310240523351063, 0.06774476655377015, 0.09475239447535166, 0.008890072391145809, 0.048509557084561505, 0.08310656348306988, 0.039082179456211064, 0.02289758041956902, 9.999999999998899e-05, 9.999999999998899e-05, 0.00739184624929945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00940547625639343, 9.999999999998899e-05, 0.07035948919672741, 0.08206720690591063, 0.08766599164725342, 0.04712361552519784, 0.07372399734373669, 0.07829497370525185, 0.062406530844659525, 0.06934055573436948, 0.08197269617087932, 0.3311731313352889, 0.35067528945281, 0.31555533155563253, 0.32189425419289897, 0.36762058993656666, 0.3435081067170237, 0.3856072280060987, 0.3350757593389093, 0.35166590563324285, 0.07736507524939296, 0.04285079669770453, 0.08149814335027472, 0.07072648676824389, 0.051837919141108246, 0.07084030793417517, 0.0553214412557016, 0.06502219395986597, 0.11654204245416455, 0.15993935376291357, 0.20415701440021927, 0.13483415403546473, 0.21021404461523419, 0.2134289874748625, 0.1166832402886272, 0.17396013000463284, 0.19762345646936408, 0.21890393195320124, 0.1835503341916942, 0.2376071370433417, 0.2153700937019566, 0.23964429766742545, 0.14666721588423004, 0.2817448070146179, 0.23743251736231952, 0.25725414775505206, 0.23694828147651337, 0.1528766076734024, 0.11770732489515245, 0.15171960354423586, 0.14944541087383856, 0.15994850084197332, 0.17591961680182888, 0.2000302398122933, 0.19502110564866149, 0.20824609537696293, 0.16757374478550613, 0.1662432413224254, 0.1524972990200365, 0.1714616405834264, 0.1575689514670796, 0.16869868435864555, 0.17817101812885394, 0.15891186554552728, 0.17034012725832093, 0.21408878199098003, 0.20047222843567836, 0.18801228193871622, 0.19954182155910216, 0.17806098827345818, 0.18816789127865619, 0.20330768392109255, 0.24578607627085425, 0.16700901707245608, 0.179642345227091, 0.12417687130658162, 0.15184030675428495, 0.49990910509856146, 0.19603468334438867, 0.1954722869134251, 0.09915805260170873, 0.1696721850903843, 0.48646618950225806, 0.40733061526414227, 0.1536188880207866, 0.15671436915378767, 0.10262896388330667, 0.16666519304056204, 0.20471262571814153, 0.10387392408592311, 0.10380670272985704, 0.3450824296665421, 0.1755796592836163, 0.18440670100967593, 0.2060604207633815, 0.16814094490981224, 0.18589463527644645, 0.1697145688648095, 0.18543703769534314, 0.17104058015447587, 0.17836345961700772, 0.07335084906151701, 0.06537763791880102, 0.06658092320360465, 0.061548393468890406, 0.06285531190653892, 0.04660162073133867, 0.07654884439389276, 0.07596229729842052, 0.05562257579662566]}, "mutation_prompt": null}
{"id": "781ec746-aec0-4f4e-8738-51080c865768", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "f367ce33-76f4-4bfc-93f8-b6278af4aae3", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.initial_mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            mutation_step = self.initial_mutation_step * np.std(population, axis=0)  # Update mutation step based on population diversity\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-mutation_step[j], mutation_step[j])\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n\n        return g_best", "name": "EnhancedDEPSO", "description": "Enhancing the mutation strategy by incorporating a dynamic mutation step size adjustment based on population diversity to accelerate convergence speed.", "configspace": "", "generation": 59, "fitness": 0.26565406330043706, "feedback": "The algorithm EnhancedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.8112235452541341, 0.7994880566540498, 0.8029861912518999, 0.8180942593956653, 0.8160711790000419, 0.798637613104057, 0.8165723184063104, 0.7997663604395122, 0.7956505597562621, 0.5857441627526707, 0.5492297737200419, 0.5210501151893308, 0.6204635339981386, 0.596549362065044, 0.5653826164247988, 0.3053308498224764, 0.622721123049155, 0.5610071765092443, 0.13591628025258173, 0.09816017904854457, 0.09595928200166404, 0.0989584490394454, 0.05426696702070588, 0.07436166739945127, 0.0865941113000065, 0.061828819384712186, 0.1300538118605653, 0.10836048262211151, 0.09100516897243194, 0.08961494290037952, 0.10507810059243239, 0.0923270990403866, 0.07499308840175511, 0.07857880101213299, 0.08032310453496871, 0.10935311023292815, 0.9738126580884532, 0.9965256056409635, 0.9912816986895542, 0.9928518624346379, 0.9499497713961511, 0.9833032886810031, 0.9900676066753061, 0.9552695665909392, 0.9862592609931526, 0.3540541975826663, 0.36359350412110814, 0.3309723463905163, 0.3795299342312465, 0.3573865804417574, 0.37163900325184684, 0.36625915691513256, 0.34792610402652635, 0.36176137418313004, 0.22339905544209238, 0.21349083755543274, 0.2024953050732684, 0.21145500260524086, 0.26876897115854237, 0.190153669902425, 0.21501331698616233, 0.16504510260824967, 0.1692165114406775, 0.2403048259720023, 0.1834907217892996, 0.11024361757283385, 0.1753419202504951, 0.11824963255804088, 0.11934209979716692, 0.12626533134271445, 0.31157077111192055, 0.22447038293136345, 0.2290145676915587, 0.191396525521061, 0.12172422351250367, 0.18104519872687497, 0.2434897508962992, 0.3161656137954535, 0.09977206919486725, 0.24025938220495968, 0.22547325470329405, 0.003862020396254051, 9.999999999998899e-05, 0.03923990917521336, 0.039651071041648, 0.004162367611269979, 0.0028497254604599176, 0.055767656240911845, 0.008451892423151697, 0.005623433447842774, 0.09218326527143705, 0.07268028718023456, 0.1555302720104026, 0.016535497325341986, 0.0011637508771871197, 0.02771553575709318, 0.1637921262686356, 0.13198658999679413, 0.059892240746281966, 0.05622454998794124, 0.032321748010784024, 0.2997739933196236, 0.1731418872353857, 0.08696485338286786, 0.07010788335951479, 0.12847323799766308, 0.09198543125648395, 0.06563066001136408, 0.21054399647158561, 0.10793872053886222, 0.2550467636701512, 0.1527831382805036, 0.10426304485892657, 0.11850397508882238, 0.1206765833027319, 0.06228021243273929, 0.07950036965825169, 0.5324777967535432, 0.5212807451115588, 0.5370069728686993, 0.5506053772735833, 0.5264417303222901, 0.5364072663322371, 0.5173041420392127, 0.5578272427360211, 0.5121649040944829, 0.10237997609021388, 0.06902583434559129, 0.0941679275082552, 0.08899135830215932, 0.1346258404781847, 0.11125779289056614, 0.1313923167886658, 0.11032789587513636, 0.06698637487718129, 0.15987615461874138, 0.20539124529149466, 0.22421912938952415, 0.1671605489014224, 0.24400733399717156, 0.12211810986211791, 0.18692319684918102, 0.12859142975820892, 0.24135588743496483, 0.2519932700131896, 0.3143683947431203, 0.2557604340801025, 0.19531970091147388, 0.2273032640202335, 0.21097358438416203, 0.2850421533919407, 0.3319233784025103, 0.1740035378056769, 0.11464381435005488, 0.23407640228852422, 0.2412999808068439, 0.16244253799644814, 0.2407361693229888, 0.24641497857671568, 0.19034339188412153, 0.36933085090743734, 0.2031745346706585, 0.16940833995204052, 0.1434778975770833, 0.18156901144918713, 0.16223514397807104, 0.18857997817168803, 0.2108486019131217, 0.20646488028542842, 0.18513361767322045, 0.20644634108520787, 0.19666601172266185, 0.17365923655708737, 0.1899627223096163, 0.18151775605798726, 0.2481268175354715, 0.18158507958094983, 0.1593923600770215, 0.1898626225550344, 0.18418658808693433, 0.16196620456475996, 0.12470283041626995, 0.15239642623018823, 0.8324106593923746, 0.19625649063283912, 0.7925213768365743, 0.12063654413242397, 0.16895856379053675, 0.7993820535879023, 0.7878588340827424, 0.4764344236853173, 0.12612965069230575, 0.10221300387836363, 0.11060977677605788, 0.2062115413119705, 0.10424043648625825, 0.10424313844980093, 0.6035966541950617, 0.18151090639817868, 0.17016715211280498, 0.15753042311860155, 0.16788529178368605, 0.16232180746827185, 0.16632215611296475, 0.17425065408905116, 0.17347787029157102, 0.17042071119796187, 0.06988768588101979, 0.07047934896858554, 0.07591656696869908, 0.0478185372933142, 0.05935856345631141, 0.06488694534946482, 0.05975011788542217, 0.05507244842467063, 0.07671182585436453]}, "mutation_prompt": null}
{"id": "a232839f-054d-4ef9-9e28-781b45fcf73c", "solution": "import numpy as np\n\nclass FastDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_step *= 0.95 if func(u) < func(g_best) else 1.05\n\n        return g_best", "name": "FastDEPSO", "description": "Improving convergence speed by dynamically adjusting mutation step size based on fitness improvement, enhancing exploitation of promising solutions.", "configspace": "", "generation": 60, "fitness": 0.18602009289630125, "feedback": "The algorithm FastDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.37177520290914334, 0.35819404986027725, 0.4465374860273429, 0.40524264545992084, 0.36761222603740795, 0.44020763339817703, 0.40956093165727725, 0.41183827506952986, 0.3877928830234647, 0.11572094046147263, 0.10906130644937917, 0.12480454268430674, 0.09675372442875374, 0.1481956817536222, 0.11917799283068109, 0.1263938621323647, 0.2295935251480964, 0.11109847015489138, 0.08630189100834451, 0.08494818499731482, 0.1335765617032545, 0.12137455231344174, 0.1282406478621666, 0.1098372447486825, 0.12077240061472672, 0.12269604058412331, 0.10272353495926423, 0.08223674165111627, 0.08049431078577507, 0.09030771905956314, 0.08509732958022376, 0.08693499409941052, 0.08354731299637319, 0.11829723470210718, 0.09780780384445098, 0.09008477798029202, 0.9869949094037492, 0.992974090837109, 0.9937401247412165, 0.9770964803004386, 0.948611527912215, 0.9821481087806667, 0.9792764425156072, 0.9465431423960862, 0.9720975788821331, 0.21103014442854018, 0.1812922029601215, 0.20638407846292206, 0.1739436074116245, 0.20125645652389124, 0.1753878899834852, 0.18528396600162744, 0.1671942808334086, 0.15221149782372723, 0.2188472505676553, 0.2743296274994441, 0.19816466255808463, 0.207309215504213, 0.21177550719896276, 0.24584954390623714, 0.15925126690390012, 0.18128582518721392, 0.22477471251065384, 0.10705017073110734, 0.14513830412616135, 0.039492963021498184, 0.06898178828579182, 0.1363004905359676, 0.10207834982823738, 0.11897163665765365, 0.11574607196074072, 0.12393273057176046, 0.17784646869687382, 0.1533985580111239, 0.1581365588208382, 0.0916127484255832, 0.10801719383769137, 0.11687242969841649, 0.10571634113879902, 0.054601100480383136, 0.05697076508222565, 9.999999999998899e-05, 9.999999999998899e-05, 0.008048322393071405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006597806723314892, 0.08888967510570633, 0.046708791560123974, 0.05700470726447404, 0.12409289468605278, 0.003228758374355989, 0.029655635236842892, 0.08551893672369915, 0.0626892555028582, 0.035894006192517036, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009708973677033939, 9.999999999998899e-05, 0.001654530824635958, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07479307903115529, 0.07713955040994935, 0.05974429617389976, 0.08000805432592772, 0.08356270197752824, 0.1343113981166898, 0.06712998216260746, 0.07550638833584944, 0.054804866284199893, 0.3280842744632507, 0.3432929776287058, 0.36560509702544786, 0.3583848822399536, 0.34597502715118966, 0.33752283621259105, 0.3780742538910048, 0.34868282150858565, 0.3622870556723504, 0.08433984168585562, 0.07029354178675518, 0.06370067055999551, 0.08602319638929823, 0.0973117397610207, 0.09753709562302215, 0.06978161708201713, 0.08067805341196521, 0.06971898389576603, 0.1431372015881165, 0.2007525716259454, 0.20016635756213197, 0.23366296298629619, 0.2423564331050615, 0.13884270727416315, 0.22385372223624367, 0.1859763452427028, 0.20672344597872272, 0.18981763659196982, 0.23398265768484205, 0.26269575885497, 0.20917427039799807, 0.25292353420608626, 0.2614669262903687, 0.21309144021518678, 0.2047836753265455, 0.24211861809450952, 0.16445239462541217, 0.13726210925887772, 0.11743924183042709, 0.16638935187448456, 0.15193189758915837, 0.1838297388180018, 0.16098681044946384, 0.1879026656861119, 0.16278103872916438, 0.2435004587300933, 0.15123804780272798, 0.17687339626830567, 0.17099573297296378, 0.17266908128177727, 0.18953633390942448, 0.19532368187368943, 0.19210922909098604, 0.17814348615300224, 0.1863976991316596, 0.19200152247051205, 0.1758076808744239, 0.17860179503522577, 0.2075294181922559, 0.1699268101734298, 0.1861793739212212, 0.19853515901131102, 0.19682104008825207, 0.1664991869855501, 0.12502326815213782, 0.1523832631673966, 0.21579829415591179, 0.197087926641492, 0.191762818224126, 0.09952126211250001, 0.1691592493772549, 0.20794898406889983, 0.42881290129679095, 0.15449389821119586, 0.11904521611812902, 0.19642807996782774, 0.20632704131122626, 0.20087665739132732, 0.10331645049101668, 0.10350762073779018, 0.20029138819988912, 0.1678367733537407, 0.18313831565455863, 0.1743561566501387, 0.17145301991519823, 0.17394814408802428, 0.17967981869681648, 0.18135835934350042, 0.18027231590603077, 0.16986200538885354, 0.07129859297175245, 0.06578123067130548, 0.08555252284551884, 0.07781980208563777, 0.06694237625457444, 0.07002654084164661, 0.05652519845109816, 0.06858759800249048, 0.06951835108103566]}, "mutation_prompt": null}
{"id": "cd5a6c7a-0c0e-4650-95d1-697fd9c46460", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "a6c7200f-d7fb-40fe-9b0c-30200018e233", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "074f8952-7660-4e51-90eb-599e67115bfc", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "aef8739e-62a1-4387-b71c-34204704aac0", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "efccf764-7ece-42d3-b631-01cfcf1bbfdd", "solution": "import numpy as np\n\nclass AcceleratedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n        inertia_weight = 0.9\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + inertia_weight * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    inertia_weight = 0.5 + 0.4 * np.exp(-2 * np.mean(np.std(population, axis=0)))\n\n        return g_best", "name": "AcceleratedDEPSO", "description": "Accelerating convergence by incorporating a dynamic inertia weight that adapts based on population fitness diversity.", "configspace": "", "generation": 65, "fitness": 0.1987390031773859, "feedback": "The algorithm AcceleratedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.46986396039800404, 0.42720208586981423, 0.45350410266320185, 0.4222923730455487, 0.4332072281561742, 0.46817367335244664, 0.3932520837435347, 0.42865198566817153, 0.3997560319522019, 0.18542867141602015, 0.20348022432935509, 0.13404204162675126, 0.1668295626523848, 0.1461422487492684, 0.12701968081920967, 0.1702317667171359, 0.21783891895787155, 0.15251929066184944, 0.10633187637275665, 0.128729676288715, 0.10971559186219981, 0.12489698975095032, 0.09335314884085277, 0.10556156707852549, 0.11116572909597966, 0.11104558076452253, 0.11731239459830067, 0.13167415097113677, 0.11330526177653899, 0.1256537738303003, 0.11911328969607149, 0.13159381650508517, 0.11656095305682757, 0.09797232207932483, 0.101576490119068, 0.0799709749974431, 0.9882987459598991, 0.9938430183003384, 0.9912949696830818, 0.9744379142528681, 0.9502687082099192, 0.9837553282449957, 0.9777056241785963, 0.9591085084941426, 0.9852247347960787, 0.26505922090315015, 0.22997444232379027, 0.24489732440652956, 0.25143879915763, 0.220409890324904, 0.19746041978657958, 0.2733837781533889, 0.22717651758514001, 0.23271011050151624, 0.21610859508346925, 0.20794834404328577, 0.1808016723926027, 0.19417924651313923, 0.34461492950420713, 0.20659319863386139, 0.2028369383032903, 0.21349007569124412, 0.2306300321063086, 0.18496966192069986, 0.1331563828885668, 0.07668313794094794, 0.1113191028445828, 0.16250578147303896, 0.13493096366167268, 0.2107859349964405, 0.10894740997626928, 0.14217670214919054, 0.15164335901836534, 0.14338505677464197, 0.10080255253883585, 0.154788964622529, 0.20971366474008346, 0.14459176938665974, 0.11306294800961836, 0.07576923167159166, 9.999999999998899e-05, 9.999999999998899e-05, 0.005005678828080229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030401191437791075, 9.999999999998899e-05, 0.06888767903414506, 9.999999999998899e-05, 0.04470222631952425, 0.03676111724336972, 0.08438209176081635, 0.16980525532127522, 0.007049485489000973, 0.027175467992038294, 0.10846777745649983, 0.049780080271799254, 0.037058932962225066, 9.999999999998899e-05, 9.999999999998899e-05, 0.00016690507106209562, 9.999999999998899e-05, 0.0019746583154088837, 9.999999999998899e-05, 9.999999999998899e-05, 0.005045889815040394, 9.999999999998899e-05, 0.09163646270099157, 0.08635035292312643, 0.0940565745173817, 0.09087441949360686, 0.0974865758950646, 0.06040338726420502, 0.09362342350756958, 0.048985373210479355, 0.09337572029337715, 0.41058990760109415, 0.3773887178705042, 0.38566880462169906, 0.37087973823280673, 0.36655700887173837, 0.39627788034847045, 0.37266264994376375, 0.3611283578818354, 0.3619828953835217, 0.0836363784423424, 0.10097761738619815, 0.09494729864777962, 0.1010527965983622, 0.08669639116778105, 0.07073416261827892, 0.09176941669090388, 0.08540563147705293, 0.06488389893068525, 0.1494566570855328, 0.16552095546594991, 0.17508051099576005, 0.21252388063624483, 0.22079116552324762, 0.1412757763927288, 0.1464799568243227, 0.1726817779947014, 0.17397097034419162, 0.18645637479605082, 0.27361777841797597, 0.23330950258955474, 0.24476084050616032, 0.27306212689788, 0.2525447939884802, 0.2946428549365314, 0.24453187618685335, 0.24350285857509213, 0.12891019302811946, 0.19009253822058614, 0.13125965208473356, 0.13768368860686164, 0.15438147703597005, 0.15921291764976653, 0.18880911390774002, 0.2313395574275583, 0.1619770132265823, 0.16669403962336105, 0.1654858010514907, 0.15728713365121516, 0.17003253123247775, 0.2275844126718911, 0.19157757146749532, 0.16999280265640937, 0.18839226515008156, 0.16890406951756998, 0.1919066349085281, 0.18783185597317154, 0.1952516121244009, 0.21131800237896703, 0.1717380480662134, 0.1884278863187695, 0.19267390976726773, 0.2659090267088481, 0.18579884070638109, 0.10349117238183625, 0.12489787070837688, 0.1530567807547657, 0.1716406425480712, 0.19867235837408426, 0.1961621940365622, 0.0993352785542374, 0.16973846448176644, 0.5390480243679523, 0.5869366286451716, 0.15402119041994233, 0.12258525680418242, 0.10422731716657962, 0.16712593223382588, 0.20340262409658116, 0.10385931878476318, 0.10398938930026491, 0.41038473645437556, 0.17199458570471382, 0.16490096242468222, 0.16887007990448388, 0.17655606372926247, 0.18447088001691003, 0.17382574707467024, 0.20982947416152875, 0.1792496368262071, 0.20843225010695388, 0.08042093912403359, 0.057384664096444826, 0.07118782931046297, 0.05561634164287732, 0.05225479365402097, 0.08192476779017255, 0.0589631193712008, 0.058417594784383575, 0.05757808500336792]}, "mutation_prompt": null}
{"id": "7306ea10-553e-4134-a3b2-02d7c67bbce4", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "2b220d96-0bb7-4c7c-8a01-068a83d8f1dd", "solution": "import numpy as np\n\nclass AcceleratedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n        self.max_iter = budget // 30  # Adjusted population size for faster convergence\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(30, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(30):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "AcceleratedDEPSO", "description": "Accelerating convergence by incorporating a dynamic population size adaptation mechanism during the optimization process.", "configspace": "", "generation": 67, "fitness": 0.2689197680494273, "feedback": "The algorithm AcceleratedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "0e27597a-207b-4589-bc86-2b308bc524d4", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        w = 0.9 + 0.2 * np.random.rand()  # Dynamic inertia weight\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "DynamicInertiaDEPSO", "description": "Enhancing convergence speed by introducing a dynamic inertia weight adapting to fitness landscape changes during optimization.", "configspace": "", "generation": 68, "fitness": 0.23583876172792692, "feedback": "The algorithm DynamicInertiaDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7262362896667623, 0.7219247026969973, 0.6635757835194993, 0.7467668192019956, 0.7483132250762548, 0.7344713750602724, 0.7015277833410908, 0.7300614000788448, 0.7016567845634709, 0.6131797790041906, 0.5280473193689312, 0.4679894062630451, 0.5481364836180573, 0.49546026841774915, 0.4954648972948502, 0.49028855612992184, 0.5161065878702975, 0.461698884593868, 0.13559527399937343, 0.11212780154037505, 0.18032745896632218, 0.12141196880470884, 0.13339212674778245, 0.1350098581424174, 0.11549762368593497, 0.14834045094916015, 0.17030116438634757, 0.10927799986708253, 0.11140552033349926, 0.11338574243417243, 0.10714852446075451, 0.11168446962376744, 0.1109346725062198, 0.1342573583036637, 0.15431954446061813, 0.12373021310205445, 0.9765656788083795, 0.9923903558567617, 0.9950891823010589, 0.9903223001697564, 0.9836168915078933, 0.9620199247127499, 0.9946852020174601, 0.9813378323164632, 0.9799847425459942, 0.2818794229313569, 0.2226539347007752, 0.27120982950483974, 0.33785136136680927, 0.31657450431991807, 0.2540502638859633, 0.2738225626416291, 0.2416994834056676, 0.23096249824903448, 0.22388784070020684, 0.1324169701990794, 0.20374220401279042, 0.20534661131095655, 0.3121733074658165, 0.2423347322491345, 0.16813437958373034, 0.24719363416170004, 0.20400838293827617, 0.08011057782690856, 0.11891146690299925, 0.13784789501492212, 0.17042093429094451, 0.12646495808392155, 0.11760555982936771, 0.25432106487169726, 0.10751990833296698, 0.1765184646927037, 0.13158402803085223, 0.10309238680642918, 0.1273634449255847, 0.19207913665985688, 0.16983621427411544, 0.187064864953286, 0.18507255831450642, 9.999999999998899e-05, 0.0925081425593911, 9.999999999998899e-05, 0.03955047170331305, 9.999999999998899e-05, 0.03547131895207056, 9.999999999998899e-05, 0.011727708385449676, 0.04862377384845129, 0.09489524662608528, 0.05352425614839207, 0.06877791521911036, 0.06826103481694679, 0.04503238406923393, 0.08058353870829271, 0.0075823859411768835, 0.017352840441420048, 0.05087626280432889, 0.0413346196662735, 0.02546860237741877, 0.036269824760956526, 0.035443386022043, 0.07648754704919392, 0.10075726782072836, 0.08074460317024057, 0.06921124064975137, 0.06461984213636207, 0.08055603009821066, 0.06335701648572523, 0.14419092409572765, 0.09126074215159241, 0.18596509407240236, 0.1149992823803927, 0.1758700635982472, 0.13618421924993196, 0.07403047752116176, 0.07174644073750602, 0.07176794233112649, 0.4807331398922835, 0.5174019309106314, 0.49905120285394544, 0.5471354543677087, 0.5192409466832395, 0.5044767103495302, 0.49422694450728466, 0.5027677614391182, 0.485424160309299, 0.12843868761937338, 0.04382691511474568, 0.06347393237975052, 0.0730240736039981, 0.06395686000321998, 0.09951909272230441, 0.08042524762229897, 0.006601366436438716, 0.07759307528072845, 0.1725050346204423, 0.19364846076737263, 0.14357893509566388, 0.1475938564345255, 0.23357851008527553, 0.17224368282055025, 0.18138927757626633, 0.21001850106403286, 0.17638912941323237, 0.18437619264808414, 0.22107573706742856, 0.2529755817972895, 0.20445488314960591, 0.28044008230898554, 0.240368049258178, 0.2439433603893144, 0.28725726827738873, 0.20717582438200566, 0.12200058193868668, 0.13115994273822018, 0.19374198715734514, 0.15670170413635498, 0.12656443648177906, 0.13600594509667685, 0.1904625448405436, 0.20371936475283947, 0.24508345119395913, 0.1616000044565592, 0.13648382944339432, 0.15140361267390123, 0.16096020046071502, 0.16618442930039634, 0.1564292698337073, 0.16059130372103314, 0.14589633910655464, 0.17807717129630873, 0.1917297371820028, 0.19599117611836836, 0.18133474105003156, 0.20059793259167025, 0.18489166524903977, 0.23135401989355076, 0.18207762550362505, 0.20392775284038067, 0.1892614160098467, 0.16239357135921095, 0.1256523145665085, 0.1524353956180423, 0.17150832878851108, 0.1952934340790572, 0.19310690683859344, 0.09943150632018694, 0.17054591174299005, 0.2032760396927058, 0.4939901183373532, 0.15300394439221743, 0.07117343994113923, 0.10352697640837927, 0.16694768776764246, 0.2065190560644803, 0.6812948513082075, 0.10260766580797098, 0.1633949751117325, 0.2056902176777322, 0.18282889789458123, 0.19253220151251127, 0.1765735058250224, 0.17447452495622529, 0.16410935755102563, 0.16548407115035857, 0.23454716296523692, 0.15792996407100213, 0.07101829931785086, 0.07808394966962917, 0.06171747321886545, 0.07556269118808745, 0.06857075737476392, 0.051960110896048683, 0.047634893613137996, 0.053503436304229046, 0.05203277722767419]}, "mutation_prompt": null}
{"id": "5e06607e-e55a-4876-a922-7acc1c59adf0", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "ff182149-29c5-41ab-9c0d-b26915c7a52f", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n        inertia_weight = 0.9\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + inertia_weight * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n                inertia_weight = 0.5 + 0.4 * (self.max_iter - _)/self.max_iter\n\n        return g_best", "name": "EnhancedDEPSO", "description": "Enhancing convergence speed by integrating a dynamic inertia weight update mechanism based on individual performance for faster exploration-exploitation balance.", "configspace": "", "generation": 70, "fitness": 0.24851453292120332, "feedback": "The algorithm EnhancedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7382976415510235, 0.7248713611163337, 0.7236195269940677, 0.6938602762166295, 0.7506854402954268, 0.6565553512318678, 0.7669123439967397, 0.7580096860324921, 0.731277156144464, 0.5128031094935744, 0.5812142850181079, 0.4703756848430316, 0.4307798718985155, 0.6016888409279441, 0.5643843831602663, 0.462489567411998, 0.4986191609335878, 0.5188371974800792, 0.19916593716492603, 0.46086744497086407, 0.15289282919499925, 0.2861608040703528, 0.12920017917469673, 0.29208772546531103, 0.10441933989396601, 0.16185064862463572, 0.31155450196435264, 0.14352399940236338, 0.14114654895573764, 0.10425567663289204, 0.10802488185428816, 0.05798912310119775, 0.14871321196162846, 0.1380655466231212, 0.056998956568445336, 0.09137493085867321, 0.976467413904186, 0.9963407740717056, 0.9943554883903701, 0.9828450520627038, 0.9924002358086181, 0.9673028723746985, 0.9905302990709487, 0.9861660381797919, 0.9924434283300398, 0.28700439855825965, 0.22457301104145333, 0.1887791106957939, 0.34922581649245477, 0.3208606555628586, 0.26177350504095753, 0.3125828367048069, 0.20381728324116455, 0.36931187616919714, 0.16527961184642825, 0.19446924793810372, 0.1587384067452151, 0.19484503765856187, 0.27147345909312703, 0.15746138979456936, 0.2070593316531445, 0.21335117002352422, 0.2125820289796141, 0.2399109437115039, 0.33593123328617225, 0.09302873070230688, 0.12143865749135785, 0.19813552224272934, 0.18841318186814127, 0.12350197521041573, 0.2363324780829298, 0.20721811120593647, 0.13679650596539772, 0.10183381993083385, 0.046365087449854236, 0.22010667126570727, 0.147957139659751, 0.12163515371564959, 0.23702537833269355, 0.09405734080710537, 0.06991820191443043, 9.999999999998899e-05, 0.06277453772075947, 9.999999999998899e-05, 0.06849360406966021, 0.034653044109926645, 9.999999999998899e-05, 0.09228087616402914, 0.09463774944400993, 0.0067702378984604294, 0.04574040489671283, 0.05294874176106801, 0.09006587765384555, 0.11241576451117286, 0.0023797463429940935, 0.027206801306590922, 0.052634702819614354, 0.051369329372114914, 0.052335933033082815, 0.034037120878432914, 0.029648555722747716, 0.030637288703061816, 0.07717143874127907, 0.06662616144147737, 0.09092299373775514, 0.0718722673260378, 0.11975151043123533, 0.12740233345741436, 0.1702804146477349, 0.040421804533331884, 0.23179522908009886, 0.11193216006843743, 0.16749661749266465, 0.05635327078014929, 0.11484807042506529, 0.10094666663205243, 0.16175891428102096, 0.48505719749912246, 0.5334896720845435, 0.5865630332969789, 0.5488119258009063, 0.4750666781606755, 0.5026328161713576, 0.5027125477539187, 0.5183228744366046, 0.5152072530978552, 0.07299633591846955, 0.12195824047914339, 0.06044894656466071, 0.10745675600029914, 0.09390205702772325, 0.08349114203175645, 0.05973992244623527, 0.10872869909602001, 0.08786087775095108, 0.19868542923374366, 0.19058893970955415, 0.1553345818045384, 0.23632279560939418, 0.25836907426375055, 0.13945943336064992, 0.20084150345738505, 0.21996517977628438, 0.17520621038747197, 0.202467389672917, 0.23857985940695203, 0.23731679772312853, 0.23595227784591521, 0.1446032037737297, 0.2527019534315704, 0.2734564578634531, 0.22689119642140665, 0.2874714467670517, 0.13070735079295515, 0.11862448459369712, 0.17779390354910718, 0.14245595268677913, 0.17363273692812786, 0.20141193717192074, 0.24733661187257827, 0.2387944222997601, 0.17403184592010135, 0.17484635840595675, 0.15208857804876497, 0.1591770129560387, 0.15221701151316014, 0.14640930146453957, 0.16019172274562588, 0.17469878817097173, 0.18159816555489772, 0.16354543884616612, 0.17665138517132217, 0.1857937096754826, 0.23992441589462665, 0.39108373211145386, 0.5875629019811683, 0.18042743944162942, 0.20348154221253067, 0.19772563053115122, 0.18632645018303484, 0.16034750340596327, 0.12424901979464775, 0.15244323999362153, 0.17156489658102314, 0.19633577962247906, 0.19669222846884882, 0.09940211348118777, 0.16971632230849665, 0.20041821866551635, 0.5886558640472341, 0.15298144582176632, 0.10857132988491192, 0.10232598868272147, 0.16836366377157685, 0.20517295111413436, 0.103666619068008, 0.2097941371965626, 0.6230657055723943, 0.17846679824970402, 0.1693473899266561, 0.16827528434142403, 0.153418124696019, 0.19456311913555224, 0.1836315508763653, 0.16560600187746166, 0.19267217246290913, 0.19701023914137983, 0.08753148725706483, 0.06279601967853454, 0.06573335956300741, 0.05519354491478867, 0.07828342197301386, 0.07606247589106241, 0.04284301404897284, 0.04847503676375542, 0.05213425286363449]}, "mutation_prompt": null}
{"id": "e65acff3-10cb-473e-8b15-6564336b6fd0", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "d77e9fbc-10ca-4982-9185-7b52da84b24f", "solution": "import numpy as np\n\nclass ImprovedDEPSO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            mutation_step = 1.0 / np.mean(np.std(population, axis=0))\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-mutation_step, mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO_FastConvergence", "description": "Utilizing a dynamic mutation step size adaptation based on population diversity to enhance convergence speed while maintaining the original algorithm's structure.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "An exception occurred: OverflowError('Range exceeds valid bounds').", "error": "OverflowError('Range exceeds valid bounds')", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {}, "mutation_prompt": null}
{"id": "bf1eaf5b-1125-4dbc-8f2e-ba99582739f6", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "dbb6adfe-eb43-422a-b6c4-df3d8be992bb", "solution": "import numpy as np\n\nclass DynamicPopSizeDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Initial population size\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population(pop_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population(self.pop_size)\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n            \n            # Dynamic population resizing based on performance\n            if np.random.uniform() < 0.1 and self.pop_size > 5:  # Example condition for resizing\n                self.pop_size -= 1\n                self.max_iter = self.budget // self.pop_size\n                population = initialize_population(self.pop_size)\n                population_fitness = evaluate_population(population)\n                p_best = population[np.argmin(population_fitness)]\n                g_best = p_best\n\n        return g_best", "name": "DynamicPopSizeDEPSO", "description": "Introducing dynamic population resizing during optimization to adaptively change population size based on performance.", "configspace": "", "generation": 74, "fitness": 0.22356425926086343, "feedback": "The algorithm DynamicPopSizeDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.6395544605792862, 0.7128186034979225, 0.5979741241031246, 0.5175491912924801, 0.5152358560676737, 0.6348871458743506, 0.5287934724155448, 0.5149657210869074, 0.47557289038574857, 0.26990078602641354, 0.14089013783190074, 0.42240570063242644, 0.08482749726805427, 0.20489499770975872, 0.4589745934415429, 0.2920972704473658, 0.1498889380681827, 0.481864100385204, 0.13388707332087102, 0.11291599691804444, 0.0823028668217266, 0.1100591806576795, 0.09544623564930677, 0.15044331440453007, 0.07741543432162667, 0.09780761566061646, 0.09612581543102483, 0.11185117247071708, 0.09760817343868844, 0.10102269614318538, 0.1185872512516265, 0.10162585129893198, 0.1292737099614436, 0.07620379955827161, 0.12397487196347978, 0.07309547368640812, 0.9751679845991614, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.9606991277662809, 0.9806922536041928, 0.9721491179032341, 0.9650963153006978, 0.18911639507343725, 0.13914732781960992, 0.13243426260967095, 0.20777163308250446, 0.19608217449494747, 0.21127679232451524, 0.1674382768007292, 0.15884872261124494, 0.24227031790259868, 0.1804567507614211, 0.2047050453243483, 0.20534551149626534, 0.1899064763923708, 0.2238132806662132, 0.18565870568220577, 0.16267575680550905, 0.14190985912417997, 0.32990009401349984, 0.20747082103658243, 0.12759252548002964, 0.19941067622623232, 0.18057381318706756, 0.12067740951374073, 0.10392177447438422, 0.17524785699934053, 0.20097264900157752, 0.20103086537339476, 0.13095640838011913, 0.19662249461091874, 0.13816598469768815, 0.22912423126156367, 0.18116870000738183, 0.13388872422165532, 0.13830463972536022, 0.11712853181384686, 0.1470134299667386, 9.999999999998899e-05, 0.0034738719964152454, 0.08018300347439722, 0.0067647508390741296, 9.999999999998899e-05, 9.999999999998899e-05, 0.06964856575062695, 0.03131728160195435, 0.09750435642210575, 0.06691927743803894, 0.13146622600808155, 0.048275838385453795, 0.053149021891919834, 0.05243767710228531, 0.12683568788924782, 0.06296331562300073, 0.045723868116695265, 0.045412352471676964, 0.027448403588268055, 0.10692858503965619, 0.027395855876869435, 0.01803359206786148, 0.06335985977952008, 0.11286419680209858, 0.073215125786387, 0.06502170208104385, 0.09761971408525094, 0.09163048891253056, 0.18844477082235322, 0.15847372069710597, 0.08050957109345092, 0.08524724530009065, 0.17838279730512896, 0.0908661320492834, 0.17592220649293555, 0.07454120496228878, 0.4884580047801461, 0.4259623239700935, 0.46941769204042516, 0.49447780928270235, 0.5489963303011358, 0.4031713520734963, 0.4303290305581082, 0.398772932949238, 0.441628561739543, 0.13287802099829404, 0.07407505948436066, 0.07040130355572438, 0.09560721040374665, 0.07352340894893572, 0.1209572416120871, 0.06540430321280255, 0.13050133071880587, 0.0639513457706975, 0.17833959997109783, 0.1653191278190147, 0.16585580008858158, 0.22658126417036695, 0.20062228435064233, 0.21013568631235502, 0.2380654010271901, 0.2633407766396314, 0.17458732239011676, 0.20982463166203957, 0.268057088228866, 0.2643848335160851, 0.21849224171687998, 0.23693996910421034, 0.2920808963073256, 0.24140741705798663, 0.25577131276183407, 0.22253667514277298, 0.1351653803094659, 0.1762147542261766, 0.1729660399812194, 0.18257548023137082, 0.18696801615874126, 0.1813622718158484, 0.149481626486883, 0.21173912752037038, 0.16393878484192248, 0.16958885931893564, 0.1854758750091975, 0.1977177724518685, 0.17939244982190938, 0.18570368869858522, 0.18157410518002093, 0.15790391045362062, 0.16770427237952112, 0.19385597938878962, 0.2010036466946271, 0.19519922713239002, 0.18718078704908891, 0.20533069735550047, 0.18613338640755894, 0.18719705606975212, 0.17686837532830613, 0.18120793201228902, 0.2310485449457227, 0.546192682739703, 0.15813674132029842, 0.17019473176810584, 0.17388066695388094, 0.37964776026669256, 0.23733513400802675, 0.11964477731531264, 0.17648530346471358, 0.1733585558377776, 0.3578001843501244, 0.739724065897756, 0.1518840115736162, 0.20262749309989714, 0.19942201703600826, 0.35172940415941456, 0.1549481774551883, 0.1409073080543194, 0.33566411563731713, 0.17333241176676872, 0.17216522174581073, 0.18666924067494461, 0.16329383938528008, 0.196906420841078, 0.19887988462427808, 0.1776209171643699, 0.17281067143732887, 0.17009300690417672, 0.07907088181100097, 0.06985825359308895, 0.06639884230354842, 0.05258800038687117, 0.06679283047813167, 0.08813029028871056, 0.07425542451927047, 0.06645325096578669, 0.06641251091240263]}, "mutation_prompt": null}
{"id": "c99289a3-5246-4466-8f6c-01f2b0a09e91", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "1d7100b4-ea6f-427e-b54f-aa46ad82d89b", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "1aa4fd83-fe95-40d8-9aae-d2630dde8e66", "solution": "import numpy as np\n\nclass DynamicDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n        inertia_weight = 0.9\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                w = np.random.uniform(0.4, 0.9)\n                v = population[i] + w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n                inertia_weight = 0.5 + 0.4 * np.mean(population_fitness) / func(g_best)\n\n        return g_best", "name": "DynamicDEPSO", "description": "Introducing a dynamic inertia weight factor that adapts based on the convergence history to enhance global exploration and exploitation balance.", "configspace": "", "generation": 77, "fitness": 0.2555706160977006, "feedback": "The algorithm DynamicDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7064365754906832, 0.759229365593077, 0.7108498404685251, 0.6945629902090176, 0.7409965777396336, 0.6783048189342762, 0.7495006068263337, 0.7617426324963691, 0.7658633678565144, 0.49631830872118354, 0.5294281130555495, 0.5252018802675976, 0.519415608733597, 0.41748025190465754, 0.39455340018375296, 0.4614046959827718, 0.5219479833675629, 0.4945813080363679, 0.4629331022213842, 0.14993673908194538, 0.08612910322024725, 0.14873668170673593, 0.15076442765307096, 0.11616871618489988, 0.11741340030132119, 0.12774456077149865, 0.10952750543582113, 0.12698432638935753, 0.11881208852148362, 0.12393878753230914, 0.11321036708937227, 0.11676963630916648, 0.10200489325855322, 0.14828781325218365, 0.13216825231947238, 0.13802106886116694, 0.9867672641375046, 0.9766515832290525, 0.9929650302925938, 0.9570597235362581, 0.989101804596465, 0.9570281784159884, 0.9777595175029381, 0.9909446674323061, 0.9571957827458007, 0.34514641986774475, 0.3010821245568518, 0.32346268869581596, 0.25741036513824755, 0.27105611096029913, 0.25518082473696, 0.29308416135268933, 0.2986563970778341, 0.2504972410897499, 0.22167405865445866, 0.2499797953822147, 0.16386470120051322, 0.21050349090855958, 0.24136662604365666, 0.34607198692296126, 0.157783186868085, 0.18894809210901298, 0.19922021963629966, 0.2193265639119647, 0.2165273633773701, 0.15960519075146073, 0.20317268221638962, 0.1094233312845041, 0.11446331445239633, 0.2824164141795438, 0.25943250440499654, 0.1777971335888271, 0.1798174480835696, 0.09413229724699523, 0.17861218760619335, 0.16014758545796526, 0.1552891464781021, 0.20614096291636808, 0.1228726633755659, 0.05409682213535383, 0.12363083535210606, 9.999999999998899e-05, 0.11712694839323268, 0.05080876005612556, 0.018854594679872605, 0.12451660269176468, 0.0026853788816170177, 0.011297752610074152, 0.01549155597125551, 0.054092861531639946, 0.09238022526286482, 0.06942452740717964, 0.07536149667009562, 0.05808671348688399, 0.01283693365384786, 0.008833609861250258, 0.06402307074067481, 0.0782647807062351, 0.06313280284999545, 0.2075544981487375, 0.09283974271484818, 0.04874057878687399, 0.1096902179857403, 0.11189953290964316, 0.14490250926341341, 0.15517485469520376, 0.11615427783529775, 0.14161933359239542, 0.1572078416591659, 0.15755026287034257, 0.14522490600878968, 0.2032394290901347, 0.07813933522652694, 0.057553051116501774, 0.08791032618845185, 0.17766106618425637, 0.07793685392570138, 0.5161052787406509, 0.4503843333044445, 0.5417909796656051, 0.5455062950188163, 0.5001210567059854, 0.4955376677817941, 0.48353097354279295, 0.47992963921256826, 0.48130780853794086, 0.07511489762435741, 0.09716501312483417, 0.06082780243340635, 0.07944429797617436, 0.026441224838394506, 0.09765422201688945, 0.06037555915234749, 0.08575171617056299, 0.07427486427925267, 0.11369460192158876, 0.23878239950546198, 0.1580844035344835, 0.2144332696763579, 0.22043953018977658, 0.1942760123760381, 0.3404181196074344, 0.14266437458358194, 0.1936634241808891, 0.2459047806291632, 0.20179851801416848, 0.21203535354260294, 0.19725639449990562, 0.23923780200084088, 0.29081662035804035, 0.27243222781256937, 0.23403444912488536, 0.33694403920144067, 0.12316266237237272, 0.20088276576115682, 0.21198147488779673, 0.1907117059471004, 0.11607996785623287, 0.16659186736145326, 0.1357648384387249, 0.20083420357250703, 0.22757027275370967, 0.16596997740126884, 0.1673210690042357, 0.15939223204297237, 0.17890321188737035, 0.1557281635230403, 0.16912471468253698, 0.185426489518694, 0.18165641758209494, 0.17583354212385438, 0.19382007229198528, 0.2308534778546646, 0.21912967086838886, 0.18285786516845615, 0.2155283727472349, 0.17247687278284574, 0.1855889347044255, 0.213552023101111, 0.22078113315383185, 0.7804758161550361, 0.12372978298935688, 0.1522376520553691, 0.171910489498873, 0.1997664152786811, 0.1956474292061865, 0.09963895791968513, 0.1701766938004481, 0.8043193701625708, 0.7011845352695211, 0.61526625549294, 0.1092577139614197, 0.10245484699814511, 0.16724837988633845, 0.21069428334701257, 0.10333894129224919, 0.5388811250537896, 0.5188998836717493, 0.17430254841641313, 0.16678404417182902, 0.18064168516249557, 0.19749510887816335, 0.16565785988757964, 0.16586678284135759, 0.17887857071432167, 0.17433865630281908, 0.17067971888429057, 0.0744021419232408, 0.061572819981388194, 0.0743354815767685, 0.0718439168848718, 0.05847442956044602, 0.07238422811722245, 0.08110593069443073, 0.0618119868948237, 0.07879112435075275]}, "mutation_prompt": null}
{"id": "442fb076-f0c4-4afe-8928-41dc77c3d813", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "aeb4eec2-5d1d-4f9f-8717-dd45680a03b4", "solution": "import numpy as np\n\nclass FastConvergingDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            mutation_variation = 0.2 * (1.0 - func(u) / func(g_best))  # Adjusting mutation step dynamically\n                            u[j] += np.random.uniform(-self.mutation_step * mutation_variation, self.mutation_step * mutation_variation)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "FastConvergingDEPSO", "description": "Enhancing convergence speed by dynamically adjusting mutation step size based on fitness improvement while balancing exploration and exploitation in the DEPSO algorithm.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "An exception occurred: OverflowError('Range exceeds valid bounds').", "error": "OverflowError('Range exceeds valid bounds')", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {}, "mutation_prompt": null}
{"id": "ff2a184f-c0d5-4b9f-89d3-d66491d4c8d5", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "8e0b835b-612d-472f-9e20-3f2466f94fe9", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "b359c853-8042-47f0-85b5-fbd30c6471b5", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "388b5df3-a604-47d3-8187-4936a05dd602", "solution": "import numpy as np\n\nclass FastDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            diversity = np.mean(np.std(population, axis=0))\n            self.mutation_step = 1.0 + (diversity / 5.0)  # Dynamic adjustment\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "FastDEPSO", "description": "Increasing the convergence speed by dynamically adjusting mutation step size based on population diversity.", "configspace": "", "generation": 83, "fitness": 0.2658153198989325, "feedback": "The algorithm FastDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.8000792746126933, 0.7952202241493461, 0.8176918176506475, 0.7671173305166038, 0.7993783108963614, 0.7872050520213056, 0.7873847693702211, 0.8114037875969128, 0.7627815719568031, 0.5552087261164367, 0.5181415898358787, 0.5849326746241486, 0.6255136080094399, 0.5600699894923602, 0.5364544597371297, 0.485381096898595, 0.5506555799751236, 0.6209683513852828, 0.13666622590398092, 0.15081311234740713, 0.15754523145042532, 0.15858891399819952, 0.15890163216022324, 0.1535783807251141, 0.11378228309853444, 0.11010249993496601, 0.14327316548154445, 0.11203487177792681, 0.3326970163178484, 0.14176170768791418, 0.14578621802076508, 0.13400027500639955, 0.10936792164881803, 0.11352803621643126, 0.14644595004578587, 0.15853832930223288, 0.9729552011553502, 0.9931957519958756, 0.9937391475912614, 0.9904067442277708, 0.9906037597814235, 0.9682155323162156, 0.9884937264316183, 0.9741924822481128, 0.9786950383139297, 0.3216193712085792, 0.2828822492681947, 0.315436920288624, 0.27375953177993184, 0.23101065659531972, 0.26201366556408423, 0.3750847337097155, 0.3973551088662993, 0.3329819010357662, 0.22441563037302903, 0.13313068690189178, 0.3591239963187952, 0.37668852065981606, 0.19921260522573692, 0.18964375691726298, 0.225443338805686, 0.2873733977955587, 0.2177952265557752, 0.2461651108937435, 0.13232262322749266, 0.1816833556269567, 0.2111298974230691, 0.26795871218535305, 0.119876840542954, 0.29632198772588414, 0.20307715021338746, 0.1905665567381135, 0.19634615934385924, 0.2657711216155997, 0.2126693584936289, 0.12692639348332835, 0.2104814755525466, 0.23956376603470397, 0.1593120737754743, 0.27392384782844925, 0.10976132255054127, 9.999999999998899e-05, 0.014609619726642764, 9.999999999998899e-05, 0.026308149536437453, 0.019954447904167893, 9.999999999998899e-05, 0.08490029362644258, 0.0030451406104160528, 0.0489683355099807, 0.05443716754421768, 0.04082429945115307, 0.08223953076779511, 0.1410877163334744, 0.03799352934579803, 0.04688164524081273, 0.17125302765095607, 0.043227841298354, 0.058934353754506286, 0.07917586993927339, 0.14420041565368424, 0.061697949961447174, 0.09759914487663568, 0.07295093610851744, 0.07468049936466781, 0.17485925459907425, 0.09002986809297109, 0.06285455261554251, 0.15487448772173085, 0.21265988985525386, 0.1238914005939159, 0.2115625824549553, 0.33640725003802086, 0.03995421344724548, 0.05385563371896951, 0.12372577330463796, 0.11504057981981475, 0.6177633096702375, 0.5852075591379226, 0.4999707092780473, 0.5387877392216582, 0.4600550671252458, 0.5343368370997876, 0.5417654857557503, 0.5378056366858748, 0.5647203213613867, 0.09730072943594736, 0.04963043356498131, 0.08618279929162276, 0.07430135003162319, 0.07988342108341462, 0.14461638970193924, 0.15442451422537762, 0.07268440523199537, 0.11166812888713629, 0.1525224784060758, 0.15140029523406306, 0.16282060189937253, 0.20807060912461628, 0.21570233698393404, 0.14272908719027366, 0.1360993200377234, 0.1758424096594412, 0.1578720458063273, 0.25103935372235386, 0.23445786410385505, 0.26886833013177713, 0.2508614651825545, 0.19777522349347332, 0.2963997954909682, 0.25488592910607655, 0.29174950383762666, 0.22766913082211337, 0.15358249628625908, 0.2013738774746172, 0.17941906040770916, 0.15553511061928837, 0.17937471415933182, 0.15734924771914682, 0.154161755169684, 0.193291854223822, 0.22840815425715721, 0.210136136209914, 0.16601959101779995, 0.1810313789109358, 0.1674522092172932, 0.18188290496059745, 0.18614213525414824, 0.18512844879745882, 0.15872539092048132, 0.19087940155828598, 0.19399421008511986, 0.18023952434672952, 0.2461163210234084, 0.19427322222807075, 0.24439922196636943, 0.17822069444918143, 0.18570983307114952, 0.19438543037301692, 0.21856668729491224, 0.16162621036314473, 0.12584844548893892, 0.15353715520277766, 0.8399606708667618, 0.19891023202524838, 0.19666773445883268, 0.09951760548237376, 0.16911505137970273, 0.2087481719455192, 0.6541447930199621, 0.15451692507087778, 0.6214196788704548, 0.20538147346331148, 0.1689008351811957, 0.2076004919173885, 0.10385149039697827, 0.10410634323516388, 0.6254255338503224, 0.16893796918044468, 0.19264092724592552, 0.20593622483885676, 0.17240313307427135, 0.22691444752131773, 0.1860148225990641, 0.17174732379224866, 0.1673245771423515, 0.16375407612847825, 0.08447867136803255, 0.05977533167824145, 0.06177211632053603, 0.07048534609104429, 0.0825844735345368, 0.09790450670074602, 0.07939892580255581, 0.10961330788157686, 0.07416262440174282]}, "mutation_prompt": null}
{"id": "cdfd91ee-b5bf-4cb3-ae2b-1f393883ba06", "solution": "# import numpy as np\n\nclass AcceleratedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.init_mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n        mutation_step = self.init_mutation_step\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-mutation_step, mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    mutation_step *= 1.2 if func(u) < func(g_best) else 0.8\n\n        return g_best", "name": "AcceleratedDEPSO", "description": "Accelerating convergence by dynamically adjusting mutation step size based on the fitness improvement, optimizing exploration and exploitation trade-off.", "configspace": "", "generation": 84, "fitness": 0.263840277584977, "feedback": "The algorithm AcceleratedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.8145318436702396, 0.8253378714368305, 0.8653298639425628, 0.8757436901613925, 0.8365680196612044, 0.8668473489315802, 0.8425853362862475, 0.7879525488279344, 0.83195963714379, 0.5367867038101592, 0.49505587282463237, 0.45739693185261465, 0.5830919990004875, 0.525449497577475, 0.4442789937210936, 0.49684725472916036, 0.5539068141150258, 0.35565305030819117, 0.08481226794984686, 0.09238880323376741, 0.0648703729889929, 0.08937716962067521, 0.09565019689749388, 0.08813903207737783, 0.139645752913497, 0.06231011016705723, 0.09411767124713455, 0.09900382971617983, 0.10829608360591103, 0.1024755042864186, 0.0914793155610314, 0.049219920820708696, 0.09559773290205154, 0.04817523558431003, 0.09511587124359411, 0.07875640155543606, 0.9876706489186545, 0.9929851230015054, 0.9935534657827106, 0.9830018363577547, 0.94316629937401, 0.982131386405057, 0.983818776919494, 0.942357189583549, 0.9715983997991803, 0.3283607472365724, 0.2542220880371683, 0.2869266770740466, 0.2938046859572905, 0.2939998493506165, 0.276201731892042, 0.21453918237000003, 0.15297089159909605, 0.1586146748100311, 0.21873655211595722, 0.16827996893011754, 0.2080524441622541, 0.195796940953186, 0.27222448515702113, 0.10445484751007295, 0.17165590673070874, 0.18205789784930182, 0.32626051426341407, 0.1612982746179802, 0.30403361397048567, 0.12212313688808918, 0.1178566519337868, 0.4411749253270403, 0.1587415257525756, 0.5188369854756028, 0.12304661135785022, 0.25569722799882655, 0.19979814905761173, 0.24925605677542428, 0.4438058141168628, 0.5449398525219102, 0.2055357943648205, 0.19925986016355224, 0.3577520948766587, 0.1604294213808677, 0.42815376647011494, 0.0017219439009042992, 0.007908763302474253, 0.14614833250809156, 0.006990421240840594, 0.0007023196635663753, 9.999999999998899e-05, 0.06133082937781731, 0.02095363277594009, 0.10826715355799099, 0.12446247915181319, 0.05102325797705576, 0.060405226897756625, 0.13609714176926646, 0.0033376801827272873, 0.08454949030529546, 0.19035774969715324, 0.09900870105009474, 0.04945578748065349, 0.14777680034584706, 0.08074825696524002, 0.04810966865659483, 0.09495705060849047, 0.09308714344327562, 0.0729672255712367, 0.18433509798623848, 0.09842340182086828, 0.0782025537190375, 0.3100542151936093, 0.12544053747989836, 0.2635795445052751, 0.16996053345144868, 0.17203319573621334, 0.1452750769643979, 0.11348131945708861, 0.14678444093543008, 0.09419832377089044, 0.6138854003149723, 0.5404245899708926, 0.6037086906171135, 0.4911067858828604, 0.627359248485863, 0.47775698366725095, 0.5389181587790357, 0.522009165916878, 0.5226237012578573, 0.0694764046975681, 0.03611961425842014, 0.11001327147648643, 0.09396528699426343, 0.041531886719558875, 0.11175131281114004, 0.06369280739163019, 0.09070985978152457, 0.05312266682444766, 0.24166023936444014, 0.39321266126787335, 0.1740978572524442, 0.3111527197031323, 0.2374803349042509, 0.1591772535754884, 0.40282025492510043, 0.15102556791898736, 0.218904340220209, 0.2044866371477727, 0.1940757466477382, 0.2505900156199451, 0.17745746751249658, 0.28178336682354477, 0.41717455160865813, 0.22214170752214235, 0.25340018914685536, 0.30249538384324903, 0.20545636718650961, 0.14083210988422812, 0.1345007132516357, 0.1742935200081127, 0.19701749074812636, 0.18503039588140313, 0.16848911452665927, 0.24032724555113305, 0.1863746717061786, 0.20962340299463444, 0.1723930534547624, 0.17149445289616982, 0.18946113627984185, 0.22581435233886327, 0.15704212677231533, 0.1983533038610803, 0.1944179474031411, 0.18102243374624027, 0.16146598125874256, 0.15663678203087206, 0.1753698820464693, 0.16570946886862836, 0.21056918763403842, 0.19102180886940323, 0.17893803709443545, 0.17732497564685035, 0.1658008730355638, 0.8219849346314093, 0.12603801553214655, 0.15329785411909325, 0.17257688599123433, 0.19992662775088654, 0.19794800462257534, 0.09971988429919565, 0.1693835574515442, 0.2118231055744798, 0.7701625040676405, 0.15652413191215786, 0.12335741190900429, 0.19904236229293182, 0.16916714719030113, 0.20594535058383923, 0.10387745784898017, 0.1042063195537104, 0.6905725627672801, 0.1608883648319407, 0.18949013782912993, 0.17822259725290046, 0.1905762141655316, 0.19027666713075164, 0.15727318678198898, 0.16664967210807102, 0.16976777584828284, 0.18164107024572518, 0.0648812286270839, 0.06403501534946354, 0.07996845139203301, 0.0659338084882033, 0.07040186532825377, 0.058908759068345695, 0.07126829746907137, 0.026630049586595095, 0.06486688991162759]}, "mutation_prompt": null}
{"id": "0584333d-2bca-43a6-af69-e906a1bc0872", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "6a556d5c-2ab8-4f10-a053-9fd1e750747c", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            mutation_update = 0.2 * (func(g_best) - func(u)) / np.abs(func(g_best) - func(u))\n                            u[j] += mutation_update * np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "EnhancedDEPSO", "description": "Enhancing convergence speed by dynamically adjusting mutation step size based on historical fitness improvement.", "configspace": "", "generation": 86, "fitness": 0.2350693875975056, "feedback": "The algorithm EnhancedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7351624198490523, 0.7533997552191714, 0.7274885283703428, 0.7393269038255341, 0.7620259112122896, 0.7582069475602897, 0.7145498694708106, 0.7325330049677563, 0.7447073656476741, 0.38506790311005734, 0.3629932607969226, 0.24983342853408286, 0.5119063127931509, 0.40261624068109425, 0.4183822714066032, 0.4006478111948911, 0.3977752514101903, 0.44325661397684946, 0.07170908547816579, 0.0795240231194504, 0.034242484141080554, 0.08860707342577823, 0.10271633215812637, 0.07854515312685928, 0.09163037308423372, 0.04678512956236969, 0.14536956296062276, 0.10125815730863141, 0.0943579966307736, 0.05246287767973923, 0.08286710497138938, 0.03651948255444826, 0.05871250925438398, 0.09293987361110323, 0.06163605798825633, 0.06778272994015155, 0.9458174754992948, 0.9833539169127037, 0.9797294020870838, 0.9383157785153322, 0.9829561973472783, 0.9425327296920074, 0.9549055395656002, 0.9141484205233834, 0.9482143381797944, 0.32704892235478444, 0.2836065951017197, 0.32315397488229936, 0.22552197830043674, 0.2756464636493767, 0.2559410928091642, 0.27831639591204316, 0.241419225366015, 0.3123368363784089, 0.320279394977105, 0.09916658595780825, 0.1389954348665947, 0.18532023544805465, 0.15231385877948345, 0.2014720232679772, 0.13265138740149618, 0.168738051046876, 0.22741759248417526, 0.11721669634360954, 0.2017035440792554, 0.17167972091403483, 0.16477033844405908, 0.17361690824153975, 0.1940607864316799, 0.1807634606493943, 0.1515978684872965, 0.19304324561473918, 0.16616151645641697, 0.18264334222426115, 0.18581818278246087, 0.17277589988675268, 0.2760645800070114, 0.19939455481639168, 0.3655482533254554, 0.3316929180536691, 0.1127886794338141, 9.999999999998899e-05, 0.08515032401700284, 0.05000889961227972, 0.06917414341144046, 0.03266151579934429, 0.003917039189399452, 0.03238630672320597, 0.037221746642932874, 0.05040519329239013, 0.056377815894462224, 0.05507001406837242, 0.07752015071834062, 0.06520490696042902, 0.0024481372981870475, 0.020856123179220032, 0.03627713583223835, 0.07261077903755353, 0.041726040611433035, 0.0733346615337408, 0.0831941897226216, 0.04731526429727406, 0.08873574645332793, 0.10256260641192405, 0.10343062984210605, 0.18454695862233217, 0.08114650040137894, 0.05581251068608928, 0.07124243828186794, 0.10536022721638805, 0.05976067787049488, 0.07940320911149534, 0.0961918780414378, 0.07755003434889951, 0.11609793090499498, 0.0713378414494722, 0.11322517807078525, 0.5071382594613008, 0.5035939133503455, 0.4873146801285999, 0.46233984468308886, 0.5268256774225989, 0.4163664012001478, 0.5815631239786496, 0.5403822454128437, 0.4773138760920117, 0.06625924367317604, 0.050496284536609704, 0.11500604765909717, 0.08060162966201423, 0.048926787530447324, 0.1218586178623624, 0.0784177187132733, 0.052265369968913955, 0.06441388366131251, 0.2457803009795566, 0.16126293632227084, 0.1914507329055144, 0.16073502128816963, 0.21395486646424222, 0.11853852899213613, 0.1981338329273422, 0.1256592198570453, 0.16600919406941372, 0.1788303650442331, 0.23111491701714104, 0.17454904147011552, 0.22527820808624988, 0.23711232898209478, 0.20813177830629903, 0.19738366646586403, 0.37194434632051365, 0.22351815594403535, 0.14695033705693406, 0.12355783368576245, 0.18102697267277545, 0.16678641549152196, 0.20987003904518253, 0.17356184764569293, 0.1943627886689855, 0.14978488149463787, 0.20444768518543166, 0.19115077564105454, 0.1667600701015476, 0.14242576840686594, 0.20354155359882387, 0.16502167990347894, 0.13637100738635, 0.1914146622431403, 0.20694170357931518, 0.2155310762905368, 0.17248825972337622, 0.1643235230842065, 0.17361327384442704, 0.16361192886119102, 0.17331003574518145, 0.1690198198753542, 0.16821768553726613, 0.18200797305494132, 0.18043952534867114, 0.8233495096380414, 0.12342356935422472, 0.14842759675995965, 0.17254679509182336, 0.19791074506412254, 0.7673105998796171, 0.09813916538653134, 0.1649392180809759, 0.20438303266832103, 0.5057290031367154, 0.15461910521816102, 0.10598767011320886, 0.10069367063161694, 0.1648735211140131, 0.20754965313873885, 0.10242976238947776, 0.10378827817837954, 0.6278804821509048, 0.19285232902483818, 0.16675653224011133, 0.16492922994883175, 0.18131755015787343, 0.189981118128268, 0.16788223571916783, 0.16912653364038832, 0.17102422807339157, 0.17466887305915335, 0.06059504374749902, 0.05923838860706587, 0.05781849620438628, 0.07865405426649863, 0.06298735038674608, 0.057793556721835726, 0.05676187132543531, 0.0897652730342865, 0.06427260309358374]}, "mutation_prompt": null}
{"id": "46a9366e-e52a-439b-9d34-620dfa293aca", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "0ac3a445-ef40-4ac2-9652-ae8ea7b23b5d", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "3a06d7ff-5457-4b88-a5c0-24748b81e8ed", "solution": "import numpy as np\n\nclass FastDEPSO(ImprovedDEPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_step = 0.8\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n                    self.mutation_step *= 0.8 if func(u) < func(g_best) else 1.2\n\n        return g_best", "name": "FastDEPSO", "description": "Accelerating convergence speed by incorporating dynamic adjustment of mutation step size based on population diversity.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'FastDEPSO' object has no attribute 'w'\").", "error": "AttributeError(\"'FastDEPSO' object has no attribute 'w'\")", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {}, "mutation_prompt": null}
{"id": "5444a404-50a1-42b0-a854-d512b9bffbcc", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "9d233803-bef8-4328-a06d-1bf6c641b9e0", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "3a3a282a-efa1-4a1c-b188-02eec226aabb", "solution": "import numpy as np\n\nclass DynamicInertiaDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        inertia_weight = 0.9  # Initial inertia weight value\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + inertia_weight * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    if func(u) < func(g_best) * 0.8: # Dynamic inertia weight adaptation\n                        inertia_weight *= 1.05\n                    else:\n                        inertia_weight *= 0.95\n\n        return g_best", "name": "DynamicInertiaDEPSO", "description": "Introducing a dynamic inertia weight adaptation to improve convergence speed by dynamically adjusting the inertia weight during optimization.", "configspace": "", "generation": 92, "fitness": 0.1832668984228079, "feedback": "The algorithm DynamicInertiaDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.4213172903032738, 0.4869981446061723, 0.4647289112256344, 0.4377643481178085, 0.4337463990556345, 0.43759053664951186, 0.3128717836904493, 0.24082632932167525, 0.2693926124252025, 0.15163498585050106, 0.16373842727762078, 0.16602663479005442, 0.1881522867926969, 0.14838784303008634, 0.13372848175608054, 0.19270125266300575, 0.19643200399538496, 0.09064409496954395, 0.0796464035975003, 0.091736830223489, 0.08308075568279749, 0.09161698094025128, 0.11697768434842293, 0.13305584604309095, 0.11526473623525235, 0.11348291406634614, 0.14566212847340554, 0.056962506736338736, 0.053550464856431224, 0.04069344679105613, 0.11824209204255698, 0.06457248250264547, 0.10507561614773364, 0.08970519354125694, 0.07752917061932674, 0.0488098838280584, 0.9656957702631442, 0.9963407740717056, 0.9943507339416058, 0.9767155869681599, 0.9473402052910715, 0.9826598682927711, 0.9782721540584762, 0.945946827905475, 0.993066194922726, 0.2112573999395163, 0.26244036982587704, 0.2092636325179743, 0.22609642375169414, 0.2216291409859954, 0.24257690683820987, 0.1628058118003891, 0.1307289275581408, 0.06385789848686219, 0.26963811245557223, 0.2323908592551892, 0.20418665853248874, 0.19485348711396622, 0.21502800826452373, 0.32089292286845916, 0.21835907772268992, 0.259364053527499, 0.21176501721718033, 0.09241003558632876, 0.1357202253355344, 9.999999999998899e-05, 0.08444339488624808, 0.04813342541967869, 0.10982629415759126, 0.15352654097189278, 0.136128518645519, 0.12805458501651246, 0.11593480222618235, 0.09821101987310488, 9.999999999998899e-05, 0.12009690559939112, 0.06127820577486509, 0.1447933155415596, 0.14303502508927557, 9.999999999998899e-05, 0.08521997341449372, 9.999999999998899e-05, 0.004688899137762159, 9.999999999998899e-05, 0.021844039831635964, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038411994290432627, 0.05399006955470398, 0.03241161204208476, 0.057162849370803626, 0.08215563263513381, 0.00038851543276618994, 0.02740617025911707, 0.04171137347159404, 0.07819420248787612, 0.031195670588242352, 0.0035808351261521487, 0.0015271342181496506, 0.0038919921071616237, 0.0077945777170965735, 0.03816363990811511, 0.007657517363384825, 0.004947007145052362, 0.01789921527202276, 0.025171640493781844, 0.10010612229961047, 0.0928794645433747, 0.08463865785360558, 0.0750429014224524, 0.09095748278681626, 0.06741599450786528, 0.0360027839346474, 0.022122294506693452, 0.054562233670792604, 0.30825670232091607, 0.291469296319395, 0.2725869386878681, 0.2382117250787822, 0.24607056476677502, 0.2717399356879754, 0.3600526444889688, 0.36865624913593764, 0.38433519035395003, 0.08709911943075788, 0.0644609139364245, 0.10508441320677941, 0.08387399268900408, 0.12038230014452289, 0.0832917980764043, 0.05596716935018753, 0.08750264423431986, 0.07363550016185161, 0.1596106180004685, 0.19942304428943414, 0.248528476990048, 0.15686730144546523, 0.20954503432588045, 0.16104803033393378, 0.243026716011297, 0.21817795232091397, 0.19957054959978326, 0.16584056623841603, 0.19336169709167084, 0.1859315552108256, 0.2326998902294265, 0.19940585749172934, 0.2384114686655835, 0.28101245283264265, 0.28949651818955335, 0.27808738778057696, 0.158679278152699, 0.12594549562598822, 0.15807487992809077, 0.21878086513066752, 0.08429895423589462, 0.19619650259975097, 0.18887824891514438, 0.19711703789279877, 0.23044695318176667, 0.1590679811648772, 0.13109830261274436, 0.16338502044360448, 0.16700916460538318, 0.18493624560315336, 0.15895672035424213, 0.17482506922040575, 0.19544768657239608, 0.18158877958378983, 0.19111366474340175, 0.17926647522994787, 0.16172392431420046, 0.19340001409188823, 0.18311407917383637, 0.19790113973075918, 0.19687765070729146, 0.19468732274063505, 0.17924083454297068, 0.16498625477614315, 0.1248333630217574, 0.1520552591326193, 0.17046261174538302, 0.1965792916003637, 0.19684922307037578, 0.09917048453180599, 0.1689031504530274, 0.30705515351288737, 0.40843757329839436, 0.14839213148299824, 0.10412328266969739, 0.26723862835292556, 0.16777336869231352, 0.20582587152249865, 0.10242111127279918, 0.19400658443841, 0.16308895743171015, 0.15626063927876677, 0.1590789110667149, 0.16838448518661386, 0.18660669213482872, 0.18546129284345902, 0.169306962555539, 0.17530201015556945, 0.17996203280995338, 0.15635455310861512, 0.05002997383007879, 0.059076182331145866, 0.07115017597877082, 0.06150432396473893, 0.0746250050659697, 0.05617092562261272, 0.053767002474788717, 0.07861205710341879, 0.06353678184878042]}, "mutation_prompt": null}
{"id": "fc92d1d0-7d4f-4125-bc8c-4e866a07581f", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "37df4126-da1c-41c4-b370-608a1b48bd6d", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "06e70cd0-4f26-47fe-89d6-83cfd246f4e6", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "f5d01d9b-9e20-41dc-8b78-d450870ed3f6", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for t in range(self.max_iter):\n            w = self.w_max - (self.w_max - self.w_min) * t / self.max_iter\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Introducing a dynamic inertia weight strategy to promote faster convergence by adaptively adjusting the exploration-exploitation balance.", "configspace": "", "generation": 96, "fitness": 0.24966993996509468, "feedback": "The algorithm ImprovedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.738525569840073, 0.7057798161931887, 0.7288100688815355, 0.6783116014456285, 0.7446549323015714, 0.7027979374791136, 0.7465385872424443, 0.7387565923623975, 0.7354152022599914, 0.5044120226828038, 0.5765139777296318, 0.4520871095761553, 0.4935957000557918, 0.5553980714694977, 0.5605228261908819, 0.4793035941916238, 0.5287721833650196, 0.5629685688460779, 0.16076783622931035, 0.42309302690890294, 0.13795681919822378, 0.16546761387730657, 0.10967891021795917, 0.1190960264749088, 0.13918630958406264, 0.16867665457428904, 0.1865434944786991, 0.1394026099093051, 0.14531581802768723, 0.1405838460264569, 0.10436778588560724, 0.10327647102595716, 0.15717285320134722, 0.08972178825547583, 0.11734972156238055, 0.09297373727529279, 0.9764659492038873, 0.9963407740717056, 0.9943554883903701, 0.9828450520627038, 0.9924002358086181, 0.9673023760282339, 0.9905302990709487, 0.9861660381797919, 0.9924434283300398, 0.24740485988705918, 0.23089448191682982, 0.24325828213388045, 0.1448526142240255, 0.30719423436363835, 0.30751569054572614, 0.27526924999251634, 0.2438232111406362, 0.2924715427265506, 0.1942806059817732, 0.20405042343649238, 0.15011170768841986, 0.19501727465427643, 0.2716987303045183, 0.15746142188308498, 0.2138157616352625, 0.22077989552085686, 0.2074182266346789, 0.1302055186465545, 0.24626772958640308, 0.1571065349750086, 0.18956399907349075, 0.20177214167557966, 0.16446002700180018, 0.2523092138942896, 0.22567232769442702, 0.3049993091870713, 0.11869687998373668, 0.10002438111417211, 0.09456902256011968, 0.22226482189281382, 0.14469498838818762, 0.12203031526644137, 0.2568066989678085, 0.004018874145320317, 0.09324073213739015, 0.050007399332374525, 0.0033119365453480043, 9.999999999998899e-05, 0.051060546645058436, 9.999999999998899e-05, 9.999999999998899e-05, 0.08339976380049852, 0.10368817340373226, 0.10706545837836257, 0.06554057113768541, 0.09339105352571675, 0.0749633363020501, 0.10307774420672089, 9.999999999998899e-05, 0.02080945176769311, 0.12261970615344786, 0.06819948127142872, 0.098846037762917, 0.12239981328336691, 0.030241798561515654, 0.03346961868994347, 0.12128550475379196, 0.0661432929098894, 0.07875151676481784, 0.06914390959656136, 0.12404784405684155, 0.11329286673380645, 0.20174306741765835, 0.03973356806242301, 0.22385653628860092, 0.09941469830292737, 0.1714702036299286, 0.1444606429320886, 0.051120319144292936, 0.1498524796848415, 0.1350843047720377, 0.480230444006044, 0.5658467917435028, 0.4545174036514674, 0.45535724878096473, 0.4586227288837307, 0.5374156328835791, 0.5300521818138106, 0.48071979982586555, 0.5032962213938241, 0.09084570249979462, 0.12160668448230516, 0.06045895399568324, 0.10196248696710897, 0.09437788024206561, 0.09211351208183094, 0.05308990608397979, 0.10871560398839497, 0.08766307306351351, 0.16875904485856552, 0.2267195655999571, 0.16003888010210265, 0.26828973874739126, 0.2165031737286266, 0.13891881510947846, 0.2665979599287782, 0.19721923247081885, 0.24663968201294817, 0.21029334998325144, 0.27023682213394185, 0.292602976802009, 0.289896464723297, 0.14447861128164674, 0.24913486485231062, 0.31451503190787644, 0.2176450268953979, 0.2448771476331666, 0.1297578838200577, 0.12982219485261393, 0.2204675006045823, 0.16809832223547239, 0.18667700084618888, 0.17014629683909932, 0.22199175465571375, 0.23444801314194152, 0.1678916905468235, 0.19079322670601773, 0.1495948584471165, 0.16152858308262752, 0.16758954377346869, 0.15699953674446498, 0.1709852467777231, 0.20143225141794674, 0.16982312017269796, 0.1722879618079276, 0.17724628180218083, 0.1968498762205, 0.2393857510654286, 0.22301014316197632, 0.5927259458356432, 0.18611322887115989, 0.20353422830147383, 0.19688562405859655, 0.22462000853480435, 0.16088118042581623, 0.12440331534782778, 0.15243118518874021, 0.17112148004838568, 0.19640862396809688, 0.1966886763454586, 0.09940279369792593, 0.16971783380111338, 0.20268545486968026, 0.6314967921307906, 0.15297823859804016, 0.10861451968558034, 0.10304783357444758, 0.16836462551025744, 0.20530633629453265, 0.10338044004853686, 0.20994555936062675, 0.7095199832450161, 0.17828129719318497, 0.17312263535467642, 0.19119962689268555, 0.18457060599716746, 0.19323054326119282, 0.18533817809778497, 0.1750657531335863, 0.17901024426109546, 0.21958703572468963, 0.07799454122259764, 0.06458397516209968, 0.07082089111459322, 0.057840436008365526, 0.07946587775288338, 0.08949196015943794, 0.042753885512061385, 0.051491518362662636, 0.0669387329734269]}, "mutation_prompt": null}
{"id": "58a5d725-e0d6-490f-b29d-08bf5629e4ee", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
{"id": "81f09505-5dc8-45fc-bb37-a8356b31ebae", "solution": "import numpy as np\n\nclass FastConvergingDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n        self.history = np.zeros((self.pop_size, self.dim))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step) + np.mean(self.history[:, j])\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n                self.history[i] = u\n\n        return g_best", "name": "FastConvergingDEPSO", "description": "Enhancing the mutation mechanism by introducing a differential evolution strategy to exploit historical information for faster convergence.", "configspace": "", "generation": 98, "fitness": 0.19484676753921443, "feedback": "The algorithm FastConvergingDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.22.", "error": "", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7549910661820092, 0.748724074017602, 0.6796547898664353, 0.7558801843923102, 0.18403450030030166, 0.6904949500606185, 0.18055724198928313, 0.714660345458259, 0.7148745751550396, 0.4158167216824784, 9.999999999998899e-05, 0.036501862403801155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043225466233891674, 0.036132075033881494, 0.066451422010535, 0.05342217988836706, 0.11076580852386686, 0.05073954463392527, 0.0367413023421983, 0.04111847530922874, 0.054632512467398975, 0.08135302018186208, 0.0400749332174839, 0.09963441411544371, 0.0721152402941232, 0.029433470122673167, 0.1087554594573672, 0.09811213526883367, 0.0943350438358106, 0.07238558105539616, 0.08736718290867762, 0.05001725226222675, 0.9760003739180683, 0.9916419123828363, 0.9935748424348616, 0.989137661906573, 0.9912467328206886, 0.9732710512381808, 0.9809614591577954, 0.9718634072691296, 0.9701698983250397, 0.28388928605911856, 0.3338211382295939, 0.23206997223405745, 0.14727178047872236, 0.1376029500524617, 0.11864906146532772, 0.3097132735904047, 0.08522301320995795, 0.07561258388199854, 0.15984681661336342, 0.16367532933743312, 0.1825647357310357, 0.2367192711686429, 0.13960047138383957, 0.18809371947455178, 0.1527493785224604, 0.09664041124713618, 0.12136555581509534, 0.1513241262930498, 0.2384582265768339, 0.03881963182912518, 9.999999999998899e-05, 0.11162505777822262, 0.10154073216231041, 0.16452606528429392, 0.08951025662932843, 0.11704472746864447, 0.21525330258928976, 0.161947763448546, 0.1782955135076152, 0.16711389108559072, 0.12498841456890153, 0.16998999383657498, 0.20052095839905038, 0.07546641076314298, 0.132105973160611, 9.999999999998899e-05, 9.999999999998899e-05, 0.007537139244947477, 9.999999999998899e-05, 0.08780180869104826, 0.012094461037694404, 0.004106926710487291, 0.011072656293109717, 0.050900979457325746, 0.0572403722092415, 0.045159818068782775, 0.030943373642128624, 0.04839272294961172, 0.009541440041633154, 0.009268695082349732, 0.020808120237554295, 0.09353351914575103, 0.025645394488459927, 0.03971648970694874, 0.026805459957575883, 0.03659786069854054, 0.11733086615010213, 0.09805985879221457, 0.09060154200959036, 0.08425480844353439, 0.11485188578188676, 0.058291735827391666, 0.12155211977666003, 0.05794356348005969, 0.029333683628680385, 0.21846515887444695, 0.17584528088857243, 0.09309270094738531, 0.05310950350880683, 9.999999999998899e-05, 0.07378687290981745, 0.5257737326820364, 0.5067529154005084, 0.44267209727910295, 0.4843305749394251, 0.4454682175919895, 0.2036817040675546, 0.4617393206739263, 0.5214702979791281, 0.46816124181962326, 0.07830818835425557, 0.037675436648380134, 0.06120093736655707, 0.10082358403519176, 0.01966820953167281, 0.07652553977628773, 0.07710350249115694, 0.09120941231769286, 0.0723118744164234, 0.14289393805776796, 0.1839041089738317, 0.1405230437153261, 0.19209112943785978, 0.20401092144305744, 0.10652798889935133, 0.1641789268562709, 0.09353690911922063, 0.17106711867170177, 0.1930726266688748, 0.16061994758221132, 0.148962610058597, 0.18979000691439984, 0.18693262925054777, 0.1664736608998708, 0.21964552760857559, 0.2140016758095742, 0.18484202951560014, 0.13341862731294474, 0.17559783053602662, 0.13847182217161658, 0.1572999833724441, 0.16502266498070617, 0.1668908319028295, 0.1292892691562243, 0.15908685952565194, 0.1226115881767853, 0.15645761653706358, 0.14422745339207144, 0.1362511746558095, 0.18956592159855967, 0.12960614484394084, 0.13820025748065257, 0.16450901453095612, 0.20618431580444363, 0.1667033885997422, 0.1850064775018797, 0.21947576033976657, 0.19322369766815706, 0.18404933423933612, 0.20867931675093598, 0.2032732929894031, 0.17682048510214177, 0.1754649520357192, 0.1885695602970966, 0.2570878590073271, 0.12567693469866248, 0.12307654951112179, 0.691119966641266, 0.195882950970804, 0.16390010045277248, 0.09948888372323783, 0.16763327584734156, 0.18480972662178685, 0.38452567113974745, 0.15252111943734747, 0.11435047757958361, 0.24929153017980143, 0.16584461597558509, 0.1856984823108596, 0.10203277595500204, 0.10230465440819447, 0.6886222129861403, 0.16751032528634535, 0.1755641583244224, 0.1821099388905737, 0.16589675758294142, 0.20217149618951502, 0.182724907472672, 0.16229441189033533, 0.15620537965544845, 0.1842973398426444, 0.045769796628364334, 0.04943073961463673, 0.07761905008318959, 0.045289201886854924, 0.054468452298879866, 0.053748607569551465, 0.04754146935801851, 0.0529622503629551, 0.02632370704675635]}, "mutation_prompt": null}
{"id": "b080ca54-a7b5-492d-9c07-29bd2f31bb60", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5\n        self.c1 = 1.494\n        self.c2 = 1.494\n        self.cr = 0.9\n        self.mutation_prob = 0.5\n        self.mutation_step = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.pop_size, self.dim))\n\n        def clipToBounds(population):\n            return np.clip(population, self.lower_bound, self.upper_bound)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        population_fitness = evaluate_population(population)\n        p_best = population[np.argmin(population_fitness)]\n        g_best = p_best\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.uniform(size=2)\n                v = population[i] + self.w * (p_best - population[i]) + self.c1 * r1 * (g_best - population[i])\n                u = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.uniform() < self.cr or j == j_rand:\n                        u[j] = v[j]\n                        if np.random.uniform() < self.mutation_prob:\n                            u[j] += np.random.uniform(-self.mutation_step, self.mutation_step)\n                u = clipToBounds(u)\n                if func(u) < func(population[i]):\n                    population[i] = u\n                    if func(u) < func(p_best):\n                        p_best = u\n                if func(u) < func(g_best):\n                    g_best = u\n                    self.mutation_prob *= 1.05 if func(u) < func(g_best) else 0.95\n\n        return g_best", "name": "ImprovedDEPSO", "description": "Increasing the exploration-exploitation balance by enhancing mutation strategy with adaptive control of mutation probability based on fitness improvement.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f506f22c-0319-447a-9f97-06e03dbfd446", "metadata": {"aucs": [0.7768337254000037, 0.8186683465384141, 0.8007085942927591, 0.8099649845967649, 0.829194874523866, 0.7844750334857017, 0.8109250039305491, 0.833704549195678, 0.8231354638589711, 0.5843225755863263, 0.6455929869183684, 0.5766694887721597, 0.6032454643102529, 0.6270329558691521, 0.6262422306841129, 0.602502090265722, 0.6073212567254924, 0.630577789279958, 0.16154007817412452, 0.4965534930532983, 0.09261556398963056, 0.4205444208649154, 0.13092632107773639, 0.18902304637219236, 0.1512709533736486, 0.1381695297399923, 0.12469922241343834, 0.11585568323761564, 0.15621939453308897, 0.13130918456848117, 0.11147012417488078, 0.1513094185297834, 0.15096371838367761, 0.14709364921327184, 0.17082975246026033, 0.12774056757762575, 0.9734720567499006, 0.9910411507300451, 0.9935552088218631, 0.9891540657745509, 0.9906049003803934, 0.971050084868703, 0.9806922536041928, 0.9739804800852917, 0.9652969221116618, 0.3484634668516984, 0.22989043702158818, 0.3836518742529099, 0.2484698023621249, 0.3992364810311064, 0.13792921895978927, 0.3102586906936915, 0.262347461198039, 0.26682238734972896, 0.31317936029163906, 0.2037760685245028, 0.2117050667787349, 0.2310151443381342, 0.35962827783747375, 0.19067727116894528, 0.14410062555635328, 0.21863177238013531, 0.35142493204125624, 0.41862016957612636, 0.25494671776068367, 0.12528837132457793, 0.27135894574117525, 0.22606025577142874, 0.1084132048665406, 0.20815331210882182, 0.12367600300575554, 0.22878651046312548, 0.39009360096123924, 0.23061895142458122, 0.19285184570329816, 0.18924702259198933, 0.2569958634360504, 0.18482533072547525, 0.2525037188549121, 0.06326803090992783, 0.11267336755666679, 0.01161659062363074, 0.07469258835998482, 0.043994590808675405, 0.026373431145708115, 0.02120593440222618, 0.005537004845601268, 0.024582557419373763, 0.024673565780862328, 0.09284140689008435, 0.11614079724003024, 0.031802398534558796, 0.09113737857645943, 0.06639061118210743, 0.01464132558507647, 0.034792237686881666, 0.2405686799341764, 0.06444641107420279, 0.04938672373471875, 0.3361454887027425, 0.07450952537981881, 0.06284750865521094, 0.06575875281703536, 0.112947046250094, 0.0687111919532244, 0.16279251445582155, 0.18302447160994784, 0.07937946599470946, 0.13452749392919028, 0.10047153943199205, 0.15422558928982577, 0.049237185277524076, 0.08015639742866665, 0.17013854154077945, 0.14767767315443414, 0.12946422427974336, 0.07823869490919255, 0.46870445697751617, 0.5246384421905368, 0.501184752777412, 0.4651629070233364, 0.4924082531231123, 0.5093518582381062, 0.49004257649459204, 0.5156453229080461, 0.5517148571096284, 0.10576976861013154, 0.07827054064903405, 0.12778694060607998, 0.12449385534967883, 0.1081741472361768, 0.08500433432661847, 0.06271414662833374, 0.050931103046598536, 0.058295738947602094, 0.19748638918788441, 0.25459631573704566, 0.19195495841939447, 0.2812075519275592, 0.22784575748407554, 0.1416800004826113, 0.2841800397423462, 0.15293501611102234, 0.19938351318219816, 0.2799743769598493, 0.260040716896783, 0.25296796260999266, 0.1877142410738939, 0.2415981263549879, 0.2890990041617465, 0.24665894088286655, 0.22931878133522676, 0.2466784585880325, 0.1419589972837899, 0.2593237607030566, 0.22931708973033316, 0.13608319270392022, 0.1508837578674933, 0.20707080367630493, 0.19508127006121212, 0.23128016075197178, 0.21569837561045002, 0.1873462337654762, 0.16930751626937313, 0.18433860602254726, 0.1543648032507765, 0.1858585744205259, 0.17603133676911997, 0.18058897748479963, 0.1922651976087555, 0.16800447460595547, 0.19828261887817433, 0.19241528576223343, 0.19242979741403365, 0.2020989081237058, 0.1768496275101603, 0.19178784325239395, 0.18259094054442493, 0.18638619665182887, 0.18179231165069842, 0.17040343592318674, 0.1256361419433386, 0.15299911022474677, 0.17161972454006258, 0.1998313698143902, 0.19869986037566045, 0.09958735347426007, 0.16846082819928, 0.868512317327211, 0.7182960785676136, 0.15586916356946423, 0.12524633018350284, 0.20448440482992092, 0.16878225298735527, 0.20515202212134687, 0.10425084905005966, 0.10400325065698979, 0.6521372025036438, 0.16967722163986632, 0.17734734714473466, 0.16442877019144597, 0.18298541777491428, 0.16964084302512095, 0.1782431212148473, 0.16836295504100618, 0.20390679231798936, 0.17707573652771802, 0.060717257068082064, 0.07493517869643418, 0.07584562588684707, 0.05580767672181097, 0.06335339749431546, 0.09539495853952429, 0.10719388239485539, 0.07553085869166898, 0.0744345908564521]}, "mutation_prompt": null}
