{"id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "af753897-9430-4188-a3f8-49dc44fcfa5b", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "9d69bbfb-2696-4bfe-9fe7-9c3dac678bb0", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "38aa097e-31e4-46c6-b501-fe5065f7ef2c", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "16c12dfb-3fa1-42f6-8f44-3334db6a2007", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "b68c4a4b-09cb-4b4c-a8b4-e8ca75624883", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "6990380e-8ecb-4290-9cb1-0278ee3839b8", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "7cff9b65-7ce9-4200-aa89-cbb913c13f00", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "6c1f4ee4-98b3-49be-bbef-4a9c3f31a9f3", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "f2bb3ae6-734b-4856-a9f5-0d8e8893af15", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "ff6cb174-a744-4595-ac6e-62b45524e2c6", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "a36404ad-d29a-451d-8795-eedd3e9cbdca", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10\n        CR = 0.9\n        F = 0.8\n        bounds = [(-5.0, 5.0)] * self.dim\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                a, b, c = np.random.choice(pop, 3, replace=False)\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                jrand = np.random.randint(self.dim)\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, pop[i])\n                trial[jrand] = mutant[jrand]\n                trial_fitness = func(trial)\n                if trial_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = trial_fitness\n        return best_solution", "name": "DifferentialEvolution", "description": "Utilizing a Differential Evolution (DE) algorithm to optimize black box functions within a specified budget.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('a must be 1-dimensional').", "error": "ValueError('a must be 1-dimensional')", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "a03670c3-349f-41ee-a8da-6f2d25e0aa89", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "d169be67-a3f5-438f-9cbb-0d48acb59f0b", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "88e6fd8f-cda4-454c-b7ae-38f2e08d38f3", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "2531ce69-acfb-47e1-8001-c6784ed6d81e", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "8d94a330-7748-4204-9e11-658495802eff", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "81625379-3630-4e93-9d4a-fe76a96c2c50", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "ccef4d53-eca1-4fd4-b57b-4fa9afbed409", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "c9bd4b32-ce53-4e2c-b98b-7c77854428d5", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "0937def3-2b45-4e78-b992-005e8e17cf29", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "d1a8bcd5-78e4-4544-a0a0-8869ff51e5ce", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {}, "mutation_prompt": null}
{"id": "e3e9c795-8fd1-4ddf-b1da-428116ac57f9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + 0.5 * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n        return best_val", "name": "HybridPSODE", "description": "Utilizing a hybrid approach combining particle swarm optimization and differential evolution to efficiently explore the search space and exploit promising regions.", "configspace": "", "generation": 22, "fitness": 0.38045090936788384, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.26.", "error": "", "parent_id": "09d0a7f1-e08b-42a5-8a55-de7ea2cca96d", "metadata": {"aucs": [0.8186347072131668, 0.7955170043763621, 0.8245007462003819, 0.8294060583708683, 0.790685498075359, 0.7998190824870035, 0.819370796117974, 0.7989377516247578, 0.798079336044684, 0.6009224851807229, 0.5828095207094732, 0.5936472669056376, 0.6331700112084655, 0.5882913702239376, 0.6352099882122827, 0.5824678607989563, 0.5777220436841694, 0.5945003675877196, 0.11139606564657334, 0.1038632708327375, 0.10018706274475464, 0.10173811628779528, 0.09694695336797055, 0.0962965554715971, 0.13763152327732697, 0.10977392630379323, 0.13176070002404228, 0.09384739087978378, 0.09677741902266657, 0.06829570613732472, 0.09080421690202856, 0.0826313512514737, 0.08674705342224243, 0.09425233762264817, 0.08587424190730486, 0.07762039810619659, 0.9838887959660476, 0.9377218635138732, 0.9639215994056843, 0.9324085620094769, 0.9641640077938275, 0.9773056444176731, 0.950661024683595, 0.8878116717964735, 0.9539159728134251, 0.5286840037960954, 0.5241766081103134, 0.5455415536820349, 0.5191110626910155, 0.5318555939457381, 0.5486377158139325, 0.5499744253046821, 0.5295269197377834, 0.5750757243147444, 0.755457123145684, 0.7846341186909528, 0.8084490005273786, 0.758147113800126, 0.7332957191195311, 0.7990516871326776, 0.7374467542538092, 0.7760342214279519, 0.7197418389084587, 0.32913786892407426, 0.20974752635703453, 0.36854092035526154, 0.3432766482462045, 0.1331178408051925, 0.21356820852210667, 0.29353607183611574, 0.19964063685589595, 0.16832212763289223, 0.25216983599740406, 0.21537017012305737, 0.2463002893018026, 0.20559748051920046, 0.27131831583534494, 0.2555126782334026, 0.20671012711329007, 0.217573423089384, 0.23646372722285136, 0.5965939789594565, 0.6113238835524176, 0.6357650241834087, 0.6081981934016449, 0.6000464598367417, 0.6392996137040929, 0.6317570834761673, 0.5960168640368031, 0.6004031607057356, 0.7218178904833831, 0.6899993002921083, 0.7111950230886905, 0.7205462457448165, 0.6821132075221367, 0.6882168221496809, 0.7235983847973506, 0.6988999571355039, 0.6829474222094145, 0.1557038189599712, 0.2107629329236047, 0.17573194159759786, 0.27248764005682635, 0.22831654645113686, 0.38386217526118205, 0.15292156987237215, 0.1294969367922063, 0.09475336422591629, 0.4671235338237587, 0.44790445268092727, 0.444117727890997, 0.4447959760075737, 0.4261066801400646, 0.42945736748108676, 0.4271064873630085, 0.45157661306959807, 0.4401066131039395, 0.7471512062773278, 0.7404639765859649, 0.7548241902695425, 0.7571101466503023, 0.7427285882335284, 0.7454739179046266, 0.7597955116055171, 0.7400262849125057, 0.7474669198353073, 0.10955978406644973, 0.10303657710047609, 0.11012556810822594, 0.1142799486854057, 0.10303816191978898, 0.12440535002745323, 0.09353897209983641, 0.10117820832199198, 0.10204901038361591, 0.14362042616507564, 0.14687013495075718, 0.15875071049495038, 0.1607194074197812, 0.14169661097466957, 0.1476572121397185, 0.13500104951759273, 0.1420428685711762, 0.14843641514551253, 0.34387393230222063, 0.3075061146041791, 0.2603940907871214, 0.3180527345941043, 0.33474362218905307, 0.30875267279154006, 0.3034541395010215, 0.3226576496189446, 0.30722691547379266, 0.24355431924853843, 0.2580968056035172, 0.24662932049111586, 0.2422993820511461, 0.2450832780822565, 0.27341170350259647, 0.2519078708535474, 0.250621719063872, 0.2690838574835799, 0.19423058284476102, 0.1961104298745625, 0.19867283828021487, 0.19426051309806325, 0.21060308943667538, 0.19239217248568585, 0.22951075071353944, 0.19719975511657883, 0.19211913753200915, 0.1837095813446834, 0.18247001132530571, 0.17708148839003734, 0.18248644062717323, 0.17958412827983483, 0.17978313904049914, 0.1853253444410139, 0.17798601437374328, 0.18094894498375247, 0.24943370422458766, 0.3115923869195083, 0.18479206741783183, 0.24301929561927238, 0.17586676842543691, 0.42348145627081135, 0.2313173314189032, 0.35880833410115787, 0.36986943187470755, 0.5796844100852434, 0.20485922617093189, 0.5111673377966302, 0.3015478108463088, 0.24255331297792826, 0.2941680806034902, 0.19923993129920015, 0.20565767979765304, 0.20775850412756958, 0.19980071566975233, 0.1988650396618351, 0.20695744122326154, 0.21492801171844544, 0.20222276581789478, 0.21441954523496853, 0.22233090066668237, 0.20769606053018475, 0.20037607335566532, 0.08023099601867412, 0.08525881734158358, 0.09301424032886374, 0.08688652692466581, 0.08562738177415508, 0.08603115529314387, 0.08783044433423293, 0.08249923875289156, 0.09098104905645377]}, "mutation_prompt": null}
{"id": "43439c09-7f3a-4d6a-bd35-95df310810c2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + 0.5 * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n        return best_val", "name": "HybridPSODE", "description": "Utilizing a hybrid approach combining particle swarm optimization and differential evolution to efficiently explore the search space and exploit promising regions.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3e9c795-8fd1-4ddf-b1da-428116ac57f9", "metadata": {"aucs": [0.8186347072131668, 0.7955170043763621, 0.8245007462003819, 0.8294060583708683, 0.790685498075359, 0.7998190824870035, 0.819370796117974, 0.7989377516247578, 0.798079336044684, 0.6009224851807229, 0.5828095207094732, 0.5936472669056376, 0.6331700112084655, 0.5882913702239376, 0.6352099882122827, 0.5824678607989563, 0.5777220436841694, 0.5945003675877196, 0.11139606564657334, 0.1038632708327375, 0.10018706274475464, 0.10173811628779528, 0.09694695336797055, 0.0962965554715971, 0.13763152327732697, 0.10977392630379323, 0.13176070002404228, 0.09384739087978378, 0.09677741902266657, 0.06829570613732472, 0.09080421690202856, 0.0826313512514737, 0.08674705342224243, 0.09425233762264817, 0.08587424190730486, 0.07762039810619659, 0.9838887959660476, 0.9377218635138732, 0.9639215994056843, 0.9324085620094769, 0.9641640077938275, 0.9773056444176731, 0.950661024683595, 0.8878116717964735, 0.9539159728134251, 0.5286840037960954, 0.5241766081103134, 0.5455415536820349, 0.5191110626910155, 0.5318555939457381, 0.5486377158139325, 0.5499744253046821, 0.5295269197377834, 0.5750757243147444, 0.755457123145684, 0.7846341186909528, 0.8084490005273786, 0.758147113800126, 0.7332957191195311, 0.7990516871326776, 0.7374467542538092, 0.7760342214279519, 0.7197418389084587, 0.32913786892407426, 0.20974752635703453, 0.36854092035526154, 0.3432766482462045, 0.1331178408051925, 0.21356820852210667, 0.29353607183611574, 0.19964063685589595, 0.16832212763289223, 0.25216983599740406, 0.21537017012305737, 0.2463002893018026, 0.20559748051920046, 0.27131831583534494, 0.2555126782334026, 0.20671012711329007, 0.217573423089384, 0.23646372722285136, 0.5965939789594565, 0.6113238835524176, 0.6357650241834087, 0.6081981934016449, 0.6000464598367417, 0.6392996137040929, 0.6317570834761673, 0.5960168640368031, 0.6004031607057356, 0.7218178904833831, 0.6899993002921083, 0.7111950230886905, 0.7205462457448165, 0.6821132075221367, 0.6882168221496809, 0.7235983847973506, 0.6988999571355039, 0.6829474222094145, 0.1557038189599712, 0.2107629329236047, 0.17573194159759786, 0.27248764005682635, 0.22831654645113686, 0.38386217526118205, 0.15292156987237215, 0.1294969367922063, 0.09475336422591629, 0.4671235338237587, 0.44790445268092727, 0.444117727890997, 0.4447959760075737, 0.4261066801400646, 0.42945736748108676, 0.4271064873630085, 0.45157661306959807, 0.4401066131039395, 0.7471512062773278, 0.7404639765859649, 0.7548241902695425, 0.7571101466503023, 0.7427285882335284, 0.7454739179046266, 0.7597955116055171, 0.7400262849125057, 0.7474669198353073, 0.10955978406644973, 0.10303657710047609, 0.11012556810822594, 0.1142799486854057, 0.10303816191978898, 0.12440535002745323, 0.09353897209983641, 0.10117820832199198, 0.10204901038361591, 0.14362042616507564, 0.14687013495075718, 0.15875071049495038, 0.1607194074197812, 0.14169661097466957, 0.1476572121397185, 0.13500104951759273, 0.1420428685711762, 0.14843641514551253, 0.34387393230222063, 0.3075061146041791, 0.2603940907871214, 0.3180527345941043, 0.33474362218905307, 0.30875267279154006, 0.3034541395010215, 0.3226576496189446, 0.30722691547379266, 0.24355431924853843, 0.2580968056035172, 0.24662932049111586, 0.2422993820511461, 0.2450832780822565, 0.27341170350259647, 0.2519078708535474, 0.250621719063872, 0.2690838574835799, 0.19423058284476102, 0.1961104298745625, 0.19867283828021487, 0.19426051309806325, 0.21060308943667538, 0.19239217248568585, 0.22951075071353944, 0.19719975511657883, 0.19211913753200915, 0.1837095813446834, 0.18247001132530571, 0.17708148839003734, 0.18248644062717323, 0.17958412827983483, 0.17978313904049914, 0.1853253444410139, 0.17798601437374328, 0.18094894498375247, 0.24943370422458766, 0.3115923869195083, 0.18479206741783183, 0.24301929561927238, 0.17586676842543691, 0.42348145627081135, 0.2313173314189032, 0.35880833410115787, 0.36986943187470755, 0.5796844100852434, 0.20485922617093189, 0.5111673377966302, 0.3015478108463088, 0.24255331297792826, 0.2941680806034902, 0.19923993129920015, 0.20565767979765304, 0.20775850412756958, 0.19980071566975233, 0.1988650396618351, 0.20695744122326154, 0.21492801171844544, 0.20222276581789478, 0.21441954523496853, 0.22233090066668237, 0.20769606053018475, 0.20037607335566532, 0.08023099601867412, 0.08525881734158358, 0.09301424032886374, 0.08688652692466581, 0.08562738177415508, 0.08603115529314387, 0.08783044433423293, 0.08249923875289156, 0.09098104905645377]}, "mutation_prompt": null}
{"id": "3a9c9049-1d4c-438c-be43-20008b1c16a8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + 0.5 * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n        return best_val", "name": "HybridPSODE", "description": "Utilizing a hybrid approach combining particle swarm optimization and differential evolution to efficiently explore the search space and exploit promising regions.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3e9c795-8fd1-4ddf-b1da-428116ac57f9", "metadata": {"aucs": [0.8186347072131668, 0.7955170043763621, 0.8245007462003819, 0.8294060583708683, 0.790685498075359, 0.7998190824870035, 0.819370796117974, 0.7989377516247578, 0.798079336044684, 0.6009224851807229, 0.5828095207094732, 0.5936472669056376, 0.6331700112084655, 0.5882913702239376, 0.6352099882122827, 0.5824678607989563, 0.5777220436841694, 0.5945003675877196, 0.11139606564657334, 0.1038632708327375, 0.10018706274475464, 0.10173811628779528, 0.09694695336797055, 0.0962965554715971, 0.13763152327732697, 0.10977392630379323, 0.13176070002404228, 0.09384739087978378, 0.09677741902266657, 0.06829570613732472, 0.09080421690202856, 0.0826313512514737, 0.08674705342224243, 0.09425233762264817, 0.08587424190730486, 0.07762039810619659, 0.9838887959660476, 0.9377218635138732, 0.9639215994056843, 0.9324085620094769, 0.9641640077938275, 0.9773056444176731, 0.950661024683595, 0.8878116717964735, 0.9539159728134251, 0.5286840037960954, 0.5241766081103134, 0.5455415536820349, 0.5191110626910155, 0.5318555939457381, 0.5486377158139325, 0.5499744253046821, 0.5295269197377834, 0.5750757243147444, 0.755457123145684, 0.7846341186909528, 0.8084490005273786, 0.758147113800126, 0.7332957191195311, 0.7990516871326776, 0.7374467542538092, 0.7760342214279519, 0.7197418389084587, 0.32913786892407426, 0.20974752635703453, 0.36854092035526154, 0.3432766482462045, 0.1331178408051925, 0.21356820852210667, 0.29353607183611574, 0.19964063685589595, 0.16832212763289223, 0.25216983599740406, 0.21537017012305737, 0.2463002893018026, 0.20559748051920046, 0.27131831583534494, 0.2555126782334026, 0.20671012711329007, 0.217573423089384, 0.23646372722285136, 0.5965939789594565, 0.6113238835524176, 0.6357650241834087, 0.6081981934016449, 0.6000464598367417, 0.6392996137040929, 0.6317570834761673, 0.5960168640368031, 0.6004031607057356, 0.7218178904833831, 0.6899993002921083, 0.7111950230886905, 0.7205462457448165, 0.6821132075221367, 0.6882168221496809, 0.7235983847973506, 0.6988999571355039, 0.6829474222094145, 0.1557038189599712, 0.2107629329236047, 0.17573194159759786, 0.27248764005682635, 0.22831654645113686, 0.38386217526118205, 0.15292156987237215, 0.1294969367922063, 0.09475336422591629, 0.4671235338237587, 0.44790445268092727, 0.444117727890997, 0.4447959760075737, 0.4261066801400646, 0.42945736748108676, 0.4271064873630085, 0.45157661306959807, 0.4401066131039395, 0.7471512062773278, 0.7404639765859649, 0.7548241902695425, 0.7571101466503023, 0.7427285882335284, 0.7454739179046266, 0.7597955116055171, 0.7400262849125057, 0.7474669198353073, 0.10955978406644973, 0.10303657710047609, 0.11012556810822594, 0.1142799486854057, 0.10303816191978898, 0.12440535002745323, 0.09353897209983641, 0.10117820832199198, 0.10204901038361591, 0.14362042616507564, 0.14687013495075718, 0.15875071049495038, 0.1607194074197812, 0.14169661097466957, 0.1476572121397185, 0.13500104951759273, 0.1420428685711762, 0.14843641514551253, 0.34387393230222063, 0.3075061146041791, 0.2603940907871214, 0.3180527345941043, 0.33474362218905307, 0.30875267279154006, 0.3034541395010215, 0.3226576496189446, 0.30722691547379266, 0.24355431924853843, 0.2580968056035172, 0.24662932049111586, 0.2422993820511461, 0.2450832780822565, 0.27341170350259647, 0.2519078708535474, 0.250621719063872, 0.2690838574835799, 0.19423058284476102, 0.1961104298745625, 0.19867283828021487, 0.19426051309806325, 0.21060308943667538, 0.19239217248568585, 0.22951075071353944, 0.19719975511657883, 0.19211913753200915, 0.1837095813446834, 0.18247001132530571, 0.17708148839003734, 0.18248644062717323, 0.17958412827983483, 0.17978313904049914, 0.1853253444410139, 0.17798601437374328, 0.18094894498375247, 0.24943370422458766, 0.3115923869195083, 0.18479206741783183, 0.24301929561927238, 0.17586676842543691, 0.42348145627081135, 0.2313173314189032, 0.35880833410115787, 0.36986943187470755, 0.5796844100852434, 0.20485922617093189, 0.5111673377966302, 0.3015478108463088, 0.24255331297792826, 0.2941680806034902, 0.19923993129920015, 0.20565767979765304, 0.20775850412756958, 0.19980071566975233, 0.1988650396618351, 0.20695744122326154, 0.21492801171844544, 0.20222276581789478, 0.21441954523496853, 0.22233090066668237, 0.20769606053018475, 0.20037607335566532, 0.08023099601867412, 0.08525881734158358, 0.09301424032886374, 0.08688652692466581, 0.08562738177415508, 0.08603115529314387, 0.08783044433423293, 0.08249923875289156, 0.09098104905645377]}, "mutation_prompt": null}
{"id": "89c46167-0b0d-49c3-af41-1ca555861358", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + 0.5 * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n        return best_val", "name": "HybridPSODE", "description": "Utilizing a hybrid approach combining particle swarm optimization and differential evolution to efficiently explore the search space and exploit promising regions.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3e9c795-8fd1-4ddf-b1da-428116ac57f9", "metadata": {"aucs": [0.8186347072131668, 0.7955170043763621, 0.8245007462003819, 0.8294060583708683, 0.790685498075359, 0.7998190824870035, 0.819370796117974, 0.7989377516247578, 0.798079336044684, 0.6009224851807229, 0.5828095207094732, 0.5936472669056376, 0.6331700112084655, 0.5882913702239376, 0.6352099882122827, 0.5824678607989563, 0.5777220436841694, 0.5945003675877196, 0.11139606564657334, 0.1038632708327375, 0.10018706274475464, 0.10173811628779528, 0.09694695336797055, 0.0962965554715971, 0.13763152327732697, 0.10977392630379323, 0.13176070002404228, 0.09384739087978378, 0.09677741902266657, 0.06829570613732472, 0.09080421690202856, 0.0826313512514737, 0.08674705342224243, 0.09425233762264817, 0.08587424190730486, 0.07762039810619659, 0.9838887959660476, 0.9377218635138732, 0.9639215994056843, 0.9324085620094769, 0.9641640077938275, 0.9773056444176731, 0.950661024683595, 0.8878116717964735, 0.9539159728134251, 0.5286840037960954, 0.5241766081103134, 0.5455415536820349, 0.5191110626910155, 0.5318555939457381, 0.5486377158139325, 0.5499744253046821, 0.5295269197377834, 0.5750757243147444, 0.755457123145684, 0.7846341186909528, 0.8084490005273786, 0.758147113800126, 0.7332957191195311, 0.7990516871326776, 0.7374467542538092, 0.7760342214279519, 0.7197418389084587, 0.32913786892407426, 0.20974752635703453, 0.36854092035526154, 0.3432766482462045, 0.1331178408051925, 0.21356820852210667, 0.29353607183611574, 0.19964063685589595, 0.16832212763289223, 0.25216983599740406, 0.21537017012305737, 0.2463002893018026, 0.20559748051920046, 0.27131831583534494, 0.2555126782334026, 0.20671012711329007, 0.217573423089384, 0.23646372722285136, 0.5965939789594565, 0.6113238835524176, 0.6357650241834087, 0.6081981934016449, 0.6000464598367417, 0.6392996137040929, 0.6317570834761673, 0.5960168640368031, 0.6004031607057356, 0.7218178904833831, 0.6899993002921083, 0.7111950230886905, 0.7205462457448165, 0.6821132075221367, 0.6882168221496809, 0.7235983847973506, 0.6988999571355039, 0.6829474222094145, 0.1557038189599712, 0.2107629329236047, 0.17573194159759786, 0.27248764005682635, 0.22831654645113686, 0.38386217526118205, 0.15292156987237215, 0.1294969367922063, 0.09475336422591629, 0.4671235338237587, 0.44790445268092727, 0.444117727890997, 0.4447959760075737, 0.4261066801400646, 0.42945736748108676, 0.4271064873630085, 0.45157661306959807, 0.4401066131039395, 0.7471512062773278, 0.7404639765859649, 0.7548241902695425, 0.7571101466503023, 0.7427285882335284, 0.7454739179046266, 0.7597955116055171, 0.7400262849125057, 0.7474669198353073, 0.10955978406644973, 0.10303657710047609, 0.11012556810822594, 0.1142799486854057, 0.10303816191978898, 0.12440535002745323, 0.09353897209983641, 0.10117820832199198, 0.10204901038361591, 0.14362042616507564, 0.14687013495075718, 0.15875071049495038, 0.1607194074197812, 0.14169661097466957, 0.1476572121397185, 0.13500104951759273, 0.1420428685711762, 0.14843641514551253, 0.34387393230222063, 0.3075061146041791, 0.2603940907871214, 0.3180527345941043, 0.33474362218905307, 0.30875267279154006, 0.3034541395010215, 0.3226576496189446, 0.30722691547379266, 0.24355431924853843, 0.2580968056035172, 0.24662932049111586, 0.2422993820511461, 0.2450832780822565, 0.27341170350259647, 0.2519078708535474, 0.250621719063872, 0.2690838574835799, 0.19423058284476102, 0.1961104298745625, 0.19867283828021487, 0.19426051309806325, 0.21060308943667538, 0.19239217248568585, 0.22951075071353944, 0.19719975511657883, 0.19211913753200915, 0.1837095813446834, 0.18247001132530571, 0.17708148839003734, 0.18248644062717323, 0.17958412827983483, 0.17978313904049914, 0.1853253444410139, 0.17798601437374328, 0.18094894498375247, 0.24943370422458766, 0.3115923869195083, 0.18479206741783183, 0.24301929561927238, 0.17586676842543691, 0.42348145627081135, 0.2313173314189032, 0.35880833410115787, 0.36986943187470755, 0.5796844100852434, 0.20485922617093189, 0.5111673377966302, 0.3015478108463088, 0.24255331297792826, 0.2941680806034902, 0.19923993129920015, 0.20565767979765304, 0.20775850412756958, 0.19980071566975233, 0.1988650396618351, 0.20695744122326154, 0.21492801171844544, 0.20222276581789478, 0.21441954523496853, 0.22233090066668237, 0.20769606053018475, 0.20037607335566532, 0.08023099601867412, 0.08525881734158358, 0.09301424032886374, 0.08688652692466581, 0.08562738177415508, 0.08603115529314387, 0.08783044433423293, 0.08249923875289156, 0.09098104905645377]}, "mutation_prompt": null}
{"id": "3c481cbe-7914-46aa-a38d-71bd67de7720", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n        inertia_weight = 0.9\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + inertia_weight * 0.5 * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = max(0.4, inertia_weight - 0.005)\n        return best_val", "name": "DynamicHybridPSODE", "description": "Enhancing exploration by introducing a dynamic inertia weight factor for balancing exploration and exploitation.", "configspace": "", "generation": 26, "fitness": 0.33144294491071197, "feedback": "The algorithm DynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "e3e9c795-8fd1-4ddf-b1da-428116ac57f9", "metadata": {"aucs": [0.7774013006449149, 0.7554126219286452, 0.785531079010395, 0.7660333379254111, 0.7532966637645058, 0.7693127797964034, 0.763789602451417, 0.7551752388285911, 0.7573666174038223, 0.43599808434646925, 0.4486435081372484, 0.4338740540839541, 0.4338862289279982, 0.4736289031747214, 0.47987300653271336, 0.39106328464940476, 0.40888854189729196, 0.42316068494400727, 0.09762147329082804, 0.10182270014684458, 0.09233716043092377, 0.08533111423802142, 0.08610660679126303, 0.10288962474445185, 0.10857110597468145, 0.09366731988841115, 0.08311564383955361, 0.10742229092414268, 0.07771889228865403, 0.09252380098354829, 0.08099795700894175, 0.07848499059959835, 0.06748951419114291, 0.08035388480775951, 0.07634652988765211, 0.07331188826091928, 0.9835293266195334, 0.9292467510090705, 0.9547957684362836, 0.932061009556052, 0.9640162571677044, 0.955255943697176, 0.9395358849144635, 0.9329559486313771, 0.9350829112614212, 0.44790739029582394, 0.45866041208120045, 0.4673843345200176, 0.44020374245335936, 0.46250875857114004, 0.4530053835039807, 0.46727414937190936, 0.4434813174564205, 0.4569835095263025, 0.7193152717700471, 0.7264445595820355, 0.7645530242667813, 0.7853579757116542, 0.5323554706127744, 0.38134265057968864, 0.3516635678524862, 0.3391315669526176, 0.5676417881428469, 0.18478322081664977, 0.18328653617030932, 0.22392276214851115, 0.19832696188137744, 0.18196018942231706, 0.21822454815714332, 0.22692960489234215, 0.15807785746923786, 0.18272083612135925, 0.21539526760570826, 0.2360893171190236, 0.17611716992285342, 0.16079142487703935, 0.23908481354971023, 0.3617104149756597, 0.2167890761596416, 0.27633499362599645, 0.15830359749963552, 0.43536927484784915, 0.3651991773513731, 0.4545026107620982, 0.4324510614018364, 0.45354582371899166, 0.44472614196837956, 0.4933906303800174, 0.5293320617028181, 0.4716505519509586, 0.6249438592638915, 0.6088897898739198, 0.6283334685208202, 0.5904525168799826, 0.5853933623034071, 0.6191250868175975, 0.6169393276471675, 0.5921163332343431, 0.59483466745994, 0.12481751926325646, 0.12742662549300787, 0.1340580985634735, 0.2598376629211794, 0.13845604385268018, 0.13550951585156656, 0.13864790908109048, 0.1430056262910646, 0.12656284206587531, 0.31816989773323123, 0.32799113399756663, 0.30760448111770455, 0.30594404360222294, 0.3044358861288414, 0.3188880474589002, 0.30964001151347964, 0.3136331777640178, 0.2979667484202341, 0.6919905757071514, 0.6688206871037158, 0.6650003800267597, 0.7045537155117757, 0.6793200322337387, 0.6832996990696188, 0.704473680507649, 0.6987238787515939, 0.7142222890088032, 0.08150987153367983, 0.08791135270061057, 0.12101924905003525, 0.08599803413179252, 0.1064092163518191, 0.09795150587609491, 0.08398869393088682, 0.10734724951999308, 0.08624303330702054, 0.14330950489817673, 0.1388637745979462, 0.14763617617165659, 0.15832949134033647, 0.1454932015979593, 0.13560217531074648, 0.14616234768250547, 0.14591789508509534, 0.14284186743711813, 0.22836237067658105, 0.2737507516896953, 0.2743948625389755, 0.2594416361281291, 0.2658910675821716, 0.28029509572964517, 0.2784924112386534, 0.27412111140463735, 0.19492793077791526, 0.1950981905605944, 0.20704409211962982, 0.20929996923293737, 0.21400871961968682, 0.22371578744040976, 0.18833337152717888, 0.2237089276082861, 0.21607862777479536, 0.18391428650380715, 0.18990041085418374, 0.2098389642292614, 0.19375791262721132, 0.19126016027594472, 0.20768076200779373, 0.22175301149962234, 0.20118157619607635, 0.23906439849127104, 0.21111713606252125, 0.18533237964503468, 0.1939714901449664, 0.18476279217579772, 0.18861158780427112, 0.18632184942347407, 0.189293444812354, 0.1854030842650004, 0.19121839484994096, 0.18398808421819413, 0.3474217633084531, 0.3847507272869247, 0.28716383218447605, 0.18095192817234784, 0.29592694683071696, 0.511262619292573, 0.2895692759618457, 0.2571125457537189, 0.16044437003873335, 0.3745258200603887, 0.24732475583222224, 0.3756341052870501, 0.35054976378823643, 0.36592179285400184, 0.21900733436430342, 0.20595291902167145, 0.26308572039315714, 0.217079423163258, 0.18924002496065018, 0.1854241611999249, 0.1980754882332736, 0.21861467351531527, 0.17865200367235246, 0.1979100590192847, 0.20012727546850917, 0.18921176458907984, 0.197429312713437, 0.07350898658612992, 0.07262398680028748, 0.07276669575126993, 0.08213261578149544, 0.08874637273437491, 0.09682032095486226, 0.07740226320970978, 0.07827672009710096, 0.07996918274299714]}, "mutation_prompt": null}
{"id": "ba3e4089-f69c-4db9-9392-825900dc889e", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODE", "description": "Introducing a dynamic inertia weight factor to adaptively balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 27, "fitness": 0.3866770227574854, "feedback": "The algorithm DynamicInertiaHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "e3e9c795-8fd1-4ddf-b1da-428116ac57f9", "metadata": {"aucs": [0.7494618573245091, 0.735158838540637, 0.7190685613841558, 0.7444246504619116, 0.7719070310600915, 0.7716938479944934, 0.7214259326047814, 0.758584108336448, 0.7573160114085173, 0.5868924097828082, 0.5936638995323317, 0.5819632251565303, 0.5817315884712584, 0.5753539740710876, 0.5875533210713224, 0.5773997732337729, 0.592589921855692, 0.6085469101430383, 0.09136065602678478, 0.10566516870763976, 0.10581962941622691, 0.12010167501294022, 0.0880047725238754, 0.10716508074874675, 0.07947202412069454, 0.1275792427928122, 0.09144798896296069, 0.10714910056173743, 0.07652231537604348, 0.09677786204008476, 0.07551218781409552, 0.09244080393981258, 0.0918907314721622, 0.07539000450353783, 0.09193775070708521, 0.13119127502510897, 0.9629459373486599, 0.9483988830010983, 0.9912101147296363, 0.9683979718246329, 0.9914816699698471, 0.976607868016242, 0.9563069476618368, 0.977919469392129, 0.9797778141545255, 0.42846730944043643, 0.39286759567811746, 0.45692576265278617, 0.519197852933156, 0.47928237211500213, 0.4182079389563118, 0.4573251261865229, 0.49073830833106313, 0.43870741933812707, 0.654340193019715, 0.7289706989878391, 0.29309243350730163, 0.7262917953338871, 0.727164818043591, 0.8033656326564506, 0.798243950415877, 0.7299635847127512, 0.8294816595017291, 0.32719235707600225, 0.12304730440879308, 0.3247607948681579, 0.43329871266187003, 0.17690644446085513, 0.23602608033851546, 0.49694946217982594, 0.5573704377307585, 0.5321123869973683, 0.3529916153531828, 0.3584817837842713, 0.42968370173041825, 0.4583389619636128, 0.4408307442317966, 0.2632553999023932, 0.37875219001240856, 0.40939475276668413, 0.47590234617960747, 0.5710303839301218, 0.5615445959667211, 0.573867258223538, 0.5804541959701637, 0.54595720165952, 0.6109593293689828, 0.5710827207566062, 0.555856785918267, 0.5736120417621624, 0.6191484819784451, 0.654159365817339, 0.6237813529238125, 0.6116201378241417, 0.6733089609634687, 0.6415998415916367, 0.6728401954068205, 0.6698456485640623, 0.6511234377701358, 0.11348131151146712, 0.290558985222254, 0.1648448730850367, 0.16173148418940275, 0.16029189290896717, 0.4202862234609622, 0.14826811394991568, 0.23439672408211032, 0.15447557829202418, 0.395322011275582, 0.4061430717365657, 0.41581322226514195, 0.41087456985572657, 0.40493631023646326, 0.4372329175169042, 0.41140242051504516, 0.41719806911440316, 0.402728028470808, 0.710241799499127, 0.6697083538814737, 0.7132451516229723, 0.7181437669474038, 0.7005515002374016, 0.6826833107945032, 0.6967133025474062, 0.6677751937397788, 0.6889007606860866, 0.11637329740833413, 0.11950717025692847, 0.11478140708975237, 0.11891313055473329, 0.07521898672721017, 0.09736017710699907, 0.08677838809373495, 0.0989743929136464, 0.13364598528192095, 0.19159573966595778, 0.1942602866361387, 0.18753349850886447, 0.3176448188415355, 0.2569108154378309, 0.15255233270523472, 0.19555355543915098, 0.18219492295253048, 0.21001080019710727, 0.3292347330180686, 0.325758048324002, 0.3394783669621054, 0.2270482858016145, 0.33347029757450874, 0.23685175752339538, 0.3202667072070001, 0.32274840867575216, 0.32522416733129256, 0.310590573446932, 0.2853866538437162, 0.3028228813191083, 0.26295314245816537, 0.2690331832409407, 0.2828198163485547, 0.2977163893627911, 0.2477561545711645, 0.3009948574397374, 0.19516982974701702, 0.2028922362025033, 0.18302264960303471, 0.17561710567282718, 0.17954231562873502, 0.17465563114938343, 0.18701554534521936, 0.18050286525581383, 0.19932452368444487, 0.20241161813806585, 0.19883771150836527, 0.302977325010649, 0.1961450204031746, 0.17494092262828287, 0.19168914559735895, 0.1953058622157411, 0.20911161959722357, 0.20896850216376783, 0.8136000169141122, 0.1839520873581979, 0.7794765227349842, 0.1978674057359382, 0.18945546987319317, 0.1850341695818486, 0.18199411302485557, 0.16186624552731843, 0.7589927115987596, 0.19667512976726098, 0.444451227893469, 0.756519102367599, 0.6789851749508606, 0.16439651138472433, 0.1992992881878518, 0.2112801950217712, 0.20901854129136932, 0.701265302618092, 0.1946036743900207, 0.17282230165644163, 0.18654402884070997, 0.17840305967218806, 0.20851313027031837, 0.17383706774334262, 0.20238561516081854, 0.18671219848971687, 0.19506552877716188, 0.06448852687949691, 0.0694616353769637, 0.07077054462512933, 0.06863101290198881, 0.062415599255738585, 0.07845994546373425, 0.08603489789345276, 0.08554106713827592, 0.06444168464866129]}, "mutation_prompt": null}
{"id": "1b83cc9a-8d14-4cc5-8e18-25cbb5c104b8", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODE", "description": "Introducing a dynamic inertia weight factor to adaptively balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba3e4089-f69c-4db9-9392-825900dc889e", "metadata": {"aucs": [0.7494618573245091, 0.735158838540637, 0.7190685613841558, 0.7444246504619116, 0.7719070310600915, 0.7716938479944934, 0.7214259326047814, 0.758584108336448, 0.7573160114085173, 0.5868924097828082, 0.5936638995323317, 0.5819632251565303, 0.5817315884712584, 0.5753539740710876, 0.5875533210713224, 0.5773997732337729, 0.592589921855692, 0.6085469101430383, 0.09136065602678478, 0.10566516870763976, 0.10581962941622691, 0.12010167501294022, 0.0880047725238754, 0.10716508074874675, 0.07947202412069454, 0.1275792427928122, 0.09144798896296069, 0.10714910056173743, 0.07652231537604348, 0.09677786204008476, 0.07551218781409552, 0.09244080393981258, 0.0918907314721622, 0.07539000450353783, 0.09193775070708521, 0.13119127502510897, 0.9629459373486599, 0.9483988830010983, 0.9912101147296363, 0.9683979718246329, 0.9914816699698471, 0.976607868016242, 0.9563069476618368, 0.977919469392129, 0.9797778141545255, 0.42846730944043643, 0.39286759567811746, 0.45692576265278617, 0.519197852933156, 0.47928237211500213, 0.4182079389563118, 0.4573251261865229, 0.49073830833106313, 0.43870741933812707, 0.654340193019715, 0.7289706989878391, 0.29309243350730163, 0.7262917953338871, 0.727164818043591, 0.8033656326564506, 0.798243950415877, 0.7299635847127512, 0.8294816595017291, 0.32719235707600225, 0.12304730440879308, 0.3247607948681579, 0.43329871266187003, 0.17690644446085513, 0.23602608033851546, 0.49694946217982594, 0.5573704377307585, 0.5321123869973683, 0.3529916153531828, 0.3584817837842713, 0.42968370173041825, 0.4583389619636128, 0.4408307442317966, 0.2632553999023932, 0.37875219001240856, 0.40939475276668413, 0.47590234617960747, 0.5710303839301218, 0.5615445959667211, 0.573867258223538, 0.5804541959701637, 0.54595720165952, 0.6109593293689828, 0.5710827207566062, 0.555856785918267, 0.5736120417621624, 0.6191484819784451, 0.654159365817339, 0.6237813529238125, 0.6116201378241417, 0.6733089609634687, 0.6415998415916367, 0.6728401954068205, 0.6698456485640623, 0.6511234377701358, 0.11348131151146712, 0.290558985222254, 0.1648448730850367, 0.16173148418940275, 0.16029189290896717, 0.4202862234609622, 0.14826811394991568, 0.23439672408211032, 0.15447557829202418, 0.395322011275582, 0.4061430717365657, 0.41581322226514195, 0.41087456985572657, 0.40493631023646326, 0.4372329175169042, 0.41140242051504516, 0.41719806911440316, 0.402728028470808, 0.710241799499127, 0.6697083538814737, 0.7132451516229723, 0.7181437669474038, 0.7005515002374016, 0.6826833107945032, 0.6967133025474062, 0.6677751937397788, 0.6889007606860866, 0.11637329740833413, 0.11950717025692847, 0.11478140708975237, 0.11891313055473329, 0.07521898672721017, 0.09736017710699907, 0.08677838809373495, 0.0989743929136464, 0.13364598528192095, 0.19159573966595778, 0.1942602866361387, 0.18753349850886447, 0.3176448188415355, 0.2569108154378309, 0.15255233270523472, 0.19555355543915098, 0.18219492295253048, 0.21001080019710727, 0.3292347330180686, 0.325758048324002, 0.3394783669621054, 0.2270482858016145, 0.33347029757450874, 0.23685175752339538, 0.3202667072070001, 0.32274840867575216, 0.32522416733129256, 0.310590573446932, 0.2853866538437162, 0.3028228813191083, 0.26295314245816537, 0.2690331832409407, 0.2828198163485547, 0.2977163893627911, 0.2477561545711645, 0.3009948574397374, 0.19516982974701702, 0.2028922362025033, 0.18302264960303471, 0.17561710567282718, 0.17954231562873502, 0.17465563114938343, 0.18701554534521936, 0.18050286525581383, 0.19932452368444487, 0.20241161813806585, 0.19883771150836527, 0.302977325010649, 0.1961450204031746, 0.17494092262828287, 0.19168914559735895, 0.1953058622157411, 0.20911161959722357, 0.20896850216376783, 0.8136000169141122, 0.1839520873581979, 0.7794765227349842, 0.1978674057359382, 0.18945546987319317, 0.1850341695818486, 0.18199411302485557, 0.16186624552731843, 0.7589927115987596, 0.19667512976726098, 0.444451227893469, 0.756519102367599, 0.6789851749508606, 0.16439651138472433, 0.1992992881878518, 0.2112801950217712, 0.20901854129136932, 0.701265302618092, 0.1946036743900207, 0.17282230165644163, 0.18654402884070997, 0.17840305967218806, 0.20851313027031837, 0.17383706774334262, 0.20238561516081854, 0.18671219848971687, 0.19506552877716188, 0.06448852687949691, 0.0694616353769637, 0.07077054462512933, 0.06863101290198881, 0.062415599255738585, 0.07845994546373425, 0.08603489789345276, 0.08554106713827592, 0.06444168464866129]}, "mutation_prompt": null}
{"id": "4e8e351d-030d-459a-85fa-e1cfd9d1a564", "solution": "import numpy as np\n\nclass EnhancedDynamicInertiaHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                chaos_param = 0.1 * np.random.randn(self.dim)  # Introduce chaotic parameter\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + chaos_param\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "EnhancedDynamicInertiaHybridPSODE", "description": "Introducing a chaotic parameter to enhance global exploration capability by adding randomness to search directions.", "configspace": "", "generation": 29, "fitness": 0.21968024228489377, "feedback": "The algorithm EnhancedDynamicInertiaHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "ba3e4089-f69c-4db9-9392-825900dc889e", "metadata": {"aucs": [0.4479515947098994, 0.42991627296583035, 0.4495176448865764, 0.4415866636080664, 0.44576082966238983, 0.4114932808350794, 0.41285644220415896, 0.420041058177268, 0.40768198114383936, 0.02573046533123835, 0.0388354053704445, 0.03003289313968094, 0.027825259777771727, 0.028841697226122398, 0.0444670420036245, 0.0484037955965696, 0.037023457497571854, 0.03381403146900086, 0.09657961149175376, 0.07815354180925338, 0.07730768131322563, 0.09564034025126655, 0.08694291330483761, 0.09306912203436568, 0.10653096043261667, 0.08581155500984372, 0.09763788887249025, 0.07924529882346065, 0.0760586264326999, 0.08115442049111643, 0.07603454950149935, 0.08283859764803347, 0.09111228257621407, 0.06934799241973255, 0.09891717259167654, 0.08511326948962394, 0.9592245302113187, 0.9628624222968343, 0.9864447398258103, 0.945688179132599, 0.9870722404977001, 0.9544936652772961, 0.9723801704384196, 0.9187018967463686, 0.9173467426921967, 0.26848389414007, 0.27662678631039994, 0.2866718243497509, 0.2619113819545209, 0.2711505280224271, 0.26796063828053596, 0.2663588050611847, 0.26331254271198024, 0.28849595582732057, 0.3248981475416347, 0.42217951654417907, 0.4033422756971107, 0.35229056586589025, 0.3215526914933625, 0.3802422550136253, 0.4508059101988696, 0.3394822239249964, 0.32171016453247836, 0.14315650998451346, 0.15321563689629913, 0.1647945293210369, 0.15601946405218547, 0.1409093523382573, 0.19485928465252578, 0.1522658166528752, 0.17646175929357177, 0.14419651518438226, 0.14193771147236933, 0.1169374809547773, 0.11416498324414537, 0.14822782181027416, 0.15608339646879088, 0.15085397860071914, 0.1821927021622377, 0.17814940301497995, 0.1986737400316041, 0.04243396838506419, 0.050378172896739626, 0.03138425740526707, 0.01813073617052885, 0.043559613812836684, 0.047696795663832225, 0.0330796002822622, 0.02486575653603218, 0.0438577830135477, 0.09689317646581097, 0.0978703392478727, 0.12620721811615476, 0.09093029733586677, 0.09912444758718753, 0.09452943277383297, 0.13981560843824858, 0.13078679430836515, 0.09624746606347911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0059270542383074165, 9.999999999998899e-05, 0.11096260055617857, 0.0944517443507571, 0.10031467180639952, 0.12224951628979941, 0.10022374322316374, 0.11207169008108231, 0.10709697047667865, 0.11493955296983072, 0.09962013199559971, 0.39267489628676033, 0.3992159219061052, 0.3876093199943711, 0.4108023407653094, 0.3792326971453439, 0.39753561993205455, 0.4054394429184889, 0.3986502734950884, 0.39659899178603086, 0.09816492895987339, 0.12953221810011406, 0.08215261420646003, 0.08410303827056631, 0.0891876073632849, 0.08953486228533514, 0.08052120310947797, 0.1226765704450492, 0.10308034413630285, 0.16262678609606207, 0.21828778785237346, 0.149030037509577, 0.17665620606571797, 0.19121274324077342, 0.15861475200670105, 0.2050578483516663, 0.1790267629873934, 0.15700515512451163, 0.2691967328122433, 0.25063837545723266, 0.2626225975846933, 0.2759906432528938, 0.26589056129603794, 0.2740669528947175, 0.2815545319612963, 0.28103780374407317, 0.2642945841154195, 0.2068118073930606, 0.2192534102832926, 0.20506688437541687, 0.1989557123288268, 0.2141306783554522, 0.19150704020309717, 0.20651804006665464, 0.21241092458115618, 0.19169659343775458, 0.17633756548633284, 0.1914454492782104, 0.19355030700507314, 0.18113699120887938, 0.19131205322097844, 0.22034395740028667, 0.18606254457059257, 0.2076744244651535, 0.18725346221964323, 0.18181803093873927, 0.1905513385255837, 0.17444086848963247, 0.20997070437994714, 0.17833612527011955, 0.18160952845385114, 0.19127409238880833, 0.17915143057393834, 0.17717440203813295, 0.1516214575191157, 0.16712788548152058, 0.15446234022991356, 0.6560618618982217, 0.2023456984430696, 0.4710300149310137, 0.6150157680696066, 0.19583408431854676, 0.6210287971538173, 0.5595559805098065, 0.1647895560688989, 0.5011101688567967, 0.2911516904963154, 0.20848742796710773, 0.20194635925152737, 0.533529484923273, 0.20923621499513134, 0.20188613379397946, 0.20721228226551625, 0.18561097174400287, 0.19346150076684632, 0.17293453817994486, 0.18284845536163352, 0.19906777352653438, 0.19477132360240612, 0.19259090974603166, 0.18118596086004923, 0.08555902156290629, 0.08610620960375603, 0.07688759037069526, 0.06979599427275984, 0.091869084629291, 0.07316576087145699, 0.07573052694684523, 0.08839429788711628, 0.07168552471958811]}, "mutation_prompt": null}
{"id": "574725ba-9d4b-4c23-be9d-23b0891982e1", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODE", "description": "Introducing a dynamic inertia weight factor to adaptively balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba3e4089-f69c-4db9-9392-825900dc889e", "metadata": {"aucs": [0.7494618573245091, 0.735158838540637, 0.7190685613841558, 0.7444246504619116, 0.7719070310600915, 0.7716938479944934, 0.7214259326047814, 0.758584108336448, 0.7573160114085173, 0.5868924097828082, 0.5936638995323317, 0.5819632251565303, 0.5817315884712584, 0.5753539740710876, 0.5875533210713224, 0.5773997732337729, 0.592589921855692, 0.6085469101430383, 0.09136065602678478, 0.10566516870763976, 0.10581962941622691, 0.12010167501294022, 0.0880047725238754, 0.10716508074874675, 0.07947202412069454, 0.1275792427928122, 0.09144798896296069, 0.10714910056173743, 0.07652231537604348, 0.09677786204008476, 0.07551218781409552, 0.09244080393981258, 0.0918907314721622, 0.07539000450353783, 0.09193775070708521, 0.13119127502510897, 0.9629459373486599, 0.9483988830010983, 0.9912101147296363, 0.9683979718246329, 0.9914816699698471, 0.976607868016242, 0.9563069476618368, 0.977919469392129, 0.9797778141545255, 0.42846730944043643, 0.39286759567811746, 0.45692576265278617, 0.519197852933156, 0.47928237211500213, 0.4182079389563118, 0.4573251261865229, 0.49073830833106313, 0.43870741933812707, 0.654340193019715, 0.7289706989878391, 0.29309243350730163, 0.7262917953338871, 0.727164818043591, 0.8033656326564506, 0.798243950415877, 0.7299635847127512, 0.8294816595017291, 0.32719235707600225, 0.12304730440879308, 0.3247607948681579, 0.43329871266187003, 0.17690644446085513, 0.23602608033851546, 0.49694946217982594, 0.5573704377307585, 0.5321123869973683, 0.3529916153531828, 0.3584817837842713, 0.42968370173041825, 0.4583389619636128, 0.4408307442317966, 0.2632553999023932, 0.37875219001240856, 0.40939475276668413, 0.47590234617960747, 0.5710303839301218, 0.5615445959667211, 0.573867258223538, 0.5804541959701637, 0.54595720165952, 0.6109593293689828, 0.5710827207566062, 0.555856785918267, 0.5736120417621624, 0.6191484819784451, 0.654159365817339, 0.6237813529238125, 0.6116201378241417, 0.6733089609634687, 0.6415998415916367, 0.6728401954068205, 0.6698456485640623, 0.6511234377701358, 0.11348131151146712, 0.290558985222254, 0.1648448730850367, 0.16173148418940275, 0.16029189290896717, 0.4202862234609622, 0.14826811394991568, 0.23439672408211032, 0.15447557829202418, 0.395322011275582, 0.4061430717365657, 0.41581322226514195, 0.41087456985572657, 0.40493631023646326, 0.4372329175169042, 0.41140242051504516, 0.41719806911440316, 0.402728028470808, 0.710241799499127, 0.6697083538814737, 0.7132451516229723, 0.7181437669474038, 0.7005515002374016, 0.6826833107945032, 0.6967133025474062, 0.6677751937397788, 0.6889007606860866, 0.11637329740833413, 0.11950717025692847, 0.11478140708975237, 0.11891313055473329, 0.07521898672721017, 0.09736017710699907, 0.08677838809373495, 0.0989743929136464, 0.13364598528192095, 0.19159573966595778, 0.1942602866361387, 0.18753349850886447, 0.3176448188415355, 0.2569108154378309, 0.15255233270523472, 0.19555355543915098, 0.18219492295253048, 0.21001080019710727, 0.3292347330180686, 0.325758048324002, 0.3394783669621054, 0.2270482858016145, 0.33347029757450874, 0.23685175752339538, 0.3202667072070001, 0.32274840867575216, 0.32522416733129256, 0.310590573446932, 0.2853866538437162, 0.3028228813191083, 0.26295314245816537, 0.2690331832409407, 0.2828198163485547, 0.2977163893627911, 0.2477561545711645, 0.3009948574397374, 0.19516982974701702, 0.2028922362025033, 0.18302264960303471, 0.17561710567282718, 0.17954231562873502, 0.17465563114938343, 0.18701554534521936, 0.18050286525581383, 0.19932452368444487, 0.20241161813806585, 0.19883771150836527, 0.302977325010649, 0.1961450204031746, 0.17494092262828287, 0.19168914559735895, 0.1953058622157411, 0.20911161959722357, 0.20896850216376783, 0.8136000169141122, 0.1839520873581979, 0.7794765227349842, 0.1978674057359382, 0.18945546987319317, 0.1850341695818486, 0.18199411302485557, 0.16186624552731843, 0.7589927115987596, 0.19667512976726098, 0.444451227893469, 0.756519102367599, 0.6789851749508606, 0.16439651138472433, 0.1992992881878518, 0.2112801950217712, 0.20901854129136932, 0.701265302618092, 0.1946036743900207, 0.17282230165644163, 0.18654402884070997, 0.17840305967218806, 0.20851313027031837, 0.17383706774334262, 0.20238561516081854, 0.18671219848971687, 0.19506552877716188, 0.06448852687949691, 0.0694616353769637, 0.07077054462512933, 0.06863101290198881, 0.062415599255738585, 0.07845994546373425, 0.08603489789345276, 0.08554106713827592, 0.06444168464866129]}, "mutation_prompt": null}
{"id": "30a7ec6a-01d9-463d-9db1-84b60de875b4", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODE", "description": "Introducing a dynamic inertia weight factor to adaptively balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba3e4089-f69c-4db9-9392-825900dc889e", "metadata": {"aucs": [0.7494618573245091, 0.735158838540637, 0.7190685613841558, 0.7444246504619116, 0.7719070310600915, 0.7716938479944934, 0.7214259326047814, 0.758584108336448, 0.7573160114085173, 0.5868924097828082, 0.5936638995323317, 0.5819632251565303, 0.5817315884712584, 0.5753539740710876, 0.5875533210713224, 0.5773997732337729, 0.592589921855692, 0.6085469101430383, 0.09136065602678478, 0.10566516870763976, 0.10581962941622691, 0.12010167501294022, 0.0880047725238754, 0.10716508074874675, 0.07947202412069454, 0.1275792427928122, 0.09144798896296069, 0.10714910056173743, 0.07652231537604348, 0.09677786204008476, 0.07551218781409552, 0.09244080393981258, 0.0918907314721622, 0.07539000450353783, 0.09193775070708521, 0.13119127502510897, 0.9629459373486599, 0.9483988830010983, 0.9912101147296363, 0.9683979718246329, 0.9914816699698471, 0.976607868016242, 0.9563069476618368, 0.977919469392129, 0.9797778141545255, 0.42846730944043643, 0.39286759567811746, 0.45692576265278617, 0.519197852933156, 0.47928237211500213, 0.4182079389563118, 0.4573251261865229, 0.49073830833106313, 0.43870741933812707, 0.654340193019715, 0.7289706989878391, 0.29309243350730163, 0.7262917953338871, 0.727164818043591, 0.8033656326564506, 0.798243950415877, 0.7299635847127512, 0.8294816595017291, 0.32719235707600225, 0.12304730440879308, 0.3247607948681579, 0.43329871266187003, 0.17690644446085513, 0.23602608033851546, 0.49694946217982594, 0.5573704377307585, 0.5321123869973683, 0.3529916153531828, 0.3584817837842713, 0.42968370173041825, 0.4583389619636128, 0.4408307442317966, 0.2632553999023932, 0.37875219001240856, 0.40939475276668413, 0.47590234617960747, 0.5710303839301218, 0.5615445959667211, 0.573867258223538, 0.5804541959701637, 0.54595720165952, 0.6109593293689828, 0.5710827207566062, 0.555856785918267, 0.5736120417621624, 0.6191484819784451, 0.654159365817339, 0.6237813529238125, 0.6116201378241417, 0.6733089609634687, 0.6415998415916367, 0.6728401954068205, 0.6698456485640623, 0.6511234377701358, 0.11348131151146712, 0.290558985222254, 0.1648448730850367, 0.16173148418940275, 0.16029189290896717, 0.4202862234609622, 0.14826811394991568, 0.23439672408211032, 0.15447557829202418, 0.395322011275582, 0.4061430717365657, 0.41581322226514195, 0.41087456985572657, 0.40493631023646326, 0.4372329175169042, 0.41140242051504516, 0.41719806911440316, 0.402728028470808, 0.710241799499127, 0.6697083538814737, 0.7132451516229723, 0.7181437669474038, 0.7005515002374016, 0.6826833107945032, 0.6967133025474062, 0.6677751937397788, 0.6889007606860866, 0.11637329740833413, 0.11950717025692847, 0.11478140708975237, 0.11891313055473329, 0.07521898672721017, 0.09736017710699907, 0.08677838809373495, 0.0989743929136464, 0.13364598528192095, 0.19159573966595778, 0.1942602866361387, 0.18753349850886447, 0.3176448188415355, 0.2569108154378309, 0.15255233270523472, 0.19555355543915098, 0.18219492295253048, 0.21001080019710727, 0.3292347330180686, 0.325758048324002, 0.3394783669621054, 0.2270482858016145, 0.33347029757450874, 0.23685175752339538, 0.3202667072070001, 0.32274840867575216, 0.32522416733129256, 0.310590573446932, 0.2853866538437162, 0.3028228813191083, 0.26295314245816537, 0.2690331832409407, 0.2828198163485547, 0.2977163893627911, 0.2477561545711645, 0.3009948574397374, 0.19516982974701702, 0.2028922362025033, 0.18302264960303471, 0.17561710567282718, 0.17954231562873502, 0.17465563114938343, 0.18701554534521936, 0.18050286525581383, 0.19932452368444487, 0.20241161813806585, 0.19883771150836527, 0.302977325010649, 0.1961450204031746, 0.17494092262828287, 0.19168914559735895, 0.1953058622157411, 0.20911161959722357, 0.20896850216376783, 0.8136000169141122, 0.1839520873581979, 0.7794765227349842, 0.1978674057359382, 0.18945546987319317, 0.1850341695818486, 0.18199411302485557, 0.16186624552731843, 0.7589927115987596, 0.19667512976726098, 0.444451227893469, 0.756519102367599, 0.6789851749508606, 0.16439651138472433, 0.1992992881878518, 0.2112801950217712, 0.20901854129136932, 0.701265302618092, 0.1946036743900207, 0.17282230165644163, 0.18654402884070997, 0.17840305967218806, 0.20851313027031837, 0.17383706774334262, 0.20238561516081854, 0.18671219848971687, 0.19506552877716188, 0.06448852687949691, 0.0694616353769637, 0.07077054462512933, 0.06863101290198881, 0.062415599255738585, 0.07845994546373425, 0.08603489789345276, 0.08554106713827592, 0.06444168464866129]}, "mutation_prompt": null}
{"id": "50ccfea2-bcf1-4eb7-8b3d-a5f023b1b7e7", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODE", "description": "Introducing a dynamic inertia weight factor to adaptively balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba3e4089-f69c-4db9-9392-825900dc889e", "metadata": {"aucs": [0.7494618573245091, 0.735158838540637, 0.7190685613841558, 0.7444246504619116, 0.7719070310600915, 0.7716938479944934, 0.7214259326047814, 0.758584108336448, 0.7573160114085173, 0.5868924097828082, 0.5936638995323317, 0.5819632251565303, 0.5817315884712584, 0.5753539740710876, 0.5875533210713224, 0.5773997732337729, 0.592589921855692, 0.6085469101430383, 0.09136065602678478, 0.10566516870763976, 0.10581962941622691, 0.12010167501294022, 0.0880047725238754, 0.10716508074874675, 0.07947202412069454, 0.1275792427928122, 0.09144798896296069, 0.10714910056173743, 0.07652231537604348, 0.09677786204008476, 0.07551218781409552, 0.09244080393981258, 0.0918907314721622, 0.07539000450353783, 0.09193775070708521, 0.13119127502510897, 0.9629459373486599, 0.9483988830010983, 0.9912101147296363, 0.9683979718246329, 0.9914816699698471, 0.976607868016242, 0.9563069476618368, 0.977919469392129, 0.9797778141545255, 0.42846730944043643, 0.39286759567811746, 0.45692576265278617, 0.519197852933156, 0.47928237211500213, 0.4182079389563118, 0.4573251261865229, 0.49073830833106313, 0.43870741933812707, 0.654340193019715, 0.7289706989878391, 0.29309243350730163, 0.7262917953338871, 0.727164818043591, 0.8033656326564506, 0.798243950415877, 0.7299635847127512, 0.8294816595017291, 0.32719235707600225, 0.12304730440879308, 0.3247607948681579, 0.43329871266187003, 0.17690644446085513, 0.23602608033851546, 0.49694946217982594, 0.5573704377307585, 0.5321123869973683, 0.3529916153531828, 0.3584817837842713, 0.42968370173041825, 0.4583389619636128, 0.4408307442317966, 0.2632553999023932, 0.37875219001240856, 0.40939475276668413, 0.47590234617960747, 0.5710303839301218, 0.5615445959667211, 0.573867258223538, 0.5804541959701637, 0.54595720165952, 0.6109593293689828, 0.5710827207566062, 0.555856785918267, 0.5736120417621624, 0.6191484819784451, 0.654159365817339, 0.6237813529238125, 0.6116201378241417, 0.6733089609634687, 0.6415998415916367, 0.6728401954068205, 0.6698456485640623, 0.6511234377701358, 0.11348131151146712, 0.290558985222254, 0.1648448730850367, 0.16173148418940275, 0.16029189290896717, 0.4202862234609622, 0.14826811394991568, 0.23439672408211032, 0.15447557829202418, 0.395322011275582, 0.4061430717365657, 0.41581322226514195, 0.41087456985572657, 0.40493631023646326, 0.4372329175169042, 0.41140242051504516, 0.41719806911440316, 0.402728028470808, 0.710241799499127, 0.6697083538814737, 0.7132451516229723, 0.7181437669474038, 0.7005515002374016, 0.6826833107945032, 0.6967133025474062, 0.6677751937397788, 0.6889007606860866, 0.11637329740833413, 0.11950717025692847, 0.11478140708975237, 0.11891313055473329, 0.07521898672721017, 0.09736017710699907, 0.08677838809373495, 0.0989743929136464, 0.13364598528192095, 0.19159573966595778, 0.1942602866361387, 0.18753349850886447, 0.3176448188415355, 0.2569108154378309, 0.15255233270523472, 0.19555355543915098, 0.18219492295253048, 0.21001080019710727, 0.3292347330180686, 0.325758048324002, 0.3394783669621054, 0.2270482858016145, 0.33347029757450874, 0.23685175752339538, 0.3202667072070001, 0.32274840867575216, 0.32522416733129256, 0.310590573446932, 0.2853866538437162, 0.3028228813191083, 0.26295314245816537, 0.2690331832409407, 0.2828198163485547, 0.2977163893627911, 0.2477561545711645, 0.3009948574397374, 0.19516982974701702, 0.2028922362025033, 0.18302264960303471, 0.17561710567282718, 0.17954231562873502, 0.17465563114938343, 0.18701554534521936, 0.18050286525581383, 0.19932452368444487, 0.20241161813806585, 0.19883771150836527, 0.302977325010649, 0.1961450204031746, 0.17494092262828287, 0.19168914559735895, 0.1953058622157411, 0.20911161959722357, 0.20896850216376783, 0.8136000169141122, 0.1839520873581979, 0.7794765227349842, 0.1978674057359382, 0.18945546987319317, 0.1850341695818486, 0.18199411302485557, 0.16186624552731843, 0.7589927115987596, 0.19667512976726098, 0.444451227893469, 0.756519102367599, 0.6789851749508606, 0.16439651138472433, 0.1992992881878518, 0.2112801950217712, 0.20901854129136932, 0.701265302618092, 0.1946036743900207, 0.17282230165644163, 0.18654402884070997, 0.17840305967218806, 0.20851313027031837, 0.17383706774334262, 0.20238561516081854, 0.18671219848971687, 0.19506552877716188, 0.06448852687949691, 0.0694616353769637, 0.07077054462512933, 0.06863101290198881, 0.062415599255738585, 0.07845994546373425, 0.08603489789345276, 0.08554106713827592, 0.06444168464866129]}, "mutation_prompt": null}
{"id": "a1fec20d-fbf0-44fc-9a60-e381845a121c", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODE", "description": "Introducing a dynamic inertia weight factor to adaptively balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba3e4089-f69c-4db9-9392-825900dc889e", "metadata": {"aucs": [0.7494618573245091, 0.735158838540637, 0.7190685613841558, 0.7444246504619116, 0.7719070310600915, 0.7716938479944934, 0.7214259326047814, 0.758584108336448, 0.7573160114085173, 0.5868924097828082, 0.5936638995323317, 0.5819632251565303, 0.5817315884712584, 0.5753539740710876, 0.5875533210713224, 0.5773997732337729, 0.592589921855692, 0.6085469101430383, 0.09136065602678478, 0.10566516870763976, 0.10581962941622691, 0.12010167501294022, 0.0880047725238754, 0.10716508074874675, 0.07947202412069454, 0.1275792427928122, 0.09144798896296069, 0.10714910056173743, 0.07652231537604348, 0.09677786204008476, 0.07551218781409552, 0.09244080393981258, 0.0918907314721622, 0.07539000450353783, 0.09193775070708521, 0.13119127502510897, 0.9629459373486599, 0.9483988830010983, 0.9912101147296363, 0.9683979718246329, 0.9914816699698471, 0.976607868016242, 0.9563069476618368, 0.977919469392129, 0.9797778141545255, 0.42846730944043643, 0.39286759567811746, 0.45692576265278617, 0.519197852933156, 0.47928237211500213, 0.4182079389563118, 0.4573251261865229, 0.49073830833106313, 0.43870741933812707, 0.654340193019715, 0.7289706989878391, 0.29309243350730163, 0.7262917953338871, 0.727164818043591, 0.8033656326564506, 0.798243950415877, 0.7299635847127512, 0.8294816595017291, 0.32719235707600225, 0.12304730440879308, 0.3247607948681579, 0.43329871266187003, 0.17690644446085513, 0.23602608033851546, 0.49694946217982594, 0.5573704377307585, 0.5321123869973683, 0.3529916153531828, 0.3584817837842713, 0.42968370173041825, 0.4583389619636128, 0.4408307442317966, 0.2632553999023932, 0.37875219001240856, 0.40939475276668413, 0.47590234617960747, 0.5710303839301218, 0.5615445959667211, 0.573867258223538, 0.5804541959701637, 0.54595720165952, 0.6109593293689828, 0.5710827207566062, 0.555856785918267, 0.5736120417621624, 0.6191484819784451, 0.654159365817339, 0.6237813529238125, 0.6116201378241417, 0.6733089609634687, 0.6415998415916367, 0.6728401954068205, 0.6698456485640623, 0.6511234377701358, 0.11348131151146712, 0.290558985222254, 0.1648448730850367, 0.16173148418940275, 0.16029189290896717, 0.4202862234609622, 0.14826811394991568, 0.23439672408211032, 0.15447557829202418, 0.395322011275582, 0.4061430717365657, 0.41581322226514195, 0.41087456985572657, 0.40493631023646326, 0.4372329175169042, 0.41140242051504516, 0.41719806911440316, 0.402728028470808, 0.710241799499127, 0.6697083538814737, 0.7132451516229723, 0.7181437669474038, 0.7005515002374016, 0.6826833107945032, 0.6967133025474062, 0.6677751937397788, 0.6889007606860866, 0.11637329740833413, 0.11950717025692847, 0.11478140708975237, 0.11891313055473329, 0.07521898672721017, 0.09736017710699907, 0.08677838809373495, 0.0989743929136464, 0.13364598528192095, 0.19159573966595778, 0.1942602866361387, 0.18753349850886447, 0.3176448188415355, 0.2569108154378309, 0.15255233270523472, 0.19555355543915098, 0.18219492295253048, 0.21001080019710727, 0.3292347330180686, 0.325758048324002, 0.3394783669621054, 0.2270482858016145, 0.33347029757450874, 0.23685175752339538, 0.3202667072070001, 0.32274840867575216, 0.32522416733129256, 0.310590573446932, 0.2853866538437162, 0.3028228813191083, 0.26295314245816537, 0.2690331832409407, 0.2828198163485547, 0.2977163893627911, 0.2477561545711645, 0.3009948574397374, 0.19516982974701702, 0.2028922362025033, 0.18302264960303471, 0.17561710567282718, 0.17954231562873502, 0.17465563114938343, 0.18701554534521936, 0.18050286525581383, 0.19932452368444487, 0.20241161813806585, 0.19883771150836527, 0.302977325010649, 0.1961450204031746, 0.17494092262828287, 0.19168914559735895, 0.1953058622157411, 0.20911161959722357, 0.20896850216376783, 0.8136000169141122, 0.1839520873581979, 0.7794765227349842, 0.1978674057359382, 0.18945546987319317, 0.1850341695818486, 0.18199411302485557, 0.16186624552731843, 0.7589927115987596, 0.19667512976726098, 0.444451227893469, 0.756519102367599, 0.6789851749508606, 0.16439651138472433, 0.1992992881878518, 0.2112801950217712, 0.20901854129136932, 0.701265302618092, 0.1946036743900207, 0.17282230165644163, 0.18654402884070997, 0.17840305967218806, 0.20851313027031837, 0.17383706774334262, 0.20238561516081854, 0.18671219848971687, 0.19506552877716188, 0.06448852687949691, 0.0694616353769637, 0.07077054462512933, 0.06863101290198881, 0.062415599255738585, 0.07845994546373425, 0.08603489789345276, 0.08554106713827592, 0.06444168464866129]}, "mutation_prompt": null}
{"id": "95cdd37e-9ffa-4e1f-9595-28c2c4aeecfc", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODE", "description": "Introducing a dynamic inertia weight factor to adaptively balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba3e4089-f69c-4db9-9392-825900dc889e", "metadata": {"aucs": [0.7494618573245091, 0.735158838540637, 0.7190685613841558, 0.7444246504619116, 0.7719070310600915, 0.7716938479944934, 0.7214259326047814, 0.758584108336448, 0.7573160114085173, 0.5868924097828082, 0.5936638995323317, 0.5819632251565303, 0.5817315884712584, 0.5753539740710876, 0.5875533210713224, 0.5773997732337729, 0.592589921855692, 0.6085469101430383, 0.09136065602678478, 0.10566516870763976, 0.10581962941622691, 0.12010167501294022, 0.0880047725238754, 0.10716508074874675, 0.07947202412069454, 0.1275792427928122, 0.09144798896296069, 0.10714910056173743, 0.07652231537604348, 0.09677786204008476, 0.07551218781409552, 0.09244080393981258, 0.0918907314721622, 0.07539000450353783, 0.09193775070708521, 0.13119127502510897, 0.9629459373486599, 0.9483988830010983, 0.9912101147296363, 0.9683979718246329, 0.9914816699698471, 0.976607868016242, 0.9563069476618368, 0.977919469392129, 0.9797778141545255, 0.42846730944043643, 0.39286759567811746, 0.45692576265278617, 0.519197852933156, 0.47928237211500213, 0.4182079389563118, 0.4573251261865229, 0.49073830833106313, 0.43870741933812707, 0.654340193019715, 0.7289706989878391, 0.29309243350730163, 0.7262917953338871, 0.727164818043591, 0.8033656326564506, 0.798243950415877, 0.7299635847127512, 0.8294816595017291, 0.32719235707600225, 0.12304730440879308, 0.3247607948681579, 0.43329871266187003, 0.17690644446085513, 0.23602608033851546, 0.49694946217982594, 0.5573704377307585, 0.5321123869973683, 0.3529916153531828, 0.3584817837842713, 0.42968370173041825, 0.4583389619636128, 0.4408307442317966, 0.2632553999023932, 0.37875219001240856, 0.40939475276668413, 0.47590234617960747, 0.5710303839301218, 0.5615445959667211, 0.573867258223538, 0.5804541959701637, 0.54595720165952, 0.6109593293689828, 0.5710827207566062, 0.555856785918267, 0.5736120417621624, 0.6191484819784451, 0.654159365817339, 0.6237813529238125, 0.6116201378241417, 0.6733089609634687, 0.6415998415916367, 0.6728401954068205, 0.6698456485640623, 0.6511234377701358, 0.11348131151146712, 0.290558985222254, 0.1648448730850367, 0.16173148418940275, 0.16029189290896717, 0.4202862234609622, 0.14826811394991568, 0.23439672408211032, 0.15447557829202418, 0.395322011275582, 0.4061430717365657, 0.41581322226514195, 0.41087456985572657, 0.40493631023646326, 0.4372329175169042, 0.41140242051504516, 0.41719806911440316, 0.402728028470808, 0.710241799499127, 0.6697083538814737, 0.7132451516229723, 0.7181437669474038, 0.7005515002374016, 0.6826833107945032, 0.6967133025474062, 0.6677751937397788, 0.6889007606860866, 0.11637329740833413, 0.11950717025692847, 0.11478140708975237, 0.11891313055473329, 0.07521898672721017, 0.09736017710699907, 0.08677838809373495, 0.0989743929136464, 0.13364598528192095, 0.19159573966595778, 0.1942602866361387, 0.18753349850886447, 0.3176448188415355, 0.2569108154378309, 0.15255233270523472, 0.19555355543915098, 0.18219492295253048, 0.21001080019710727, 0.3292347330180686, 0.325758048324002, 0.3394783669621054, 0.2270482858016145, 0.33347029757450874, 0.23685175752339538, 0.3202667072070001, 0.32274840867575216, 0.32522416733129256, 0.310590573446932, 0.2853866538437162, 0.3028228813191083, 0.26295314245816537, 0.2690331832409407, 0.2828198163485547, 0.2977163893627911, 0.2477561545711645, 0.3009948574397374, 0.19516982974701702, 0.2028922362025033, 0.18302264960303471, 0.17561710567282718, 0.17954231562873502, 0.17465563114938343, 0.18701554534521936, 0.18050286525581383, 0.19932452368444487, 0.20241161813806585, 0.19883771150836527, 0.302977325010649, 0.1961450204031746, 0.17494092262828287, 0.19168914559735895, 0.1953058622157411, 0.20911161959722357, 0.20896850216376783, 0.8136000169141122, 0.1839520873581979, 0.7794765227349842, 0.1978674057359382, 0.18945546987319317, 0.1850341695818486, 0.18199411302485557, 0.16186624552731843, 0.7589927115987596, 0.19667512976726098, 0.444451227893469, 0.756519102367599, 0.6789851749508606, 0.16439651138472433, 0.1992992881878518, 0.2112801950217712, 0.20901854129136932, 0.701265302618092, 0.1946036743900207, 0.17282230165644163, 0.18654402884070997, 0.17840305967218806, 0.20851313027031837, 0.17383706774334262, 0.20238561516081854, 0.18671219848971687, 0.19506552877716188, 0.06448852687949691, 0.0694616353769637, 0.07077054462512933, 0.06863101290198881, 0.062415599255738585, 0.07845994546373425, 0.08603489789345276, 0.08554106713827592, 0.06444168464866129]}, "mutation_prompt": null}
{"id": "290e29a4-f138-44bd-83fd-69c99d464682", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODE", "description": "Introducing a dynamic inertia weight factor to adaptively balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba3e4089-f69c-4db9-9392-825900dc889e", "metadata": {"aucs": [0.7494618573245091, 0.735158838540637, 0.7190685613841558, 0.7444246504619116, 0.7719070310600915, 0.7716938479944934, 0.7214259326047814, 0.758584108336448, 0.7573160114085173, 0.5868924097828082, 0.5936638995323317, 0.5819632251565303, 0.5817315884712584, 0.5753539740710876, 0.5875533210713224, 0.5773997732337729, 0.592589921855692, 0.6085469101430383, 0.09136065602678478, 0.10566516870763976, 0.10581962941622691, 0.12010167501294022, 0.0880047725238754, 0.10716508074874675, 0.07947202412069454, 0.1275792427928122, 0.09144798896296069, 0.10714910056173743, 0.07652231537604348, 0.09677786204008476, 0.07551218781409552, 0.09244080393981258, 0.0918907314721622, 0.07539000450353783, 0.09193775070708521, 0.13119127502510897, 0.9629459373486599, 0.9483988830010983, 0.9912101147296363, 0.9683979718246329, 0.9914816699698471, 0.976607868016242, 0.9563069476618368, 0.977919469392129, 0.9797778141545255, 0.42846730944043643, 0.39286759567811746, 0.45692576265278617, 0.519197852933156, 0.47928237211500213, 0.4182079389563118, 0.4573251261865229, 0.49073830833106313, 0.43870741933812707, 0.654340193019715, 0.7289706989878391, 0.29309243350730163, 0.7262917953338871, 0.727164818043591, 0.8033656326564506, 0.798243950415877, 0.7299635847127512, 0.8294816595017291, 0.32719235707600225, 0.12304730440879308, 0.3247607948681579, 0.43329871266187003, 0.17690644446085513, 0.23602608033851546, 0.49694946217982594, 0.5573704377307585, 0.5321123869973683, 0.3529916153531828, 0.3584817837842713, 0.42968370173041825, 0.4583389619636128, 0.4408307442317966, 0.2632553999023932, 0.37875219001240856, 0.40939475276668413, 0.47590234617960747, 0.5710303839301218, 0.5615445959667211, 0.573867258223538, 0.5804541959701637, 0.54595720165952, 0.6109593293689828, 0.5710827207566062, 0.555856785918267, 0.5736120417621624, 0.6191484819784451, 0.654159365817339, 0.6237813529238125, 0.6116201378241417, 0.6733089609634687, 0.6415998415916367, 0.6728401954068205, 0.6698456485640623, 0.6511234377701358, 0.11348131151146712, 0.290558985222254, 0.1648448730850367, 0.16173148418940275, 0.16029189290896717, 0.4202862234609622, 0.14826811394991568, 0.23439672408211032, 0.15447557829202418, 0.395322011275582, 0.4061430717365657, 0.41581322226514195, 0.41087456985572657, 0.40493631023646326, 0.4372329175169042, 0.41140242051504516, 0.41719806911440316, 0.402728028470808, 0.710241799499127, 0.6697083538814737, 0.7132451516229723, 0.7181437669474038, 0.7005515002374016, 0.6826833107945032, 0.6967133025474062, 0.6677751937397788, 0.6889007606860866, 0.11637329740833413, 0.11950717025692847, 0.11478140708975237, 0.11891313055473329, 0.07521898672721017, 0.09736017710699907, 0.08677838809373495, 0.0989743929136464, 0.13364598528192095, 0.19159573966595778, 0.1942602866361387, 0.18753349850886447, 0.3176448188415355, 0.2569108154378309, 0.15255233270523472, 0.19555355543915098, 0.18219492295253048, 0.21001080019710727, 0.3292347330180686, 0.325758048324002, 0.3394783669621054, 0.2270482858016145, 0.33347029757450874, 0.23685175752339538, 0.3202667072070001, 0.32274840867575216, 0.32522416733129256, 0.310590573446932, 0.2853866538437162, 0.3028228813191083, 0.26295314245816537, 0.2690331832409407, 0.2828198163485547, 0.2977163893627911, 0.2477561545711645, 0.3009948574397374, 0.19516982974701702, 0.2028922362025033, 0.18302264960303471, 0.17561710567282718, 0.17954231562873502, 0.17465563114938343, 0.18701554534521936, 0.18050286525581383, 0.19932452368444487, 0.20241161813806585, 0.19883771150836527, 0.302977325010649, 0.1961450204031746, 0.17494092262828287, 0.19168914559735895, 0.1953058622157411, 0.20911161959722357, 0.20896850216376783, 0.8136000169141122, 0.1839520873581979, 0.7794765227349842, 0.1978674057359382, 0.18945546987319317, 0.1850341695818486, 0.18199411302485557, 0.16186624552731843, 0.7589927115987596, 0.19667512976726098, 0.444451227893469, 0.756519102367599, 0.6789851749508606, 0.16439651138472433, 0.1992992881878518, 0.2112801950217712, 0.20901854129136932, 0.701265302618092, 0.1946036743900207, 0.17282230165644163, 0.18654402884070997, 0.17840305967218806, 0.20851313027031837, 0.17383706774334262, 0.20238561516081854, 0.18671219848971687, 0.19506552877716188, 0.06448852687949691, 0.0694616353769637, 0.07077054462512933, 0.06863101290198881, 0.062415599255738585, 0.07845994546373425, 0.08603489789345276, 0.08554106713827592, 0.06444168464866129]}, "mutation_prompt": null}
{"id": "7ceca908-a750-4bc2-bd3d-a24940cdea78", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODE", "description": "Introducing a dynamic inertia weight factor to adaptively balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba3e4089-f69c-4db9-9392-825900dc889e", "metadata": {"aucs": [0.7494618573245091, 0.735158838540637, 0.7190685613841558, 0.7444246504619116, 0.7719070310600915, 0.7716938479944934, 0.7214259326047814, 0.758584108336448, 0.7573160114085173, 0.5868924097828082, 0.5936638995323317, 0.5819632251565303, 0.5817315884712584, 0.5753539740710876, 0.5875533210713224, 0.5773997732337729, 0.592589921855692, 0.6085469101430383, 0.09136065602678478, 0.10566516870763976, 0.10581962941622691, 0.12010167501294022, 0.0880047725238754, 0.10716508074874675, 0.07947202412069454, 0.1275792427928122, 0.09144798896296069, 0.10714910056173743, 0.07652231537604348, 0.09677786204008476, 0.07551218781409552, 0.09244080393981258, 0.0918907314721622, 0.07539000450353783, 0.09193775070708521, 0.13119127502510897, 0.9629459373486599, 0.9483988830010983, 0.9912101147296363, 0.9683979718246329, 0.9914816699698471, 0.976607868016242, 0.9563069476618368, 0.977919469392129, 0.9797778141545255, 0.42846730944043643, 0.39286759567811746, 0.45692576265278617, 0.519197852933156, 0.47928237211500213, 0.4182079389563118, 0.4573251261865229, 0.49073830833106313, 0.43870741933812707, 0.654340193019715, 0.7289706989878391, 0.29309243350730163, 0.7262917953338871, 0.727164818043591, 0.8033656326564506, 0.798243950415877, 0.7299635847127512, 0.8294816595017291, 0.32719235707600225, 0.12304730440879308, 0.3247607948681579, 0.43329871266187003, 0.17690644446085513, 0.23602608033851546, 0.49694946217982594, 0.5573704377307585, 0.5321123869973683, 0.3529916153531828, 0.3584817837842713, 0.42968370173041825, 0.4583389619636128, 0.4408307442317966, 0.2632553999023932, 0.37875219001240856, 0.40939475276668413, 0.47590234617960747, 0.5710303839301218, 0.5615445959667211, 0.573867258223538, 0.5804541959701637, 0.54595720165952, 0.6109593293689828, 0.5710827207566062, 0.555856785918267, 0.5736120417621624, 0.6191484819784451, 0.654159365817339, 0.6237813529238125, 0.6116201378241417, 0.6733089609634687, 0.6415998415916367, 0.6728401954068205, 0.6698456485640623, 0.6511234377701358, 0.11348131151146712, 0.290558985222254, 0.1648448730850367, 0.16173148418940275, 0.16029189290896717, 0.4202862234609622, 0.14826811394991568, 0.23439672408211032, 0.15447557829202418, 0.395322011275582, 0.4061430717365657, 0.41581322226514195, 0.41087456985572657, 0.40493631023646326, 0.4372329175169042, 0.41140242051504516, 0.41719806911440316, 0.402728028470808, 0.710241799499127, 0.6697083538814737, 0.7132451516229723, 0.7181437669474038, 0.7005515002374016, 0.6826833107945032, 0.6967133025474062, 0.6677751937397788, 0.6889007606860866, 0.11637329740833413, 0.11950717025692847, 0.11478140708975237, 0.11891313055473329, 0.07521898672721017, 0.09736017710699907, 0.08677838809373495, 0.0989743929136464, 0.13364598528192095, 0.19159573966595778, 0.1942602866361387, 0.18753349850886447, 0.3176448188415355, 0.2569108154378309, 0.15255233270523472, 0.19555355543915098, 0.18219492295253048, 0.21001080019710727, 0.3292347330180686, 0.325758048324002, 0.3394783669621054, 0.2270482858016145, 0.33347029757450874, 0.23685175752339538, 0.3202667072070001, 0.32274840867575216, 0.32522416733129256, 0.310590573446932, 0.2853866538437162, 0.3028228813191083, 0.26295314245816537, 0.2690331832409407, 0.2828198163485547, 0.2977163893627911, 0.2477561545711645, 0.3009948574397374, 0.19516982974701702, 0.2028922362025033, 0.18302264960303471, 0.17561710567282718, 0.17954231562873502, 0.17465563114938343, 0.18701554534521936, 0.18050286525581383, 0.19932452368444487, 0.20241161813806585, 0.19883771150836527, 0.302977325010649, 0.1961450204031746, 0.17494092262828287, 0.19168914559735895, 0.1953058622157411, 0.20911161959722357, 0.20896850216376783, 0.8136000169141122, 0.1839520873581979, 0.7794765227349842, 0.1978674057359382, 0.18945546987319317, 0.1850341695818486, 0.18199411302485557, 0.16186624552731843, 0.7589927115987596, 0.19667512976726098, 0.444451227893469, 0.756519102367599, 0.6789851749508606, 0.16439651138472433, 0.1992992881878518, 0.2112801950217712, 0.20901854129136932, 0.701265302618092, 0.1946036743900207, 0.17282230165644163, 0.18654402884070997, 0.17840305967218806, 0.20851313027031837, 0.17383706774334262, 0.20238561516081854, 0.18671219848971687, 0.19506552877716188, 0.06448852687949691, 0.0694616353769637, 0.07077054462512933, 0.06863101290198881, 0.062415599255738585, 0.07845994546373425, 0.08603489789345276, 0.08554106713827592, 0.06444168464866129]}, "mutation_prompt": null}
{"id": "82b54e4c-8186-42d4-8b05-9ee1125f7f64", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODE", "description": "Introducing a dynamic inertia weight factor to adaptively balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba3e4089-f69c-4db9-9392-825900dc889e", "metadata": {"aucs": [0.7494618573245091, 0.735158838540637, 0.7190685613841558, 0.7444246504619116, 0.7719070310600915, 0.7716938479944934, 0.7214259326047814, 0.758584108336448, 0.7573160114085173, 0.5868924097828082, 0.5936638995323317, 0.5819632251565303, 0.5817315884712584, 0.5753539740710876, 0.5875533210713224, 0.5773997732337729, 0.592589921855692, 0.6085469101430383, 0.09136065602678478, 0.10566516870763976, 0.10581962941622691, 0.12010167501294022, 0.0880047725238754, 0.10716508074874675, 0.07947202412069454, 0.1275792427928122, 0.09144798896296069, 0.10714910056173743, 0.07652231537604348, 0.09677786204008476, 0.07551218781409552, 0.09244080393981258, 0.0918907314721622, 0.07539000450353783, 0.09193775070708521, 0.13119127502510897, 0.9629459373486599, 0.9483988830010983, 0.9912101147296363, 0.9683979718246329, 0.9914816699698471, 0.976607868016242, 0.9563069476618368, 0.977919469392129, 0.9797778141545255, 0.42846730944043643, 0.39286759567811746, 0.45692576265278617, 0.519197852933156, 0.47928237211500213, 0.4182079389563118, 0.4573251261865229, 0.49073830833106313, 0.43870741933812707, 0.654340193019715, 0.7289706989878391, 0.29309243350730163, 0.7262917953338871, 0.727164818043591, 0.8033656326564506, 0.798243950415877, 0.7299635847127512, 0.8294816595017291, 0.32719235707600225, 0.12304730440879308, 0.3247607948681579, 0.43329871266187003, 0.17690644446085513, 0.23602608033851546, 0.49694946217982594, 0.5573704377307585, 0.5321123869973683, 0.3529916153531828, 0.3584817837842713, 0.42968370173041825, 0.4583389619636128, 0.4408307442317966, 0.2632553999023932, 0.37875219001240856, 0.40939475276668413, 0.47590234617960747, 0.5710303839301218, 0.5615445959667211, 0.573867258223538, 0.5804541959701637, 0.54595720165952, 0.6109593293689828, 0.5710827207566062, 0.555856785918267, 0.5736120417621624, 0.6191484819784451, 0.654159365817339, 0.6237813529238125, 0.6116201378241417, 0.6733089609634687, 0.6415998415916367, 0.6728401954068205, 0.6698456485640623, 0.6511234377701358, 0.11348131151146712, 0.290558985222254, 0.1648448730850367, 0.16173148418940275, 0.16029189290896717, 0.4202862234609622, 0.14826811394991568, 0.23439672408211032, 0.15447557829202418, 0.395322011275582, 0.4061430717365657, 0.41581322226514195, 0.41087456985572657, 0.40493631023646326, 0.4372329175169042, 0.41140242051504516, 0.41719806911440316, 0.402728028470808, 0.710241799499127, 0.6697083538814737, 0.7132451516229723, 0.7181437669474038, 0.7005515002374016, 0.6826833107945032, 0.6967133025474062, 0.6677751937397788, 0.6889007606860866, 0.11637329740833413, 0.11950717025692847, 0.11478140708975237, 0.11891313055473329, 0.07521898672721017, 0.09736017710699907, 0.08677838809373495, 0.0989743929136464, 0.13364598528192095, 0.19159573966595778, 0.1942602866361387, 0.18753349850886447, 0.3176448188415355, 0.2569108154378309, 0.15255233270523472, 0.19555355543915098, 0.18219492295253048, 0.21001080019710727, 0.3292347330180686, 0.325758048324002, 0.3394783669621054, 0.2270482858016145, 0.33347029757450874, 0.23685175752339538, 0.3202667072070001, 0.32274840867575216, 0.32522416733129256, 0.310590573446932, 0.2853866538437162, 0.3028228813191083, 0.26295314245816537, 0.2690331832409407, 0.2828198163485547, 0.2977163893627911, 0.2477561545711645, 0.3009948574397374, 0.19516982974701702, 0.2028922362025033, 0.18302264960303471, 0.17561710567282718, 0.17954231562873502, 0.17465563114938343, 0.18701554534521936, 0.18050286525581383, 0.19932452368444487, 0.20241161813806585, 0.19883771150836527, 0.302977325010649, 0.1961450204031746, 0.17494092262828287, 0.19168914559735895, 0.1953058622157411, 0.20911161959722357, 0.20896850216376783, 0.8136000169141122, 0.1839520873581979, 0.7794765227349842, 0.1978674057359382, 0.18945546987319317, 0.1850341695818486, 0.18199411302485557, 0.16186624552731843, 0.7589927115987596, 0.19667512976726098, 0.444451227893469, 0.756519102367599, 0.6789851749508606, 0.16439651138472433, 0.1992992881878518, 0.2112801950217712, 0.20901854129136932, 0.701265302618092, 0.1946036743900207, 0.17282230165644163, 0.18654402884070997, 0.17840305967218806, 0.20851313027031837, 0.17383706774334262, 0.20238561516081854, 0.18671219848971687, 0.19506552877716188, 0.06448852687949691, 0.0694616353769637, 0.07077054462512933, 0.06863101290198881, 0.062415599255738585, 0.07845994546373425, 0.08603489789345276, 0.08554106713827592, 0.06444168464866129]}, "mutation_prompt": null}
{"id": "f67d8e57-5de9-41c9-83a6-f855b7077f52", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODE", "description": "Introducing a dynamic inertia weight factor to adaptively balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba3e4089-f69c-4db9-9392-825900dc889e", "metadata": {"aucs": [0.7494618573245091, 0.735158838540637, 0.7190685613841558, 0.7444246504619116, 0.7719070310600915, 0.7716938479944934, 0.7214259326047814, 0.758584108336448, 0.7573160114085173, 0.5868924097828082, 0.5936638995323317, 0.5819632251565303, 0.5817315884712584, 0.5753539740710876, 0.5875533210713224, 0.5773997732337729, 0.592589921855692, 0.6085469101430383, 0.09136065602678478, 0.10566516870763976, 0.10581962941622691, 0.12010167501294022, 0.0880047725238754, 0.10716508074874675, 0.07947202412069454, 0.1275792427928122, 0.09144798896296069, 0.10714910056173743, 0.07652231537604348, 0.09677786204008476, 0.07551218781409552, 0.09244080393981258, 0.0918907314721622, 0.07539000450353783, 0.09193775070708521, 0.13119127502510897, 0.9629459373486599, 0.9483988830010983, 0.9912101147296363, 0.9683979718246329, 0.9914816699698471, 0.976607868016242, 0.9563069476618368, 0.977919469392129, 0.9797778141545255, 0.42846730944043643, 0.39286759567811746, 0.45692576265278617, 0.519197852933156, 0.47928237211500213, 0.4182079389563118, 0.4573251261865229, 0.49073830833106313, 0.43870741933812707, 0.654340193019715, 0.7289706989878391, 0.29309243350730163, 0.7262917953338871, 0.727164818043591, 0.8033656326564506, 0.798243950415877, 0.7299635847127512, 0.8294816595017291, 0.32719235707600225, 0.12304730440879308, 0.3247607948681579, 0.43329871266187003, 0.17690644446085513, 0.23602608033851546, 0.49694946217982594, 0.5573704377307585, 0.5321123869973683, 0.3529916153531828, 0.3584817837842713, 0.42968370173041825, 0.4583389619636128, 0.4408307442317966, 0.2632553999023932, 0.37875219001240856, 0.40939475276668413, 0.47590234617960747, 0.5710303839301218, 0.5615445959667211, 0.573867258223538, 0.5804541959701637, 0.54595720165952, 0.6109593293689828, 0.5710827207566062, 0.555856785918267, 0.5736120417621624, 0.6191484819784451, 0.654159365817339, 0.6237813529238125, 0.6116201378241417, 0.6733089609634687, 0.6415998415916367, 0.6728401954068205, 0.6698456485640623, 0.6511234377701358, 0.11348131151146712, 0.290558985222254, 0.1648448730850367, 0.16173148418940275, 0.16029189290896717, 0.4202862234609622, 0.14826811394991568, 0.23439672408211032, 0.15447557829202418, 0.395322011275582, 0.4061430717365657, 0.41581322226514195, 0.41087456985572657, 0.40493631023646326, 0.4372329175169042, 0.41140242051504516, 0.41719806911440316, 0.402728028470808, 0.710241799499127, 0.6697083538814737, 0.7132451516229723, 0.7181437669474038, 0.7005515002374016, 0.6826833107945032, 0.6967133025474062, 0.6677751937397788, 0.6889007606860866, 0.11637329740833413, 0.11950717025692847, 0.11478140708975237, 0.11891313055473329, 0.07521898672721017, 0.09736017710699907, 0.08677838809373495, 0.0989743929136464, 0.13364598528192095, 0.19159573966595778, 0.1942602866361387, 0.18753349850886447, 0.3176448188415355, 0.2569108154378309, 0.15255233270523472, 0.19555355543915098, 0.18219492295253048, 0.21001080019710727, 0.3292347330180686, 0.325758048324002, 0.3394783669621054, 0.2270482858016145, 0.33347029757450874, 0.23685175752339538, 0.3202667072070001, 0.32274840867575216, 0.32522416733129256, 0.310590573446932, 0.2853866538437162, 0.3028228813191083, 0.26295314245816537, 0.2690331832409407, 0.2828198163485547, 0.2977163893627911, 0.2477561545711645, 0.3009948574397374, 0.19516982974701702, 0.2028922362025033, 0.18302264960303471, 0.17561710567282718, 0.17954231562873502, 0.17465563114938343, 0.18701554534521936, 0.18050286525581383, 0.19932452368444487, 0.20241161813806585, 0.19883771150836527, 0.302977325010649, 0.1961450204031746, 0.17494092262828287, 0.19168914559735895, 0.1953058622157411, 0.20911161959722357, 0.20896850216376783, 0.8136000169141122, 0.1839520873581979, 0.7794765227349842, 0.1978674057359382, 0.18945546987319317, 0.1850341695818486, 0.18199411302485557, 0.16186624552731843, 0.7589927115987596, 0.19667512976726098, 0.444451227893469, 0.756519102367599, 0.6789851749508606, 0.16439651138472433, 0.1992992881878518, 0.2112801950217712, 0.20901854129136932, 0.701265302618092, 0.1946036743900207, 0.17282230165644163, 0.18654402884070997, 0.17840305967218806, 0.20851313027031837, 0.17383706774334262, 0.20238561516081854, 0.18671219848971687, 0.19506552877716188, 0.06448852687949691, 0.0694616353769637, 0.07077054462512933, 0.06863101290198881, 0.062415599255738585, 0.07845994546373425, 0.08603489789345276, 0.08554106713827592, 0.06444168464866129]}, "mutation_prompt": null}
{"id": "143cc063-4721-4041-889b-6ad8be2b8fa1", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODE", "description": "Introducing a dynamic inertia weight factor to adaptively balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "ba3e4089-f69c-4db9-9392-825900dc889e", "metadata": {"aucs": [0.7494618573245091, 0.735158838540637, 0.7190685613841558, 0.7444246504619116, 0.7719070310600915, 0.7716938479944934, 0.7214259326047814, 0.758584108336448, 0.7573160114085173, 0.5868924097828082, 0.5936638995323317, 0.5819632251565303, 0.5817315884712584, 0.5753539740710876, 0.5875533210713224, 0.5773997732337729, 0.592589921855692, 0.6085469101430383, 0.09136065602678478, 0.10566516870763976, 0.10581962941622691, 0.12010167501294022, 0.0880047725238754, 0.10716508074874675, 0.07947202412069454, 0.1275792427928122, 0.09144798896296069, 0.10714910056173743, 0.07652231537604348, 0.09677786204008476, 0.07551218781409552, 0.09244080393981258, 0.0918907314721622, 0.07539000450353783, 0.09193775070708521, 0.13119127502510897, 0.9629459373486599, 0.9483988830010983, 0.9912101147296363, 0.9683979718246329, 0.9914816699698471, 0.976607868016242, 0.9563069476618368, 0.977919469392129, 0.9797778141545255, 0.42846730944043643, 0.39286759567811746, 0.45692576265278617, 0.519197852933156, 0.47928237211500213, 0.4182079389563118, 0.4573251261865229, 0.49073830833106313, 0.43870741933812707, 0.654340193019715, 0.7289706989878391, 0.29309243350730163, 0.7262917953338871, 0.727164818043591, 0.8033656326564506, 0.798243950415877, 0.7299635847127512, 0.8294816595017291, 0.32719235707600225, 0.12304730440879308, 0.3247607948681579, 0.43329871266187003, 0.17690644446085513, 0.23602608033851546, 0.49694946217982594, 0.5573704377307585, 0.5321123869973683, 0.3529916153531828, 0.3584817837842713, 0.42968370173041825, 0.4583389619636128, 0.4408307442317966, 0.2632553999023932, 0.37875219001240856, 0.40939475276668413, 0.47590234617960747, 0.5710303839301218, 0.5615445959667211, 0.573867258223538, 0.5804541959701637, 0.54595720165952, 0.6109593293689828, 0.5710827207566062, 0.555856785918267, 0.5736120417621624, 0.6191484819784451, 0.654159365817339, 0.6237813529238125, 0.6116201378241417, 0.6733089609634687, 0.6415998415916367, 0.6728401954068205, 0.6698456485640623, 0.6511234377701358, 0.11348131151146712, 0.290558985222254, 0.1648448730850367, 0.16173148418940275, 0.16029189290896717, 0.4202862234609622, 0.14826811394991568, 0.23439672408211032, 0.15447557829202418, 0.395322011275582, 0.4061430717365657, 0.41581322226514195, 0.41087456985572657, 0.40493631023646326, 0.4372329175169042, 0.41140242051504516, 0.41719806911440316, 0.402728028470808, 0.710241799499127, 0.6697083538814737, 0.7132451516229723, 0.7181437669474038, 0.7005515002374016, 0.6826833107945032, 0.6967133025474062, 0.6677751937397788, 0.6889007606860866, 0.11637329740833413, 0.11950717025692847, 0.11478140708975237, 0.11891313055473329, 0.07521898672721017, 0.09736017710699907, 0.08677838809373495, 0.0989743929136464, 0.13364598528192095, 0.19159573966595778, 0.1942602866361387, 0.18753349850886447, 0.3176448188415355, 0.2569108154378309, 0.15255233270523472, 0.19555355543915098, 0.18219492295253048, 0.21001080019710727, 0.3292347330180686, 0.325758048324002, 0.3394783669621054, 0.2270482858016145, 0.33347029757450874, 0.23685175752339538, 0.3202667072070001, 0.32274840867575216, 0.32522416733129256, 0.310590573446932, 0.2853866538437162, 0.3028228813191083, 0.26295314245816537, 0.2690331832409407, 0.2828198163485547, 0.2977163893627911, 0.2477561545711645, 0.3009948574397374, 0.19516982974701702, 0.2028922362025033, 0.18302264960303471, 0.17561710567282718, 0.17954231562873502, 0.17465563114938343, 0.18701554534521936, 0.18050286525581383, 0.19932452368444487, 0.20241161813806585, 0.19883771150836527, 0.302977325010649, 0.1961450204031746, 0.17494092262828287, 0.19168914559735895, 0.1953058622157411, 0.20911161959722357, 0.20896850216376783, 0.8136000169141122, 0.1839520873581979, 0.7794765227349842, 0.1978674057359382, 0.18945546987319317, 0.1850341695818486, 0.18199411302485557, 0.16186624552731843, 0.7589927115987596, 0.19667512976726098, 0.444451227893469, 0.756519102367599, 0.6789851749508606, 0.16439651138472433, 0.1992992881878518, 0.2112801950217712, 0.20901854129136932, 0.701265302618092, 0.1946036743900207, 0.17282230165644163, 0.18654402884070997, 0.17840305967218806, 0.20851313027031837, 0.17383706774334262, 0.20238561516081854, 0.18671219848971687, 0.19506552877716188, 0.06448852687949691, 0.0694616353769637, 0.07077054462512933, 0.06863101290198881, 0.062415599255738585, 0.07845994546373425, 0.08603489789345276, 0.08554106713827592, 0.06444168464866129]}, "mutation_prompt": null}
{"id": "7ea8c580-17a5-45bb-afc7-b24cd9b2a428", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODE", "description": "Introducing a dynamic inertia weight factor to adaptively balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba3e4089-f69c-4db9-9392-825900dc889e", "metadata": {"aucs": [0.7494618573245091, 0.735158838540637, 0.7190685613841558, 0.7444246504619116, 0.7719070310600915, 0.7716938479944934, 0.7214259326047814, 0.758584108336448, 0.7573160114085173, 0.5868924097828082, 0.5936638995323317, 0.5819632251565303, 0.5817315884712584, 0.5753539740710876, 0.5875533210713224, 0.5773997732337729, 0.592589921855692, 0.6085469101430383, 0.09136065602678478, 0.10566516870763976, 0.10581962941622691, 0.12010167501294022, 0.0880047725238754, 0.10716508074874675, 0.07947202412069454, 0.1275792427928122, 0.09144798896296069, 0.10714910056173743, 0.07652231537604348, 0.09677786204008476, 0.07551218781409552, 0.09244080393981258, 0.0918907314721622, 0.07539000450353783, 0.09193775070708521, 0.13119127502510897, 0.9629459373486599, 0.9483988830010983, 0.9912101147296363, 0.9683979718246329, 0.9914816699698471, 0.976607868016242, 0.9563069476618368, 0.977919469392129, 0.9797778141545255, 0.42846730944043643, 0.39286759567811746, 0.45692576265278617, 0.519197852933156, 0.47928237211500213, 0.4182079389563118, 0.4573251261865229, 0.49073830833106313, 0.43870741933812707, 0.654340193019715, 0.7289706989878391, 0.29309243350730163, 0.7262917953338871, 0.727164818043591, 0.8033656326564506, 0.798243950415877, 0.7299635847127512, 0.8294816595017291, 0.32719235707600225, 0.12304730440879308, 0.3247607948681579, 0.43329871266187003, 0.17690644446085513, 0.23602608033851546, 0.49694946217982594, 0.5573704377307585, 0.5321123869973683, 0.3529916153531828, 0.3584817837842713, 0.42968370173041825, 0.4583389619636128, 0.4408307442317966, 0.2632553999023932, 0.37875219001240856, 0.40939475276668413, 0.47590234617960747, 0.5710303839301218, 0.5615445959667211, 0.573867258223538, 0.5804541959701637, 0.54595720165952, 0.6109593293689828, 0.5710827207566062, 0.555856785918267, 0.5736120417621624, 0.6191484819784451, 0.654159365817339, 0.6237813529238125, 0.6116201378241417, 0.6733089609634687, 0.6415998415916367, 0.6728401954068205, 0.6698456485640623, 0.6511234377701358, 0.11348131151146712, 0.290558985222254, 0.1648448730850367, 0.16173148418940275, 0.16029189290896717, 0.4202862234609622, 0.14826811394991568, 0.23439672408211032, 0.15447557829202418, 0.395322011275582, 0.4061430717365657, 0.41581322226514195, 0.41087456985572657, 0.40493631023646326, 0.4372329175169042, 0.41140242051504516, 0.41719806911440316, 0.402728028470808, 0.710241799499127, 0.6697083538814737, 0.7132451516229723, 0.7181437669474038, 0.7005515002374016, 0.6826833107945032, 0.6967133025474062, 0.6677751937397788, 0.6889007606860866, 0.11637329740833413, 0.11950717025692847, 0.11478140708975237, 0.11891313055473329, 0.07521898672721017, 0.09736017710699907, 0.08677838809373495, 0.0989743929136464, 0.13364598528192095, 0.19159573966595778, 0.1942602866361387, 0.18753349850886447, 0.3176448188415355, 0.2569108154378309, 0.15255233270523472, 0.19555355543915098, 0.18219492295253048, 0.21001080019710727, 0.3292347330180686, 0.325758048324002, 0.3394783669621054, 0.2270482858016145, 0.33347029757450874, 0.23685175752339538, 0.3202667072070001, 0.32274840867575216, 0.32522416733129256, 0.310590573446932, 0.2853866538437162, 0.3028228813191083, 0.26295314245816537, 0.2690331832409407, 0.2828198163485547, 0.2977163893627911, 0.2477561545711645, 0.3009948574397374, 0.19516982974701702, 0.2028922362025033, 0.18302264960303471, 0.17561710567282718, 0.17954231562873502, 0.17465563114938343, 0.18701554534521936, 0.18050286525581383, 0.19932452368444487, 0.20241161813806585, 0.19883771150836527, 0.302977325010649, 0.1961450204031746, 0.17494092262828287, 0.19168914559735895, 0.1953058622157411, 0.20911161959722357, 0.20896850216376783, 0.8136000169141122, 0.1839520873581979, 0.7794765227349842, 0.1978674057359382, 0.18945546987319317, 0.1850341695818486, 0.18199411302485557, 0.16186624552731843, 0.7589927115987596, 0.19667512976726098, 0.444451227893469, 0.756519102367599, 0.6789851749508606, 0.16439651138472433, 0.1992992881878518, 0.2112801950217712, 0.20901854129136932, 0.701265302618092, 0.1946036743900207, 0.17282230165644163, 0.18654402884070997, 0.17840305967218806, 0.20851313027031837, 0.17383706774334262, 0.20238561516081854, 0.18671219848971687, 0.19506552877716188, 0.06448852687949691, 0.0694616353769637, 0.07077054462512933, 0.06863101290198881, 0.062415599255738585, 0.07845994546373425, 0.08603489789345276, 0.08554106713827592, 0.06444168464866129]}, "mutation_prompt": null}
{"id": "bb7cf336-1aae-4a2c-96d5-fea6cdc069f5", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODE", "description": "Introducing a dynamic inertia weight factor to adaptively balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba3e4089-f69c-4db9-9392-825900dc889e", "metadata": {"aucs": [0.7494618573245091, 0.735158838540637, 0.7190685613841558, 0.7444246504619116, 0.7719070310600915, 0.7716938479944934, 0.7214259326047814, 0.758584108336448, 0.7573160114085173, 0.5868924097828082, 0.5936638995323317, 0.5819632251565303, 0.5817315884712584, 0.5753539740710876, 0.5875533210713224, 0.5773997732337729, 0.592589921855692, 0.6085469101430383, 0.09136065602678478, 0.10566516870763976, 0.10581962941622691, 0.12010167501294022, 0.0880047725238754, 0.10716508074874675, 0.07947202412069454, 0.1275792427928122, 0.09144798896296069, 0.10714910056173743, 0.07652231537604348, 0.09677786204008476, 0.07551218781409552, 0.09244080393981258, 0.0918907314721622, 0.07539000450353783, 0.09193775070708521, 0.13119127502510897, 0.9629459373486599, 0.9483988830010983, 0.9912101147296363, 0.9683979718246329, 0.9914816699698471, 0.976607868016242, 0.9563069476618368, 0.977919469392129, 0.9797778141545255, 0.42846730944043643, 0.39286759567811746, 0.45692576265278617, 0.519197852933156, 0.47928237211500213, 0.4182079389563118, 0.4573251261865229, 0.49073830833106313, 0.43870741933812707, 0.654340193019715, 0.7289706989878391, 0.29309243350730163, 0.7262917953338871, 0.727164818043591, 0.8033656326564506, 0.798243950415877, 0.7299635847127512, 0.8294816595017291, 0.32719235707600225, 0.12304730440879308, 0.3247607948681579, 0.43329871266187003, 0.17690644446085513, 0.23602608033851546, 0.49694946217982594, 0.5573704377307585, 0.5321123869973683, 0.3529916153531828, 0.3584817837842713, 0.42968370173041825, 0.4583389619636128, 0.4408307442317966, 0.2632553999023932, 0.37875219001240856, 0.40939475276668413, 0.47590234617960747, 0.5710303839301218, 0.5615445959667211, 0.573867258223538, 0.5804541959701637, 0.54595720165952, 0.6109593293689828, 0.5710827207566062, 0.555856785918267, 0.5736120417621624, 0.6191484819784451, 0.654159365817339, 0.6237813529238125, 0.6116201378241417, 0.6733089609634687, 0.6415998415916367, 0.6728401954068205, 0.6698456485640623, 0.6511234377701358, 0.11348131151146712, 0.290558985222254, 0.1648448730850367, 0.16173148418940275, 0.16029189290896717, 0.4202862234609622, 0.14826811394991568, 0.23439672408211032, 0.15447557829202418, 0.395322011275582, 0.4061430717365657, 0.41581322226514195, 0.41087456985572657, 0.40493631023646326, 0.4372329175169042, 0.41140242051504516, 0.41719806911440316, 0.402728028470808, 0.710241799499127, 0.6697083538814737, 0.7132451516229723, 0.7181437669474038, 0.7005515002374016, 0.6826833107945032, 0.6967133025474062, 0.6677751937397788, 0.6889007606860866, 0.11637329740833413, 0.11950717025692847, 0.11478140708975237, 0.11891313055473329, 0.07521898672721017, 0.09736017710699907, 0.08677838809373495, 0.0989743929136464, 0.13364598528192095, 0.19159573966595778, 0.1942602866361387, 0.18753349850886447, 0.3176448188415355, 0.2569108154378309, 0.15255233270523472, 0.19555355543915098, 0.18219492295253048, 0.21001080019710727, 0.3292347330180686, 0.325758048324002, 0.3394783669621054, 0.2270482858016145, 0.33347029757450874, 0.23685175752339538, 0.3202667072070001, 0.32274840867575216, 0.32522416733129256, 0.310590573446932, 0.2853866538437162, 0.3028228813191083, 0.26295314245816537, 0.2690331832409407, 0.2828198163485547, 0.2977163893627911, 0.2477561545711645, 0.3009948574397374, 0.19516982974701702, 0.2028922362025033, 0.18302264960303471, 0.17561710567282718, 0.17954231562873502, 0.17465563114938343, 0.18701554534521936, 0.18050286525581383, 0.19932452368444487, 0.20241161813806585, 0.19883771150836527, 0.302977325010649, 0.1961450204031746, 0.17494092262828287, 0.19168914559735895, 0.1953058622157411, 0.20911161959722357, 0.20896850216376783, 0.8136000169141122, 0.1839520873581979, 0.7794765227349842, 0.1978674057359382, 0.18945546987319317, 0.1850341695818486, 0.18199411302485557, 0.16186624552731843, 0.7589927115987596, 0.19667512976726098, 0.444451227893469, 0.756519102367599, 0.6789851749508606, 0.16439651138472433, 0.1992992881878518, 0.2112801950217712, 0.20901854129136932, 0.701265302618092, 0.1946036743900207, 0.17282230165644163, 0.18654402884070997, 0.17840305967218806, 0.20851313027031837, 0.17383706774334262, 0.20238561516081854, 0.18671219848971687, 0.19506552877716188, 0.06448852687949691, 0.0694616353769637, 0.07077054462512933, 0.06863101290198881, 0.062415599255738585, 0.07845994546373425, 0.08603489789345276, 0.08554106713827592, 0.06444168464866129]}, "mutation_prompt": null}
{"id": "27734a71-41e9-409e-9072-817f05391140", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2 = np.random.choice(swarm_size, 2, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODE", "description": "Introducing a dynamic inertia weight factor to adaptively balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ba3e4089-f69c-4db9-9392-825900dc889e", "metadata": {"aucs": [0.7494618573245091, 0.735158838540637, 0.7190685613841558, 0.7444246504619116, 0.7719070310600915, 0.7716938479944934, 0.7214259326047814, 0.758584108336448, 0.7573160114085173, 0.5868924097828082, 0.5936638995323317, 0.5819632251565303, 0.5817315884712584, 0.5753539740710876, 0.5875533210713224, 0.5773997732337729, 0.592589921855692, 0.6085469101430383, 0.09136065602678478, 0.10566516870763976, 0.10581962941622691, 0.12010167501294022, 0.0880047725238754, 0.10716508074874675, 0.07947202412069454, 0.1275792427928122, 0.09144798896296069, 0.10714910056173743, 0.07652231537604348, 0.09677786204008476, 0.07551218781409552, 0.09244080393981258, 0.0918907314721622, 0.07539000450353783, 0.09193775070708521, 0.13119127502510897, 0.9629459373486599, 0.9483988830010983, 0.9912101147296363, 0.9683979718246329, 0.9914816699698471, 0.976607868016242, 0.9563069476618368, 0.977919469392129, 0.9797778141545255, 0.42846730944043643, 0.39286759567811746, 0.45692576265278617, 0.519197852933156, 0.47928237211500213, 0.4182079389563118, 0.4573251261865229, 0.49073830833106313, 0.43870741933812707, 0.654340193019715, 0.7289706989878391, 0.29309243350730163, 0.7262917953338871, 0.727164818043591, 0.8033656326564506, 0.798243950415877, 0.7299635847127512, 0.8294816595017291, 0.32719235707600225, 0.12304730440879308, 0.3247607948681579, 0.43329871266187003, 0.17690644446085513, 0.23602608033851546, 0.49694946217982594, 0.5573704377307585, 0.5321123869973683, 0.3529916153531828, 0.3584817837842713, 0.42968370173041825, 0.4583389619636128, 0.4408307442317966, 0.2632553999023932, 0.37875219001240856, 0.40939475276668413, 0.47590234617960747, 0.5710303839301218, 0.5615445959667211, 0.573867258223538, 0.5804541959701637, 0.54595720165952, 0.6109593293689828, 0.5710827207566062, 0.555856785918267, 0.5736120417621624, 0.6191484819784451, 0.654159365817339, 0.6237813529238125, 0.6116201378241417, 0.6733089609634687, 0.6415998415916367, 0.6728401954068205, 0.6698456485640623, 0.6511234377701358, 0.11348131151146712, 0.290558985222254, 0.1648448730850367, 0.16173148418940275, 0.16029189290896717, 0.4202862234609622, 0.14826811394991568, 0.23439672408211032, 0.15447557829202418, 0.395322011275582, 0.4061430717365657, 0.41581322226514195, 0.41087456985572657, 0.40493631023646326, 0.4372329175169042, 0.41140242051504516, 0.41719806911440316, 0.402728028470808, 0.710241799499127, 0.6697083538814737, 0.7132451516229723, 0.7181437669474038, 0.7005515002374016, 0.6826833107945032, 0.6967133025474062, 0.6677751937397788, 0.6889007606860866, 0.11637329740833413, 0.11950717025692847, 0.11478140708975237, 0.11891313055473329, 0.07521898672721017, 0.09736017710699907, 0.08677838809373495, 0.0989743929136464, 0.13364598528192095, 0.19159573966595778, 0.1942602866361387, 0.18753349850886447, 0.3176448188415355, 0.2569108154378309, 0.15255233270523472, 0.19555355543915098, 0.18219492295253048, 0.21001080019710727, 0.3292347330180686, 0.325758048324002, 0.3394783669621054, 0.2270482858016145, 0.33347029757450874, 0.23685175752339538, 0.3202667072070001, 0.32274840867575216, 0.32522416733129256, 0.310590573446932, 0.2853866538437162, 0.3028228813191083, 0.26295314245816537, 0.2690331832409407, 0.2828198163485547, 0.2977163893627911, 0.2477561545711645, 0.3009948574397374, 0.19516982974701702, 0.2028922362025033, 0.18302264960303471, 0.17561710567282718, 0.17954231562873502, 0.17465563114938343, 0.18701554534521936, 0.18050286525581383, 0.19932452368444487, 0.20241161813806585, 0.19883771150836527, 0.302977325010649, 0.1961450204031746, 0.17494092262828287, 0.19168914559735895, 0.1953058622157411, 0.20911161959722357, 0.20896850216376783, 0.8136000169141122, 0.1839520873581979, 0.7794765227349842, 0.1978674057359382, 0.18945546987319317, 0.1850341695818486, 0.18199411302485557, 0.16186624552731843, 0.7589927115987596, 0.19667512976726098, 0.444451227893469, 0.756519102367599, 0.6789851749508606, 0.16439651138472433, 0.1992992881878518, 0.2112801950217712, 0.20901854129136932, 0.701265302618092, 0.1946036743900207, 0.17282230165644163, 0.18654402884070997, 0.17840305967218806, 0.20851313027031837, 0.17383706774334262, 0.20238561516081854, 0.18671219848971687, 0.19506552877716188, 0.06448852687949691, 0.0694616353769637, 0.07077054462512933, 0.06863101290198881, 0.062415599255738585, 0.07845994546373425, 0.08603489789345276, 0.08554106713827592, 0.06444168464866129]}, "mutation_prompt": null}
{"id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 43, "fitness": 0.4438907803530584, "feedback": "The algorithm DynamicInertiaHybridPSODEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.28.", "error": "", "parent_id": "ba3e4089-f69c-4db9-9392-825900dc889e", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "ff3a3b3f-7386-4c81-b284-6d66e67a1ba1", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "41a58308-1c2c-448c-b29a-fee93fdf340b", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "0731f4f4-d273-4b66-a20d-a48c81ba76dd", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "1e83e214-d7cc-40f8-ba19-7de3909d7281", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "9ff1c4ab-39e8-457f-a061-07a1dd8fc8f3", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "1869133c-75ed-4bac-95e0-6c85f2888b1b", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        max_swarm_size = 20\n        min_swarm_size = 5\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm_size = max_swarm_size\n        max_iter = self.budget // swarm_size\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n\n            # Dynamic adjustment of swarm_size based on population diversity\n            diversity = np.std(swarm_vals)\n            if diversity < 0.1:\n                swarm_size = min(swarm_size * 2, max_swarm_size)\n            elif diversity > 0.5:\n                swarm_size = max(swarm_size // 2, min_swarm_size)\n            max_iter = self.budget // swarm_size\n\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Enhancing the exploration capability by dynamically adjusting the swarm size based on population diversity.", "configspace": "", "generation": 49, "fitness": 0.102678172405803, "feedback": "The algorithm DynamicInertiaHybridPSODEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.13.", "error": "", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.25535884458425484, 0.0955240146806936, 0.12836134914257324, 0.10754817852542387, 0.08887396226948874, 0.10180590576739046, 0.17530381836944076, 0.255839804015657, 0.22359792579298676, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.023844965043409827, 0.08847954014141779, 0.04307210913884607, 0.07690450083751132, 0.08127628725346281, 0.05406677319149622, 0.04502843971650072, 0.040165908256333926, 0.026798799147656593, 0.02390973564221366, 0.05457518583042642, 0.0, 0.04516282135426841, 0.030421791108914853, 0.04306154354114189, 0.04008088570138357, 0.02295510485516228, 0.018525791551887383, 0.9920537182450465, 0.9798852477920952, 0.13889722835636276, 0.0748469558595225, 0.9103263199488189, 0.07454254518490866, 0.07762535269093496, 0.25795609443913403, 0.07425465653260832, 0.03254730839226139, 0.027331204431029765, 0.1196418017262274, 0.0360050458516562, 0.027509145497013887, 0.03915397423935685, 0.10292275158218311, 0.011194453811874339, 0.036590003704177754, 0.10018685869140243, 0.13037675523059455, 0.04790460959812859, 0.2103444579721957, 0.06398025100369087, 0.1592625216398239, 0.1416515301353718, 0.15028935898977502, 0.1765894767899563, 0.0, 0.0, 0.0, 0.0, 0.03428341183703232, 0.0, 0.0, 0.026066226657061264, 0.030327699129823693, 0.0, 0.1107996404301742, 0.0, 0.0, 0.0, 0.05168280597367647, 0.0, 0.0, 0.05566152236417243, 0.0, 0.0, 0.0, 0.06390368678385783, 0.0, 0.0, 0.0, 0.06807168003176778, 0.0, 0.06333550930819853, 0.0714420850960279, 0.08438100173728869, 0.051044569818875285, 0.051111690366806406, 0.046535120748157355, 0.05593389986687003, 0.0657656924557094, 0.025790520405479245, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027332133925014546, 0.001874961218899629, 0.0, 0.1799860921550922, 0.14940153100787867, 0.1724159770443101, 0.10099120328192968, 0.14994367860735125, 0.14179168585001845, 0.14670379751638174, 0.15800111488216484, 0.18471587299912795, 0.03471604790667604, 0.02100816349093171, 0.0377990198372008, 0.035925762960274055, 0.06310153146112318, 0.07940718465557839, 0.07799028697312038, 0.07795017002062066, 0.08889887147668707, 0.2051256935115462, 0.1703060561210621, 0.11910286473870346, 0.19545944528388204, 0.12129864965258186, 0.18493117028624328, 0.10540681927187323, 0.13577128755025547, 0.10773560441894947, 0.12350283116964311, 0.23470762731611705, 0.18096595064019116, 0.1597871326242437, 0.2094535326855177, 0.14993315798275253, 0.22009560742514844, 0.22468296474909732, 0.1428687146979064, 0.08428187116513708, 0.15773072840698898, 0.17444531612361514, 0.13863112747470618, 0.19898783922927266, 0.0679935766830797, 0.138490365603536, 0.20241884376488395, 0.09065518131854511, 0.17223020226321062, 0.19302388981735707, 0.20220585706302685, 0.17336103811419312, 0.1974166134177021, 0.1917046154057842, 0.14228782861371148, 0.1854903776347555, 0.22006064443137052, 0.17445675202755206, 0.0, 0.1778157609454536, 0.0, 0.0673751265057525, 0.1651541540770851, 0.17414588843672696, 0.18050117162679347, 0.17576143283086598, 0.15709029800511343, 0.15504558300615445, 0.12096030108807354, 0.16938086341474923, 0.14328122708185842, 0.1222497056136217, 0.11372687700484896, 0.22332975691864676, 0.16963074719228932, 0.17749726161386115, 0.1662196759387804, 0.23633582705316525, 0.22253024100790786, 0.09660711094722796, 0.1224509500210692, 0.10299255409020514, 0.11377837622037001, 0.11123028330338236, 0.17906002449634395, 0.1837108532330083, 0.17306203339042714, 0.1842471581873658, 0.17460793013622078, 0.1648768434436182, 0.19015820344511236, 0.17766002211252996, 0.19731333644416393, 0.06809643162372303, 0.04836755408821791, 0.07163394916184918, 0.04344399899863949, 0.051193374146202175, 0.06771278933913638, 0.06184945424793409, 0.05763972865071176, 0.051247137802642784]}, "mutation_prompt": null}
{"id": "739c3d21-cfda-43b3-a862-0d1b6e2533a7", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "e1f26c2f-305d-4406-b77f-8afe823f7021", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "7539e237-a418-4dd6-9c50-8189cc46200a", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "af2216c0-d46c-43ca-8ed2-61f4f9482e46", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "f3cbb5da-c65e-44f2-8366-41382b13dd86", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "f5d79925-7b42-42c6-95c0-9f2d31c83893", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "810c22a2-ab7c-40aa-843b-f01d83e07ae0", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "38083377-c7d9-4aba-a09d-f364cfca4769", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "e0997365-9f19-4b97-b57d-342dd6eb35fe", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "febdd5c9-6b6a-4e67-b3a4-558072faf6db", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "35a894bb-5669-4295-938d-c0f7b3d99333", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "b2848a00-c899-4f20-89b6-c84a107c0dd0", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "53bc90b1-9712-400f-8980-f5f55b8043b3", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "615e1e19-60c8-418e-8dc5-0a784538b216", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "ecb51f9d-eb16-46cd-9580-e817f5bebed0", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "41cafcf2-f54f-469c-90a5-ca33ffec1094", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "632b5e7a-fd4d-482d-b034-9ca701390f95", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "c4ca13f0-f6ad-42c8-a8a8-7732df55c539", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "3e5e4789-f2c2-4646-8238-7c4413a5c3d0", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "f3156af7-698c-470d-a93a-c0d327024eea", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "a07e05d1-7667-40df-ba67-9b582e26e4a5", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "8b03d130-ef91-4a6c-81e7-8187a78166a7", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "cd058a90-0689-4d5c-983a-1321c3a5b747", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "423f45f7-0e5e-4174-8c4d-84c6c5cffd55", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "fc9e1b66-12be-4b7f-87da-1e3a8c462b80", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "cd0dc62f-ebb7-4d9a-8ec8-43b98c76716a", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "c11f36d7-70be-4239-8b2a-9827f9b02b0c", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "a9803ea7-0f64-4e45-99a2-cf821c6dfbc3", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "251d23d0-bba7-4c5c-88c3-107ff467c30b", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "02da76d2-9663-48ad-90d2-770b47183608", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "b119e371-759c-43c8-b9dd-dfcff7068bae", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "c8c3d82f-9240-4353-bc85-6b65dfb51a8c", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "f2fe38c4-1dd7-4b91-bf9f-0fe1f78ccbff", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "9ec0fe25-76c8-4e61-81dd-de61aea9a884", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "91eb3966-890f-4d8b-b8e6-9a45e0c63ece", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "f7a89afe-2986-4261-9473-5dc724e85506", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "4f33c7af-1dc8-4f44-9fc4-c4ff0572b491", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "d3e85467-2255-4660-a663-462f1eed243d", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "d7908a4a-5ea6-44ae-9da0-30a29b337480", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "2c492a30-3492-421b-b09d-6eee31973c9d", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "981368c3-7e7a-4c61-bf53-b411f4479d1f", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "ab8b0a8f-7efd-4e29-958f-8446ba605336", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "98328147-8f9f-4934-afc0-bf1146377a51", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "e1236c3b-c00c-441a-96e9-22f780757088", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "16753c97-5a38-441a-adbb-2a2689a10bef", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "a1429d4b-569c-49c5-9cc1-3037b405c4b1", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "57d490c6-e111-4302-b171-42d5aeaa3348", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "e25ebd04-b00e-436a-90a0-df132bab2335", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "6f797d80-44ee-4b14-b096-b71d9e8d76ec", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
{"id": "eadf5d1d-6bf2-46e1-b063-4cb7e5707afd", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        swarm_size = 20\n        max_iter = self.budget // swarm_size\n        lb = -5.0\n        ub = 5.0\n\n        def random_vector():\n            return lb + (ub - lb) * np.random.rand(self.dim)\n\n        best_pos = random_vector()\n        best_val = func(best_pos)\n\n        inertia_weight = 0.5  # Initialize inertia weight factor\n\n        swarm = [random_vector() for _ in range(swarm_size)]\n        swarm_vals = [func(p) for p in swarm]\n        for _ in range(max_iter):\n            for i in range(swarm_size):\n                r1, r2, r3 = np.random.choice(swarm_size, 3, replace=False)\n                vi = swarm[i] + inertia_weight * (swarm[r1] - swarm[r2]) + 0.5 * (swarm[r3] - swarm[i])\n                vi = np.clip(vi, lb, ub)\n                fi = func(vi)\n                if fi < swarm_vals[i]:\n                    swarm[i] = vi\n                    swarm_vals[i] = fi\n                    if fi < best_val:\n                        best_val = fi\n                        best_pos = vi\n            inertia_weight = 0.5 + 0.5 * (1 - (_ / max_iter))  # Update inertia weight adaptively\n        return best_val", "name": "DynamicInertiaHybridPSODEImproved", "description": "Implementing a hybrid approach by incorporating a differential evolution strategy to enhance exploration capability.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5a956cdf-ceb4-4021-9794-13f15e86cc32", "metadata": {"aucs": [0.8303633083682187, 0.84368928340061, 0.8507841024221958, 0.8347613117490289, 0.8394377698416783, 0.8403214500112175, 0.8482457937188792, 0.8235941515144405, 0.8206475578968309, 0.7458464418769406, 0.7417147596300651, 0.7227361522301127, 0.7323028908433713, 0.7506947126939776, 0.7590344573819041, 0.7393992468651454, 0.7425915422373732, 0.7484533121527476, 0.11340014859801739, 0.1094161229032532, 0.08916886084032227, 0.08852128157490369, 0.10841665770860565, 0.09550337708553858, 0.10036693163826671, 0.10667170581254815, 0.10200972163096189, 0.09661798575394764, 0.08584327727707164, 0.08457285256384561, 0.08665138673865225, 0.0923210296773419, 0.09646514047303167, 0.08027037784580426, 0.09462357103919716, 0.08593941204483213, 0.9434107506866464, 0.9294931463488253, 0.8121652615846042, 0.9476467053437871, 0.9888916586933956, 0.8169143159814392, 0.6198603839438257, 0.782259098153755, 0.8150562791928939, 0.6629807198711899, 0.5133480031625524, 0.4930794151280372, 0.5378364407931118, 0.5131707244611098, 0.43799546116190247, 0.6033935828251185, 0.5588055259058428, 0.5399091270418879, 0.8410136131957221, 0.8090004886635986, 0.8316721717927154, 0.8446891095451278, 0.8509518419234475, 0.8486250657596043, 0.8501710633047841, 0.8508805500697793, 0.8526916267977457, 0.6699999079607506, 0.17333099986720057, 0.6091803355655573, 0.5856706013647355, 0.3124864030127392, 0.2961274693281637, 0.43369359247188466, 0.45211394239329405, 0.5000705279365085, 0.2509100412249575, 0.1603540856421498, 0.13510960910511316, 0.21598104651354177, 0.627211490019024, 0.1543010039548186, 0.230512088466584, 0.17207324292362025, 0.19789220987371003, 0.7138680503471833, 0.6984411053445815, 0.692119706461878, 0.7241084177434033, 0.7257251124404158, 0.7404786054941878, 0.7112475032230522, 0.7135410549950538, 0.6963987621516706, 0.7417231353767478, 0.7801105283079712, 0.7522613385124335, 0.783883725931481, 0.7598715811703352, 0.7892751216503131, 0.7588995531912657, 0.7912847294953456, 0.776364058509298, 0.16429159119920334, 0.30096577402906677, 0.2742372035016396, 0.4597476473040001, 0.4857136470069452, 0.6723560354323223, 0.16673281841833087, 0.17206072536821193, 0.26924912645938925, 0.6524227254209201, 0.5497900110689478, 0.6684151385172676, 0.6598090472111855, 0.6595104076837661, 0.6394759357855906, 0.6816807004092826, 0.6499164243921638, 0.5904483857437114, 0.8314734418917522, 0.8178653473101389, 0.8179677370820426, 0.8245867230269844, 0.8303230665001812, 0.7928682954579156, 0.806862663766155, 0.8311194994964005, 0.798212637659965, 0.09921278250154064, 0.11034778811504498, 0.10022769274000565, 0.10170392709374154, 0.10237168906097227, 0.08755979019969928, 0.11372491103186855, 0.11229205309541102, 0.09320474199369166, 0.1789228599131487, 0.14745012477786823, 0.13713085287234517, 0.13892637954723208, 0.1596058817421595, 0.14452151544467595, 0.15540305205900418, 0.14846560697775946, 0.1466150001003158, 0.5433706403313712, 0.4781846637585331, 0.44483853478968494, 0.5489565475671276, 0.5536878858136374, 0.5371472942601576, 0.44543364236132643, 0.48897262986032564, 0.48946596301350753, 0.5073908712871793, 0.43650895672814016, 0.443903275527065, 0.46424545516372884, 0.4200015859054915, 0.4771647465227318, 0.48657723118570584, 0.48176697748031705, 0.4195286551946641, 0.21705179002956632, 0.1947625017139033, 0.21888905901384348, 0.1968732048527838, 0.19515159502757307, 0.20452479029535386, 0.18965811486559492, 0.2054136103025248, 0.18505296404296367, 0.16961500536172103, 0.19052326595935787, 0.18492334886656447, 0.19729463323280183, 0.17763326455962392, 0.19162231380933392, 0.18253679992251648, 0.1794712889139708, 0.19319601330557912, 0.5645424445406617, 0.433144941997466, 0.2867861076058853, 0.6160300794669582, 0.17664606300958552, 0.6250940977706501, 0.23962668513982677, 0.5569519032546435, 0.43183037183973205, 0.8231857493429218, 0.2029368631703441, 0.8122431638121521, 0.44533946830555227, 0.17984733711090595, 0.3873738583244515, 0.21186812861338167, 0.22091583477081966, 0.20249579304116305, 0.19249327245896608, 0.1964346450478044, 0.182324580361372, 0.18025103586118507, 0.20555032721823308, 0.19394747984930738, 0.19427314111373917, 0.1882463798536096, 0.18971653420175827, 0.0816382577277589, 0.07057527088813953, 0.07261102579549172, 0.0814151221025119, 0.08510085268506629, 0.08279524370076374, 0.08514270349534148, 0.07065103680128682, 0.06932332340063785]}, "mutation_prompt": null}
