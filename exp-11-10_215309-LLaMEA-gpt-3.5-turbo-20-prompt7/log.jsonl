{"id": "3848e0a9-e7b0-4eea-a935-77d39ab479bb", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "120607ae-ce8c-4089-a918-48cd1ce106d3", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "3848e0a9-e7b0-4eea-a935-77d39ab479bb", "metadata": {}, "mutation_prompt": null}
{"id": "f3d89955-b56c-49a1-af9e-b5281c869873", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            mutation_strength = np.random.uniform(0, 1)\n            candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * abs(best_fitness - candidate_fitness)\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Introducing a dynamic mutation strategy to adapt the mutation rate based on the current best solution, aiming to accelerate convergence speed.", "configspace": "", "generation": 2, "fitness": 0.2398001532497881, "feedback": "The algorithm DynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "3848e0a9-e7b0-4eea-a935-77d39ab479bb", "metadata": {"aucs": [0.6111594108562683, 0.5801613030363664, 0.6119604034630948, 0.6630434290044768, 0.5992586513833994, 0.6126296987102345, 0.630540560329351, 0.5965018029268842, 0.6330344009867106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05726136567747486, 9.999999999998899e-05, 9.999999999998899e-05, 0.05864208147683281, 9.999999999998899e-05, 9.999999999998899e-05, 0.11065589336822812, 0.12302804818904789, 0.11606145949395108, 0.16042129763364776, 0.0933584268814206, 0.08293805808657195, 0.1296628095606076, 0.14110515713201044, 0.14336090069388552, 0.09911867954670794, 0.09442595474927351, 0.049374123276406, 0.16911134722296772, 0.07852563981735006, 0.07213925449706948, 0.06263198075579035, 0.051897548447722874, 0.06685689458732635, 0.9934066303746664, 0.9890528380321828, 0.9830065153090244, 0.9892478650368277, 0.9843150752563969, 0.9878056601256163, 0.9902324617647187, 0.9862868795938876, 0.9913338091003865, 0.34871666187767014, 0.42309437583350096, 0.39530609102461833, 0.3841861831252644, 0.4044915684628805, 0.44315546183738597, 0.3243813884329989, 0.37092931218446357, 0.378290448258198, 0.3432528946791257, 0.6358050907125867, 0.21306575480728485, 0.9742718417987685, 0.19504378729865846, 0.27990662788416343, 0.8645298457833019, 0.6177590432175245, 0.7560529227050182, 0.2249603383895875, 0.15407681363867964, 0.13191022983267708, 0.17767053392658638, 0.19787807723057393, 0.17243583364169257, 0.1461426386334448, 0.15771897326885387, 0.18925416150828012, 0.1927279058573248, 0.17380804073241585, 0.16706959011449052, 0.20431697156660455, 0.34679560954235744, 0.1863837809305856, 0.1998196700246403, 0.16538830337356425, 0.16180567147561598, 0.04664445370864834, 9.999999999998899e-05, 0.03632602238646354, 0.04500329614868115, 9.999999999998899e-05, 9.999999999998899e-05, 0.06634687982293741, 9.999999999998899e-05, 0.0015434601409515247, 0.08140036758010105, 0.07957866610414877, 0.17086827398561455, 0.0957500310180498, 0.02163888022455518, 0.05280688788235188, 0.15730954947595233, 0.07053404418954812, 0.03602074218197904, 0.06016629944166907, 0.008173722453827081, 0.10150221157680595, 0.1461335241130015, 0.0688181868762151, 0.031752040575204976, 0.14314186345177682, 0.06967844063467088, 0.034150714058211795, 0.07534670148264899, 0.07414953789011325, 0.16272833561861533, 0.17453505292923632, 0.19949188475134516, 0.10491462456745615, 0.10773071646223453, 0.1802052618036205, 0.029519306560156888, 0.4533232209294008, 0.48202973948034944, 0.5021673791553731, 0.43418165325962477, 0.5133267701625678, 0.5083281548891847, 0.4648929457274228, 0.4475747915775361, 0.4780093522377048, 0.08915294781343364, 0.11361441693086294, 0.07953533406358804, 0.11734422619339968, 0.10623232449048314, 0.08335505013191835, 0.10945911741156145, 0.06741464427006727, 0.13187381409302346, 0.19671385802055852, 0.2034631713567574, 0.20141929291968375, 0.3083469856111102, 0.19518726635304207, 0.22460498922725136, 0.2600316697560765, 0.18794964556377158, 0.18889245886637962, 0.25355064383017767, 0.3105531037200424, 0.1515805269920265, 0.2876559585532289, 0.24561166530979195, 0.11808631385976276, 0.236629399557447, 0.1553863368059306, 0.22622923682282547, 0.18264591747451975, 0.078487199832318, 0.06327547781584253, 0.20376850345567954, 0.19331033147818788, 0.1659643728870347, 0.1892928388955234, 0.19753004245930028, 0.16690869876963643, 0.17308262333775548, 0.19138232317280224, 0.19380042946269782, 0.24380928851413153, 0.21181773687204097, 0.19098972839162653, 0.21837731848235908, 0.21501655046076962, 0.2664369392117132, 0.22405736649610042, 0.22790219897434538, 0.21710715576147654, 0.22622561352563253, 0.22915746719264718, 0.2070362537197442, 0.1913678876794146, 0.22840864332181265, 0.2106958160884883, 0.18902033408630003, 0.13781964870386743, 0.17333890656722195, 0.17403582113960414, 0.06602208197415749, 0.06205310896359384, 0.10892660735504667, 0.12587424386574497, 0.1689878019823986, 0.481587953799555, 0.11309789797304914, 0.08342016841690181, 0.17054353461868943, 0.21265685481838337, 0.21483263668263786, 0.6703307121374144, 0.16976412870661328, 0.42520814214643143, 0.22583604455669248, 0.1949282457833731, 0.2028600283068801, 0.19089327490131058, 0.19962406111719255, 0.20635341212214642, 0.21743497333700001, 0.20309152851083523, 0.22920032957660386, 0.10212332787749256, 0.11577422773005952, 0.09322604117953015, 0.08834048001799144, 0.05217843287410362, 0.11419801675735985, 0.15045539714484601, 0.10338680560719204, 0.08687802084607554]}, "mutation_prompt": null}
{"id": "76e002a7-9cfd-4872-b960-4c4b506b7c79", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            mutation_strength = np.random.uniform(0, 1)\n            candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * abs(best_fitness - candidate_fitness)\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Introducing a dynamic mutation strategy to adapt the mutation rate based on the current best solution, aiming to accelerate convergence speed.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3d89955-b56c-49a1-af9e-b5281c869873", "metadata": {"aucs": [0.6111594108562683, 0.5801613030363664, 0.6119604034630948, 0.6630434290044768, 0.5992586513833994, 0.6126296987102345, 0.630540560329351, 0.5965018029268842, 0.6330344009867106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05726136567747486, 9.999999999998899e-05, 9.999999999998899e-05, 0.05864208147683281, 9.999999999998899e-05, 9.999999999998899e-05, 0.11065589336822812, 0.12302804818904789, 0.11606145949395108, 0.16042129763364776, 0.0933584268814206, 0.08293805808657195, 0.1296628095606076, 0.14110515713201044, 0.14336090069388552, 0.09911867954670794, 0.09442595474927351, 0.049374123276406, 0.16911134722296772, 0.07852563981735006, 0.07213925449706948, 0.06263198075579035, 0.051897548447722874, 0.06685689458732635, 0.9934066303746664, 0.9890528380321828, 0.9830065153090244, 0.9892478650368277, 0.9843150752563969, 0.9878056601256163, 0.9902324617647187, 0.9862868795938876, 0.9913338091003865, 0.34871666187767014, 0.42309437583350096, 0.39530609102461833, 0.3841861831252644, 0.4044915684628805, 0.44315546183738597, 0.3243813884329989, 0.37092931218446357, 0.378290448258198, 0.3432528946791257, 0.6358050907125867, 0.21306575480728485, 0.9742718417987685, 0.19504378729865846, 0.27990662788416343, 0.8645298457833019, 0.6177590432175245, 0.7560529227050182, 0.2249603383895875, 0.15407681363867964, 0.13191022983267708, 0.17767053392658638, 0.19787807723057393, 0.17243583364169257, 0.1461426386334448, 0.15771897326885387, 0.18925416150828012, 0.1927279058573248, 0.17380804073241585, 0.16706959011449052, 0.20431697156660455, 0.34679560954235744, 0.1863837809305856, 0.1998196700246403, 0.16538830337356425, 0.16180567147561598, 0.04664445370864834, 9.999999999998899e-05, 0.03632602238646354, 0.04500329614868115, 9.999999999998899e-05, 9.999999999998899e-05, 0.06634687982293741, 9.999999999998899e-05, 0.0015434601409515247, 0.08140036758010105, 0.07957866610414877, 0.17086827398561455, 0.0957500310180498, 0.02163888022455518, 0.05280688788235188, 0.15730954947595233, 0.07053404418954812, 0.03602074218197904, 0.06016629944166907, 0.008173722453827081, 0.10150221157680595, 0.1461335241130015, 0.0688181868762151, 0.031752040575204976, 0.14314186345177682, 0.06967844063467088, 0.034150714058211795, 0.07534670148264899, 0.07414953789011325, 0.16272833561861533, 0.17453505292923632, 0.19949188475134516, 0.10491462456745615, 0.10773071646223453, 0.1802052618036205, 0.029519306560156888, 0.4533232209294008, 0.48202973948034944, 0.5021673791553731, 0.43418165325962477, 0.5133267701625678, 0.5083281548891847, 0.4648929457274228, 0.4475747915775361, 0.4780093522377048, 0.08915294781343364, 0.11361441693086294, 0.07953533406358804, 0.11734422619339968, 0.10623232449048314, 0.08335505013191835, 0.10945911741156145, 0.06741464427006727, 0.13187381409302346, 0.19671385802055852, 0.2034631713567574, 0.20141929291968375, 0.3083469856111102, 0.19518726635304207, 0.22460498922725136, 0.2600316697560765, 0.18794964556377158, 0.18889245886637962, 0.25355064383017767, 0.3105531037200424, 0.1515805269920265, 0.2876559585532289, 0.24561166530979195, 0.11808631385976276, 0.236629399557447, 0.1553863368059306, 0.22622923682282547, 0.18264591747451975, 0.078487199832318, 0.06327547781584253, 0.20376850345567954, 0.19331033147818788, 0.1659643728870347, 0.1892928388955234, 0.19753004245930028, 0.16690869876963643, 0.17308262333775548, 0.19138232317280224, 0.19380042946269782, 0.24380928851413153, 0.21181773687204097, 0.19098972839162653, 0.21837731848235908, 0.21501655046076962, 0.2664369392117132, 0.22405736649610042, 0.22790219897434538, 0.21710715576147654, 0.22622561352563253, 0.22915746719264718, 0.2070362537197442, 0.1913678876794146, 0.22840864332181265, 0.2106958160884883, 0.18902033408630003, 0.13781964870386743, 0.17333890656722195, 0.17403582113960414, 0.06602208197415749, 0.06205310896359384, 0.10892660735504667, 0.12587424386574497, 0.1689878019823986, 0.481587953799555, 0.11309789797304914, 0.08342016841690181, 0.17054353461868943, 0.21265685481838337, 0.21483263668263786, 0.6703307121374144, 0.16976412870661328, 0.42520814214643143, 0.22583604455669248, 0.1949282457833731, 0.2028600283068801, 0.19089327490131058, 0.19962406111719255, 0.20635341212214642, 0.21743497333700001, 0.20309152851083523, 0.22920032957660386, 0.10212332787749256, 0.11577422773005952, 0.09322604117953015, 0.08834048001799144, 0.05217843287410362, 0.11419801675735985, 0.15045539714484601, 0.10338680560719204, 0.08687802084607554]}, "mutation_prompt": null}
{"id": "0be305d0-25f0-47c4-b93b-8599e52e3406", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            mutation_strength = np.random.uniform(0, 1)\n            candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * abs(best_fitness - candidate_fitness)\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Introducing a dynamic mutation strategy to adapt the mutation rate based on the current best solution, aiming to accelerate convergence speed.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3d89955-b56c-49a1-af9e-b5281c869873", "metadata": {"aucs": [0.6111594108562683, 0.5801613030363664, 0.6119604034630948, 0.6630434290044768, 0.5992586513833994, 0.6126296987102345, 0.630540560329351, 0.5965018029268842, 0.6330344009867106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05726136567747486, 9.999999999998899e-05, 9.999999999998899e-05, 0.05864208147683281, 9.999999999998899e-05, 9.999999999998899e-05, 0.11065589336822812, 0.12302804818904789, 0.11606145949395108, 0.16042129763364776, 0.0933584268814206, 0.08293805808657195, 0.1296628095606076, 0.14110515713201044, 0.14336090069388552, 0.09911867954670794, 0.09442595474927351, 0.049374123276406, 0.16911134722296772, 0.07852563981735006, 0.07213925449706948, 0.06263198075579035, 0.051897548447722874, 0.06685689458732635, 0.9934066303746664, 0.9890528380321828, 0.9830065153090244, 0.9892478650368277, 0.9843150752563969, 0.9878056601256163, 0.9902324617647187, 0.9862868795938876, 0.9913338091003865, 0.34871666187767014, 0.42309437583350096, 0.39530609102461833, 0.3841861831252644, 0.4044915684628805, 0.44315546183738597, 0.3243813884329989, 0.37092931218446357, 0.378290448258198, 0.3432528946791257, 0.6358050907125867, 0.21306575480728485, 0.9742718417987685, 0.19504378729865846, 0.27990662788416343, 0.8645298457833019, 0.6177590432175245, 0.7560529227050182, 0.2249603383895875, 0.15407681363867964, 0.13191022983267708, 0.17767053392658638, 0.19787807723057393, 0.17243583364169257, 0.1461426386334448, 0.15771897326885387, 0.18925416150828012, 0.1927279058573248, 0.17380804073241585, 0.16706959011449052, 0.20431697156660455, 0.34679560954235744, 0.1863837809305856, 0.1998196700246403, 0.16538830337356425, 0.16180567147561598, 0.04664445370864834, 9.999999999998899e-05, 0.03632602238646354, 0.04500329614868115, 9.999999999998899e-05, 9.999999999998899e-05, 0.06634687982293741, 9.999999999998899e-05, 0.0015434601409515247, 0.08140036758010105, 0.07957866610414877, 0.17086827398561455, 0.0957500310180498, 0.02163888022455518, 0.05280688788235188, 0.15730954947595233, 0.07053404418954812, 0.03602074218197904, 0.06016629944166907, 0.008173722453827081, 0.10150221157680595, 0.1461335241130015, 0.0688181868762151, 0.031752040575204976, 0.14314186345177682, 0.06967844063467088, 0.034150714058211795, 0.07534670148264899, 0.07414953789011325, 0.16272833561861533, 0.17453505292923632, 0.19949188475134516, 0.10491462456745615, 0.10773071646223453, 0.1802052618036205, 0.029519306560156888, 0.4533232209294008, 0.48202973948034944, 0.5021673791553731, 0.43418165325962477, 0.5133267701625678, 0.5083281548891847, 0.4648929457274228, 0.4475747915775361, 0.4780093522377048, 0.08915294781343364, 0.11361441693086294, 0.07953533406358804, 0.11734422619339968, 0.10623232449048314, 0.08335505013191835, 0.10945911741156145, 0.06741464427006727, 0.13187381409302346, 0.19671385802055852, 0.2034631713567574, 0.20141929291968375, 0.3083469856111102, 0.19518726635304207, 0.22460498922725136, 0.2600316697560765, 0.18794964556377158, 0.18889245886637962, 0.25355064383017767, 0.3105531037200424, 0.1515805269920265, 0.2876559585532289, 0.24561166530979195, 0.11808631385976276, 0.236629399557447, 0.1553863368059306, 0.22622923682282547, 0.18264591747451975, 0.078487199832318, 0.06327547781584253, 0.20376850345567954, 0.19331033147818788, 0.1659643728870347, 0.1892928388955234, 0.19753004245930028, 0.16690869876963643, 0.17308262333775548, 0.19138232317280224, 0.19380042946269782, 0.24380928851413153, 0.21181773687204097, 0.19098972839162653, 0.21837731848235908, 0.21501655046076962, 0.2664369392117132, 0.22405736649610042, 0.22790219897434538, 0.21710715576147654, 0.22622561352563253, 0.22915746719264718, 0.2070362537197442, 0.1913678876794146, 0.22840864332181265, 0.2106958160884883, 0.18902033408630003, 0.13781964870386743, 0.17333890656722195, 0.17403582113960414, 0.06602208197415749, 0.06205310896359384, 0.10892660735504667, 0.12587424386574497, 0.1689878019823986, 0.481587953799555, 0.11309789797304914, 0.08342016841690181, 0.17054353461868943, 0.21265685481838337, 0.21483263668263786, 0.6703307121374144, 0.16976412870661328, 0.42520814214643143, 0.22583604455669248, 0.1949282457833731, 0.2028600283068801, 0.19089327490131058, 0.19962406111719255, 0.20635341212214642, 0.21743497333700001, 0.20309152851083523, 0.22920032957660386, 0.10212332787749256, 0.11577422773005952, 0.09322604117953015, 0.08834048001799144, 0.05217843287410362, 0.11419801675735985, 0.15045539714484601, 0.10338680560719204, 0.08687802084607554]}, "mutation_prompt": null}
{"id": "783ff191-996f-4d3a-9964-a7bb087aa001", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            mutation_strength = np.random.uniform(0, 1)\n            candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * abs(best_fitness - candidate_fitness)\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Introducing a dynamic mutation strategy to adapt the mutation rate based on the current best solution, aiming to accelerate convergence speed.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3d89955-b56c-49a1-af9e-b5281c869873", "metadata": {"aucs": [0.6111594108562683, 0.5801613030363664, 0.6119604034630948, 0.6630434290044768, 0.5992586513833994, 0.6126296987102345, 0.630540560329351, 0.5965018029268842, 0.6330344009867106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05726136567747486, 9.999999999998899e-05, 9.999999999998899e-05, 0.05864208147683281, 9.999999999998899e-05, 9.999999999998899e-05, 0.11065589336822812, 0.12302804818904789, 0.11606145949395108, 0.16042129763364776, 0.0933584268814206, 0.08293805808657195, 0.1296628095606076, 0.14110515713201044, 0.14336090069388552, 0.09911867954670794, 0.09442595474927351, 0.049374123276406, 0.16911134722296772, 0.07852563981735006, 0.07213925449706948, 0.06263198075579035, 0.051897548447722874, 0.06685689458732635, 0.9934066303746664, 0.9890528380321828, 0.9830065153090244, 0.9892478650368277, 0.9843150752563969, 0.9878056601256163, 0.9902324617647187, 0.9862868795938876, 0.9913338091003865, 0.34871666187767014, 0.42309437583350096, 0.39530609102461833, 0.3841861831252644, 0.4044915684628805, 0.44315546183738597, 0.3243813884329989, 0.37092931218446357, 0.378290448258198, 0.3432528946791257, 0.6358050907125867, 0.21306575480728485, 0.9742718417987685, 0.19504378729865846, 0.27990662788416343, 0.8645298457833019, 0.6177590432175245, 0.7560529227050182, 0.2249603383895875, 0.15407681363867964, 0.13191022983267708, 0.17767053392658638, 0.19787807723057393, 0.17243583364169257, 0.1461426386334448, 0.15771897326885387, 0.18925416150828012, 0.1927279058573248, 0.17380804073241585, 0.16706959011449052, 0.20431697156660455, 0.34679560954235744, 0.1863837809305856, 0.1998196700246403, 0.16538830337356425, 0.16180567147561598, 0.04664445370864834, 9.999999999998899e-05, 0.03632602238646354, 0.04500329614868115, 9.999999999998899e-05, 9.999999999998899e-05, 0.06634687982293741, 9.999999999998899e-05, 0.0015434601409515247, 0.08140036758010105, 0.07957866610414877, 0.17086827398561455, 0.0957500310180498, 0.02163888022455518, 0.05280688788235188, 0.15730954947595233, 0.07053404418954812, 0.03602074218197904, 0.06016629944166907, 0.008173722453827081, 0.10150221157680595, 0.1461335241130015, 0.0688181868762151, 0.031752040575204976, 0.14314186345177682, 0.06967844063467088, 0.034150714058211795, 0.07534670148264899, 0.07414953789011325, 0.16272833561861533, 0.17453505292923632, 0.19949188475134516, 0.10491462456745615, 0.10773071646223453, 0.1802052618036205, 0.029519306560156888, 0.4533232209294008, 0.48202973948034944, 0.5021673791553731, 0.43418165325962477, 0.5133267701625678, 0.5083281548891847, 0.4648929457274228, 0.4475747915775361, 0.4780093522377048, 0.08915294781343364, 0.11361441693086294, 0.07953533406358804, 0.11734422619339968, 0.10623232449048314, 0.08335505013191835, 0.10945911741156145, 0.06741464427006727, 0.13187381409302346, 0.19671385802055852, 0.2034631713567574, 0.20141929291968375, 0.3083469856111102, 0.19518726635304207, 0.22460498922725136, 0.2600316697560765, 0.18794964556377158, 0.18889245886637962, 0.25355064383017767, 0.3105531037200424, 0.1515805269920265, 0.2876559585532289, 0.24561166530979195, 0.11808631385976276, 0.236629399557447, 0.1553863368059306, 0.22622923682282547, 0.18264591747451975, 0.078487199832318, 0.06327547781584253, 0.20376850345567954, 0.19331033147818788, 0.1659643728870347, 0.1892928388955234, 0.19753004245930028, 0.16690869876963643, 0.17308262333775548, 0.19138232317280224, 0.19380042946269782, 0.24380928851413153, 0.21181773687204097, 0.19098972839162653, 0.21837731848235908, 0.21501655046076962, 0.2664369392117132, 0.22405736649610042, 0.22790219897434538, 0.21710715576147654, 0.22622561352563253, 0.22915746719264718, 0.2070362537197442, 0.1913678876794146, 0.22840864332181265, 0.2106958160884883, 0.18902033408630003, 0.13781964870386743, 0.17333890656722195, 0.17403582113960414, 0.06602208197415749, 0.06205310896359384, 0.10892660735504667, 0.12587424386574497, 0.1689878019823986, 0.481587953799555, 0.11309789797304914, 0.08342016841690181, 0.17054353461868943, 0.21265685481838337, 0.21483263668263786, 0.6703307121374144, 0.16976412870661328, 0.42520814214643143, 0.22583604455669248, 0.1949282457833731, 0.2028600283068801, 0.19089327490131058, 0.19962406111719255, 0.20635341212214642, 0.21743497333700001, 0.20309152851083523, 0.22920032957660386, 0.10212332787749256, 0.11577422773005952, 0.09322604117953015, 0.08834048001799144, 0.05217843287410362, 0.11419801675735985, 0.15045539714484601, 0.10338680560719204, 0.08687802084607554]}, "mutation_prompt": null}
{"id": "abb301cc-198b-45c9-b156-6e6517286882", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            mutation_strength = np.random.uniform(0, 1)\n            candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * abs(best_fitness - candidate_fitness)\n            \n            # Incorporating local search based on gradient\n            if np.random.rand() < 0.1:\n                gradient = np.gradient(candidate_solution)\n                candidate_solution -= 0.01 * gradient  # Adjust step size for local search\n                \n                candidate_fitness = func(candidate_solution)\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n            \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Implement a hybrid approach by incorporating a local search strategy based on the gradient of the function to improve convergence speed.", "configspace": "", "generation": 6, "fitness": 0.22162334602649914, "feedback": "The algorithm DynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "f3d89955-b56c-49a1-af9e-b5281c869873", "metadata": {"aucs": [0.577842585841847, 0.5616369489780273, 0.6428622016365564, 0.5569926312767793, 0.5866079314121455, 0.6377435977530272, 0.5375051997604137, 0.5445647252842771, 0.5524841230721581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004619998201774611, 0.018290289122946723, 9.999999999998899e-05, 0.057133376109689715, 9.999999999998899e-05, 9.999999999998899e-05, 0.10023060807024708, 0.07798394231089023, 0.06924902200435612, 0.16127967508526542, 0.09699557970682438, 0.08721420926400492, 0.08423202495047921, 0.07922128310108145, 0.08657393271515978, 0.11616402979556806, 0.1181430910897503, 0.07916961031043845, 0.07156753130443116, 0.07167105398081619, 0.08067036079387235, 0.06944956369469968, 0.11368280635845929, 0.07664091241283699, 0.992944366548089, 0.9886656689538502, 0.981953306161506, 0.9904326651176711, 0.9851080593160438, 0.9927920094419672, 0.9891849427488496, 0.9786140279540072, 0.9905525331179958, 0.36979091905776773, 0.43138256015243415, 0.36957481836118167, 0.3813755048607427, 0.38460792313748426, 0.346275663928044, 0.3989217498408918, 0.43023595141810345, 0.4265341106132333, 0.21037698791296444, 0.21272739262517715, 0.21456689495701953, 0.28253561254481396, 0.20752240309386993, 0.21472704705052825, 0.5588374596210421, 0.21678124625246875, 0.36739968047698257, 0.23494193048197787, 0.1753911693663629, 0.1702154481410313, 0.18686071598183485, 0.20506771111536126, 0.18814395211562118, 0.1345091819576011, 0.1525519304925258, 0.159809508938611, 0.1854425914830029, 0.20146170582729406, 0.1335916887663321, 0.15453971288527157, 0.13242780358169437, 0.13312289264002408, 0.16039672491090917, 0.21177433502762566, 0.2945685878070261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03608879785144525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08002600164221607, 0.07015534638037713, 0.18870514644684122, 0.11328270762991488, 0.0583134121899449, 0.08740768531619869, 0.12287303000881167, 0.06368387335982428, 0.08546839423385866, 0.002658716151758944, 9.999999999998899e-05, 0.017954231540931342, 0.031205660366711685, 9.999999999998899e-05, 0.057769487513968265, 9.999999999998899e-05, 0.05517132808470637, 0.05806407964810767, 0.03915634783097044, 0.16130886560888213, 0.06233352908132439, 0.09881886966285625, 0.10388832585151808, 0.10305519752633063, 0.11138763229825943, 0.13443037177369765, 0.04830537409692037, 0.48065047332405386, 0.4461811010606779, 0.434927886362359, 0.45404557331671425, 0.4326724301101209, 0.4344821997000262, 0.4561754283190448, 0.4665979521820387, 0.47636728868556155, 0.09116878819246488, 0.1048913844623216, 0.11271594496652815, 0.16813112829548937, 0.07368799759169464, 0.09111809621817324, 0.07744309030046603, 0.07912096442669281, 0.09951475779251673, 0.28298674204234553, 0.18065209202092303, 0.2048671901580793, 0.2995384793326157, 0.14214969584906612, 0.2279061028258207, 0.3683834594914739, 0.1577528550712317, 0.21759941776652247, 0.3357589815108203, 0.20372212133743306, 0.15821228860672343, 0.3049564896280321, 0.29720781110627126, 0.16050789313846903, 0.20329065472980068, 0.18945040295413695, 0.19333772856377696, 0.1940324385380533, 0.22712182736783837, 0.2149689460134433, 0.2712514838656265, 0.17915045620796832, 0.09066549614481223, 0.20790939653393903, 0.14656181769896337, 0.18451530323691145, 0.21516493461574138, 0.174378791463895, 0.2205580016723261, 0.21823175555922036, 0.21294708544544527, 0.24182518032729572, 0.26249206974468886, 0.19198010909912544, 0.23775158985792233, 0.22503174073408883, 0.1959808037797518, 0.259330733624876, 0.2559684599719758, 0.1881814370858268, 0.19227171340486526, 0.1817947158537685, 0.17330122124359237, 0.2104910620454934, 0.16012755643398668, 0.13689411916468375, 0.17333869566824778, 0.17413493586830042, 0.06597654035450995, 0.06189052874221712, 0.1088383565697133, 0.11539653869134747, 0.16901770138437566, 0.5109842905719909, 0.11312354934476121, 0.12809981908480061, 0.1703057279612019, 0.21408737355353813, 0.21375036910148848, 0.4058070503512313, 0.16889620186828902, 0.40967385393478417, 0.2067940476254133, 0.22236111745280684, 0.22376611851120243, 0.22018778364678215, 0.19676669554016613, 0.20215210587817456, 0.20170139189367697, 0.19045511689150618, 0.19250207549658083, 0.09087231494529857, 0.10636601063828455, 0.08289269842318614, 0.08226469999793895, 0.05700966601301061, 0.10413332028442568, 0.09004111233977252, 0.08004279436694672, 0.09708464627118862]}, "mutation_prompt": null}
{"id": "e29ab78a-baa8-48c4-99c4-26d1f130039d", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            mutation_strength = np.random.uniform(0, 1)\n            candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            self.mutation_rate = 0.8 * self.mutation_rate + 0.2 * abs(best_fitness - candidate_fitness)\n        \n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Introducing a dynamic mutation strategy to adapt the mutation rate based on the current solution's fitness difference, emphasizing rapid convergence.", "configspace": "", "generation": 7, "fitness": 0.2398001532497881, "feedback": "The algorithm ImprovedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "f3d89955-b56c-49a1-af9e-b5281c869873", "metadata": {"aucs": [0.6111594108562683, 0.5801613030363664, 0.6119604034630948, 0.6630434290044768, 0.5992586513833994, 0.6126296987102345, 0.630540560329351, 0.5965018029268842, 0.6330344009867106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05726136567747486, 9.999999999998899e-05, 9.999999999998899e-05, 0.05864208147683281, 9.999999999998899e-05, 9.999999999998899e-05, 0.11065589336822812, 0.12302804818904789, 0.11606145949395108, 0.16042129763364776, 0.0933584268814206, 0.08293805808657195, 0.1296628095606076, 0.14110515713201044, 0.14336090069388552, 0.09911867954670794, 0.09442595474927351, 0.049374123276406, 0.16911134722296772, 0.07852563981735006, 0.07213925449706948, 0.06263198075579035, 0.051897548447722874, 0.06685689458732635, 0.9934066303746664, 0.9890528380321828, 0.9830065153090244, 0.9892478650368277, 0.9843150752563969, 0.9878056601256163, 0.9902324617647187, 0.9862868795938876, 0.9913338091003865, 0.34871666187767014, 0.42309437583350096, 0.39530609102461833, 0.3841861831252644, 0.4044915684628805, 0.44315546183738597, 0.3243813884329989, 0.37092931218446357, 0.378290448258198, 0.3432528946791257, 0.6358050907125867, 0.21306575480728485, 0.9742718417987685, 0.19504378729865846, 0.27990662788416343, 0.8645298457833019, 0.6177590432175245, 0.7560529227050182, 0.2249603383895875, 0.15407681363867964, 0.13191022983267708, 0.17767053392658638, 0.19787807723057393, 0.17243583364169257, 0.1461426386334448, 0.15771897326885387, 0.18925416150828012, 0.1927279058573248, 0.17380804073241585, 0.16706959011449052, 0.20431697156660455, 0.34679560954235744, 0.1863837809305856, 0.1998196700246403, 0.16538830337356425, 0.16180567147561598, 0.04664445370864834, 9.999999999998899e-05, 0.03632602238646354, 0.04500329614868115, 9.999999999998899e-05, 9.999999999998899e-05, 0.06634687982293741, 9.999999999998899e-05, 0.0015434601409515247, 0.08140036758010105, 0.07957866610414877, 0.17086827398561455, 0.0957500310180498, 0.02163888022455518, 0.05280688788235188, 0.15730954947595233, 0.07053404418954812, 0.03602074218197904, 0.06016629944166907, 0.008173722453827081, 0.10150221157680595, 0.1461335241130015, 0.0688181868762151, 0.031752040575204976, 0.14314186345177682, 0.06967844063467088, 0.034150714058211795, 0.07534670148264899, 0.07414953789011325, 0.16272833561861533, 0.17453505292923632, 0.19949188475134516, 0.10491462456745615, 0.10773071646223453, 0.1802052618036205, 0.029519306560156888, 0.4533232209294008, 0.48202973948034944, 0.5021673791553731, 0.43418165325962477, 0.5133267701625678, 0.5083281548891847, 0.4648929457274228, 0.4475747915775361, 0.4780093522377048, 0.08915294781343364, 0.11361441693086294, 0.07953533406358804, 0.11734422619339968, 0.10623232449048314, 0.08335505013191835, 0.10945911741156145, 0.06741464427006727, 0.13187381409302346, 0.19671385802055852, 0.2034631713567574, 0.20141929291968375, 0.3083469856111102, 0.19518726635304207, 0.22460498922725136, 0.2600316697560765, 0.18794964556377158, 0.18889245886637962, 0.25355064383017767, 0.3105531037200424, 0.1515805269920265, 0.2876559585532289, 0.24561166530979195, 0.11808631385976276, 0.236629399557447, 0.1553863368059306, 0.22622923682282547, 0.18264591747451975, 0.078487199832318, 0.06327547781584253, 0.20376850345567954, 0.19331033147818788, 0.1659643728870347, 0.1892928388955234, 0.19753004245930028, 0.16690869876963643, 0.17308262333775548, 0.19138232317280224, 0.19380042946269782, 0.24380928851413153, 0.21181773687204097, 0.19098972839162653, 0.21837731848235908, 0.21501655046076962, 0.2664369392117132, 0.22405736649610042, 0.22790219897434538, 0.21710715576147654, 0.22622561352563253, 0.22915746719264718, 0.2070362537197442, 0.1913678876794146, 0.22840864332181265, 0.2106958160884883, 0.18902033408630003, 0.13781964870386743, 0.17333890656722195, 0.17403582113960414, 0.06602208197415749, 0.06205310896359384, 0.10892660735504667, 0.12587424386574497, 0.1689878019823986, 0.481587953799555, 0.11309789797304914, 0.08342016841690181, 0.17054353461868943, 0.21265685481838337, 0.21483263668263786, 0.6703307121374144, 0.16976412870661328, 0.42520814214643143, 0.22583604455669248, 0.1949282457833731, 0.2028600283068801, 0.19089327490131058, 0.19962406111719255, 0.20635341212214642, 0.21743497333700001, 0.20309152851083523, 0.22920032957660386, 0.10212332787749256, 0.11577422773005952, 0.09322604117953015, 0.08834048001799144, 0.05217843287410362, 0.11419801675735985, 0.15045539714484601, 0.10338680560719204, 0.08687802084607554]}, "mutation_prompt": null}
{"id": "580181f3-8bbd-4fa5-9294-e49cb87ee857", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            mutation_strength = np.random.uniform(0, 1)\n            candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * abs(best_fitness - candidate_fitness)\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Introducing a dynamic mutation strategy to adapt the mutation rate based on the current best solution, aiming to accelerate convergence speed.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3d89955-b56c-49a1-af9e-b5281c869873", "metadata": {"aucs": [0.6111594108562683, 0.5801613030363664, 0.6119604034630948, 0.6630434290044768, 0.5992586513833994, 0.6126296987102345, 0.630540560329351, 0.5965018029268842, 0.6330344009867106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05726136567747486, 9.999999999998899e-05, 9.999999999998899e-05, 0.05864208147683281, 9.999999999998899e-05, 9.999999999998899e-05, 0.11065589336822812, 0.12302804818904789, 0.11606145949395108, 0.16042129763364776, 0.0933584268814206, 0.08293805808657195, 0.1296628095606076, 0.14110515713201044, 0.14336090069388552, 0.09911867954670794, 0.09442595474927351, 0.049374123276406, 0.16911134722296772, 0.07852563981735006, 0.07213925449706948, 0.06263198075579035, 0.051897548447722874, 0.06685689458732635, 0.9934066303746664, 0.9890528380321828, 0.9830065153090244, 0.9892478650368277, 0.9843150752563969, 0.9878056601256163, 0.9902324617647187, 0.9862868795938876, 0.9913338091003865, 0.34871666187767014, 0.42309437583350096, 0.39530609102461833, 0.3841861831252644, 0.4044915684628805, 0.44315546183738597, 0.3243813884329989, 0.37092931218446357, 0.378290448258198, 0.3432528946791257, 0.6358050907125867, 0.21306575480728485, 0.9742718417987685, 0.19504378729865846, 0.27990662788416343, 0.8645298457833019, 0.6177590432175245, 0.7560529227050182, 0.2249603383895875, 0.15407681363867964, 0.13191022983267708, 0.17767053392658638, 0.19787807723057393, 0.17243583364169257, 0.1461426386334448, 0.15771897326885387, 0.18925416150828012, 0.1927279058573248, 0.17380804073241585, 0.16706959011449052, 0.20431697156660455, 0.34679560954235744, 0.1863837809305856, 0.1998196700246403, 0.16538830337356425, 0.16180567147561598, 0.04664445370864834, 9.999999999998899e-05, 0.03632602238646354, 0.04500329614868115, 9.999999999998899e-05, 9.999999999998899e-05, 0.06634687982293741, 9.999999999998899e-05, 0.0015434601409515247, 0.08140036758010105, 0.07957866610414877, 0.17086827398561455, 0.0957500310180498, 0.02163888022455518, 0.05280688788235188, 0.15730954947595233, 0.07053404418954812, 0.03602074218197904, 0.06016629944166907, 0.008173722453827081, 0.10150221157680595, 0.1461335241130015, 0.0688181868762151, 0.031752040575204976, 0.14314186345177682, 0.06967844063467088, 0.034150714058211795, 0.07534670148264899, 0.07414953789011325, 0.16272833561861533, 0.17453505292923632, 0.19949188475134516, 0.10491462456745615, 0.10773071646223453, 0.1802052618036205, 0.029519306560156888, 0.4533232209294008, 0.48202973948034944, 0.5021673791553731, 0.43418165325962477, 0.5133267701625678, 0.5083281548891847, 0.4648929457274228, 0.4475747915775361, 0.4780093522377048, 0.08915294781343364, 0.11361441693086294, 0.07953533406358804, 0.11734422619339968, 0.10623232449048314, 0.08335505013191835, 0.10945911741156145, 0.06741464427006727, 0.13187381409302346, 0.19671385802055852, 0.2034631713567574, 0.20141929291968375, 0.3083469856111102, 0.19518726635304207, 0.22460498922725136, 0.2600316697560765, 0.18794964556377158, 0.18889245886637962, 0.25355064383017767, 0.3105531037200424, 0.1515805269920265, 0.2876559585532289, 0.24561166530979195, 0.11808631385976276, 0.236629399557447, 0.1553863368059306, 0.22622923682282547, 0.18264591747451975, 0.078487199832318, 0.06327547781584253, 0.20376850345567954, 0.19331033147818788, 0.1659643728870347, 0.1892928388955234, 0.19753004245930028, 0.16690869876963643, 0.17308262333775548, 0.19138232317280224, 0.19380042946269782, 0.24380928851413153, 0.21181773687204097, 0.19098972839162653, 0.21837731848235908, 0.21501655046076962, 0.2664369392117132, 0.22405736649610042, 0.22790219897434538, 0.21710715576147654, 0.22622561352563253, 0.22915746719264718, 0.2070362537197442, 0.1913678876794146, 0.22840864332181265, 0.2106958160884883, 0.18902033408630003, 0.13781964870386743, 0.17333890656722195, 0.17403582113960414, 0.06602208197415749, 0.06205310896359384, 0.10892660735504667, 0.12587424386574497, 0.1689878019823986, 0.481587953799555, 0.11309789797304914, 0.08342016841690181, 0.17054353461868943, 0.21265685481838337, 0.21483263668263786, 0.6703307121374144, 0.16976412870661328, 0.42520814214643143, 0.22583604455669248, 0.1949282457833731, 0.2028600283068801, 0.19089327490131058, 0.19962406111719255, 0.20635341212214642, 0.21743497333700001, 0.20309152851083523, 0.22920032957660386, 0.10212332787749256, 0.11577422773005952, 0.09322604117953015, 0.08834048001799144, 0.05217843287410362, 0.11419801675735985, 0.15045539714484601, 0.10338680560719204, 0.08687802084607554]}, "mutation_prompt": null}
{"id": "99347b53-24b4-4eda-bcae-089c52efbff7", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            mutation_strength = np.random.uniform(0, 1)\n            candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * abs(best_fitness - candidate_fitness)\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Introducing a dynamic mutation strategy to adapt the mutation rate based on the current best solution, aiming to accelerate convergence speed.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3d89955-b56c-49a1-af9e-b5281c869873", "metadata": {"aucs": [0.6111594108562683, 0.5801613030363664, 0.6119604034630948, 0.6630434290044768, 0.5992586513833994, 0.6126296987102345, 0.630540560329351, 0.5965018029268842, 0.6330344009867106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05726136567747486, 9.999999999998899e-05, 9.999999999998899e-05, 0.05864208147683281, 9.999999999998899e-05, 9.999999999998899e-05, 0.11065589336822812, 0.12302804818904789, 0.11606145949395108, 0.16042129763364776, 0.0933584268814206, 0.08293805808657195, 0.1296628095606076, 0.14110515713201044, 0.14336090069388552, 0.09911867954670794, 0.09442595474927351, 0.049374123276406, 0.16911134722296772, 0.07852563981735006, 0.07213925449706948, 0.06263198075579035, 0.051897548447722874, 0.06685689458732635, 0.9934066303746664, 0.9890528380321828, 0.9830065153090244, 0.9892478650368277, 0.9843150752563969, 0.9878056601256163, 0.9902324617647187, 0.9862868795938876, 0.9913338091003865, 0.34871666187767014, 0.42309437583350096, 0.39530609102461833, 0.3841861831252644, 0.4044915684628805, 0.44315546183738597, 0.3243813884329989, 0.37092931218446357, 0.378290448258198, 0.3432528946791257, 0.6358050907125867, 0.21306575480728485, 0.9742718417987685, 0.19504378729865846, 0.27990662788416343, 0.8645298457833019, 0.6177590432175245, 0.7560529227050182, 0.2249603383895875, 0.15407681363867964, 0.13191022983267708, 0.17767053392658638, 0.19787807723057393, 0.17243583364169257, 0.1461426386334448, 0.15771897326885387, 0.18925416150828012, 0.1927279058573248, 0.17380804073241585, 0.16706959011449052, 0.20431697156660455, 0.34679560954235744, 0.1863837809305856, 0.1998196700246403, 0.16538830337356425, 0.16180567147561598, 0.04664445370864834, 9.999999999998899e-05, 0.03632602238646354, 0.04500329614868115, 9.999999999998899e-05, 9.999999999998899e-05, 0.06634687982293741, 9.999999999998899e-05, 0.0015434601409515247, 0.08140036758010105, 0.07957866610414877, 0.17086827398561455, 0.0957500310180498, 0.02163888022455518, 0.05280688788235188, 0.15730954947595233, 0.07053404418954812, 0.03602074218197904, 0.06016629944166907, 0.008173722453827081, 0.10150221157680595, 0.1461335241130015, 0.0688181868762151, 0.031752040575204976, 0.14314186345177682, 0.06967844063467088, 0.034150714058211795, 0.07534670148264899, 0.07414953789011325, 0.16272833561861533, 0.17453505292923632, 0.19949188475134516, 0.10491462456745615, 0.10773071646223453, 0.1802052618036205, 0.029519306560156888, 0.4533232209294008, 0.48202973948034944, 0.5021673791553731, 0.43418165325962477, 0.5133267701625678, 0.5083281548891847, 0.4648929457274228, 0.4475747915775361, 0.4780093522377048, 0.08915294781343364, 0.11361441693086294, 0.07953533406358804, 0.11734422619339968, 0.10623232449048314, 0.08335505013191835, 0.10945911741156145, 0.06741464427006727, 0.13187381409302346, 0.19671385802055852, 0.2034631713567574, 0.20141929291968375, 0.3083469856111102, 0.19518726635304207, 0.22460498922725136, 0.2600316697560765, 0.18794964556377158, 0.18889245886637962, 0.25355064383017767, 0.3105531037200424, 0.1515805269920265, 0.2876559585532289, 0.24561166530979195, 0.11808631385976276, 0.236629399557447, 0.1553863368059306, 0.22622923682282547, 0.18264591747451975, 0.078487199832318, 0.06327547781584253, 0.20376850345567954, 0.19331033147818788, 0.1659643728870347, 0.1892928388955234, 0.19753004245930028, 0.16690869876963643, 0.17308262333775548, 0.19138232317280224, 0.19380042946269782, 0.24380928851413153, 0.21181773687204097, 0.19098972839162653, 0.21837731848235908, 0.21501655046076962, 0.2664369392117132, 0.22405736649610042, 0.22790219897434538, 0.21710715576147654, 0.22622561352563253, 0.22915746719264718, 0.2070362537197442, 0.1913678876794146, 0.22840864332181265, 0.2106958160884883, 0.18902033408630003, 0.13781964870386743, 0.17333890656722195, 0.17403582113960414, 0.06602208197415749, 0.06205310896359384, 0.10892660735504667, 0.12587424386574497, 0.1689878019823986, 0.481587953799555, 0.11309789797304914, 0.08342016841690181, 0.17054353461868943, 0.21265685481838337, 0.21483263668263786, 0.6703307121374144, 0.16976412870661328, 0.42520814214643143, 0.22583604455669248, 0.1949282457833731, 0.2028600283068801, 0.19089327490131058, 0.19962406111719255, 0.20635341212214642, 0.21743497333700001, 0.20309152851083523, 0.22920032957660386, 0.10212332787749256, 0.11577422773005952, 0.09322604117953015, 0.08834048001799144, 0.05217843287410362, 0.11419801675735985, 0.15045539714484601, 0.10338680560719204, 0.08687802084607554]}, "mutation_prompt": null}
{"id": "33d4f425-b335-41fd-b384-2280a9d22053", "solution": "import numpy as np\n\nclass ParallelSearchMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget//5):  # Modified for parallel search\n            mutation_strength = np.random.uniform(0, 1)\n            candidate_solutions = [best_solution + mutation_strength * np.random.standard_normal(self.dim) for _ in range(5)]  # Generate 5 candidate solutions\n            candidate_fitnesses = [func(candidate) for candidate in candidate_solutions]\n            \n            best_candidate_idx = np.argmin(candidate_fitnesses)\n            if candidate_fitnesses[best_candidate_idx] < best_fitness:\n                best_solution = candidate_solutions[best_candidate_idx]\n                best_fitness = candidate_fitnesses[best_candidate_idx]\n            \n            self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * abs(best_fitness - candidate_fitnesses[best_candidate_idx])\n        \n        return best_solution", "name": "ParallelSearchMetaheuristic", "description": "Implementing a parallel search strategy by exploring multiple candidate solutions simultaneously to speed up convergence.", "configspace": "", "generation": 10, "fitness": 0.2305741304863559, "feedback": "The algorithm ParallelSearchMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "f3d89955-b56c-49a1-af9e-b5281c869873", "metadata": {"aucs": [0.6215653854459291, 0.6457874776534418, 0.6110716821093551, 0.6149985888256939, 0.5827907091616771, 0.6326689653340293, 0.5883239706779999, 0.6231985260949511, 0.6755559961239108, 0.005204965323267752, 0.023221235888958525, 9.999999999998899e-05, 0.04969207187838942, 0.11571521777005933, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09429171757650279, 0.06392240519701986, 0.0668069661685482, 0.11730981380340577, 0.11632283688996581, 0.07626891403956959, 0.12394731480772547, 0.0708949811855959, 0.07432554271959413, 0.09305664355492993, 0.1371077488709569, 0.05957308693217089, 0.09655561984879313, 0.13820977011738378, 0.08377080756667332, 0.11601732114187524, 0.13756234859293914, 0.0856875232148595, 0.9888911678230767, 0.9883010295117484, 0.9760718124701762, 0.9872115860092552, 0.9884071885485629, 0.9792741392021833, 0.9806402120284465, 0.9859861586947691, 0.983983229901863, 0.4188593766986366, 0.35885835213120554, 0.4540803193085937, 0.40285973834248534, 0.4314777782367837, 0.34426135123419754, 0.3908394866366689, 0.38154137457837956, 0.3594358722685137, 0.22961688465794294, 0.22248904084850574, 0.2234786305734403, 0.3736662255339318, 0.21598830069428476, 0.27744313007892896, 0.5338005044140746, 0.2390886637228461, 0.25622711687055644, 0.16406200081160316, 0.16484592916246588, 0.16799078905514453, 0.1706590818602095, 0.17449117440281092, 0.15848876954875346, 0.1802039740454605, 0.17927117783518365, 0.1717616911547617, 0.1455676174129671, 0.15538075284479436, 0.15131955646414696, 0.3102317142575989, 0.13534541348534146, 0.18561692562945364, 0.2594690299602438, 0.17138271057450472, 0.1603702405557269, 0.06518888689443225, 0.062045481268232616, 9.999999999998899e-05, 0.023904758362183753, 0.005589655202433819, 9.999999999998899e-05, 0.01726137308984521, 9.999999999998899e-05, 0.05053567470318154, 0.09606617290519937, 0.0633750607385255, 0.14530347053649506, 0.12700389060497452, 0.046261678527406924, 0.0352095835844739, 0.15374858223277066, 0.03873427709975108, 0.10071652998089797, 0.043688207717666794, 0.024549881548877606, 0.08179986031259201, 0.03684551618481746, 0.10368142446344086, 0.05703801846098233, 0.06356442756114011, 0.106999025220475, 0.06727239890878978, 0.10951951152465877, 0.1289441779981354, 0.142117310829332, 0.14243355465397167, 0.14969111499263776, 0.08285042021202493, 0.06831150653760709, 0.04025059405548004, 0.07158161498634819, 0.45217062672701736, 0.4584092014235779, 0.47141322255941487, 0.4553123166865861, 0.428974557841163, 0.5069259555336987, 0.4561698907919073, 0.45643341021155415, 0.4353048188621922, 0.10408059996921326, 0.07408004703528515, 0.04825452787450135, 0.08650382668636192, 0.11259869761419872, 0.08587223800574362, 0.11161662164087371, 0.11342554085286849, 0.09452330769624173, 0.23155071534290605, 0.12891542014364965, 0.21868512486564162, 0.3291787480007179, 0.22211886095244648, 0.1919903291722166, 0.16591025943588122, 0.18632875914352764, 0.29487921383327864, 0.3080291174473211, 0.3535304789459892, 0.1488408166180314, 0.30720916456633063, 0.30913162340687095, 0.16563168119498273, 0.24720813649719398, 0.16983737451936975, 0.15349123067196746, 0.26719247163027326, 0.16446019247979604, 0.11685261577797845, 0.27696859397725926, 0.2668446575264103, 0.12427734866410278, 0.18826627257008022, 0.12625638177457188, 0.07166959425195796, 0.18086775195520743, 0.189642355821374, 0.23084934306768368, 0.262870414261559, 0.2646338741442317, 0.22113412349527506, 0.1990400840077542, 0.21287679947082583, 0.22313984720664948, 0.18174848436533064, 0.17781430333084114, 0.21292063869572797, 0.18955284147452978, 0.2051178842879432, 0.20360854069849088, 0.1902470545225089, 0.22323013528392888, 0.21683902248506637, 0.10849791902336714, 0.13757648284367952, 0.9486793384253079, 0.28880512702108074, 0.1936104137557353, 0.062082682205037765, 0.10874070922529178, 0.11530494654236079, 0.16945960052841658, 0.09455884578042839, 0.1128078710597592, 0.6977390964391108, 0.17028764429571552, 0.21390444444924406, 0.21271606690816625, 0.11345574021174198, 0.16980411365891346, 0.37321308728173763, 0.2089268623697299, 0.20451328846674943, 0.20509802463668647, 0.19021482126012168, 0.19883461427243643, 0.2113725335913802, 0.21966120418457913, 0.21673458275730706, 0.21154273478138896, 0.09165407912283896, 0.08304352678964655, 0.0996367028541707, 0.11776753227166614, 0.07337531423124477, 0.11204894428561818, 0.15015143572157963, 0.09177629757988393, 0.07941044972548805]}, "mutation_prompt": null}
{"id": "ebc9080f-d493-4b2f-9f4a-aa540bf5699d", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            mutation_strength = np.random.uniform(0, 1)\n            candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * abs(best_fitness - candidate_fitness)\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Introducing a dynamic mutation strategy to adapt the mutation rate based on the current best solution, aiming to accelerate convergence speed.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3d89955-b56c-49a1-af9e-b5281c869873", "metadata": {"aucs": [0.6111594108562683, 0.5801613030363664, 0.6119604034630948, 0.6630434290044768, 0.5992586513833994, 0.6126296987102345, 0.630540560329351, 0.5965018029268842, 0.6330344009867106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05726136567747486, 9.999999999998899e-05, 9.999999999998899e-05, 0.05864208147683281, 9.999999999998899e-05, 9.999999999998899e-05, 0.11065589336822812, 0.12302804818904789, 0.11606145949395108, 0.16042129763364776, 0.0933584268814206, 0.08293805808657195, 0.1296628095606076, 0.14110515713201044, 0.14336090069388552, 0.09911867954670794, 0.09442595474927351, 0.049374123276406, 0.16911134722296772, 0.07852563981735006, 0.07213925449706948, 0.06263198075579035, 0.051897548447722874, 0.06685689458732635, 0.9934066303746664, 0.9890528380321828, 0.9830065153090244, 0.9892478650368277, 0.9843150752563969, 0.9878056601256163, 0.9902324617647187, 0.9862868795938876, 0.9913338091003865, 0.34871666187767014, 0.42309437583350096, 0.39530609102461833, 0.3841861831252644, 0.4044915684628805, 0.44315546183738597, 0.3243813884329989, 0.37092931218446357, 0.378290448258198, 0.3432528946791257, 0.6358050907125867, 0.21306575480728485, 0.9742718417987685, 0.19504378729865846, 0.27990662788416343, 0.8645298457833019, 0.6177590432175245, 0.7560529227050182, 0.2249603383895875, 0.15407681363867964, 0.13191022983267708, 0.17767053392658638, 0.19787807723057393, 0.17243583364169257, 0.1461426386334448, 0.15771897326885387, 0.18925416150828012, 0.1927279058573248, 0.17380804073241585, 0.16706959011449052, 0.20431697156660455, 0.34679560954235744, 0.1863837809305856, 0.1998196700246403, 0.16538830337356425, 0.16180567147561598, 0.04664445370864834, 9.999999999998899e-05, 0.03632602238646354, 0.04500329614868115, 9.999999999998899e-05, 9.999999999998899e-05, 0.06634687982293741, 9.999999999998899e-05, 0.0015434601409515247, 0.08140036758010105, 0.07957866610414877, 0.17086827398561455, 0.0957500310180498, 0.02163888022455518, 0.05280688788235188, 0.15730954947595233, 0.07053404418954812, 0.03602074218197904, 0.06016629944166907, 0.008173722453827081, 0.10150221157680595, 0.1461335241130015, 0.0688181868762151, 0.031752040575204976, 0.14314186345177682, 0.06967844063467088, 0.034150714058211795, 0.07534670148264899, 0.07414953789011325, 0.16272833561861533, 0.17453505292923632, 0.19949188475134516, 0.10491462456745615, 0.10773071646223453, 0.1802052618036205, 0.029519306560156888, 0.4533232209294008, 0.48202973948034944, 0.5021673791553731, 0.43418165325962477, 0.5133267701625678, 0.5083281548891847, 0.4648929457274228, 0.4475747915775361, 0.4780093522377048, 0.08915294781343364, 0.11361441693086294, 0.07953533406358804, 0.11734422619339968, 0.10623232449048314, 0.08335505013191835, 0.10945911741156145, 0.06741464427006727, 0.13187381409302346, 0.19671385802055852, 0.2034631713567574, 0.20141929291968375, 0.3083469856111102, 0.19518726635304207, 0.22460498922725136, 0.2600316697560765, 0.18794964556377158, 0.18889245886637962, 0.25355064383017767, 0.3105531037200424, 0.1515805269920265, 0.2876559585532289, 0.24561166530979195, 0.11808631385976276, 0.236629399557447, 0.1553863368059306, 0.22622923682282547, 0.18264591747451975, 0.078487199832318, 0.06327547781584253, 0.20376850345567954, 0.19331033147818788, 0.1659643728870347, 0.1892928388955234, 0.19753004245930028, 0.16690869876963643, 0.17308262333775548, 0.19138232317280224, 0.19380042946269782, 0.24380928851413153, 0.21181773687204097, 0.19098972839162653, 0.21837731848235908, 0.21501655046076962, 0.2664369392117132, 0.22405736649610042, 0.22790219897434538, 0.21710715576147654, 0.22622561352563253, 0.22915746719264718, 0.2070362537197442, 0.1913678876794146, 0.22840864332181265, 0.2106958160884883, 0.18902033408630003, 0.13781964870386743, 0.17333890656722195, 0.17403582113960414, 0.06602208197415749, 0.06205310896359384, 0.10892660735504667, 0.12587424386574497, 0.1689878019823986, 0.481587953799555, 0.11309789797304914, 0.08342016841690181, 0.17054353461868943, 0.21265685481838337, 0.21483263668263786, 0.6703307121374144, 0.16976412870661328, 0.42520814214643143, 0.22583604455669248, 0.1949282457833731, 0.2028600283068801, 0.19089327490131058, 0.19962406111719255, 0.20635341212214642, 0.21743497333700001, 0.20309152851083523, 0.22920032957660386, 0.10212332787749256, 0.11577422773005952, 0.09322604117953015, 0.08834048001799144, 0.05217843287410362, 0.11419801675735985, 0.15045539714484601, 0.10338680560719204, 0.08687802084607554]}, "mutation_prompt": null}
{"id": "04b87d29-42ab-4cd2-8fdc-08cf209412f7", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            mutation_strength = np.random.uniform(0, 1)\n            candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * abs(best_fitness - candidate_fitness)\n            \n            mutation_strength = mutation_strength * (1.0 - self.mutation_rate)  # Dynamic mutation strength adjustment\n            \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Implementing a dynamic mutation strength adjustment based on the difference between the fitness of the current and candidate solutions to speed up convergence.", "configspace": "", "generation": 12, "fitness": 0.2398001532497881, "feedback": "The algorithm DynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "f3d89955-b56c-49a1-af9e-b5281c869873", "metadata": {"aucs": [0.6111594108562683, 0.5801613030363664, 0.6119604034630948, 0.6630434290044768, 0.5992586513833994, 0.6126296987102345, 0.630540560329351, 0.5965018029268842, 0.6330344009867106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05726136567747486, 9.999999999998899e-05, 9.999999999998899e-05, 0.05864208147683281, 9.999999999998899e-05, 9.999999999998899e-05, 0.11065589336822812, 0.12302804818904789, 0.11606145949395108, 0.16042129763364776, 0.0933584268814206, 0.08293805808657195, 0.1296628095606076, 0.14110515713201044, 0.14336090069388552, 0.09911867954670794, 0.09442595474927351, 0.049374123276406, 0.16911134722296772, 0.07852563981735006, 0.07213925449706948, 0.06263198075579035, 0.051897548447722874, 0.06685689458732635, 0.9934066303746664, 0.9890528380321828, 0.9830065153090244, 0.9892478650368277, 0.9843150752563969, 0.9878056601256163, 0.9902324617647187, 0.9862868795938876, 0.9913338091003865, 0.34871666187767014, 0.42309437583350096, 0.39530609102461833, 0.3841861831252644, 0.4044915684628805, 0.44315546183738597, 0.3243813884329989, 0.37092931218446357, 0.378290448258198, 0.3432528946791257, 0.6358050907125867, 0.21306575480728485, 0.9742718417987685, 0.19504378729865846, 0.27990662788416343, 0.8645298457833019, 0.6177590432175245, 0.7560529227050182, 0.2249603383895875, 0.15407681363867964, 0.13191022983267708, 0.17767053392658638, 0.19787807723057393, 0.17243583364169257, 0.1461426386334448, 0.15771897326885387, 0.18925416150828012, 0.1927279058573248, 0.17380804073241585, 0.16706959011449052, 0.20431697156660455, 0.34679560954235744, 0.1863837809305856, 0.1998196700246403, 0.16538830337356425, 0.16180567147561598, 0.04664445370864834, 9.999999999998899e-05, 0.03632602238646354, 0.04500329614868115, 9.999999999998899e-05, 9.999999999998899e-05, 0.06634687982293741, 9.999999999998899e-05, 0.0015434601409515247, 0.08140036758010105, 0.07957866610414877, 0.17086827398561455, 0.0957500310180498, 0.02163888022455518, 0.05280688788235188, 0.15730954947595233, 0.07053404418954812, 0.03602074218197904, 0.06016629944166907, 0.008173722453827081, 0.10150221157680595, 0.1461335241130015, 0.0688181868762151, 0.031752040575204976, 0.14314186345177682, 0.06967844063467088, 0.034150714058211795, 0.07534670148264899, 0.07414953789011325, 0.16272833561861533, 0.17453505292923632, 0.19949188475134516, 0.10491462456745615, 0.10773071646223453, 0.1802052618036205, 0.029519306560156888, 0.4533232209294008, 0.48202973948034944, 0.5021673791553731, 0.43418165325962477, 0.5133267701625678, 0.5083281548891847, 0.4648929457274228, 0.4475747915775361, 0.4780093522377048, 0.08915294781343364, 0.11361441693086294, 0.07953533406358804, 0.11734422619339968, 0.10623232449048314, 0.08335505013191835, 0.10945911741156145, 0.06741464427006727, 0.13187381409302346, 0.19671385802055852, 0.2034631713567574, 0.20141929291968375, 0.3083469856111102, 0.19518726635304207, 0.22460498922725136, 0.2600316697560765, 0.18794964556377158, 0.18889245886637962, 0.25355064383017767, 0.3105531037200424, 0.1515805269920265, 0.2876559585532289, 0.24561166530979195, 0.11808631385976276, 0.236629399557447, 0.1553863368059306, 0.22622923682282547, 0.18264591747451975, 0.078487199832318, 0.06327547781584253, 0.20376850345567954, 0.19331033147818788, 0.1659643728870347, 0.1892928388955234, 0.19753004245930028, 0.16690869876963643, 0.17308262333775548, 0.19138232317280224, 0.19380042946269782, 0.24380928851413153, 0.21181773687204097, 0.19098972839162653, 0.21837731848235908, 0.21501655046076962, 0.2664369392117132, 0.22405736649610042, 0.22790219897434538, 0.21710715576147654, 0.22622561352563253, 0.22915746719264718, 0.2070362537197442, 0.1913678876794146, 0.22840864332181265, 0.2106958160884883, 0.18902033408630003, 0.13781964870386743, 0.17333890656722195, 0.17403582113960414, 0.06602208197415749, 0.06205310896359384, 0.10892660735504667, 0.12587424386574497, 0.1689878019823986, 0.481587953799555, 0.11309789797304914, 0.08342016841690181, 0.17054353461868943, 0.21265685481838337, 0.21483263668263786, 0.6703307121374144, 0.16976412870661328, 0.42520814214643143, 0.22583604455669248, 0.1949282457833731, 0.2028600283068801, 0.19089327490131058, 0.19962406111719255, 0.20635341212214642, 0.21743497333700001, 0.20309152851083523, 0.22920032957660386, 0.10212332787749256, 0.11577422773005952, 0.09322604117953015, 0.08834048001799144, 0.05217843287410362, 0.11419801675735985, 0.15045539714484601, 0.10338680560719204, 0.08687802084607554]}, "mutation_prompt": null}
{"id": "9407499c-4b3f-48a7-b8e8-e550accbb61b", "solution": "import numpy as np\n\nclass FastDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            mutation_strength = np.random.uniform(0, 1)\n            candidate_solution = best_solution + self.step_size * mutation_strength * np.random.standard_normal(self.dim)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * abs(best_fitness - candidate_fitness)\n            self.step_size = 0.9 * self.step_size + 0.1 * abs(best_fitness - candidate_fitness)\n        \n        return best_solution", "name": "FastDynamicMutationMetaheuristic", "description": "Implementing a dynamic mutation with an adaptive step size based on the fitness difference to accelerate convergence speed.", "configspace": "", "generation": 13, "fitness": 0.06788176507452864, "feedback": "The algorithm FastDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.20.", "error": "", "parent_id": "f3d89955-b56c-49a1-af9e-b5281c869873", "metadata": {"aucs": [0.1438714415415867, 0.08424466446450918, 0.2509531626668339, 0.016903897798688172, 0.018692605991997513, 0.06865663203810624, 0.04988961122729929, 0.10102629529037765, 0.03691558315715138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001270756928679062, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012732767978466453, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9930712794693936, 0.9933002534928999, 0.9875879849937956, 0.9924758337572226, 0.994456012365942, 0.9920507011879618, 0.9897594042751141, 0.9919725872199265, 0.9929361063330869, 0.0, 0.0, 0.0, 0.0, 0.00459740674175968, 0.0, 0.0, 0.0, 0.0, 0.032420390398068766, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 0.0, 9.999999999998899e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008518338443295526, 0.0, 0.12784173659152598, 0.09969838740243708, 0.07262872227220452, 0.04742816361819446, 0.13791802214184934, 0.11821541652649326, 0.04838390565465067, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02457130788404993, 0.04316096770881428, 0.060016710786746086, 0.061512673271951424, 0.028251697224880967, 0.0435978716213391, 0.055476274554252636, 0.0334130359260989, 0.025823722251099523, 0.051780933682942454, 0.10102630347883657, 0.0861943887965172, 0.08348937160676573, 0.13006977173442047, 0.05878724014130965, 0.08288293681400227, 0.12049002319510749, 0.0670261919452032, 0.07475439434869591, 0.04344718168620498, 0.022634702116356875, 0.018883790629463104, 0.06657701595529741, 0.0, 0.0342467467690829, 0.06131128439543554, 0.00519625581887484, 0.015073430146942846, 0.12321437637446542, 0.02028744218392109, 0.08408269643667865, 0.1080324493634287, 0.028427839787161235, 0.05453172213117219, 0.12237199858757541, 0.054054670177056674, 0.07544914227304711, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04034244350915683, 0.0333896477135871, 0.03130590292979052, 0.05558623198666135, 0.05498245107469446, 0.04452787043308215, 0.03382267488617985, 0.10280399238838711, 0.028362782776481965, 0.07762271273914867, 0.07108054731496505, 0.025090340068904315, 0.014222644448623534, 0.039882450186027874, 0.029511966350858176, 0.10251147383632053, 0.0418047591555043, 0.017911457335349934, 0.11417393137450582, 0.14387679515687524, 0.14539777055386405, 0.10868093520549571, 0.11286263438496591, 0.12456358843521431, 0.09934881253830208, 0.14497991873614813, 0.11890717675966445, 0.015624531608871117, 0.0, 0.009878077650213868, 0.018353228214634476, 0.0, 0.017575225101833847, 0.036283567333101785, 0.0, 0.026326080136056973]}, "mutation_prompt": null}
{"id": "8dd174cb-3274-4e81-9aca-4fe0fd31a891", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ParallelEvaluationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            futures = []\n            for _ in range(self.budget):\n                mutation_strength = np.random.uniform(0, 1)\n                candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n                futures.append(executor.submit(self.evaluate_solution, func, candidate_solution))\n            \n            for future in futures:\n                candidate_fitness = future.result()\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                \n                self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * abs(best_fitness - candidate_fitness)\n        \n        return best_solution", "name": "ParallelEvaluationMetaheuristic", "description": "Implementing a parallel evaluation strategy to evaluate candidate solutions concurrently for faster convergence.", "configspace": "", "generation": 14, "fitness": 0.24828549555634355, "feedback": "The algorithm ParallelEvaluationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.08.", "error": "", "parent_id": "f3d89955-b56c-49a1-af9e-b5281c869873", "metadata": {"aucs": [0.3297647621244594, 0.2644084038944676, 0.3050578348817391, 0.17495607419261727, 0.5304315693169683, 0.34667097654138646, 0.2568076526786829, 0.3315036337666998, 0.2559064041681621, 0.4928, 0.17059999999999997, 0.2036, 0.26780000000000004, 0.17179999999999995, 0.19389999999999996, 0.18530000000000002, 0.0847, 0.30920000000000003, 0.15896777782218474, 0.21599999999999997, 0.17069999999999996, 0.2270407053737219, 0.14890000000000003, 0.23859369674364306, 0.30433596886347447, 0.22929999999999995, 0.15535755213759472, 0.1418354120495443, 0.2691, 0.23309999999999997, 0.12227294281996437, 0.1604, 0.2341853137795169, 0.2398, 0.2025, 0.2671, 0.1846090529241846, 0.21978235166541482, 0.18067466257963494, 0.34737734996275826, 0.1719038679603877, 0.18287568403547982, 0.26513466078991865, 0.22600556428728735, 0.21728510882500962, 0.24151791480389861, 0.12370000000000003, 0.19110000000000005, 0.2136, 0.235409721235751, 0.12142046700158393, 0.2187, 0.21489999999999998, 0.2279, 0.39885473875474897, 0.23178119843101563, 0.36477291055169425, 0.18820651075918438, 0.32509999999999994, 0.20230000000000004, 0.1772136551681358, 0.26859999999999995, 0.2157, 0.14580000000000004, 0.16669999999999996, 0.1532, 0.2772, 0.19240000000000002, 0.33440000000000003, 0.24219999999999997, 0.14970000000000006, 0.15810000000000002, 0.23206376679707585, 0.21709999999999996, 0.25429999999999997, 0.20665181471506489, 0.13480000000000003, 0.20630000000000004, 0.3908035825341166, 0.22829999999999995, 0.09189999999999998, 0.2369, 0.2592, 0.19669999999999999, 0.25839999999999996, 0.2611, 0.1794, 0.21740000000000004, 0.1261, 0.21619999999999995, 0.2229, 0.19630000000000003, 0.1824, 0.29668861343576114, 0.20230000000000004, 0.07024464143303066, 0.2930017875938651, 0.11912687003511857, 0.2924, 0.20479999999999998, 0.2491, 0.2761, 0.18679999999999997, 0.10060000000000002, 0.22040000000000004, 0.19389999999999996, 0.1643, 0.16590000000000005, 0.16569999999999996, 0.22850000000000004, 0.19230000000000003, 0.21009999999999995, 0.20750000000000002, 0.2753, 0.23150000000000004, 0.1785, 0.1531, 0.27377759887674447, 0.17014929124860467, 0.32880564552761293, 0.21292492511182193, 0.25557068014165474, 0.2850924005844071, 0.3811244508887215, 0.22184925274877543, 0.2832971084882463, 0.26349999999999996, 0.15900000000000003, 0.2934, 0.2348, 0.11138933346487612, 0.1887478441659044, 0.22253413216384144, 0.3420812782294127, 0.18244883482992835, 0.39072856432832814, 0.31324012065212636, 0.28043368118954326, 0.31700099357181366, 0.4079927776043516, 0.2859980772726374, 0.3703300986297644, 0.3631067726948146, 0.3279904179328734, 0.3672954766715123, 0.2713479722793408, 0.31324648799529276, 0.475137556626118, 0.32461320569910335, 0.2629873931932061, 0.30929970543584584, 0.3448139323018158, 0.18600615551810862, 0.17326221914521922, 0.2957857315305269, 0.23295885742909184, 0.27419900454994506, 0.1856668360391157, 0.30180628429532663, 0.287915467493046, 0.2832462847712339, 0.2190386888505248, 0.3370285905708994, 0.36635138058430416, 0.3342294051628919, 0.28795084304634344, 0.25037339398863456, 0.32137930496254097, 0.2810085491133717, 0.26188881035572154, 0.3058512188443294, 0.3041353138614863, 0.11219999999999997, 0.18820000000000003, 0.2901622542639647, 0.11150000000000004, 0.3135, 0.3170195827119564, 0.18330000000000002, 0.27170000000000005, 0.29980345324908253, 0.34755187462489234, 0.23048135669845693, 0.23155400537102366, 0.16878171784201113, 0.3387671837848768, 0.38397243345640486, 0.3127675495711024, 0.46302708998892306, 0.3605623962713449, 0.2503021709392018, 0.33038676899206354, 0.3127872070931633, 0.1592457393172907, 0.1623860833428511, 0.24847037074858158, 0.29369829491228105, 0.24281758319537883, 0.3727905985376754, 0.3686871169173638, 0.3234344735859641, 0.28632305802882674, 0.33973440948470046, 0.37957195384765496, 0.3764598626872223, 0.3034223062286252, 0.3868560149036975, 0.1841973557923302, 0.22174672274486285, 0.22969246143908695, 0.20873611027647365, 0.2105811800620786, 0.23702069419342076, 0.13870074345376948, 0.18819633794439083, 0.35822899557055987]}, "mutation_prompt": null}
{"id": "6c7e86cb-6985-42f1-b62e-faea291fef8c", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ParallelEvaluationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            futures = []\n            for _ in range(self.budget):\n                mutation_strength = np.random.uniform(0, 1)\n                candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n                futures.append(executor.submit(self.evaluate_solution, func, candidate_solution))\n            \n            for future in futures:\n                candidate_fitness = future.result()\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                \n                self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * abs(best_fitness - candidate_fitness)\n        \n        return best_solution", "name": "ParallelEvaluationMetaheuristic", "description": "Implementing a parallel evaluation strategy to evaluate candidate solutions concurrently for faster convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8dd174cb-3274-4e81-9aca-4fe0fd31a891", "metadata": {"aucs": [0.3297647621244594, 0.2644084038944676, 0.3050578348817391, 0.17495607419261727, 0.5304315693169683, 0.34667097654138646, 0.2568076526786829, 0.3315036337666998, 0.2559064041681621, 0.4928, 0.17059999999999997, 0.2036, 0.26780000000000004, 0.17179999999999995, 0.19389999999999996, 0.18530000000000002, 0.0847, 0.30920000000000003, 0.15896777782218474, 0.21599999999999997, 0.17069999999999996, 0.2270407053737219, 0.14890000000000003, 0.23859369674364306, 0.30433596886347447, 0.22929999999999995, 0.15535755213759472, 0.1418354120495443, 0.2691, 0.23309999999999997, 0.12227294281996437, 0.1604, 0.2341853137795169, 0.2398, 0.2025, 0.2671, 0.1846090529241846, 0.21978235166541482, 0.18067466257963494, 0.34737734996275826, 0.1719038679603877, 0.18287568403547982, 0.26513466078991865, 0.22600556428728735, 0.21728510882500962, 0.24151791480389861, 0.12370000000000003, 0.19110000000000005, 0.2136, 0.235409721235751, 0.12142046700158393, 0.2187, 0.21489999999999998, 0.2279, 0.39885473875474897, 0.23178119843101563, 0.36477291055169425, 0.18820651075918438, 0.32509999999999994, 0.20230000000000004, 0.1772136551681358, 0.26859999999999995, 0.2157, 0.14580000000000004, 0.16669999999999996, 0.1532, 0.2772, 0.19240000000000002, 0.33440000000000003, 0.24219999999999997, 0.14970000000000006, 0.15810000000000002, 0.23206376679707585, 0.21709999999999996, 0.25429999999999997, 0.20665181471506489, 0.13480000000000003, 0.20630000000000004, 0.3908035825341166, 0.22829999999999995, 0.09189999999999998, 0.2369, 0.2592, 0.19669999999999999, 0.25839999999999996, 0.2611, 0.1794, 0.21740000000000004, 0.1261, 0.21619999999999995, 0.2229, 0.19630000000000003, 0.1824, 0.29668861343576114, 0.20230000000000004, 0.07024464143303066, 0.2930017875938651, 0.11912687003511857, 0.2924, 0.20479999999999998, 0.2491, 0.2761, 0.18679999999999997, 0.10060000000000002, 0.22040000000000004, 0.19389999999999996, 0.1643, 0.16590000000000005, 0.16569999999999996, 0.22850000000000004, 0.19230000000000003, 0.21009999999999995, 0.20750000000000002, 0.2753, 0.23150000000000004, 0.1785, 0.1531, 0.27377759887674447, 0.17014929124860467, 0.32880564552761293, 0.21292492511182193, 0.25557068014165474, 0.2850924005844071, 0.3811244508887215, 0.22184925274877543, 0.2832971084882463, 0.26349999999999996, 0.15900000000000003, 0.2934, 0.2348, 0.11138933346487612, 0.1887478441659044, 0.22253413216384144, 0.3420812782294127, 0.18244883482992835, 0.39072856432832814, 0.31324012065212636, 0.28043368118954326, 0.31700099357181366, 0.4079927776043516, 0.2859980772726374, 0.3703300986297644, 0.3631067726948146, 0.3279904179328734, 0.3672954766715123, 0.2713479722793408, 0.31324648799529276, 0.475137556626118, 0.32461320569910335, 0.2629873931932061, 0.30929970543584584, 0.3448139323018158, 0.18600615551810862, 0.17326221914521922, 0.2957857315305269, 0.23295885742909184, 0.27419900454994506, 0.1856668360391157, 0.30180628429532663, 0.287915467493046, 0.2832462847712339, 0.2190386888505248, 0.3370285905708994, 0.36635138058430416, 0.3342294051628919, 0.28795084304634344, 0.25037339398863456, 0.32137930496254097, 0.2810085491133717, 0.26188881035572154, 0.3058512188443294, 0.3041353138614863, 0.11219999999999997, 0.18820000000000003, 0.2901622542639647, 0.11150000000000004, 0.3135, 0.3170195827119564, 0.18330000000000002, 0.27170000000000005, 0.29980345324908253, 0.34755187462489234, 0.23048135669845693, 0.23155400537102366, 0.16878171784201113, 0.3387671837848768, 0.38397243345640486, 0.3127675495711024, 0.46302708998892306, 0.3605623962713449, 0.2503021709392018, 0.33038676899206354, 0.3127872070931633, 0.1592457393172907, 0.1623860833428511, 0.24847037074858158, 0.29369829491228105, 0.24281758319537883, 0.3727905985376754, 0.3686871169173638, 0.3234344735859641, 0.28632305802882674, 0.33973440948470046, 0.37957195384765496, 0.3764598626872223, 0.3034223062286252, 0.3868560149036975, 0.1841973557923302, 0.22174672274486285, 0.22969246143908695, 0.20873611027647365, 0.2105811800620786, 0.23702069419342076, 0.13870074345376948, 0.18819633794439083, 0.35822899557055987]}, "mutation_prompt": null}
{"id": "7b1d64b3-6f7a-4413-8571-8479d3ac130f", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass AdaptiveMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        with ThreadPoolExecutor() as executor:\n            futures = []\n            for _ in range(self.budget):\n                mutation_strength = np.random.uniform(0, 1) * self.mutation_rate\n                candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n                futures.append(executor.submit(self.evaluate_solution, func, candidate_solution))\n\n            for future in futures:\n                candidate_fitness = future.result()\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                self.mutation_rate = 0.8 * self.mutation_rate + 0.2 * abs(best_fitness - candidate_fitness)\n\n        return best_solution", "name": "AdaptiveMutationMetaheuristic", "description": "Implementing an adaptive mutation rate that dynamically adjusts mutation strength based on fitness improvement to enhance convergence speed.", "configspace": "", "generation": 16, "fitness": 0.22579118145801202, "feedback": "The algorithm AdaptiveMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.08.", "error": "", "parent_id": "8dd174cb-3274-4e81-9aca-4fe0fd31a891", "metadata": {"aucs": [0.5432929868024472, 0.2418008016854707, 0.1940207444754205, 0.27349905021204457, 0.03575531288890765, 0.1003698264928502, 0.07190994978898702, 0.1251069852905572, 0.1969262291331595, 0.13470000000000004, 0.18820000000000003, 0.17390000000000005, 0.18899999999999995, 0.3218, 0.34140000000000004, 0.27090000000000003, 0.23860000000000003, 0.2691, 0.14659648469760655, 0.1392, 0.3639, 0.27659999999999996, 0.26559999999999995, 0.16369999999999996, 0.1654, 0.14600000000000002, 0.04510000000000003, 0.24790145629405802, 0.18789999999999996, 0.17759999999999998, 0.23050000000000004, 0.1744, 0.24939999999999996, 0.37560000000000004, 0.09709999999999996, 0.12539999999999996, 0.1585112886954344, 0.13127953514871382, 0.11019999999999996, 0.15837500214914757, 0.2594472313303722, 0.23660546202917, 0.118, 0.11412962088688183, 0.20929135853646585, 0.16390000000000005, 0.17559999999999998, 0.25560000000000005, 0.18630000000000002, 0.16866675179812796, 0.24260000000000004, 0.1604, 0.2792, 0.20199999999999996, 0.3044220893523769, 0.19630000000000003, 0.14080000000000004, 0.19830000000000003, 0.22350000000000003, 0.17910000000000004, 0.32420000000000004, 0.1855, 0.15949999999999998, 0.18169999999999997, 0.19510000000000005, 0.30400000000000005, 0.2219, 0.1492, 0.22929999999999995, 0.2481, 0.1894, 0.21289999999999998, 0.12970000000000004, 0.23909999999999998, 0.2551, 0.22919999999999996, 0.13390000000000002, 0.11299999999999999, 0.22440000000000004, 0.15300000000000002, 0.3405, 0.37060000000000004, 0.20930000000000004, 0.1583, 0.1805, 0.2318, 0.36129999999999995, 0.17379999999999995, 0.19099999999999995, 0.27859999999999996, 0.13129999999999997, 0.2669, 0.09989999999999999, 0.30489966309542516, 0.34650000000000003, 0.24570000000000003, 0.22419999999999995, 0.1488517848728811, 0.22330000000000005, 0.19569999999999999, 0.25049999999999994, 0.27659999999999996, 0.21150000000000002, 0.2178, 0.0665, 0.3439, 0.10109999999999997, 0.26680000000000004, 0.1512, 0.3205, 0.1642, 0.16790000000000005, 0.21809999999999996, 0.29569999999999996, 0.24509999999999998, 0.25949999999999995, 0.23040000000000005, 0.23917963442746237, 0.19779999999999998, 0.3188955726633601, 0.2011037750281658, 0.23660000000000003, 0.12339999999999995, 0.267412360568705, 0.2502606486046054, 0.1531544213950985, 0.1422, 0.1925, 0.15869999999999995, 0.381, 0.22130000000000005, 0.18020000000000003, 0.3002, 0.11880000000000002, 0.15710000000000002, 0.2291685845568341, 0.2693256106788735, 0.3063738042456068, 0.27791966545617275, 0.20593721058483005, 0.25961279647580726, 0.1796782108056706, 0.18200003288520095, 0.17159679235825864, 0.24244289166439692, 0.3106858671763463, 0.19938741657936487, 0.3411865852248803, 0.18931634905599093, 0.24283259621396136, 0.20155936555156817, 0.3299041831628129, 0.2582179667392286, 0.2528853539909095, 0.25564362026711407, 0.1653928626273088, 0.3689345863085699, 0.25147912257483984, 0.18190223508987657, 0.13064179301108758, 0.2719220638548656, 0.16923592272272658, 0.3645566099689137, 0.2973242050432021, 0.2991481291941016, 0.3663225541779199, 0.1824923811659488, 0.2764802501185335, 0.25232672810665835, 0.3405087670901398, 0.28079250923080923, 0.18630000000000002, 0.20440000000000003, 0.26559999999999995, 0.18159999999999998, 0.1825, 0.22650000000000003, 0.14339999999999997, 0.12549999999999994, 0.21030000000000004, 0.26978698474594365, 0.21009522996003094, 0.3201257912691913, 0.19577942833937045, 0.2155639722788799, 0.26230586978110115, 0.27192365599300883, 0.3753445872013279, 0.18107621101476257, 0.20242734248409566, 0.18258291485008926, 0.30478691446374817, 0.2233149725062893, 0.19587272621258334, 0.1907819245301322, 0.11560887685113508, 0.2342815269387868, 0.18171765155084385, 0.4459262057681207, 0.43402841543530435, 0.33399872183642365, 0.27911635699727044, 0.40500748038691703, 0.38683317359656777, 0.399333212360902, 0.40268363879307845, 0.3856034225336834, 0.28320778269128655, 0.20570760753055106, 0.23447289970754615, 0.2329733571052931, 0.08150000000000002, 0.07796211958676436, 0.23276478293574998, 0.1883094194578362, 0.347888364932739]}, "mutation_prompt": null}
{"id": "4e940ecb-0337-4865-85ed-9c18bfc3b293", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass AcceleratedParallelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            futures = []\n            for _ in range(self.budget):\n                mutation_strength = np.random.uniform(0, 1)\n                candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n                futures.append(executor.submit(self.evaluate_solution, func, candidate_solution))\n            \n            fitness_values = np.array([future.result() for future in futures])\n            fitness_variance = np.var(fitness_values)\n            \n            for idx, candidate_fitness in enumerate(fitness_values):\n                if candidate_fitness < best_fitness:\n                    best_solution = futures[idx].result()\n                    best_fitness = candidate_fitness\n                \n                mutation_strength = np.clip(0.9 * mutation_strength + 0.1 * fitness_variance, 0, 1)\n                candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n        \n        return best_solution", "name": "AcceleratedParallelMetaheuristic", "description": "Introducing a dynamic mutation strength adjustment mechanism based on fitness variance to enhance exploration-exploitation trade-off and accelerate convergence.", "configspace": "", "generation": 17, "fitness": 0.24636814294887024, "feedback": "The algorithm AcceleratedParallelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.08.", "error": "", "parent_id": "8dd174cb-3274-4e81-9aca-4fe0fd31a891", "metadata": {"aucs": [0.2973226741726984, 0.28275314177161304, 0.28687610529064245, 0.2305305070256095, 0.2206655898614709, 0.2205232437679977, 0.31386430502202856, 0.25061096560053386, 0.17850009230329855, 0.10709999999999997, 0.23909999999999998, 0.2952, 0.14100000000000001, 0.18530000000000002, 0.19630000000000003, 0.22040000000000004, 0.08709999999999996, 0.24029999999999996, 0.24002894783942785, 0.08199999999999996, 0.3067, 0.21256790779225598, 0.17090000000000005, 0.20654376524365137, 0.2028203819241804, 0.29579999999999995, 0.2180103488793005, 0.23600192706539647, 0.14600000000000002, 0.2862, 0.2161343580619105, 0.2379, 0.10223187162026315, 0.18389999999999995, 0.1594, 0.26539999999999997, 0.3149585558097998, 0.10496017253386858, 0.22130497442183727, 0.12481219904721708, 0.18801124998686514, 0.19725659832094966, 0.1780578944302773, 0.2578281267896455, 0.18296767467421338, 0.2685317281993904, 0.23529999999999995, 0.14470000000000005, 0.22360000000000002, 0.2754045640754397, 0.17719415054588894, 0.2389, 0.12229999999999996, 0.26859999999999995, 0.36202441616278425, 0.24839938270721995, 0.2806661577929366, 0.36924313392723385, 0.1452, 0.20430000000000004, 0.20097999506844766, 0.15980000000000005, 0.21630000000000005, 0.3097, 0.17759999999999998, 0.14800000000000002, 0.2529, 0.18430000000000002, 0.17279999999999995, 0.10240000000000005, 0.3026, 0.2992, 0.21973269623186797, 0.14800000000000002, 0.2984, 0.1833439632538626, 0.27780000000000005, 0.27470000000000006, 0.19872905234922833, 0.17510000000000003, 0.14070000000000005, 0.09199999999999997, 0.122, 0.18689999999999996, 0.059599999999999986, 0.2558, 0.18100000000000005, 0.24109999999999998, 0.20940000000000003, 0.3097, 0.1422, 0.22819999999999996, 0.1371, 0.23831102344363386, 0.24360000000000004, 0.21753787043985418, 0.3500812575685167, 0.20915623937837502, 0.08499999999999996, 0.14129999999999998, 0.22450000000000003, 0.19669999999999999, 0.1261, 0.2138, 0.17359999999999998, 0.24180000000000001, 0.24070000000000003, 0.24, 0.21509999999999996, 0.20040000000000002, 0.2742, 0.0907, 0.2158, 0.30100000000000005, 0.3348, 0.3133, 0.2309, 0.3602624743469771, 0.2050867627455868, 0.3869745500411309, 0.3693029261721764, 0.3108179166622217, 0.26178206803507387, 0.3633540113121859, 0.34833996889008256, 0.36706766036157723, 0.20440000000000003, 0.29769999999999996, 0.29500000000000004, 0.27480000000000004, 0.19647104015067451, 0.25222123185863343, 0.1558926315437229, 0.21964518949317835, 0.24973911043919128, 0.31292322316376586, 0.3600024949814681, 0.2656671263245295, 0.24084672424268894, 0.23737579987313573, 0.40269489548570825, 0.3391509504360196, 0.2596524528067685, 0.38565928841119135, 0.28323519274532694, 0.35670069536721694, 0.18392733170331477, 0.3027881852023856, 0.3551956456480503, 0.24503025243809573, 0.2973367092193283, 0.34655884560278005, 0.42875925836055706, 0.24611482579389132, 0.19445686827153663, 0.29722436149680864, 0.31655496182023046, 0.31013467576286424, 0.25266962844234553, 0.27058272784326376, 0.2402288943107188, 0.25212821621858517, 0.32376642895064056, 0.2718767105269517, 0.3496818940422677, 0.31911325371121935, 0.21135609682062306, 0.47122373416985597, 0.3280820323537267, 0.2197959695493127, 0.3151480265981841, 0.3183237431801357, 0.26359999999999995, 0.18700000000000006, 0.3709649703750736, 0.20179999999999998, 0.13680000000000003, 0.3617770081674009, 0.2844, 0.09999999999999998, 0.35300786778219895, 0.24760667619133747, 0.26991609260036553, 0.2613320016057995, 0.26455231124962797, 0.302635860340994, 0.2169763716511428, 0.3304622796834339, 0.2770423567547574, 0.34504857016468227, 0.23297441462967694, 0.21001433480178, 0.25326371477703846, 0.30045500266324365, 0.2546911215444382, 0.29177186271050903, 0.19980537975117363, 0.1976875203621996, 0.36018186486045745, 0.3434468838565716, 0.3763961313625639, 0.3402203559907008, 0.2519012721892413, 0.2787364374920148, 0.4166950007652884, 0.3693813372028779, 0.26362575261647414, 0.2961555065336572, 0.3010804506765876, 0.25048305493261136, 0.3042947589553159, 0.19439412220594154, 0.2273825566089005, 0.26722353444588554, 0.1448599014441987, 0.2596693626802782]}, "mutation_prompt": null}
{"id": "b3452a83-2862-4588-b447-435cc5760320", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            futures = []\n            for _ in range(self.budget):\n                mutation_strength = np.random.uniform(0, 1)\n                candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n                futures.append(executor.submit(self.evaluate_solution, func, candidate_solution))\n            \n            for future in futures:\n                candidate_fitness = future.result()\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                    self.mutation_rate *= 0.95  # Dynamic mutation adjustment based on fitness improvement\n                \n                self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * abs(best_fitness - candidate_fitness)\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Introducing a dynamic mutation strength adjustment based on fitness improvement to accelerate convergence speed.", "configspace": "", "generation": 18, "fitness": 0.24628195773383763, "feedback": "The algorithm DynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.09.", "error": "", "parent_id": "8dd174cb-3274-4e81-9aca-4fe0fd31a891", "metadata": {"aucs": [0.3514811129787704, 0.2784369058646622, 0.24592063498728234, 0.5459385724323181, 0.2807766268633707, 0.2590566754851308, 0.4111822473763276, 0.32677671930936036, 0.3015387484256107, 0.11880000000000002, 0.21399999999999997, 0.11850000000000005, 0.21719999999999995, 0.19520000000000004, 0.1884, 0.23770000000000002, 0.3153, 0.19420000000000004, 0.20220507684700018, 0.27190000000000003, 0.20109999999999995, 0.16672996074828694, 0.2219, 0.21512967806521133, 0.1669964595202591, 0.22529999999999994, 0.16629530584975327, 0.21787691616255156, 0.28600000000000003, 0.20009999999999994, 0.25062619808748166, 0.17720000000000002, 0.3187623368782656, 0.12339999999999995, 0.20040000000000002, 0.15980000000000005, 0.1231641483248348, 0.24733694877498924, 0.1360499855006292, 0.19759242166627478, 0.1363402833919588, 0.17158547957352044, 0.15822924015882123, 0.23976390988961893, 0.28922305385711145, 0.26615855651081666, 0.4416, 0.07940000000000003, 0.32520000000000004, 0.146635882882045, 0.1622433308372474, 0.08250000000000002, 0.15039999999999998, 0.19699999999999995, 0.2460151369516962, 0.1886200318855218, 0.1879438687618914, 0.2502239338203709, 0.1441, 0.18059999999999998, 0.4652352414025518, 0.10470000000000002, 0.13939999999999997, 0.1642, 0.12980000000000003, 0.26470000000000005, 0.18269999999999997, 0.1774, 0.20140000000000002, 0.12870000000000004, 0.20830000000000004, 0.242, 0.28409776149971766, 0.1725, 0.08379999999999999, 0.1857240594018713, 0.17810000000000004, 0.2086, 0.3023067491051904, 0.27890000000000004, 0.17179999999999995, 0.2368, 0.1753, 0.20240000000000002, 0.30710000000000004, 0.24650000000000005, 0.1261, 0.19810000000000005, 0.14939999999999998, 0.19169999999999998, 0.20140000000000002, 0.2622, 0.25029999999999997, 0.2593712470184214, 0.32609999999999995, 0.21054411056927536, 0.3795492741636842, 0.11616386502617859, 0.1119, 0.16469999999999996, 0.2298, 0.17600000000000005, 0.2388, 0.21399999999999997, 0.21050000000000002, 0.48419999999999996, 0.28559999999999997, 0.10360000000000003, 0.23850000000000005, 0.12419999999999998, 0.2501, 0.27449999999999997, 0.18020000000000003, 0.13870000000000005, 0.28759999999999997, 0.25549999999999995, 0.278, 0.20138485643703574, 0.2726205289218212, 0.2683770871801724, 0.45201608649919056, 0.25424591950234177, 0.267278431006441, 0.2791958918082159, 0.39951953380390937, 0.18049938617390493, 0.19189999999999996, 0.2259, 0.1189, 0.17420000000000002, 0.2579671597506924, 0.22519154953044584, 0.2790475505497968, 0.17995122720501766, 0.11957245593600652, 0.23730632524990747, 0.27948736596937873, 0.31980246734914786, 0.42887679101751053, 0.2246971032463374, 0.23445625101215406, 0.362388146156997, 0.23469052018284742, 0.2712663059095275, 0.23353689158393232, 0.3762915304762794, 0.25086875907408135, 0.3633357914128009, 0.27911576987445974, 0.32869034034516753, 0.30612072742026775, 0.25574883408365123, 0.3234787258604781, 0.3120224333354872, 0.2732173060143679, 0.19409054214308286, 0.3161271700990651, 0.2190930679370786, 0.14746428852181448, 0.33317508320488565, 0.3136849293604824, 0.20436770896071133, 0.35609080316810493, 0.39293761639253366, 0.41863171463579885, 0.3871038819080712, 0.24104174154217384, 0.26248152463305974, 0.29125092549233245, 0.3635427866806502, 0.3703319572706548, 0.39424946681311734, 0.1644, 0.263, 0.2932647196787287, 0.16200000000000003, 0.27149999999999996, 0.36253560859884915, 0.16180000000000005, 0.21919999999999995, 0.32304041408349615, 0.3025148407628583, 0.34466347686427123, 0.22547067002305876, 0.2472358525781687, 0.2613933955152694, 0.5147945325710391, 0.25387391649716284, 0.26101776594040194, 0.372501346969799, 0.25281797578621035, 0.3220993883231881, 0.3867188064752186, 0.19537591450156955, 0.21588867648319698, 0.25291324380175295, 0.1822481496320082, 0.26142807618898356, 0.3064117750102765, 0.41924953184758706, 0.2795309729945763, 0.3596058246522982, 0.4210913504286581, 0.3197049728378085, 0.30866377453597893, 0.29904724120124204, 0.3576166428728228, 0.16374654807640965, 0.25988110544774523, 0.2650424456483259, 0.3362856014035017, 0.16254134927514863, 0.21493726439824257, 0.2020350564117982, 0.1302796409663124, 0.18885504572569]}, "mutation_prompt": null}
{"id": "f8da5128-2e58-407b-b389-42ef36e83e88", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ParallelEvaluationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            futures = []\n            for _ in range(self.budget):\n                mutation_strength = np.random.uniform(0, 1)\n                candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n                futures.append(executor.submit(self.evaluate_solution, func, candidate_solution))\n            \n            for future in futures:\n                candidate_fitness = future.result()\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                \n                self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * abs(best_fitness - candidate_fitness)\n        \n        return best_solution", "name": "ParallelEvaluationMetaheuristic", "description": "Implementing a parallel evaluation strategy to evaluate candidate solutions concurrently for faster convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8dd174cb-3274-4e81-9aca-4fe0fd31a891", "metadata": {"aucs": [0.3297647621244594, 0.2644084038944676, 0.3050578348817391, 0.17495607419261727, 0.5304315693169683, 0.34667097654138646, 0.2568076526786829, 0.3315036337666998, 0.2559064041681621, 0.4928, 0.17059999999999997, 0.2036, 0.26780000000000004, 0.17179999999999995, 0.19389999999999996, 0.18530000000000002, 0.0847, 0.30920000000000003, 0.15896777782218474, 0.21599999999999997, 0.17069999999999996, 0.2270407053737219, 0.14890000000000003, 0.23859369674364306, 0.30433596886347447, 0.22929999999999995, 0.15535755213759472, 0.1418354120495443, 0.2691, 0.23309999999999997, 0.12227294281996437, 0.1604, 0.2341853137795169, 0.2398, 0.2025, 0.2671, 0.1846090529241846, 0.21978235166541482, 0.18067466257963494, 0.34737734996275826, 0.1719038679603877, 0.18287568403547982, 0.26513466078991865, 0.22600556428728735, 0.21728510882500962, 0.24151791480389861, 0.12370000000000003, 0.19110000000000005, 0.2136, 0.235409721235751, 0.12142046700158393, 0.2187, 0.21489999999999998, 0.2279, 0.39885473875474897, 0.23178119843101563, 0.36477291055169425, 0.18820651075918438, 0.32509999999999994, 0.20230000000000004, 0.1772136551681358, 0.26859999999999995, 0.2157, 0.14580000000000004, 0.16669999999999996, 0.1532, 0.2772, 0.19240000000000002, 0.33440000000000003, 0.24219999999999997, 0.14970000000000006, 0.15810000000000002, 0.23206376679707585, 0.21709999999999996, 0.25429999999999997, 0.20665181471506489, 0.13480000000000003, 0.20630000000000004, 0.3908035825341166, 0.22829999999999995, 0.09189999999999998, 0.2369, 0.2592, 0.19669999999999999, 0.25839999999999996, 0.2611, 0.1794, 0.21740000000000004, 0.1261, 0.21619999999999995, 0.2229, 0.19630000000000003, 0.1824, 0.29668861343576114, 0.20230000000000004, 0.07024464143303066, 0.2930017875938651, 0.11912687003511857, 0.2924, 0.20479999999999998, 0.2491, 0.2761, 0.18679999999999997, 0.10060000000000002, 0.22040000000000004, 0.19389999999999996, 0.1643, 0.16590000000000005, 0.16569999999999996, 0.22850000000000004, 0.19230000000000003, 0.21009999999999995, 0.20750000000000002, 0.2753, 0.23150000000000004, 0.1785, 0.1531, 0.27377759887674447, 0.17014929124860467, 0.32880564552761293, 0.21292492511182193, 0.25557068014165474, 0.2850924005844071, 0.3811244508887215, 0.22184925274877543, 0.2832971084882463, 0.26349999999999996, 0.15900000000000003, 0.2934, 0.2348, 0.11138933346487612, 0.1887478441659044, 0.22253413216384144, 0.3420812782294127, 0.18244883482992835, 0.39072856432832814, 0.31324012065212636, 0.28043368118954326, 0.31700099357181366, 0.4079927776043516, 0.2859980772726374, 0.3703300986297644, 0.3631067726948146, 0.3279904179328734, 0.3672954766715123, 0.2713479722793408, 0.31324648799529276, 0.475137556626118, 0.32461320569910335, 0.2629873931932061, 0.30929970543584584, 0.3448139323018158, 0.18600615551810862, 0.17326221914521922, 0.2957857315305269, 0.23295885742909184, 0.27419900454994506, 0.1856668360391157, 0.30180628429532663, 0.287915467493046, 0.2832462847712339, 0.2190386888505248, 0.3370285905708994, 0.36635138058430416, 0.3342294051628919, 0.28795084304634344, 0.25037339398863456, 0.32137930496254097, 0.2810085491133717, 0.26188881035572154, 0.3058512188443294, 0.3041353138614863, 0.11219999999999997, 0.18820000000000003, 0.2901622542639647, 0.11150000000000004, 0.3135, 0.3170195827119564, 0.18330000000000002, 0.27170000000000005, 0.29980345324908253, 0.34755187462489234, 0.23048135669845693, 0.23155400537102366, 0.16878171784201113, 0.3387671837848768, 0.38397243345640486, 0.3127675495711024, 0.46302708998892306, 0.3605623962713449, 0.2503021709392018, 0.33038676899206354, 0.3127872070931633, 0.1592457393172907, 0.1623860833428511, 0.24847037074858158, 0.29369829491228105, 0.24281758319537883, 0.3727905985376754, 0.3686871169173638, 0.3234344735859641, 0.28632305802882674, 0.33973440948470046, 0.37957195384765496, 0.3764598626872223, 0.3034223062286252, 0.3868560149036975, 0.1841973557923302, 0.22174672274486285, 0.22969246143908695, 0.20873611027647365, 0.2105811800620786, 0.23702069419342076, 0.13870074345376948, 0.18819633794439083, 0.35822899557055987]}, "mutation_prompt": null}
{"id": "8123e620-279f-4d2d-8f34-471b1c6f8358", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            futures = []\n            for _ in range(self.budget):\n                mutation_strength = np.random.uniform(0, 1)\n                candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n                futures.append(executor.submit(self.evaluate_solution, func, candidate_solution))\n            \n            for future in futures:\n                candidate_fitness = future.result()\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                \n                improvement_ratio = 1.0 - candidate_fitness / best_fitness\n                self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * improvement_ratio\n                \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Implementing dynamic mutation rates based on fitness improvement ratios to adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 20, "fitness": 0.24562232214882315, "feedback": "The algorithm DynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.08.", "error": "", "parent_id": "8dd174cb-3274-4e81-9aca-4fe0fd31a891", "metadata": {"aucs": [0.30620674252745084, 0.25801163131110283, 0.27492772679124144, 0.2168385014880876, 0.24757990108899153, 0.3043859016768772, 0.2609155559776274, 0.2803994453882951, 0.25939300383174924, 0.1834, 0.21450000000000002, 0.23299999999999998, 0.18400000000000005, 0.2126, 0.1734, 0.08779999999999999, 0.2803, 0.1784, 0.2973497660072242, 0.2521, 0.2833, 0.1352880901618515, 0.1311, 0.07294055169897817, 0.3103853838016555, 0.12890000000000001, 0.2277923864475978, 0.17417704031541303, 0.20199999999999996, 0.28469999999999995, 0.1699470090621613, 0.21419999999999995, 0.35926982523508844, 0.23370000000000002, 0.1653, 0.23939999999999995, 0.18628340830782641, 0.12859190100789586, 0.17017417571077909, 0.12894621845062215, 0.19780366794983006, 0.23384680119237533, 0.18952102180703378, 0.15191056377310141, 0.1705811323094959, 0.19758660653061444, 0.32089999999999996, 0.2086, 0.1856, 0.23878304613729695, 0.3134138521935622, 0.20089999999999997, 0.2228, 0.14129999999999998, 0.30406220916190063, 0.3253886201416949, 0.3277448836373713, 0.21329104549896294, 0.18020000000000003, 0.1592, 0.2533385335254247, 0.2359, 0.28990000000000005, 0.15669999999999995, 0.22109999999999996, 0.23140000000000005, 0.30389999999999995, 0.11650000000000005, 0.15780000000000005, 0.2278, 0.14500000000000002, 0.13339999999999996, 0.22652049376970473, 0.0988, 0.33420000000000005, 0.14341840066687528, 0.17869999999999997, 0.2551, 0.07509659586244177, 0.10240000000000005, 0.39059999999999995, 0.17279999999999995, 0.19089999999999996, 0.2521, 0.1885, 0.3628, 0.09770000000000001, 0.372, 0.21640000000000004, 0.4164, 0.3015, 0.24550000000000005, 0.2098, 0.19678218790600255, 0.20030000000000003, 0.11583018175332016, 0.2852788799655174, 0.2544444115775123, 0.20579999999999998, 0.2229, 0.1844, 0.14759999999999995, 0.24309999999999998, 0.22729999999999995, 0.09609999999999996, 0.20350000000000001, 0.15569999999999995, 0.16290000000000004, 0.2582, 0.1916, 0.16900000000000004, 0.19320000000000004, 0.17700000000000005, 0.23709999999999998, 0.27449999999999997, 0.123, 0.41759999999999997, 0.27091148419228706, 0.227164962594963, 0.27417017898884877, 0.19455505925636973, 0.23905280116069205, 0.24750880489938998, 0.25371375203808955, 0.28542258605874726, 0.38970105502566055, 0.19579999999999997, 0.20999999999999996, 0.30689999999999995, 0.14200000000000002, 0.35262188841756725, 0.24650119486130262, 0.33240443011423404, 0.37231625428017034, 0.19006876599988975, 0.25358177081173516, 0.32100920323809956, 0.30781153138156236, 0.291969925106503, 0.478175855212289, 0.25032593209007004, 0.23694871395149408, 0.26618212067090685, 0.20703954872317576, 0.33535974667051305, 0.2835544018113808, 0.23196095252108384, 0.2923609579547073, 0.28967188883172557, 0.28178346403671395, 0.4383829443315568, 0.3847200522810158, 0.22895228758354624, 0.3684309903877321, 0.30848462499207596, 0.28849139886350317, 0.3268455203293552, 0.1338182442461906, 0.2453033835803886, 0.2861504947245157, 0.22851433708709634, 0.2264555230564873, 0.30774874167593036, 0.21951661808202794, 0.33640784316474504, 0.3627985651421969, 0.29280355902670285, 0.21633367655382973, 0.3582642055529529, 0.17686001666099127, 0.48107921853347513, 0.2630650519765094, 0.16149999999999998, 0.24, 0.38782860785322637, 0.29069999999999996, 0.11970000000000003, 0.30075181790423355, 0.16059999999999997, 0.21230000000000004, 0.31719162571562576, 0.2768675279373165, 0.35558103354757464, 0.2338544132740109, 0.28129611842878055, 0.21490323842472314, 0.2723354611245411, 0.24163396260926662, 0.28154440860709684, 0.389742502599126, 0.42134826613746257, 0.12987090598564777, 0.2520030054087695, 0.2606459561366058, 0.2101426786736974, 0.24801862972557687, 0.24674358304868194, 0.23860670283213348, 0.24131826248235166, 0.3450039112207114, 0.3739479807719661, 0.31709788370056247, 0.35257728443546443, 0.3636142809983933, 0.31870715604318034, 0.40784305852200464, 0.3982575057361081, 0.25304530078489706, 0.20606269376660558, 0.167789777192066, 0.20875536791834115, 0.24756573889363143, 0.3122569154395718, 0.26136011271313275, 0.1630087493239225, 0.4500753278472398]}, "mutation_prompt": null}
{"id": "3ebda3f2-839d-47f0-8837-bfb20bdf945c", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            futures = []\n            for _ in range(self.budget):\n                mutation_strength = np.random.uniform(0, 1)\n                candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n                futures.append(executor.submit(self.evaluate_solution, func, candidate_solution))\n            \n            for future in futures:\n                candidate_fitness = future.result()\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                \n                self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * abs(best_fitness - candidate_fitness) * 0.2\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Implementing a dynamic mutation rate adaptation based on individual candidate fitness improvements to enhance convergence speed.", "configspace": "", "generation": 21, "fitness": 0.25389807918787793, "feedback": "The algorithm DynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.08.", "error": "", "parent_id": "8dd174cb-3274-4e81-9aca-4fe0fd31a891", "metadata": {"aucs": [0.308911756996853, 0.24822546852871752, 0.35558981834830605, 0.16263080019972675, 0.2741687912996932, 0.252371645597429, 0.2582137615666046, 0.46680199986662996, 0.2767700731411914, 0.0625, 0.35350000000000004, 0.15810000000000002, 0.19289999999999996, 0.14529999999999998, 0.18279999999999996, 0.2702, 0.2821, 0.2611, 0.21552339168094659, 0.13170000000000004, 0.247, 0.1963491203987684, 0.4488, 0.281406668171142, 0.15557921225271387, 0.22109999999999996, 0.2980196250729529, 0.2726393351400267, 0.11760000000000004, 0.1633, 0.13723922972759794, 0.19840000000000002, 0.24072572046994423, 0.1713, 0.23729999999999996, 0.26060000000000005, 0.28975181843186515, 0.18261950096101087, 0.22163831279701585, 0.3502546004371875, 0.25159537856303194, 0.30538608883138607, 0.1689675385782048, 0.21856002374149275, 0.2991244829775974, 0.3124185055987022, 0.18430000000000002, 0.12209999999999999, 0.25780000000000003, 0.22026632643614452, 0.18161522926168638, 0.16879999999999995, 0.32110000000000005, 0.20109999999999995, 0.34180961303568835, 0.36747441303384776, 0.3587895038181599, 0.26113257916805865, 0.3276, 0.31210000000000004, 0.32939837274520234, 0.1904, 0.16490000000000005, 0.18430000000000002, 0.14100000000000001, 0.23870000000000002, 0.27270000000000005, 0.2825, 0.13480000000000003, 0.129, 0.1703, 0.22209999999999996, 0.1999211963975589, 0.2996, 0.23719999999999997, 0.17281244510203864, 0.21319999999999995, 0.07899999999999996, 0.2980231974092623, 0.22750000000000004, 0.32320000000000004, 0.10340000000000005, 0.2107, 0.14490000000000003, 0.13139999999999996, 0.23860000000000003, 0.33709999999999996, 0.15749999999999997, 0.19020000000000004, 0.14349999999999996, 0.2419, 0.2178, 0.17479999999999996, 0.298350555397343, 0.20389999999999997, 0.18914115095934358, 0.5174040462107443, 0.17878738508226832, 0.23629999999999995, 0.16510000000000002, 0.27790000000000004, 0.24229999999999996, 0.2006, 0.25229999999999997, 0.2954, 0.08130000000000004, 0.2047, 0.24770000000000003, 0.2521, 0.2277, 0.13439999999999996, 0.261, 0.24670000000000003, 0.2582, 0.13560000000000005, 0.19920000000000004, 0.1673, 0.36323870436381434, 0.19512719158552294, 0.44772155442377926, 0.29028736987984394, 0.22136311051296487, 0.22091921052205965, 0.3697245462547175, 0.24972675748068462, 0.28276314809004033, 0.17869999999999997, 0.10029999999999994, 0.18189999999999995, 0.1975, 0.24332927965562845, 0.2840141292071565, 0.2555274399346217, 0.303135813256861, 0.188239523295622, 0.35578567502781155, 0.31017921046638175, 0.302785371891639, 0.21315280804093806, 0.39164779529229155, 0.29300458521069594, 0.3206219531805672, 0.25741413516704414, 0.2813587321261407, 0.4238206793228372, 0.29911191473719223, 0.24603080414926515, 0.3538401917027464, 0.19044507789373444, 0.3917459349700292, 0.28947292149658244, 0.26481770900947943, 0.29545541716222556, 0.28315462359485044, 0.23258006030285816, 0.2681200902651901, 0.2696027879660816, 0.17534553715925671, 0.2568547216461178, 0.2897847605010113, 0.19701946192850495, 0.21068106202214587, 0.38197756370777247, 0.24510300728847711, 0.21712176277913198, 0.43432252622911105, 0.28910670596336907, 0.26802007855084764, 0.40162689239676796, 0.2778116816674058, 0.28478635094863325, 0.5839917542433852, 0.12770000000000004, 0.07650000000000001, 0.3397213343567492, 0.2982, 0.18620000000000003, 0.3206440069955423, 0.24670000000000003, 0.1754, 0.36600834550438754, 0.27677939284169606, 0.3616197939629834, 0.3109311850306491, 0.23583336360841456, 0.33434825731243056, 0.2788665270033416, 0.203009146751861, 0.43487356450579195, 0.42127584845765254, 0.2451386980466923, 0.20843051570795956, 0.25056219470217644, 0.20219867146790982, 0.2617338632355277, 0.2567100986866231, 0.24398985646973592, 0.30229759951179036, 0.3082828470267963, 0.3483679276397019, 0.3833325580359245, 0.33269002751483034, 0.36393435592768064, 0.33475682407738694, 0.35300857161371946, 0.3609010431786336, 0.3404426904290564, 0.28968123515292266, 0.19076929824765299, 0.29977304362700474, 0.19079213188095445, 0.2440585814802927, 0.2971533364091866, 0.15646203888604016, 0.21698533269003184, 0.23489218869798667]}, "mutation_prompt": null}
{"id": "b6698bb5-2e92-4db5-a506-950177c89a8e", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            futures = []\n            for _ in range(self.budget):\n                mutation_strength = np.random.uniform(0, 1)\n                candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n                futures.append(executor.submit(self.evaluate_solution, func, candidate_solution))\n            \n            for future in futures:\n                candidate_fitness = future.result()\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                \n                self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * abs(best_fitness - candidate_fitness) * 0.2\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Implementing a dynamic mutation rate adaptation based on individual candidate fitness improvements to enhance convergence speed.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebda3f2-839d-47f0-8837-bfb20bdf945c", "metadata": {"aucs": [0.308911756996853, 0.24822546852871752, 0.35558981834830605, 0.16263080019972675, 0.2741687912996932, 0.252371645597429, 0.2582137615666046, 0.46680199986662996, 0.2767700731411914, 0.0625, 0.35350000000000004, 0.15810000000000002, 0.19289999999999996, 0.14529999999999998, 0.18279999999999996, 0.2702, 0.2821, 0.2611, 0.21552339168094659, 0.13170000000000004, 0.247, 0.1963491203987684, 0.4488, 0.281406668171142, 0.15557921225271387, 0.22109999999999996, 0.2980196250729529, 0.2726393351400267, 0.11760000000000004, 0.1633, 0.13723922972759794, 0.19840000000000002, 0.24072572046994423, 0.1713, 0.23729999999999996, 0.26060000000000005, 0.28975181843186515, 0.18261950096101087, 0.22163831279701585, 0.3502546004371875, 0.25159537856303194, 0.30538608883138607, 0.1689675385782048, 0.21856002374149275, 0.2991244829775974, 0.3124185055987022, 0.18430000000000002, 0.12209999999999999, 0.25780000000000003, 0.22026632643614452, 0.18161522926168638, 0.16879999999999995, 0.32110000000000005, 0.20109999999999995, 0.34180961303568835, 0.36747441303384776, 0.3587895038181599, 0.26113257916805865, 0.3276, 0.31210000000000004, 0.32939837274520234, 0.1904, 0.16490000000000005, 0.18430000000000002, 0.14100000000000001, 0.23870000000000002, 0.27270000000000005, 0.2825, 0.13480000000000003, 0.129, 0.1703, 0.22209999999999996, 0.1999211963975589, 0.2996, 0.23719999999999997, 0.17281244510203864, 0.21319999999999995, 0.07899999999999996, 0.2980231974092623, 0.22750000000000004, 0.32320000000000004, 0.10340000000000005, 0.2107, 0.14490000000000003, 0.13139999999999996, 0.23860000000000003, 0.33709999999999996, 0.15749999999999997, 0.19020000000000004, 0.14349999999999996, 0.2419, 0.2178, 0.17479999999999996, 0.298350555397343, 0.20389999999999997, 0.18914115095934358, 0.5174040462107443, 0.17878738508226832, 0.23629999999999995, 0.16510000000000002, 0.27790000000000004, 0.24229999999999996, 0.2006, 0.25229999999999997, 0.2954, 0.08130000000000004, 0.2047, 0.24770000000000003, 0.2521, 0.2277, 0.13439999999999996, 0.261, 0.24670000000000003, 0.2582, 0.13560000000000005, 0.19920000000000004, 0.1673, 0.36323870436381434, 0.19512719158552294, 0.44772155442377926, 0.29028736987984394, 0.22136311051296487, 0.22091921052205965, 0.3697245462547175, 0.24972675748068462, 0.28276314809004033, 0.17869999999999997, 0.10029999999999994, 0.18189999999999995, 0.1975, 0.24332927965562845, 0.2840141292071565, 0.2555274399346217, 0.303135813256861, 0.188239523295622, 0.35578567502781155, 0.31017921046638175, 0.302785371891639, 0.21315280804093806, 0.39164779529229155, 0.29300458521069594, 0.3206219531805672, 0.25741413516704414, 0.2813587321261407, 0.4238206793228372, 0.29911191473719223, 0.24603080414926515, 0.3538401917027464, 0.19044507789373444, 0.3917459349700292, 0.28947292149658244, 0.26481770900947943, 0.29545541716222556, 0.28315462359485044, 0.23258006030285816, 0.2681200902651901, 0.2696027879660816, 0.17534553715925671, 0.2568547216461178, 0.2897847605010113, 0.19701946192850495, 0.21068106202214587, 0.38197756370777247, 0.24510300728847711, 0.21712176277913198, 0.43432252622911105, 0.28910670596336907, 0.26802007855084764, 0.40162689239676796, 0.2778116816674058, 0.28478635094863325, 0.5839917542433852, 0.12770000000000004, 0.07650000000000001, 0.3397213343567492, 0.2982, 0.18620000000000003, 0.3206440069955423, 0.24670000000000003, 0.1754, 0.36600834550438754, 0.27677939284169606, 0.3616197939629834, 0.3109311850306491, 0.23583336360841456, 0.33434825731243056, 0.2788665270033416, 0.203009146751861, 0.43487356450579195, 0.42127584845765254, 0.2451386980466923, 0.20843051570795956, 0.25056219470217644, 0.20219867146790982, 0.2617338632355277, 0.2567100986866231, 0.24398985646973592, 0.30229759951179036, 0.3082828470267963, 0.3483679276397019, 0.3833325580359245, 0.33269002751483034, 0.36393435592768064, 0.33475682407738694, 0.35300857161371946, 0.3609010431786336, 0.3404426904290564, 0.28968123515292266, 0.19076929824765299, 0.29977304362700474, 0.19079213188095445, 0.2440585814802927, 0.2971533364091866, 0.15646203888604016, 0.21698533269003184, 0.23489218869798667]}, "mutation_prompt": null}
{"id": "ce06d9c7-e143-4fae-b70d-277402a849ec", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        with ThreadPoolExecutor() as executor:\n            futures = []\n            for _ in range(self.budget):\n                mutation_strength = np.random.uniform(0, 1)\n                candidate_solution = best_solution + mutation_strength * np.random.standard_normal(self.dim)\n                futures.append(executor.submit(self.evaluate_solution, func, candidate_solution))\n            \n            for future in futures:\n                candidate_fitness = future.result()\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                \n                self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * abs(best_fitness - candidate_fitness) * 0.2\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Implementing a dynamic mutation rate adaptation based on individual candidate fitness improvements to enhance convergence speed.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebda3f2-839d-47f0-8837-bfb20bdf945c", "metadata": {"aucs": [0.308911756996853, 0.24822546852871752, 0.35558981834830605, 0.16263080019972675, 0.2741687912996932, 0.252371645597429, 0.2582137615666046, 0.46680199986662996, 0.2767700731411914, 0.0625, 0.35350000000000004, 0.15810000000000002, 0.19289999999999996, 0.14529999999999998, 0.18279999999999996, 0.2702, 0.2821, 0.2611, 0.21552339168094659, 0.13170000000000004, 0.247, 0.1963491203987684, 0.4488, 0.281406668171142, 0.15557921225271387, 0.22109999999999996, 0.2980196250729529, 0.2726393351400267, 0.11760000000000004, 0.1633, 0.13723922972759794, 0.19840000000000002, 0.24072572046994423, 0.1713, 0.23729999999999996, 0.26060000000000005, 0.28975181843186515, 0.18261950096101087, 0.22163831279701585, 0.3502546004371875, 0.25159537856303194, 0.30538608883138607, 0.1689675385782048, 0.21856002374149275, 0.2991244829775974, 0.3124185055987022, 0.18430000000000002, 0.12209999999999999, 0.25780000000000003, 0.22026632643614452, 0.18161522926168638, 0.16879999999999995, 0.32110000000000005, 0.20109999999999995, 0.34180961303568835, 0.36747441303384776, 0.3587895038181599, 0.26113257916805865, 0.3276, 0.31210000000000004, 0.32939837274520234, 0.1904, 0.16490000000000005, 0.18430000000000002, 0.14100000000000001, 0.23870000000000002, 0.27270000000000005, 0.2825, 0.13480000000000003, 0.129, 0.1703, 0.22209999999999996, 0.1999211963975589, 0.2996, 0.23719999999999997, 0.17281244510203864, 0.21319999999999995, 0.07899999999999996, 0.2980231974092623, 0.22750000000000004, 0.32320000000000004, 0.10340000000000005, 0.2107, 0.14490000000000003, 0.13139999999999996, 0.23860000000000003, 0.33709999999999996, 0.15749999999999997, 0.19020000000000004, 0.14349999999999996, 0.2419, 0.2178, 0.17479999999999996, 0.298350555397343, 0.20389999999999997, 0.18914115095934358, 0.5174040462107443, 0.17878738508226832, 0.23629999999999995, 0.16510000000000002, 0.27790000000000004, 0.24229999999999996, 0.2006, 0.25229999999999997, 0.2954, 0.08130000000000004, 0.2047, 0.24770000000000003, 0.2521, 0.2277, 0.13439999999999996, 0.261, 0.24670000000000003, 0.2582, 0.13560000000000005, 0.19920000000000004, 0.1673, 0.36323870436381434, 0.19512719158552294, 0.44772155442377926, 0.29028736987984394, 0.22136311051296487, 0.22091921052205965, 0.3697245462547175, 0.24972675748068462, 0.28276314809004033, 0.17869999999999997, 0.10029999999999994, 0.18189999999999995, 0.1975, 0.24332927965562845, 0.2840141292071565, 0.2555274399346217, 0.303135813256861, 0.188239523295622, 0.35578567502781155, 0.31017921046638175, 0.302785371891639, 0.21315280804093806, 0.39164779529229155, 0.29300458521069594, 0.3206219531805672, 0.25741413516704414, 0.2813587321261407, 0.4238206793228372, 0.29911191473719223, 0.24603080414926515, 0.3538401917027464, 0.19044507789373444, 0.3917459349700292, 0.28947292149658244, 0.26481770900947943, 0.29545541716222556, 0.28315462359485044, 0.23258006030285816, 0.2681200902651901, 0.2696027879660816, 0.17534553715925671, 0.2568547216461178, 0.2897847605010113, 0.19701946192850495, 0.21068106202214587, 0.38197756370777247, 0.24510300728847711, 0.21712176277913198, 0.43432252622911105, 0.28910670596336907, 0.26802007855084764, 0.40162689239676796, 0.2778116816674058, 0.28478635094863325, 0.5839917542433852, 0.12770000000000004, 0.07650000000000001, 0.3397213343567492, 0.2982, 0.18620000000000003, 0.3206440069955423, 0.24670000000000003, 0.1754, 0.36600834550438754, 0.27677939284169606, 0.3616197939629834, 0.3109311850306491, 0.23583336360841456, 0.33434825731243056, 0.2788665270033416, 0.203009146751861, 0.43487356450579195, 0.42127584845765254, 0.2451386980466923, 0.20843051570795956, 0.25056219470217644, 0.20219867146790982, 0.2617338632355277, 0.2567100986866231, 0.24398985646973592, 0.30229759951179036, 0.3082828470267963, 0.3483679276397019, 0.3833325580359245, 0.33269002751483034, 0.36393435592768064, 0.33475682407738694, 0.35300857161371946, 0.3609010431786336, 0.3404426904290564, 0.28968123515292266, 0.19076929824765299, 0.29977304362700474, 0.19079213188095445, 0.2440585814802927, 0.2971533364091866, 0.15646203888604016, 0.21698533269003184, 0.23489218869798667]}, "mutation_prompt": null}
