{"id": "90fd71d5-ae76-48d2-8859-d011ea19e463", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "b0a30e61-f7f3-4949-ba80-ff721630ba09", "solution": "import numpy as np\n\nclass DynamicMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity):\n        mutant = target + self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n\n        return best_solution", "name": "DynamicMutationDE", "description": "Introducing dynamic mutation scaling based on population diversity to enhance exploration-exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.047581627679945386, "feedback": "The algorithm DynamicMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "90fd71d5-ae76-48d2-8859-d011ea19e463", "metadata": {"aucs": [0.1378254049550134, 0.1186129282636299, 0.12619952477452168, 0.04191814024644258, 0.05267361210777377, 0.03172640863222165, 0.08452893416277552, 0.09086408629154652, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009845481902008069, 0.01514726702948499, 0.002597154428753634, 0.03317834189644453, 0.0012186513362246743, 0.008815827551844069, 0.018248263482334326, 0.0024754393309194267, 0.0004318725305847426, 0.009006102909208669, 0.00033611513974096674, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.0628185845135033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019844823724836758, 0.016629263459098764, 9.999999999998899e-05, 0.03020038573267081, 9.999999999998899e-05, 0.10027683525177622, 0.07433174084768979, 0.07357253947488263, 0.08185607939508377, 9.999999999998899e-05, 9.999999999998899e-05, 0.050301005943791055, 0.02629493474873179, 0.06299246934618075, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10772739595271907, 0.1070271971752389, 0.15207760264968861, 0.09425923977458062, 0.134452046042011, 0.09580441870675127, 0.13379884881240545, 0.19974180587490264, 0.17072299939936697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.043348862856776416, 0.023601303846657706, 0.0057506401959023234, 0.03688160279028685, 0.0267656688986897, 0.0864482631040846, 0.06790512071495725, 0.09829237211542075, 0.09855305120349966, 0.0744986699784278, 0.05643121168494414, 0.07993184405440446, 0.08883406692247264, 0.09642568619380454, 0.11187761388680628, 0.14657224040172023, 0.11789236939276182, 0.12594854737776806, 0.13945031538074504, 0.10931360154226732, 0.11670623956185933, 0.10935778257661899, 0.09491144765630011, 0.044974416089556324, 0.061826281788625925, 0.05960290517331446, 0.06350474919000049, 0.0821039002579288, 0.06183595932470343, 0.05648699256316181, 0.05566036474503, 0.06722451324818557, 0.20121347053010297, 0.14628629928350312, 0.1591582126966341, 0.15500247290670544, 0.16762240353309443, 0.13655185983781415, 0.15033379359567023, 0.15356589891118566, 0.1974429145401928, 9.999999999998899e-05, 0.1542770864594757, 9.999999999998899e-05, 9.999999999998899e-05, 0.1253349722162882, 0.13572537697661224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07424430231903256, 0.07617655279009472, 0.05949314884482626, 0.1063586073287699, 0.1207914665021157, 0.061750941843425444, 0.06088618922663591, 0.056615725614002965, 0.06473328794741284, 0.08633588644812318, 0.03967402848431323, 0.07671075577604702, 0.03408051379423227, 0.03306728927269087, 0.045511073114331335, 0.05562790249413152, 0.04143697365387322, 0.04143420019681854, 0.14580249235578902, 0.1501846227125636, 0.14763022729669195, 0.1653514604717382, 0.13606402780823135, 0.17638187195827904, 0.1497835797253969, 0.14096958325760078, 0.14689007985489466, 0.033038792315641885, 0.039297296173878005, 0.0498757547126919, 0.03366296568965732, 0.043361006019767, 0.06220586237867343, 0.031123313818270826, 0.034197859741722625, 0.03737161308555337]}, "mutation_prompt": null}
{"id": "5f5b5f42-5ee8-46cd-9ddf-75df13456cfd", "solution": "import numpy as np\n\nclass DynamicMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity):\n        mutant = target + self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n\n        return best_solution", "name": "DynamicMutationDE", "description": "Introducing dynamic mutation scaling based on population diversity to enhance exploration-exploitation balance.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0a30e61-f7f3-4949-ba80-ff721630ba09", "metadata": {"aucs": [0.1378254049550134, 0.1186129282636299, 0.12619952477452168, 0.04191814024644258, 0.05267361210777377, 0.03172640863222165, 0.08452893416277552, 0.09086408629154652, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009845481902008069, 0.01514726702948499, 0.002597154428753634, 0.03317834189644453, 0.0012186513362246743, 0.008815827551844069, 0.018248263482334326, 0.0024754393309194267, 0.0004318725305847426, 0.009006102909208669, 0.00033611513974096674, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.0628185845135033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019844823724836758, 0.016629263459098764, 9.999999999998899e-05, 0.03020038573267081, 9.999999999998899e-05, 0.10027683525177622, 0.07433174084768979, 0.07357253947488263, 0.08185607939508377, 9.999999999998899e-05, 9.999999999998899e-05, 0.050301005943791055, 0.02629493474873179, 0.06299246934618075, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10772739595271907, 0.1070271971752389, 0.15207760264968861, 0.09425923977458062, 0.134452046042011, 0.09580441870675127, 0.13379884881240545, 0.19974180587490264, 0.17072299939936697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.043348862856776416, 0.023601303846657706, 0.0057506401959023234, 0.03688160279028685, 0.0267656688986897, 0.0864482631040846, 0.06790512071495725, 0.09829237211542075, 0.09855305120349966, 0.0744986699784278, 0.05643121168494414, 0.07993184405440446, 0.08883406692247264, 0.09642568619380454, 0.11187761388680628, 0.14657224040172023, 0.11789236939276182, 0.12594854737776806, 0.13945031538074504, 0.10931360154226732, 0.11670623956185933, 0.10935778257661899, 0.09491144765630011, 0.044974416089556324, 0.061826281788625925, 0.05960290517331446, 0.06350474919000049, 0.0821039002579288, 0.06183595932470343, 0.05648699256316181, 0.05566036474503, 0.06722451324818557, 0.20121347053010297, 0.14628629928350312, 0.1591582126966341, 0.15500247290670544, 0.16762240353309443, 0.13655185983781415, 0.15033379359567023, 0.15356589891118566, 0.1974429145401928, 9.999999999998899e-05, 0.1542770864594757, 9.999999999998899e-05, 9.999999999998899e-05, 0.1253349722162882, 0.13572537697661224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07424430231903256, 0.07617655279009472, 0.05949314884482626, 0.1063586073287699, 0.1207914665021157, 0.061750941843425444, 0.06088618922663591, 0.056615725614002965, 0.06473328794741284, 0.08633588644812318, 0.03967402848431323, 0.07671075577604702, 0.03408051379423227, 0.03306728927269087, 0.045511073114331335, 0.05562790249413152, 0.04143697365387322, 0.04143420019681854, 0.14580249235578902, 0.1501846227125636, 0.14763022729669195, 0.1653514604717382, 0.13606402780823135, 0.17638187195827904, 0.1497835797253969, 0.14096958325760078, 0.14689007985489466, 0.033038792315641885, 0.039297296173878005, 0.0498757547126919, 0.03366296568965732, 0.043361006019767, 0.06220586237867343, 0.031123313818270826, 0.034197859741722625, 0.03737161308555337]}, "mutation_prompt": null}
{"id": "ddd7bb64-d91e-4857-9115-9722424acdc2", "solution": "import numpy as np\n\nclass DynamicMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity):\n        mutant = target + self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n\n        return best_solution", "name": "DynamicMutationDE", "description": "Introducing dynamic mutation scaling based on population diversity to enhance exploration-exploitation balance.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b0a30e61-f7f3-4949-ba80-ff721630ba09", "metadata": {"aucs": [0.1378254049550134, 0.1186129282636299, 0.12619952477452168, 0.04191814024644258, 0.05267361210777377, 0.03172640863222165, 0.08452893416277552, 0.09086408629154652, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009845481902008069, 0.01514726702948499, 0.002597154428753634, 0.03317834189644453, 0.0012186513362246743, 0.008815827551844069, 0.018248263482334326, 0.0024754393309194267, 0.0004318725305847426, 0.009006102909208669, 0.00033611513974096674, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.0628185845135033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019844823724836758, 0.016629263459098764, 9.999999999998899e-05, 0.03020038573267081, 9.999999999998899e-05, 0.10027683525177622, 0.07433174084768979, 0.07357253947488263, 0.08185607939508377, 9.999999999998899e-05, 9.999999999998899e-05, 0.050301005943791055, 0.02629493474873179, 0.06299246934618075, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10772739595271907, 0.1070271971752389, 0.15207760264968861, 0.09425923977458062, 0.134452046042011, 0.09580441870675127, 0.13379884881240545, 0.19974180587490264, 0.17072299939936697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.043348862856776416, 0.023601303846657706, 0.0057506401959023234, 0.03688160279028685, 0.0267656688986897, 0.0864482631040846, 0.06790512071495725, 0.09829237211542075, 0.09855305120349966, 0.0744986699784278, 0.05643121168494414, 0.07993184405440446, 0.08883406692247264, 0.09642568619380454, 0.11187761388680628, 0.14657224040172023, 0.11789236939276182, 0.12594854737776806, 0.13945031538074504, 0.10931360154226732, 0.11670623956185933, 0.10935778257661899, 0.09491144765630011, 0.044974416089556324, 0.061826281788625925, 0.05960290517331446, 0.06350474919000049, 0.0821039002579288, 0.06183595932470343, 0.05648699256316181, 0.05566036474503, 0.06722451324818557, 0.20121347053010297, 0.14628629928350312, 0.1591582126966341, 0.15500247290670544, 0.16762240353309443, 0.13655185983781415, 0.15033379359567023, 0.15356589891118566, 0.1974429145401928, 9.999999999998899e-05, 0.1542770864594757, 9.999999999998899e-05, 9.999999999998899e-05, 0.1253349722162882, 0.13572537697661224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07424430231903256, 0.07617655279009472, 0.05949314884482626, 0.1063586073287699, 0.1207914665021157, 0.061750941843425444, 0.06088618922663591, 0.056615725614002965, 0.06473328794741284, 0.08633588644812318, 0.03967402848431323, 0.07671075577604702, 0.03408051379423227, 0.03306728927269087, 0.045511073114331335, 0.05562790249413152, 0.04143697365387322, 0.04143420019681854, 0.14580249235578902, 0.1501846227125636, 0.14763022729669195, 0.1653514604717382, 0.13606402780823135, 0.17638187195827904, 0.1497835797253969, 0.14096958325760078, 0.14689007985489466, 0.033038792315641885, 0.039297296173878005, 0.0498757547126919, 0.03366296568965732, 0.043361006019767, 0.06220586237867343, 0.031123313818270826, 0.034197859741722625, 0.03737161308555337]}, "mutation_prompt": null}
{"id": "6113fc5b-c7cd-4d31-b4d9-ddc42007bee8", "solution": "import numpy as np\n\nclass DynamicRadiusDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        mutant = target + self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "DynamicRadiusDE", "description": "Implement a dynamic search radius adaptation mechanism based on the individual's fitness to adjust exploration-exploitation balance and enhance convergence speed.", "configspace": "", "generation": 4, "fitness": 0.048900980724347266, "feedback": "The algorithm DynamicRadiusDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "b0a30e61-f7f3-4949-ba80-ff721630ba09", "metadata": {"aucs": [0.13764082914941023, 0.11855856733970593, 0.1261556435172212, 0.041895774519745244, 0.05267361210777377, 0.03171996254057119, 0.05278796608404879, 0.07266380244540793, 0.07088441531140921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003530957436574944, 0.02098271968899712, 0.027604754350948668, 0.032997849716157934, 0.0012186513362246743, 0.008807096882153531, 0.018248263482334326, 0.0024730605613109136, 0.00043154009291013207, 0.02775419441317084, 0.00817066255321075, 0.005135846384825116, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06262972999825633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019775659990276084, 0.016612712679626163, 9.999999999998899e-05, 0.030181446483909857, 9.999999999998899e-05, 0.10027683525177622, 0.07426011452421954, 0.07345677121187477, 0.0817786926696592, 9.999999999998899e-05, 9.999999999998899e-05, 0.050272138966801494, 0.026268689948863222, 0.0629393109210663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10769267883054434, 0.1070271971752389, 0.15397364944933212, 0.09660155987363961, 0.12202769434178462, 0.09580441870675127, 0.13377930628541868, 0.1995604135441177, 0.1706633250274654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.04324586072504977, 0.02359529165361096, 0.005727923448983541, 0.03684476962105965, 0.0267656688986897, 0.08641604979121165, 0.06790402148455033, 0.09803733596698605, 0.09855305120349966, 0.13411622811074064, 0.0904705154911637, 0.07985671602602074, 0.08868938365866053, 0.09631383595682241, 0.1280600346600944, 0.14647643228139173, 0.12706023319721027, 0.1259310389782815, 0.1393663271734613, 0.1092619010979603, 0.1166936494348394, 0.10934854724534215, 0.09489436257221151, 0.044946148579736445, 0.061770934955190704, 0.05955286879458288, 0.06345088455636927, 0.08198466818811412, 0.061793002292427235, 0.05648699256316181, 0.05562250489954035, 0.06716908785801756, 0.2034357023621597, 0.18711421747611878, 0.19036481070094435, 0.15486741401750992, 0.1672896670467584, 0.13643415195467767, 0.15021649264070636, 0.1532270204061189, 0.1968392239852279, 9.999999999998899e-05, 0.15396789747630268, 9.999999999998899e-05, 9.999999999998899e-05, 0.12508392486294284, 0.13545341913226405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0742138677821158, 0.07615649343467246, 0.0594866682577303, 0.10628979513122216, 0.1207914665021157, 0.061750941843425444, 0.0648823304878231, 0.057489208179688056, 0.08557352381484784, 0.09606292251121684, 0.04879866263397015, 0.07626076595616138, 0.03403738351262797, 0.03304618769385037, 0.045511073114331335, 0.055574119572521674, 0.04136664280517721, 0.04143420019681854, 0.14550588977491807, 0.15010129038303532, 0.14763022729669195, 0.1651944458176724, 0.1359290006306686, 0.17574546561802107, 0.15957901781515715, 0.1849526887037809, 0.14996356908125674, 0.03300580091227856, 0.03922928016934435, 0.049839231956823826, 0.03362934220168934, 0.04323912900978555, 0.06205770863832405, 0.031045632076001528, 0.03402495466068778, 0.03728640304666664]}, "mutation_prompt": null}
{"id": "eede4ab5-789e-413f-a564-ddc0b7856d3d", "solution": "import numpy as np\n\nclass AdaptiveMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        mutant = target + self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        if np.random.rand() < 0.5:  # Introduce adaptive mutation strategy\n            return target + scale_factor * radius * (mutant - target)\n        else:\n            return target + scale_factor * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "AdaptiveMutationDE", "description": "Introducing adaptive mutation strategy based on individual fitness to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 5, "fitness": 0.04825516808835872, "feedback": "The algorithm AdaptiveMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "6113fc5b-c7cd-4d31-b4d9-ddc42007bee8", "metadata": {"aucs": [0.1325769528317029, 0.10234583590711333, 0.1029509743522854, 0.041897157132590346, 0.05267361210777377, 0.027380933612170755, 0.07614483945664852, 0.11677628939160023, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 0.02327430901753902, 0.0012186513362246743, 0.001759534876926927, 0.018248263482334326, 0.00410937016524604, 9.999999999998899e-05, 9.999999999998899e-05, 0.013616540001015753, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.041161596834058733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.10603436340087591, 0.08226143392124319, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.04547787399724634, 0.005444892399834367, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02172256479064727, 0.02228370863778706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003151535391152205, 9.999999999998899e-05, 9.999999999998899e-05, 0.010659022649016858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10060973914174265, 0.01355847273391353, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018385646599126115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10456486322449021, 0.11439972270054077, 0.15557665611903027, 0.09425923977458062, 0.095909400022268, 0.09580441870675127, 0.15233399305082562, 0.16091567624979142, 0.1210557193025883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.018774677379744364, 0.01759993274736349, 0.004440212828880963, 0.013728787535498332, 0.0267656688986897, 0.09262791930279257, 0.07315894540049683, 0.05900135730393974, 0.09855305120349966, 0.0870608370792153, 0.06810349511707825, 0.09552252062773314, 0.0686863029795266, 0.1044900254319433, 0.12059825108913447, 0.1276123755244828, 0.10769765616488836, 0.12477917271339789, 0.15642057750676885, 0.12995358717449357, 0.12996458769559727, 0.12060838895302639, 0.11659449095447838, 0.056630155330027576, 0.05596227059923442, 0.04020130366124486, 0.07095054233513287, 0.08796544422972019, 0.08352200306125324, 0.05648699256316181, 0.04798476730567325, 0.0491210353114413, 0.15502427438527633, 0.1677348279317128, 0.1471976874196549, 0.21340157380714708, 0.1872439034394212, 0.182165606167623, 0.13051973435439546, 0.17667927939387118, 0.1605490072854049, 9.999999999998899e-05, 0.13227752125488934, 9.999999999998899e-05, 0.13003491220778773, 0.14633812086214182, 0.1360817233436734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08088298929988091, 0.12180979059033703, 0.0759569110963737, 0.1188292189402329, 0.1207914665021157, 0.06301053304408855, 0.06088618922663591, 0.0757468316412152, 0.08379883553861167, 0.08962108752166897, 0.044520274860111564, 0.08955558367601901, 0.022391764738164288, 0.04715876697903476, 0.04853150227041625, 0.02841367705351261, 0.07154335757742791, 0.04246881679883918, 0.1526735524133792, 0.15151050248735665, 0.14763022729669195, 0.14262812300685201, 0.13711869627773798, 0.12982078546363773, 0.152875870265617, 0.15701273690141804, 0.14853750805966814, 0.0371349798775642, 0.061814362339797535, 0.05350828172872424, 0.02467586399701449, 0.034689987349589835, 0.05792529608730035, 0.04557292591465134, 0.03735367160651981, 0.0354787793860889]}, "mutation_prompt": null}
{"id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "solution": "import numpy as np\n\nclass AdaptiveStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "AdaptiveStepSizeDE", "description": "Introducing an adaptive mutation step size based on the population diversity to dynamically adjust the exploration extent and potentially accelerate convergence speed.", "configspace": "", "generation": 6, "fitness": 0.04903746671408268, "feedback": "The algorithm AdaptiveStepSizeDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "6113fc5b-c7cd-4d31-b4d9-ddc42007bee8", "metadata": {"aucs": [0.13764082914941023, 0.11855856733970593, 0.1261556435172212, 0.041895774519745244, 0.05267361210777377, 0.03171996254057119, 0.05278796608404879, 0.07266380244540793, 0.07088441531140921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003530957436574944, 0.02098271968899712, 0.027604754350948668, 0.032997849716157934, 0.0012186513362246743, 0.008807096882153531, 0.018248263482334326, 0.0024730605613109136, 0.00043154009291013207, 0.02775419441317084, 0.00817066255321075, 0.005135846384825116, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06262972999825633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019775659990276084, 0.016612712679626163, 9.999999999998899e-05, 0.030181446483909857, 9.999999999998899e-05, 0.10027683525177622, 0.07426011452421954, 0.07345677121187477, 0.0817786926696592, 9.999999999998899e-05, 9.999999999998899e-05, 0.050272138966801494, 0.026268689948863222, 0.0629393109210663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10769267883054434, 0.1070271971752389, 0.15397364944933212, 0.09660155987363961, 0.12202769434178462, 0.09580441870675127, 0.13377930628541868, 0.1995604135441177, 0.1706633250274654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.04324586072504977, 0.02359529165361096, 0.005727923448983541, 0.03684476962105965, 0.0267656688986897, 0.08641604979121165, 0.06790402148455033, 0.09803733596698605, 0.09855305120349966, 0.13411622811074064, 0.0904705154911637, 0.07985671602602074, 0.08868938365866053, 0.09631383595682241, 0.1280600346600944, 0.14647643228139173, 0.12706023319721027, 0.1259310389782815, 0.1393663271734613, 0.1092619010979603, 0.1166936494348394, 0.10934854724534215, 0.09489436257221151, 0.044946148579736445, 0.061770934955190704, 0.05955286879458288, 0.06345088455636927, 0.08198466818811412, 0.061793002292427235, 0.05648699256316181, 0.05562250489954035, 0.06716908785801756, 0.2034357023621597, 0.19387751714740986, 0.19036481070094435, 0.15486741401750992, 0.1672896670467584, 0.13643415195467767, 0.15021649264070636, 0.1532270204061189, 0.1968392239852279, 9.999999999998899e-05, 0.15396789747630268, 9.999999999998899e-05, 9.999999999998899e-05, 0.12508392486294284, 0.13545341913226405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0742138677821158, 0.07615649343467246, 0.0594866682577303, 0.10628979513122216, 0.1207914665021157, 0.061750941843425444, 0.0648823304878231, 0.057489208179688056, 0.08557352381484784, 0.09596649237309396, 0.04879866263397015, 0.07626076595616138, 0.03403738351262797, 0.03304618769385037, 0.045511073114331335, 0.055574119572521674, 0.04136664280517721, 0.04143420019681854, 0.14550588977491807, 0.15010129038303532, 0.14763022729669195, 0.1651944458176724, 0.1359290006306686, 0.17574546561802107, 0.16827691043697102, 0.1849526887037809, 0.1640797807091232, 0.03300580091227856, 0.03922928016934435, 0.049839231956823826, 0.03362934220168934, 0.04323912900978555, 0.06205770863832405, 0.031045632076001528, 0.03402495466068778, 0.03728640304666664]}, "mutation_prompt": null}
{"id": "0c60a791-9dd2-4726-9344-62ea300182bb", "solution": "import numpy as np\n\nclass EnhancedStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness, best_fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0) * np.exp(-0.5 * (np.max(best_fitness) - np.min(best_fitness)))\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n        best_fitness = [min(fitness)]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness, best_fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n            best_fitness.append(min(fitness))\n\n        return best_solution", "name": "EnhancedStepSizeDE", "description": "Enhancing the exploration-exploitation balance by dynamically adjusting the mutation step size based on the best fitness improvement.", "configspace": "", "generation": 7, "fitness": 0.04328771883187374, "feedback": "The algorithm EnhancedStepSizeDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {"aucs": [0.11130957941401753, 0.11855856733970593, 0.13340177330197822, 0.041895774519745244, 0.05267361210777377, 0.031727209937366885, 0.052391154520897154, 0.06323489996059473, 0.07036226043515326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 0.01819109670113561, 0.003396038716800831, 0.008807096882153531, 0.018248263482334326, 0.0024730679307040093, 0.0015345250737452965, 0.008997180746406541, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.016612712679626163, 9.999999999998899e-05, 0.030186226932900184, 9.999999999998899e-05, 0.10027683525177622, 0.06231086704458155, 0.03274184261632418, 0.0817786926696592, 9.999999999998899e-05, 9.999999999998899e-05, 0.04547787399724634, 0.026268689948863222, 0.0629393109210663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1026229257209168, 0.11398040164674161, 0.15352904669396217, 0.09661074175048057, 0.11013304610936447, 0.09580441870675127, 0.1343667865594833, 0.19094669937990638, 0.1807170910524699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.002075134957283842, 0.02487678752858824, 0.004309093184862278, 0.03684476962105965, 0.0267656688986897, 0.07037543064596374, 0.06735693451091307, 0.09056710716732452, 0.09855305120349966, 0.06581597144687368, 0.06778238989989482, 0.060261725692258405, 0.0848778097052626, 0.07726393575557644, 0.1289933627290475, 0.1289614951709369, 0.12924638725198334, 0.1262371668090294, 0.16333404353984227, 0.1337683085316823, 0.12921686172910085, 0.12484037697888362, 0.10766327444377422, 0.054372153174182536, 0.0542407591673254, 0.03883057890094388, 0.06271785040581257, 0.06435950692720727, 0.06207765542870225, 0.05648699256316181, 0.06436908120618678, 0.06716908798131249, 0.13998198017494323, 0.08398926849344313, 0.1679972005341155, 0.2021588868493822, 0.1510536749505269, 0.16670648957129597, 0.19117368897321108, 0.13794247413712324, 0.1761059359765843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0742138677821158, 0.08559094593151717, 0.0594866682577303, 0.10376394831558933, 0.1207914665021157, 0.061750941843425444, 0.0648823304878231, 0.057489208179688056, 0.08002028284380303, 0.039218928836011635, 0.05001049680462388, 0.024845607833678174, 0.022957923727247143, 0.02349121394238396, 0.045511073114331335, 0.03861436877203883, 0.02976304972293653, 0.04143420019681854, 0.15356295788477603, 0.16697805828196255, 0.1613786580201504, 0.20805566357505623, 0.12718841096343458, 0.13541705987100228, 0.16223950174723234, 0.160094814667872, 0.16190639880522562, 0.03300580094969807, 0.01854742827661282, 0.04090677118884467, 0.03362934220168934, 0.02670813305226516, 0.023610016630280395, 0.021894047474093736, 0.011265907831099153, 0.01742317871455068]}, "mutation_prompt": null}
{"id": "bbfdbdf9-8d3c-4d5c-894a-0aa915430d62", "solution": "import numpy as np\n\nclass AdaptiveStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "AdaptiveStepSizeDE", "description": "Introducing an adaptive mutation step size based on the population diversity to dynamically adjust the exploration extent and potentially accelerate convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {"aucs": [0.13764082914941023, 0.11855856733970593, 0.1261556435172212, 0.041895774519745244, 0.05267361210777377, 0.03171996254057119, 0.05278796608404879, 0.07266380244540793, 0.07088441531140921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003530957436574944, 0.02098271968899712, 0.027604754350948668, 0.032997849716157934, 0.0012186513362246743, 0.008807096882153531, 0.018248263482334326, 0.0024730605613109136, 0.00043154009291013207, 0.02775419441317084, 0.00817066255321075, 0.005135846384825116, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06262972999825633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019775659990276084, 0.016612712679626163, 9.999999999998899e-05, 0.030181446483909857, 9.999999999998899e-05, 0.10027683525177622, 0.07426011452421954, 0.07345677121187477, 0.0817786926696592, 9.999999999998899e-05, 9.999999999998899e-05, 0.050272138966801494, 0.026268689948863222, 0.0629393109210663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10769267883054434, 0.1070271971752389, 0.15397364944933212, 0.09660155987363961, 0.12202769434178462, 0.09580441870675127, 0.13377930628541868, 0.1995604135441177, 0.1706633250274654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.04324586072504977, 0.02359529165361096, 0.005727923448983541, 0.03684476962105965, 0.0267656688986897, 0.08641604979121165, 0.06790402148455033, 0.09803733596698605, 0.09855305120349966, 0.13411622811074064, 0.0904705154911637, 0.07985671602602074, 0.08868938365866053, 0.09631383595682241, 0.1280600346600944, 0.14647643228139173, 0.12706023319721027, 0.1259310389782815, 0.1393663271734613, 0.1092619010979603, 0.1166936494348394, 0.10934854724534215, 0.09489436257221151, 0.044946148579736445, 0.061770934955190704, 0.05955286879458288, 0.06345088455636927, 0.08198466818811412, 0.061793002292427235, 0.05648699256316181, 0.05562250489954035, 0.06716908785801756, 0.2034357023621597, 0.19387751714740986, 0.19036481070094435, 0.15486741401750992, 0.1672896670467584, 0.13643415195467767, 0.15021649264070636, 0.1532270204061189, 0.1968392239852279, 9.999999999998899e-05, 0.15396789747630268, 9.999999999998899e-05, 9.999999999998899e-05, 0.12508392486294284, 0.13545341913226405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0742138677821158, 0.07615649343467246, 0.0594866682577303, 0.10628979513122216, 0.1207914665021157, 0.061750941843425444, 0.0648823304878231, 0.057489208179688056, 0.08557352381484784, 0.09596649237309396, 0.04879866263397015, 0.07626076595616138, 0.03403738351262797, 0.03304618769385037, 0.045511073114331335, 0.055574119572521674, 0.04136664280517721, 0.04143420019681854, 0.14550588977491807, 0.15010129038303532, 0.14763022729669195, 0.1651944458176724, 0.1359290006306686, 0.17574546561802107, 0.16827691043697102, 0.1849526887037809, 0.1640797807091232, 0.03300580091227856, 0.03922928016934435, 0.049839231956823826, 0.03362934220168934, 0.04323912900978555, 0.06205770863832405, 0.031045632076001528, 0.03402495466068778, 0.03728640304666664]}, "mutation_prompt": null}
{"id": "1dfaf552-e042-4462-8af0-1c2d566e91c4", "solution": "import numpy as np\n\nclass AdaptiveStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "AdaptiveStepSizeDE", "description": "Introducing an adaptive mutation step size based on the population diversity to dynamically adjust the exploration extent and potentially accelerate convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {"aucs": [0.13764082914941023, 0.11855856733970593, 0.1261556435172212, 0.041895774519745244, 0.05267361210777377, 0.03171996254057119, 0.05278796608404879, 0.07266380244540793, 0.07088441531140921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003530957436574944, 0.02098271968899712, 0.027604754350948668, 0.032997849716157934, 0.0012186513362246743, 0.008807096882153531, 0.018248263482334326, 0.0024730605613109136, 0.00043154009291013207, 0.02775419441317084, 0.00817066255321075, 0.005135846384825116, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06262972999825633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019775659990276084, 0.016612712679626163, 9.999999999998899e-05, 0.030181446483909857, 9.999999999998899e-05, 0.10027683525177622, 0.07426011452421954, 0.07345677121187477, 0.0817786926696592, 9.999999999998899e-05, 9.999999999998899e-05, 0.050272138966801494, 0.026268689948863222, 0.0629393109210663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10769267883054434, 0.1070271971752389, 0.15397364944933212, 0.09660155987363961, 0.12202769434178462, 0.09580441870675127, 0.13377930628541868, 0.1995604135441177, 0.1706633250274654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.04324586072504977, 0.02359529165361096, 0.005727923448983541, 0.03684476962105965, 0.0267656688986897, 0.08641604979121165, 0.06790402148455033, 0.09803733596698605, 0.09855305120349966, 0.13411622811074064, 0.0904705154911637, 0.07985671602602074, 0.08868938365866053, 0.09631383595682241, 0.1280600346600944, 0.14647643228139173, 0.12706023319721027, 0.1259310389782815, 0.1393663271734613, 0.1092619010979603, 0.1166936494348394, 0.10934854724534215, 0.09489436257221151, 0.044946148579736445, 0.061770934955190704, 0.05955286879458288, 0.06345088455636927, 0.08198466818811412, 0.061793002292427235, 0.05648699256316181, 0.05562250489954035, 0.06716908785801756, 0.2034357023621597, 0.19387751714740986, 0.19036481070094435, 0.15486741401750992, 0.1672896670467584, 0.13643415195467767, 0.15021649264070636, 0.1532270204061189, 0.1968392239852279, 9.999999999998899e-05, 0.15396789747630268, 9.999999999998899e-05, 9.999999999998899e-05, 0.12508392486294284, 0.13545341913226405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0742138677821158, 0.07615649343467246, 0.0594866682577303, 0.10628979513122216, 0.1207914665021157, 0.061750941843425444, 0.0648823304878231, 0.057489208179688056, 0.08557352381484784, 0.09596649237309396, 0.04879866263397015, 0.07626076595616138, 0.03403738351262797, 0.03304618769385037, 0.045511073114331335, 0.055574119572521674, 0.04136664280517721, 0.04143420019681854, 0.14550588977491807, 0.15010129038303532, 0.14763022729669195, 0.1651944458176724, 0.1359290006306686, 0.17574546561802107, 0.16827691043697102, 0.1849526887037809, 0.1640797807091232, 0.03300580091227856, 0.03922928016934435, 0.049839231956823826, 0.03362934220168934, 0.04323912900978555, 0.06205770863832405, 0.031045632076001528, 0.03402495466068778, 0.03728640304666664]}, "mutation_prompt": null}
{"id": "757bcfc3-9873-4542-beb0-4f49a7d8a324", "solution": "import numpy as np\n\nclass AdaptiveStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "AdaptiveStepSizeDE", "description": "Introducing an adaptive mutation step size based on the population diversity to dynamically adjust the exploration extent and potentially accelerate convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {"aucs": [0.13764082914941023, 0.11855856733970593, 0.1261556435172212, 0.041895774519745244, 0.05267361210777377, 0.03171996254057119, 0.05278796608404879, 0.07266380244540793, 0.07088441531140921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003530957436574944, 0.02098271968899712, 0.027604754350948668, 0.032997849716157934, 0.0012186513362246743, 0.008807096882153531, 0.018248263482334326, 0.0024730605613109136, 0.00043154009291013207, 0.02775419441317084, 0.00817066255321075, 0.005135846384825116, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06262972999825633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019775659990276084, 0.016612712679626163, 9.999999999998899e-05, 0.030181446483909857, 9.999999999998899e-05, 0.10027683525177622, 0.07426011452421954, 0.07345677121187477, 0.0817786926696592, 9.999999999998899e-05, 9.999999999998899e-05, 0.050272138966801494, 0.026268689948863222, 0.0629393109210663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10769267883054434, 0.1070271971752389, 0.15397364944933212, 0.09660155987363961, 0.12202769434178462, 0.09580441870675127, 0.13377930628541868, 0.1995604135441177, 0.1706633250274654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.04324586072504977, 0.02359529165361096, 0.005727923448983541, 0.03684476962105965, 0.0267656688986897, 0.08641604979121165, 0.06790402148455033, 0.09803733596698605, 0.09855305120349966, 0.13411622811074064, 0.0904705154911637, 0.07985671602602074, 0.08868938365866053, 0.09631383595682241, 0.1280600346600944, 0.14647643228139173, 0.12706023319721027, 0.1259310389782815, 0.1393663271734613, 0.1092619010979603, 0.1166936494348394, 0.10934854724534215, 0.09489436257221151, 0.044946148579736445, 0.061770934955190704, 0.05955286879458288, 0.06345088455636927, 0.08198466818811412, 0.061793002292427235, 0.05648699256316181, 0.05562250489954035, 0.06716908785801756, 0.2034357023621597, 0.19387751714740986, 0.19036481070094435, 0.15486741401750992, 0.1672896670467584, 0.13643415195467767, 0.15021649264070636, 0.1532270204061189, 0.1968392239852279, 9.999999999998899e-05, 0.15396789747630268, 9.999999999998899e-05, 9.999999999998899e-05, 0.12508392486294284, 0.13545341913226405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0742138677821158, 0.07615649343467246, 0.0594866682577303, 0.10628979513122216, 0.1207914665021157, 0.061750941843425444, 0.0648823304878231, 0.057489208179688056, 0.08557352381484784, 0.09596649237309396, 0.04879866263397015, 0.07626076595616138, 0.03403738351262797, 0.03304618769385037, 0.045511073114331335, 0.055574119572521674, 0.04136664280517721, 0.04143420019681854, 0.14550588977491807, 0.15010129038303532, 0.14763022729669195, 0.1651944458176724, 0.1359290006306686, 0.17574546561802107, 0.16827691043697102, 0.1849526887037809, 0.1640797807091232, 0.03300580091227856, 0.03922928016934435, 0.049839231956823826, 0.03362934220168934, 0.04323912900978555, 0.06205770863832405, 0.031045632076001528, 0.03402495466068778, 0.03728640304666664]}, "mutation_prompt": null}
{"id": "ba87b967-806e-4928-9a27-9fc702b9ad8f", "solution": "import numpy as np\n\nclass AdaptiveStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "AdaptiveStepSizeDE", "description": "Introducing an adaptive mutation step size based on the population diversity to dynamically adjust the exploration extent and potentially accelerate convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {"aucs": [0.13764082914941023, 0.11855856733970593, 0.1261556435172212, 0.041895774519745244, 0.05267361210777377, 0.03171996254057119, 0.05278796608404879, 0.07266380244540793, 0.07088441531140921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003530957436574944, 0.02098271968899712, 0.027604754350948668, 0.032997849716157934, 0.0012186513362246743, 0.008807096882153531, 0.018248263482334326, 0.0024730605613109136, 0.00043154009291013207, 0.02775419441317084, 0.00817066255321075, 0.005135846384825116, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06262972999825633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019775659990276084, 0.016612712679626163, 9.999999999998899e-05, 0.030181446483909857, 9.999999999998899e-05, 0.10027683525177622, 0.07426011452421954, 0.07345677121187477, 0.0817786926696592, 9.999999999998899e-05, 9.999999999998899e-05, 0.050272138966801494, 0.026268689948863222, 0.0629393109210663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10769267883054434, 0.1070271971752389, 0.15397364944933212, 0.09660155987363961, 0.12202769434178462, 0.09580441870675127, 0.13377930628541868, 0.1995604135441177, 0.1706633250274654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.04324586072504977, 0.02359529165361096, 0.005727923448983541, 0.03684476962105965, 0.0267656688986897, 0.08641604979121165, 0.06790402148455033, 0.09803733596698605, 0.09855305120349966, 0.13411622811074064, 0.0904705154911637, 0.07985671602602074, 0.08868938365866053, 0.09631383595682241, 0.1280600346600944, 0.14647643228139173, 0.12706023319721027, 0.1259310389782815, 0.1393663271734613, 0.1092619010979603, 0.1166936494348394, 0.10934854724534215, 0.09489436257221151, 0.044946148579736445, 0.061770934955190704, 0.05955286879458288, 0.06345088455636927, 0.08198466818811412, 0.061793002292427235, 0.05648699256316181, 0.05562250489954035, 0.06716908785801756, 0.2034357023621597, 0.19387751714740986, 0.19036481070094435, 0.15486741401750992, 0.1672896670467584, 0.13643415195467767, 0.15021649264070636, 0.1532270204061189, 0.1968392239852279, 9.999999999998899e-05, 0.15396789747630268, 9.999999999998899e-05, 9.999999999998899e-05, 0.12508392486294284, 0.13545341913226405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0742138677821158, 0.07615649343467246, 0.0594866682577303, 0.10628979513122216, 0.1207914665021157, 0.061750941843425444, 0.0648823304878231, 0.057489208179688056, 0.08557352381484784, 0.09596649237309396, 0.04879866263397015, 0.07626076595616138, 0.03403738351262797, 0.03304618769385037, 0.045511073114331335, 0.055574119572521674, 0.04136664280517721, 0.04143420019681854, 0.14550588977491807, 0.15010129038303532, 0.14763022729669195, 0.1651944458176724, 0.1359290006306686, 0.17574546561802107, 0.16827691043697102, 0.1849526887037809, 0.1640797807091232, 0.03300580091227856, 0.03922928016934435, 0.049839231956823826, 0.03362934220168934, 0.04323912900978555, 0.06205770863832405, 0.031045632076001528, 0.03402495466068778, 0.03728640304666664]}, "mutation_prompt": null}
{"id": "e968ca8d-cc5b-4df6-a8b7-3930e4e91c13", "solution": "import numpy as np\n\nclass DynamicMutationStrengthDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, fitness):\n        mutation_strength = np.clip(np.mean(fitness) - fitness, 0.1, 1.0)\n        mutant = target + mutation_strength * self.CR * (population[np.random.randint(self.pop_size)] - target)\n        return mutant\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            fitness = [func(ind) for ind in population]\n\n        return population[np.argmin([func(ind) for ind in population])]", "name": "DynamicMutationStrengthDE", "description": "Implementing a dynamic adaptation of the mutation strength based on the individual's fitness compared to the population's fitness to improve convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (10,) (5,) ').", "error": "ValueError('operands could not be broadcast together with shapes (10,) (5,) ')", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {}, "mutation_prompt": null}
{"id": "c768bacb-4cb8-4295-b620-8f81b9607bea", "solution": "import numpy as np\n\nclass EnhancedDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * radius * (mutant - target)\n\n    def recombination(self, a, b, c):\n        weights = [0.2, 0.3, 0.5]  # Custom weights for recombination\n        return np.sum([a, b, c] * weights, axis=0) / np.sum(weights)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                intermediate = self.recombination(a, b, c)\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, intermediate)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "EnhancedDE", "description": "Introducing a novel recombination strategy using a weighted average of three distinct individuals to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"can't multiply sequence by non-int of type 'list'\").", "error": "TypeError(\"can't multiply sequence by non-int of type 'list'\")", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {}, "mutation_prompt": null}
{"id": "901e77af-a7b6-4d47-973e-18ed2077422d", "solution": "import numpy as np\n\nclass AdaptiveStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "AdaptiveStepSizeDE", "description": "Introducing an adaptive mutation step size based on the population diversity to dynamically adjust the exploration extent and potentially accelerate convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {"aucs": [0.13764082914941023, 0.11855856733970593, 0.1261556435172212, 0.041895774519745244, 0.05267361210777377, 0.03171996254057119, 0.05278796608404879, 0.07266380244540793, 0.07088441531140921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003530957436574944, 0.02098271968899712, 0.027604754350948668, 0.032997849716157934, 0.0012186513362246743, 0.008807096882153531, 0.018248263482334326, 0.0024730605613109136, 0.00043154009291013207, 0.02775419441317084, 0.00817066255321075, 0.005135846384825116, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06262972999825633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019775659990276084, 0.016612712679626163, 9.999999999998899e-05, 0.030181446483909857, 9.999999999998899e-05, 0.10027683525177622, 0.07426011452421954, 0.07345677121187477, 0.0817786926696592, 9.999999999998899e-05, 9.999999999998899e-05, 0.050272138966801494, 0.026268689948863222, 0.0629393109210663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10769267883054434, 0.1070271971752389, 0.15397364944933212, 0.09660155987363961, 0.12202769434178462, 0.09580441870675127, 0.13377930628541868, 0.1995604135441177, 0.1706633250274654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.04324586072504977, 0.02359529165361096, 0.005727923448983541, 0.03684476962105965, 0.0267656688986897, 0.08641604979121165, 0.06790402148455033, 0.09803733596698605, 0.09855305120349966, 0.13411622811074064, 0.0904705154911637, 0.07985671602602074, 0.08868938365866053, 0.09631383595682241, 0.1280600346600944, 0.14647643228139173, 0.12706023319721027, 0.1259310389782815, 0.1393663271734613, 0.1092619010979603, 0.1166936494348394, 0.10934854724534215, 0.09489436257221151, 0.044946148579736445, 0.061770934955190704, 0.05955286879458288, 0.06345088455636927, 0.08198466818811412, 0.061793002292427235, 0.05648699256316181, 0.05562250489954035, 0.06716908785801756, 0.2034357023621597, 0.19387751714740986, 0.19036481070094435, 0.15486741401750992, 0.1672896670467584, 0.13643415195467767, 0.15021649264070636, 0.1532270204061189, 0.1968392239852279, 9.999999999998899e-05, 0.15396789747630268, 9.999999999998899e-05, 9.999999999998899e-05, 0.12508392486294284, 0.13545341913226405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0742138677821158, 0.07615649343467246, 0.0594866682577303, 0.10628979513122216, 0.1207914665021157, 0.061750941843425444, 0.0648823304878231, 0.057489208179688056, 0.08557352381484784, 0.09596649237309396, 0.04879866263397015, 0.07626076595616138, 0.03403738351262797, 0.03304618769385037, 0.045511073114331335, 0.055574119572521674, 0.04136664280517721, 0.04143420019681854, 0.14550588977491807, 0.15010129038303532, 0.14763022729669195, 0.1651944458176724, 0.1359290006306686, 0.17574546561802107, 0.16827691043697102, 0.1849526887037809, 0.1640797807091232, 0.03300580091227856, 0.03922928016934435, 0.049839231956823826, 0.03362934220168934, 0.04323912900978555, 0.06205770863832405, 0.031045632076001528, 0.03402495466068778, 0.03728640304666664]}, "mutation_prompt": null}
{"id": "dda3e3ef-963a-483e-a798-3f613e3032b2", "solution": "class FastConvergenceDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(np.std(fitness), 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        return target + radius * mutant\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "FastConvergenceDE", "description": "Enhancing convergence speed by dynamically adjusting the mutation step size based on individual fitness values.", "configspace": "", "generation": 15, "fitness": 0.0419236625233739, "feedback": "The algorithm FastConvergenceDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.10.", "error": "", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {"aucs": [0.07181397830146763, 0.06432772651221763, 0.09455201290554527, 0.019583725566517884, 0.05267361210777377, 0.025288696900545027, 0.05140423906395497, 0.05163064099738546, 0.06767794995974707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014572254733962842, 0.0, 0.0, 0.0011187632349987098, 0.0, 0.018150078853237606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.019501673109856177, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9889517521912993, 0.03613238917579675, 0.07378527977392002, 0.9896903581989918, 0.06234836048040526, 0.046565400965161485, 0.06088040915066262, 0.05233932059878699, 0.04249294445928098, 0.0, 0.0, 0.0, 0.0, 0.00021551809508857378, 0.014548758657611849, 0.0, 0.011194453811883998, 0.0, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.007934783061517181, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07830854760947636, 0.10693789276684329, 0.148295376737118, 0.09416865854237477, 0.08041876921713642, 0.09571399605653386, 0.12396929853482508, 0.09707379230404312, 0.12096781839000814, 0.004071916633976103, 0.0, 0.0, 0.00600237032332096, 0.0, 0.01750168379108641, 0.0, 0.0, 0.026668336265699533, 0.07028246122686288, 0.06726366127808436, 0.08773868884069635, 0.09846289938816954, 0.08761797950960992, 0.08795795927360306, 0.05488481188471417, 0.06162099033014823, 0.07717165476236154, 0.10510794503077392, 0.09994349762968191, 0.10350813781504953, 0.10838250165484586, 0.08290739212077258, 0.08317157286626975, 0.11411347464502575, 0.10004631021926014, 0.0798584312976982, 0.03616025268710332, 0.03673819297560588, 0.03455130707760323, 0.04455513106718223, 0.026515374729914054, 0.03704448605922828, 0.05639263182623633, 0.03843391747742986, 0.012037938186892694, 0.12787146677973982, 0.06023522738927478, 0.11080991306895704, 0.10280083939125018, 0.0673785207712353, 0.08714581413455258, 0.12237199858751358, 0.06484693399677999, 0.12610897469220383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04385307240429104, 0.056143274529988574, 0.05626128006000852, 0.06718871428537254, 0.1207914665021157, 0.06289423754012657, 0.06736096728244301, 0.06596121867016613, 0.07346772654506661, 0.041385655291922174, 0.03967402848431323, 0.016401521055428026, 0.023023596155485992, 0.024955997115077677, 0.045511073114331335, 0.02614962124302822, 0.0158348977852244, 0.04143420019681854, 0.10096019244302157, 0.12017502569002791, 0.14763022729669195, 0.1393273640268835, 0.11402400224796383, 0.12465113207635137, 0.1382863681492974, 0.1424910187970183, 0.18178917663058525, 9.999999999998899e-05, 0.012204213037243616, 0.031393493129599714, 9.999999999998899e-05, 0.008451613309407358, 0.00826091239954263, 0.00378771705097114, 9.999999999998899e-05, 0.009165246127457394]}, "mutation_prompt": null}
{"id": "3a3ea859-e602-403d-b4a7-3297036d923a", "solution": "import numpy as np\n\nclass AdaptiveStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "AdaptiveStepSizeDE", "description": "Introducing an adaptive mutation step size based on the population diversity to dynamically adjust the exploration extent and potentially accelerate convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {"aucs": [0.13764082914941023, 0.11855856733970593, 0.1261556435172212, 0.041895774519745244, 0.05267361210777377, 0.03171996254057119, 0.05278796608404879, 0.07266380244540793, 0.07088441531140921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003530957436574944, 0.02098271968899712, 0.027604754350948668, 0.032997849716157934, 0.0012186513362246743, 0.008807096882153531, 0.018248263482334326, 0.0024730605613109136, 0.00043154009291013207, 0.02775419441317084, 0.00817066255321075, 0.005135846384825116, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06262972999825633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019775659990276084, 0.016612712679626163, 9.999999999998899e-05, 0.030181446483909857, 9.999999999998899e-05, 0.10027683525177622, 0.07426011452421954, 0.07345677121187477, 0.0817786926696592, 9.999999999998899e-05, 9.999999999998899e-05, 0.050272138966801494, 0.026268689948863222, 0.0629393109210663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10769267883054434, 0.1070271971752389, 0.15397364944933212, 0.09660155987363961, 0.12202769434178462, 0.09580441870675127, 0.13377930628541868, 0.1995604135441177, 0.1706633250274654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.04324586072504977, 0.02359529165361096, 0.005727923448983541, 0.03684476962105965, 0.0267656688986897, 0.08641604979121165, 0.06790402148455033, 0.09803733596698605, 0.09855305120349966, 0.13411622811074064, 0.0904705154911637, 0.07985671602602074, 0.08868938365866053, 0.09631383595682241, 0.1280600346600944, 0.14647643228139173, 0.12706023319721027, 0.1259310389782815, 0.1393663271734613, 0.1092619010979603, 0.1166936494348394, 0.10934854724534215, 0.09489436257221151, 0.044946148579736445, 0.061770934955190704, 0.05955286879458288, 0.06345088455636927, 0.08198466818811412, 0.061793002292427235, 0.05648699256316181, 0.05562250489954035, 0.06716908785801756, 0.2034357023621597, 0.19387751714740986, 0.19036481070094435, 0.15486741401750992, 0.1672896670467584, 0.13643415195467767, 0.15021649264070636, 0.1532270204061189, 0.1968392239852279, 9.999999999998899e-05, 0.15396789747630268, 9.999999999998899e-05, 9.999999999998899e-05, 0.12508392486294284, 0.13545341913226405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0742138677821158, 0.07615649343467246, 0.0594866682577303, 0.10628979513122216, 0.1207914665021157, 0.061750941843425444, 0.0648823304878231, 0.057489208179688056, 0.08557352381484784, 0.09596649237309396, 0.04879866263397015, 0.07626076595616138, 0.03403738351262797, 0.03304618769385037, 0.045511073114331335, 0.055574119572521674, 0.04136664280517721, 0.04143420019681854, 0.14550588977491807, 0.15010129038303532, 0.14763022729669195, 0.1651944458176724, 0.1359290006306686, 0.17574546561802107, 0.16827691043697102, 0.1849526887037809, 0.1640797807091232, 0.03300580091227856, 0.03922928016934435, 0.049839231956823826, 0.03362934220168934, 0.04323912900978555, 0.06205770863832405, 0.031045632076001528, 0.03402495466068778, 0.03728640304666664]}, "mutation_prompt": null}
{"id": "2202fa17-3814-49cc-96f8-724490c3a957", "solution": "import numpy as np\n\nclass AdaptiveStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "AdaptiveStepSizeDE", "description": "Introducing an adaptive mutation step size based on the population diversity to dynamically adjust the exploration extent and potentially accelerate convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {"aucs": [0.13764082914941023, 0.11855856733970593, 0.1261556435172212, 0.041895774519745244, 0.05267361210777377, 0.03171996254057119, 0.05278796608404879, 0.07266380244540793, 0.07088441531140921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003530957436574944, 0.02098271968899712, 0.027604754350948668, 0.032997849716157934, 0.0012186513362246743, 0.008807096882153531, 0.018248263482334326, 0.0024730605613109136, 0.00043154009291013207, 0.02775419441317084, 0.00817066255321075, 0.005135846384825116, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06262972999825633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019775659990276084, 0.016612712679626163, 9.999999999998899e-05, 0.030181446483909857, 9.999999999998899e-05, 0.10027683525177622, 0.07426011452421954, 0.07345677121187477, 0.0817786926696592, 9.999999999998899e-05, 9.999999999998899e-05, 0.050272138966801494, 0.026268689948863222, 0.0629393109210663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10769267883054434, 0.1070271971752389, 0.15397364944933212, 0.09660155987363961, 0.12202769434178462, 0.09580441870675127, 0.13377930628541868, 0.1995604135441177, 0.1706633250274654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.04324586072504977, 0.02359529165361096, 0.005727923448983541, 0.03684476962105965, 0.0267656688986897, 0.08641604979121165, 0.06790402148455033, 0.09803733596698605, 0.09855305120349966, 0.13411622811074064, 0.0904705154911637, 0.07985671602602074, 0.08868938365866053, 0.09631383595682241, 0.1280600346600944, 0.14647643228139173, 0.12706023319721027, 0.1259310389782815, 0.1393663271734613, 0.1092619010979603, 0.1166936494348394, 0.10934854724534215, 0.09489436257221151, 0.044946148579736445, 0.061770934955190704, 0.05955286879458288, 0.06345088455636927, 0.08198466818811412, 0.061793002292427235, 0.05648699256316181, 0.05562250489954035, 0.06716908785801756, 0.2034357023621597, 0.19387751714740986, 0.19036481070094435, 0.15486741401750992, 0.1672896670467584, 0.13643415195467767, 0.15021649264070636, 0.1532270204061189, 0.1968392239852279, 9.999999999998899e-05, 0.15396789747630268, 9.999999999998899e-05, 9.999999999998899e-05, 0.12508392486294284, 0.13545341913226405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0742138677821158, 0.07615649343467246, 0.0594866682577303, 0.10628979513122216, 0.1207914665021157, 0.061750941843425444, 0.0648823304878231, 0.057489208179688056, 0.08557352381484784, 0.09596649237309396, 0.04879866263397015, 0.07626076595616138, 0.03403738351262797, 0.03304618769385037, 0.045511073114331335, 0.055574119572521674, 0.04136664280517721, 0.04143420019681854, 0.14550588977491807, 0.15010129038303532, 0.14763022729669195, 0.1651944458176724, 0.1359290006306686, 0.17574546561802107, 0.16827691043697102, 0.1849526887037809, 0.1640797807091232, 0.03300580091227856, 0.03922928016934435, 0.049839231956823826, 0.03362934220168934, 0.04323912900978555, 0.06205770863832405, 0.031045632076001528, 0.03402495466068778, 0.03728640304666664]}, "mutation_prompt": null}
{"id": "eb3da59e-097d-43a4-ad75-bbfad6d6bd8c", "solution": "import numpy as np\n\nclass AdaptiveStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "AdaptiveStepSizeDE", "description": "Introducing an adaptive mutation step size based on the population diversity to dynamically adjust the exploration extent and potentially accelerate convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {"aucs": [0.13764082914941023, 0.11855856733970593, 0.1261556435172212, 0.041895774519745244, 0.05267361210777377, 0.03171996254057119, 0.05278796608404879, 0.07266380244540793, 0.07088441531140921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003530957436574944, 0.02098271968899712, 0.027604754350948668, 0.032997849716157934, 0.0012186513362246743, 0.008807096882153531, 0.018248263482334326, 0.0024730605613109136, 0.00043154009291013207, 0.02775419441317084, 0.00817066255321075, 0.005135846384825116, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06262972999825633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019775659990276084, 0.016612712679626163, 9.999999999998899e-05, 0.030181446483909857, 9.999999999998899e-05, 0.10027683525177622, 0.07426011452421954, 0.07345677121187477, 0.0817786926696592, 9.999999999998899e-05, 9.999999999998899e-05, 0.050272138966801494, 0.026268689948863222, 0.0629393109210663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10769267883054434, 0.1070271971752389, 0.15397364944933212, 0.09660155987363961, 0.12202769434178462, 0.09580441870675127, 0.13377930628541868, 0.1995604135441177, 0.1706633250274654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.04324586072504977, 0.02359529165361096, 0.005727923448983541, 0.03684476962105965, 0.0267656688986897, 0.08641604979121165, 0.06790402148455033, 0.09803733596698605, 0.09855305120349966, 0.13411622811074064, 0.0904705154911637, 0.07985671602602074, 0.08868938365866053, 0.09631383595682241, 0.1280600346600944, 0.14647643228139173, 0.12706023319721027, 0.1259310389782815, 0.1393663271734613, 0.1092619010979603, 0.1166936494348394, 0.10934854724534215, 0.09489436257221151, 0.044946148579736445, 0.061770934955190704, 0.05955286879458288, 0.06345088455636927, 0.08198466818811412, 0.061793002292427235, 0.05648699256316181, 0.05562250489954035, 0.06716908785801756, 0.2034357023621597, 0.19387751714740986, 0.19036481070094435, 0.15486741401750992, 0.1672896670467584, 0.13643415195467767, 0.15021649264070636, 0.1532270204061189, 0.1968392239852279, 9.999999999998899e-05, 0.15396789747630268, 9.999999999998899e-05, 9.999999999998899e-05, 0.12508392486294284, 0.13545341913226405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0742138677821158, 0.07615649343467246, 0.0594866682577303, 0.10628979513122216, 0.1207914665021157, 0.061750941843425444, 0.0648823304878231, 0.057489208179688056, 0.08557352381484784, 0.09596649237309396, 0.04879866263397015, 0.07626076595616138, 0.03403738351262797, 0.03304618769385037, 0.045511073114331335, 0.055574119572521674, 0.04136664280517721, 0.04143420019681854, 0.14550588977491807, 0.15010129038303532, 0.14763022729669195, 0.1651944458176724, 0.1359290006306686, 0.17574546561802107, 0.16827691043697102, 0.1849526887037809, 0.1640797807091232, 0.03300580091227856, 0.03922928016934435, 0.049839231956823826, 0.03362934220168934, 0.04323912900978555, 0.06205770863832405, 0.031045632076001528, 0.03402495466068778, 0.03728640304666664]}, "mutation_prompt": null}
{"id": "6d20e7fd-96c4-485a-8832-4e8ce82b5500", "solution": "import numpy as np\n\nclass AdaptiveStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "AdaptiveStepSizeDE", "description": "Introducing an adaptive mutation step size based on the population diversity to dynamically adjust the exploration extent and potentially accelerate convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {"aucs": [0.13764082914941023, 0.11855856733970593, 0.1261556435172212, 0.041895774519745244, 0.05267361210777377, 0.03171996254057119, 0.05278796608404879, 0.07266380244540793, 0.07088441531140921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003530957436574944, 0.02098271968899712, 0.027604754350948668, 0.032997849716157934, 0.0012186513362246743, 0.008807096882153531, 0.018248263482334326, 0.0024730605613109136, 0.00043154009291013207, 0.02775419441317084, 0.00817066255321075, 0.005135846384825116, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06262972999825633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019775659990276084, 0.016612712679626163, 9.999999999998899e-05, 0.030181446483909857, 9.999999999998899e-05, 0.10027683525177622, 0.07426011452421954, 0.07345677121187477, 0.0817786926696592, 9.999999999998899e-05, 9.999999999998899e-05, 0.050272138966801494, 0.026268689948863222, 0.0629393109210663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10769267883054434, 0.1070271971752389, 0.15397364944933212, 0.09660155987363961, 0.12202769434178462, 0.09580441870675127, 0.13377930628541868, 0.1995604135441177, 0.1706633250274654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.04324586072504977, 0.02359529165361096, 0.005727923448983541, 0.03684476962105965, 0.0267656688986897, 0.08641604979121165, 0.06790402148455033, 0.09803733596698605, 0.09855305120349966, 0.13411622811074064, 0.0904705154911637, 0.07985671602602074, 0.08868938365866053, 0.09631383595682241, 0.1280600346600944, 0.14647643228139173, 0.12706023319721027, 0.1259310389782815, 0.1393663271734613, 0.1092619010979603, 0.1166936494348394, 0.10934854724534215, 0.09489436257221151, 0.044946148579736445, 0.061770934955190704, 0.05955286879458288, 0.06345088455636927, 0.08198466818811412, 0.061793002292427235, 0.05648699256316181, 0.05562250489954035, 0.06716908785801756, 0.2034357023621597, 0.19387751714740986, 0.19036481070094435, 0.15486741401750992, 0.1672896670467584, 0.13643415195467767, 0.15021649264070636, 0.1532270204061189, 0.1968392239852279, 9.999999999998899e-05, 0.15396789747630268, 9.999999999998899e-05, 9.999999999998899e-05, 0.12508392486294284, 0.13545341913226405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0742138677821158, 0.07615649343467246, 0.0594866682577303, 0.10628979513122216, 0.1207914665021157, 0.061750941843425444, 0.0648823304878231, 0.057489208179688056, 0.08557352381484784, 0.09596649237309396, 0.04879866263397015, 0.07626076595616138, 0.03403738351262797, 0.03304618769385037, 0.045511073114331335, 0.055574119572521674, 0.04136664280517721, 0.04143420019681854, 0.14550588977491807, 0.15010129038303532, 0.14763022729669195, 0.1651944458176724, 0.1359290006306686, 0.17574546561802107, 0.16827691043697102, 0.1849526887037809, 0.1640797807091232, 0.03300580091227856, 0.03922928016934435, 0.049839231956823826, 0.03362934220168934, 0.04323912900978555, 0.06205770863832405, 0.031045632076001528, 0.03402495466068778, 0.03728640304666664]}, "mutation_prompt": null}
{"id": "6f2f8c56-a7ff-4bb0-bd6e-d700ca08a2bf", "solution": "import numpy as np\n\nclass AdaptiveStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "AdaptiveStepSizeDE", "description": "Introducing an adaptive mutation step size based on the population diversity to dynamically adjust the exploration extent and potentially accelerate convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {"aucs": [0.13764082914941023, 0.11855856733970593, 0.1261556435172212, 0.041895774519745244, 0.05267361210777377, 0.03171996254057119, 0.05278796608404879, 0.07266380244540793, 0.07088441531140921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003530957436574944, 0.02098271968899712, 0.027604754350948668, 0.032997849716157934, 0.0012186513362246743, 0.008807096882153531, 0.018248263482334326, 0.0024730605613109136, 0.00043154009291013207, 0.02775419441317084, 0.00817066255321075, 0.005135846384825116, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06262972999825633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019775659990276084, 0.016612712679626163, 9.999999999998899e-05, 0.030181446483909857, 9.999999999998899e-05, 0.10027683525177622, 0.07426011452421954, 0.07345677121187477, 0.0817786926696592, 9.999999999998899e-05, 9.999999999998899e-05, 0.050272138966801494, 0.026268689948863222, 0.0629393109210663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10769267883054434, 0.1070271971752389, 0.15397364944933212, 0.09660155987363961, 0.12202769434178462, 0.09580441870675127, 0.13377930628541868, 0.1995604135441177, 0.1706633250274654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.04324586072504977, 0.02359529165361096, 0.005727923448983541, 0.03684476962105965, 0.0267656688986897, 0.08641604979121165, 0.06790402148455033, 0.09803733596698605, 0.09855305120349966, 0.13411622811074064, 0.0904705154911637, 0.07985671602602074, 0.08868938365866053, 0.09631383595682241, 0.1280600346600944, 0.14647643228139173, 0.12706023319721027, 0.1259310389782815, 0.1393663271734613, 0.1092619010979603, 0.1166936494348394, 0.10934854724534215, 0.09489436257221151, 0.044946148579736445, 0.061770934955190704, 0.05955286879458288, 0.06345088455636927, 0.08198466818811412, 0.061793002292427235, 0.05648699256316181, 0.05562250489954035, 0.06716908785801756, 0.2034357023621597, 0.19387751714740986, 0.19036481070094435, 0.15486741401750992, 0.1672896670467584, 0.13643415195467767, 0.15021649264070636, 0.1532270204061189, 0.1968392239852279, 9.999999999998899e-05, 0.15396789747630268, 9.999999999998899e-05, 9.999999999998899e-05, 0.12508392486294284, 0.13545341913226405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0742138677821158, 0.07615649343467246, 0.0594866682577303, 0.10628979513122216, 0.1207914665021157, 0.061750941843425444, 0.0648823304878231, 0.057489208179688056, 0.08557352381484784, 0.09596649237309396, 0.04879866263397015, 0.07626076595616138, 0.03403738351262797, 0.03304618769385037, 0.045511073114331335, 0.055574119572521674, 0.04136664280517721, 0.04143420019681854, 0.14550588977491807, 0.15010129038303532, 0.14763022729669195, 0.1651944458176724, 0.1359290006306686, 0.17574546561802107, 0.16827691043697102, 0.1849526887037809, 0.1640797807091232, 0.03300580091227856, 0.03922928016934435, 0.049839231956823826, 0.03362934220168934, 0.04323912900978555, 0.06205770863832405, 0.031045632076001528, 0.03402495466068778, 0.03728640304666664]}, "mutation_prompt": null}
{"id": "9b51e2eb-8205-48ef-ba62-73bbf08a24f4", "solution": "import numpy as np\n\nclass AdaptiveStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "AdaptiveStepSizeDE", "description": "Introducing an adaptive mutation step size based on the population diversity to dynamically adjust the exploration extent and potentially accelerate convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {"aucs": [0.13764082914941023, 0.11855856733970593, 0.1261556435172212, 0.041895774519745244, 0.05267361210777377, 0.03171996254057119, 0.05278796608404879, 0.07266380244540793, 0.07088441531140921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003530957436574944, 0.02098271968899712, 0.027604754350948668, 0.032997849716157934, 0.0012186513362246743, 0.008807096882153531, 0.018248263482334326, 0.0024730605613109136, 0.00043154009291013207, 0.02775419441317084, 0.00817066255321075, 0.005135846384825116, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06262972999825633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019775659990276084, 0.016612712679626163, 9.999999999998899e-05, 0.030181446483909857, 9.999999999998899e-05, 0.10027683525177622, 0.07426011452421954, 0.07345677121187477, 0.0817786926696592, 9.999999999998899e-05, 9.999999999998899e-05, 0.050272138966801494, 0.026268689948863222, 0.0629393109210663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10769267883054434, 0.1070271971752389, 0.15397364944933212, 0.09660155987363961, 0.12202769434178462, 0.09580441870675127, 0.13377930628541868, 0.1995604135441177, 0.1706633250274654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.04324586072504977, 0.02359529165361096, 0.005727923448983541, 0.03684476962105965, 0.0267656688986897, 0.08641604979121165, 0.06790402148455033, 0.09803733596698605, 0.09855305120349966, 0.13411622811074064, 0.0904705154911637, 0.07985671602602074, 0.08868938365866053, 0.09631383595682241, 0.1280600346600944, 0.14647643228139173, 0.12706023319721027, 0.1259310389782815, 0.1393663271734613, 0.1092619010979603, 0.1166936494348394, 0.10934854724534215, 0.09489436257221151, 0.044946148579736445, 0.061770934955190704, 0.05955286879458288, 0.06345088455636927, 0.08198466818811412, 0.061793002292427235, 0.05648699256316181, 0.05562250489954035, 0.06716908785801756, 0.2034357023621597, 0.19387751714740986, 0.19036481070094435, 0.15486741401750992, 0.1672896670467584, 0.13643415195467767, 0.15021649264070636, 0.1532270204061189, 0.1968392239852279, 9.999999999998899e-05, 0.15396789747630268, 9.999999999998899e-05, 9.999999999998899e-05, 0.12508392486294284, 0.13545341913226405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0742138677821158, 0.07615649343467246, 0.0594866682577303, 0.10628979513122216, 0.1207914665021157, 0.061750941843425444, 0.0648823304878231, 0.057489208179688056, 0.08557352381484784, 0.09596649237309396, 0.04879866263397015, 0.07626076595616138, 0.03403738351262797, 0.03304618769385037, 0.045511073114331335, 0.055574119572521674, 0.04136664280517721, 0.04143420019681854, 0.14550588977491807, 0.15010129038303532, 0.14763022729669195, 0.1651944458176724, 0.1359290006306686, 0.17574546561802107, 0.16827691043697102, 0.1849526887037809, 0.1640797807091232, 0.03300580091227856, 0.03922928016934435, 0.049839231956823826, 0.03362934220168934, 0.04323912900978555, 0.06205770863832405, 0.031045632076001528, 0.03402495466068778, 0.03728640304666664]}, "mutation_prompt": null}
{"id": "08ee7395-466c-4364-b443-1b5e851ef53f", "solution": "import numpy as np\n\nclass AdaptiveStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "AdaptiveStepSizeDE", "description": "Introducing an adaptive mutation step size based on the population diversity to dynamically adjust the exploration extent and potentially accelerate convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {"aucs": [0.13764082914941023, 0.11855856733970593, 0.1261556435172212, 0.041895774519745244, 0.05267361210777377, 0.03171996254057119, 0.05278796608404879, 0.07266380244540793, 0.07088441531140921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003530957436574944, 0.02098271968899712, 0.027604754350948668, 0.032997849716157934, 0.0012186513362246743, 0.008807096882153531, 0.018248263482334326, 0.0024730605613109136, 0.00043154009291013207, 0.02775419441317084, 0.00817066255321075, 0.005135846384825116, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06262972999825633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019775659990276084, 0.016612712679626163, 9.999999999998899e-05, 0.030181446483909857, 9.999999999998899e-05, 0.10027683525177622, 0.07426011452421954, 0.07345677121187477, 0.0817786926696592, 9.999999999998899e-05, 9.999999999998899e-05, 0.050272138966801494, 0.026268689948863222, 0.0629393109210663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10769267883054434, 0.1070271971752389, 0.15397364944933212, 0.09660155987363961, 0.12202769434178462, 0.09580441870675127, 0.13377930628541868, 0.1995604135441177, 0.1706633250274654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.04324586072504977, 0.02359529165361096, 0.005727923448983541, 0.03684476962105965, 0.0267656688986897, 0.08641604979121165, 0.06790402148455033, 0.09803733596698605, 0.09855305120349966, 0.13411622811074064, 0.0904705154911637, 0.07985671602602074, 0.08868938365866053, 0.09631383595682241, 0.1280600346600944, 0.14647643228139173, 0.12706023319721027, 0.1259310389782815, 0.1393663271734613, 0.1092619010979603, 0.1166936494348394, 0.10934854724534215, 0.09489436257221151, 0.044946148579736445, 0.061770934955190704, 0.05955286879458288, 0.06345088455636927, 0.08198466818811412, 0.061793002292427235, 0.05648699256316181, 0.05562250489954035, 0.06716908785801756, 0.2034357023621597, 0.19387751714740986, 0.19036481070094435, 0.15486741401750992, 0.1672896670467584, 0.13643415195467767, 0.15021649264070636, 0.1532270204061189, 0.1968392239852279, 9.999999999998899e-05, 0.15396789747630268, 9.999999999998899e-05, 9.999999999998899e-05, 0.12508392486294284, 0.13545341913226405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0742138677821158, 0.07615649343467246, 0.0594866682577303, 0.10628979513122216, 0.1207914665021157, 0.061750941843425444, 0.0648823304878231, 0.057489208179688056, 0.08557352381484784, 0.09596649237309396, 0.04879866263397015, 0.07626076595616138, 0.03403738351262797, 0.03304618769385037, 0.045511073114331335, 0.055574119572521674, 0.04136664280517721, 0.04143420019681854, 0.14550588977491807, 0.15010129038303532, 0.14763022729669195, 0.1651944458176724, 0.1359290006306686, 0.17574546561802107, 0.16827691043697102, 0.1849526887037809, 0.1640797807091232, 0.03300580091227856, 0.03922928016934435, 0.049839231956823826, 0.03362934220168934, 0.04323912900978555, 0.06205770863832405, 0.031045632076001528, 0.03402495466068778, 0.03728640304666664]}, "mutation_prompt": null}
{"id": "5614f09e-b6ce-4c4a-902a-fe3611d25258", "solution": "import numpy as np\n\nclass DynamicMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-fitness[np.argmin(fitness)]))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "DynamicMutationDE", "description": "Implementing a dynamic mutation strategy based on individual fitness values to adjust the exploration extent adaptively.", "configspace": "", "generation": 24, "fitness": 0.0437197969528745, "feedback": "The algorithm DynamicMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {"aucs": [0.13751802684461312, 0.11856938672301653, 0.12608753738680678, 0.041894725814128786, 0.05267361210777377, 0.03173580504042006, 0.05140423906395497, 0.05163064099738546, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 0.0333841656050452, 0.0012186513362246743, 0.00925440424602364, 0.018248263482334326, 0.0024766739633461654, 0.00041517177517802484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06263669921084947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019755617117568902, 0.016569593334281096, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.07426011452421954, 0.07345677121187477, 0.0817786926696592, 9.999999999998899e-05, 9.999999999998899e-05, 0.050272138966801494, 0.026268689948863222, 0.0629393109210663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07840071328182474, 0.1070271971752389, 0.14838054695461433, 0.09425923977458062, 0.08051072568095674, 0.09580441870675127, 0.1337682935717146, 0.19955674878339136, 0.1706472585625557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.04327588882358835, 0.023421702174786563, 0.00573697589104416, 0.03690399042954451, 0.0267656688986897, 0.08650157854300744, 0.06735693451091307, 0.092851588788458, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.07943610531991474, 0.08916614593083472, 0.09523679553877118, 0.10783288681144809, 0.10536939912673537, 0.10800358411515332, 0.12621540930100783, 0.13940131118078025, 0.10974085828518543, 0.1176301390770792, 0.10936537709680583, 0.09478236694276077, 0.04479624299689644, 0.06168912342992694, 0.05956261109055072, 0.06327586778147976, 0.08169493351945734, 0.0613471932467744, 0.05648699256316181, 0.05537417014956825, 0.06713643266817648, 0.0916346253723066, 0.06032920214938475, 0.11089882950468877, 0.1884305185562759, 0.19134910839950547, 0.14885551582674073, 0.16172014791913603, 0.15752257111712042, 0.17447992718688887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12518945396832937, 0.13559084263819954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07415880572408184, 0.0762990677612625, 0.05963089787343012, 0.1062553508786761, 0.1207914665021157, 0.061750941843425444, 0.06088618922663591, 0.056615725614002965, 0.053674301379695866, 0.03824121102611444, 0.03967402848431323, 0.016401521055428026, 0.03404037454908271, 0.03298664265353857, 0.045511073114331335, 0.038721403454488934, 0.041911367995765114, 0.041784122992643224, 0.1557923399841027, 0.14211069942824817, 0.14763022729669195, 0.15018676614753945, 0.15339419800226917, 0.17476263526402158, 0.10056325222828677, 0.10862764757569365, 0.14689007985489466, 0.03285088942499115, 0.03908845789680582, 0.048189723981274746, 0.0343704957367329, 0.04359334802968917, 0.060437230526577124, 0.02953148454403376, 0.03388614916080679, 0.031834549201790074]}, "mutation_prompt": null}
{"id": "bb9cc32a-06cb-49f6-b3aa-eba9d5597dcd", "solution": "import numpy as np\n\nclass AdaptiveStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-diversity))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "AdaptiveStepSizeDE", "description": "Introducing an adaptive mutation step size based on the population diversity to dynamically adjust the exploration extent and potentially accelerate convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {"aucs": [0.13764082914941023, 0.11855856733970593, 0.1261556435172212, 0.041895774519745244, 0.05267361210777377, 0.03171996254057119, 0.05278796608404879, 0.07266380244540793, 0.07088441531140921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003530957436574944, 0.02098271968899712, 0.027604754350948668, 0.032997849716157934, 0.0012186513362246743, 0.008807096882153531, 0.018248263482334326, 0.0024730605613109136, 0.00043154009291013207, 0.02775419441317084, 0.00817066255321075, 0.005135846384825116, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06262972999825633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019775659990276084, 0.016612712679626163, 9.999999999998899e-05, 0.030181446483909857, 9.999999999998899e-05, 0.10027683525177622, 0.07426011452421954, 0.07345677121187477, 0.0817786926696592, 9.999999999998899e-05, 9.999999999998899e-05, 0.050272138966801494, 0.026268689948863222, 0.0629393109210663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10769267883054434, 0.1070271971752389, 0.15397364944933212, 0.09660155987363961, 0.12202769434178462, 0.09580441870675127, 0.13377930628541868, 0.1995604135441177, 0.1706633250274654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.04324586072504977, 0.02359529165361096, 0.005727923448983541, 0.03684476962105965, 0.0267656688986897, 0.08641604979121165, 0.06790402148455033, 0.09803733596698605, 0.09855305120349966, 0.13411622811074064, 0.0904705154911637, 0.07985671602602074, 0.08868938365866053, 0.09631383595682241, 0.1280600346600944, 0.14647643228139173, 0.12706023319721027, 0.1259310389782815, 0.1393663271734613, 0.1092619010979603, 0.1166936494348394, 0.10934854724534215, 0.09489436257221151, 0.044946148579736445, 0.061770934955190704, 0.05955286879458288, 0.06345088455636927, 0.08198466818811412, 0.061793002292427235, 0.05648699256316181, 0.05562250489954035, 0.06716908785801756, 0.2034357023621597, 0.19387751714740986, 0.19036481070094435, 0.15486741401750992, 0.1672896670467584, 0.13643415195467767, 0.15021649264070636, 0.1532270204061189, 0.1968392239852279, 9.999999999998899e-05, 0.15396789747630268, 9.999999999998899e-05, 9.999999999998899e-05, 0.12508392486294284, 0.13545341913226405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0742138677821158, 0.07615649343467246, 0.0594866682577303, 0.10628979513122216, 0.1207914665021157, 0.061750941843425444, 0.0648823304878231, 0.057489208179688056, 0.08557352381484784, 0.09596649237309396, 0.04879866263397015, 0.07626076595616138, 0.03403738351262797, 0.03304618769385037, 0.045511073114331335, 0.055574119572521674, 0.04136664280517721, 0.04143420019681854, 0.14550588977491807, 0.15010129038303532, 0.14763022729669195, 0.1651944458176724, 0.1359290006306686, 0.17574546561802107, 0.16827691043697102, 0.1849526887037809, 0.1640797807091232, 0.03300580091227856, 0.03922928016934435, 0.049839231956823826, 0.03362934220168934, 0.04323912900978555, 0.06205770863832405, 0.031045632076001528, 0.03402495466068778, 0.03728640304666664]}, "mutation_prompt": null}
{"id": "9d077187-07c8-428d-82e3-89e43f546d3f", "solution": "import numpy as np\n\nclass DynamicStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-radius))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "DynamicStepSizeDE", "description": "Utilizing a dynamic adaptation mechanism to adjust the mutation step size based on the fitness landscape to enhance exploitation and exploration balance.", "configspace": "", "generation": 26, "fitness": 0.05061400693996684, "feedback": "The algorithm DynamicStepSizeDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "842d5117-a9b8-4df3-b263-1638ca35b0ae", "metadata": {"aucs": [0.14044735966295596, 0.09957848893596566, 0.12862812180636096, 0.042481444346141095, 0.05267361210777377, 0.031202493327002756, 0.053307725130705474, 0.06834992340322421, 0.06946135043797041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00029895594503592804, 0.02992979242786209, 0.044677725773319965, 0.0324601095083179, 0.0012186513362246743, 9.999999999998899e-05, 0.018248263482334326, 9.999999999998899e-05, 9.999999999998899e-05, 0.02043890305041207, 0.006926282092200364, 0.019072250939114355, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.0518878885223063, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02079152269361806, 0.003860756465387416, 9.999999999998899e-05, 0.0245360544316241, 9.999999999998899e-05, 0.10027683525177622, 0.0814204861567368, 0.07779699142088703, 0.0613821587889406, 9.999999999998899e-05, 9.999999999998899e-05, 0.051692826436534056, 0.008599796455260877, 0.06269525387654395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015037384282288957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03819978823181902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668694793169583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13400690963871875, 0.1070271971752389, 0.14838054695461433, 0.09593725008012821, 0.11717738747854911, 0.09580441870675127, 0.14297175756149938, 0.1956728817223523, 0.17734522242518813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.029693836183603328, 0.02253081119458822, 0.00951591052211953, 0.021775760515233777, 0.0267656688986897, 0.08958512532733043, 0.11879735288140714, 0.09665695499664528, 0.09855305120349966, 0.14378479426964308, 0.11268573400820259, 0.11194933311238253, 0.0880057527124063, 0.07726393575557644, 0.1208572478246055, 0.13511263726746237, 0.13655574209688892, 0.13267571181674465, 0.15406665992589752, 0.12006779551002178, 0.11786988341426607, 0.11131974935032907, 0.09276260859514862, 0.0634102174126483, 0.05100979376879533, 0.04266203815115788, 0.07792350871800668, 0.08281903925222611, 0.06915583224282451, 0.05648699256316181, 0.04267408639510539, 0.036004999454323894, 0.19923904399133685, 0.19746489089941932, 0.18744936272791834, 0.16281908860082372, 0.16033436607645546, 0.1492506173832051, 0.1653105608375448, 0.16171459342391048, 0.16759357846566103, 9.999999999998899e-05, 0.12734369690726888, 9.999999999998899e-05, 9.999999999998899e-05, 0.14480757933454225, 0.1263523016000221, 0.14618174581911303, 9.999999999998899e-05, 9.999999999998899e-05, 0.08943323543559578, 0.10583510791091844, 0.05626128006000852, 0.11128215937532282, 0.1207914665021157, 0.07016219131246926, 0.06376478013266473, 0.057444113192110624, 0.08877047267739602, 0.09607803315810237, 0.04695524870259482, 0.07985504067403526, 0.023872804592107832, 0.039458657322120616, 0.045511073114331335, 0.0611860857002684, 0.05028520148937221, 0.07240978780486063, 0.13092929489775929, 0.17792225772560466, 0.15586377974680532, 0.14674781831895067, 0.1654217984697881, 0.1391591603256549, 0.16288901271756573, 0.1622731494572508, 0.16065170780556748, 0.026505965105878437, 0.06576127633464202, 0.031393493129599714, 0.025489339107153453, 0.03266135924924385, 0.05887258034435905, 0.03160087508848952, 0.036121115591911446, 0.037169430943314374]}, "mutation_prompt": null}
{"id": "c690fb11-7482-4fc1-a681-e8e8c98950c6", "solution": "class DynamicPopSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 # Updated to allow dynamic adjustment\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_pop_size = 5\n        self.max_pop_size = 20\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n            self.pop_size = min(self.max_pop_size, max(self.min_pop_size, int(np.mean([func(ind) for ind in population]) * 10)))\n\n        return best_solution", "name": "DynamicPopSizeDE", "description": "Implementing a dynamic population size adaptation strategy to adjust the exploration and exploitation balance dynamically.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicPopSizeDE' object has no attribute 'mutation'\").", "error": "AttributeError(\"'DynamicPopSizeDE' object has no attribute 'mutation'\")", "parent_id": "9d077187-07c8-428d-82e3-89e43f546d3f", "metadata": {}, "mutation_prompt": null}
{"id": "1e21d96f-423b-49d3-a714-5d981ed4bae2", "solution": "import numpy as np\n\nclass DynamicStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-radius))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "DynamicStepSizeDE", "description": "Utilizing a dynamic adaptation mechanism to adjust the mutation step size based on the fitness landscape to enhance exploitation and exploration balance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d077187-07c8-428d-82e3-89e43f546d3f", "metadata": {"aucs": [0.14044735966295596, 0.09957848893596566, 0.12862812180636096, 0.042481444346141095, 0.05267361210777377, 0.031202493327002756, 0.053307725130705474, 0.06834992340322421, 0.06946135043797041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00029895594503592804, 0.02992979242786209, 0.044677725773319965, 0.0324601095083179, 0.0012186513362246743, 9.999999999998899e-05, 0.018248263482334326, 9.999999999998899e-05, 9.999999999998899e-05, 0.02043890305041207, 0.006926282092200364, 0.019072250939114355, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.0518878885223063, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02079152269361806, 0.003860756465387416, 9.999999999998899e-05, 0.0245360544316241, 9.999999999998899e-05, 0.10027683525177622, 0.0814204861567368, 0.07779699142088703, 0.0613821587889406, 9.999999999998899e-05, 9.999999999998899e-05, 0.051692826436534056, 0.008599796455260877, 0.06269525387654395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015037384282288957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03819978823181902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668694793169583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13400690963871875, 0.1070271971752389, 0.14838054695461433, 0.09593725008012821, 0.11717738747854911, 0.09580441870675127, 0.14297175756149938, 0.1956728817223523, 0.17734522242518813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.029693836183603328, 0.02253081119458822, 0.00951591052211953, 0.021775760515233777, 0.0267656688986897, 0.08958512532733043, 0.11879735288140714, 0.09665695499664528, 0.09855305120349966, 0.14378479426964308, 0.11268573400820259, 0.11194933311238253, 0.0880057527124063, 0.07726393575557644, 0.1208572478246055, 0.13511263726746237, 0.13655574209688892, 0.13267571181674465, 0.15406665992589752, 0.12006779551002178, 0.11786988341426607, 0.11131974935032907, 0.09276260859514862, 0.0634102174126483, 0.05100979376879533, 0.04266203815115788, 0.07792350871800668, 0.08281903925222611, 0.06915583224282451, 0.05648699256316181, 0.04267408639510539, 0.036004999454323894, 0.19923904399133685, 0.19746489089941932, 0.18744936272791834, 0.16281908860082372, 0.16033436607645546, 0.1492506173832051, 0.1653105608375448, 0.16171459342391048, 0.16759357846566103, 9.999999999998899e-05, 0.12734369690726888, 9.999999999998899e-05, 9.999999999998899e-05, 0.14480757933454225, 0.1263523016000221, 0.14618174581911303, 9.999999999998899e-05, 9.999999999998899e-05, 0.08943323543559578, 0.10583510791091844, 0.05626128006000852, 0.11128215937532282, 0.1207914665021157, 0.07016219131246926, 0.06376478013266473, 0.057444113192110624, 0.08877047267739602, 0.09607803315810237, 0.04695524870259482, 0.07985504067403526, 0.023872804592107832, 0.039458657322120616, 0.045511073114331335, 0.0611860857002684, 0.05028520148937221, 0.07240978780486063, 0.13092929489775929, 0.17792225772560466, 0.15586377974680532, 0.14674781831895067, 0.1654217984697881, 0.1391591603256549, 0.16288901271756573, 0.1622731494572508, 0.16065170780556748, 0.026505965105878437, 0.06576127633464202, 0.031393493129599714, 0.025489339107153453, 0.03266135924924385, 0.05887258034435905, 0.03160087508848952, 0.036121115591911446, 0.037169430943314374]}, "mutation_prompt": null}
{"id": "7a9e10e5-68a3-45cb-a444-49b21ad5c30a", "solution": "import numpy as np\n\nclass DynamicStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-radius))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "DynamicStepSizeDE", "description": "Utilizing a dynamic adaptation mechanism to adjust the mutation step size based on the fitness landscape to enhance exploitation and exploration balance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d077187-07c8-428d-82e3-89e43f546d3f", "metadata": {"aucs": [0.14044735966295596, 0.09957848893596566, 0.12862812180636096, 0.042481444346141095, 0.05267361210777377, 0.031202493327002756, 0.053307725130705474, 0.06834992340322421, 0.06946135043797041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00029895594503592804, 0.02992979242786209, 0.044677725773319965, 0.0324601095083179, 0.0012186513362246743, 9.999999999998899e-05, 0.018248263482334326, 9.999999999998899e-05, 9.999999999998899e-05, 0.02043890305041207, 0.006926282092200364, 0.019072250939114355, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.0518878885223063, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02079152269361806, 0.003860756465387416, 9.999999999998899e-05, 0.0245360544316241, 9.999999999998899e-05, 0.10027683525177622, 0.0814204861567368, 0.07779699142088703, 0.0613821587889406, 9.999999999998899e-05, 9.999999999998899e-05, 0.051692826436534056, 0.008599796455260877, 0.06269525387654395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015037384282288957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03819978823181902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668694793169583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13400690963871875, 0.1070271971752389, 0.14838054695461433, 0.09593725008012821, 0.11717738747854911, 0.09580441870675127, 0.14297175756149938, 0.1956728817223523, 0.17734522242518813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.029693836183603328, 0.02253081119458822, 0.00951591052211953, 0.021775760515233777, 0.0267656688986897, 0.08958512532733043, 0.11879735288140714, 0.09665695499664528, 0.09855305120349966, 0.14378479426964308, 0.11268573400820259, 0.11194933311238253, 0.0880057527124063, 0.07726393575557644, 0.1208572478246055, 0.13511263726746237, 0.13655574209688892, 0.13267571181674465, 0.15406665992589752, 0.12006779551002178, 0.11786988341426607, 0.11131974935032907, 0.09276260859514862, 0.0634102174126483, 0.05100979376879533, 0.04266203815115788, 0.07792350871800668, 0.08281903925222611, 0.06915583224282451, 0.05648699256316181, 0.04267408639510539, 0.036004999454323894, 0.19923904399133685, 0.19746489089941932, 0.18744936272791834, 0.16281908860082372, 0.16033436607645546, 0.1492506173832051, 0.1653105608375448, 0.16171459342391048, 0.16759357846566103, 9.999999999998899e-05, 0.12734369690726888, 9.999999999998899e-05, 9.999999999998899e-05, 0.14480757933454225, 0.1263523016000221, 0.14618174581911303, 9.999999999998899e-05, 9.999999999998899e-05, 0.08943323543559578, 0.10583510791091844, 0.05626128006000852, 0.11128215937532282, 0.1207914665021157, 0.07016219131246926, 0.06376478013266473, 0.057444113192110624, 0.08877047267739602, 0.09607803315810237, 0.04695524870259482, 0.07985504067403526, 0.023872804592107832, 0.039458657322120616, 0.045511073114331335, 0.0611860857002684, 0.05028520148937221, 0.07240978780486063, 0.13092929489775929, 0.17792225772560466, 0.15586377974680532, 0.14674781831895067, 0.1654217984697881, 0.1391591603256549, 0.16288901271756573, 0.1622731494572508, 0.16065170780556748, 0.026505965105878437, 0.06576127633464202, 0.031393493129599714, 0.025489339107153453, 0.03266135924924385, 0.05887258034435905, 0.03160087508848952, 0.036121115591911446, 0.037169430943314374]}, "mutation_prompt": null}
{"id": "12949d5d-2342-438d-84a3-833f7efa91cb", "solution": "import numpy as np\n\nclass DynamicStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-radius))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "DynamicStepSizeDE", "description": "Utilizing a dynamic adaptation mechanism to adjust the mutation step size based on the fitness landscape to enhance exploitation and exploration balance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d077187-07c8-428d-82e3-89e43f546d3f", "metadata": {"aucs": [0.14044735966295596, 0.09957848893596566, 0.12862812180636096, 0.042481444346141095, 0.05267361210777377, 0.031202493327002756, 0.053307725130705474, 0.06834992340322421, 0.06946135043797041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00029895594503592804, 0.02992979242786209, 0.044677725773319965, 0.0324601095083179, 0.0012186513362246743, 9.999999999998899e-05, 0.018248263482334326, 9.999999999998899e-05, 9.999999999998899e-05, 0.02043890305041207, 0.006926282092200364, 0.019072250939114355, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.0518878885223063, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02079152269361806, 0.003860756465387416, 9.999999999998899e-05, 0.0245360544316241, 9.999999999998899e-05, 0.10027683525177622, 0.0814204861567368, 0.07779699142088703, 0.0613821587889406, 9.999999999998899e-05, 9.999999999998899e-05, 0.051692826436534056, 0.008599796455260877, 0.06269525387654395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015037384282288957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03819978823181902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668694793169583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13400690963871875, 0.1070271971752389, 0.14838054695461433, 0.09593725008012821, 0.11717738747854911, 0.09580441870675127, 0.14297175756149938, 0.1956728817223523, 0.17734522242518813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.029693836183603328, 0.02253081119458822, 0.00951591052211953, 0.021775760515233777, 0.0267656688986897, 0.08958512532733043, 0.11879735288140714, 0.09665695499664528, 0.09855305120349966, 0.14378479426964308, 0.11268573400820259, 0.11194933311238253, 0.0880057527124063, 0.07726393575557644, 0.1208572478246055, 0.13511263726746237, 0.13655574209688892, 0.13267571181674465, 0.15406665992589752, 0.12006779551002178, 0.11786988341426607, 0.11131974935032907, 0.09276260859514862, 0.0634102174126483, 0.05100979376879533, 0.04266203815115788, 0.07792350871800668, 0.08281903925222611, 0.06915583224282451, 0.05648699256316181, 0.04267408639510539, 0.036004999454323894, 0.19923904399133685, 0.19746489089941932, 0.18744936272791834, 0.16281908860082372, 0.16033436607645546, 0.1492506173832051, 0.1653105608375448, 0.16171459342391048, 0.16759357846566103, 9.999999999998899e-05, 0.12734369690726888, 9.999999999998899e-05, 9.999999999998899e-05, 0.14480757933454225, 0.1263523016000221, 0.14618174581911303, 9.999999999998899e-05, 9.999999999998899e-05, 0.08943323543559578, 0.10583510791091844, 0.05626128006000852, 0.11128215937532282, 0.1207914665021157, 0.07016219131246926, 0.06376478013266473, 0.057444113192110624, 0.08877047267739602, 0.09607803315810237, 0.04695524870259482, 0.07985504067403526, 0.023872804592107832, 0.039458657322120616, 0.045511073114331335, 0.0611860857002684, 0.05028520148937221, 0.07240978780486063, 0.13092929489775929, 0.17792225772560466, 0.15586377974680532, 0.14674781831895067, 0.1654217984697881, 0.1391591603256549, 0.16288901271756573, 0.1622731494572508, 0.16065170780556748, 0.026505965105878437, 0.06576127633464202, 0.031393493129599714, 0.025489339107153453, 0.03266135924924385, 0.05887258034435905, 0.03160087508848952, 0.036121115591911446, 0.037169430943314374]}, "mutation_prompt": null}
{"id": "92290171-16ed-420e-b1fd-aeb93338e05c", "solution": "class DynamicStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-radius))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)  # Modified to enhance convergence\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "DynamicStepSizeDE", "description": "Implementing a dynamically adjusting mutation step size based on the population diversity to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 31, "fitness": 0.05061400693996684, "feedback": "The algorithm DynamicStepSizeDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "9d077187-07c8-428d-82e3-89e43f546d3f", "metadata": {"aucs": [0.14044735966295596, 0.09957848893596566, 0.12862812180636096, 0.042481444346141095, 0.05267361210777377, 0.031202493327002756, 0.053307725130705474, 0.06834992340322421, 0.06946135043797041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00029895594503592804, 0.02992979242786209, 0.044677725773319965, 0.0324601095083179, 0.0012186513362246743, 9.999999999998899e-05, 0.018248263482334326, 9.999999999998899e-05, 9.999999999998899e-05, 0.02043890305041207, 0.006926282092200364, 0.019072250939114355, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.0518878885223063, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02079152269361806, 0.003860756465387416, 9.999999999998899e-05, 0.0245360544316241, 9.999999999998899e-05, 0.10027683525177622, 0.0814204861567368, 0.07779699142088703, 0.0613821587889406, 9.999999999998899e-05, 9.999999999998899e-05, 0.051692826436534056, 0.008599796455260877, 0.06269525387654395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015037384282288957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03819978823181902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668694793169583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13400690963871875, 0.1070271971752389, 0.14838054695461433, 0.09593725008012821, 0.11717738747854911, 0.09580441870675127, 0.14297175756149938, 0.1956728817223523, 0.17734522242518813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.029693836183603328, 0.02253081119458822, 0.00951591052211953, 0.021775760515233777, 0.0267656688986897, 0.08958512532733043, 0.11879735288140714, 0.09665695499664528, 0.09855305120349966, 0.14378479426964308, 0.11268573400820259, 0.11194933311238253, 0.0880057527124063, 0.07726393575557644, 0.1208572478246055, 0.13511263726746237, 0.13655574209688892, 0.13267571181674465, 0.15406665992589752, 0.12006779551002178, 0.11786988341426607, 0.11131974935032907, 0.09276260859514862, 0.0634102174126483, 0.05100979376879533, 0.04266203815115788, 0.07792350871800668, 0.08281903925222611, 0.06915583224282451, 0.05648699256316181, 0.04267408639510539, 0.036004999454323894, 0.19923904399133685, 0.19746489089941932, 0.18744936272791834, 0.16281908860082372, 0.16033436607645546, 0.1492506173832051, 0.1653105608375448, 0.16171459342391048, 0.16759357846566103, 9.999999999998899e-05, 0.12734369690726888, 9.999999999998899e-05, 9.999999999998899e-05, 0.14480757933454225, 0.1263523016000221, 0.14618174581911303, 9.999999999998899e-05, 9.999999999998899e-05, 0.08943323543559578, 0.10583510791091844, 0.05626128006000852, 0.11128215937532282, 0.1207914665021157, 0.07016219131246926, 0.06376478013266473, 0.057444113192110624, 0.08877047267739602, 0.09607803315810237, 0.04695524870259482, 0.07985504067403526, 0.023872804592107832, 0.039458657322120616, 0.045511073114331335, 0.0611860857002684, 0.05028520148937221, 0.07240978780486063, 0.13092929489775929, 0.17792225772560466, 0.15586377974680532, 0.14674781831895067, 0.1654217984697881, 0.1391591603256549, 0.16288901271756573, 0.1622731494572508, 0.16065170780556748, 0.026505965105878437, 0.06576127633464202, 0.031393493129599714, 0.025489339107153453, 0.03266135924924385, 0.05887258034435905, 0.03160087508848952, 0.036121115591911446, 0.037169430943314374]}, "mutation_prompt": null}
{"id": "08539f40-b284-4904-96dc-29c7884b6a57", "solution": "import numpy as np\n\nclass EnhancedDynamicStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-radius))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n            # Dynamically adjust mutation probability based on diversity\n            self.F = max(0.1, min(0.8, self.F + 0.01 * (diversity - new_diversity)))\n\n        return best_solution", "name": "EnhancedDynamicStepSizeDE", "description": "Implementing a dynamically adjusting mutation probability mechanism to enhance exploration and exploit promising solutions more effectively.", "configspace": "", "generation": 32, "fitness": 0.050525645507073454, "feedback": "The algorithm EnhancedDynamicStepSizeDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "9d077187-07c8-428d-82e3-89e43f546d3f", "metadata": {"aucs": [0.1437462381697403, 0.09957848893596566, 0.12862812180636096, 0.042481444346141095, 0.05267361210777377, 0.03118366913303383, 0.05333395879882297, 0.06822271390095136, 0.06948468404433183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 0.04307626152119792, 0.028647573446492602, 0.0012186513362246743, 9.999999999998899e-05, 0.018248263482334326, 9.999999999998899e-05, 9.999999999998899e-05, 0.0203744224100314, 0.009995210577234293, 0.02212780496264366, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.05583188692030239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03080527226174168, 0.004845730136151305, 9.999999999998899e-05, 0.0245360544316241, 9.999999999998899e-05, 0.10027683525177622, 0.09067018309097874, 0.07651152189196941, 0.0613821587889406, 9.999999999998899e-05, 9.999999999998899e-05, 0.051692826436534056, 0.008599796455260877, 0.06269525387654395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031612343160242196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01720931316771257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08814923572191624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1337726604449968, 0.1070271971752389, 0.15029749771316347, 0.09593816311565606, 0.11734334171467276, 0.09580441870675127, 0.1422546328035672, 0.20352454767429307, 0.17689839922669492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.02652288415443238, 0.028323693025577468, 0.015197676950448824, 0.028742716364133725, 0.0267656688986897, 0.08744151484515328, 0.11879735288140714, 0.11439488552796206, 0.09855305120349966, 0.1196727597430618, 0.11282095975391548, 0.0884097170037974, 0.11559954834530017, 0.07814980910060898, 0.11649566848324644, 0.12941544037872021, 0.1332147324305606, 0.13267571181674465, 0.14643817980802287, 0.12335465994298245, 0.11476211674094083, 0.11123513501716675, 0.09443410923251416, 0.05608997477097799, 0.05728874417214025, 0.051848255087566075, 0.07792350871800668, 0.0776101307764695, 0.06054978974041336, 0.05648699256316181, 0.04891108825269386, 0.030918390585634947, 0.18568040186226653, 0.18104514087787948, 0.18123575794724578, 0.1910443180601339, 0.15170268021433608, 0.13850235876648753, 0.16836378315380263, 0.2165956703930727, 0.16892995321678683, 9.999999999998899e-05, 0.12229939137657964, 9.999999999998899e-05, 9.999999999998899e-05, 0.1393816552757, 0.13238689889471011, 0.14295003675032625, 9.999999999998899e-05, 9.999999999998899e-05, 0.08943323543559578, 0.10629297063095167, 0.05626128006000852, 0.11184016038505828, 0.1207914665021157, 0.06805752489882255, 0.06376844727098774, 0.057444113192110624, 0.08821035522445797, 0.09546682223679837, 0.046992453793795685, 0.07614932281758924, 0.023748309187738403, 0.039458657322120616, 0.045511073114331335, 0.061628569038226444, 0.0524100302974021, 0.0674767512090877, 0.16375570219564328, 0.14974658753733416, 0.14763022729669195, 0.12316051397247296, 0.1707111013694519, 0.13376214771177097, 0.16308133603172614, 0.17047433109829724, 0.16231158345195362, 0.02965905412423253, 0.03926722405326322, 0.03738534215751932, 0.04814162006506284, 0.027774128506475093, 0.044586588068559974, 0.03257407524477529, 0.03644860209168199, 0.03555909418561409]}, "mutation_prompt": null}
{"id": "eed60415-5fa2-4991-aa1c-a5e33aa8f676", "solution": "import numpy as np\n\nclass DynamicStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-radius))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "DynamicStepSizeDE", "description": "Utilizing a dynamic adaptation mechanism to adjust the mutation step size based on the fitness landscape to enhance exploitation and exploration balance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d077187-07c8-428d-82e3-89e43f546d3f", "metadata": {"aucs": [0.14044735966295596, 0.09957848893596566, 0.12862812180636096, 0.042481444346141095, 0.05267361210777377, 0.031202493327002756, 0.053307725130705474, 0.06834992340322421, 0.06946135043797041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00029895594503592804, 0.02992979242786209, 0.044677725773319965, 0.0324601095083179, 0.0012186513362246743, 9.999999999998899e-05, 0.018248263482334326, 9.999999999998899e-05, 9.999999999998899e-05, 0.02043890305041207, 0.006926282092200364, 0.019072250939114355, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.0518878885223063, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02079152269361806, 0.003860756465387416, 9.999999999998899e-05, 0.0245360544316241, 9.999999999998899e-05, 0.10027683525177622, 0.0814204861567368, 0.07779699142088703, 0.0613821587889406, 9.999999999998899e-05, 9.999999999998899e-05, 0.051692826436534056, 0.008599796455260877, 0.06269525387654395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015037384282288957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03819978823181902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668694793169583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13400690963871875, 0.1070271971752389, 0.14838054695461433, 0.09593725008012821, 0.11717738747854911, 0.09580441870675127, 0.14297175756149938, 0.1956728817223523, 0.17734522242518813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.029693836183603328, 0.02253081119458822, 0.00951591052211953, 0.021775760515233777, 0.0267656688986897, 0.08958512532733043, 0.11879735288140714, 0.09665695499664528, 0.09855305120349966, 0.14378479426964308, 0.11268573400820259, 0.11194933311238253, 0.0880057527124063, 0.07726393575557644, 0.1208572478246055, 0.13511263726746237, 0.13655574209688892, 0.13267571181674465, 0.15406665992589752, 0.12006779551002178, 0.11786988341426607, 0.11131974935032907, 0.09276260859514862, 0.0634102174126483, 0.05100979376879533, 0.04266203815115788, 0.07792350871800668, 0.08281903925222611, 0.06915583224282451, 0.05648699256316181, 0.04267408639510539, 0.036004999454323894, 0.19923904399133685, 0.19746489089941932, 0.18744936272791834, 0.16281908860082372, 0.16033436607645546, 0.1492506173832051, 0.1653105608375448, 0.16171459342391048, 0.16759357846566103, 9.999999999998899e-05, 0.12734369690726888, 9.999999999998899e-05, 9.999999999998899e-05, 0.14480757933454225, 0.1263523016000221, 0.14618174581911303, 9.999999999998899e-05, 9.999999999998899e-05, 0.08943323543559578, 0.10583510791091844, 0.05626128006000852, 0.11128215937532282, 0.1207914665021157, 0.07016219131246926, 0.06376478013266473, 0.057444113192110624, 0.08877047267739602, 0.09607803315810237, 0.04695524870259482, 0.07985504067403526, 0.023872804592107832, 0.039458657322120616, 0.045511073114331335, 0.0611860857002684, 0.05028520148937221, 0.07240978780486063, 0.13092929489775929, 0.17792225772560466, 0.15586377974680532, 0.14674781831895067, 0.1654217984697881, 0.1391591603256549, 0.16288901271756573, 0.1622731494572508, 0.16065170780556748, 0.026505965105878437, 0.06576127633464202, 0.031393493129599714, 0.025489339107153453, 0.03266135924924385, 0.05887258034435905, 0.03160087508848952, 0.036121115591911446, 0.037169430943314374]}, "mutation_prompt": null}
{"id": "9f4d558e-e650-4d91-b623-4623685978ae", "solution": "import numpy as np\n\nclass DynamicStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity, 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-radius))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "DynamicStepSizeDE", "description": "Utilizing a dynamic adaptation mechanism to adjust the mutation step size based on the fitness landscape to enhance exploitation and exploration balance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d077187-07c8-428d-82e3-89e43f546d3f", "metadata": {"aucs": [0.14044735966295596, 0.09957848893596566, 0.12862812180636096, 0.042481444346141095, 0.05267361210777377, 0.031202493327002756, 0.053307725130705474, 0.06834992340322421, 0.06946135043797041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00029895594503592804, 0.02992979242786209, 0.044677725773319965, 0.0324601095083179, 0.0012186513362246743, 9.999999999998899e-05, 0.018248263482334326, 9.999999999998899e-05, 9.999999999998899e-05, 0.02043890305041207, 0.006926282092200364, 0.019072250939114355, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.0518878885223063, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02079152269361806, 0.003860756465387416, 9.999999999998899e-05, 0.0245360544316241, 9.999999999998899e-05, 0.10027683525177622, 0.0814204861567368, 0.07779699142088703, 0.0613821587889406, 9.999999999998899e-05, 9.999999999998899e-05, 0.051692826436534056, 0.008599796455260877, 0.06269525387654395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015037384282288957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03819978823181902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668694793169583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13400690963871875, 0.1070271971752389, 0.14838054695461433, 0.09593725008012821, 0.11717738747854911, 0.09580441870675127, 0.14297175756149938, 0.1956728817223523, 0.17734522242518813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.029693836183603328, 0.02253081119458822, 0.00951591052211953, 0.021775760515233777, 0.0267656688986897, 0.08958512532733043, 0.11879735288140714, 0.09665695499664528, 0.09855305120349966, 0.14378479426964308, 0.11268573400820259, 0.11194933311238253, 0.0880057527124063, 0.07726393575557644, 0.1208572478246055, 0.13511263726746237, 0.13655574209688892, 0.13267571181674465, 0.15406665992589752, 0.12006779551002178, 0.11786988341426607, 0.11131974935032907, 0.09276260859514862, 0.0634102174126483, 0.05100979376879533, 0.04266203815115788, 0.07792350871800668, 0.08281903925222611, 0.06915583224282451, 0.05648699256316181, 0.04267408639510539, 0.036004999454323894, 0.19923904399133685, 0.19746489089941932, 0.18744936272791834, 0.16281908860082372, 0.16033436607645546, 0.1492506173832051, 0.1653105608375448, 0.16171459342391048, 0.16759357846566103, 9.999999999998899e-05, 0.12734369690726888, 9.999999999998899e-05, 9.999999999998899e-05, 0.14480757933454225, 0.1263523016000221, 0.14618174581911303, 9.999999999998899e-05, 9.999999999998899e-05, 0.08943323543559578, 0.10583510791091844, 0.05626128006000852, 0.11128215937532282, 0.1207914665021157, 0.07016219131246926, 0.06376478013266473, 0.057444113192110624, 0.08877047267739602, 0.09607803315810237, 0.04695524870259482, 0.07985504067403526, 0.023872804592107832, 0.039458657322120616, 0.045511073114331335, 0.0611860857002684, 0.05028520148937221, 0.07240978780486063, 0.13092929489775929, 0.17792225772560466, 0.15586377974680532, 0.14674781831895067, 0.1654217984697881, 0.1391591603256549, 0.16288901271756573, 0.1622731494572508, 0.16065170780556748, 0.026505965105878437, 0.06576127633464202, 0.031393493129599714, 0.025489339107153453, 0.03266135924924385, 0.05887258034435905, 0.03160087508848952, 0.036121115591911446, 0.037169430943314374]}, "mutation_prompt": null}
{"id": "0d17b603-6a4a-4cad-a545-44a002c0ed90", "solution": "import numpy as np\n\nclass AdaptiveStepSizeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def mutation(self, target, population, diversity, fitness, iteration):\n        radius = np.clip(np.mean(fitness), 0.1, 1.0)\n        step_size = np.clip(diversity * (1 - iteration / self.budget), 0.1, 1.0)\n        mutant = target + step_size * self.F * (population[np.random.randint(self.pop_size)] - target)\n        scale_factor = 1.0 / (1.0 + np.exp(-radius))\n        return target + scale_factor * radius * (mutant - target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n        fitness = [func(ind) for ind in population]\n\n        for itr in range(self.budget):\n            new_population = []\n            for target in population:\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                trial = self.mutation(target, population, diversity, fitness, itr)\n                mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(mask, trial, target)\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            new_diversity = np.mean([np.linalg.norm(ind - best_solution) for ind in population])\n            diversity = max(0.9 * diversity + 0.1 * new_diversity, 1e-6)\n            fitness = [func(ind) for ind in population]\n\n        return best_solution", "name": "AdaptiveStepSizeDE", "description": "Introducing adaptive shrinking of the mutation step size during the optimization process to focus more on exploitation and fine-tuning around promising solutions.", "configspace": "", "generation": 35, "fitness": 0.050635406808495806, "feedback": "The algorithm AdaptiveStepSizeDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "9d077187-07c8-428d-82e3-89e43f546d3f", "metadata": {"aucs": [0.14044735966295596, 0.09957848893596566, 0.12862812180636096, 0.042481444346141095, 0.05267361210777377, 0.031202493327002756, 0.053307725130705474, 0.06834992340322421, 0.06946135043797041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00029895594503592804, 0.02992979242786209, 0.044677725773319965, 0.0324601095083179, 0.0012186513362246743, 9.999999999998899e-05, 0.018248263482334326, 9.999999999998899e-05, 9.999999999998899e-05, 0.02043890305041207, 0.006926282092200364, 0.019072250939114355, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.0518878885223063, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02079152269361806, 0.003860756465387416, 9.999999999998899e-05, 0.0245360544316241, 9.999999999998899e-05, 0.10027683525177622, 0.0814204861567368, 0.07779699142088703, 0.0613821587889406, 9.999999999998899e-05, 9.999999999998899e-05, 0.051692826436534056, 0.008599796455260877, 0.06269525387654395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015037384282288957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03819978823181902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668694793169583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13400690963871875, 0.1070271971752389, 0.14838054695461433, 0.09593725008012821, 0.11717738747854911, 0.09580441870675127, 0.14297175756149938, 0.1956728817223523, 0.17734522242518813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.029693836183603328, 0.02253081119458822, 0.00951591052211953, 0.021775760515233777, 0.0267656688986897, 0.08958512532733043, 0.11879735288140714, 0.09665695499664528, 0.09855305120349966, 0.14378479426964308, 0.11268573400820259, 0.11194933311238253, 0.0880057527124063, 0.07726393575557644, 0.1208572478246055, 0.13511263726746237, 0.13655574209688892, 0.13267571181674465, 0.15406665992589752, 0.12006779551002178, 0.11786988341426607, 0.11131974935032907, 0.09276260859514862, 0.0634102174126483, 0.05100979376879533, 0.04266203815115788, 0.07792350871800668, 0.08281903925222611, 0.06915583224282451, 0.05648699256316181, 0.04267408639510539, 0.036004999454323894, 0.2026296423102627, 0.19715181333478338, 0.18902314368249462, 0.16281908860082372, 0.16033436607645546, 0.1492506173832051, 0.1653105608375448, 0.16171459342391048, 0.16759357846566103, 9.999999999998899e-05, 0.12734369690726888, 9.999999999998899e-05, 9.999999999998899e-05, 0.14480757933454225, 0.1263523016000221, 0.14618174581911303, 9.999999999998899e-05, 9.999999999998899e-05, 0.08943323543559578, 0.10583510791091844, 0.05626128006000852, 0.11128215937532282, 0.1207914665021157, 0.07016219131246926, 0.06376478013266473, 0.057444113192110624, 0.08877047267739602, 0.09604910305149295, 0.04695524870259482, 0.07985504067403526, 0.023872804592107832, 0.039458657322120616, 0.045511073114331335, 0.0611860857002684, 0.05028520148937221, 0.07240978780486063, 0.13092929489775929, 0.17792225772560466, 0.15586377974680532, 0.14674781831895067, 0.1654217984697881, 0.1391591603256549, 0.16288901271756573, 0.1622731494572508, 0.16065170780556748, 0.026505965105878437, 0.06576127633464202, 0.031393493129599714, 0.025489339107153453, 0.03266135924924385, 0.05887258034435905, 0.03160087508848952, 0.036121115591911446, 0.037169430943314374]}, "mutation_prompt": null}
{"id": "5824ce3a-753f-4632-9e00-ca5f09845412", "solution": "class AdaptiveStepSizeDEImproved(AdaptiveStepSizeDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_factor = 0.5\n\n    def mutation(self, target, population, diversity, fitness, iteration):\n        fitness_diff = np.mean(np.abs(np.diff(fitness)))\n        dynamic_factor = np.clip(1.0 / (1.0 + fitness_diff), 0.1, 0.9)\n        self.F = self.mutation_factor * dynamic_factor\n        return super().mutation(target, population, diversity, fitness, iteration)", "name": "AdaptiveStepSizeDEImproved", "description": "Introducing a dynamic mutation factor that adapts based on the fitness improvement history to promote faster convergence.", "configspace": "", "generation": 36, "fitness": 0.05556792005948804, "feedback": "The algorithm AdaptiveStepSizeDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "0d17b603-6a4a-4cad-a545-44a002c0ed90", "metadata": {"aucs": [0.12825047469507078, 0.10094813716855477, 0.11117248178279182, 0.036586981845129096, 0.05459775112705467, 0.02664361132998383, 0.05436006300432472, 0.06363026082802536, 0.0676987316292873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02685441608770356, 0.026871208292071014, 0.03229520267964836, 0.02247173737206709, 0.010276682350517374, 0.04182868359907643, 0.014866880083634348, 0.005077187516636661, 0.0008537160699261248, 0.00895793481122853, 0.011893913577206705, 0.03243332768078344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.028178333906266007, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030623865100396497, 0.018078387887018654, 9.999999999998899e-05, 9.999999999998899e-05, 0.016762591174482977, 9.999999999998899e-05, 0.12698535058521354, 0.11296757028146565, 0.09549509793698929, 0.0210134805165777, 9.999999999998899e-05, 9.999999999998899e-05, 0.0364760197813111, 9.999999999998899e-05, 0.09492537725464156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012726882786423976, 9.999999999998899e-05, 0.002913386676903773, 9.999999999998899e-05, 9.999999999998899e-05, 0.01132394233431444, 9.999999999998899e-05, 0.006550821091102277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019061588722836476, 9.999999999998899e-05, 0.09700487665702218, 0.04688687182088147, 0.009979653043100778, 0.03587448040475849, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14288371933114885, 0.10725949329980011, 0.1650373874672315, 0.0944890160574714, 0.10665856806780372, 0.09580441870675127, 0.1505144908001963, 0.26535271719736164, 0.15854503361839034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666528076644475, 0.029367268005093705, 0.033249668281803646, 0.017246923232118183, 0.02614851014807773, 0.030231859284301055, 0.1252337915020083, 0.1274889192994506, 0.128048678707104, 0.1267859415735174, 0.07970801204687161, 0.1009010286395049, 0.08679318117040569, 0.10712566891274711, 0.09372370977999633, 0.1356858615285197, 0.12726137490406886, 0.1269758942042012, 0.12345399124285084, 0.15102515849624465, 0.1294558849607147, 0.12949204676272563, 0.1288375229061257, 0.12066502620979502, 0.06160522875410823, 0.07913464229239286, 0.06596736451596952, 0.07056956284735061, 0.08935249378717014, 0.0814129505814899, 0.06275091555938017, 0.06551402943139206, 0.05105802400495485, 0.18311579509032716, 0.14430579942448762, 0.18045350929639847, 0.18141772492754316, 0.1848547429757934, 0.17913113295752736, 0.18834435525286353, 0.16719156959883208, 0.177510095012121, 0.1320597435384463, 0.12654385677555424, 0.14122213595279487, 9.999999999998899e-05, 0.17168438591278956, 0.13766617862496167, 0.015520293618439762, 0.05030195315959485, 9.999999999998899e-05, 0.12648411429533457, 0.1509391760618255, 0.10901375155857007, 0.1392455916457349, 0.1207914665021157, 0.061750941843425444, 0.06125249450447612, 0.058375878621940824, 0.09402610999677619, 0.0656914243018778, 0.04752908010430623, 0.036691570395397166, 0.02388597908668666, 0.05986345671625981, 0.047643135064953324, 0.04772888787021379, 0.0655588394739951, 0.05932597235606385, 0.17399815635290483, 0.1585196320636132, 0.16847983225658225, 0.17345104309159654, 0.1777496070577017, 0.16423515392605836, 0.16846104698916675, 0.17925789768969624, 0.1788815637633856, 0.06727994680248395, 0.0943354887466219, 0.042542123565349144, 0.0445019961967299, 0.04022294668269055, 0.07383563303839458, 0.03876915432306338, 0.03856520788085671, 0.046460024221573026]}, "mutation_prompt": null}
{"id": "9e62a37d-7cd0-4b66-ab07-4f531468a92b", "solution": "class AdaptiveStepSizeDEImproved(AdaptiveStepSizeDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_factor = 0.5\n\n    def mutation(self, target, population, diversity, fitness, iteration):\n        fitness_diff = np.mean(np.abs(np.diff(fitness)))\n        dynamic_factor = np.clip(1.0 / (1.0 + fitness_diff), 0.1, 0.9)\n        self.F = self.mutation_factor * dynamic_factor\n        return super().mutation(target, population, diversity, fitness, iteration)", "name": "AdaptiveStepSizeDEImproved", "description": "Introducing a dynamic mutation factor that adapts based on the fitness improvement history to promote faster convergence.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5824ce3a-753f-4632-9e00-ca5f09845412", "metadata": {"aucs": [0.12825047469507078, 0.10094813716855477, 0.11117248178279182, 0.036586981845129096, 0.05459775112705467, 0.02664361132998383, 0.05436006300432472, 0.06363026082802536, 0.0676987316292873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02685441608770356, 0.026871208292071014, 0.03229520267964836, 0.02247173737206709, 0.010276682350517374, 0.04182868359907643, 0.014866880083634348, 0.005077187516636661, 0.0008537160699261248, 0.00895793481122853, 0.011893913577206705, 0.03243332768078344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.028178333906266007, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030623865100396497, 0.018078387887018654, 9.999999999998899e-05, 9.999999999998899e-05, 0.016762591174482977, 9.999999999998899e-05, 0.12698535058521354, 0.11296757028146565, 0.09549509793698929, 0.0210134805165777, 9.999999999998899e-05, 9.999999999998899e-05, 0.0364760197813111, 9.999999999998899e-05, 0.09492537725464156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012726882786423976, 9.999999999998899e-05, 0.002913386676903773, 9.999999999998899e-05, 9.999999999998899e-05, 0.01132394233431444, 9.999999999998899e-05, 0.006550821091102277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019061588722836476, 9.999999999998899e-05, 0.09700487665702218, 0.04688687182088147, 0.009979653043100778, 0.03587448040475849, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14288371933114885, 0.10725949329980011, 0.1650373874672315, 0.0944890160574714, 0.10665856806780372, 0.09580441870675127, 0.1505144908001963, 0.26535271719736164, 0.15854503361839034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666528076644475, 0.029367268005093705, 0.033249668281803646, 0.017246923232118183, 0.02614851014807773, 0.030231859284301055, 0.1252337915020083, 0.1274889192994506, 0.128048678707104, 0.1267859415735174, 0.07970801204687161, 0.1009010286395049, 0.08679318117040569, 0.10712566891274711, 0.09372370977999633, 0.1356858615285197, 0.12726137490406886, 0.1269758942042012, 0.12345399124285084, 0.15102515849624465, 0.1294558849607147, 0.12949204676272563, 0.1288375229061257, 0.12066502620979502, 0.06160522875410823, 0.07913464229239286, 0.06596736451596952, 0.07056956284735061, 0.08935249378717014, 0.0814129505814899, 0.06275091555938017, 0.06551402943139206, 0.05105802400495485, 0.18311579509032716, 0.14430579942448762, 0.18045350929639847, 0.18141772492754316, 0.1848547429757934, 0.17913113295752736, 0.18834435525286353, 0.16719156959883208, 0.177510095012121, 0.1320597435384463, 0.12654385677555424, 0.14122213595279487, 9.999999999998899e-05, 0.17168438591278956, 0.13766617862496167, 0.015520293618439762, 0.05030195315959485, 9.999999999998899e-05, 0.12648411429533457, 0.1509391760618255, 0.10901375155857007, 0.1392455916457349, 0.1207914665021157, 0.061750941843425444, 0.06125249450447612, 0.058375878621940824, 0.09402610999677619, 0.0656914243018778, 0.04752908010430623, 0.036691570395397166, 0.02388597908668666, 0.05986345671625981, 0.047643135064953324, 0.04772888787021379, 0.0655588394739951, 0.05932597235606385, 0.17399815635290483, 0.1585196320636132, 0.16847983225658225, 0.17345104309159654, 0.1777496070577017, 0.16423515392605836, 0.16846104698916675, 0.17925789768969624, 0.1788815637633856, 0.06727994680248395, 0.0943354887466219, 0.042542123565349144, 0.0445019961967299, 0.04022294668269055, 0.07383563303839458, 0.03876915432306338, 0.03856520788085671, 0.046460024221573026]}, "mutation_prompt": null}
{"id": "f6873941-b2ec-475e-97ce-47e1a44cdeaf", "solution": "class AdaptiveStepSizeDEImproved(AdaptiveStepSizeDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_factor = 0.5\n\n    def mutation(self, target, population, diversity, fitness, iteration):\n        fitness_diff = np.mean(np.abs(np.diff(fitness)))\n        dynamic_factor = np.clip(1.0 / (1.0 + fitness_diff), 0.1, 0.9)\n        self.F = self.mutation_factor * dynamic_factor\n        return super().mutation(target, population, diversity, fitness, iteration)", "name": "AdaptiveStepSizeDEImproved", "description": "Introducing a dynamic mutation factor that adapts based on the fitness improvement history to promote faster convergence.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5824ce3a-753f-4632-9e00-ca5f09845412", "metadata": {"aucs": [0.12825047469507078, 0.10094813716855477, 0.11117248178279182, 0.036586981845129096, 0.05459775112705467, 0.02664361132998383, 0.05436006300432472, 0.06363026082802536, 0.0676987316292873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02685441608770356, 0.026871208292071014, 0.03229520267964836, 0.02247173737206709, 0.010276682350517374, 0.04182868359907643, 0.014866880083634348, 0.005077187516636661, 0.0008537160699261248, 0.00895793481122853, 0.011893913577206705, 0.03243332768078344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.028178333906266007, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030623865100396497, 0.018078387887018654, 9.999999999998899e-05, 9.999999999998899e-05, 0.016762591174482977, 9.999999999998899e-05, 0.12698535058521354, 0.11296757028146565, 0.09549509793698929, 0.0210134805165777, 9.999999999998899e-05, 9.999999999998899e-05, 0.0364760197813111, 9.999999999998899e-05, 0.09492537725464156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012726882786423976, 9.999999999998899e-05, 0.002913386676903773, 9.999999999998899e-05, 9.999999999998899e-05, 0.01132394233431444, 9.999999999998899e-05, 0.006550821091102277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019061588722836476, 9.999999999998899e-05, 0.09700487665702218, 0.04688687182088147, 0.009979653043100778, 0.03587448040475849, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14288371933114885, 0.10725949329980011, 0.1650373874672315, 0.0944890160574714, 0.10665856806780372, 0.09580441870675127, 0.1505144908001963, 0.26535271719736164, 0.15854503361839034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666528076644475, 0.029367268005093705, 0.033249668281803646, 0.017246923232118183, 0.02614851014807773, 0.030231859284301055, 0.1252337915020083, 0.1274889192994506, 0.128048678707104, 0.1267859415735174, 0.07970801204687161, 0.1009010286395049, 0.08679318117040569, 0.10712566891274711, 0.09372370977999633, 0.1356858615285197, 0.12726137490406886, 0.1269758942042012, 0.12345399124285084, 0.15102515849624465, 0.1294558849607147, 0.12949204676272563, 0.1288375229061257, 0.12066502620979502, 0.06160522875410823, 0.07913464229239286, 0.06596736451596952, 0.07056956284735061, 0.08935249378717014, 0.0814129505814899, 0.06275091555938017, 0.06551402943139206, 0.05105802400495485, 0.18311579509032716, 0.14430579942448762, 0.18045350929639847, 0.18141772492754316, 0.1848547429757934, 0.17913113295752736, 0.18834435525286353, 0.16719156959883208, 0.177510095012121, 0.1320597435384463, 0.12654385677555424, 0.14122213595279487, 9.999999999998899e-05, 0.17168438591278956, 0.13766617862496167, 0.015520293618439762, 0.05030195315959485, 9.999999999998899e-05, 0.12648411429533457, 0.1509391760618255, 0.10901375155857007, 0.1392455916457349, 0.1207914665021157, 0.061750941843425444, 0.06125249450447612, 0.058375878621940824, 0.09402610999677619, 0.0656914243018778, 0.04752908010430623, 0.036691570395397166, 0.02388597908668666, 0.05986345671625981, 0.047643135064953324, 0.04772888787021379, 0.0655588394739951, 0.05932597235606385, 0.17399815635290483, 0.1585196320636132, 0.16847983225658225, 0.17345104309159654, 0.1777496070577017, 0.16423515392605836, 0.16846104698916675, 0.17925789768969624, 0.1788815637633856, 0.06727994680248395, 0.0943354887466219, 0.042542123565349144, 0.0445019961967299, 0.04022294668269055, 0.07383563303839458, 0.03876915432306338, 0.03856520788085671, 0.046460024221573026]}, "mutation_prompt": null}
{"id": "d6b5157c-ac2d-4c3a-b471-0b3f2eafe23c", "solution": "import numpy as np\n\nclass SelfAdaptiveDEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n        self.mutation_prob = 1.0\n\n    def __call__(self, func):\n        def mutation(target, population, diversity, fitness, iteration):\n            self.mutation_prob = np.clip(1.0 / (1.0 + diversity), 0.1, 0.9)\n            return population[np.random.choice(range(len(population)), 2, replace=False)]\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(10)]\n        fitness = [func(ind) for ind in population]\n        diversity = np.std(population)\n\n        for _ in range(self.budget):\n            new_population = []\n            for idx, target in enumerate(population):\n                a, b = mutation(target, population, diversity, fitness, _)\n                trial = target + self.F * (a - b)\n                for i in range(self.dim):\n                    if np.random.rand() > self.CR:\n                        trial[i] = target[i]\n                f_trial = func(trial)\n                if f_trial < fitness[idx]:\n                    population[idx] = trial\n                    fitness[idx] = f_trial\n                    if f_trial < best_fitness:\n                        best_solution = trial\n                        best_fitness = f_trial\n            diversity = np.std(population)\n\n        return best_solution", "name": "SelfAdaptiveDEImproved", "description": "Introducing a self-adaptive mutation probability mechanism based on the diversity of the population to enhance exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('only integer scalar arrays can be converted to a scalar index').", "error": "TypeError('only integer scalar arrays can be converted to a scalar index')", "parent_id": "5824ce3a-753f-4632-9e00-ca5f09845412", "metadata": {}, "mutation_prompt": null}
{"id": "9b8baa06-8b09-4bb7-b60a-ea138901c8ef", "solution": "class AdaptiveStepSizeDEImproved(AdaptiveStepSizeDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_factor = 0.5\n\n    def mutation(self, target, population, diversity, fitness, iteration):\n        fitness_diff = np.mean(np.abs(np.diff(fitness)))\n        dynamic_factor = np.clip(1.0 / (1.0 + fitness_diff), 0.1, 0.9)\n        self.F = self.mutation_factor * dynamic_factor\n        return super().mutation(target, population, diversity, fitness, iteration)", "name": "AdaptiveStepSizeDEImproved", "description": "Introducing a dynamic mutation factor that adapts based on the fitness improvement history to promote faster convergence.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5824ce3a-753f-4632-9e00-ca5f09845412", "metadata": {"aucs": [0.12825047469507078, 0.10094813716855477, 0.11117248178279182, 0.036586981845129096, 0.05459775112705467, 0.02664361132998383, 0.05436006300432472, 0.06363026082802536, 0.0676987316292873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02685441608770356, 0.026871208292071014, 0.03229520267964836, 0.02247173737206709, 0.010276682350517374, 0.04182868359907643, 0.014866880083634348, 0.005077187516636661, 0.0008537160699261248, 0.00895793481122853, 0.011893913577206705, 0.03243332768078344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.028178333906266007, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030623865100396497, 0.018078387887018654, 9.999999999998899e-05, 9.999999999998899e-05, 0.016762591174482977, 9.999999999998899e-05, 0.12698535058521354, 0.11296757028146565, 0.09549509793698929, 0.0210134805165777, 9.999999999998899e-05, 9.999999999998899e-05, 0.0364760197813111, 9.999999999998899e-05, 0.09492537725464156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012726882786423976, 9.999999999998899e-05, 0.002913386676903773, 9.999999999998899e-05, 9.999999999998899e-05, 0.01132394233431444, 9.999999999998899e-05, 0.006550821091102277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019061588722836476, 9.999999999998899e-05, 0.09700487665702218, 0.04688687182088147, 0.009979653043100778, 0.03587448040475849, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14288371933114885, 0.10725949329980011, 0.1650373874672315, 0.0944890160574714, 0.10665856806780372, 0.09580441870675127, 0.1505144908001963, 0.26535271719736164, 0.15854503361839034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666528076644475, 0.029367268005093705, 0.033249668281803646, 0.017246923232118183, 0.02614851014807773, 0.030231859284301055, 0.1252337915020083, 0.1274889192994506, 0.128048678707104, 0.1267859415735174, 0.07970801204687161, 0.1009010286395049, 0.08679318117040569, 0.10712566891274711, 0.09372370977999633, 0.1356858615285197, 0.12726137490406886, 0.1269758942042012, 0.12345399124285084, 0.15102515849624465, 0.1294558849607147, 0.12949204676272563, 0.1288375229061257, 0.12066502620979502, 0.06160522875410823, 0.07913464229239286, 0.06596736451596952, 0.07056956284735061, 0.08935249378717014, 0.0814129505814899, 0.06275091555938017, 0.06551402943139206, 0.05105802400495485, 0.18311579509032716, 0.14430579942448762, 0.18045350929639847, 0.18141772492754316, 0.1848547429757934, 0.17913113295752736, 0.18834435525286353, 0.16719156959883208, 0.177510095012121, 0.1320597435384463, 0.12654385677555424, 0.14122213595279487, 9.999999999998899e-05, 0.17168438591278956, 0.13766617862496167, 0.015520293618439762, 0.05030195315959485, 9.999999999998899e-05, 0.12648411429533457, 0.1509391760618255, 0.10901375155857007, 0.1392455916457349, 0.1207914665021157, 0.061750941843425444, 0.06125249450447612, 0.058375878621940824, 0.09402610999677619, 0.0656914243018778, 0.04752908010430623, 0.036691570395397166, 0.02388597908668666, 0.05986345671625981, 0.047643135064953324, 0.04772888787021379, 0.0655588394739951, 0.05932597235606385, 0.17399815635290483, 0.1585196320636132, 0.16847983225658225, 0.17345104309159654, 0.1777496070577017, 0.16423515392605836, 0.16846104698916675, 0.17925789768969624, 0.1788815637633856, 0.06727994680248395, 0.0943354887466219, 0.042542123565349144, 0.0445019961967299, 0.04022294668269055, 0.07383563303839458, 0.03876915432306338, 0.03856520788085671, 0.046460024221573026]}, "mutation_prompt": null}
{"id": "9256578b-a31a-4eb2-977b-502985d9bdc7", "solution": "class DynamicMutationDEImproved(DifferentialEvolution):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_factor = 0.5\n\n    def mutation(self, target, population, diversity, fitness, iteration):\n        diversity_factor = np.clip(1.0 / (1.0 + diversity), 0.1, 0.9)\n        self.F = self.mutation_factor * diversity_factor\n        return super().mutation(target, population, diversity, fitness, iteration)", "name": "DynamicMutationDEImproved", "description": "Implementing a dynamic mutation factor that adjusts based on the population's diversity to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'DifferentialEvolution' is not defined\").", "error": "NameError(\"name 'DifferentialEvolution' is not defined\")", "parent_id": "5824ce3a-753f-4632-9e00-ca5f09845412", "metadata": {}, "mutation_prompt": null}
{"id": "69e08d9d-ccd4-42d0-85d1-b119cb19ef07", "solution": "class AdaptiveStepSizeDEImprovedFastConvergence(AdaptiveStepSizeDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_factor = 0.5\n\n    def mutation(self, target, population, diversity, fitness, iteration):\n        diversity_factor = np.mean(diversity) if np.mean(diversity) != 0 else 0.01\n        self.F = self.mutation_factor * (1.0 / diversity_factor)\n        return super().mutation(target, population, diversity, fitness, iteration)", "name": "AdaptiveStepSizeDEImprovedFastConvergence", "description": "Implementing a novel adaptive parameter update strategy based on population diversity to enhance convergence speed.", "configspace": "", "generation": 42, "fitness": 0.0551204249123637, "feedback": "The algorithm AdaptiveStepSizeDEImprovedFastConvergence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "5824ce3a-753f-4632-9e00-ca5f09845412", "metadata": {"aucs": [0.1295429723181838, 0.0967442322403893, 0.11432123637809166, 0.03597633765994668, 0.05490841817190162, 0.026693200033969466, 0.05471993098281769, 0.06472747050516992, 0.06809512859000966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004176781301367782, 0.02566828321301895, 0.0344639865125157, 0.03395786690964919, 0.02916095634716276, 0.004309751771574888, 0.028262777499449165, 0.01322070964592681, 0.0034293125506350552, 0.0009947330387761744, 0.0101520464403968, 0.007457635301475807, 0.025534579252700862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.030410585928453693, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031100798352601267, 0.017864505553816912, 9.999999999998899e-05, 9.999999999998899e-05, 0.016997695060064322, 9.999999999998899e-05, 0.12843952776953105, 0.1020624056794035, 0.10085669152198917, 0.02105340949364576, 9.999999999998899e-05, 9.999999999998899e-05, 0.033345881435412617, 9.999999999998899e-05, 0.0930003364553943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017961292725930944, 0.06146310546032452, 9.999999999998899e-05, 0.012043889157863474, 9.999999999998899e-05, 0.0035287943678038447, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017532158753720828, 0.10382018452269315, 0.043036198085146915, 0.016980713951722515, 0.018462809472560737, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14407355596329308, 0.10788123322060872, 0.16250625156008625, 0.09459701431543033, 0.1084253710441635, 0.09580441870675127, 0.15047607692319276, 0.260794205124549, 0.1661888462703982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007578559912303162, 0.03061024398829848, 0.01759993274736349, 0.017582735216005507, 0.02298195354482946, 0.02760345257738661, 0.1409845060278323, 0.12216688018092114, 0.09917451327868443, 0.11758867332686662, 0.10893320273946228, 0.09344077074556845, 0.08997049602879437, 0.09880193995784159, 0.09438921380044363, 0.1334504454430817, 0.1350559589406981, 0.12063010908614236, 0.1302888415707747, 0.14811995858664417, 0.13447134162844776, 0.11668892087392502, 0.12573417258537734, 0.11785608762665434, 0.06612567131401159, 0.06782157495806895, 0.04654105558917143, 0.06777062768831454, 0.09935331150525761, 0.08069826626311982, 0.05687803734165742, 0.07662378618015409, 0.03686017080940418, 0.18969613406992303, 0.15376771374947207, 0.18167550116381326, 0.2078882788315678, 0.18129114572359983, 0.17127437962090353, 0.18089204343214638, 0.1757152398396663, 0.17941557829294486, 0.13631148826689043, 0.1527275928051649, 0.13135148415490638, 9.999999999998899e-05, 0.15504696676487506, 0.14241307032756834, 0.019896562794619932, 0.025432031357339846, 9.999999999998899e-05, 0.10753945391789821, 0.12075994622804576, 0.10076918990730388, 0.12286685652014728, 0.1207914665021157, 0.061750941843425444, 0.06133166283143143, 0.0584829948949247, 0.09379907615823246, 0.08466332534599152, 0.04683120800990215, 0.06781197979169973, 0.022901108972108508, 0.05704058176706317, 0.045511073114331335, 0.04805367881923717, 0.05943336840173852, 0.06402876316194883, 0.18295808507975986, 0.186229162480965, 0.1575832658173818, 0.14485249793166444, 0.17310419378376085, 0.16391275725181897, 0.1736315743166299, 0.1869726863427209, 0.21706678789047973, 0.04620368956582788, 0.06413297010473429, 0.05058229955759075, 0.0414753826375065, 0.028092439360322574, 0.061424462783903566, 0.04216783476584185, 0.03544257202424883, 0.03398725177275208]}, "mutation_prompt": null}
{"id": "0ecc51ed-3198-481a-8a38-e2b141c285cf", "solution": "import numpy as np\n\nclass ImprovedMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def mutation(self, target, population, diversity, fitness, iteration):\n        F_list = np.random.uniform(0, 1, len(fitness))\n        F_prob = np.where(fitness == np.min(fitness), 0.9, 0.1)  # Probability based on fitness\n        self.F = np.where(F_list < F_prob, np.random.uniform(0, 1), self.F)  # Probabilistic mutation factor\n        return self.F", "name": "ImprovedMutationDE", "description": "Introducing a novel mutation strategy that incorporates a probabilistic component based on fitness values to enhance exploration and exploitation balance.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'ImprovedMutationDE' object is not callable\").", "error": "TypeError(\"'ImprovedMutationDE' object is not callable\")", "parent_id": "5824ce3a-753f-4632-9e00-ca5f09845412", "metadata": {}, "mutation_prompt": null}
{"id": "51410f7b-2262-47af-a9db-f65a386d145e", "solution": "class AdaptiveStepSizeDEImproved(AdaptiveStepSizeDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_factor = 0.5\n\n    def mutation(self, target, population, diversity, fitness, iteration):\n        fitness_diff = np.mean(np.abs(np.diff(fitness)))\n        dynamic_factor = np.clip(1.0 / (1.0 + fitness_diff), 0.1, 0.9)\n        self.F = self.mutation_factor * dynamic_factor\n        return super().mutation(target, population, diversity, fitness, iteration)", "name": "AdaptiveStepSizeDEImproved", "description": "Introducing a dynamic mutation factor that adapts based on the fitness improvement history to promote faster convergence.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5824ce3a-753f-4632-9e00-ca5f09845412", "metadata": {"aucs": [0.12825047469507078, 0.10094813716855477, 0.11117248178279182, 0.036586981845129096, 0.05459775112705467, 0.02664361132998383, 0.05436006300432472, 0.06363026082802536, 0.0676987316292873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02685441608770356, 0.026871208292071014, 0.03229520267964836, 0.02247173737206709, 0.010276682350517374, 0.04182868359907643, 0.014866880083634348, 0.005077187516636661, 0.0008537160699261248, 0.00895793481122853, 0.011893913577206705, 0.03243332768078344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.028178333906266007, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030623865100396497, 0.018078387887018654, 9.999999999998899e-05, 9.999999999998899e-05, 0.016762591174482977, 9.999999999998899e-05, 0.12698535058521354, 0.11296757028146565, 0.09549509793698929, 0.0210134805165777, 9.999999999998899e-05, 9.999999999998899e-05, 0.0364760197813111, 9.999999999998899e-05, 0.09492537725464156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012726882786423976, 9.999999999998899e-05, 0.002913386676903773, 9.999999999998899e-05, 9.999999999998899e-05, 0.01132394233431444, 9.999999999998899e-05, 0.006550821091102277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019061588722836476, 9.999999999998899e-05, 0.09700487665702218, 0.04688687182088147, 0.009979653043100778, 0.03587448040475849, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14288371933114885, 0.10725949329980011, 0.1650373874672315, 0.0944890160574714, 0.10665856806780372, 0.09580441870675127, 0.1505144908001963, 0.26535271719736164, 0.15854503361839034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666528076644475, 0.029367268005093705, 0.033249668281803646, 0.017246923232118183, 0.02614851014807773, 0.030231859284301055, 0.1252337915020083, 0.1274889192994506, 0.128048678707104, 0.1267859415735174, 0.07970801204687161, 0.1009010286395049, 0.08679318117040569, 0.10712566891274711, 0.09372370977999633, 0.1356858615285197, 0.12726137490406886, 0.1269758942042012, 0.12345399124285084, 0.15102515849624465, 0.1294558849607147, 0.12949204676272563, 0.1288375229061257, 0.12066502620979502, 0.06160522875410823, 0.07913464229239286, 0.06596736451596952, 0.07056956284735061, 0.08935249378717014, 0.0814129505814899, 0.06275091555938017, 0.06551402943139206, 0.05105802400495485, 0.18311579509032716, 0.14430579942448762, 0.18045350929639847, 0.18141772492754316, 0.1848547429757934, 0.17913113295752736, 0.18834435525286353, 0.16719156959883208, 0.177510095012121, 0.1320597435384463, 0.12654385677555424, 0.14122213595279487, 9.999999999998899e-05, 0.17168438591278956, 0.13766617862496167, 0.015520293618439762, 0.05030195315959485, 9.999999999998899e-05, 0.12648411429533457, 0.1509391760618255, 0.10901375155857007, 0.1392455916457349, 0.1207914665021157, 0.061750941843425444, 0.06125249450447612, 0.058375878621940824, 0.09402610999677619, 0.0656914243018778, 0.04752908010430623, 0.036691570395397166, 0.02388597908668666, 0.05986345671625981, 0.047643135064953324, 0.04772888787021379, 0.0655588394739951, 0.05932597235606385, 0.17399815635290483, 0.1585196320636132, 0.16847983225658225, 0.17345104309159654, 0.1777496070577017, 0.16423515392605836, 0.16846104698916675, 0.17925789768969624, 0.1788815637633856, 0.06727994680248395, 0.0943354887466219, 0.042542123565349144, 0.0445019961967299, 0.04022294668269055, 0.07383563303839458, 0.03876915432306338, 0.03856520788085671, 0.046460024221573026]}, "mutation_prompt": null}
{"id": "8c7c3fa7-a63b-40bb-bc75-3990d9f49f75", "solution": "class AdaptiveStepSizeDEImproved(AdaptiveStepSizeDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_factor = 0.5\n\n    def mutation(self, target, population, diversity, fitness, iteration):\n        fitness_diff = np.mean(np.abs(np.diff(fitness)))\n        dynamic_factor = np.clip(1.0 / (1.0 + fitness_diff), 0.1, 0.9)\n        self.F = self.mutation_factor * dynamic_factor\n        return super().mutation(target, population, diversity, fitness, iteration)", "name": "AdaptiveStepSizeDEImproved", "description": "Introducing a dynamic mutation factor that adapts based on the fitness improvement history to promote faster convergence.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5824ce3a-753f-4632-9e00-ca5f09845412", "metadata": {"aucs": [0.12825047469507078, 0.10094813716855477, 0.11117248178279182, 0.036586981845129096, 0.05459775112705467, 0.02664361132998383, 0.05436006300432472, 0.06363026082802536, 0.0676987316292873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02685441608770356, 0.026871208292071014, 0.03229520267964836, 0.02247173737206709, 0.010276682350517374, 0.04182868359907643, 0.014866880083634348, 0.005077187516636661, 0.0008537160699261248, 0.00895793481122853, 0.011893913577206705, 0.03243332768078344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.028178333906266007, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030623865100396497, 0.018078387887018654, 9.999999999998899e-05, 9.999999999998899e-05, 0.016762591174482977, 9.999999999998899e-05, 0.12698535058521354, 0.11296757028146565, 0.09549509793698929, 0.0210134805165777, 9.999999999998899e-05, 9.999999999998899e-05, 0.0364760197813111, 9.999999999998899e-05, 0.09492537725464156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012726882786423976, 9.999999999998899e-05, 0.002913386676903773, 9.999999999998899e-05, 9.999999999998899e-05, 0.01132394233431444, 9.999999999998899e-05, 0.006550821091102277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019061588722836476, 9.999999999998899e-05, 0.09700487665702218, 0.04688687182088147, 0.009979653043100778, 0.03587448040475849, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14288371933114885, 0.10725949329980011, 0.1650373874672315, 0.0944890160574714, 0.10665856806780372, 0.09580441870675127, 0.1505144908001963, 0.26535271719736164, 0.15854503361839034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666528076644475, 0.029367268005093705, 0.033249668281803646, 0.017246923232118183, 0.02614851014807773, 0.030231859284301055, 0.1252337915020083, 0.1274889192994506, 0.128048678707104, 0.1267859415735174, 0.07970801204687161, 0.1009010286395049, 0.08679318117040569, 0.10712566891274711, 0.09372370977999633, 0.1356858615285197, 0.12726137490406886, 0.1269758942042012, 0.12345399124285084, 0.15102515849624465, 0.1294558849607147, 0.12949204676272563, 0.1288375229061257, 0.12066502620979502, 0.06160522875410823, 0.07913464229239286, 0.06596736451596952, 0.07056956284735061, 0.08935249378717014, 0.0814129505814899, 0.06275091555938017, 0.06551402943139206, 0.05105802400495485, 0.18311579509032716, 0.14430579942448762, 0.18045350929639847, 0.18141772492754316, 0.1848547429757934, 0.17913113295752736, 0.18834435525286353, 0.16719156959883208, 0.177510095012121, 0.1320597435384463, 0.12654385677555424, 0.14122213595279487, 9.999999999998899e-05, 0.17168438591278956, 0.13766617862496167, 0.015520293618439762, 0.05030195315959485, 9.999999999998899e-05, 0.12648411429533457, 0.1509391760618255, 0.10901375155857007, 0.1392455916457349, 0.1207914665021157, 0.061750941843425444, 0.06125249450447612, 0.058375878621940824, 0.09402610999677619, 0.0656914243018778, 0.04752908010430623, 0.036691570395397166, 0.02388597908668666, 0.05986345671625981, 0.047643135064953324, 0.04772888787021379, 0.0655588394739951, 0.05932597235606385, 0.17399815635290483, 0.1585196320636132, 0.16847983225658225, 0.17345104309159654, 0.1777496070577017, 0.16423515392605836, 0.16846104698916675, 0.17925789768969624, 0.1788815637633856, 0.06727994680248395, 0.0943354887466219, 0.042542123565349144, 0.0445019961967299, 0.04022294668269055, 0.07383563303839458, 0.03876915432306338, 0.03856520788085671, 0.046460024221573026]}, "mutation_prompt": null}
{"id": "bf7356ec-1d57-4fa8-acb8-8c6bd058515d", "solution": "class AdaptiveMutationDEImproved(AdaptiveStepSizeDEImproved):\n    def mutation(self, target, population, diversity, fitness, iteration):\n        diversity_factor = np.clip(1.0 / (1.0 + diversity), 0.1, 0.9)\n        self.F = self.mutation_factor * diversity_factor\n        return super().mutation(target, population, diversity, fitness, iteration)", "name": "AdaptiveMutationDEImproved", "description": "Implementing a novel adaptive mutation strategy that adjusts the mutation factor based on the population diversity to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 46, "fitness": 0.05556792005948804, "feedback": "The algorithm AdaptiveMutationDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "5824ce3a-753f-4632-9e00-ca5f09845412", "metadata": {"aucs": [0.12825047469507078, 0.10094813716855477, 0.11117248178279182, 0.036586981845129096, 0.05459775112705467, 0.02664361132998383, 0.05436006300432472, 0.06363026082802536, 0.0676987316292873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02685441608770356, 0.026871208292071014, 0.03229520267964836, 0.02247173737206709, 0.010276682350517374, 0.04182868359907643, 0.014866880083634348, 0.005077187516636661, 0.0008537160699261248, 0.00895793481122853, 0.011893913577206705, 0.03243332768078344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.028178333906266007, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030623865100396497, 0.018078387887018654, 9.999999999998899e-05, 9.999999999998899e-05, 0.016762591174482977, 9.999999999998899e-05, 0.12698535058521354, 0.11296757028146565, 0.09549509793698929, 0.0210134805165777, 9.999999999998899e-05, 9.999999999998899e-05, 0.0364760197813111, 9.999999999998899e-05, 0.09492537725464156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012726882786423976, 9.999999999998899e-05, 0.002913386676903773, 9.999999999998899e-05, 9.999999999998899e-05, 0.01132394233431444, 9.999999999998899e-05, 0.006550821091102277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019061588722836476, 9.999999999998899e-05, 0.09700487665702218, 0.04688687182088147, 0.009979653043100778, 0.03587448040475849, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14288371933114885, 0.10725949329980011, 0.1650373874672315, 0.0944890160574714, 0.10665856806780372, 0.09580441870675127, 0.1505144908001963, 0.26535271719736164, 0.15854503361839034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666528076644475, 0.029367268005093705, 0.033249668281803646, 0.017246923232118183, 0.02614851014807773, 0.030231859284301055, 0.1252337915020083, 0.1274889192994506, 0.128048678707104, 0.1267859415735174, 0.07970801204687161, 0.1009010286395049, 0.08679318117040569, 0.10712566891274711, 0.09372370977999633, 0.1356858615285197, 0.12726137490406886, 0.1269758942042012, 0.12345399124285084, 0.15102515849624465, 0.1294558849607147, 0.12949204676272563, 0.1288375229061257, 0.12066502620979502, 0.06160522875410823, 0.07913464229239286, 0.06596736451596952, 0.07056956284735061, 0.08935249378717014, 0.0814129505814899, 0.06275091555938017, 0.06551402943139206, 0.05105802400495485, 0.18311579509032716, 0.14430579942448762, 0.18045350929639847, 0.18141772492754316, 0.1848547429757934, 0.17913113295752736, 0.18834435525286353, 0.16719156959883208, 0.177510095012121, 0.1320597435384463, 0.12654385677555424, 0.14122213595279487, 9.999999999998899e-05, 0.17168438591278956, 0.13766617862496167, 0.015520293618439762, 0.05030195315959485, 9.999999999998899e-05, 0.12648411429533457, 0.1509391760618255, 0.10901375155857007, 0.1392455916457349, 0.1207914665021157, 0.061750941843425444, 0.06125249450447612, 0.058375878621940824, 0.09402610999677619, 0.0656914243018778, 0.04752908010430623, 0.036691570395397166, 0.02388597908668666, 0.05986345671625981, 0.047643135064953324, 0.04772888787021379, 0.0655588394739951, 0.05932597235606385, 0.17399815635290483, 0.1585196320636132, 0.16847983225658225, 0.17345104309159654, 0.1777496070577017, 0.16423515392605836, 0.16846104698916675, 0.17925789768969624, 0.1788815637633856, 0.06727994680248395, 0.0943354887466219, 0.042542123565349144, 0.0445019961967299, 0.04022294668269055, 0.07383563303839458, 0.03876915432306338, 0.03856520788085671, 0.046460024221573026]}, "mutation_prompt": null}
{"id": "ebcc8f04-4d8e-4c6a-8410-2d8d501929c8", "solution": "class DynamicPopulationSizeDEImproved(DifferentialEvolution):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.population_size = 10\n\n    def selection(self, population, fitness, target):\n        if random.random() < 0.1 and len(population) < 2 * self.population_size:\n            new_member = self.init_population(1)\n            new_fitness = self.evaluate(new_member, self.func)\n            if new_fitness < fitness[target]:\n                population.append(new_member)\n                fitness.append(new_fitness)\n        return super().selection(population, fitness, target)", "name": "DynamicPopulationSizeDEImproved", "description": "Adding a dynamic population resizing mechanism that adjusts the population size based on the convergence rate to enhance exploration and exploitation balance.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'DifferentialEvolution' is not defined\").", "error": "NameError(\"name 'DifferentialEvolution' is not defined\")", "parent_id": "5824ce3a-753f-4632-9e00-ca5f09845412", "metadata": {}, "mutation_prompt": null}
{"id": "146799e4-87ac-45f6-8956-695aeb4e92b7", "solution": "class AdaptiveStepSizeDEImproved(AdaptiveStepSizeDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_factor = 0.5\n\n    def mutation(self, target, population, diversity, fitness, iteration):\n        diversity_factor = np.clip(1.0 / (1.0 + diversity), 0.1, 0.9)\n        self.F = self.mutation_factor * diversity_factor\n        return super().mutation(target, population, diversity, fitness, iteration)", "name": "AdaptiveStepSizeDEImproved", "description": "Introducing an adaptive mechanism to adjust the mutation factor based on the diversity of the population, aiming to enhance exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 48, "fitness": 0.055121589462568836, "feedback": "The algorithm AdaptiveStepSizeDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "5824ce3a-753f-4632-9e00-ca5f09845412", "metadata": {"aucs": [0.13027750682334804, 0.09847868411394756, 0.11275106294567738, 0.036430953979610825, 0.054718799874567625, 0.026796320404462004, 0.05461986391302509, 0.06429486560982856, 0.06796519140029955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032709979313695348, 0.02687137641672177, 0.03302927205299433, 0.053485258135970604, 0.016088799244424634, 0.009383375281233008, 0.033507963762364534, 0.01413667288370668, 0.004567132765898374, 0.0004041072742969609, 0.010624900371793089, 0.010987348095650495, 0.03446773056854413, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.02895309165212112, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029579033965959622, 0.01717623569875104, 9.999999999998899e-05, 9.999999999998899e-05, 0.016762591174482977, 9.999999999998899e-05, 0.12843952776953105, 0.1020780532954837, 0.09124307395607978, 0.014179138315023931, 9.999999999998899e-05, 9.999999999998899e-05, 0.037107174690764966, 9.999999999998899e-05, 0.09403445651621334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024757384827126083, 9.999999999998899e-05, 0.013785997432354868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09411602299898947, 0.038001895559623855, 0.034462069994287914, 0.04539994424038518, 9.999999999998899e-05, 9.999999999998899e-05, 0.05183174832810822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.143607220281033, 0.1070271971752389, 0.16340354512882438, 0.09455507152457865, 0.10770272110303669, 0.09580441870675127, 0.15168731048007633, 0.25579520812139067, 0.16131191636905662, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.03226132237797141, 0.02377367742849934, 0.009847889575082314, 0.01618618575225861, 0.047969631643906774, 0.1438351717561016, 0.12651217729860798, 0.1080137401548169, 0.12237936645875558, 0.10094027257595606, 0.09854400842302324, 0.11324220630893345, 0.09687685492309628, 0.08555272493809318, 0.12965821688589418, 0.13268483841036582, 0.12614147087092065, 0.12682509701299582, 0.15262059313679677, 0.13349062317516147, 0.11822884734383898, 0.1241854759123644, 0.10490838143467185, 0.05868782517563065, 0.07733997811260052, 0.06297781298260685, 0.06248621419753597, 0.09259673817678071, 0.07817753256842175, 0.05804224868774277, 0.0634415410980681, 0.06032870115303335, 0.1872892608896013, 0.1485655039865167, 0.17693096908058292, 0.16018420505597064, 0.1759503534221709, 0.17199176447456188, 0.17279517463709904, 0.16911992785091623, 0.19212580218570152, 0.1344748365172329, 0.13112018651371415, 0.1436882238173608, 9.999999999998899e-05, 0.14941023006409182, 0.13562385360853946, 0.007405776062601399, 0.053178506490770605, 9.999999999998899e-05, 0.11122107280134919, 0.1261747523920176, 0.1021973926229226, 0.12149628851478267, 0.1207914665021157, 0.061750941843425444, 0.06128441152434061, 0.05846202556052471, 0.09413056991113478, 0.07988118917480147, 0.046727271121228875, 0.061559339002128954, 0.022950426578216332, 0.057749352818238786, 0.046259070404261915, 0.04866567108296582, 0.06076532275567714, 0.06175219643408669, 0.18008896682691466, 0.16710494231660888, 0.14763022729669195, 0.16581996569782664, 0.16764794308321795, 0.1638904641949881, 0.16807150983703545, 0.1883431674057513, 0.18268848938219184, 0.05251080462050217, 0.08541140929425017, 0.04076125042142498, 0.04972170104534779, 0.044630022735660746, 0.07424378073398474, 0.040231893996395374, 0.037761269846053214, 0.03404979481122916]}, "mutation_prompt": null}
{"id": "3c1e21f0-3ba8-4e55-89b5-b58968babefb", "solution": "class AdaptiveMutationDEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        population = initialize_population(self.dim)\n        fitness = evaluate_population(population, func)\n        diversity = calculate_diversity(population)\n        \n        for i in range(self.budget):\n            target = select_target(population)\n            trial_vector = generate_trial_vector(target, population, self.mutation_factor)\n            trial_fitness = evaluate_individual(trial_vector, func)\n            \n            if trial_fitness < fitness[target]:\n                population[target] = trial_vector\n                fitness[target] = trial_fitness\n                diversity = calculate_diversity(population)\n                self.mutation_factor = adapt_mutation_factor(diversity)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveMutationDEImproved", "description": "Introducing a novel adaptive mutation strategy that dynamically adjusts the mutation factor based on the population's diversity to enhance convergence speed.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "5824ce3a-753f-4632-9e00-ca5f09845412", "metadata": {}, "mutation_prompt": null}
{"id": "20f20323-8e5d-423a-b62d-044f99999187", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 50, "fitness": 0.09144843562834938, "feedback": "The algorithm ProbabilisticMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "5824ce3a-753f-4632-9e00-ca5f09845412", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "63cb2efd-3d8d-4efe-b635-2692954f6389", "solution": "class DynamicMutationDE(ProbabilisticMutationDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.F_history = np.full(self.budget, self.F)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F_history[i] * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:\n                    self.F_history[i] = np.clip(np.random.normal(self.F_history[i], 0.1), 0.1, 0.9)\n                    \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicMutationDE", "description": "Implementing a dynamic adaptation mechanism for the mutation factor to adjust exploration and exploitation balance dynamically during optimization.", "configspace": "", "generation": 51, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "9cb791e8-4206-4322-a500-e9c714b82719", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e1f45c66-5fd4-4207-8658-94720b38db94", "solution": "import numpy as np\n\nclass DynamicCrossoverRateDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9  # Initial crossover rate\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n                \n                # Dynamic adaptation of crossover rate\n                if np.random.rand() < 0.1:\n                    self.CR = max(0.1, self.CR - 0.02) if np.random.rand() < 0.5 else min(0.9, self.CR + 0.02)\n                    \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicCrossoverRateDE", "description": "Implementing a dynamic adaptation of the crossover rate during the optimization process to enhance exploration-exploitation balance and accelerate convergence.", "configspace": "", "generation": 53, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicCrossoverRateDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0ca8c3ab-227d-46ba-8044-eb7eefc09bae", "solution": "class DynamicMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if trial_fitness < np.mean(fitness):  # Dynamic mutation factor adaptation\n                    self.F = np.clip(self.F + 0.1, 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicMutationDE", "description": "Implementing a dynamic mutation factor adaptation based on individual performance to enhance convergence speed.", "configspace": "", "generation": 54, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "d8921c69-9d40-4845-bcb6-36a82667fddc", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "daf200e3-8610-43ec-aed0-f559494c963b", "solution": "import numpy as np\n\nclass DynamicAdaptationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n        self.CR_adapt = np.random.uniform(0.1, 0.9, self.budget)\n        self.F_adapt = np.full(self.budget, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F_adapt[i] * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR_adapt[i]\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                self.CR_adapt[i] = np.clip(self.CR_adapt[i] + 0.1 * (1 - int(trial_fitness < fitness[i])), 0.1, 0.9)\n                self.F_adapt[i] = np.clip(self.F_adapt[i] + 0.1 * (1 - int(trial_fitness < fitness[i])), 0.1, 0.9)\n                \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicAdaptationDE", "description": "Introduce a dynamic adaptation of mutation factor and crossover rate based on individual success to promote exploration and exploitation for faster convergence.", "configspace": "", "generation": 56, "fitness": 0.09098583154612194, "feedback": "The algorithm DynamicAdaptationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.17946320780281644, 0.15671109118077697, 0.16289614504231487, 0.17729475588958943, 0.19798168861157517, 0.16474185470490788, 0.18329783037471092, 0.17471526455980313, 0.2047875494585646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044968569892637755, 0.04680839904385159, 0.040658307339406896, 0.04487739269040503, 0.037166445362153855, 0.040270692418676646, 0.05617301442579248, 0.040854597902907464, 0.06472713812227937, 0.02802982296785317, 0.04004720423144914, 0.05485977150236376, 0.03263812361412821, 0.030789535310343452, 0.03214730773704666, 0.03318247986158818, 0.044660784997106906, 0.029215993512233807, 0.09220352133997856, 0.07803629414217417, 0.09587128509421694, 0.08747188600562839, 0.07811107309742893, 0.07481884404054528, 0.07924644663572322, 0.09150245642398092, 0.07621875338423667, 0.08853260356008319, 0.08210977767190053, 0.06688640164641513, 0.0771980493871226, 0.053186387021744164, 0.07778517469720991, 0.0622431142114227, 0.072213231720749, 0.09825248426616073, 0.12120412670653968, 0.12452267489804292, 0.11025132391449477, 0.10897122349805066, 0.10485465230482494, 0.12905754013792103, 0.13768630726213482, 0.14423807133259547, 0.11949784332521685, 0.007098531614409875, 0.0063951609894388195, 0.009553047048377783, 0.009490327861491288, 9.999999999998899e-05, 0.0018944854309637105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011518320277428717, 0.033004783953223926, 9.999999999998899e-05, 0.01637583159001421, 0.008438545388164465, 9.999999999998899e-05, 0.004043262039527873, 0.00898120114531753, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056230086426871106, 0.06929186778677054, 0.03560192081103486, 0.0737592332749456, 0.03571376248422953, 0.04960565944257489, 0.06782291938157359, 0.04844575334188361, 0.08072656009549029, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010533678918464018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008929146632518092, 9.999999999998899e-05, 0.19891432719713353, 0.18894570714800674, 0.20045692031024653, 0.18046582605743955, 0.1948437444251736, 0.20633147103814498, 0.19754617394923202, 0.18688066788241253, 0.20744436665781918, 0.05848951431243565, 0.04105506253127389, 0.05006552833435618, 0.04564505181130407, 0.03940850030846865, 0.035965110193440175, 0.08561866623205294, 0.04907651739421959, 0.05067949558942819, 0.12805854386688098, 0.13250068634437284, 0.14209137809189198, 0.14257978136838845, 0.14175738574862884, 0.13845583022660046, 0.13797650729167654, 0.14491906572548596, 0.1368931150881494, 0.1762738461806861, 0.16599111949733836, 0.17369721433952012, 0.16263866820723305, 0.19110225619232535, 0.18130359670851026, 0.17111590040045432, 0.16003017361876715, 0.16065388786345158, 0.11470003630633074, 0.10819131901291112, 0.11786622768875155, 0.11884940391988508, 0.1414116456636686, 0.1191418186260127, 0.10921849804890149, 0.10922498984033135, 0.1006189823663548, 0.14266531442316188, 0.1696075728372647, 0.1620075863191791, 0.1606968597259174, 0.15241106343202715, 0.16501268566506877, 0.16175242231629394, 0.18483942265794873, 0.15052629150437624, 0.14349411330716233, 0.13923723668496546, 0.13567459460553777, 0.14900427983827014, 0.14720515868525286, 0.1500523429944155, 0.15018517155164013, 0.14729385219803948, 0.15404346788421863, 0.20765885415168528, 0.15442688021337803, 0.16742705856728957, 0.15940895231905183, 0.15841503644488586, 0.14879575028865222, 0.16359898719785537, 0.15672409083037342, 0.17231932328203825, 0.1652449671039654, 0.15976668671423555, 0.18282502060944084, 0.15715009867952356, 0.22376375544769622, 0.15938720247006077, 0.16617329386053992, 0.1753091113194296, 0.23061652555367673, 0.18315590750932054, 0.1932708695316927, 0.18258002057976297, 0.1798374591372811, 0.20023408816294352, 0.18762651291606458, 0.17502820458009005, 0.19629951720942518, 0.1804737796157535, 0.06390424925008775, 0.05925545906936314, 0.054601238026496524, 0.05294382756815286, 0.05877522114237432, 0.06069323656374359, 0.05562058357311084, 0.054980748084215714, 0.06963283895992078]}, "mutation_prompt": null}
{"id": "6f812afd-2925-4f1b-9651-a377514b0d9f", "solution": "import numpy as np\n\nclass SelfAdaptiveMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n        self.success_rates = np.zeros(budget)\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                self.success_rates[i] += 1\n            else:\n                self.success_rates[i] -= 1\n            \n            if self.success_rates[i] > 0:  # Increase mutation parameters\n                self.F = min(self.F * 1.2, 0.9)\n                self.CR = min(self.CR + 0.05, 0.9)\n            else:  # Decrease mutation parameters\n                self.F = max(self.F / 1.2, 0.1)\n                self.CR = max(self.CR - 0.05, 0.1)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "SelfAdaptiveMutationDE", "description": "Implementing a self-adaptive mutation strategy based on individual success rates to dynamically adjust the mutation parameters for faster convergence.", "configspace": "", "generation": 57, "fitness": 0.09144843562834938, "feedback": "The algorithm SelfAdaptiveMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "187dd1a6-cac3-4285-a190-816cf585c2de", "solution": "class DynamicMutationProbabilityDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        mutation_prob = 0.1\n\n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < mutation_prob:\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n                    mutation_prob = max(0.1, mutation_prob - 0.01)  # Dynamic mutation probability adjustment\n                else:\n                    mutation_prob = min(0.9, mutation_prob + 0.01)\n                    \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicMutationProbabilityDE", "description": "Enhancing exploration by dynamically adapting the mutation probability based on fitness improvements to accelerate convergence.", "configspace": "", "generation": 58, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicMutationProbabilityDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "266eb132-52dc-440d-9368-80b360fe1553", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "ca248b20-4c35-49e2-9ee4-5f457a157ebd", "solution": "import numpy as np\n\nclass EnhancedProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        mutation_prob = 0.1\n\n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                improvement_ratio = (fitness[i] - trial_fitness) / fitness[i]\n                mutation_prob = mutation_prob * 0.9 + 0.1 * np.clip(improvement_ratio, 0.1, 0.9)\n                if np.random.rand() < mutation_prob:\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedProbabilisticMutationDE", "description": "Introducing a dynamic adaptation of mutation probability based on the fitness improvement ratio to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 60, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedProbabilisticMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e9ec2be8-b2a2-4aaf-98c8-19c2869d7076", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "12cb3def-c43f-4fb6-98ee-6bd5c2034dec", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "2568c9e2-9fad-4ba7-a69c-ebca82408313", "solution": "class AdaptiveMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.std(population) > 0.1:  # Adaptive mutation control based on diversity\n                    self.F = np.clip(self.F * np.random.normal(1, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveMutationDE", "description": "Implement adaptive control of the mutation factor F based on the population diversity to dynamically adjust the exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 63, "fitness": 0.09144843562834938, "feedback": "The algorithm AdaptiveMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "5ae5c93f-12e2-4380-b168-16b7335ed72c", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "b81ad121-a2c5-486f-9f3e-8bbb5feffad4", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "93402be4-482d-422b-a9b5-58cf215443ba", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "8c785fda-1d7b-459b-b275-05589fec18d8", "solution": "class DynamicCrossoverDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n\n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            \n            # Dynamic adaptation of crossover probability\n            self.CR = 0.9 - 0.5 * i / self.budget\n            \n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicCrossoverDE", "description": "Implementing a dynamic adaptation of crossover probability to enhance exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 67, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicCrossoverDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e6502349-6a5a-4294-a895-78191b0c6d54", "solution": "import numpy as np\n\nclass DynamicMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:\n                    self.F = np.clip(self.F * np.random.normal(1.0, 0.1), 0.1, 0.9)  # Dynamic adaptation of mutation factor\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicMutationDE", "description": "Introducing a dynamic adaptation mechanism for the mutation factor to adjust exploration and exploitation trade-off adaptively during optimization.", "configspace": "", "generation": 68, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "2606044c-da9b-4b56-8df1-a64491661637", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "6d1d68b1-e995-48b9-9925-5a4f3cc78555", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "7ea5b5a3-38fc-4d14-a7f8-2b136a0eb96a", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "f40ac694-ccf6-4a47-bead-c2d28ea18190", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "8bf3d9fd-98a4-4b33-9de0-4a2c2e82fd0a", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "51bef3de-4385-4f04-b4e7-e0afb36bbb98", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "d05c1613-9077-4df0-838d-ccb7db9a164e", "solution": "class AdaptiveMutationDE(ProbabilisticMutationDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.weights = np.ones(self.budget)\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                self.weights[i] = min(1.0, self.weights[i] + 0.1) if trial_fitness < fitness[i] else max(0.1, self.weights[i] - 0.1)\n                self.F = np.clip(np.random.normal(0.5, 0.1) * self.weights[i], 0.1, 0.9)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveMutationDE", "description": "Introducing an adaptive differential weight mechanism based on trial success to dynamically adjust the mutation scaling factor for improved convergence speed.", "configspace": "", "generation": 75, "fitness": 0.09144843562834938, "feedback": "The algorithm AdaptiveMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "daa9db82-18ae-4a2e-8a7f-313f322ecaad", "solution": "class DynamicMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F_min = 0.1\n        self.F_max = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            F = self.F_min + (self.F_max - self.F_min) * (i / self.budget)  # Dynamic mutation factor\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicMutationDE", "description": "Utilizing a dynamic adaptation of the mutation factor to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 76, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "40bd28c1-8dc4-46e8-8160-e8cfca020c1e", "solution": "class AdaptiveMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        mutation_rates = np.full(self.budget, 0.5)  # Initialize mutation rates\n\n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:\n                    mutation_rates[i] = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)  # Update mutation rate\n                self.F = mutation_rates[i]  # Adaptive mutation rate\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveMutationDE", "description": "Implementing an adaptive mutation rate based on individual performance to enhance exploration-exploitation balance and accelerate convergence.", "configspace": "", "generation": 77, "fitness": 0.09144843562834938, "feedback": "The algorithm AdaptiveMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e9c0c6f0-5ca2-4f0c-9e6e-09b28e247484", "solution": "import numpy as np\n\nclass DynamicMutationCrossoverDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR_min = 0.1  # Minimum crossover rate\n        self.CR_max = 0.9  # Maximum crossover rate\n        self.F_min = 0.1  # Minimum mutation factor\n        self.F_max = 0.9  # Maximum mutation factor\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            F = np.random.uniform(self.F_min, self.F_max)\n            CR = np.random.uniform(self.CR_min, self.CR_max)\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F_min = np.clip(np.random.normal(self.F_min, 0.05), 0.1, 0.9)\n                    self.F_max = np.clip(np.random.normal(self.F_max, 0.05), 0.1, 0.9)\n                    self.CR_min = np.clip(np.random.normal(self.CR_min, 0.05), 0.1, 0.9)\n                    self.CR_max = np.clip(np.random.normal(self.CR_max, 0.05), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicMutationCrossoverDE", "description": "Introducing a dynamic adaptation of mutation and crossover rates based on population diversity to promote faster convergence.", "configspace": "", "generation": 78, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicMutationCrossoverDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0c87eb26-6589-42f0-8436-9d8a547011a9", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "831c82d3-f215-4a5e-b0fe-31f17464c088", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "fdc58287-c93b-4f02-a659-22ea5986f2c4", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "40257045-5f14-4fd5-b3d2-821cbafda3fc", "solution": "import numpy as np\n\nclass DynamicAdaptiveCrossoverDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            \n            # Dynamic adaptation of crossover probability\n            if i > 0 and fitness[i] < fitness[i-1]:\n                self.CR = np.clip(self.CR + 0.05, 0.1, 0.9)\n            else:\n                self.CR = np.clip(self.CR - 0.05, 0.1, 0.9)\n            \n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicAdaptiveCrossoverDE", "description": "Implementing dynamic adaptation of crossover probability based on fitness improvement to enhance convergence speed.", "configspace": "", "generation": 82, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicAdaptiveCrossoverDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "01e425fa-bb99-4f4e-93a9-05e15082330d", "solution": "import numpy as np\n\nclass EnhancedProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                self.F *= 0.95  # Dynamic control over mutation factor\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedProbabilisticMutationDE", "description": "Employing a dynamic control over the mutation factor to adapt its value based on the current fitness improvement, enhancing exploration and exploitation balance.", "configspace": "", "generation": 83, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedProbabilisticMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "d954f03b-d38a-4cc8-a7a5-fe8b4cfa023e", "solution": "import numpy as np\n\nclass DynamicMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.mean(fitness) < np.mean(fitness[:i]):  # Dynamic mutation adaptation\n                    self.F = np.clip(self.F * 1.05, 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicMutationDE", "description": "Implementing a dynamic adaptation of the mutation factor based on the evolution of the population's fitness to enhance convergence speed.", "configspace": "", "generation": 84, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "8f744649-1fa4-46ad-8b77-13f3f2a8ac17", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "fd079d93-87ba-47b7-9185-9e92f24b5b26", "solution": "class EnhancedProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F_min = 0.1\n        self.F_max = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            diff = np.abs(b - c)  # Calculate the difference between vectors\n            F = self.F_min + (self.F_max - self.F_min) * np.exp(-2 * i / self.budget) * np.sqrt(np.sum(diff ** 2) / self.dim)\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.CR = np.clip(np.random.normal(0.9, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedProbabilisticMutationDE", "description": "Implementing a variable F strategy that adapts based on the difference between the trial and target vectors to enhance exploration and exploitation balance.", "configspace": "", "generation": 86, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedProbabilisticMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "04c734aa-ec6e-48c1-bcd6-0454d294af77", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "b25b6df2-ed21-4a6a-bc56-b87d22757f58", "solution": "class AdaptiveControlDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.5\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                self.F = np.clip(self.F * np.random.normal(1, 0.1), 0.1, 0.9)\n                self.CR = np.clip(self.CR * np.random.normal(1, 0.1), 0, 1)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveControlDE", "description": "Implementing adaptive control over the mutation factor and crossover rate to dynamically adjust exploration and exploitation trade-off for faster convergence.", "configspace": "", "generation": 88, "fitness": 0.09144843562834938, "feedback": "The algorithm AdaptiveControlDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "601248e6-f980-402e-938b-fe8c4fca3f86", "solution": "import numpy as np\n\nclass DynamicMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if trial_fitness < fitness.mean():  # Dynamic mutation factor adaptation\n                    self.F = np.clip(self.F * 1.2, 0.1, 0.9)\n                else:\n                    self.F = np.clip(self.F * 0.8, 0.1, 0.9)\n                    \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicMutationDE", "description": "Implement a dynamic adaptation of the mutation factor based on the fitness improvement, aiming to adjust the search behavior dynamically for faster convergence.", "configspace": "", "generation": 89, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "710a459d-532b-4e3c-b4d6-7a75d5840af0", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "b15d7684-6e5c-4634-994b-36def71969dd", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "4e78a4e2-37f3-4167-b34a-fc78a5c8cad4", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "fc031c21-4c29-4fe5-8b0e-45b6ecfe7273", "solution": "import numpy as np\n\nclass DynamicControlDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            \n            # Dynamic control of crossover rate based on population diversity\n            avg_distance = np.mean(np.linalg.norm(population - population.mean(axis=0), axis=1))\n            self.CR = 0.9 if avg_distance < 1.0 else 0.5\n            \n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                \n                # Dynamic control of mutation rate based on fitness improvement\n                self.F = 0.9 if trial_fitness < fitness.mean() else 0.5\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicControlDE", "description": "Implement a dynamic control of crossover and mutation rates based on population diversity to adaptively explore and exploit the search space for faster convergence.", "configspace": "", "generation": 93, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicControlDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "9eea34bf-8f14-4330-9665-512d5f82e682", "solution": "import numpy as np\n\nclass DynamicParameterAdaptationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.mean(np.std(population, axis=0)) > np.random.rand():  # Dynamic parameter adaptation based on diversity\n                    self.CR = np.clip(np.random.normal(0.9, 0.1), 0.1, 1.0)\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicParameterAdaptationDE", "description": "Implementing a dynamic parameter adaptation mechanism based on population diversity to enhance exploration-exploitation balance.", "configspace": "", "generation": 94, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicParameterAdaptationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "3b87804f-f5f0-4c1c-9f01-a23aa4fa5a1a", "solution": "import numpy as np\n\nclass EnhancedProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n        self.prob_mutation = 0.1\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < self.prob_mutation:  # Dynamic mutation probability\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n                    if func(target) < func(mutant):\n                        self.prob_mutation = np.clip(self.prob_mutation * 1.1, 0.01, 0.5)  # Adaptation based on fitness\n                    else:\n                        self.prob_mutation = np.clip(self.prob_mutation * 0.9, 0.01, 0.5)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedProbabilisticMutationDE", "description": "Enhancing the exploration capability by introducing a dynamic adaptation of the mutation probability based on fitness history to improve convergence speed.", "configspace": "", "generation": 95, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedProbabilisticMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "bfc287bb-4b36-4261-a41d-cc6f1856c670", "solution": "class AdaptiveMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                # Dynamic adaptation of mutation parameter based on fitness improvement\n                self.F = np.clip(self.F * np.exp(0.1 * (fitness[i] - trial_fitness)), 0.1, 0.9)\n                \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveMutationDE", "description": "Implement a dynamic adaptation of the mutation parameter based on fitness improvement to enhance exploration and exploitation.", "configspace": "", "generation": 96, "fitness": 0.09144843562834938, "feedback": "The algorithm AdaptiveMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "bbd93d54-7138-4e2b-877e-24327335ff29", "solution": "import numpy as np\n\nclass EnhancedProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n            mean_fitness = np.mean(fitness)\n            std_fitness = np.std(fitness)\n            self.F = np.clip(self.F * np.exp(mean_fitness / (std_fitness + 1e-6)), 0.1, 0.9)  # Dynamic mutation strategy\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedProbabilisticMutationDE", "description": "Enhancing the diversity of candidate solutions by introducing a dynamic mutation strategy based on population statistics.", "configspace": "", "generation": 97, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedProbabilisticMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "9f0f23d0-1c3f-4d0f-98b6-0680579cb611", "solution": "class ProbabilisticMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:  # Introduce probabilistic mutation\n                    self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ProbabilisticMutationDE", "description": "Introducing a probabilistic mutation strategy based on fitness history to explore diverse regions and accelerate convergence.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "3e06acaa-09f4-43a9-8d95-bd0aa10a469c", "solution": "import numpy as np\n\nclass AdaptiveMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.9\n        self.F = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for i in range(self.budget):\n            target = population[i]\n            idxs = np.arange(self.budget)\n            np.random.shuffle(idxs)\n            a, b, c = population[np.random.choice(idxs[:3], 3, replace=False)]\n            mutant = a + self.F * (b - c)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, target)\n            \n            trial_fitness = func(trial)\n            if trial_fitness < fitness[i]:\n                population[i] = trial\n                fitness[i] = trial_fitness\n                if np.random.rand() < 0.1:\n                    if np.std(population) > 0.1:  # Adaptive mutation based on diversity\n                        self.F = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveMutationDE", "description": "Implementing adaptive control of the mutation factor based on the population diversity to enhance exploration-exploitation balance and accelerate convergence.", "configspace": "", "generation": 99, "fitness": 0.09144843562834938, "feedback": "The algorithm AdaptiveMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "20f20323-8e5d-423a-b62d-044f99999187", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
