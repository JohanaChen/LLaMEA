{"id": "f899772a-9d16-4fbe-be7c-476074e26ee2", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n\n            def within_bounds(x):\n                return np.clip(x, bounds[0], bounds[1])\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            # Initialize particles\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i]\n                        best_fitness = fitness\n\n                    # Update particle velocity\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = alpha * (velocities[i] + cognitive_component + social_component)\n\n                    # Update particle position\n                    particles[i] = within_bounds(particles[i] + velocities[i])\n\n            # Simulated Annealing\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = within_bounds(current_solution + np.random.normal(0, sigma, self.dim))\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "PSO_SA_Optimizer", "description": "Metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous search spaces.", "configspace": "", "generation": 0, "fitness": 0.0914292091433775, "feedback": "The algorithm PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.18.", "error": "", "parent_id": null, "metadata": {"aucs": [0.10905842999765625, 0.11283494299879604, 0.1383881596271429, 0.033278415905090175, 0.12009821192765358, 0.11209178407260101, 0.1515527686358601, 0.09664306508118936, 0.11473112911967442, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.021757626880700043, 0.05467913491124177, 0.014235764363756287, 0.019186358311856555, 0.005672458650794798, 0.0008279270743923872, 0.02686535597459827, 0.007039542036146984, 0.027855532897682167, 0.041283540556635856, 0.0, 0.0002103865885157985, 0.043438750157274275, 0.0, 0.0, 0.018524498776646414, 0.0, 0.011621669173783489, 0.994717129969809, 0.9910492886736181, 0.9952296989899596, 0.9921767567921954, 0.9935680342431774, 0.8174011188679149, 0.7790939637987414, 0.9950842716047081, 0.7931257016920753, 0.03477199259832009, 0.0376781469123042, 0.0, 0.021598861271415082, 0.003986085143313334, 0.008854173977672186, 0.0, 0.052748982630836494, 0.0, 0.11845982338326433, 0.04543790117965696, 0.03894459820646701, 0.0741892460461786, 0.003263975808961761, 0.03757130099528727, 0.045740057783884236, 0.0, 0.054404227701825625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0951939308895946, 0.0, 0.03131492404505165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.16780162302038004, 0.1765456087546189, 0.17401944610982778, 0.11722294486759766, 0.11316772538202058, 0.10614486609885498, 0.16225883878015412, 0.15983882755570245, 0.16208159042962256, 0.008256525886720212, 0.01658857767853683, 0.0, 0.01772788330493691, 0.009884163338336971, 0.03415774691364237, 0.009139223088073023, 0.020983118927404232, 0.04199996850799759, 0.10114462078665276, 0.06797243483251258, 0.07960368221530256, 0.11501976419903726, 0.08981555111934414, 0.062287363410868046, 0.11458749307457106, 0.07722301733962866, 0.08822415706970932, 0.17417484858191945, 0.12647480350433016, 0.11559773934644013, 0.13913219034704183, 0.13145906572899257, 0.13278970034534454, 0.12776162570345295, 0.11251582765765011, 0.09944229411065886, 0.06115177533226812, 0.06735502196257326, 0.05454958527923515, 0.0576970378960181, 0.06130488351373209, 0.06874887596078993, 0.06514296352288107, 0.07367219940462, 0.05224189036800364, 0.12646360622900554, 0.09766536173633045, 0.12331810613296224, 0.11317998232686366, 0.10862507837135726, 0.12855877607156907, 0.15950790330922315, 0.12966378564387726, 0.13703610823416146, 0.0, 0.0, 0.14672427793933562, 0.12798350495717636, 0.13498259331707108, 0.10745029204870349, 0.1563657735223234, 0.148438464188286, 0.13084510756274081, 0.09996575428354681, 0.058098063782753506, 0.07207403866364781, 0.11144744596874012, 0.1261177943983801, 0.07396292300283824, 0.11711436772928296, 0.10756036852575124, 0.058978003552555336, 0.07056859618506806, 0.05561021937100119, 0.04771804322983886, 0.0477700373707628, 0.03316525811653115, 0.08608974205880937, 0.03662729074906934, 0.16049657743230017, 0.07710532812954118, 0.18798355853235382, 0.17292596634081292, 0.1793773879356375, 0.19356252384111572, 0.16789941421415022, 0.1744334481805827, 0.1809725059508308, 0.16054830652662966, 0.18437313751841888, 0.03776376512767743, 0.03962965098735627, 0.04188772308428956, 0.03134179898967526, 0.0224100109314741, 0.023415242575509754, 0.022956077214438264, 0.03522482769278046, 0.02233651700047501]}, "mutation_prompt": null}
{"id": "41e1243d-435d-43ea-b566-209e1b3f305d", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = alpha * (velocities[i] + cognitive_component + social_component)\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Improved_PSO_SA_Optimizer", "description": "Improved PSO_SA_Optimizer algorithm with optimized loops, efficient variable initialization, and removal of redundant calculations for faster convergence.", "configspace": "", "generation": 1, "fitness": 0.19466150133602234, "feedback": "The algorithm Improved_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "f899772a-9d16-4fbe-be7c-476074e26ee2", "metadata": {"aucs": [0.4314545202660124, 0.4393502644124524, 0.445479395100323, 0.4066952880260908, 0.43205265700967843, 0.4945737975338801, 0.45790041649727364, 0.43627776825153897, 0.40792144910841976, 0.0, 0.0, 0.0, 0.012011407219953085, 0.0, 0.0, 0.0, 0.024123707122495452, 0.0, 0.06794963951677424, 0.1225498293376237, 0.07903529068755888, 0.07648631064809064, 0.04823003991221608, 0.0939199012584715, 0.1383207304653724, 0.08470469113985568, 0.1051474800150849, 0.08340334242565017, 0.030649190468234555, 0.056092038484564566, 0.13133111384229634, 0.06205709894973166, 0.045156071496901484, 0.07305099216388733, 0.05183310087434545, 0.04486016276392912, 0.994717129969809, 0.32762599413872173, 0.995220641423502, 0.9917376035053145, 0.9861617745640936, 0.8173923781497908, 0.7790193367835385, 0.9950842716047081, 0.8206769601174928, 0.2896560519328444, 0.342196193632332, 0.29491615245038416, 0.2951098030732042, 0.3087158462085374, 0.2932634301132486, 0.3059870207575117, 0.2987812562143326, 0.34048078206736776, 0.2223018447634033, 0.15588701779896252, 0.22516256291333336, 0.2819676371711006, 0.09509699711016295, 0.26316330190868664, 0.14488795644044405, 0.17328919952663124, 0.2306831756672233, 0.13925661537307787, 0.15179478638957078, 0.1940960627961883, 0.1365681373930001, 0.1572066542604864, 0.12606760099700187, 0.23801073188880695, 0.16953139436828546, 0.18000049758520198, 0.18350674410536927, 0.11759139596112422, 0.18640420898725862, 0.1865437487189998, 0.1853474767594323, 0.17659415539692414, 0.19052051603304676, 0.1699368132006679, 0.155575460020548, 0.0, 0.0, 0.019275970975781043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08270655230146551, 0.01185031484446486, 0.02108226381452183, 0.0337511566004266, 0.07030221451130458, 0.0, 0.0, 0.1394697546979642, 0.03945479828232623, 0.04282320451446486, 0.0, 0.013557905891247723, 0.0, 0.0, 0.0, 0.003978151896086635, 0.0, 0.0, 0.0, 0.037466464537609157, 0.1103968345098445, 0.029194629137713535, 0.06141438286836731, 0.09131888210671746, 0.07115112630069065, 0.11892002793275402, 0.10524539770407648, 0.07982527036917819, 0.41786853883548014, 0.4027331318550942, 0.45199658265661824, 0.4097382795023604, 0.4065956214374348, 0.37737851129421873, 0.4256814365017725, 0.3956032874830696, 0.4020258117994042, 0.03568903683166713, 0.07687441617888435, 0.07500400445000943, 0.12324773116190912, 0.06530806099490016, 0.06914144820890833, 0.049268210682428926, 0.08856167604363818, 0.06313542841588493, 0.23405656753520565, 0.18355231877466271, 0.2092660019575049, 0.1971450733220348, 0.28716588394399656, 0.11678804396021514, 0.19968785688514112, 0.08865696687112146, 0.2424638477108525, 0.29095846454429497, 0.3039650299713641, 0.20967781798142238, 0.26373819828396505, 0.2300914398236319, 0.30181306309582123, 0.25848665785712976, 0.17811059169459298, 0.08495856750880759, 0.21107876692740857, 0.198950727111875, 0.25481374740726437, 0.2355492160503755, 0.15303149065959643, 0.22928180276805488, 0.113915529621751, 0.13805334774083966, 0.2491749608073346, 0.2090620878507219, 0.17024360609221023, 0.21954878088905372, 0.2191781274853012, 0.15517923112187815, 0.18847442364430644, 0.20970809137474922, 0.16167164677095058, 0.1815001850142014, 0.20438332896667455, 0.2135088274295942, 0.1867575082124947, 0.18466448376943767, 0.1771981736716447, 0.1908551134505424, 0.2069802124651876, 0.18143386891977442, 0.19474549344863867, 0.1864043766007223, 0.16283746110853803, 0.16855884028807722, 0.17346748041723203, 0.19855385551972304, 0.16904513234687513, 0.16662539944951027, 0.16549680254005394, 0.16451043507943064, 0.5201953250779003, 0.11127264211980215, 0.6028421195962819, 0.5192304815268155, 0.1488108822415205, 0.20784997724159093, 0.09328135810548888, 0.0945484690820475, 0.43474408955909005, 0.20360339846675302, 0.1856786777483943, 0.18207687428871067, 0.16875959193949308, 0.1776892726774416, 0.18335572422380797, 0.17589029209501583, 0.18125081009074417, 0.17005297032174205, 0.08126932733517556, 0.09617621358346551, 0.08698787545733844, 0.12641170234266885, 0.0810735322402848, 0.10122738865959435, 0.06447174907712394, 0.08005477817717632, 0.07766427719050406]}, "mutation_prompt": null}
{"id": "583b045c-ea98-444c-ad87-9d680e246290", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = alpha * (velocities[i] + cognitive_component + social_component)\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Improved_PSO_SA_Optimizer", "description": "Improved PSO_SA_Optimizer algorithm with optimized loops, efficient variable initialization, and removal of redundant calculations for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {"aucs": [0.4314545202660124, 0.4393502644124524, 0.445479395100323, 0.4066952880260908, 0.43205265700967843, 0.4945737975338801, 0.45790041649727364, 0.43627776825153897, 0.40792144910841976, 0.0, 0.0, 0.0, 0.012011407219953085, 0.0, 0.0, 0.0, 0.024123707122495452, 0.0, 0.06794963951677424, 0.1225498293376237, 0.07903529068755888, 0.07648631064809064, 0.04823003991221608, 0.0939199012584715, 0.1383207304653724, 0.08470469113985568, 0.1051474800150849, 0.08340334242565017, 0.030649190468234555, 0.056092038484564566, 0.13133111384229634, 0.06205709894973166, 0.045156071496901484, 0.07305099216388733, 0.05183310087434545, 0.04486016276392912, 0.994717129969809, 0.32762599413872173, 0.995220641423502, 0.9917376035053145, 0.9861617745640936, 0.8173923781497908, 0.7790193367835385, 0.9950842716047081, 0.8206769601174928, 0.2896560519328444, 0.342196193632332, 0.29491615245038416, 0.2951098030732042, 0.3087158462085374, 0.2932634301132486, 0.3059870207575117, 0.2987812562143326, 0.34048078206736776, 0.2223018447634033, 0.15588701779896252, 0.22516256291333336, 0.2819676371711006, 0.09509699711016295, 0.26316330190868664, 0.14488795644044405, 0.17328919952663124, 0.2306831756672233, 0.13925661537307787, 0.15179478638957078, 0.1940960627961883, 0.1365681373930001, 0.1572066542604864, 0.12606760099700187, 0.23801073188880695, 0.16953139436828546, 0.18000049758520198, 0.18350674410536927, 0.11759139596112422, 0.18640420898725862, 0.1865437487189998, 0.1853474767594323, 0.17659415539692414, 0.19052051603304676, 0.1699368132006679, 0.155575460020548, 0.0, 0.0, 0.019275970975781043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08270655230146551, 0.01185031484446486, 0.02108226381452183, 0.0337511566004266, 0.07030221451130458, 0.0, 0.0, 0.1394697546979642, 0.03945479828232623, 0.04282320451446486, 0.0, 0.013557905891247723, 0.0, 0.0, 0.0, 0.003978151896086635, 0.0, 0.0, 0.0, 0.037466464537609157, 0.1103968345098445, 0.029194629137713535, 0.06141438286836731, 0.09131888210671746, 0.07115112630069065, 0.11892002793275402, 0.10524539770407648, 0.07982527036917819, 0.41786853883548014, 0.4027331318550942, 0.45199658265661824, 0.4097382795023604, 0.4065956214374348, 0.37737851129421873, 0.4256814365017725, 0.3956032874830696, 0.4020258117994042, 0.03568903683166713, 0.07687441617888435, 0.07500400445000943, 0.12324773116190912, 0.06530806099490016, 0.06914144820890833, 0.049268210682428926, 0.08856167604363818, 0.06313542841588493, 0.23405656753520565, 0.18355231877466271, 0.2092660019575049, 0.1971450733220348, 0.28716588394399656, 0.11678804396021514, 0.19968785688514112, 0.08865696687112146, 0.2424638477108525, 0.29095846454429497, 0.3039650299713641, 0.20967781798142238, 0.26373819828396505, 0.2300914398236319, 0.30181306309582123, 0.25848665785712976, 0.17811059169459298, 0.08495856750880759, 0.21107876692740857, 0.198950727111875, 0.25481374740726437, 0.2355492160503755, 0.15303149065959643, 0.22928180276805488, 0.113915529621751, 0.13805334774083966, 0.2491749608073346, 0.2090620878507219, 0.17024360609221023, 0.21954878088905372, 0.2191781274853012, 0.15517923112187815, 0.18847442364430644, 0.20970809137474922, 0.16167164677095058, 0.1815001850142014, 0.20438332896667455, 0.2135088274295942, 0.1867575082124947, 0.18466448376943767, 0.1771981736716447, 0.1908551134505424, 0.2069802124651876, 0.18143386891977442, 0.19474549344863867, 0.1864043766007223, 0.16283746110853803, 0.16855884028807722, 0.17346748041723203, 0.19855385551972304, 0.16904513234687513, 0.16662539944951027, 0.16549680254005394, 0.16451043507943064, 0.5201953250779003, 0.11127264211980215, 0.6028421195962819, 0.5192304815268155, 0.1488108822415205, 0.20784997724159093, 0.09328135810548888, 0.0945484690820475, 0.43474408955909005, 0.20360339846675302, 0.1856786777483943, 0.18207687428871067, 0.16875959193949308, 0.1776892726774416, 0.18335572422380797, 0.17589029209501583, 0.18125081009074417, 0.17005297032174205, 0.08126932733517556, 0.09617621358346551, 0.08698787545733844, 0.12641170234266885, 0.0810735322402848, 0.10122738865959435, 0.06447174907712394, 0.08005477817717632, 0.07766427719050406]}, "mutation_prompt": null}
{"id": "a9d2faf9-3966-4f6a-9330-8ad201f6f354", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer_v2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 5  # Reduced the number of iterations in SA phase\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = alpha * (velocities[i] + cognitive_component + social_component)\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Improved_PSO_SA_Optimizer_v2", "description": "Reduced the number of iterations in the SA phase to improve efficiency without compromising performance.", "configspace": "", "generation": 3, "fitness": 0.1776852320994999, "feedback": "The algorithm Improved_PSO_SA_Optimizer_v2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.17.", "error": "", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {"aucs": [0.43420521354302966, 0.4143269978999189, 0.4260435272539277, 0.47183996482107315, 0.40246662088368246, 0.3966212760144242, 0.41846225385842417, 0.44051054424630276, 0.40879066647815254, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06852307214403375, 0.11645215382365004, 0.07808164455841182, 0.07352477596925888, 0.025856692569037887, 0.09391990125847915, 0.11900751383023367, 0.08470469113986834, 0.10514748001509322, 0.08176630757109649, 0.03064919046824177, 0.05288285290210082, 0.12083386984819167, 0.061313151547888856, 0.04349938960262045, 0.07305099216388966, 0.05086610417780102, 0.04336775241028823, 0.994717129969809, 0.1412081137156762, 0.995220641423502, 0.9917376035053145, 0.9861617745640936, 0.1801002988099839, 0.13831698402527093, 0.9950842716047081, 0.21413813631656198, 0.2964642838714284, 0.2806626890229298, 0.27783344536238463, 0.2902586980000944, 0.30187646916398003, 0.3011225661981797, 0.29222311866211637, 0.2975412947925168, 0.30488589703881186, 0.22240303176682474, 0.09664744272611847, 0.22683878052342643, 0.35133656789333934, 0.02331850087113363, 0.2644366263581507, 0.14810785861503428, 0.13544475310611015, 0.22983241059451243, 0.13925661537308642, 0.19692455568067868, 0.21647561724952924, 0.1481345812779471, 0.17090017559994974, 0.12607988657378466, 0.154349260919874, 0.18237079369024822, 0.16068888591764174, 0.17874779252765094, 0.11759139596111567, 0.2002630576728468, 0.16444481415910228, 0.1591446654837939, 0.17826640695783713, 0.1683808449291886, 0.14598892803797003, 0.1533213919923817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0377320201672523, 0.009044507528208179, 0.016824187377619815, 0.03360454134619395, 0.06510574019031812, 0.0, 0.0, 0.13576697983967645, 0.03051479412677527, 0.042096664423387886, 0.0, 0.01355790589125827, 0.0, 0.0, 0.0, 0.003978151896096516, 0.0, 0.0, 0.0, 0.037072946599207346, 0.1006153998303666, 0.02013648296347892, 0.040974660500085136, 0.06668523642280288, 0.07115112630068943, 0.10659891662749565, 0.09865277862339517, 0.07874769029621798, 0.3942708744873725, 0.41127842001613046, 0.41613042469095785, 0.3837111462147301, 0.36890623174693715, 0.3752322639379648, 0.44373137473402324, 0.4643925458544099, 0.3955659856990462, 0.03546299667961372, 0.07389185001260778, 0.07430451205165378, 0.11338072902105556, 0.06510221397838101, 0.06894448782700469, 0.04926821068242915, 0.08856167604365073, 0.062324112547187394, 0.234056567535201, 0.1614617711499784, 0.21115773084564948, 0.18051776202340952, 0.19299529736622112, 0.11202501895849182, 0.18539032581774995, 0.08235821203227078, 0.22094723016387763, 0.25835189632408195, 0.28362618501366565, 0.20967781798142537, 0.21309716800320277, 0.19409058810153013, 0.29519810304704486, 0.260354604806904, 0.18264997153870433, 0.08477818967737982, 0.19041809493430406, 0.16111899558816256, 0.20586049256541894, 0.19597240030519048, 0.15208582686928618, 0.19078692866506797, 0.17980147506145727, 0.1275682054532683, 0.22784614208640008, 0.20275937585559967, 0.17041998254425272, 0.1671588823450656, 0.21917812748529464, 0.15106776064589433, 0.17052179659536704, 0.2097080913747511, 0.15565917249197958, 0.18150018501420628, 0.19844331252762482, 0.2820542305054218, 0.17856187855564754, 0.2001235206273534, 0.17692147397160296, 0.19385422988411116, 0.17686028753026184, 0.18143386891977842, 0.19362058642844115, 0.18648447160303483, 0.16287899792706484, 0.1686681042579523, 0.173371820326216, 0.19847800887181055, 0.16907041300936398, 0.16658150119498283, 0.16557205258464913, 0.16450354469408268, 0.47663662409203866, 0.11129937340066443, 0.6113561549720379, 0.45681549825602774, 0.14869263724830561, 0.20744216183729036, 0.09328855955000415, 0.0945565613154078, 0.25352643746469417, 0.20360339846675246, 0.18567867774839075, 0.18207687428871688, 0.16875959193948986, 0.17148519851395283, 0.18335572422380897, 0.17589029209501517, 0.16592651194933727, 0.1695338000954083, 0.08126657507277235, 0.09617621358347073, 0.0825200416345453, 0.1264117023426672, 0.0810735322402748, 0.10122738865960423, 0.06447174907711783, 0.079266675888092, 0.07873905116748592]}, "mutation_prompt": null}
{"id": "e0e57094-5a1b-4d98-8581-02aa4f261855", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = alpha * (velocities[i] + cognitive_component + social_component)\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Improved_PSO_SA_Optimizer", "description": "Improved PSO_SA_Optimizer algorithm with optimized loops, efficient variable initialization, and removal of redundant calculations for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {"aucs": [0.4314545202660124, 0.4393502644124524, 0.445479395100323, 0.4066952880260908, 0.43205265700967843, 0.4945737975338801, 0.45790041649727364, 0.43627776825153897, 0.40792144910841976, 0.0, 0.0, 0.0, 0.012011407219953085, 0.0, 0.0, 0.0, 0.024123707122495452, 0.0, 0.06794963951677424, 0.1225498293376237, 0.07903529068755888, 0.07648631064809064, 0.04823003991221608, 0.0939199012584715, 0.1383207304653724, 0.08470469113985568, 0.1051474800150849, 0.08340334242565017, 0.030649190468234555, 0.056092038484564566, 0.13133111384229634, 0.06205709894973166, 0.045156071496901484, 0.07305099216388733, 0.05183310087434545, 0.04486016276392912, 0.994717129969809, 0.32762599413872173, 0.995220641423502, 0.9917376035053145, 0.9861617745640936, 0.8173923781497908, 0.7790193367835385, 0.9950842716047081, 0.8206769601174928, 0.2896560519328444, 0.342196193632332, 0.29491615245038416, 0.2951098030732042, 0.3087158462085374, 0.2932634301132486, 0.3059870207575117, 0.2987812562143326, 0.34048078206736776, 0.2223018447634033, 0.15588701779896252, 0.22516256291333336, 0.2819676371711006, 0.09509699711016295, 0.26316330190868664, 0.14488795644044405, 0.17328919952663124, 0.2306831756672233, 0.13925661537307787, 0.15179478638957078, 0.1940960627961883, 0.1365681373930001, 0.1572066542604864, 0.12606760099700187, 0.23801073188880695, 0.16953139436828546, 0.18000049758520198, 0.18350674410536927, 0.11759139596112422, 0.18640420898725862, 0.1865437487189998, 0.1853474767594323, 0.17659415539692414, 0.19052051603304676, 0.1699368132006679, 0.155575460020548, 0.0, 0.0, 0.019275970975781043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08270655230146551, 0.01185031484446486, 0.02108226381452183, 0.0337511566004266, 0.07030221451130458, 0.0, 0.0, 0.1394697546979642, 0.03945479828232623, 0.04282320451446486, 0.0, 0.013557905891247723, 0.0, 0.0, 0.0, 0.003978151896086635, 0.0, 0.0, 0.0, 0.037466464537609157, 0.1103968345098445, 0.029194629137713535, 0.06141438286836731, 0.09131888210671746, 0.07115112630069065, 0.11892002793275402, 0.10524539770407648, 0.07982527036917819, 0.41786853883548014, 0.4027331318550942, 0.45199658265661824, 0.4097382795023604, 0.4065956214374348, 0.37737851129421873, 0.4256814365017725, 0.3956032874830696, 0.4020258117994042, 0.03568903683166713, 0.07687441617888435, 0.07500400445000943, 0.12324773116190912, 0.06530806099490016, 0.06914144820890833, 0.049268210682428926, 0.08856167604363818, 0.06313542841588493, 0.23405656753520565, 0.18355231877466271, 0.2092660019575049, 0.1971450733220348, 0.28716588394399656, 0.11678804396021514, 0.19968785688514112, 0.08865696687112146, 0.2424638477108525, 0.29095846454429497, 0.3039650299713641, 0.20967781798142238, 0.26373819828396505, 0.2300914398236319, 0.30181306309582123, 0.25848665785712976, 0.17811059169459298, 0.08495856750880759, 0.21107876692740857, 0.198950727111875, 0.25481374740726437, 0.2355492160503755, 0.15303149065959643, 0.22928180276805488, 0.113915529621751, 0.13805334774083966, 0.2491749608073346, 0.2090620878507219, 0.17024360609221023, 0.21954878088905372, 0.2191781274853012, 0.15517923112187815, 0.18847442364430644, 0.20970809137474922, 0.16167164677095058, 0.1815001850142014, 0.20438332896667455, 0.2135088274295942, 0.1867575082124947, 0.18466448376943767, 0.1771981736716447, 0.1908551134505424, 0.2069802124651876, 0.18143386891977442, 0.19474549344863867, 0.1864043766007223, 0.16283746110853803, 0.16855884028807722, 0.17346748041723203, 0.19855385551972304, 0.16904513234687513, 0.16662539944951027, 0.16549680254005394, 0.16451043507943064, 0.5201953250779003, 0.11127264211980215, 0.6028421195962819, 0.5192304815268155, 0.1488108822415205, 0.20784997724159093, 0.09328135810548888, 0.0945484690820475, 0.43474408955909005, 0.20360339846675302, 0.1856786777483943, 0.18207687428871067, 0.16875959193949308, 0.1776892726774416, 0.18335572422380797, 0.17589029209501583, 0.18125081009074417, 0.17005297032174205, 0.08126932733517556, 0.09617621358346551, 0.08698787545733844, 0.12641170234266885, 0.0810735322402848, 0.10122738865959435, 0.06447174907712394, 0.08005477817717632, 0.07766427719050406]}, "mutation_prompt": null}
{"id": "2bf760fe-cf4b-4f4a-9a9d-34f28194d0b7", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = alpha * (velocities[i] + cognitive_component + social_component)\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Improved_PSO_SA_Optimizer", "description": "Improved PSO_SA_Optimizer algorithm with optimized loops, efficient variable initialization, and removal of redundant calculations for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {"aucs": [0.4314545202660124, 0.4393502644124524, 0.445479395100323, 0.4066952880260908, 0.43205265700967843, 0.4945737975338801, 0.45790041649727364, 0.43627776825153897, 0.40792144910841976, 0.0, 0.0, 0.0, 0.012011407219953085, 0.0, 0.0, 0.0, 0.024123707122495452, 0.0, 0.06794963951677424, 0.1225498293376237, 0.07903529068755888, 0.07648631064809064, 0.04823003991221608, 0.0939199012584715, 0.1383207304653724, 0.08470469113985568, 0.1051474800150849, 0.08340334242565017, 0.030649190468234555, 0.056092038484564566, 0.13133111384229634, 0.06205709894973166, 0.045156071496901484, 0.07305099216388733, 0.05183310087434545, 0.04486016276392912, 0.994717129969809, 0.32762599413872173, 0.995220641423502, 0.9917376035053145, 0.9861617745640936, 0.8173923781497908, 0.7790193367835385, 0.9950842716047081, 0.8206769601174928, 0.2896560519328444, 0.342196193632332, 0.29491615245038416, 0.2951098030732042, 0.3087158462085374, 0.2932634301132486, 0.3059870207575117, 0.2987812562143326, 0.34048078206736776, 0.2223018447634033, 0.15588701779896252, 0.22516256291333336, 0.2819676371711006, 0.09509699711016295, 0.26316330190868664, 0.14488795644044405, 0.17328919952663124, 0.2306831756672233, 0.13925661537307787, 0.15179478638957078, 0.1940960627961883, 0.1365681373930001, 0.1572066542604864, 0.12606760099700187, 0.23801073188880695, 0.16953139436828546, 0.18000049758520198, 0.18350674410536927, 0.11759139596112422, 0.18640420898725862, 0.1865437487189998, 0.1853474767594323, 0.17659415539692414, 0.19052051603304676, 0.1699368132006679, 0.155575460020548, 0.0, 0.0, 0.019275970975781043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08270655230146551, 0.01185031484446486, 0.02108226381452183, 0.0337511566004266, 0.07030221451130458, 0.0, 0.0, 0.1394697546979642, 0.03945479828232623, 0.04282320451446486, 0.0, 0.013557905891247723, 0.0, 0.0, 0.0, 0.003978151896086635, 0.0, 0.0, 0.0, 0.037466464537609157, 0.1103968345098445, 0.029194629137713535, 0.06141438286836731, 0.09131888210671746, 0.07115112630069065, 0.11892002793275402, 0.10524539770407648, 0.07982527036917819, 0.41786853883548014, 0.4027331318550942, 0.45199658265661824, 0.4097382795023604, 0.4065956214374348, 0.37737851129421873, 0.4256814365017725, 0.3956032874830696, 0.4020258117994042, 0.03568903683166713, 0.07687441617888435, 0.07500400445000943, 0.12324773116190912, 0.06530806099490016, 0.06914144820890833, 0.049268210682428926, 0.08856167604363818, 0.06313542841588493, 0.23405656753520565, 0.18355231877466271, 0.2092660019575049, 0.1971450733220348, 0.28716588394399656, 0.11678804396021514, 0.19968785688514112, 0.08865696687112146, 0.2424638477108525, 0.29095846454429497, 0.3039650299713641, 0.20967781798142238, 0.26373819828396505, 0.2300914398236319, 0.30181306309582123, 0.25848665785712976, 0.17811059169459298, 0.08495856750880759, 0.21107876692740857, 0.198950727111875, 0.25481374740726437, 0.2355492160503755, 0.15303149065959643, 0.22928180276805488, 0.113915529621751, 0.13805334774083966, 0.2491749608073346, 0.2090620878507219, 0.17024360609221023, 0.21954878088905372, 0.2191781274853012, 0.15517923112187815, 0.18847442364430644, 0.20970809137474922, 0.16167164677095058, 0.1815001850142014, 0.20438332896667455, 0.2135088274295942, 0.1867575082124947, 0.18466448376943767, 0.1771981736716447, 0.1908551134505424, 0.2069802124651876, 0.18143386891977442, 0.19474549344863867, 0.1864043766007223, 0.16283746110853803, 0.16855884028807722, 0.17346748041723203, 0.19855385551972304, 0.16904513234687513, 0.16662539944951027, 0.16549680254005394, 0.16451043507943064, 0.5201953250779003, 0.11127264211980215, 0.6028421195962819, 0.5192304815268155, 0.1488108822415205, 0.20784997724159093, 0.09328135810548888, 0.0945484690820475, 0.43474408955909005, 0.20360339846675302, 0.1856786777483943, 0.18207687428871067, 0.16875959193949308, 0.1776892726774416, 0.18335572422380797, 0.17589029209501583, 0.18125081009074417, 0.17005297032174205, 0.08126932733517556, 0.09617621358346551, 0.08698787545733844, 0.12641170234266885, 0.0810735322402848, 0.10122738865959435, 0.06447174907712394, 0.08005477817717632, 0.07766427719050406]}, "mutation_prompt": null}
{"id": "2ef8e3ae-fd36-4112-9d7a-3c37f74f5df3", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 5  # Reduced iterations in SA part\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = alpha * (velocities[i] + cognitive_component + social_component)\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha  # Temperature modification for faster convergence\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Improved_PSO_SA_Optimizer_Enhanced", "description": "Reduced the number of iterations in the simulated annealing part and updated temperature modification for faster convergence.", "configspace": "", "generation": 6, "fitness": 0.1776852320994999, "feedback": "The algorithm Improved_PSO_SA_Optimizer_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.17.", "error": "", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {"aucs": [0.43420521354302966, 0.4143269978999189, 0.4260435272539277, 0.47183996482107315, 0.40246662088368246, 0.3966212760144242, 0.41846225385842417, 0.44051054424630276, 0.40879066647815254, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06852307214403375, 0.11645215382365004, 0.07808164455841182, 0.07352477596925888, 0.025856692569037887, 0.09391990125847915, 0.11900751383023367, 0.08470469113986834, 0.10514748001509322, 0.08176630757109649, 0.03064919046824177, 0.05288285290210082, 0.12083386984819167, 0.061313151547888856, 0.04349938960262045, 0.07305099216388966, 0.05086610417780102, 0.04336775241028823, 0.994717129969809, 0.1412081137156762, 0.995220641423502, 0.9917376035053145, 0.9861617745640936, 0.1801002988099839, 0.13831698402527093, 0.9950842716047081, 0.21413813631656198, 0.2964642838714284, 0.2806626890229298, 0.27783344536238463, 0.2902586980000944, 0.30187646916398003, 0.3011225661981797, 0.29222311866211637, 0.2975412947925168, 0.30488589703881186, 0.22240303176682474, 0.09664744272611847, 0.22683878052342643, 0.35133656789333934, 0.02331850087113363, 0.2644366263581507, 0.14810785861503428, 0.13544475310611015, 0.22983241059451243, 0.13925661537308642, 0.19692455568067868, 0.21647561724952924, 0.1481345812779471, 0.17090017559994974, 0.12607988657378466, 0.154349260919874, 0.18237079369024822, 0.16068888591764174, 0.17874779252765094, 0.11759139596111567, 0.2002630576728468, 0.16444481415910228, 0.1591446654837939, 0.17826640695783713, 0.1683808449291886, 0.14598892803797003, 0.1533213919923817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0377320201672523, 0.009044507528208179, 0.016824187377619815, 0.03360454134619395, 0.06510574019031812, 0.0, 0.0, 0.13576697983967645, 0.03051479412677527, 0.042096664423387886, 0.0, 0.01355790589125827, 0.0, 0.0, 0.0, 0.003978151896096516, 0.0, 0.0, 0.0, 0.037072946599207346, 0.1006153998303666, 0.02013648296347892, 0.040974660500085136, 0.06668523642280288, 0.07115112630068943, 0.10659891662749565, 0.09865277862339517, 0.07874769029621798, 0.3942708744873725, 0.41127842001613046, 0.41613042469095785, 0.3837111462147301, 0.36890623174693715, 0.3752322639379648, 0.44373137473402324, 0.4643925458544099, 0.3955659856990462, 0.03546299667961372, 0.07389185001260778, 0.07430451205165378, 0.11338072902105556, 0.06510221397838101, 0.06894448782700469, 0.04926821068242915, 0.08856167604365073, 0.062324112547187394, 0.234056567535201, 0.1614617711499784, 0.21115773084564948, 0.18051776202340952, 0.19299529736622112, 0.11202501895849182, 0.18539032581774995, 0.08235821203227078, 0.22094723016387763, 0.25835189632408195, 0.28362618501366565, 0.20967781798142537, 0.21309716800320277, 0.19409058810153013, 0.29519810304704486, 0.260354604806904, 0.18264997153870433, 0.08477818967737982, 0.19041809493430406, 0.16111899558816256, 0.20586049256541894, 0.19597240030519048, 0.15208582686928618, 0.19078692866506797, 0.17980147506145727, 0.1275682054532683, 0.22784614208640008, 0.20275937585559967, 0.17041998254425272, 0.1671588823450656, 0.21917812748529464, 0.15106776064589433, 0.17052179659536704, 0.2097080913747511, 0.15565917249197958, 0.18150018501420628, 0.19844331252762482, 0.2820542305054218, 0.17856187855564754, 0.2001235206273534, 0.17692147397160296, 0.19385422988411116, 0.17686028753026184, 0.18143386891977842, 0.19362058642844115, 0.18648447160303483, 0.16287899792706484, 0.1686681042579523, 0.173371820326216, 0.19847800887181055, 0.16907041300936398, 0.16658150119498283, 0.16557205258464913, 0.16450354469408268, 0.47663662409203866, 0.11129937340066443, 0.6113561549720379, 0.45681549825602774, 0.14869263724830561, 0.20744216183729036, 0.09328855955000415, 0.0945565613154078, 0.25352643746469417, 0.20360339846675246, 0.18567867774839075, 0.18207687428871688, 0.16875959193948986, 0.17148519851395283, 0.18335572422380897, 0.17589029209501517, 0.16592651194933727, 0.1695338000954083, 0.08126657507277235, 0.09617621358347073, 0.0825200416345453, 0.1264117023426672, 0.0810735322402748, 0.10122738865960423, 0.06447174907711783, 0.079266675888092, 0.07873905116748592]}, "mutation_prompt": null}
{"id": "f6a68864-7f84-41f9-9e49-6c3e17fd10f8", "solution": "import numpy as np\n\nclass Hybrid_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def hybrid_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_total = 110  # Combined max iterations\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            current_solution = particles[0]  # Initialize current solution\n\n            for iteration in range(1, max_iterations_total + 1):\n                T = T0 * (T_min / T0) ** (iteration / max_iterations_total)  # Update temperature\n\n                for i in range(n_particles):\n                    for _ in range(max_iterations_sa):\n                        candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                        candidate_fitness = objective_function(candidate_solution)\n\n                        if candidate_fitness < objective_function(current_solution) or np.random.rand() < np.exp((objective_function(current_solution) - candidate_fitness) / T):\n                            current_solution = candidate_solution\n\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = alpha * (velocities[i] + cognitive_component + social_component)\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            return best_solution\n\n        return hybrid_optimization()", "name": "Hybrid_PSO_SA_Optimizer", "description": "Optimized the loop structure by combining the PSO and SA phases to reduce redundant iterations and improve convergence speed.", "configspace": "", "generation": 7, "fitness": 0.16108219373174532, "feedback": "The algorithm Hybrid_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.16.", "error": "", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {"aucs": [0.33468609144993633, 0.3253725723630657, 0.3226392457524807, 0.3190807982297835, 0.3210396642218708, 0.32520326859163584, 0.3319984317077016, 0.3204594307322418, 0.3514103508909526, 9.999999999998899e-05, 0.0010755989737298854, 9.999999999998899e-05, 0.09380988242214483, 0.025817807914321422, 9.999999999998899e-05, 0.04968520207948646, 0.007514424575840839, 9.999999999998899e-05, 0.023757953415836308, 0.03653258695451911, 0.031364053209618215, 0.03637386552290156, 0.03198355563380628, 0.04081413469538564, 0.04160962172272653, 0.02773581856538898, 0.026821741042576286, 0.053517241672289106, 0.006572877856022341, 0.017619609518217283, 0.02125203909167306, 0.0024922875331060412, 0.01329572387646516, 0.019861595536131094, 0.014138149906342212, 0.02052849969362902, 0.8751214017204902, 0.7491918071755005, 0.8995251732278446, 0.5691601288678763, 0.6421545000422626, 0.6249818814497983, 0.6795403200905181, 0.8738420019461791, 0.6958460166472499, 0.2641604357867865, 0.260462127950875, 0.2606295069778626, 0.27445334610141425, 0.27130933214220654, 0.27720397709436795, 0.2501471041899238, 0.25459374083987096, 0.265694127596935, 0.23971963510160366, 0.1586790590834979, 0.1293830172547874, 0.300366279597607, 0.2951330408431936, 0.2730002624121959, 0.2007823162225788, 0.20412517004854702, 0.1817075370436778, 0.1911414633911892, 0.18703066511432997, 0.20882390201128886, 0.22104439895439143, 0.1286678967454754, 0.16385688542909416, 0.1788603423747589, 0.2060464426200379, 0.18910893797164696, 0.20043879388240116, 0.2009696875143503, 0.12379759071913143, 0.20851825649718403, 0.18261315373476972, 0.13135510702196207, 0.19272489271716398, 0.201254979253208, 0.19449008334906337, 0.03440924550625246, 0.0027432619903760003, 0.03455572643154825, 0.012828704832832605, 0.0011910329998549019, 9.999999999998899e-05, 0.0028326053842476773, 9.999999999998899e-05, 0.02121445942123701, 0.07496173010540641, 0.09055730355473457, 0.1362806282156036, 0.07534388888650956, 0.02904829877380377, 0.0197852963570071, 0.17202765657919739, 0.03259835970211056, 0.05267108544999277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013153325973497165, 9.999999999998899e-05, 0.06718460130837844, 0.10684797898123122, 0.09083241245981721, 0.11443465504518013, 0.10194989114039887, 0.0868538823916204, 0.0933792064638499, 0.07683792699200132, 0.0766118929641052, 0.30823257454160313, 0.3063769246542184, 0.3063700840135172, 0.29137576674452403, 0.2634155060085511, 0.2800929010280233, 0.3326976068203329, 0.2998875390172858, 0.32685794378854294, 0.03334357391742393, 0.03588820142814986, 0.037080817489169915, 0.03041930069247578, 0.02925341300473505, 0.04984469031919503, 0.028812712814501706, 0.032927874444742544, 0.042069152679908406, 0.14928194397718142, 0.14862649627353386, 0.24635659076151428, 0.14149792976758724, 0.1334363296336727, 0.17603275211947988, 0.10329539343046468, 0.14609170780249892, 0.12683900060615938, 0.14419106305272034, 0.12983307860736082, 0.11430218488531996, 0.24546151739484756, 0.12989977134642228, 0.15291159516930353, 0.20867801853422074, 0.1420438506296523, 0.10211148608227527, 0.0837813820897052, 0.11432262163993523, 0.06529581184299915, 0.12059829004328115, 0.08156264191221019, 0.09006753267773315, 0.09900351392984774, 0.07905810206077135, 0.08377509573024577, 0.15569638749281678, 0.13659955637603438, 0.15121447545863953, 0.20712209580786312, 0.12363880411505457, 0.14406236653645632, 0.1698665556938309, 0.1702269559587225, 0.13113065407607027, 0.20066475685801632, 0.19164713562289348, 0.17732028000570754, 0.20761735321526054, 0.18421542406677038, 0.2042855721872523, 0.18848059515127547, 0.18366609307519388, 0.21322545809113502, 0.12947489696484227, 0.13481624680697912, 0.4234568357722551, 0.1529632601551253, 0.1333380661904019, 0.1416980973693086, 0.10763792499954894, 0.11452953046767511, 0.16374743835604444, 0.4207021884703458, 0.1116846857883591, 0.12866620448569233, 0.15107168701942353, 0.20117417865377485, 0.19753329443389644, 0.341194237855702, 0.15956456416640252, 0.3530593548679096, 0.16853013958244734, 0.2004451713774541, 0.16218423426934847, 0.1787806358907077, 0.1689393408348835, 0.1966477598943266, 0.17291199054272888, 0.1684865710464053, 0.17639975826247323, 0.04541063679388058, 0.027105683486841392, 0.055960897195849846, 0.04531944109353192, 0.06068283385182549, 0.04438815333197621, 0.042538267296168275, 0.04215476664271334, 0.03631615662318277]}, "mutation_prompt": null}
{"id": "32e7de78-7ea2-486d-9dce-e8635603bca9", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * velocities[i]\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = alpha * velocities[i] + cognitive_component + social_component\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Improved_PSO_SA_Optimizer_V2", "description": "Improved_PSO_SA_Optimizer_V2 with enhanced velocity update mechanism by removing redundant calculations and optimizing loop operations for faster convergence.", "configspace": "", "generation": 8, "fitness": 0.1771097509058834, "feedback": "The algorithm Improved_PSO_SA_Optimizer_V2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {"aucs": [0.4065691639843353, 0.41892205016299155, 0.41017436427355747, 0.4173479356215697, 0.39928503009684346, 0.4284463484923233, 0.4355253304925214, 0.4004501766461661, 0.3956931418610051, 0.09963273522114646, 0.0, 0.0, 0.05040319787002412, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0766274967059204, 0.11430331897359958, 0.059335161426110616, 0.0279701021155373, 0.04312540005526788, 0.04316771240059458, 0.053683810708921365, 0.03405361034862886, 0.032506275610204693, 0.07102901959250918, 0.023508783138378897, 0.015314013237914703, 0.07678578936866465, 0.008055646151256202, 0.026397695755506767, 0.05262753488781069, 0.013846253846226841, 0.03980704872214624, 0.9954583871449902, 0.984882740208714, 0.9966989999941196, 0.9932887702311661, 0.9929440770376412, 0.8174244789289911, 0.9893238713264263, 0.9968139206641314, 0.820617759728337, 0.30550442443178794, 0.29700153333610324, 0.2986744738721272, 0.29728906406640077, 0.30108666004919027, 0.3190457935271337, 0.3062262104366258, 0.3090728233149562, 0.2739374221578572, 0.3521043425935201, 0.15286148334349614, 0.16259986013810812, 0.14462249699277052, 0.29125560086709834, 0.14343752458518377, 0.11925933256713761, 0.14908830862651412, 0.3416374308632836, 0.16356672346870726, 0.18209729326056823, 0.17762653578889398, 0.1362043020879622, 0.11169383530620658, 0.20423393279946467, 0.19193592046310004, 0.14274445818870096, 0.1807961297606494, 0.17245765938601343, 0.1102402410280292, 0.1681243734659572, 0.1681312506749193, 0.18049740062172348, 0.16566356983557928, 0.12243734776974524, 0.1427282047207653, 0.1701922524400501, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006556540977018077, 0.0, 0.0, 0.0, 0.09136416318702978, 0.02672923440964403, 0.04082403778027688, 0.06935907916682027, 0.02130447926131329, 0.0, 0.03957185640709826, 0.04309501554575368, 0.02005028945652121, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07892301727322959, 0.09685722444753231, 0.10565377672477938, 0.1323419234501262, 0.060754225081646074, 0.11284397800844814, 0.10635835166908203, 0.12750668171315338, 0.08886976184025897, 0.3813469062635402, 0.4094432382358286, 0.4120091931605533, 0.4089013232471741, 0.3739391981530572, 0.3661016918175529, 0.38189837994071896, 0.36808741801479095, 0.3972662320435407, 0.06483293190614037, 0.08716009733233554, 0.024254061840069174, 0.042516478864458085, 0.02530310609857056, 0.05169948282129411, 0.0321004563813414, 0.05639004396658143, 0.0760869565480754, 0.24357536638222832, 0.14907089387265338, 0.20418881578646064, 0.18249706744153338, 0.12764152922136995, 0.1409465694852695, 0.17726612031890165, 0.06461910919871994, 0.11800867093275502, 0.27789196645690195, 0.29320931438651876, 0.12026347968614026, 0.1474099056399405, 0.14609094115740806, 0.16379736466940265, 0.1618885824359304, 0.1684001897027152, 0.11939406055536861, 0.10409556583806734, 0.14842641471941165, 0.0696687744108001, 0.07684879854836779, 0.08976711443474994, 0.10070481579408075, 0.08423459695318236, 0.1385506395425613, 0.14134530108202614, 0.197453762847821, 0.20893053930278516, 0.19503831169070818, 0.1785769893535224, 0.14277940452288307, 0.1657063581114293, 0.15549827654025616, 0.18693578115196408, 0.15788112809819654, 0.20625991539120236, 0.17063543664363845, 0.18139510863659347, 0.1932891662229782, 0.1812973532525457, 0.16712869137652875, 0.1918616769098137, 0.1855558225083831, 0.164626694862821, 0.18049324910606024, 0.12982542362064964, 0.13128353839858098, 0.16773165673446344, 0.19413311319459559, 0.10712255444203167, 0.145560701926556, 0.16164763386732306, 0.16235767823643787, 0.550922324630291, 0.11082407942691863, 0.14832472626002235, 0.0799938997752292, 0.05651450324526208, 0.19632984823787736, 0.08826992823746782, 0.09238379723000689, 0.20446557225480932, 0.1704489115343606, 0.19240331239275232, 0.18666117150043715, 0.18452278015065582, 0.20224808769134073, 0.1858255047671704, 0.19735754881934464, 0.17133042545834576, 0.16885158104964249, 0.0782142963311031, 0.06993092849524529, 0.06190377112843248, 0.057484077377180975, 0.07548203231917705, 0.06526897640347529, 0.03340230930614674, 0.05065892547475792, 0.058450737665246555]}, "mutation_prompt": null}
{"id": "dfb7f5d8-c346-40aa-813c-2447bcda51d4", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            cognitive_components = np.zeros((n_particles, self.dim))\n            social_components = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_components[i] = np.random.random() * cognitive_components[i]\n                    social_components[i] = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = alpha * (velocities[i] + cognitive_components[i] + social_components[i])\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_PSO_SA_Optimizer", "description": "Improved variant with enhanced velocity update in PSO phase for faster convergence.", "configspace": "", "generation": 9, "fitness": 0.19466150133602234, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {"aucs": [0.4314545202660124, 0.4393502644124524, 0.445479395100323, 0.4066952880260908, 0.43205265700967843, 0.4945737975338801, 0.45790041649727364, 0.43627776825153897, 0.40792144910841976, 0.0, 0.0, 0.0, 0.012011407219953085, 0.0, 0.0, 0.0, 0.024123707122495452, 0.0, 0.06794963951677424, 0.1225498293376237, 0.07903529068755888, 0.07648631064809064, 0.04823003991221608, 0.0939199012584715, 0.1383207304653724, 0.08470469113985568, 0.1051474800150849, 0.08340334242565017, 0.030649190468234555, 0.056092038484564566, 0.13133111384229634, 0.06205709894973166, 0.045156071496901484, 0.07305099216388733, 0.05183310087434545, 0.04486016276392912, 0.994717129969809, 0.32762599413872173, 0.995220641423502, 0.9917376035053145, 0.9861617745640936, 0.8173923781497908, 0.7790193367835385, 0.9950842716047081, 0.8206769601174928, 0.2896560519328444, 0.342196193632332, 0.29491615245038416, 0.2951098030732042, 0.3087158462085374, 0.2932634301132486, 0.3059870207575117, 0.2987812562143326, 0.34048078206736776, 0.2223018447634033, 0.15588701779896252, 0.22516256291333336, 0.2819676371711006, 0.09509699711016295, 0.26316330190868664, 0.14488795644044405, 0.17328919952663124, 0.2306831756672233, 0.13925661537307787, 0.15179478638957078, 0.1940960627961883, 0.1365681373930001, 0.1572066542604864, 0.12606760099700187, 0.23801073188880695, 0.16953139436828546, 0.18000049758520198, 0.18350674410536927, 0.11759139596112422, 0.18640420898725862, 0.1865437487189998, 0.1853474767594323, 0.17659415539692414, 0.19052051603304676, 0.1699368132006679, 0.155575460020548, 0.0, 0.0, 0.019275970975781043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08270655230146551, 0.01185031484446486, 0.02108226381452183, 0.0337511566004266, 0.07030221451130458, 0.0, 0.0, 0.1394697546979642, 0.03945479828232623, 0.04282320451446486, 0.0, 0.013557905891247723, 0.0, 0.0, 0.0, 0.003978151896086635, 0.0, 0.0, 0.0, 0.037466464537609157, 0.1103968345098445, 0.029194629137713535, 0.06141438286836731, 0.09131888210671746, 0.07115112630069065, 0.11892002793275402, 0.10524539770407648, 0.07982527036917819, 0.41786853883548014, 0.4027331318550942, 0.45199658265661824, 0.4097382795023604, 0.4065956214374348, 0.37737851129421873, 0.4256814365017725, 0.3956032874830696, 0.4020258117994042, 0.03568903683166713, 0.07687441617888435, 0.07500400445000943, 0.12324773116190912, 0.06530806099490016, 0.06914144820890833, 0.049268210682428926, 0.08856167604363818, 0.06313542841588493, 0.23405656753520565, 0.18355231877466271, 0.2092660019575049, 0.1971450733220348, 0.28716588394399656, 0.11678804396021514, 0.19968785688514112, 0.08865696687112146, 0.2424638477108525, 0.29095846454429497, 0.3039650299713641, 0.20967781798142238, 0.26373819828396505, 0.2300914398236319, 0.30181306309582123, 0.25848665785712976, 0.17811059169459298, 0.08495856750880759, 0.21107876692740857, 0.198950727111875, 0.25481374740726437, 0.2355492160503755, 0.15303149065959643, 0.22928180276805488, 0.113915529621751, 0.13805334774083966, 0.2491749608073346, 0.2090620878507219, 0.17024360609221023, 0.21954878088905372, 0.2191781274853012, 0.15517923112187815, 0.18847442364430644, 0.20970809137474922, 0.16167164677095058, 0.1815001850142014, 0.20438332896667455, 0.2135088274295942, 0.1867575082124947, 0.18466448376943767, 0.1771981736716447, 0.1908551134505424, 0.2069802124651876, 0.18143386891977442, 0.19474549344863867, 0.1864043766007223, 0.16283746110853803, 0.16855884028807722, 0.17346748041723203, 0.19855385551972304, 0.16904513234687513, 0.16662539944951027, 0.16549680254005394, 0.16451043507943064, 0.5201953250779003, 0.11127264211980215, 0.6028421195962819, 0.5192304815268155, 0.1488108822415205, 0.20784997724159093, 0.09328135810548888, 0.0945484690820475, 0.43474408955909005, 0.20360339846675302, 0.1856786777483943, 0.18207687428871067, 0.16875959193949308, 0.1776892726774416, 0.18335572422380797, 0.17589029209501583, 0.18125081009074417, 0.17005297032174205, 0.08126932733517556, 0.09617621358346551, 0.08698787545733844, 0.12641170234266885, 0.0810735322402848, 0.10122738865959435, 0.06447174907712394, 0.08005477817717632, 0.07766427719050406]}, "mutation_prompt": null}
{"id": "457e7e59-f9cb-4307-9415-a3ee8ecc5927", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = alpha * (velocities[i] + cognitive_component + social_component)\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()\n", "name": "Enhanced_PSO_SA_Optimizer", "description": "Improved_PSO_SA_Optimizer variant with enhanced velocity update calculation efficiency by vectorization and removal of unnecessary variable initialization for faster convergence.", "configspace": "", "generation": 10, "fitness": 0.19466150133602234, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {"aucs": [0.4314545202660124, 0.4393502644124524, 0.445479395100323, 0.4066952880260908, 0.43205265700967843, 0.4945737975338801, 0.45790041649727364, 0.43627776825153897, 0.40792144910841976, 0.0, 0.0, 0.0, 0.012011407219953085, 0.0, 0.0, 0.0, 0.024123707122495452, 0.0, 0.06794963951677424, 0.1225498293376237, 0.07903529068755888, 0.07648631064809064, 0.04823003991221608, 0.0939199012584715, 0.1383207304653724, 0.08470469113985568, 0.1051474800150849, 0.08340334242565017, 0.030649190468234555, 0.056092038484564566, 0.13133111384229634, 0.06205709894973166, 0.045156071496901484, 0.07305099216388733, 0.05183310087434545, 0.04486016276392912, 0.994717129969809, 0.32762599413872173, 0.995220641423502, 0.9917376035053145, 0.9861617745640936, 0.8173923781497908, 0.7790193367835385, 0.9950842716047081, 0.8206769601174928, 0.2896560519328444, 0.342196193632332, 0.29491615245038416, 0.2951098030732042, 0.3087158462085374, 0.2932634301132486, 0.3059870207575117, 0.2987812562143326, 0.34048078206736776, 0.2223018447634033, 0.15588701779896252, 0.22516256291333336, 0.2819676371711006, 0.09509699711016295, 0.26316330190868664, 0.14488795644044405, 0.17328919952663124, 0.2306831756672233, 0.13925661537307787, 0.15179478638957078, 0.1940960627961883, 0.1365681373930001, 0.1572066542604864, 0.12606760099700187, 0.23801073188880695, 0.16953139436828546, 0.18000049758520198, 0.18350674410536927, 0.11759139596112422, 0.18640420898725862, 0.1865437487189998, 0.1853474767594323, 0.17659415539692414, 0.19052051603304676, 0.1699368132006679, 0.155575460020548, 0.0, 0.0, 0.019275970975781043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08270655230146551, 0.01185031484446486, 0.02108226381452183, 0.0337511566004266, 0.07030221451130458, 0.0, 0.0, 0.1394697546979642, 0.03945479828232623, 0.04282320451446486, 0.0, 0.013557905891247723, 0.0, 0.0, 0.0, 0.003978151896086635, 0.0, 0.0, 0.0, 0.037466464537609157, 0.1103968345098445, 0.029194629137713535, 0.06141438286836731, 0.09131888210671746, 0.07115112630069065, 0.11892002793275402, 0.10524539770407648, 0.07982527036917819, 0.41786853883548014, 0.4027331318550942, 0.45199658265661824, 0.4097382795023604, 0.4065956214374348, 0.37737851129421873, 0.4256814365017725, 0.3956032874830696, 0.4020258117994042, 0.03568903683166713, 0.07687441617888435, 0.07500400445000943, 0.12324773116190912, 0.06530806099490016, 0.06914144820890833, 0.049268210682428926, 0.08856167604363818, 0.06313542841588493, 0.23405656753520565, 0.18355231877466271, 0.2092660019575049, 0.1971450733220348, 0.28716588394399656, 0.11678804396021514, 0.19968785688514112, 0.08865696687112146, 0.2424638477108525, 0.29095846454429497, 0.3039650299713641, 0.20967781798142238, 0.26373819828396505, 0.2300914398236319, 0.30181306309582123, 0.25848665785712976, 0.17811059169459298, 0.08495856750880759, 0.21107876692740857, 0.198950727111875, 0.25481374740726437, 0.2355492160503755, 0.15303149065959643, 0.22928180276805488, 0.113915529621751, 0.13805334774083966, 0.2491749608073346, 0.2090620878507219, 0.17024360609221023, 0.21954878088905372, 0.2191781274853012, 0.15517923112187815, 0.18847442364430644, 0.20970809137474922, 0.16167164677095058, 0.1815001850142014, 0.20438332896667455, 0.2135088274295942, 0.1867575082124947, 0.18466448376943767, 0.1771981736716447, 0.1908551134505424, 0.2069802124651876, 0.18143386891977442, 0.19474549344863867, 0.1864043766007223, 0.16283746110853803, 0.16855884028807722, 0.17346748041723203, 0.19855385551972304, 0.16904513234687513, 0.16662539944951027, 0.16549680254005394, 0.16451043507943064, 0.5201953250779003, 0.11127264211980215, 0.6028421195962819, 0.5192304815268155, 0.1488108822415205, 0.20784997724159093, 0.09328135810548888, 0.0945484690820475, 0.43474408955909005, 0.20360339846675302, 0.1856786777483943, 0.18207687428871067, 0.16875959193949308, 0.1776892726774416, 0.18335572422380797, 0.17589029209501583, 0.18125081009074417, 0.17005297032174205, 0.08126932733517556, 0.09617621358346551, 0.08698787545733844, 0.12641170234266885, 0.0810735322402848, 0.10122738865959435, 0.06447174907712394, 0.08005477817717632, 0.07766427719050406]}, "mutation_prompt": null}
{"id": "5c3c7b16-cd72-4234-8d23-4beabf80a76c", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            sigma = 0.1\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = alpha * (velocities[i] + cognitive_component + social_component)\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T0 = 1.0\n            T_min = 0.0001\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_PSO_SA_Optimizer", "description": "Improved_PSO_SA_Optimizer with enhanced population initialization and dynamic temperature update for better performance.", "configspace": "", "generation": 11, "fitness": 0.19466150133602234, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {"aucs": [0.4314545202660124, 0.4393502644124524, 0.445479395100323, 0.4066952880260908, 0.43205265700967843, 0.4945737975338801, 0.45790041649727364, 0.43627776825153897, 0.40792144910841976, 0.0, 0.0, 0.0, 0.012011407219953085, 0.0, 0.0, 0.0, 0.024123707122495452, 0.0, 0.06794963951677424, 0.1225498293376237, 0.07903529068755888, 0.07648631064809064, 0.04823003991221608, 0.0939199012584715, 0.1383207304653724, 0.08470469113985568, 0.1051474800150849, 0.08340334242565017, 0.030649190468234555, 0.056092038484564566, 0.13133111384229634, 0.06205709894973166, 0.045156071496901484, 0.07305099216388733, 0.05183310087434545, 0.04486016276392912, 0.994717129969809, 0.32762599413872173, 0.995220641423502, 0.9917376035053145, 0.9861617745640936, 0.8173923781497908, 0.7790193367835385, 0.9950842716047081, 0.8206769601174928, 0.2896560519328444, 0.342196193632332, 0.29491615245038416, 0.2951098030732042, 0.3087158462085374, 0.2932634301132486, 0.3059870207575117, 0.2987812562143326, 0.34048078206736776, 0.2223018447634033, 0.15588701779896252, 0.22516256291333336, 0.2819676371711006, 0.09509699711016295, 0.26316330190868664, 0.14488795644044405, 0.17328919952663124, 0.2306831756672233, 0.13925661537307787, 0.15179478638957078, 0.1940960627961883, 0.1365681373930001, 0.1572066542604864, 0.12606760099700187, 0.23801073188880695, 0.16953139436828546, 0.18000049758520198, 0.18350674410536927, 0.11759139596112422, 0.18640420898725862, 0.1865437487189998, 0.1853474767594323, 0.17659415539692414, 0.19052051603304676, 0.1699368132006679, 0.155575460020548, 0.0, 0.0, 0.019275970975781043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08270655230146551, 0.01185031484446486, 0.02108226381452183, 0.0337511566004266, 0.07030221451130458, 0.0, 0.0, 0.1394697546979642, 0.03945479828232623, 0.04282320451446486, 0.0, 0.013557905891247723, 0.0, 0.0, 0.0, 0.003978151896086635, 0.0, 0.0, 0.0, 0.037466464537609157, 0.1103968345098445, 0.029194629137713535, 0.06141438286836731, 0.09131888210671746, 0.07115112630069065, 0.11892002793275402, 0.10524539770407648, 0.07982527036917819, 0.41786853883548014, 0.4027331318550942, 0.45199658265661824, 0.4097382795023604, 0.4065956214374348, 0.37737851129421873, 0.4256814365017725, 0.3956032874830696, 0.4020258117994042, 0.03568903683166713, 0.07687441617888435, 0.07500400445000943, 0.12324773116190912, 0.06530806099490016, 0.06914144820890833, 0.049268210682428926, 0.08856167604363818, 0.06313542841588493, 0.23405656753520565, 0.18355231877466271, 0.2092660019575049, 0.1971450733220348, 0.28716588394399656, 0.11678804396021514, 0.19968785688514112, 0.08865696687112146, 0.2424638477108525, 0.29095846454429497, 0.3039650299713641, 0.20967781798142238, 0.26373819828396505, 0.2300914398236319, 0.30181306309582123, 0.25848665785712976, 0.17811059169459298, 0.08495856750880759, 0.21107876692740857, 0.198950727111875, 0.25481374740726437, 0.2355492160503755, 0.15303149065959643, 0.22928180276805488, 0.113915529621751, 0.13805334774083966, 0.2491749608073346, 0.2090620878507219, 0.17024360609221023, 0.21954878088905372, 0.2191781274853012, 0.15517923112187815, 0.18847442364430644, 0.20970809137474922, 0.16167164677095058, 0.1815001850142014, 0.20438332896667455, 0.2135088274295942, 0.1867575082124947, 0.18466448376943767, 0.1771981736716447, 0.1908551134505424, 0.2069802124651876, 0.18143386891977442, 0.19474549344863867, 0.1864043766007223, 0.16283746110853803, 0.16855884028807722, 0.17346748041723203, 0.19855385551972304, 0.16904513234687513, 0.16662539944951027, 0.16549680254005394, 0.16451043507943064, 0.5201953250779003, 0.11127264211980215, 0.6028421195962819, 0.5192304815268155, 0.1488108822415205, 0.20784997724159093, 0.09328135810548888, 0.0945484690820475, 0.43474408955909005, 0.20360339846675302, 0.1856786777483943, 0.18207687428871067, 0.16875959193949308, 0.1776892726774416, 0.18335572422380797, 0.17589029209501583, 0.18125081009074417, 0.17005297032174205, 0.08126932733517556, 0.09617621358346551, 0.08698787545733844, 0.12641170234266885, 0.0810735322402848, 0.10122738865959435, 0.06447174907712394, 0.08005477817717632, 0.07766427719050406]}, "mutation_prompt": null}
{"id": "0d9caffe-bad8-4af1-8a61-31a0bf4634da", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.uniform(0, alpha, self.dim) * (particles[i] - particles[i])\n                    social_component = np.random.uniform(0, alpha, self.dim) * (best_solution - particles[i])\n                    velocities[i] += cognitive_component + social_component\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_PSO_SA_Optimizer", "description": "Improved_PSO_SA_Optimizer algorithm with enhanced convergence by adjusting the velocity update mechanism and fine-tuning the simulated annealing process.", "configspace": "", "generation": 12, "fitness": 0.1886265227831302, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {"aucs": [0.4341960341947534, 0.4353502130750543, 0.4296308965418991, 0.4197776444098772, 0.4310984868100596, 0.45226310601031694, 0.4230679230728567, 0.4083946872309667, 0.40399585501782764, 0.0, 0.0, 0.07580358355579542, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0037633961442777863, 0.10021286313021627, 0.023603363258050902, 0.060184613026908806, 0.04335600798985795, 0.015807040387995075, 0.048332122721792437, 0.06671644692970424, 0.0638465836904285, 0.05545776877936626, 0.032519348198172926, 0.11560955486782243, 0.08895916931792869, 0.07428359862457778, 0.07390407269282695, 0.05096438693027827, 0.10006464044057084, 0.09210880718081493, 0.023748345450584907, 0.9938263907948427, 0.9930907614799601, 0.9961967640616738, 0.9918902917508264, 0.9888265079727584, 0.9863230824345864, 0.9901254479463971, 0.995062701679041, 0.991150467530524, 0.300967596812575, 0.2932100075469519, 0.3151237687090255, 0.30482258052380007, 0.30228033986922787, 0.30710886676940685, 0.32627169832029934, 0.3116549054515384, 0.2875088573754696, 0.1683806827648754, 0.16090908016982353, 0.10324899941661203, 0.3521009531547713, 0.19211528312120973, 0.18442032631346483, 0.1716546635992643, 0.20840577029344443, 0.22747778049549128, 0.12000150913587371, 0.17900691879733965, 0.2242709517753888, 0.16784774000773195, 0.12389796306659939, 0.16758378992920153, 0.1831852199017674, 0.13764193012878334, 0.19420060384664384, 0.15739909422483256, 0.11316297603170655, 0.14646425905038452, 0.1074271321103566, 0.11964099193553235, 0.18292431035578482, 0.1753520629001738, 0.09646458751744191, 0.1623445349212458, 0.0, 0.0, 0.0, 0.0, 0.018739748747135354, 0.0, 0.03819103019923242, 0.0, 0.0, 0.021117698829467235, 0.02273291560643098, 0.01048479232319166, 0.06304033915270624, 0.012215170122143904, 0.0, 0.02757065749884735, 0.006685020504648809, 0.04290819518858657, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04813683415252379, 0.051144249990501156, 0.04942994075914031, 0.07884847244240556, 0.03569934623635307, 0.06794820696967929, 0.050644224256902404, 0.048677941295841465, 0.04874605272770316, 0.3997588994867033, 0.4476639321076099, 0.3872487129267008, 0.41037467056211785, 0.42273630464325995, 0.3909707051310134, 0.40501623193825176, 0.3853993673665088, 0.3670088089800333, 0.0855703398708747, 0.07263068506200321, 0.05703158183101076, 0.08961257108219112, 0.07346725097197448, 0.09078565326944332, 0.06221888003942966, 0.0885141686618659, 0.06745382640445297, 0.23650457698597815, 0.14535192731030744, 0.1921768484629952, 0.2808502840908961, 0.19971263317480792, 0.12477906225963775, 0.17270327101359018, 0.08426537630234421, 0.18374503826043587, 0.1682348516146971, 0.21733277923178085, 0.14537592939724164, 0.26788164323167407, 0.19958726984901254, 0.2932123397099091, 0.18422212502742819, 0.18718070116101848, 0.16323857654462648, 0.25765795827164106, 0.19750991013686303, 0.10615856097932852, 0.2189201292296491, 0.2239841908866359, 0.107698809071343, 0.16745762172828782, 0.16058947964833603, 0.20682575639595868, 0.1657161864348432, 0.1795019425723724, 0.1779707053136783, 0.21141546960745106, 0.16091177996427364, 0.17288750563721877, 0.20326405045481843, 0.20549840220098503, 0.1837443191727537, 0.18443388977543473, 0.16926807304766567, 0.17973570755988988, 0.19521249492074366, 0.20951693583622877, 0.1877450975487489, 0.1802132287937115, 0.16878614267567482, 0.19253678113798955, 0.15532640559525057, 0.6745123117410743, 0.16458309286428197, 0.16908562044995745, 0.1956804064172264, 0.19337760157885064, 0.1151561362576693, 0.12549046847786272, 0.15345896419267735, 0.08166963124673543, 0.11220289397113625, 0.12637847645716316, 0.3742155508453243, 0.20299805846192298, 0.2069524622997707, 0.11241738896351017, 0.14776568937247536, 0.4983961983032905, 0.1826151215521017, 0.16937926385286028, 0.19248777330781064, 0.18609813705634082, 0.1951573518035783, 0.1899030442030244, 0.1948461950406809, 0.19360967075235436, 0.17649679178801525, 0.07170035308669287, 0.04586615072370592, 0.06968104145016552, 0.07772454374013871, 0.05152753083705097, 0.04349918323133828, 0.08346752404255875, 0.0419997468296156, 0.049670638715886395]}, "mutation_prompt": null}
{"id": "337fc00b-9441-4928-aae2-95320a150d24", "solution": "import numpy as np\nfrom joblib import Parallel, delayed\n\nclass Parallel_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                results = Parallel(n_jobs=-1)(delayed(update_particle)(i, particles, velocities, bounds, alpha, best_solution) for i in range(n_particles))\n                particles, velocities, best_solution, best_fitness = zip(*results)\n\n            current_solution = best_solution[0]\n            current_fitness = best_fitness[0]\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        def update_particle(i, particles, velocities, bounds, alpha, best_solution):\n            fitness = objective_function(particles[i])\n            if fitness < best_fitness:\n                best_solution = particles[i].copy()\n                best_fitness = fitness\n\n            cognitive_component = np.random.random() * (particles[i] - particles[i])\n            social_component = np.random.random() * (best_solution - particles[i])\n            velocities[i] = alpha * (velocities[i] + cognitive_component + social_component)\n            particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            return particles, velocities, best_solution, best_fitness\n\n        return pso_sa_optimization()", "name": "Parallel_PSO_SA_Optimizer", "description": "Implemented parallel processing to update particles' positions and velocities concurrently for faster convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'joblib'\").", "error": "ModuleNotFoundError(\"No module named 'joblib'\")", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {}, "mutation_prompt": null}
{"id": "a656d037-1273-4062-92ff-bef1001a57e3", "solution": "import numpy as np\n\nclass DynamicTermination_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = alpha * (velocities[i] + cognitive_component + social_component)\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                if np.abs(current_fitness - best_fitness) < 1e-6:  # Dynamic termination condition based on convergence\n                    break\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "DynamicTermination_PSO_SA_Optimizer", "description": "Improved convergence criterion by dynamically adjusting the termination condition based on the function landscape to enhance search efficiency.", "configspace": "", "generation": 14, "fitness": 0.18797253560663632, "feedback": "The algorithm DynamicTermination_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {"aucs": [0.4314545202660124, 0.4393502644124524, 0.445479395100323, 0.4066952880260908, 0.43205265700967843, 0.4945737975338801, 0.45790041649727364, 0.43627776825153897, 0.40792144910841976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06794963951677424, 0.09477932900778019, 0.07903529068755888, 0.07648631064809064, 0.020719005428000647, 0.0939199012584715, 0.1383207304653724, 0.0595135021012031, 0.1051474800150849, 0.05622591995913662, 0.030649190468234555, 0.056092038484564566, 0.09979044828102202, 0.06205709894973166, 0.045156071496901484, 0.06474426579763892, 0.05183310087434545, 0.04486016276392912, 0.994717129969809, 0.32762599413872173, 0.995220641423502, 0.9917376035053145, 0.9861617745640936, 0.8173923781497908, 0.7790193367835385, 0.9950842716047081, 0.8206769601174928, 0.2896560519328444, 0.342196193632332, 0.29491615245038416, 0.2951098030732042, 0.3087158462085374, 0.2932634301132486, 0.3059870207575117, 0.2987812562143326, 0.34048078206736776, 0.2223018447634033, 0.08148032610051281, 0.22516256291333336, 0.2819676371711006, 0.09509699711016295, 0.12100841342001534, 0.125281580231684, 0.17328919952663124, 0.2306831756672233, 0.13925661537307787, 0.15179478638957078, 0.1940960627961883, 0.1365681373930001, 0.1572066542604864, 0.12606760099700187, 0.23801073188880695, 0.13938723942632458, 0.18000049758520198, 0.18350674410536927, 0.11759139596112422, 0.18640420898725862, 0.1324807657836352, 0.1853474767594323, 0.17659415539692414, 0.19052051603304676, 0.1699368132006679, 0.155575460020548, 0.0, 0.0, 0.019275970975781043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08270655230146551, 0.004780428066260223, 0.010204082035040862, 0.029940737825697727, 0.06431388560992168, 0.0, 0.0, 0.1071981397886329, 0.023970233990035728, 0.03714439275485515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003978151896086635, 0.0, 0.0, 0.0, 0.011798213230256094, 0.09023688960739928, 0.029194629137713535, 0.02694366379278801, 0.03739130007639746, 0.07115112630069065, 0.11892002793275402, 0.10524539770407648, 0.07982527036917819, 0.41786853883548014, 0.4027331318550942, 0.45199658265661824, 0.4097382795023604, 0.4065956214374348, 0.37737851129421873, 0.4256814365017725, 0.3956032874830696, 0.4020258117994042, 0.0347021304768641, 0.07163685827355426, 0.07500400445000943, 0.08542538995397686, 0.05303550734738127, 0.06255977104725152, 0.0467442574376441, 0.07894059429230971, 0.05638522614490282, 0.23405656753520565, 0.12998349445106472, 0.2092660019575049, 0.16257113034767767, 0.28716588394399656, 0.11678804396021514, 0.19968785688514112, 0.08207412035033523, 0.2424638477108525, 0.29095846454429497, 0.3039650299713641, 0.20967781798142238, 0.26373819828396505, 0.2300914398236319, 0.30181306309582123, 0.25848665785712976, 0.17811059169459298, 0.08339464144080189, 0.21107876692740857, 0.16111899558816145, 0.25481374740726437, 0.2355492160503755, 0.1457536174571873, 0.1348766160002911, 0.07471683139142116, 0.13805334774083966, 0.2491749608073346, 0.2013608077589264, 0.13570524945750662, 0.21954878088905372, 0.15241759744256977, 0.15106776064589722, 0.17052179659535982, 0.20970809137474755, 0.16167164677095058, 0.1815001850142014, 0.20438332896667455, 0.2135088274295942, 0.1867575082124947, 0.18466448376943767, 0.1771981736716447, 0.1908551134505424, 0.2069802124651876, 0.18143386891977442, 0.19474549344863867, 0.1864043766007223, 0.16283746110853803, 0.16855884028807722, 0.17346748041723203, 0.19855385551972304, 0.16904513234687513, 0.16662539944951027, 0.16549680254005394, 0.16451043507943064, 0.5201953250779003, 0.11127264211980215, 0.6028421195962819, 0.5192304815268155, 0.1488108822415205, 0.20784997724159093, 0.09328135810548888, 0.0945484690820475, 0.43474408955909005, 0.2036033984667519, 0.15561166277932081, 0.182076874288716, 0.15838173694552804, 0.14563574675394397, 0.18019561528123962, 0.1758902920950144, 0.16592651194934172, 0.1693982553687149, 0.06940980987026157, 0.0800530162136549, 0.07386743284900021, 0.08493048253757352, 0.06816651054234424, 0.10122738865960146, 0.06447174907712483, 0.05690251796869272, 0.0639663814350615]}, "mutation_prompt": null}
{"id": "1cce92c5-6aa3-4e92-b255-affb63a1040d", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = alpha * (velocities[i] + cognitive_component + social_component)\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Improved_PSO_SA_Optimizer", "description": "Improved PSO_SA_Optimizer algorithm with optimized loops, efficient variable initialization, and removal of redundant calculations for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {"aucs": [0.4314545202660124, 0.4393502644124524, 0.445479395100323, 0.4066952880260908, 0.43205265700967843, 0.4945737975338801, 0.45790041649727364, 0.43627776825153897, 0.40792144910841976, 0.0, 0.0, 0.0, 0.012011407219953085, 0.0, 0.0, 0.0, 0.024123707122495452, 0.0, 0.06794963951677424, 0.1225498293376237, 0.07903529068755888, 0.07648631064809064, 0.04823003991221608, 0.0939199012584715, 0.1383207304653724, 0.08470469113985568, 0.1051474800150849, 0.08340334242565017, 0.030649190468234555, 0.056092038484564566, 0.13133111384229634, 0.06205709894973166, 0.045156071496901484, 0.07305099216388733, 0.05183310087434545, 0.04486016276392912, 0.994717129969809, 0.32762599413872173, 0.995220641423502, 0.9917376035053145, 0.9861617745640936, 0.8173923781497908, 0.7790193367835385, 0.9950842716047081, 0.8206769601174928, 0.2896560519328444, 0.342196193632332, 0.29491615245038416, 0.2951098030732042, 0.3087158462085374, 0.2932634301132486, 0.3059870207575117, 0.2987812562143326, 0.34048078206736776, 0.2223018447634033, 0.15588701779896252, 0.22516256291333336, 0.2819676371711006, 0.09509699711016295, 0.26316330190868664, 0.14488795644044405, 0.17328919952663124, 0.2306831756672233, 0.13925661537307787, 0.15179478638957078, 0.1940960627961883, 0.1365681373930001, 0.1572066542604864, 0.12606760099700187, 0.23801073188880695, 0.16953139436828546, 0.18000049758520198, 0.18350674410536927, 0.11759139596112422, 0.18640420898725862, 0.1865437487189998, 0.1853474767594323, 0.17659415539692414, 0.19052051603304676, 0.1699368132006679, 0.155575460020548, 0.0, 0.0, 0.019275970975781043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08270655230146551, 0.01185031484446486, 0.02108226381452183, 0.0337511566004266, 0.07030221451130458, 0.0, 0.0, 0.1394697546979642, 0.03945479828232623, 0.04282320451446486, 0.0, 0.013557905891247723, 0.0, 0.0, 0.0, 0.003978151896086635, 0.0, 0.0, 0.0, 0.037466464537609157, 0.1103968345098445, 0.029194629137713535, 0.06141438286836731, 0.09131888210671746, 0.07115112630069065, 0.11892002793275402, 0.10524539770407648, 0.07982527036917819, 0.41786853883548014, 0.4027331318550942, 0.45199658265661824, 0.4097382795023604, 0.4065956214374348, 0.37737851129421873, 0.4256814365017725, 0.3956032874830696, 0.4020258117994042, 0.03568903683166713, 0.07687441617888435, 0.07500400445000943, 0.12324773116190912, 0.06530806099490016, 0.06914144820890833, 0.049268210682428926, 0.08856167604363818, 0.06313542841588493, 0.23405656753520565, 0.18355231877466271, 0.2092660019575049, 0.1971450733220348, 0.28716588394399656, 0.11678804396021514, 0.19968785688514112, 0.08865696687112146, 0.2424638477108525, 0.29095846454429497, 0.3039650299713641, 0.20967781798142238, 0.26373819828396505, 0.2300914398236319, 0.30181306309582123, 0.25848665785712976, 0.17811059169459298, 0.08495856750880759, 0.21107876692740857, 0.198950727111875, 0.25481374740726437, 0.2355492160503755, 0.15303149065959643, 0.22928180276805488, 0.113915529621751, 0.13805334774083966, 0.2491749608073346, 0.2090620878507219, 0.17024360609221023, 0.21954878088905372, 0.2191781274853012, 0.15517923112187815, 0.18847442364430644, 0.20970809137474922, 0.16167164677095058, 0.1815001850142014, 0.20438332896667455, 0.2135088274295942, 0.1867575082124947, 0.18466448376943767, 0.1771981736716447, 0.1908551134505424, 0.2069802124651876, 0.18143386891977442, 0.19474549344863867, 0.1864043766007223, 0.16283746110853803, 0.16855884028807722, 0.17346748041723203, 0.19855385551972304, 0.16904513234687513, 0.16662539944951027, 0.16549680254005394, 0.16451043507943064, 0.5201953250779003, 0.11127264211980215, 0.6028421195962819, 0.5192304815268155, 0.1488108822415205, 0.20784997724159093, 0.09328135810548888, 0.0945484690820475, 0.43474408955909005, 0.20360339846675302, 0.1856786777483943, 0.18207687428871067, 0.16875959193949308, 0.1776892726774416, 0.18335572422380797, 0.17589029209501583, 0.18125081009074417, 0.17005297032174205, 0.08126932733517556, 0.09617621358346551, 0.08698787545733844, 0.12641170234266885, 0.0810735322402848, 0.10122738865959435, 0.06447174907712394, 0.08005477817717632, 0.07766427719050406]}, "mutation_prompt": null}
{"id": "dbc3cb89-c7c8-4317-b044-403807793c91", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = alpha * (velocities[i] + cognitive_component + social_component)\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Improved_PSO_SA_Optimizer", "description": "Improved PSO_SA_Optimizer algorithm with optimized loops, efficient variable initialization, and removal of redundant calculations for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {"aucs": [0.4314545202660124, 0.4393502644124524, 0.445479395100323, 0.4066952880260908, 0.43205265700967843, 0.4945737975338801, 0.45790041649727364, 0.43627776825153897, 0.40792144910841976, 0.0, 0.0, 0.0, 0.012011407219953085, 0.0, 0.0, 0.0, 0.024123707122495452, 0.0, 0.06794963951677424, 0.1225498293376237, 0.07903529068755888, 0.07648631064809064, 0.04823003991221608, 0.0939199012584715, 0.1383207304653724, 0.08470469113985568, 0.1051474800150849, 0.08340334242565017, 0.030649190468234555, 0.056092038484564566, 0.13133111384229634, 0.06205709894973166, 0.045156071496901484, 0.07305099216388733, 0.05183310087434545, 0.04486016276392912, 0.994717129969809, 0.32762599413872173, 0.995220641423502, 0.9917376035053145, 0.9861617745640936, 0.8173923781497908, 0.7790193367835385, 0.9950842716047081, 0.8206769601174928, 0.2896560519328444, 0.342196193632332, 0.29491615245038416, 0.2951098030732042, 0.3087158462085374, 0.2932634301132486, 0.3059870207575117, 0.2987812562143326, 0.34048078206736776, 0.2223018447634033, 0.15588701779896252, 0.22516256291333336, 0.2819676371711006, 0.09509699711016295, 0.26316330190868664, 0.14488795644044405, 0.17328919952663124, 0.2306831756672233, 0.13925661537307787, 0.15179478638957078, 0.1940960627961883, 0.1365681373930001, 0.1572066542604864, 0.12606760099700187, 0.23801073188880695, 0.16953139436828546, 0.18000049758520198, 0.18350674410536927, 0.11759139596112422, 0.18640420898725862, 0.1865437487189998, 0.1853474767594323, 0.17659415539692414, 0.19052051603304676, 0.1699368132006679, 0.155575460020548, 0.0, 0.0, 0.019275970975781043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08270655230146551, 0.01185031484446486, 0.02108226381452183, 0.0337511566004266, 0.07030221451130458, 0.0, 0.0, 0.1394697546979642, 0.03945479828232623, 0.04282320451446486, 0.0, 0.013557905891247723, 0.0, 0.0, 0.0, 0.003978151896086635, 0.0, 0.0, 0.0, 0.037466464537609157, 0.1103968345098445, 0.029194629137713535, 0.06141438286836731, 0.09131888210671746, 0.07115112630069065, 0.11892002793275402, 0.10524539770407648, 0.07982527036917819, 0.41786853883548014, 0.4027331318550942, 0.45199658265661824, 0.4097382795023604, 0.4065956214374348, 0.37737851129421873, 0.4256814365017725, 0.3956032874830696, 0.4020258117994042, 0.03568903683166713, 0.07687441617888435, 0.07500400445000943, 0.12324773116190912, 0.06530806099490016, 0.06914144820890833, 0.049268210682428926, 0.08856167604363818, 0.06313542841588493, 0.23405656753520565, 0.18355231877466271, 0.2092660019575049, 0.1971450733220348, 0.28716588394399656, 0.11678804396021514, 0.19968785688514112, 0.08865696687112146, 0.2424638477108525, 0.29095846454429497, 0.3039650299713641, 0.20967781798142238, 0.26373819828396505, 0.2300914398236319, 0.30181306309582123, 0.25848665785712976, 0.17811059169459298, 0.08495856750880759, 0.21107876692740857, 0.198950727111875, 0.25481374740726437, 0.2355492160503755, 0.15303149065959643, 0.22928180276805488, 0.113915529621751, 0.13805334774083966, 0.2491749608073346, 0.2090620878507219, 0.17024360609221023, 0.21954878088905372, 0.2191781274853012, 0.15517923112187815, 0.18847442364430644, 0.20970809137474922, 0.16167164677095058, 0.1815001850142014, 0.20438332896667455, 0.2135088274295942, 0.1867575082124947, 0.18466448376943767, 0.1771981736716447, 0.1908551134505424, 0.2069802124651876, 0.18143386891977442, 0.19474549344863867, 0.1864043766007223, 0.16283746110853803, 0.16855884028807722, 0.17346748041723203, 0.19855385551972304, 0.16904513234687513, 0.16662539944951027, 0.16549680254005394, 0.16451043507943064, 0.5201953250779003, 0.11127264211980215, 0.6028421195962819, 0.5192304815268155, 0.1488108822415205, 0.20784997724159093, 0.09328135810548888, 0.0945484690820475, 0.43474408955909005, 0.20360339846675302, 0.1856786777483943, 0.18207687428871067, 0.16875959193949308, 0.1776892726774416, 0.18335572422380797, 0.17589029209501583, 0.18125081009074417, 0.17005297032174205, 0.08126932733517556, 0.09617621358346551, 0.08698787545733844, 0.12641170234266885, 0.0810735322402848, 0.10122738865959435, 0.06447174907712394, 0.08005477817717632, 0.07766427719050406]}, "mutation_prompt": null}
{"id": "8a3e9662-4938-4de8-abc3-79d47433dcd5", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = alpha * (velocities[i] + cognitive_component + social_component)\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Improved_PSO_SA_Optimizer", "description": "Improved PSO_SA_Optimizer algorithm with optimized loops, efficient variable initialization, and removal of redundant calculations for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {"aucs": [0.4314545202660124, 0.4393502644124524, 0.445479395100323, 0.4066952880260908, 0.43205265700967843, 0.4945737975338801, 0.45790041649727364, 0.43627776825153897, 0.40792144910841976, 0.0, 0.0, 0.0, 0.012011407219953085, 0.0, 0.0, 0.0, 0.024123707122495452, 0.0, 0.06794963951677424, 0.1225498293376237, 0.07903529068755888, 0.07648631064809064, 0.04823003991221608, 0.0939199012584715, 0.1383207304653724, 0.08470469113985568, 0.1051474800150849, 0.08340334242565017, 0.030649190468234555, 0.056092038484564566, 0.13133111384229634, 0.06205709894973166, 0.045156071496901484, 0.07305099216388733, 0.05183310087434545, 0.04486016276392912, 0.994717129969809, 0.32762599413872173, 0.995220641423502, 0.9917376035053145, 0.9861617745640936, 0.8173923781497908, 0.7790193367835385, 0.9950842716047081, 0.8206769601174928, 0.2896560519328444, 0.342196193632332, 0.29491615245038416, 0.2951098030732042, 0.3087158462085374, 0.2932634301132486, 0.3059870207575117, 0.2987812562143326, 0.34048078206736776, 0.2223018447634033, 0.15588701779896252, 0.22516256291333336, 0.2819676371711006, 0.09509699711016295, 0.26316330190868664, 0.14488795644044405, 0.17328919952663124, 0.2306831756672233, 0.13925661537307787, 0.15179478638957078, 0.1940960627961883, 0.1365681373930001, 0.1572066542604864, 0.12606760099700187, 0.23801073188880695, 0.16953139436828546, 0.18000049758520198, 0.18350674410536927, 0.11759139596112422, 0.18640420898725862, 0.1865437487189998, 0.1853474767594323, 0.17659415539692414, 0.19052051603304676, 0.1699368132006679, 0.155575460020548, 0.0, 0.0, 0.019275970975781043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08270655230146551, 0.01185031484446486, 0.02108226381452183, 0.0337511566004266, 0.07030221451130458, 0.0, 0.0, 0.1394697546979642, 0.03945479828232623, 0.04282320451446486, 0.0, 0.013557905891247723, 0.0, 0.0, 0.0, 0.003978151896086635, 0.0, 0.0, 0.0, 0.037466464537609157, 0.1103968345098445, 0.029194629137713535, 0.06141438286836731, 0.09131888210671746, 0.07115112630069065, 0.11892002793275402, 0.10524539770407648, 0.07982527036917819, 0.41786853883548014, 0.4027331318550942, 0.45199658265661824, 0.4097382795023604, 0.4065956214374348, 0.37737851129421873, 0.4256814365017725, 0.3956032874830696, 0.4020258117994042, 0.03568903683166713, 0.07687441617888435, 0.07500400445000943, 0.12324773116190912, 0.06530806099490016, 0.06914144820890833, 0.049268210682428926, 0.08856167604363818, 0.06313542841588493, 0.23405656753520565, 0.18355231877466271, 0.2092660019575049, 0.1971450733220348, 0.28716588394399656, 0.11678804396021514, 0.19968785688514112, 0.08865696687112146, 0.2424638477108525, 0.29095846454429497, 0.3039650299713641, 0.20967781798142238, 0.26373819828396505, 0.2300914398236319, 0.30181306309582123, 0.25848665785712976, 0.17811059169459298, 0.08495856750880759, 0.21107876692740857, 0.198950727111875, 0.25481374740726437, 0.2355492160503755, 0.15303149065959643, 0.22928180276805488, 0.113915529621751, 0.13805334774083966, 0.2491749608073346, 0.2090620878507219, 0.17024360609221023, 0.21954878088905372, 0.2191781274853012, 0.15517923112187815, 0.18847442364430644, 0.20970809137474922, 0.16167164677095058, 0.1815001850142014, 0.20438332896667455, 0.2135088274295942, 0.1867575082124947, 0.18466448376943767, 0.1771981736716447, 0.1908551134505424, 0.2069802124651876, 0.18143386891977442, 0.19474549344863867, 0.1864043766007223, 0.16283746110853803, 0.16855884028807722, 0.17346748041723203, 0.19855385551972304, 0.16904513234687513, 0.16662539944951027, 0.16549680254005394, 0.16451043507943064, 0.5201953250779003, 0.11127264211980215, 0.6028421195962819, 0.5192304815268155, 0.1488108822415205, 0.20784997724159093, 0.09328135810548888, 0.0945484690820475, 0.43474408955909005, 0.20360339846675302, 0.1856786777483943, 0.18207687428871067, 0.16875959193949308, 0.1776892726774416, 0.18335572422380797, 0.17589029209501583, 0.18125081009074417, 0.17005297032174205, 0.08126932733517556, 0.09617621358346551, 0.08698787545733844, 0.12641170234266885, 0.0810735322402848, 0.10122738865959435, 0.06447174907712394, 0.08005477817717632, 0.07766427719050406]}, "mutation_prompt": null}
{"id": "d0b02f3d-6d85-4a8f-b860-b67a3634e1ff", "solution": "import numpy as np\n\nclass Improved_Adaptive_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_weight = 0.5\n            inertia_decay = 0.95\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = alpha * (inertia_weight * velocities[i] + cognitive_component + social_component)\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight *= inertia_decay\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Improved_Adaptive_PSO_SA_Optimizer", "description": "Improved PSO_SA algorithm with adaptive inertia weight and dynamic temperature control for enhanced exploration-exploitation balance and convergence speed.", "configspace": "", "generation": 18, "fitness": 0.18127071636036998, "feedback": "The algorithm Improved_Adaptive_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {"aucs": [0.4272477153904085, 0.4463701415109824, 0.4178427694473619, 0.41079566285907954, 0.4098814802984003, 0.4170150163287968, 0.4377414562045313, 0.43663609561087613, 0.4162073077054784, 0.11687377743813265, 0.0, 0.0, 0.036324390324201206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03948826552585305, 0.10273484695469837, 0.05002567779472156, 0.06428556713357758, 0.050875823299991296, 0.05354360087799537, 0.03897660209128262, 0.0765340004108992, 0.049654441854642184, 0.047177979680135596, 0.014533094404251101, 0.04201847635538403, 0.08381793604800492, 0.00911593572413949, 0.0, 0.0424235811378032, 0.02457798768639563, 0.0, 0.8785456888590122, 0.8594184020795652, 0.8593242202607111, 0.8552116673562449, 0.8440330858614187, 0.8138901004398207, 0.7767906129682709, 0.8488738777608933, 0.7817242137353133, 0.30024711024999406, 0.3279788476428491, 0.28917620056026794, 0.3105345799502308, 0.299136521862588, 0.29640136556613383, 0.3758654755462507, 0.29773969327841154, 0.2896818713513538, 0.37535277449134397, 0.123403203633074, 0.1977943759653238, 0.19678900630739227, 0.1791611684266411, 0.18096954957270683, 0.16285245647929036, 0.1356794628971053, 0.17715068189430316, 0.13684175117392783, 0.16656115247531011, 0.15809310845262659, 0.17508848824468715, 0.0, 0.1581098332211044, 0.24283920993051555, 0.16691818348679666, 0.2057965078493409, 0.20260215456169883, 0.14342862565869985, 0.18799862839694548, 0.19366147622727625, 0.19820349778692148, 0.12917728836403297, 0.1737945982765352, 0.14711301436927682, 0.12499853423940932, 0.0, 0.0, 0.0, 0.006539897039831155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.037848130796628854, 0.025456614363826513, 0.05175876071046004, 0.0728998300574063, 0.0, 0.002682370970989778, 0.12828036839660417, 0.04286440987529638, 0.031907751866327216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.043033719260001435, 0.07460254174373837, 0.11004314646965918, 0.08871283688775145, 0.04665639054999793, 0.09882382874295181, 0.06689087768661406, 0.09685637361976185, 0.07314594016048481, 0.38004054536442344, 0.40734640096610253, 0.45452732895796666, 0.3929689546029038, 0.37303725408237964, 0.39693166510709577, 0.41466212911099065, 0.4168326282385071, 0.41871542604914136, 0.05299064596168879, 0.056302562715981885, 0.030270253870578356, 0.0651633219799187, 0.027400380999831442, 0.08113622887873062, 0.07599085153458995, 0.055353573698929015, 0.0777273144805749, 0.23338954360796538, 0.22519137555048863, 0.264045134347915, 0.1805036196347335, 0.11882399539528155, 0.18186502064632992, 0.28006306174734996, 0.12392692581022124, 0.18927553361451277, 0.15795891940871587, 0.24220176481867473, 0.13407020984421836, 0.18079627812154375, 0.16039807443857867, 0.2369580293054402, 0.18126992428920385, 0.18246203504470881, 0.1049937234143079, 0.11066849314227001, 0.1383884884427895, 0.0995607693714412, 0.07317453733529455, 0.15173812668079134, 0.1928600533884175, 0.07105795148798821, 0.14622126783964107, 0.058238163397905884, 0.18697645959956966, 0.18365306979539686, 0.14216743127462672, 0.15783679912051485, 0.17609038485571005, 0.18387331046114253, 0.1750939159046646, 0.17081212321221262, 0.22425403784844766, 0.1822061708329893, 0.17344342556682768, 0.1655647745673965, 0.18296602064237355, 0.1767885320267396, 0.18566510899783184, 0.17717377630208153, 0.20837473240640947, 0.16595335453466964, 0.1755527168951092, 0.5806924279020316, 0.12991575688544632, 0.173410444632478, 0.1981070999137695, 0.10801625245464075, 0.16794431527717313, 0.1659628595610564, 0.1634232960198584, 0.5821209709435606, 0.11009747983880203, 0.46750859551311696, 0.08031323131030876, 0.14748292797151918, 0.20236391954192878, 0.39287141196224074, 0.09484893225100222, 0.32863887971675254, 0.1866529513461066, 0.16303737255011252, 0.16900703085814894, 0.1682553898304332, 0.19128760064788408, 0.20053726657221793, 0.17992643083072413, 0.17451640878421693, 0.18512060030447042, 0.08154662828014803, 0.05749873213870538, 0.05893914176467441, 0.09234530989486522, 0.10088169106574618, 0.09170705987492733, 0.05962510167938073, 0.04130779853151545, 0.059943098610206635]}, "mutation_prompt": null}
{"id": "bb8dc66f-db90-456b-83dd-81bc3ef2d4ed", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            beta = 0.05  # New parameter for enhanced convergence\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = alpha * velocities[i] + cognitive_component + social_component\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha - beta * T  # Enhanced temperature update for better convergence\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_PSO_SA_Optimizer", "description": "Optimized PSO_SA_Optimizer algorithm with improved particle updating mechanism and enhanced convergence control mechanism for faster and more accurate optimization.", "configspace": "", "generation": 19, "fitness": 0.19442716056653556, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {"aucs": [0.4406480330733482, 0.430977439814894, 0.42457095785656607, 0.4192753744534321, 0.4517117428873586, 0.43656568798191075, 0.4168181760651706, 0.4276438090002189, 0.4200683489235195, 0.03980511286550059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0254631589818326, 0.0, 0.0, 0.06984224663963945, 0.08768140973980065, 0.07416344728127422, 0.11043729688039461, 0.046820120355117956, 0.08342830084970843, 0.11070136988129275, 0.07675272867411076, 0.09568167155935592, 0.08316072609176828, 0.04779933339126197, 0.04250649012772045, 0.07522683652031026, 0.03278135569697793, 0.04385396904117167, 0.06001138579647558, 0.08419733615999048, 0.05029133947148279, 0.9954126830082698, 0.2020586137832987, 0.9952691047291359, 0.9908613270159371, 0.987407708745604, 0.8172623166132027, 0.7935008273403362, 0.9951060336331918, 0.822556804563148, 0.3181015720510564, 0.3330652760104186, 0.33666424010881013, 0.2971910328201921, 0.2807281099796014, 0.33104677694755, 0.2943229278424917, 0.30242177696490036, 0.2908345140657178, 0.36504882143199435, 0.0792650835623584, 0.2283799602297849, 0.2695551680807561, 0.25506784251062675, 0.15211329779653548, 0.18737750623612281, 0.16857262640877857, 0.2170385488115315, 0.15065809489923232, 0.17485794055576187, 0.1821501806633049, 0.13297023386533424, 0.20867340175051807, 0.12007414981206199, 0.19073394608778294, 0.12525906823852206, 0.13222410687581976, 0.18771707648709957, 0.11129074115378756, 0.16441206863829305, 0.17512175605206015, 0.16566603484980646, 0.12977836861121395, 0.22691623089156432, 0.003343272312770762, 0.19990738254916762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11919092710358725, 0.022845382500771616, 0.07507165771952096, 0.06455433341490313, 0.0, 0.007055260954643594, 0.1427003345466612, 0.004067623873037829, 0.0027115861888931114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04177179030313527, 0.08634225503166604, 0.011238154698411384, 0.0763952234819053, 0.0553275069048097, 0.11293675775885881, 0.11296168849512067, 0.12258406442555059, 0.0704605633521378, 0.4196831417261022, 0.4280820941181973, 0.41295890643082855, 0.40775570007493767, 0.4234803485023142, 0.3914900692047514, 0.47724925351206204, 0.4011881459824149, 0.43415701838630716, 0.0327251779298402, 0.0601976532450571, 0.04636725978406908, 0.11051680109000794, 0.08799568767417054, 0.0943032792948234, 0.04441137765636627, 0.07614206677516977, 0.05239813522473191, 0.23429398076354457, 0.30058992564780607, 0.23429167689209685, 0.31357163098047036, 0.28114888851135034, 0.11943759487644134, 0.17421231558147188, 0.2067967555474879, 0.18808574281560486, 0.17214832825292214, 0.28965216863629195, 0.1319053365839794, 0.26045900367976604, 0.21634673187839149, 0.2527483480048295, 0.20024266586295947, 0.1805784823547809, 0.10705386083942592, 0.2341432434812386, 0.2055657942998349, 0.18450863262243788, 0.24650490734963215, 0.1552348368208455, 0.1948205792950446, 0.19537626668870067, 0.1486391671273516, 0.13023010568971827, 0.20926105162278197, 0.2241612678879158, 0.19341316264058583, 0.20776026565260763, 0.1546369933627031, 0.19005697077187356, 0.22777528064299202, 0.21387240634671434, 0.1909945346099272, 0.17282003954480296, 0.18464972615061093, 0.19008398029075435, 0.1822212260784174, 0.17417191271998123, 0.23984512611171793, 0.19188147711340187, 0.2003016206835202, 0.24104167528503584, 0.17707909383010678, 0.11284046061539843, 0.1664226812412386, 0.17330600342680247, 0.19742226023912302, 0.16930707638481401, 0.16003720759005158, 0.1657040111030943, 0.16567476204394005, 0.5733466386757895, 0.11259103968572415, 0.529612593624502, 0.5614027792879817, 0.15378169874630898, 0.21012068670194017, 0.09356047475507634, 0.635419966752319, 0.3979582805958225, 0.17481307307285077, 0.1741903849583274, 0.17895829390032503, 0.1814381828674363, 0.17939785279296083, 0.16714361481582074, 0.1858571346350465, 0.17771552678159497, 0.1855938674825972, 0.06997238250223381, 0.07942920283802157, 0.06713487766618875, 0.06587826122950102, 0.13803623185504021, 0.0610870207214117, 0.07207735572690377, 0.049754592319533164, 0.058478433292258325]}, "mutation_prompt": null}
{"id": "a8c1931d-9e7a-4b0b-a144-00977f1eb55b", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9  # New parameter for dynamic inertia weight\n            inertia_min = 0.4  # New parameter for dynamic inertia weight\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = inertia_weight * (velocities[i] + alpha * cognitive_component + alpha * social_component)  # Updated velocity update\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)  # Dynamic inertia weight update\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_PSO_SA_Optimizer", "description": "Improved_PSO_SA_Optimizer with enhanced particle update mechanism using dynamic inertia weight for better convergence.", "configspace": "", "generation": 20, "fitness": 0.20336835294774844, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "41e1243d-435d-43ea-b566-209e1b3f305d", "metadata": {"aucs": [0.5208359497291213, 0.4439717439605322, 0.4721165775122321, 0.6318405872788322, 0.4348681464611329, 0.419535985462579, 0.44016966746005215, 0.41956126103645996, 0.42345837830894184, 0.08235021231284878, 0.027553133484711334, 0.0, 0.0, 0.0, 0.07149805886535143, 0.045235438991384935, 0.06530195691151697, 0.0, 0.0829147997734081, 0.0902385091461465, 0.08568077008585184, 0.028650927505296186, 0.03591399688929431, 0.10928027466006607, 0.0547935703171919, 0.10176480173174973, 0.055550370473027355, 0.05447762371696985, 0.05231805964078906, 0.08496880420133912, 0.06984526728690399, 0.04577416242411714, 0.04356158778557695, 0.07077641643662735, 0.05626252254644171, 0.04988931524411533, 0.9945935098758786, 0.9832201945538783, 0.9943236319413827, 0.9908878059759397, 0.9892489458958826, 0.8173732861119248, 0.7789383709110539, 0.9942580396677411, 0.8205773334786686, 0.3185350074443295, 0.3022631978019661, 0.3281718138390357, 0.32320282342185913, 0.33519400924528964, 0.30809220631694456, 0.3253095636505592, 0.3353732535446712, 0.2932495217272454, 0.372169722097914, 0.12430021145801384, 0.22415412024326542, 0.32017832783456346, 0.25629035906953856, 0.3939150057628993, 0.10786090932516379, 0.23544417543895102, 0.3628921195637579, 0.09405747241506557, 0.16042062047896366, 0.12422370650717307, 0.15168506233667445, 0.21387078884823674, 0.12540479284889738, 0.3255916583004934, 0.16509895752447468, 0.1848576251780485, 0.22329987615442703, 0.11115986872169326, 0.12672614999502552, 0.19443605601381309, 0.19271372096996597, 0.13564101434424725, 0.18950437677861187, 0.2077621173564701, 0.178354668807163, 0.0, 0.0, 0.0, 0.011316990623686296, 0.0, 0.0016725097153336144, 0.0, 0.0, 0.0008471687523380345, 0.014622628693076178, 0.015500097607953234, 0.06232181214573518, 0.061428727581001485, 0.0, 0.0020982364500309325, 0.09171162037140768, 0.037813821494461775, 0.016525143985298363, 0.0, 0.053657973539047665, 0.0, 0.0, 0.04122480568017928, 0.06560705770828712, 0.0, 0.16756805969132837, 0.07951679653963295, 0.05109019880144483, 0.059399256959036806, 0.0134594490153358, 0.10321067477923007, 0.0406405906513817, 0.11350981295138385, 0.08419619052351335, 0.06025309326929129, 0.08513391855533259, 0.5235158984284395, 0.40698376270318626, 0.39799327271659757, 0.3978283674382004, 0.40071422911533217, 0.4178899307355025, 0.418019461166675, 0.4227056578279468, 0.49315017973276254, 0.05993983635731892, 0.05697054185037176, 0.04645273935173411, 0.11293290402721301, 0.02753133036650257, 0.09378372372360866, 0.08921275117854444, 0.16523755614358782, 0.07970402516606623, 0.2765582965341422, 0.15597583497124756, 0.1715611409075093, 0.27986122713301087, 0.2990645170477867, 0.16243392372403054, 0.11924514875587267, 0.15978009573368201, 0.21038966971131323, 0.23889120033273736, 0.2906042759659969, 0.19724883895227108, 0.31710867696587997, 0.25074787241864316, 0.27240079747900636, 0.295055512003086, 0.15979728049730912, 0.16413141238310125, 0.09822560307116468, 0.21138380029690584, 0.1234223957481918, 0.12161321721249829, 0.11217884301543113, 0.26766004818780587, 0.2361377935544784, 0.12269893855380853, 0.18572695670624184, 0.21482697872137269, 0.24157994135498362, 0.16219429047011513, 0.2158184919535171, 0.1558630373633485, 0.19809704663087968, 0.19387645641182516, 0.17944598011871926, 0.14495756805416493, 0.20568701120259092, 0.20756359422214932, 0.1886369084529631, 0.17454832257760622, 0.17552091859874885, 0.18931596822554853, 0.17971532879749552, 0.1853841079532098, 0.18095033460861143, 0.1876162692475175, 0.11270341312679943, 0.16846544792675755, 0.17364184467664057, 0.2012144787572301, 0.16993230149327532, 0.1664924842373754, 0.16653584981173664, 0.1677848282615294, 0.5495726223316497, 0.11233446757830334, 0.21240376103074277, 0.08243776591051444, 0.15171690017549244, 0.20757787494423852, 0.4439198692625279, 0.552610359576877, 0.3315069434885458, 0.18925412757593407, 0.18965833778604657, 0.18589501368208672, 0.2514973431906786, 0.21546368807953276, 0.1803235946005367, 0.1928954457583999, 0.18407544418716548, 0.21330064648470914, 0.08224896098536083, 0.05823792590573029, 0.07881479646815748, 0.11181479527500704, 0.08702618138591622, 0.07433025139191318, 0.10841493102905952, 0.06421725887328467, 0.05706472710267041]}, "mutation_prompt": null}
{"id": "04107ca8-2f17-4d75-8931-8d9d93a31896", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            for iteration_pso in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] += alpha * (cognitive_component + social_component)  # Optimized velocity update\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (iteration_pso / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Improved_PSO_SA_Optimizer", "description": "Improved_PSO_SA_Optimizer with optimized loop iterations and efficient velocity update.", "configspace": "", "generation": 21, "fitness": 0.18876617170066828, "feedback": "The algorithm Improved_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "a8c1931d-9e7a-4b0b-a144-00977f1eb55b", "metadata": {"aucs": [0.42529618737617836, 0.4041226964439756, 0.42732085867367986, 0.4338386574464037, 0.42234266923564323, 0.4123537885839158, 0.4160164228827006, 0.43819384134666073, 0.4032502093623791, 0.04476635628803449, 0.0, 0.0, 0.008053565868382573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12661370716034404, 0.06238112985598987, 0.10734853967815072, 0.08597340549514843, 0.08906030322888858, 0.06655578279803942, 0.03327557159109196, 0.061323268187118085, 0.07558082943368027, 0.06862456988339705, 0.014445933544372402, 0.043424845971217985, 0.044794808450434376, 0.07739423100026799, 0.023105992679639753, 0.0958952663366266, 0.05720217196904376, 0.0503448970975382, 0.9954091234608503, 0.3276374107594564, 0.9958182242474337, 0.9913812109754787, 0.9878617717354522, 0.8173928437371355, 0.779056394019281, 0.9951543966635619, 0.8206784342438292, 0.3391922258081457, 0.2989236050088573, 0.29864224254385185, 0.3376676630843968, 0.3026224432676953, 0.30660515655696086, 0.3030159438004577, 0.305497368082572, 0.29160192811321406, 0.3650988150012181, 0.14970746672887325, 0.222305609566272, 0.14656674168326522, 0.023376301396941912, 0.18749636652916757, 0.12523373242613467, 0.21837255703771752, 0.3564385679171326, 0.1262763638858858, 0.18877243367791552, 0.17541829011351961, 0.12825449849489, 0.12115370589753616, 0.10959208126916165, 0.21193570609764012, 0.1611298014457221, 0.1886773337792529, 0.1774736681374225, 0.11527603338786518, 0.18977215979127904, 0.1829123617718137, 0.12221861638281317, 0.1754740259720311, 0.125018309881487, 0.16853483440514572, 0.13141915937250837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03312928091172873, 0.0, 0.0, 0.0, 0.01800217702860174, 0.021627352215680684, 0.07096664543730768, 0.08947911681076803, 0.0, 0.03389245804154484, 0.0709616910464902, 0.0010759901876427058, 0.07979134263261023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10025991263144696, 0.08349486022426644, 0.06813131361151514, 0.05787515528782117, 0.06221253562875717, 0.05172496748788069, 0.10537668477622375, 0.05910566742305823, 0.08549727814644359, 0.42002079664794256, 0.4217393305115327, 0.4030602495121366, 0.41404063515161194, 0.40341379461530047, 0.42982424618428505, 0.38021836482914073, 0.3983819295493908, 0.3973241287893732, 0.022101297356538097, 0.07916800281910652, 0.08967063917775508, 0.08510599270535546, 0.04429897916680314, 0.06120088659270495, 0.06461028086282916, 0.10202002091793105, 0.05873586733950997, 0.2187647110293176, 0.12220967326941723, 0.3385051697570314, 0.23477454951004417, 0.15008735269428997, 0.1387328055187652, 0.21035362827286985, 0.2837874690112313, 0.21743104302349459, 0.2852323886739041, 0.16990388766539, 0.13512682173037704, 0.26052281967991486, 0.1721391022131855, 0.22049593360998276, 0.20394293090447935, 0.18167308998807652, 0.10966840316344861, 0.13662111937571264, 0.16969895247765232, 0.2160816232601237, 0.14401653144878457, 0.1773803196443796, 0.25097768221594396, 0.18980487526390266, 0.16612568886268686, 0.11125841893524302, 0.19577944766844269, 0.20620747541988838, 0.16472272764262763, 0.16925844767862386, 0.15508080367452381, 0.17172579536146737, 0.20585033293651467, 0.22437978501456202, 0.22220691307966745, 0.22249504399529452, 0.1743909669026712, 0.16982573115083321, 0.187165312322628, 0.16973593412085497, 0.21977854749340864, 0.2163427093985062, 0.1928977287790543, 0.2016826357902597, 0.1302288754382651, 0.16261837395573353, 0.16854729328550622, 0.17309576593638687, 0.19861950773772152, 0.16566517701306516, 0.1621898865081215, 0.16496229678076524, 0.16357352445480033, 0.49482624665759944, 0.11180261954813464, 0.12619164879924205, 0.44645893419085503, 0.14741270642529203, 0.204039706125815, 0.47182994095627717, 0.5717854599493764, 0.34265582347353996, 0.18158552110233506, 0.18289302354128445, 0.16758609339817, 0.19279646173474485, 0.17313925820540577, 0.16713901774461615, 0.17139330220319682, 0.16907656064776455, 0.16581574117960007, 0.09030494519820986, 0.06618334301809414, 0.05675335280812943, 0.05828018015655145, 0.08596917598622855, 0.06886728665255648, 0.06638764687830534, 0.06594757564037246, 0.07752317609558323]}, "mutation_prompt": null}
{"id": "500e37ee-cbb0-455b-a055-ede2f47d297a", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9  # New parameter for dynamic inertia weight\n            inertia_min = 0.4  # New parameter for dynamic inertia weight\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = inertia_weight * (velocities[i] + alpha * cognitive_component + alpha * social_component)  # Updated velocity update\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)  # Dynamic inertia weight update\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_PSO_SA_Optimizer", "description": "Improved_PSO_SA_Optimizer with enhanced particle update mechanism using dynamic inertia weight for better convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8c1931d-9e7a-4b0b-a144-00977f1eb55b", "metadata": {"aucs": [0.5208359497291213, 0.4439717439605322, 0.4721165775122321, 0.6318405872788322, 0.4348681464611329, 0.419535985462579, 0.44016966746005215, 0.41956126103645996, 0.42345837830894184, 0.08235021231284878, 0.027553133484711334, 0.0, 0.0, 0.0, 0.07149805886535143, 0.045235438991384935, 0.06530195691151697, 0.0, 0.0829147997734081, 0.0902385091461465, 0.08568077008585184, 0.028650927505296186, 0.03591399688929431, 0.10928027466006607, 0.0547935703171919, 0.10176480173174973, 0.055550370473027355, 0.05447762371696985, 0.05231805964078906, 0.08496880420133912, 0.06984526728690399, 0.04577416242411714, 0.04356158778557695, 0.07077641643662735, 0.05626252254644171, 0.04988931524411533, 0.9945935098758786, 0.9832201945538783, 0.9943236319413827, 0.9908878059759397, 0.9892489458958826, 0.8173732861119248, 0.7789383709110539, 0.9942580396677411, 0.8205773334786686, 0.3185350074443295, 0.3022631978019661, 0.3281718138390357, 0.32320282342185913, 0.33519400924528964, 0.30809220631694456, 0.3253095636505592, 0.3353732535446712, 0.2932495217272454, 0.372169722097914, 0.12430021145801384, 0.22415412024326542, 0.32017832783456346, 0.25629035906953856, 0.3939150057628993, 0.10786090932516379, 0.23544417543895102, 0.3628921195637579, 0.09405747241506557, 0.16042062047896366, 0.12422370650717307, 0.15168506233667445, 0.21387078884823674, 0.12540479284889738, 0.3255916583004934, 0.16509895752447468, 0.1848576251780485, 0.22329987615442703, 0.11115986872169326, 0.12672614999502552, 0.19443605601381309, 0.19271372096996597, 0.13564101434424725, 0.18950437677861187, 0.2077621173564701, 0.178354668807163, 0.0, 0.0, 0.0, 0.011316990623686296, 0.0, 0.0016725097153336144, 0.0, 0.0, 0.0008471687523380345, 0.014622628693076178, 0.015500097607953234, 0.06232181214573518, 0.061428727581001485, 0.0, 0.0020982364500309325, 0.09171162037140768, 0.037813821494461775, 0.016525143985298363, 0.0, 0.053657973539047665, 0.0, 0.0, 0.04122480568017928, 0.06560705770828712, 0.0, 0.16756805969132837, 0.07951679653963295, 0.05109019880144483, 0.059399256959036806, 0.0134594490153358, 0.10321067477923007, 0.0406405906513817, 0.11350981295138385, 0.08419619052351335, 0.06025309326929129, 0.08513391855533259, 0.5235158984284395, 0.40698376270318626, 0.39799327271659757, 0.3978283674382004, 0.40071422911533217, 0.4178899307355025, 0.418019461166675, 0.4227056578279468, 0.49315017973276254, 0.05993983635731892, 0.05697054185037176, 0.04645273935173411, 0.11293290402721301, 0.02753133036650257, 0.09378372372360866, 0.08921275117854444, 0.16523755614358782, 0.07970402516606623, 0.2765582965341422, 0.15597583497124756, 0.1715611409075093, 0.27986122713301087, 0.2990645170477867, 0.16243392372403054, 0.11924514875587267, 0.15978009573368201, 0.21038966971131323, 0.23889120033273736, 0.2906042759659969, 0.19724883895227108, 0.31710867696587997, 0.25074787241864316, 0.27240079747900636, 0.295055512003086, 0.15979728049730912, 0.16413141238310125, 0.09822560307116468, 0.21138380029690584, 0.1234223957481918, 0.12161321721249829, 0.11217884301543113, 0.26766004818780587, 0.2361377935544784, 0.12269893855380853, 0.18572695670624184, 0.21482697872137269, 0.24157994135498362, 0.16219429047011513, 0.2158184919535171, 0.1558630373633485, 0.19809704663087968, 0.19387645641182516, 0.17944598011871926, 0.14495756805416493, 0.20568701120259092, 0.20756359422214932, 0.1886369084529631, 0.17454832257760622, 0.17552091859874885, 0.18931596822554853, 0.17971532879749552, 0.1853841079532098, 0.18095033460861143, 0.1876162692475175, 0.11270341312679943, 0.16846544792675755, 0.17364184467664057, 0.2012144787572301, 0.16993230149327532, 0.1664924842373754, 0.16653584981173664, 0.1677848282615294, 0.5495726223316497, 0.11233446757830334, 0.21240376103074277, 0.08243776591051444, 0.15171690017549244, 0.20757787494423852, 0.4439198692625279, 0.552610359576877, 0.3315069434885458, 0.18925412757593407, 0.18965833778604657, 0.18589501368208672, 0.2514973431906786, 0.21546368807953276, 0.1803235946005367, 0.1928954457583999, 0.18407544418716548, 0.21330064648470914, 0.08224896098536083, 0.05823792590573029, 0.07881479646815748, 0.11181479527500704, 0.08702618138591622, 0.07433025139191318, 0.10841493102905952, 0.06421725887328467, 0.05706472710267041]}, "mutation_prompt": null}
{"id": "61bcf8ca-40c9-429c-a8c1-d7e08dc96c7c", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9  # New parameter for dynamic inertia weight\n            inertia_min = 0.4  # New parameter for dynamic inertia weight\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random() * (particles[i] - particles[i])\n                    social_component = np.random.random() * (best_solution - particles[i])\n                    velocities[i] = inertia_weight * (velocities[i] + alpha * cognitive_component + alpha * social_component)  # Updated velocity update\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)  # Dynamic inertia weight update\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_PSO_SA_Optimizer", "description": "Improved_PSO_SA_Optimizer with enhanced particle update mechanism using dynamic inertia weight for better convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8c1931d-9e7a-4b0b-a144-00977f1eb55b", "metadata": {"aucs": [0.5208359497291213, 0.4439717439605322, 0.4721165775122321, 0.6318405872788322, 0.4348681464611329, 0.419535985462579, 0.44016966746005215, 0.41956126103645996, 0.42345837830894184, 0.08235021231284878, 0.027553133484711334, 0.0, 0.0, 0.0, 0.07149805886535143, 0.045235438991384935, 0.06530195691151697, 0.0, 0.0829147997734081, 0.0902385091461465, 0.08568077008585184, 0.028650927505296186, 0.03591399688929431, 0.10928027466006607, 0.0547935703171919, 0.10176480173174973, 0.055550370473027355, 0.05447762371696985, 0.05231805964078906, 0.08496880420133912, 0.06984526728690399, 0.04577416242411714, 0.04356158778557695, 0.07077641643662735, 0.05626252254644171, 0.04988931524411533, 0.9945935098758786, 0.9832201945538783, 0.9943236319413827, 0.9908878059759397, 0.9892489458958826, 0.8173732861119248, 0.7789383709110539, 0.9942580396677411, 0.8205773334786686, 0.3185350074443295, 0.3022631978019661, 0.3281718138390357, 0.32320282342185913, 0.33519400924528964, 0.30809220631694456, 0.3253095636505592, 0.3353732535446712, 0.2932495217272454, 0.372169722097914, 0.12430021145801384, 0.22415412024326542, 0.32017832783456346, 0.25629035906953856, 0.3939150057628993, 0.10786090932516379, 0.23544417543895102, 0.3628921195637579, 0.09405747241506557, 0.16042062047896366, 0.12422370650717307, 0.15168506233667445, 0.21387078884823674, 0.12540479284889738, 0.3255916583004934, 0.16509895752447468, 0.1848576251780485, 0.22329987615442703, 0.11115986872169326, 0.12672614999502552, 0.19443605601381309, 0.19271372096996597, 0.13564101434424725, 0.18950437677861187, 0.2077621173564701, 0.178354668807163, 0.0, 0.0, 0.0, 0.011316990623686296, 0.0, 0.0016725097153336144, 0.0, 0.0, 0.0008471687523380345, 0.014622628693076178, 0.015500097607953234, 0.06232181214573518, 0.061428727581001485, 0.0, 0.0020982364500309325, 0.09171162037140768, 0.037813821494461775, 0.016525143985298363, 0.0, 0.053657973539047665, 0.0, 0.0, 0.04122480568017928, 0.06560705770828712, 0.0, 0.16756805969132837, 0.07951679653963295, 0.05109019880144483, 0.059399256959036806, 0.0134594490153358, 0.10321067477923007, 0.0406405906513817, 0.11350981295138385, 0.08419619052351335, 0.06025309326929129, 0.08513391855533259, 0.5235158984284395, 0.40698376270318626, 0.39799327271659757, 0.3978283674382004, 0.40071422911533217, 0.4178899307355025, 0.418019461166675, 0.4227056578279468, 0.49315017973276254, 0.05993983635731892, 0.05697054185037176, 0.04645273935173411, 0.11293290402721301, 0.02753133036650257, 0.09378372372360866, 0.08921275117854444, 0.16523755614358782, 0.07970402516606623, 0.2765582965341422, 0.15597583497124756, 0.1715611409075093, 0.27986122713301087, 0.2990645170477867, 0.16243392372403054, 0.11924514875587267, 0.15978009573368201, 0.21038966971131323, 0.23889120033273736, 0.2906042759659969, 0.19724883895227108, 0.31710867696587997, 0.25074787241864316, 0.27240079747900636, 0.295055512003086, 0.15979728049730912, 0.16413141238310125, 0.09822560307116468, 0.21138380029690584, 0.1234223957481918, 0.12161321721249829, 0.11217884301543113, 0.26766004818780587, 0.2361377935544784, 0.12269893855380853, 0.18572695670624184, 0.21482697872137269, 0.24157994135498362, 0.16219429047011513, 0.2158184919535171, 0.1558630373633485, 0.19809704663087968, 0.19387645641182516, 0.17944598011871926, 0.14495756805416493, 0.20568701120259092, 0.20756359422214932, 0.1886369084529631, 0.17454832257760622, 0.17552091859874885, 0.18931596822554853, 0.17971532879749552, 0.1853841079532098, 0.18095033460861143, 0.1876162692475175, 0.11270341312679943, 0.16846544792675755, 0.17364184467664057, 0.2012144787572301, 0.16993230149327532, 0.1664924842373754, 0.16653584981173664, 0.1677848282615294, 0.5495726223316497, 0.11233446757830334, 0.21240376103074277, 0.08243776591051444, 0.15171690017549244, 0.20757787494423852, 0.4439198692625279, 0.552610359576877, 0.3315069434885458, 0.18925412757593407, 0.18965833778604657, 0.18589501368208672, 0.2514973431906786, 0.21546368807953276, 0.1803235946005367, 0.1928954457583999, 0.18407544418716548, 0.21330064648470914, 0.08224896098536083, 0.05823792590573029, 0.07881479646815748, 0.11181479527500704, 0.08702618138591622, 0.07433025139191318, 0.10841493102905952, 0.06421725887328467, 0.05706472710267041]}, "mutation_prompt": null}
{"id": "497a7279-089d-4a06-b030-b895370d2d28", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    velocities[i] = inertia_weight * (velocities[i] + alpha * cognitive_component + alpha * social_component)\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer", "description": "Improved version of Enhanced_PSO_SA_Optimizer with optimized computation by precalculating random numbers outside the inner loop, reducing redundant calculations, and streamlining the dynamic inertia weight update.", "configspace": "", "generation": 24, "fitness": 0.21389753556192279, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.22.", "error": "", "parent_id": "a8c1931d-9e7a-4b0b-a144-00977f1eb55b", "metadata": {"aucs": [0.7622434526030417, 0.5961539915598164, 0.6102831547224127, 0.42514114059489505, 0.4548913796156723, 0.7646176327613874, 0.4312763876446538, 0.49659181193003665, 0.527170729702769, 0.12060543548775804, 0.0, 0.12734043837824505, 0.0, 0.0, 0.09039456877252683, 0.0, 0.07502356658915454, 0.0, 0.08107773079744673, 0.09145072845605795, 0.06092374303171566, 0.06696698532598333, 0.060731169944459595, 0.11933158912326203, 0.08114428844621724, 0.05796488911915554, 0.06409777286686036, 0.08424412114297797, 0.07515605597271713, 0.04870947125634373, 0.062367818165128486, 0.11842408848969277, 0.06110070976661208, 0.09243580959409159, 0.05667967381456329, 0.055765686003225845, 0.9905786079434415, 0.9839955843996447, 0.9936070352133614, 0.9923368343207499, 0.9943210018124865, 0.9900999247906215, 0.9804094976486173, 0.9861167175587996, 0.974468718600736, 0.31349704962937963, 0.3306016905568462, 0.3046060282765709, 0.3085482623897451, 0.3211134969169934, 0.3076515733654267, 0.30775103911151724, 0.2942240964998193, 0.2908617351595386, 0.23838771417265603, 0.1345620137820368, 0.37180552483084717, 0.2095354215843207, 0.3446729043772877, 0.2718614587258257, 0.12634891146405358, 0.17883899101511525, 0.14924254679362092, 0.15166770035977806, 0.18386188031533224, 0.18312021816015933, 0.23760240664906762, 0.1705230406596978, 0.12712695333123614, 0.11787320261263134, 0.18234421418360547, 0.1765781298368886, 0.2310722072610596, 0.11085471866035079, 0.12132767695684943, 0.18506112673471709, 0.34467530522668843, 0.18195727499394665, 0.19046855336404267, 0.0, 0.17388977427932661, 0.02614270844722777, 0.0, 0.0, 0.042347659329690424, 0.0, 0.0, 0.0, 0.0, 0.0, 0.059406828657037836, 0.018921850621833824, 0.049555405934232466, 0.06216556679433982, 0.0, 0.026131205287976855, 0.22178474740434462, 0.018881005244100413, 0.06126923737053491, 0.03411397929390236, 0.03678634044018092, 0.0, 0.08412636559863462, 0.0, 0.08300267893666025, 0.0954946434444337, 0.0, 0.0, 0.052673545822267576, 0.10643781832330801, 0.04993614389251433, 0.07030873422462358, 0.08637632643305715, 0.13196040185388325, 0.052378587417376554, 0.05358953607546102, 0.08564584640590478, 0.484274430615225, 0.41566894415934763, 0.4769053135303135, 0.3907733938957233, 0.4273358466319147, 0.3992604440732924, 0.4265739977664158, 0.4397083793878386, 0.4105291094040242, 0.028819588308835464, 0.08556521630058211, 0.08698479388979596, 0.08665928065993356, 0.09125609870355678, 0.16562028317916122, 0.07314740764984584, 0.1263034999085354, 0.08399104306807714, 0.12939973796352444, 0.12488314279150292, 0.10597682852587931, 0.13358187967475132, 0.19665092787727478, 0.2648441197981728, 0.11952245200893341, 0.14964467567377981, 0.20436700939578145, 0.22748112973613366, 0.20463484845155688, 0.17745845900391066, 0.23141786226885797, 0.2166285450012465, 0.2940072213075767, 0.23168493913984223, 0.21627270904584517, 0.17040529979972763, 0.21767147026475975, 0.20204779880345936, 0.07464717587077963, 0.2433263446060533, 0.1123603181481394, 0.1233225213487189, 0.16006967306087494, 0.17858717696874515, 0.23479068759755006, 0.18928631191527467, 0.15796271221575187, 0.17033508823060073, 0.16083753305054072, 0.16539707152294691, 0.2541850298581406, 0.2316651232577076, 0.20908655376825447, 0.2165638190638074, 0.2070627894896243, 0.17391938609627722, 0.18852313956736944, 0.1857078510107567, 0.16920074256343287, 0.18248369633679906, 0.177027433546175, 0.16979643407331602, 0.1644887651965542, 0.15658443744462713, 0.6769872460157049, 0.1347569210309193, 0.6478940112399396, 0.20115790821960766, 0.14849061103952899, 0.15375285868427868, 0.16600397959037183, 0.16872365865586558, 0.5061749544965054, 0.11252922200048765, 0.511120213954995, 0.6288436268412263, 0.10514700988361514, 0.21076001049721393, 0.16553470523679992, 0.09485943984562983, 0.6189684032278875, 0.20765820406946844, 0.22003539239289738, 0.19067646255503723, 0.2595607041608886, 0.18157638704538293, 0.1983374967299224, 0.21065283332719886, 0.17807553905442797, 0.20363555575934755, 0.08564335867936401, 0.08968247146201824, 0.06213214059925942, 0.17102014867759296, 0.05083091437541698, 0.062321178516446474, 0.054266408749829353, 0.08253524851140537, 0.07655456331723431]}, "mutation_prompt": null}
{"id": "b4e8c209-bb36-44d0-8478-77266fecb5ed", "solution": "import numpy as np\n\nclass Enhanced_Optimized_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            random_normal = np.random.normal(0, sigma, (max_iterations_sa, n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    velocities[i] = inertia_weight * (velocities[i] + alpha * cognitive_component + alpha * social_component)\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + random_normal[_], bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_Optimized_PSO_SA_Optimizer", "description": "Optimization by precomputing random numbers and removing redundant calculations.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'<' not supported between instances of 'list' and 'float'\").", "error": "TypeError(\"'<' not supported between instances of 'list' and 'float'\")", "parent_id": "497a7279-089d-4a06-b030-b895370d2d28", "metadata": {}, "mutation_prompt": null}
{"id": "354170e6-117e-41e5-a3e8-6a3dc26b60b8", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    velocities[i] = inertia_weight * (velocities[i] + alpha * cognitive_component + alpha * social_component)\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer", "description": "Improved version of Enhanced_PSO_SA_Optimizer with optimized computation by precalculating random numbers outside the inner loop, reducing redundant calculations, and streamlining the dynamic inertia weight update.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "497a7279-089d-4a06-b030-b895370d2d28", "metadata": {"aucs": [0.7622434526030417, 0.5961539915598164, 0.6102831547224127, 0.42514114059489505, 0.4548913796156723, 0.7646176327613874, 0.4312763876446538, 0.49659181193003665, 0.527170729702769, 0.12060543548775804, 0.0, 0.12734043837824505, 0.0, 0.0, 0.09039456877252683, 0.0, 0.07502356658915454, 0.0, 0.08107773079744673, 0.09145072845605795, 0.06092374303171566, 0.06696698532598333, 0.060731169944459595, 0.11933158912326203, 0.08114428844621724, 0.05796488911915554, 0.06409777286686036, 0.08424412114297797, 0.07515605597271713, 0.04870947125634373, 0.062367818165128486, 0.11842408848969277, 0.06110070976661208, 0.09243580959409159, 0.05667967381456329, 0.055765686003225845, 0.9905786079434415, 0.9839955843996447, 0.9936070352133614, 0.9923368343207499, 0.9943210018124865, 0.9900999247906215, 0.9804094976486173, 0.9861167175587996, 0.974468718600736, 0.31349704962937963, 0.3306016905568462, 0.3046060282765709, 0.3085482623897451, 0.3211134969169934, 0.3076515733654267, 0.30775103911151724, 0.2942240964998193, 0.2908617351595386, 0.23838771417265603, 0.1345620137820368, 0.37180552483084717, 0.2095354215843207, 0.3446729043772877, 0.2718614587258257, 0.12634891146405358, 0.17883899101511525, 0.14924254679362092, 0.15166770035977806, 0.18386188031533224, 0.18312021816015933, 0.23760240664906762, 0.1705230406596978, 0.12712695333123614, 0.11787320261263134, 0.18234421418360547, 0.1765781298368886, 0.2310722072610596, 0.11085471866035079, 0.12132767695684943, 0.18506112673471709, 0.34467530522668843, 0.18195727499394665, 0.19046855336404267, 0.0, 0.17388977427932661, 0.02614270844722777, 0.0, 0.0, 0.042347659329690424, 0.0, 0.0, 0.0, 0.0, 0.0, 0.059406828657037836, 0.018921850621833824, 0.049555405934232466, 0.06216556679433982, 0.0, 0.026131205287976855, 0.22178474740434462, 0.018881005244100413, 0.06126923737053491, 0.03411397929390236, 0.03678634044018092, 0.0, 0.08412636559863462, 0.0, 0.08300267893666025, 0.0954946434444337, 0.0, 0.0, 0.052673545822267576, 0.10643781832330801, 0.04993614389251433, 0.07030873422462358, 0.08637632643305715, 0.13196040185388325, 0.052378587417376554, 0.05358953607546102, 0.08564584640590478, 0.484274430615225, 0.41566894415934763, 0.4769053135303135, 0.3907733938957233, 0.4273358466319147, 0.3992604440732924, 0.4265739977664158, 0.4397083793878386, 0.4105291094040242, 0.028819588308835464, 0.08556521630058211, 0.08698479388979596, 0.08665928065993356, 0.09125609870355678, 0.16562028317916122, 0.07314740764984584, 0.1263034999085354, 0.08399104306807714, 0.12939973796352444, 0.12488314279150292, 0.10597682852587931, 0.13358187967475132, 0.19665092787727478, 0.2648441197981728, 0.11952245200893341, 0.14964467567377981, 0.20436700939578145, 0.22748112973613366, 0.20463484845155688, 0.17745845900391066, 0.23141786226885797, 0.2166285450012465, 0.2940072213075767, 0.23168493913984223, 0.21627270904584517, 0.17040529979972763, 0.21767147026475975, 0.20204779880345936, 0.07464717587077963, 0.2433263446060533, 0.1123603181481394, 0.1233225213487189, 0.16006967306087494, 0.17858717696874515, 0.23479068759755006, 0.18928631191527467, 0.15796271221575187, 0.17033508823060073, 0.16083753305054072, 0.16539707152294691, 0.2541850298581406, 0.2316651232577076, 0.20908655376825447, 0.2165638190638074, 0.2070627894896243, 0.17391938609627722, 0.18852313956736944, 0.1857078510107567, 0.16920074256343287, 0.18248369633679906, 0.177027433546175, 0.16979643407331602, 0.1644887651965542, 0.15658443744462713, 0.6769872460157049, 0.1347569210309193, 0.6478940112399396, 0.20115790821960766, 0.14849061103952899, 0.15375285868427868, 0.16600397959037183, 0.16872365865586558, 0.5061749544965054, 0.11252922200048765, 0.511120213954995, 0.6288436268412263, 0.10514700988361514, 0.21076001049721393, 0.16553470523679992, 0.09485943984562983, 0.6189684032278875, 0.20765820406946844, 0.22003539239289738, 0.19067646255503723, 0.2595607041608886, 0.18157638704538293, 0.1983374967299224, 0.21065283332719886, 0.17807553905442797, 0.20363555575934755, 0.08564335867936401, 0.08968247146201824, 0.06213214059925942, 0.17102014867759296, 0.05083091437541698, 0.062321178516446474, 0.054266408749829353, 0.08253524851140537, 0.07655456331723431]}, "mutation_prompt": null}
{"id": "94ab6a67-327d-41dc-8117-56b36ee3d1e4", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n\n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            cognitive_component = random_cognitive * (particles - particles[:, np.newaxis])\n            social_component = random_social * (best_solution - particles)\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    velocities[i] = inertia_weight * (velocities[i] + alpha * cognitive_component[i] + alpha * social_component[i])\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_PSO_SA_Optimizer", "description": "Improved the update rule for velocities in PSO by combining cognitive and social components outside the inner loop for efficiency.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\").", "error": "TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\")", "parent_id": "497a7279-089d-4a06-b030-b895370d2d28", "metadata": {}, "mutation_prompt": null}
{"id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 28, "fitness": 0.21963802834318738, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "497a7279-089d-4a06-b030-b895370d2d28", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "feb76fd4-46bb-4421-b75d-dc00357ece3c", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "cfa082df-a295-41d3-80a0-8c64ccacc0eb", "solution": "import numpy as np\n\nclass Enhanced_Optimized_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random(self.dim) * (particles[i] - particles[i])\n                    social_component = np.random.random(self.dim) * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_Optimized_PSO_SA_Optimizer_V3", "description": "Removed redundant random calls for cognitive and social components to improve efficiency.", "configspace": "", "generation": 30, "fitness": 0.21507312796868885, "feedback": "The algorithm Enhanced_Optimized_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.78563220768702, 0.935833600440563, 0.7998035615255836, 0.7905764159110242, 0.4269570280377073, 0.4339948990785162, 0.43465321599318185, 0.7479606045063919, 0.4460606859081314, 0.0, 0.060846373126668185, 0.03549939398050306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10708887168602976, 0.036944173842593186, 0.11492721856331123, 0.1356956440110083, 0.03936598543489489, 0.06300821962687042, 0.05129250441326716, 0.0568295958759516, 0.0661744059819761, 0.0643761415095574, 0.09312552525849627, 0.05872552134105191, 0.1270398349713412, 0.06948776404580459, 0.06256006676041348, 0.07258738543633902, 0.16478176743347261, 0.008848118094458401, 0.9929473757042914, 0.9930359929056546, 0.9959677796045792, 0.9912854230235244, 0.9913542727428077, 0.9841456109588841, 0.9901064774446483, 0.9946077657833313, 0.9881570155982725, 0.31299264505940627, 0.29058353911938894, 0.2753196773657477, 0.2928774977340838, 0.31918006413392064, 0.3825257659074758, 0.3165484090375026, 0.3098384106456209, 0.28750623148916, 0.22596561033472107, 0.13000864281614755, 0.22908866227570768, 0.35170025604896504, 0.25573928515750766, 0.14288278091971351, 0.14806345427374912, 0.1511625158426212, 0.36572369901224056, 0.13491325774869345, 0.14350338487429293, 0.18858921452110855, 0.1643558220735034, 0.15222293673756482, 0.11750424636280188, 0.15972732008072488, 0.11937705336021176, 0.20404720668776566, 0.21041505955205797, 0.11193196290574614, 0.16569935508614853, 0.29547023114568316, 0.1764279220906836, 0.18393412575796142, 0.18632013009126935, 0.10543943196077776, 0.20912667229923698, 0.0, 0.0, 0.0, 0.0, 0.019172782261010823, 0.0, 0.013481642699726959, 0.010675737993665058, 0.004192163889023659, 0.024776248192106665, 0.0037232732877903185, 0.11726156427415935, 0.09780978929764328, 0.04709774099310449, 0.0, 0.04829619452199474, 0.0067127418957461105, 0.07973388771757617, 0.0, 0.0, 0.0, 0.08510736480289505, 0.08470859129281894, 0.1280824471870492, 0.0, 0.07973878717975036, 0.0, 0.04738212380558382, 0.08795451490777617, 0.04465348694238602, 0.06254461557421132, 0.007183778572395161, 0.03936752936012422, 0.05187857945570229, 0.05599089857300765, 0.08479340466175922, 0.47877347412194593, 0.3624029524976786, 0.5022137642657909, 0.3957391096209769, 0.45711439313433355, 0.4272827234303309, 0.46524397205688095, 0.383708950154219, 0.43960388154919816, 0.05971846129662206, 0.04458764799891801, 0.10739402534992515, 0.11245480689563103, 0.1188643975464373, 0.09498221721785993, 0.061818729561739394, 0.15548512675675552, 0.06580313923663017, 0.27539627221416574, 0.2912494465042681, 0.14972827350074136, 0.29587031790748086, 0.1979121858402093, 0.2590862459486867, 0.18748898992645124, 0.13387593436272238, 0.17551658371164192, 0.17025054768915726, 0.2709246495705566, 0.1448082941379646, 0.29899371754812243, 0.24038956659880628, 0.24515070824153995, 0.2341713754493323, 0.273448846187613, 0.3143452876332532, 0.24416127581737035, 0.20754946467248825, 0.23598842627752503, 0.21418352767488835, 0.22426140139282724, 0.10628268621217396, 0.25448031336476484, 0.22275385937227843, 0.093114665402796, 0.19974912442451442, 0.1958197048684387, 0.19003363385564553, 0.17683115169790575, 0.1541137490448813, 0.17245695583923804, 0.21726150918976728, 0.18416936746115609, 0.2542657659806078, 0.19058027711486392, 0.18052795629357354, 0.18412177809419716, 0.18300777284006597, 0.18643997919347943, 0.17566915722950505, 0.19361872639704036, 0.2346341858967691, 0.21129948144839905, 0.15654159764108666, 0.5953096711285285, 0.16786428320654012, 0.1730661581670836, 0.20096017233223318, 0.1997980744679697, 0.14666120724135434, 0.11519922818667905, 0.15419973834188527, 0.15629489316855705, 0.11264498240566989, 0.5765047001030676, 0.5142410184393054, 0.15489664005670178, 0.21255347035968897, 0.1123735029836731, 0.1480327738995686, 0.4249347691683567, 0.19408506358602684, 0.18691222430147358, 0.19951534669018212, 0.22684571189758185, 0.21023709681515979, 0.23320742274430106, 0.21816998165086554, 0.21482536180318967, 0.20076958833150804, 0.07007248955020517, 0.05182489159021986, 0.0926932374081405, 0.12982229562710546, 0.0941234426496943, 0.06263013115602556, 0.05689155940079804, 0.1085893082207513, 0.04201187969682285]}, "mutation_prompt": null}
{"id": "1a8e8655-66e1-4a6a-ad07-8168f2f0e59b", "solution": "import numpy as np\n\nclass Optimized_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                fitness = np.array([objective_function(p) for p in particles])\n                best_idx = np.argmin(fitness)\n                if fitness[best_idx] < best_fitness:\n                    best_solution = particles[best_idx].copy()\n                    best_fitness = fitness[best_idx]\n\n                cognitive_component = random_cognitive * (particles - particles[:, np.newaxis])\n                social_component = random_social * (best_solution - particles)\n                cognitive_social = alpha * (cognitive_component + social_component)\n                velocities = inertia_weight * velocities + cognitive_social\n                particles = np.clip(particles + velocities, bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_PSO_SA_Optimizer_V3", "description": "Optimized_PSO_SA_Optimizer_V3: Improved performance by vectorizing the particle updates and simplifying the temperature update process.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 99 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 99 is out of bounds for axis 0 with size 10')", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {}, "mutation_prompt": null}
{"id": "0790de01-160a-4422-94d8-3db3c8aa9a72", "solution": "import numpy as np\n\nclass Improved_Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Improved_Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Improved algorithm with optimized loop iteration and streamlined particle update process.", "configspace": "", "generation": 32, "fitness": 0.21963802834318738, "feedback": "The algorithm Improved_Optimized_Enhanced_PSO_SA_Optimizer_V2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "d0f69d6b-0a5c-4f2e-8632-f10d3f79c005", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random(self.dim) * (particles[i] - particles[i])\n                    social_component = np.random.random(self.dim) * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_PSO_SA_Optimizer_V3", "description": "Improved the velocity update calculation by directly updating the particles and velocities simultaneously without additional temporary arrays.", "configspace": "", "generation": 33, "fitness": 0.21507312796868885, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.78563220768702, 0.935833600440563, 0.7998035615255836, 0.7905764159110242, 0.4269570280377073, 0.4339948990785162, 0.43465321599318185, 0.7479606045063919, 0.4460606859081314, 0.0, 0.060846373126668185, 0.03549939398050306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10708887168602976, 0.036944173842593186, 0.11492721856331123, 0.1356956440110083, 0.03936598543489489, 0.06300821962687042, 0.05129250441326716, 0.0568295958759516, 0.0661744059819761, 0.0643761415095574, 0.09312552525849627, 0.05872552134105191, 0.1270398349713412, 0.06948776404580459, 0.06256006676041348, 0.07258738543633902, 0.16478176743347261, 0.008848118094458401, 0.9929473757042914, 0.9930359929056546, 0.9959677796045792, 0.9912854230235244, 0.9913542727428077, 0.9841456109588841, 0.9901064774446483, 0.9946077657833313, 0.9881570155982725, 0.31299264505940627, 0.29058353911938894, 0.2753196773657477, 0.2928774977340838, 0.31918006413392064, 0.3825257659074758, 0.3165484090375026, 0.3098384106456209, 0.28750623148916, 0.22596561033472107, 0.13000864281614755, 0.22908866227570768, 0.35170025604896504, 0.25573928515750766, 0.14288278091971351, 0.14806345427374912, 0.1511625158426212, 0.36572369901224056, 0.13491325774869345, 0.14350338487429293, 0.18858921452110855, 0.1643558220735034, 0.15222293673756482, 0.11750424636280188, 0.15972732008072488, 0.11937705336021176, 0.20404720668776566, 0.21041505955205797, 0.11193196290574614, 0.16569935508614853, 0.29547023114568316, 0.1764279220906836, 0.18393412575796142, 0.18632013009126935, 0.10543943196077776, 0.20912667229923698, 0.0, 0.0, 0.0, 0.0, 0.019172782261010823, 0.0, 0.013481642699726959, 0.010675737993665058, 0.004192163889023659, 0.024776248192106665, 0.0037232732877903185, 0.11726156427415935, 0.09780978929764328, 0.04709774099310449, 0.0, 0.04829619452199474, 0.0067127418957461105, 0.07973388771757617, 0.0, 0.0, 0.0, 0.08510736480289505, 0.08470859129281894, 0.1280824471870492, 0.0, 0.07973878717975036, 0.0, 0.04738212380558382, 0.08795451490777617, 0.04465348694238602, 0.06254461557421132, 0.007183778572395161, 0.03936752936012422, 0.05187857945570229, 0.05599089857300765, 0.08479340466175922, 0.47877347412194593, 0.3624029524976786, 0.5022137642657909, 0.3957391096209769, 0.45711439313433355, 0.4272827234303309, 0.46524397205688095, 0.383708950154219, 0.43960388154919816, 0.05971846129662206, 0.04458764799891801, 0.10739402534992515, 0.11245480689563103, 0.1188643975464373, 0.09498221721785993, 0.061818729561739394, 0.15548512675675552, 0.06580313923663017, 0.27539627221416574, 0.2912494465042681, 0.14972827350074136, 0.29587031790748086, 0.1979121858402093, 0.2590862459486867, 0.18748898992645124, 0.13387593436272238, 0.17551658371164192, 0.17025054768915726, 0.2709246495705566, 0.1448082941379646, 0.29899371754812243, 0.24038956659880628, 0.24515070824153995, 0.2341713754493323, 0.273448846187613, 0.3143452876332532, 0.24416127581737035, 0.20754946467248825, 0.23598842627752503, 0.21418352767488835, 0.22426140139282724, 0.10628268621217396, 0.25448031336476484, 0.22275385937227843, 0.093114665402796, 0.19974912442451442, 0.1958197048684387, 0.19003363385564553, 0.17683115169790575, 0.1541137490448813, 0.17245695583923804, 0.21726150918976728, 0.18416936746115609, 0.2542657659806078, 0.19058027711486392, 0.18052795629357354, 0.18412177809419716, 0.18300777284006597, 0.18643997919347943, 0.17566915722950505, 0.19361872639704036, 0.2346341858967691, 0.21129948144839905, 0.15654159764108666, 0.5953096711285285, 0.16786428320654012, 0.1730661581670836, 0.20096017233223318, 0.1997980744679697, 0.14666120724135434, 0.11519922818667905, 0.15419973834188527, 0.15629489316855705, 0.11264498240566989, 0.5765047001030676, 0.5142410184393054, 0.15489664005670178, 0.21255347035968897, 0.1123735029836731, 0.1480327738995686, 0.4249347691683567, 0.19408506358602684, 0.18691222430147358, 0.19951534669018212, 0.22684571189758185, 0.21023709681515979, 0.23320742274430106, 0.21816998165086554, 0.21482536180318967, 0.20076958833150804, 0.07007248955020517, 0.05182489159021986, 0.0926932374081405, 0.12982229562710546, 0.0941234426496943, 0.06263013115602556, 0.05689155940079804, 0.1085893082207513, 0.04201187969682285]}, "mutation_prompt": null}
{"id": "dd83c194-1253-4bb2-a637-d3e4c3d79c4e", "solution": "import numpy as np\n\nclass Enhanced_Optimized_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min and current_fitness > 1e-6:  # Improved stopping condition based on fitness improvement\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_Optimized_PSO_SA_Optimizer_V2", "description": "Improved convergence criteria for SA by incorporating a dynamic stopping condition based on fitness improvement.", "configspace": "", "generation": 34, "fitness": 0.21073513021480295, "feedback": "The algorithm Enhanced_Optimized_PSO_SA_Optimizer_V2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.1833071550007297, 0.482031609194009, 0.7257089479797272, 0.129747112250859, 0.0, 0.1371769256475076, 0.036417091563469506, 0.10440329312063845, 0.0, 0.0, 0.0, 0.0, 0.14896762885526937, 0.14620448300630773, 0.16614219871264502, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966592163, 0.04464564694431539, 0.07550098342932465, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.08417446241092563, 0.2483704018597893, 0.20861646712448312, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739374, 0.10952130473809463, 0.15064510832306155, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.029099035635751558, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06532824285580752, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539130648, 0.0, 0.0, 0.12348150120707801, 0.04718040920818678, 0.11744513487059993, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.03682922472081951, 0.2076301784179262, 0.1620281934326735, 0.05031672230904405, 0.05072588937380318, 0.08608524537044071, 0.4534957105233185, 0.43198097929627066, 0.48176555233310814, 0.4766639974165363, 0.4395577321081423, 0.2092786737580491, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933631632, 0.12007500841765506, 0.10271927709034612, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.1997921371334448, 0.15719534948039748, 0.19764858651155914, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.23848051122474045, 0.170840023678682, 0.17937026828881897, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.20108561116923052, 0.18062719904134905, 0.07777499893681705, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568967, 0.14129265977404903, 0.1852006500744524, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.19223238455979785, 0.18409148226927996, 0.20210630893097203, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.4783302044821509, 0.20145740260043854, 0.14865177670391128, 0.1673834702502539, 0.15086951485879685, 0.1521343474345247, 0.0790242112585845, 0.10830979300150667, 0.43628166271108826, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.10406134326460037, 0.09483053372221262, 0.22601742146775206, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.1891080539663449, 0.21938472803975495, 0.1800166435746765, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "b5552ccd-8429-4e89-a414-bc5eea4548ca", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = alpha * np.random.random() * (particles[i] - particles[i])\n                    social_component = alpha * np.random.random() * (best_solution - particles[i])\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_PSO_SA_Optimizer", "description": "Improved the velocity update calculation by directly updating velocities based on cognitive and social components without intermediate random matrices, reducing unnecessary memory allocation and computation.", "configspace": "", "generation": 35, "fitness": 0.19809452449102996, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6273780655849849, 0.49334481707260525, 0.43069344804109055, 0.4272128104684325, 0.43488847379053364, 0.41953916832516414, 0.4307618513133783, 0.41669624036707265, 0.43173510721095554, 0.0, 0.0, 0.0, 0.004042471483097554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07632622828959101, 0.08647203915313617, 0.06542103564454915, 0.07814657793602942, 0.01356745815555982, 0.10747774555164724, 0.09751830721750698, 0.07054479009582393, 0.0951826503682085, 0.08801799288401713, 0.031279565722802216, 0.0324489460794084, 0.08518066619307996, 0.004190651864503292, 0.028968267311649143, 0.06476599319689325, 0.04618182960146644, 0.04470378020813859, 0.9946550462263899, 0.3276069907957181, 0.9951870782368469, 0.9917264779501318, 0.985921534413436, 0.8173847057690639, 0.7790022383827518, 0.9950535993655062, 0.8206743138621112, 0.30027639560304, 0.30142658502657804, 0.2842152661733971, 0.34197671593954404, 0.2984103256274808, 0.308702865822019, 0.3315839182710426, 0.310454518880493, 0.29168289970209293, 0.22488713197522192, 0.13340445589548, 0.22384293433747549, 0.1906571949814131, 0.19216909619531475, 0.26101546947567944, 0.17379649829046606, 0.17810300850468952, 0.23484802131684068, 0.16386146393158119, 0.16315793817730428, 0.17734531939489329, 0.15336007596691703, 0.13562607259048454, 0.13055887537583877, 0.24758528511850586, 0.19381639148864904, 0.21546657837109928, 0.17198297633703952, 0.11117154302437016, 0.18355026208274916, 0.3652660589580202, 0.13061323881982845, 0.16057353820035347, 0.20272629864130753, 0.16999530791555229, 0.19553092386207915, 0.0, 0.0, 0.0, 0.05381613559561482, 0.0, 0.0, 0.0, 0.0, 0.011709233421238752, 0.06135111937766813, 0.032254836006573195, 0.050348485889852634, 0.0669736190490221, 0.0, 0.0, 0.10608307706364462, 0.03629493475568557, 0.022513259113786654, 0.0, 0.08756638516692605, 0.01682829907979444, 0.0, 0.2206196979483448, 0.0, 0.07879282268231402, 0.0, 0.07726613513557168, 0.05294787846478943, 0.1658890418333544, 0.011619128904878595, 0.039809047631268024, 0.04914244424869829, 0.11373734043993178, 0.10509700886835416, 0.05190042093184055, 0.07496393222653208, 0.4823933777540512, 0.4485136131677364, 0.44543744930021867, 0.45020379065836813, 0.4186119749932703, 0.4237144983145592, 0.44866359595387917, 0.42621389766945195, 0.4332976415291899, 0.07801060026739437, 0.08264061579292525, 0.07629468222324054, 0.09071203035678332, 0.06671525748717921, 0.08050916099444949, 0.030627278151071358, 0.07331549406001325, 0.05537881784841281, 0.24173499590925895, 0.13082386746587238, 0.2594983038049977, 0.2558693982333884, 0.17314618808868365, 0.1232385871562992, 0.22529084316159964, 0.15507580753161276, 0.2292308699998139, 0.29160808070771804, 0.17823210849158, 0.14903389996481964, 0.2515079019939439, 0.17634063984827697, 0.2330736950680764, 0.2152765202696384, 0.18426282461742416, 0.08395386747582101, 0.11508561715269972, 0.24215955969930802, 0.15972960510459777, 0.25246895401374536, 0.1792911552015004, 0.21435052035492652, 0.07740401349216186, 0.14748690474604442, 0.1411359727446717, 0.22932161584134536, 0.23804480538897055, 0.17522070629346997, 0.23257418071310698, 0.20782122558861882, 0.20488827353410866, 0.2292465718720046, 0.25390548335575713, 0.2327155590379918, 0.1999498323357659, 0.2318263989000927, 0.1793055155898826, 0.18186977282285421, 0.17612911768370199, 0.17998970519809476, 0.18686481360511098, 0.1883616766252567, 0.17001923471679803, 0.1877454633932586, 0.11373837435969258, 0.13327712242126766, 0.17371678433982085, 0.20065258444705703, 0.16971505221698957, 0.1672022895956632, 0.16644981830053363, 0.1652559467086756, 0.6015514723585, 0.11218425859197745, 0.48771414055416284, 0.5744002713763205, 0.0518001067255649, 0.21170062193146078, 0.09336632805843326, 0.39910776142227844, 0.43375221632969696, 0.192570307149718, 0.22370937071083608, 0.2174148665863268, 0.18884737408069774, 0.21557002882841836, 0.18784723637587852, 0.24750455123774373, 0.23503444687444808, 0.188715187021694, 0.1013487231489757, 0.07551320396149785, 0.064496024685888, 0.0680722959106228, 0.05863438371364604, 0.08975876528054028, 0.055737349710347384, 0.08203836784922935, 0.07559052763718532]}, "mutation_prompt": null}
{"id": "57dbbffc-d6e7-4563-aa9f-66d9cab435c0", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles, velocities = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim)), np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive, random_social = np.random.random((n_particles, self.dim)), np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Improved population initialization by generating random particles and velocities in one step to reduce redundant calculations.", "configspace": "", "generation": 36, "fitness": 0.21963802834318738, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "2916571e-d93f-4317-804f-a98d52b8bbf2", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                fitness_values = np.apply_along_axis(objective_function, 1, particles)\n                best_particle_index = np.argmin(fitness_values)\n                best_fitness = fitness_values[best_particle_index]\n                best_solution = particles[best_particle_index].copy()\n\n                cognitive_component = random_cognitive * (particles - particles)\n                social_component = random_social * (best_solution - particles)\n                cognitive_social = alpha * (cognitive_component + social_component)\n                velocities = inertia_weight * velocities + cognitive_social\n                particles = np.clip(particles + velocities, bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Improved velocity update calculation by vectorizing operations to enhance computational efficiency.", "configspace": "", "generation": 37, "fitness": 0.18994901142900994, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.42935974639518204, 0.6370573956586301, 0.45588845793737953, 0.4253149542131458, 0.5137896588955184, 0.4251974435943513, 0.4162562799673011, 0.585824661230723, 0.4551083845096654, 0.03249110772276176, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02081764956126464, 0.0, 0.04829561722018494, 0.04887762147888175, 0.06880146276003929, 0.05172721590027818, 0.13134191036753495, 0.07115602854282921, 0.06600557193081513, 0.06708627301215309, 0.04034837148122494, 0.11149456735816998, 0.04243086576423016, 0.04769045687541151, 0.13182892364873455, 0.13354627944459352, 0.02891918214362743, 0.075378499525522, 0.12043633260795328, 0.0970811140141512, 0.9917226039674212, 0.9889483386387709, 0.9954421306119557, 0.9940479943007182, 0.9943764181599057, 0.9916154792555121, 0.7958609230012568, 0.9890136856043972, 0.2302432350574507, 0.2992849905615549, 0.3198849830041539, 0.305497760910572, 0.286139739806875, 0.30790076203896477, 0.3119813971737012, 0.3268905117782033, 0.28074069071779373, 0.3102674429171418, 0.2262271211383271, 0.13486034545794845, 0.21890927217845635, 0.20862306091008775, 0.2711182845220853, 0.18701658142131183, 0.13076121677466812, 0.3541214131766074, 0.15242301585505014, 0.17140843563585073, 0.20939933451965975, 0.09146429999085415, 0.10311133693186258, 0.12917496118841187, 0.1475698478314702, 0.16774786986766266, 0.1370916946389552, 0.15399990531424923, 0.16431653556611403, 0.11375271843924528, 0.16403322139350474, 0.11477321799446394, 0.13463309448556104, 0.13182183557888472, 0.19430992597683827, 0.0, 0.1683954596938505, 0.0, 0.0, 0.0, 0.0, 0.039114304160006386, 0.0, 0.0, 0.0, 0.0, 0.01045625732037947, 0.04311053605175763, 0.057138139745898986, 0.0961917946316393, 0.011427012916921386, 0.023213732426464184, 0.029389575733131057, 0.02296056306114913, 0.02025046169893252, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06920216315979144, 0.0, 0.0, 0.0, 0.0526671829473806, 0.04283792283423937, 0.07829640260294801, 0.05718227633858097, 0.09618299507607775, 0.06596640494863937, 0.0609530106271825, 0.055304705256626785, 0.0945665869813036, 0.4023943352369974, 0.44218774596731303, 0.41763144737038727, 0.41325867337334055, 0.3835728413853764, 0.4134147499184908, 0.4012070910028136, 0.43375792558955273, 0.453807131459774, 0.03853638409847171, 0.09693987560441397, 0.04759515456946861, 0.03791459239374306, 0.0559091978631725, 0.06167818137970971, 0.050220308340401254, 0.12145042048455656, 0.05281808536485588, 0.1000412292008781, 0.18405815716105045, 0.1823575087996666, 0.19833493664430712, 0.41102921541505544, 0.17780646176807946, 0.09075781466894128, 0.1240083018485959, 0.2700673977989493, 0.19209881783292004, 0.265006570589838, 0.1966638847613098, 0.14508324521317195, 0.14117118773266524, 0.2566996395756581, 0.28982934793668724, 0.31017145788164635, 0.1566600789779632, 0.16116413565086474, 0.18329812235692922, 0.07697848102016613, 0.18056076302260482, 0.1434237795035762, 0.12338739034942314, 0.14811350369067255, 0.13571255484641986, 0.24733917260477556, 0.14683259060427356, 0.2330990365669301, 0.20120894912332354, 0.16679072943097362, 0.18512201645121307, 0.18292340516507333, 0.15570535446131417, 0.19184011345114826, 0.1622159020634819, 0.16854671200310622, 0.1917860016465449, 0.22060514251740626, 0.20691009719261766, 0.18498105480012306, 0.22298573124238452, 0.18388772393940267, 0.21351335542139882, 0.17477810504813518, 0.09306807332599798, 0.17671906899364476, 0.1338028155376454, 0.667109679903579, 0.20133253221846903, 0.13074828908994474, 0.15223785150232927, 0.1471030175277963, 0.16869553253116043, 0.08282027444599716, 0.11260712943600915, 0.4362562415959026, 0.5381781786266464, 0.1515026709503261, 0.20367156349312554, 0.5085858798228984, 0.10476647144036322, 0.16843838238547237, 0.18868136074220088, 0.17255759159543627, 0.190299898982201, 0.1773734125086841, 0.1875908323262816, 0.17016413160772403, 0.1844836147860811, 0.18524100441926983, 0.17792538500963728, 0.038597348700127654, 0.06506985113493269, 0.05280720702417274, 0.028700247590624395, 0.09692538662708616, 0.04082797138841454, 0.04916486610133175, 0.06406093954666525, 0.06413529009382657]}, "mutation_prompt": null}
{"id": "6464677a-5b8b-4cf5-b051-bfe552aef7b6", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                new_velocities = inertia_weight * velocities + alpha * (random_cognitive * (particles - particles) + random_social * (best_solution - particles))\n                particles = np.clip(particles + new_velocities, bounds[0], bounds[1])\n\n                current_fitness_values = list(map(objective_function, particles))\n                best_particle_index = np.argmin(current_fitness_values)\n                if current_fitness_values[best_particle_index] < best_fitness:\n                    best_solution = particles[best_particle_index].copy()\n                    best_fitness = current_fitness_values[best_particle_index]\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()\n", "name": "Enhanced_PSO_SA_Optimizer", "description": "Improved convergence by optimizing the velocity update calculation and streamlining the PSO and SA process through loop restructuring and removing redundant calculations.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\").", "error": "TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\")", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {}, "mutation_prompt": null}
{"id": "88ea0d29-6989-4fc8-b692-027fdff07fdf", "solution": "import numpy as np\n\nclass Compact_Optimized_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def compact_pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return compact_pso_sa_optimization()", "name": "Compact_Optimized_PSO_SA_Optimizer", "description": "Compact the PSO and SA optimization loops by combining common operations and removing redundant calculations.", "configspace": "", "generation": 39, "fitness": 0.21963802834318738, "feedback": "The algorithm Compact_Optimized_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "87e855c8-0bef-4609-b745-a8e9c39526ba", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_social = alpha * (np.random.random(self.dim) * (particles[i] - particles[i]) + np.random.random(self.dim) * (best_solution - particles[i]))\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_PSO_SA_Optimizer_V3", "description": "Simplified the velocity update calculation by removing the cognitive and social components' separate calculations.", "configspace": "", "generation": 40, "fitness": 0.21507312796868885, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.78563220768702, 0.935833600440563, 0.7998035615255836, 0.7905764159110242, 0.4269570280377073, 0.4339948990785162, 0.43465321599318185, 0.7479606045063919, 0.4460606859081314, 0.0, 0.060846373126668185, 0.03549939398050306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10708887168602976, 0.036944173842593186, 0.11492721856331123, 0.1356956440110083, 0.03936598543489489, 0.06300821962687042, 0.05129250441326716, 0.0568295958759516, 0.0661744059819761, 0.0643761415095574, 0.09312552525849627, 0.05872552134105191, 0.1270398349713412, 0.06948776404580459, 0.06256006676041348, 0.07258738543633902, 0.16478176743347261, 0.008848118094458401, 0.9929473757042914, 0.9930359929056546, 0.9959677796045792, 0.9912854230235244, 0.9913542727428077, 0.9841456109588841, 0.9901064774446483, 0.9946077657833313, 0.9881570155982725, 0.31299264505940627, 0.29058353911938894, 0.2753196773657477, 0.2928774977340838, 0.31918006413392064, 0.3825257659074758, 0.3165484090375026, 0.3098384106456209, 0.28750623148916, 0.22596561033472107, 0.13000864281614755, 0.22908866227570768, 0.35170025604896504, 0.25573928515750766, 0.14288278091971351, 0.14806345427374912, 0.1511625158426212, 0.36572369901224056, 0.13491325774869345, 0.14350338487429293, 0.18858921452110855, 0.1643558220735034, 0.15222293673756482, 0.11750424636280188, 0.15972732008072488, 0.11937705336021176, 0.20404720668776566, 0.21041505955205797, 0.11193196290574614, 0.16569935508614853, 0.29547023114568316, 0.1764279220906836, 0.18393412575796142, 0.18632013009126935, 0.10543943196077776, 0.20912667229923698, 0.0, 0.0, 0.0, 0.0, 0.019172782261010823, 0.0, 0.013481642699726959, 0.010675737993665058, 0.004192163889023659, 0.024776248192106665, 0.0037232732877903185, 0.11726156427415935, 0.09780978929764328, 0.04709774099310449, 0.0, 0.04829619452199474, 0.0067127418957461105, 0.07973388771757617, 0.0, 0.0, 0.0, 0.08510736480289505, 0.08470859129281894, 0.1280824471870492, 0.0, 0.07973878717975036, 0.0, 0.04738212380558382, 0.08795451490777617, 0.04465348694238602, 0.06254461557421132, 0.007183778572395161, 0.03936752936012422, 0.05187857945570229, 0.05599089857300765, 0.08479340466175922, 0.47877347412194593, 0.3624029524976786, 0.5022137642657909, 0.3957391096209769, 0.45711439313433355, 0.4272827234303309, 0.46524397205688095, 0.383708950154219, 0.43960388154919816, 0.05971846129662206, 0.04458764799891801, 0.10739402534992515, 0.11245480689563103, 0.1188643975464373, 0.09498221721785993, 0.061818729561739394, 0.15548512675675552, 0.06580313923663017, 0.27539627221416574, 0.2912494465042681, 0.14972827350074136, 0.29587031790748086, 0.1979121858402093, 0.2590862459486867, 0.18748898992645124, 0.13387593436272238, 0.17551658371164192, 0.17025054768915726, 0.2709246495705566, 0.1448082941379646, 0.29899371754812243, 0.24038956659880628, 0.24515070824153995, 0.2341713754493323, 0.273448846187613, 0.3143452876332532, 0.24416127581737035, 0.20754946467248825, 0.23598842627752503, 0.21418352767488835, 0.22426140139282724, 0.10628268621217396, 0.25448031336476484, 0.22275385937227843, 0.093114665402796, 0.19974912442451442, 0.1958197048684387, 0.19003363385564553, 0.17683115169790575, 0.1541137490448813, 0.17245695583923804, 0.21726150918976728, 0.18416936746115609, 0.2542657659806078, 0.19058027711486392, 0.18052795629357354, 0.18412177809419716, 0.18300777284006597, 0.18643997919347943, 0.17566915722950505, 0.19361872639704036, 0.2346341858967691, 0.21129948144839905, 0.15654159764108666, 0.5953096711285285, 0.16786428320654012, 0.1730661581670836, 0.20096017233223318, 0.1997980744679697, 0.14666120724135434, 0.11519922818667905, 0.15419973834188527, 0.15629489316855705, 0.11264498240566989, 0.5765047001030676, 0.5142410184393054, 0.15489664005670178, 0.21255347035968897, 0.1123735029836731, 0.1480327738995686, 0.4249347691683567, 0.19408506358602684, 0.18691222430147358, 0.19951534669018212, 0.22684571189758185, 0.21023709681515979, 0.23320742274430106, 0.21816998165086554, 0.21482536180318967, 0.20076958833150804, 0.07007248955020517, 0.05182489159021986, 0.0926932374081405, 0.12982229562710546, 0.0941234426496943, 0.06263013115602556, 0.05689155940079804, 0.1085893082207513, 0.04201187969682285]}, "mutation_prompt": null}
{"id": "3010b72c-f336-4089-bd5a-0cf14e684b2b", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "9cf0a703-7ed6-46cb-a0dc-825940e0426f", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "f7184d74-ef97-4aa4-b1e3-9a95d51acc67", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n\n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                fitness_values = np.apply_along_axis(objective_function, 1, particles)\n                best_particle_index = np.argmin(fitness_values)\n                best_fitness = fitness_values[best_particle_index]\n                best_solution = particles[best_particle_index].copy()\n\n                cognitive_component = random_cognitive * (particles - particles)\n                social_component = random_social * (best_solution - particles)\n                cognitive_social = alpha * (cognitive_component + social_component)\n                velocities = inertia_weight * velocities + cognitive_social\n                particles = np.clip(particles + velocities, bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Improved velocity update calculation by vectorizing operations for better efficiency.", "configspace": "", "generation": 43, "fitness": 0.18994901142900994, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.42935974639518204, 0.6370573956586301, 0.45588845793737953, 0.4253149542131458, 0.5137896588955184, 0.4251974435943513, 0.4162562799673011, 0.585824661230723, 0.4551083845096654, 0.03249110772276176, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02081764956126464, 0.0, 0.04829561722018494, 0.04887762147888175, 0.06880146276003929, 0.05172721590027818, 0.13134191036753495, 0.07115602854282921, 0.06600557193081513, 0.06708627301215309, 0.04034837148122494, 0.11149456735816998, 0.04243086576423016, 0.04769045687541151, 0.13182892364873455, 0.13354627944459352, 0.02891918214362743, 0.075378499525522, 0.12043633260795328, 0.0970811140141512, 0.9917226039674212, 0.9889483386387709, 0.9954421306119557, 0.9940479943007182, 0.9943764181599057, 0.9916154792555121, 0.7958609230012568, 0.9890136856043972, 0.2302432350574507, 0.2992849905615549, 0.3198849830041539, 0.305497760910572, 0.286139739806875, 0.30790076203896477, 0.3119813971737012, 0.3268905117782033, 0.28074069071779373, 0.3102674429171418, 0.2262271211383271, 0.13486034545794845, 0.21890927217845635, 0.20862306091008775, 0.2711182845220853, 0.18701658142131183, 0.13076121677466812, 0.3541214131766074, 0.15242301585505014, 0.17140843563585073, 0.20939933451965975, 0.09146429999085415, 0.10311133693186258, 0.12917496118841187, 0.1475698478314702, 0.16774786986766266, 0.1370916946389552, 0.15399990531424923, 0.16431653556611403, 0.11375271843924528, 0.16403322139350474, 0.11477321799446394, 0.13463309448556104, 0.13182183557888472, 0.19430992597683827, 0.0, 0.1683954596938505, 0.0, 0.0, 0.0, 0.0, 0.039114304160006386, 0.0, 0.0, 0.0, 0.0, 0.01045625732037947, 0.04311053605175763, 0.057138139745898986, 0.0961917946316393, 0.011427012916921386, 0.023213732426464184, 0.029389575733131057, 0.02296056306114913, 0.02025046169893252, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06920216315979144, 0.0, 0.0, 0.0, 0.0526671829473806, 0.04283792283423937, 0.07829640260294801, 0.05718227633858097, 0.09618299507607775, 0.06596640494863937, 0.0609530106271825, 0.055304705256626785, 0.0945665869813036, 0.4023943352369974, 0.44218774596731303, 0.41763144737038727, 0.41325867337334055, 0.3835728413853764, 0.4134147499184908, 0.4012070910028136, 0.43375792558955273, 0.453807131459774, 0.03853638409847171, 0.09693987560441397, 0.04759515456946861, 0.03791459239374306, 0.0559091978631725, 0.06167818137970971, 0.050220308340401254, 0.12145042048455656, 0.05281808536485588, 0.1000412292008781, 0.18405815716105045, 0.1823575087996666, 0.19833493664430712, 0.41102921541505544, 0.17780646176807946, 0.09075781466894128, 0.1240083018485959, 0.2700673977989493, 0.19209881783292004, 0.265006570589838, 0.1966638847613098, 0.14508324521317195, 0.14117118773266524, 0.2566996395756581, 0.28982934793668724, 0.31017145788164635, 0.1566600789779632, 0.16116413565086474, 0.18329812235692922, 0.07697848102016613, 0.18056076302260482, 0.1434237795035762, 0.12338739034942314, 0.14811350369067255, 0.13571255484641986, 0.24733917260477556, 0.14683259060427356, 0.2330990365669301, 0.20120894912332354, 0.16679072943097362, 0.18512201645121307, 0.18292340516507333, 0.15570535446131417, 0.19184011345114826, 0.1622159020634819, 0.16854671200310622, 0.1917860016465449, 0.22060514251740626, 0.20691009719261766, 0.18498105480012306, 0.22298573124238452, 0.18388772393940267, 0.21351335542139882, 0.17477810504813518, 0.09306807332599798, 0.17671906899364476, 0.1338028155376454, 0.667109679903579, 0.20133253221846903, 0.13074828908994474, 0.15223785150232927, 0.1471030175277963, 0.16869553253116043, 0.08282027444599716, 0.11260712943600915, 0.4362562415959026, 0.5381781786266464, 0.1515026709503261, 0.20367156349312554, 0.5085858798228984, 0.10476647144036322, 0.16843838238547237, 0.18868136074220088, 0.17255759159543627, 0.190299898982201, 0.1773734125086841, 0.1875908323262816, 0.17016413160772403, 0.1844836147860811, 0.18524100441926983, 0.17792538500963728, 0.038597348700127654, 0.06506985113493269, 0.05280720702417274, 0.028700247590624395, 0.09692538662708616, 0.04082797138841454, 0.04916486610133175, 0.06406093954666525, 0.06413529009382657]}, "mutation_prompt": null}
{"id": "61204519-0230-4cd3-83f7-86e78a1b9967", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "87dd7625-12a1-4a07-8a34-4288dbd1a730", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()\n", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Optimized the velocity update calculation by reducing unnecessary array creations and simplified particle updates.", "configspace": "", "generation": 45, "fitness": 0.21963802834318738, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "b807a28d-8207-4b7c-b588-1fe6b822943f", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n\n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()\n", "name": "Enhanced_PSO_SA_Optimizer", "description": "Improved the velocity update calculation by vectorizing operations and eliminating redundant random number generation.", "configspace": "", "generation": 46, "fitness": 0.21963802834318738, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "df8c61a0-9de6-4783-a080-2c7a034752f8", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            for _ in range(max_iterations_pso):\n                cognitive_social = np.zeros((n_particles, self.dim))\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = alpha * np.random.random() * (particles[i] - particles[i])\n                    social_component = alpha * np.random.random() * (best_solution - particles[i])\n                    cognitive_social[i] = cognitive_component + social_component\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social[i]\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Optimized the velocity update calculation by consolidating the random components to reduce redundant calculations and enhance performance.", "configspace": "", "generation": 47, "fitness": 0.19809452449102996, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6273780655849849, 0.49334481707260525, 0.43069344804109055, 0.4272128104684325, 0.43488847379053364, 0.41953916832516414, 0.4307618513133783, 0.41669624036707265, 0.43173510721095554, 0.0, 0.0, 0.0, 0.004042471483097554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07632622828959101, 0.08647203915313617, 0.06542103564454915, 0.07814657793602942, 0.01356745815555982, 0.10747774555164724, 0.09751830721750698, 0.07054479009582393, 0.0951826503682085, 0.08801799288401713, 0.031279565722802216, 0.0324489460794084, 0.08518066619307996, 0.004190651864503292, 0.028968267311649143, 0.06476599319689325, 0.04618182960146644, 0.04470378020813859, 0.9946550462263899, 0.3276069907957181, 0.9951870782368469, 0.9917264779501318, 0.985921534413436, 0.8173847057690639, 0.7790022383827518, 0.9950535993655062, 0.8206743138621112, 0.30027639560304, 0.30142658502657804, 0.2842152661733971, 0.34197671593954404, 0.2984103256274808, 0.308702865822019, 0.3315839182710426, 0.310454518880493, 0.29168289970209293, 0.22488713197522192, 0.13340445589548, 0.22384293433747549, 0.1906571949814131, 0.19216909619531475, 0.26101546947567944, 0.17379649829046606, 0.17810300850468952, 0.23484802131684068, 0.16386146393158119, 0.16315793817730428, 0.17734531939489329, 0.15336007596691703, 0.13562607259048454, 0.13055887537583877, 0.24758528511850586, 0.19381639148864904, 0.21546657837109928, 0.17198297633703952, 0.11117154302437016, 0.18355026208274916, 0.3652660589580202, 0.13061323881982845, 0.16057353820035347, 0.20272629864130753, 0.16999530791555229, 0.19553092386207915, 0.0, 0.0, 0.0, 0.05381613559561482, 0.0, 0.0, 0.0, 0.0, 0.011709233421238752, 0.06135111937766813, 0.032254836006573195, 0.050348485889852634, 0.0669736190490221, 0.0, 0.0, 0.10608307706364462, 0.03629493475568557, 0.022513259113786654, 0.0, 0.08756638516692605, 0.01682829907979444, 0.0, 0.2206196979483448, 0.0, 0.07879282268231402, 0.0, 0.07726613513557168, 0.05294787846478943, 0.1658890418333544, 0.011619128904878595, 0.039809047631268024, 0.04914244424869829, 0.11373734043993178, 0.10509700886835416, 0.05190042093184055, 0.07496393222653208, 0.4823933777540512, 0.4485136131677364, 0.44543744930021867, 0.45020379065836813, 0.4186119749932703, 0.4237144983145592, 0.44866359595387917, 0.42621389766945195, 0.4332976415291899, 0.07801060026739437, 0.08264061579292525, 0.07629468222324054, 0.09071203035678332, 0.06671525748717921, 0.08050916099444949, 0.030627278151071358, 0.07331549406001325, 0.05537881784841281, 0.24173499590925895, 0.13082386746587238, 0.2594983038049977, 0.2558693982333884, 0.17314618808868365, 0.1232385871562992, 0.22529084316159964, 0.15507580753161276, 0.2292308699998139, 0.29160808070771804, 0.17823210849158, 0.14903389996481964, 0.2515079019939439, 0.17634063984827697, 0.2330736950680764, 0.2152765202696384, 0.18426282461742416, 0.08395386747582101, 0.11508561715269972, 0.24215955969930802, 0.15972960510459777, 0.25246895401374536, 0.1792911552015004, 0.21435052035492652, 0.07740401349216186, 0.14748690474604442, 0.1411359727446717, 0.22932161584134536, 0.23804480538897055, 0.17522070629346997, 0.23257418071310698, 0.20782122558861882, 0.20488827353410866, 0.2292465718720046, 0.25390548335575713, 0.2327155590379918, 0.1999498323357659, 0.2318263989000927, 0.1793055155898826, 0.18186977282285421, 0.17612911768370199, 0.17998970519809476, 0.18686481360511098, 0.1883616766252567, 0.17001923471679803, 0.1877454633932586, 0.11373837435969258, 0.13327712242126766, 0.17371678433982085, 0.20065258444705703, 0.16971505221698957, 0.1672022895956632, 0.16644981830053363, 0.1652559467086756, 0.6015514723585, 0.11218425859197745, 0.48771414055416284, 0.5744002713763205, 0.0518001067255649, 0.21170062193146078, 0.09336632805843326, 0.39910776142227844, 0.43375221632969696, 0.192570307149718, 0.22370937071083608, 0.2174148665863268, 0.18884737408069774, 0.21557002882841836, 0.18784723637587852, 0.24750455123774373, 0.23503444687444808, 0.188715187021694, 0.1013487231489757, 0.07551320396149785, 0.064496024685888, 0.0680722959106228, 0.05863438371364604, 0.08975876528054028, 0.055737349710347384, 0.08203836784922935, 0.07559052763718532]}, "mutation_prompt": null}
{"id": "8f6fdf64-be44-405c-b7f5-895dc77528f4", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            random_vals = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or random_vals[i].max() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Improved the velocity update calculation by precomputing random values outside the loop to reduce redundant calculations.", "configspace": "", "generation": 48, "fitness": 0.21655816321445312, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.43204633566248196, 0.5523576629747265, 0.47465061201906755, 0.42738846531340846, 0.4820316091940202, 0.7257089479797278, 0.12974711225085755, 0.0, 0.13717692564751272, 0.11758809501080791, 0.104403293120655, 0.0, 0.0, 0.01285635698099108, 0.0, 0.14896762885527026, 0.14620448300631705, 0.16614219871264957, 0.06280034993730077, 0.1305809927787943, 0.07145749265303292, 0.0480626486232657, 0.10649285204194725, 0.09328537070561271, 0.06462296966591097, 0.04574393622377415, 0.08187618044872402, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051467575653572184, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7784975992880223, 0.9881307813786347, 0.9697240922293513, 0.3112795307023295, 0.2804581912813272, 0.30416646618586096, 0.35154700850319465, 0.3107870341325708, 0.3120517051264271, 0.31033757744792567, 0.31323627776405083, 0.35662092521026356, 0.22598188639163386, 0.10734067104358214, 0.22967306955692435, 0.15117813344122855, 0.21189263763579314, 0.2734183295361041, 0.17344899145849701, 0.20962867015479558, 0.2195046918750767, 0.1469660651263195, 0.1784286907734175, 0.16744412907332584, 0.13526912764739185, 0.11533748534627486, 0.18695716320351052, 0.1440401079526641, 0.1608914220067974, 0.15675698316286324, 0.13851020909434553, 0.17080235952452438, 0.17446452009761415, 0.13546333522128062, 0.19328935697062333, 0.13052831219900507, 0.18383640673746027, 0.1418248415234088, 0.2105198344809751, 0.0, 0.0036146311586336966, 0.0, 0.1029416163609671, 0.04842452782227247, 0.0, 0.0, 0.0, 0.0, 0.030784610696142023, 0.022046082249020382, 0.05439538272711231, 0.06843881440199073, 0.015407901500498755, 0.004459778901959144, 0.05398262885555083, 0.022418429097035175, 0.012421245289203964, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.09938177298288597, 0.20763017841792575, 0.16202819343266706, 0.0562804539149383, 0.05358207234334189, 0.0860852453704456, 0.4534957105233134, 0.45840727259072733, 0.481765552333119, 0.476663997416535, 0.46625752639210205, 0.38734110161460045, 0.5281149870251198, 0.40502332895228854, 0.47325224831589585, 0.02739861277430322, 0.08590818471535278, 0.08130339467116188, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.18781923891935204, 0.1734358304244341, 0.19979213713344635, 0.1783239733221872, 0.2971060895708205, 0.15499773733777455, 0.1641687855524906, 0.21094869992438958, 0.2907832145616237, 0.22391088866388742, 0.17937026828880898, 0.21533951513477645, 0.23670006011972333, 0.3522593871398194, 0.22658499284703426, 0.23672003582575896, 0.17304110036858988, 0.2010856111692354, 0.1806271990413454, 0.10558105037214227, 0.2033324700756347, 0.10594531204759661, 0.19676357123620714, 0.18733500342508924, 0.13721995928238706, 0.16922344963686442, 0.20668216062568112, 0.14529970632273104, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.24667271998973084, 0.17189397401266693, 0.20264099192693252, 0.1840914822692925, 0.2021063089309577, 0.19997897106595297, 0.2110460050622811, 0.2567957920319368, 0.19061723561895838, 0.1842290338334095, 0.17137575994606447, 0.15572850508063496, 0.6891158880970096, 0.1355415156368588, 0.6320355080521716, 0.20145740260043454, 0.14865177670391128, 0.16797962328642302, 0.16626809036214163, 0.15373653870306192, 0.08266148793532835, 0.11214980220788273, 0.5785534972353585, 0.5300197374670816, 0.10526170926217515, 0.21355605427365787, 0.11211451106745918, 0.09483053372221983, 0.3551542347190959, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.1917487044521753, 0.21938472803974696, 0.1800166435746905, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "1684bab9-6706-4508-a84c-d0d18837c1ee", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "4479dc0c-044e-46f4-b746-2a36c1f1b209", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = np.random.uniform(bounds[0], bounds[1], self.dim)\n            best_fitness = objective_function(best_solution)\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n\n                    if fitness < best_fitness:\n                        best_solution = particles[i]\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random(self.dim) * (particles[i] - particles[i])\n                    social_component = np.random.random(self.dim) * (best_solution - particles[i])\n                    velocities[i] = inertia_weight * velocities[i] + alpha * (cognitive_component + social_component)\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Reduced redundant variable assignment by directly updating the best solution within the loop and simplified the velocity update calculation.", "configspace": "", "generation": 50, "fitness": 0.08947953949746532, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.19.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.1569956639432949, 0.08049963541813665, 0.12499022936654325, 0.0795406525268183, 0.09604239416297455, 0.11127742388895734, 0.11657109966625301, 0.10939442250063325, 0.10567045194357416, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.037755908073576205, 0.023984767960551157, 0.018266338311886066, 0.043169788461713154, 0.011727929563076556, 0.033513664785114416, 0.025730034410097913, 0.010992526090329968, 0.013439419844033962, 0.025262363869778537, 0.0, 0.014170245636393575, 0.027143884726214984, 0.0, 0.008793269745306143, 0.015608932404260312, 0.0, 0.0025887880714028366, 0.9940010964083723, 0.9942320069337676, 0.9958705479936487, 0.9934820452942588, 0.9948452641341914, 0.9925033197915206, 0.9897485803802445, 0.9946770612757386, 0.15948985923282744, 0.018113222577508692, 0.03628726314932662, 0.0, 0.023854708034629746, 0.031542034095345506, 0.028895164046522592, 0.08535923097958453, 0.0269052684796105, 0.0, 0.11857640515723655, 0.05807436338201055, 0.06102371182607891, 0.08053599308611248, 0.03766879429038161, 0.05465150516016015, 0.04727098148469777, 0.015227447978530706, 0.02244335811378695, 0.0, 0.0, 0.0032796237522397798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0053847149994354915, 0.0, 0.0, 0.0, 0.0, 0.006763358498147909, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14288604481278167, 0.13311109407304988, 0.20420329008360605, 0.138217821059063, 0.15931014618295047, 0.14171501986299773, 0.15151712276733398, 0.12940144785825647, 0.1694671183769082, 0.010558027369148348, 0.03567581433887845, 0.0027212154647753284, 0.02821179867600787, 0.0024139618723431067, 0.030413318275681722, 0.020908796865605095, 0.0029747858751919543, 0.03231333774734502, 0.1203287769487793, 0.10128344200192896, 0.0835723315844934, 0.1464627405434903, 0.12255535234929227, 0.0870159181476553, 0.09683978959849193, 0.08301187453198944, 0.11213670588723512, 0.11663738927687206, 0.12374770116626166, 0.11178116371696689, 0.1282262273526178, 0.1195680216289593, 0.10782597850906894, 0.1276205909751974, 0.126522765654833, 0.10075597427180105, 0.06257497340583218, 0.06264366002294885, 0.059459497520461646, 0.08344654225785053, 0.07420792993287395, 0.06438298739255044, 0.0814346158807715, 0.07335178088857297, 0.03777189798036673, 0.1129299262123713, 0.10203267610740585, 0.15568295076374394, 0.10808101782727697, 0.08344442661684393, 0.16345084874024396, 0.15415452865151424, 0.10040838463436597, 0.14536916956240964, 0.0, 0.0, 0.15312549069511372, 0.13253711412503832, 0.0, 0.0, 0.14334175346281697, 0.0, 0.11744056533579772, 0.12164118412911995, 0.05983976464995178, 0.06480173319641525, 0.12854604320597574, 0.1599465462827988, 0.13789847412351297, 0.07278761913953291, 0.09088716208972947, 0.07170009787961995, 0.06405303616211022, 0.0718682902557406, 0.06850784936745768, 0.09357130047010864, 0.03649002222181552, 0.06533568272949564, 0.05358291544550409, 0.04334695597968907, 0.10890696847074399, 0.1658461902968642, 0.172504448220951, 0.1870419888296948, 0.18193254157495287, 0.15877513089092676, 0.17518095081265928, 0.17277858259463685, 0.17922660740237006, 0.16907683913330585, 0.037575489835987574, 0.0350599938852425, 0.04155700458545397, 0.053112734746672885, 0.005987595677859225, 0.010013800507039372, 0.02724838657589901, 0.025388721694084238, 0.028539468756715314]}, "mutation_prompt": null}
{"id": "7c3913f1-4cb5-4e40-bb85-b8bbd622a1bc", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random(self.dim) * (particles[i] - particles[i])\n                    social_component = np.random.random(self.dim) * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Eliminated redundant variable storage for random cognitive and social components to reduce memory consumption and improve efficiency.", "configspace": "", "generation": 51, "fitness": 0.21507312796868885, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.78563220768702, 0.935833600440563, 0.7998035615255836, 0.7905764159110242, 0.4269570280377073, 0.4339948990785162, 0.43465321599318185, 0.7479606045063919, 0.4460606859081314, 0.0, 0.060846373126668185, 0.03549939398050306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10708887168602976, 0.036944173842593186, 0.11492721856331123, 0.1356956440110083, 0.03936598543489489, 0.06300821962687042, 0.05129250441326716, 0.0568295958759516, 0.0661744059819761, 0.0643761415095574, 0.09312552525849627, 0.05872552134105191, 0.1270398349713412, 0.06948776404580459, 0.06256006676041348, 0.07258738543633902, 0.16478176743347261, 0.008848118094458401, 0.9929473757042914, 0.9930359929056546, 0.9959677796045792, 0.9912854230235244, 0.9913542727428077, 0.9841456109588841, 0.9901064774446483, 0.9946077657833313, 0.9881570155982725, 0.31299264505940627, 0.29058353911938894, 0.2753196773657477, 0.2928774977340838, 0.31918006413392064, 0.3825257659074758, 0.3165484090375026, 0.3098384106456209, 0.28750623148916, 0.22596561033472107, 0.13000864281614755, 0.22908866227570768, 0.35170025604896504, 0.25573928515750766, 0.14288278091971351, 0.14806345427374912, 0.1511625158426212, 0.36572369901224056, 0.13491325774869345, 0.14350338487429293, 0.18858921452110855, 0.1643558220735034, 0.15222293673756482, 0.11750424636280188, 0.15972732008072488, 0.11937705336021176, 0.20404720668776566, 0.21041505955205797, 0.11193196290574614, 0.16569935508614853, 0.29547023114568316, 0.1764279220906836, 0.18393412575796142, 0.18632013009126935, 0.10543943196077776, 0.20912667229923698, 0.0, 0.0, 0.0, 0.0, 0.019172782261010823, 0.0, 0.013481642699726959, 0.010675737993665058, 0.004192163889023659, 0.024776248192106665, 0.0037232732877903185, 0.11726156427415935, 0.09780978929764328, 0.04709774099310449, 0.0, 0.04829619452199474, 0.0067127418957461105, 0.07973388771757617, 0.0, 0.0, 0.0, 0.08510736480289505, 0.08470859129281894, 0.1280824471870492, 0.0, 0.07973878717975036, 0.0, 0.04738212380558382, 0.08795451490777617, 0.04465348694238602, 0.06254461557421132, 0.007183778572395161, 0.03936752936012422, 0.05187857945570229, 0.05599089857300765, 0.08479340466175922, 0.47877347412194593, 0.3624029524976786, 0.5022137642657909, 0.3957391096209769, 0.45711439313433355, 0.4272827234303309, 0.46524397205688095, 0.383708950154219, 0.43960388154919816, 0.05971846129662206, 0.04458764799891801, 0.10739402534992515, 0.11245480689563103, 0.1188643975464373, 0.09498221721785993, 0.061818729561739394, 0.15548512675675552, 0.06580313923663017, 0.27539627221416574, 0.2912494465042681, 0.14972827350074136, 0.29587031790748086, 0.1979121858402093, 0.2590862459486867, 0.18748898992645124, 0.13387593436272238, 0.17551658371164192, 0.17025054768915726, 0.2709246495705566, 0.1448082941379646, 0.29899371754812243, 0.24038956659880628, 0.24515070824153995, 0.2341713754493323, 0.273448846187613, 0.3143452876332532, 0.24416127581737035, 0.20754946467248825, 0.23598842627752503, 0.21418352767488835, 0.22426140139282724, 0.10628268621217396, 0.25448031336476484, 0.22275385937227843, 0.093114665402796, 0.19974912442451442, 0.1958197048684387, 0.19003363385564553, 0.17683115169790575, 0.1541137490448813, 0.17245695583923804, 0.21726150918976728, 0.18416936746115609, 0.2542657659806078, 0.19058027711486392, 0.18052795629357354, 0.18412177809419716, 0.18300777284006597, 0.18643997919347943, 0.17566915722950505, 0.19361872639704036, 0.2346341858967691, 0.21129948144839905, 0.15654159764108666, 0.5953096711285285, 0.16786428320654012, 0.1730661581670836, 0.20096017233223318, 0.1997980744679697, 0.14666120724135434, 0.11519922818667905, 0.15419973834188527, 0.15629489316855705, 0.11264498240566989, 0.5765047001030676, 0.5142410184393054, 0.15489664005670178, 0.21255347035968897, 0.1123735029836731, 0.1480327738995686, 0.4249347691683567, 0.19408506358602684, 0.18691222430147358, 0.19951534669018212, 0.22684571189758185, 0.21023709681515979, 0.23320742274430106, 0.21816998165086554, 0.21482536180318967, 0.20076958833150804, 0.07007248955020517, 0.05182489159021986, 0.0926932374081405, 0.12982229562710546, 0.0941234426496943, 0.06263013115602556, 0.05689155940079804, 0.1085893082207513, 0.04201187969682285]}, "mutation_prompt": null}
{"id": "2cf449bb-f7da-469c-bb96-6eb316dfc705", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "96ad7c95-b9ac-4d5b-983e-d28cbe7382ed", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles, velocities = np.random.uniform(bounds[0], bounds[1], (2, n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Improved the population initialization method by generating random particles and velocities in a single step to reduce redundant code.", "configspace": "", "generation": 53, "fitness": 0.18784127035193604, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.4194419474540805, 0.3940025918201938, 0.8208280668972869, 0.4172566434074053, 0.41347907062726963, 0.42271132820502844, 0.39960100095079576, 0.41312774376843386, 0.41985846714004094, 0.0, 0.0, 0.0, 0.021931791735910533, 0.047817519924462815, 0.0, 0.08626820074198316, 0.03912745385947314, 0.0, 0.07993733176955753, 0.03677338546123332, 0.04019026232734413, 0.06104562012667125, 0.07280328565105831, 0.04293636849311988, 0.04130369929318878, 0.05521432687549843, 0.05643238129994044, 0.027152033610722714, 0.042144365587740706, 0.05520672668224147, 0.0907016676670882, 0.0740458299172213, 0.039831820943787566, 0.01331963803823022, 0.006000858949572252, 0.007578314941285469, 0.9941510619726834, 0.9924483619071864, 0.9930949872012669, 0.9909851416388782, 0.9968712315123937, 0.9947535117402476, 0.9948707364258784, 0.994245022643397, 0.9943964295855474, 0.30868336480936687, 0.2942803678801975, 0.34293968387825424, 0.31766136260572786, 0.3160894733420433, 0.3099029695793253, 0.30051415914371316, 0.3213024442544574, 0.2945935872428366, 0.3860257574577185, 0.16692504116206763, 0.2287003255256126, 0.24614618748856132, 0.1488482771580728, 0.21173390731553432, 0.1316909506133086, 0.2174467600493224, 0.15345939361297534, 0.10779225473984166, 0.1922695903056576, 0.18290298730742616, 0.13259689699317423, 0.19092203223294524, 0.15345069102491238, 0.16484818485332364, 0.16848189177902606, 0.1808464590822224, 0.1743583062319829, 0.1112352925130966, 0.1298330450256372, 0.18254048064137085, 0.18714448555658914, 0.18679559129575518, 0.16791957655309453, 0.2026713875047289, 0.16684964875602237, 0.0, 0.0, 0.0, 0.02023899874488866, 0.0, 0.0030039901482364906, 0.004242576054865221, 0.0, 0.06133846498521711, 0.03714154634085698, 0.015027152418225387, 0.0, 0.01298754253967449, 0.0, 0.0, 0.027366625057444582, 0.041652843112202076, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0847292332745917, 0.0, 0.0, 0.08019644613772037, 0.22875999006684922, 0.11527756115705345, 0.0561634605192366, 0.11217986773364719, 0.033011369139598346, 0.043857408358508265, 0.07778662430843453, 0.11367628748360004, 0.11836204264273187, 0.5079782395733139, 0.4764592007788401, 0.4740762668167301, 0.38624326482848714, 0.3787935000407595, 0.41051867068898185, 0.4395163365504541, 0.37976981395647913, 0.5292217568901093, 0.06502671058130693, 0.06800561663634908, 0.05730915995787178, 0.07726516818161766, 0.10005503114636871, 0.056659754296241815, 0.07834513610176486, 0.06618191845015275, 0.1192693640425756, 0.1875017058828975, 0.12967612955339936, 0.14677852064707908, 0.21398361702404367, 0.15774039554572006, 0.12400161871503201, 0.142640369997601, 0.18016128357536276, 0.18792587635437008, 0.17744912065235985, 0.16447663387943723, 0.24428969113717502, 0.14947044813440447, 0.29255084249929075, 0.10384271491024033, 0.21222528947121222, 0.1748750206485138, 0.10744206480485186, 0.0727740521131256, 0.1815580465168165, 0.07739252401833496, 0.08987762543642441, 0.18432164283304608, 0.08605653105670263, 0.15503231990419886, 0.1439379021560453, 0.044633867786326165, 0.19375449269401324, 0.12124022996247985, 0.15130209795891536, 0.17927830315029236, 0.1177800452337564, 0.17666589140438427, 0.18473685700291853, 0.1797972893354297, 0.19432217237521987, 0.18560136738938737, 0.18636621615656412, 0.20504155382127054, 0.17353007967787093, 0.1862804814443888, 0.21532089036548607, 0.1767475076551609, 0.194292293262341, 0.19663160431904825, 0.16993449734078347, 0.19965006434391386, 0.13489343557483902, 0.16853029808605602, 0.20112266172721815, 0.130493050611851, 0.1467648324174876, 0.12611564515161866, 0.1018564412344164, 0.08235894201580685, 0.11273108854572589, 0.1536452054558175, 0.5803763684581755, 0.20555011643922405, 0.20710735502345878, 0.16254833703272686, 0.16549704226692008, 0.09464507184064153, 0.17799483533375915, 0.17354657561069575, 0.17574706031912124, 0.25766320420805466, 0.1897604557012451, 0.24562297807722955, 0.23799275316974122, 0.17535609405263353, 0.2221608020890039, 0.04757793254034881, 0.04018643407906963, 0.06488310468773384, 0.09588309235343573, 0.023691953674704336, 0.03267261764076357, 0.05409645492186388, 0.06585997746330863, 0.055908404012615764]}, "mutation_prompt": null}
{"id": "42bcee0b-b595-40c5-a5ee-381cc5c31666", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "043d95b2-975a-4fbb-983a-39b98c409cab", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "8c19131d-c53d-46da-b418-1981643aa81f", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i]\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] += inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Efficiently update particles' positions by avoiding unnecessary copying operations and enhancing vectorized calculations.", "configspace": "", "generation": 56, "fitness": 0.09681832591094397, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.19.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.09922157193014192, 0.10460744940630651, 0.11657876649686205, 0.4105300140629271, 0.10784086678799354, 0.09816157094669398, 0.07558714449188808, 0.12080534327556958, 0.11790396492502242, 0.0, 0.026598838521243673, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01634727025986249, 0.04326197015250799, 0.009496569561584844, 0.01395208625522859, 0.012892909455162638, 0.001977609464872687, 0.038849001939250005, 0.018179754608768195, 0.016871861853690273, 0.007473674729306046, 0.0, 0.0, 0.02348822295272679, 0.0, 0.0, 0.0, 0.009557146126787153, 0.0, 0.9945758662180052, 0.9934563946797311, 0.9952910337663117, 0.9953804254600197, 0.9947989897156143, 0.8513076353295006, 0.9958034102443393, 0.9937112857163425, 0.8368796278883932, 0.019863095274375908, 0.019744629520132784, 0.0, 0.06308629281500144, 0.00941738424242522, 0.009380648031504624, 0.047982829163478846, 0.31074451299820627, 0.0, 0.3462459168246751, 0.04981437373992159, 0.02434338062640784, 0.03551868345797771, 0.03463654446681286, 0.032837097491939304, 0.039378773537146694, 0.03338747856326085, 0.020713653822272304, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.15250093349445593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.026120687399218356, 0.008695253155102889, 0.0032482959262444266, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07281791121003356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13290944703257412, 0.16879224048836927, 0.15235918565957363, 0.11865410800881915, 0.09870337262304096, 0.3846268197311834, 0.14698955668747127, 0.1256507357429134, 0.1541072198940152, 0.0022656460139803825, 0.006941395005886419, 0.004847889589515431, 0.009901153474415558, 0.015318585280910013, 0.03781395508548213, 0.0, 0.026477275519209087, 0.028525494488204628, 0.22402625380957852, 0.14479733709166553, 0.1472181466781861, 0.26999174075960986, 0.07721800600480455, 0.13462763777341424, 0.13280206572721986, 0.0978194173022432, 0.12053995383354155, 0.11811479311814288, 0.10749424006772601, 0.1152788505482748, 0.13114899145480108, 0.11262226714511048, 0.10458168480683161, 0.11920504748905059, 0.11242242611599573, 0.09557250020360553, 0.07190499117791838, 0.038907066047364824, 0.0367652999066399, 0.06679655705868448, 0.06535388312205392, 0.046035647521525114, 0.058260065104304704, 0.051081191788282965, 0.05304009853929548, 0.10631401234140136, 0.08179280455245896, 0.16521084083245752, 0.10940815760506162, 0.11100280303609378, 0.11473348736220323, 0.1911040572906353, 0.09442809026989629, 0.18235064978939697, 0.0, 0.0, 0.13132164693618287, 0.13901875463380753, 0.0, 0.12511442891478797, 0.0, 0.0, 0.0, 0.06330796218102297, 0.07450090298564815, 0.07473735459488284, 0.1436042124821797, 0.19395484415083275, 0.07167605850500225, 0.14510537509147903, 0.08080280263103667, 0.07841735880154987, 0.0740762412849485, 0.05778887065878191, 0.05232098593586998, 0.019820766420894143, 0.06337128532828751, 0.08263850413779528, 0.022328084877800913, 0.0617215599554074, 0.05902669802432958, 0.1987584734904252, 0.17827836716666046, 0.1594812706776323, 0.1951756571348935, 0.18105867065658965, 0.179372862687051, 0.19623326696625853, 0.168211889296232, 0.1792235645234277, 0.030935616236368313, 0.03319050359613174, 0.05644971772695917, 0.028700706957627387, 0.042340889945264304, 0.05143313015848339, 0.02486111556170345, 0.025759933388723177, 0.041916265476649284]}, "mutation_prompt": null}
{"id": "12494aff-73da-4784-824a-fd6336b2ac7a", "solution": "import numpy as np\n\nclass Enhanced_Optimized_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n\n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                fitness = objective_function(particles)\n                better_results = fitness < best_fitness\n                best_solution = np.where(better_results, particles, best_solution)\n                best_fitness = np.where(better_results, fitness, best_fitness)\n                \n                cognitive_component = random_cognitive * (particles - particles[:, None])\n                social_component = random_social * (best_solution - particles)\n                cognitive_social = alpha * (cognitive_component + social_component)\n                velocities = inertia_weight * velocities + cognitive_social\n                particles = np.clip(particles + velocities, bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, (n_particles, self.dim)), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    improve_candidate = candidate_fitness < current_fitness\n                    random_accept = np.random.rand(n_particles) < np.exp((current_fitness - candidate_fitness) / T)\n                    update_condition = np.logical_or(improve_candidate, random_accept)\n                    current_solution = np.where(update_condition[:, None], candidate_solution, current_solution)\n                    current_fitness = np.where(update_condition, candidate_fitness, current_fitness)\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_Optimized_PSO_SA_Optimizer_V3", "description": "Improved efficiency by vectorizing the particle updates and removing redundant calculations.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'<' not supported between instances of 'list' and 'float'\").", "error": "TypeError(\"'<' not supported between instances of 'list' and 'float'\")", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {}, "mutation_prompt": null}
{"id": "1c3e026e-b72f-45cf-af86-296a07f7fe9b", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "16d8fdcc-fafe-4f49-9245-6e8ae587633d", "solution": "import numpy as np\n\nclass Enhanced_Optimized_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()\n", "name": "Enhanced_Optimized_PSO_SA_Optimizer_V3", "description": "Improved convergence speed by updating the loop structure for better efficiency.", "configspace": "", "generation": 59, "fitness": 0.21963802834318738, "feedback": "The algorithm Enhanced_Optimized_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "0cae8f63-ef70-4e68-9420-dfb327f99a52", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "04afe801-58f5-4787-b1c8-72823ad994a2", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "33509902-c7b3-49a3-a34c-facf84ccfef0", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                fitness_values = np.array([objective_function(p) for p in particles])\n                best_particle_idx = np.argmin(fitness_values)\n                if fitness_values[best_particle_idx] < best_fitness:\n                    best_solution = particles[best_particle_idx].copy()\n                    best_fitness = fitness_values[best_particle_idx]\n\n                cognitive_component = random_cognitive * (particles - particles[:, np.newaxis])\n                social_component = random_social * (best_solution - particles)\n                cognitive_social = alpha * (cognitive_component + social_component)\n                velocities = inertia_weight * velocities + cognitive_social\n                particles = np.clip(particles + velocities, bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Optimized the velocity update calculation by vectorizing the computation to improve efficiency.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 99 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 99 is out of bounds for axis 0 with size 10')", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {}, "mutation_prompt": null}
{"id": "d9c0eeef-ce8e-4492-b0f2-93461700069a", "solution": "import numpy as np\n\nclass Optimized_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n\n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n                    acceptance_prob = np.exp((current_fitness - candidate_fitness) / T)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < acceptance_prob:\n                        current_solution, current_fitness = candidate_solution, candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_PSO_SA_Optimizer_V3", "description": "Optimized_PSO_SA_Optimizer_V3 with enhanced efficiency and performance.", "configspace": "", "generation": 63, "fitness": 0.21963802834318738, "feedback": "The algorithm Optimized_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "335cb42e-0736-47e9-915a-5689ef9aa830", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "12a31436-56a6-450d-8ad1-8da728c72e0d", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "e35413b9-f119-4e65-9732-b90de9e93123", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "e86d7047-f40b-4a52-b5e1-2c36583dcd14", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = alpha * np.random.random(self.dim) * (particles[i] - particles[i])\n                    social_component = alpha * np.random.random(self.dim) * (best_solution - particles[i])\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Simplified the velocity update calculation to reduce redundant operations and improve computational efficiency.", "configspace": "", "generation": 67, "fitness": 0.2150731279642011, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.7856322076866629, 0.9358336004408181, 0.7998035615257837, 0.7905764159111637, 0.42695702803770597, 0.43399489907851374, 0.43465321599318063, 0.7479606045064592, 0.44606068590812853, 0.0, 0.060846373126670406, 0.035499393980489735, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10708887168602998, 0.036944173842593186, 0.11492721856331167, 0.1356956440110083, 0.03936598543489467, 0.06300821962687042, 0.05129250441326716, 0.0568295958759516, 0.0661744059819761, 0.06437614150955728, 0.09312552525849627, 0.05872552134105191, 0.1270398349713412, 0.06948776404580459, 0.06256006676041348, 0.07258738543633902, 0.1647817674334725, 0.008848118094458401, 0.9929473757042914, 0.9930359929056546, 0.9959677796045792, 0.9912854230235244, 0.9913542727428077, 0.9841456109588841, 0.9901064774446483, 0.9946077657833313, 0.9881570155982725, 0.3129926450594045, 0.2905835391193885, 0.2753196773657475, 0.29287749773408445, 0.31918006413392064, 0.3825257659074761, 0.3165484090374924, 0.3098384106456217, 0.28750623148918175, 0.22596561033472107, 0.13000864281614755, 0.22908866227570768, 0.35170025604896504, 0.25573928515750766, 0.14288278091971351, 0.14806345427374912, 0.1511625158426212, 0.36572369901224056, 0.13491325774869345, 0.1435033848742927, 0.18858921452111288, 0.1643558220735042, 0.1522229367375647, 0.11750424636280166, 0.15972732008072488, 0.11937705336021176, 0.20404720668776555, 0.21041505955205797, 0.1119319619357142, 0.1656993550861483, 0.29547023114568305, 0.1764279220906827, 0.18393412575796153, 0.18632013009126946, 0.10543943196077776, 0.20912667229923754, 0.0, 0.0, 0.0, 0.0, 0.019172782261017485, 0.0, 0.013481642699726737, 0.010675737993664502, 0.0041921638890261015, 0.024776248192106665, 0.0037232732877903185, 0.11726156427415657, 0.09780978929764372, 0.04709774099310449, 0.0, 0.048296194521995184, 0.0067127418957461105, 0.07973388771757617, 0.0, 0.0, 0.0, 0.08510736480289527, 0.08470859129281894, 0.12808244718704886, 0.0, 0.07973878717975025, 0.0, 0.0473821238055836, 0.08795451490777573, 0.0446534869423858, 0.06254461557421165, 0.007183778572395161, 0.039367529360124665, 0.05187857945570218, 0.055990898573009096, 0.08479340466175966, 0.47877347412194626, 0.3624029524976813, 0.5022137642657923, 0.395739109620976, 0.45711439313433255, 0.4272827234303309, 0.4652439720568796, 0.38370895015421347, 0.4396038815491403, 0.05971846129662206, 0.04458764799891801, 0.10739402534992426, 0.11245480689563103, 0.11886439754643652, 0.09498221721785993, 0.061818729561739394, 0.15548512675675485, 0.06580313923663017, 0.27539627221417495, 0.29124944650431894, 0.14972827350074203, 0.29587031790748075, 0.19791218584026415, 0.25908624594868346, 0.18748898992646879, 0.13387593436275524, 0.17551658371165235, 0.17025054768915493, 0.27092464957055584, 0.1448082941379646, 0.2989937175481213, 0.24038956659880328, 0.2451507082415374, 0.23417137544940014, 0.2734488461876111, 0.3143452876332452, 0.24416127581737102, 0.2075494646724697, 0.23598842627753092, 0.2141835276748867, 0.22426140139282724, 0.10628268621215242, 0.2544803133647836, 0.22275385937227143, 0.09311466540280722, 0.19974912442455428, 0.19581970486843114, 0.1900336338556472, 0.17683115169789598, 0.1541137490448815, 0.17245695583923648, 0.21726150918976328, 0.18416936746115609, 0.25426576598060924, 0.19058027711486392, 0.18052795629357354, 0.18412177809419716, 0.1830077728400662, 0.18643997919347943, 0.17566915722950505, 0.19361872639704036, 0.23463418589677065, 0.21129948144839905, 0.15654159764108666, 0.5953096711285285, 0.16786428320654012, 0.1730661581670836, 0.20096017233223318, 0.1997980744679697, 0.14666120724135434, 0.11519922818667905, 0.15419973834188527, 0.15629489316855705, 0.11264498240566989, 0.5765047001030676, 0.514241018439307, 0.15489664005670178, 0.21255347035968897, 0.1123735029836731, 0.1480327738995686, 0.42493476916836304, 0.19408506358602629, 0.18691222430149013, 0.19951534669018223, 0.22684571189754987, 0.2102370968152365, 0.23320742274430106, 0.21816998165087298, 0.21482536180317002, 0.2007695883316548, 0.07007248955020517, 0.051824891590219524, 0.0926932374081405, 0.12982229562710546, 0.09412344264969474, 0.06263013115602556, 0.05689155940079804, 0.1085893082207513, 0.04201187969682285]}, "mutation_prompt": null}
{"id": "0cb6e42b-9320-4032-88dd-42a1a2667c4d", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "5eff35ea-9e94-4064-ae0e-c001d2f271ad", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random(self.dim) * (particles[i] - particles[i])\n                    social_component = np.random.random(self.dim) * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Removed redundant random number generation for cognitive and social components to improve efficiency.", "configspace": "", "generation": 69, "fitness": 0.21507312796868885, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.78563220768702, 0.935833600440563, 0.7998035615255836, 0.7905764159110242, 0.4269570280377073, 0.4339948990785162, 0.43465321599318185, 0.7479606045063919, 0.4460606859081314, 0.0, 0.060846373126668185, 0.03549939398050306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10708887168602976, 0.036944173842593186, 0.11492721856331123, 0.1356956440110083, 0.03936598543489489, 0.06300821962687042, 0.05129250441326716, 0.0568295958759516, 0.0661744059819761, 0.0643761415095574, 0.09312552525849627, 0.05872552134105191, 0.1270398349713412, 0.06948776404580459, 0.06256006676041348, 0.07258738543633902, 0.16478176743347261, 0.008848118094458401, 0.9929473757042914, 0.9930359929056546, 0.9959677796045792, 0.9912854230235244, 0.9913542727428077, 0.9841456109588841, 0.9901064774446483, 0.9946077657833313, 0.9881570155982725, 0.31299264505940627, 0.29058353911938894, 0.2753196773657477, 0.2928774977340838, 0.31918006413392064, 0.3825257659074758, 0.3165484090375026, 0.3098384106456209, 0.28750623148916, 0.22596561033472107, 0.13000864281614755, 0.22908866227570768, 0.35170025604896504, 0.25573928515750766, 0.14288278091971351, 0.14806345427374912, 0.1511625158426212, 0.36572369901224056, 0.13491325774869345, 0.14350338487429293, 0.18858921452110855, 0.1643558220735034, 0.15222293673756482, 0.11750424636280188, 0.15972732008072488, 0.11937705336021176, 0.20404720668776566, 0.21041505955205797, 0.11193196290574614, 0.16569935508614853, 0.29547023114568316, 0.1764279220906836, 0.18393412575796142, 0.18632013009126935, 0.10543943196077776, 0.20912667229923698, 0.0, 0.0, 0.0, 0.0, 0.019172782261010823, 0.0, 0.013481642699726959, 0.010675737993665058, 0.004192163889023659, 0.024776248192106665, 0.0037232732877903185, 0.11726156427415935, 0.09780978929764328, 0.04709774099310449, 0.0, 0.04829619452199474, 0.0067127418957461105, 0.07973388771757617, 0.0, 0.0, 0.0, 0.08510736480289505, 0.08470859129281894, 0.1280824471870492, 0.0, 0.07973878717975036, 0.0, 0.04738212380558382, 0.08795451490777617, 0.04465348694238602, 0.06254461557421132, 0.007183778572395161, 0.03936752936012422, 0.05187857945570229, 0.05599089857300765, 0.08479340466175922, 0.47877347412194593, 0.3624029524976786, 0.5022137642657909, 0.3957391096209769, 0.45711439313433355, 0.4272827234303309, 0.46524397205688095, 0.383708950154219, 0.43960388154919816, 0.05971846129662206, 0.04458764799891801, 0.10739402534992515, 0.11245480689563103, 0.1188643975464373, 0.09498221721785993, 0.061818729561739394, 0.15548512675675552, 0.06580313923663017, 0.27539627221416574, 0.2912494465042681, 0.14972827350074136, 0.29587031790748086, 0.1979121858402093, 0.2590862459486867, 0.18748898992645124, 0.13387593436272238, 0.17551658371164192, 0.17025054768915726, 0.2709246495705566, 0.1448082941379646, 0.29899371754812243, 0.24038956659880628, 0.24515070824153995, 0.2341713754493323, 0.273448846187613, 0.3143452876332532, 0.24416127581737035, 0.20754946467248825, 0.23598842627752503, 0.21418352767488835, 0.22426140139282724, 0.10628268621217396, 0.25448031336476484, 0.22275385937227843, 0.093114665402796, 0.19974912442451442, 0.1958197048684387, 0.19003363385564553, 0.17683115169790575, 0.1541137490448813, 0.17245695583923804, 0.21726150918976728, 0.18416936746115609, 0.2542657659806078, 0.19058027711486392, 0.18052795629357354, 0.18412177809419716, 0.18300777284006597, 0.18643997919347943, 0.17566915722950505, 0.19361872639704036, 0.2346341858967691, 0.21129948144839905, 0.15654159764108666, 0.5953096711285285, 0.16786428320654012, 0.1730661581670836, 0.20096017233223318, 0.1997980744679697, 0.14666120724135434, 0.11519922818667905, 0.15419973834188527, 0.15629489316855705, 0.11264498240566989, 0.5765047001030676, 0.5142410184393054, 0.15489664005670178, 0.21255347035968897, 0.1123735029836731, 0.1480327738995686, 0.4249347691683567, 0.19408506358602684, 0.18691222430147358, 0.19951534669018212, 0.22684571189758185, 0.21023709681515979, 0.23320742274430106, 0.21816998165086554, 0.21482536180318967, 0.20076958833150804, 0.07007248955020517, 0.05182489159021986, 0.0926932374081405, 0.12982229562710546, 0.0941234426496943, 0.06263013115602556, 0.05689155940079804, 0.1085893082207513, 0.04201187969682285]}, "mutation_prompt": null}
{"id": "36408a1f-18be-4c0e-820a-51998052d1fb", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "2e62f23c-b9be-43c7-bcdb-53b3e9e0bdb6", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_social = alpha * ((random_cognitive[i] - random_social[i]) * best_solution - particles[i])\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()\n", "name": "Enhanced_PSO_SA_Optimizer", "description": "Improved velocity update calculation and simplified particle movement for better efficiency.", "configspace": "", "generation": 71, "fitness": 0.19384636087970344, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.4154652980127641, 0.4081888863677562, 0.40872673619996447, 0.4066972262852573, 0.40632911586276077, 0.4412021442910299, 0.419722597919285, 0.4153503068455029, 0.40523119626409465, 0.0, 0.022752476518847153, 0.01722973820633833, 0.0, 0.0, 0.0, 0.0, 0.060198565750238076, 0.0, 0.06353770086605093, 0.04326197015250799, 0.08136171558097904, 0.03873921220508125, 0.07942189343587269, 0.06750315352557423, 0.038849001939250005, 0.04452916521591577, 0.03259102280820314, 0.0568293177401169, 0.05442424736025564, 0.051883456841569364, 0.07983667701987762, 0.03589437777267779, 0.041533617795884825, 0.08309940252135983, 0.06666914911988697, 0.05487737431815387, 0.8355179948926739, 0.8076101145841283, 0.8514593794140002, 0.8516503425811148, 0.8239936519462516, 0.8336603392096623, 0.811395614277273, 0.8255131010851304, 0.8458646759409405, 0.3187469667388292, 0.288743377534729, 0.295056582860024, 0.2956833762934723, 0.2958863007852758, 0.3260327481190556, 0.27871694305455585, 0.31074451299820627, 0.301388067909953, 0.26357757227074086, 0.21353934757429238, 0.21908072726203587, 0.3229389979759484, 0.19715142926203133, 0.2351141208812566, 0.1093474207266314, 0.15941038411587682, 0.2232585341534079, 0.16233454854697882, 0.17408223863979733, 0.1818487604888549, 0.13630191547058168, 0.14457760787883012, 0.17977719775792833, 0.1276056834597542, 0.13452607775944603, 0.17667798424172032, 0.19712026337001143, 0.2318823544353209, 0.1835847446342308, 0.21630333997821116, 0.2050383297540972, 0.1520764112232209, 0.20009250095281894, 0.17825467595221833, 0.2150366599837671, 0.0, 0.0, 0.0, 0.061728817427239346, 0.028531663050975986, 0.0, 0.006962912994205928, 0.0027139929055034484, 0.038296653433167016, 0.019249589656763932, 0.026120687399218356, 0.05418521468887061, 0.05955171886384014, 0.07003782385583779, 0.05763393359504021, 0.04423909172004237, 0.16765469656017062, 0.06400253748803475, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07281791121003356, 0.07308148681429505, 0.0878800009353965, 0.052500723527737825, 0.11196410967032877, 0.11096776909777417, 0.07024009995077685, 0.11507099803739951, 0.07492664776253499, 0.38487991957411993, 0.38729232329239716, 0.36761050685589236, 0.3968822621370113, 0.3756688102099097, 0.37814715934951204, 0.38650892237171, 0.38701455872857904, 0.3897600143579353, 0.016411314638867913, 0.05063670978614576, 0.042038897156391974, 0.029486551780968928, 0.034544913932510246, 0.07001754001339944, 0.02995106918490331, 0.014088497464686767, 0.06690858304226788, 0.251705941539517, 0.17960603559825372, 0.14224731122702272, 0.17841342529629367, 0.3659334691220485, 0.18262133798207758, 0.2892854153742177, 0.180822769941815, 0.18072232258490695, 0.13241219443897867, 0.2902922383899482, 0.145134597095117, 0.32928583431169556, 0.21404149378177617, 0.23753053213926012, 0.16092002956706453, 0.24076912137893758, 0.17698152782684518, 0.10943111040325426, 0.09857291160066484, 0.11123346654893507, 0.15143424270454542, 0.22584879340842956, 0.16934276798383285, 0.09672892584884318, 0.12405911354594701, 0.14879398502067032, 0.23587010105431105, 0.23394660365628173, 0.24403861476149247, 0.3276611591443125, 0.23698174391553728, 0.2678549519401028, 0.2669838403963056, 0.18160950484717864, 0.2518079189853304, 0.1745090653076644, 0.17874427155241102, 0.1664452812198377, 0.19136777159990637, 0.1711889247652536, 0.17090075764891388, 0.1689601822299357, 0.17034915068723278, 0.16338115516442064, 0.18125816043021825, 0.17038224229938392, 0.1730656946749175, 0.14846986094993686, 0.6301212907630172, 0.11379284242666254, 0.07744226474800853, 0.16385587209876462, 0.2024901163758288, 0.5765099746381687, 0.5552024571028475, 0.5422146124780093, 0.6026318281941132, 0.1605579732417307, 0.14663110169540472, 0.1617293163890008, 0.4683255003234713, 0.16346500602430292, 0.2173556552856326, 0.183822206875617, 0.17636988100278905, 0.17902596949159777, 0.18554877391713975, 0.19110853980197995, 0.17407519616363676, 0.1566932846031246, 0.18672280575590472, 0.08148083459623445, 0.08414613995825515, 0.06073048306079565, 0.07204935638257626, 0.07624033607862857, 0.06312020069470747, 0.06245007060620411, 0.05481269179682535, 0.05179519731244342]}, "mutation_prompt": null}
{"id": "b78c5a88-a10b-4577-865a-ed9600a16ffd", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Reduced redundant random function calls by generating them outside the loops.", "configspace": "", "generation": 72, "fitness": 0.21963802834318738, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "bebfe3d0-35ef-4c10-b893-95bbc7ba41cc", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "b31d582d-1c5d-4ce0-b421-07b9fee36b24", "solution": "import numpy as np\n\nclass Enhanced_Optimized_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()\n", "name": "Enhanced_Optimized_PSO_SA_Optimizer_V3", "description": "Reduced unnecessary random initialization calls by precomputing random values once.", "configspace": "", "generation": 74, "fitness": 0.21963802834318738, "feedback": "The algorithm Enhanced_Optimized_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "bb431469-6b57-43d2-b719-f639509aa2fa", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Removed redundant random initialization of `random_cognitive` and `random_social` arrays by generating them only once outside the loop.", "configspace": "", "generation": 75, "fitness": 0.21963802834318738, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "91217882-f25a-4370-8c3b-9f47f8c4ea86", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    random_cognitive_i = random_cognitive[i]\n                    random_social_i = random_social[i]\n\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive_i * (particles[i] - particles[i])\n                    social_component = random_social_i * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Reduced the number of random calls by generating random values only once per iteration in the main loop.", "configspace": "", "generation": 76, "fitness": 0.21963802834318738, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "1f1688fc-9392-4d5c-be9a-74be5c21a7be", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "b4cfeede-98c1-4ffe-9a7c-d17119e2d3ed", "solution": "import numpy as np\n\nclass Vectorized_Optimized_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                fitness = np.apply_along_axis(objective_function, 1, particles)\n                better_results = fitness < best_fitness\n                best_solution = np.where(better_results, particles, best_solution)\n                best_fitness = np.minimum(fitness, best_fitness)\n\n                cognitive_component = random_cognitive * (particles[:, None] - particles[:, None])\n                social_component = random_social * (best_solution[:, None] - particles[:, None])\n                cognitive_social = alpha * (cognitive_component + social_component)\n                velocities = inertia_weight * velocities + cognitive_social\n                particles = np.clip(particles + velocities, bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution[np.argmin(best_fitness)]\n            current_fitness = np.min(best_fitness)\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Vectorized_Optimized_PSO_SA_Optimizer", "description": "Improved efficiency by vectorizing the particle updates and removing redundant array initializations.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (10,) (10,5) () ').", "error": "ValueError('operands could not be broadcast together with shapes (10,) (10,5) () ')", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {}, "mutation_prompt": null}
{"id": "5342be7f-febe-46ea-9521-87098ed7b4c1", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "020fb782-7927-45ba-8738-f0304a523616", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "d28765d7-4a93-4561-a24c-a6241ac6ad60", "solution": "import numpy as np\n\nclass Vectorized_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                fitness_values = np.array([objective_function(p) for p in particles])\n                min_fitness_index = np.argmin(fitness_values)\n                if fitness_values[min_fitness_index] < best_fitness:\n                    best_solution = particles[min_fitness_index].copy()\n                    best_fitness = fitness_values[min_fitness_index]\n\n                cognitive_component = np.multiply(random_cognitive, particles - particles)\n                social_component = np.multiply(random_social, best_solution - particles)\n                cognitive_social = alpha * (cognitive_component + social_component)\n                velocities = inertia_weight * velocities + cognitive_social\n                particles = np.clip(particles + velocities, bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Vectorized_PSO_SA_Optimizer", "description": "Improved the velocity update calculation by vectorizing the computation to enhance efficiency and performance.", "configspace": "", "generation": 81, "fitness": 0.21524474813915392, "feedback": "The algorithm Vectorized_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.4476868278405828, 0.604160140754205, 0.7329003163248029, 0.4253799341950184, 0.43397258910142866, 0.42340883808322083, 0.4324986754908696, 0.7646579153797485, 0.47795797012783714, 0.06597733861010524, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14886512521417572, 0.07453891842801641, 0.07564159161390094, 0.09151551922462131, 0.08372534749321492, 0.07322395530805281, 0.11921677845575451, 0.07148413899435291, 0.05258280611794475, 0.0645195057537381, 0.08350415631622221, 0.05620773931603684, 0.11338823126249076, 0.038378858451641684, 0.06391850671717692, 0.07553054205163134, 0.11928313652502165, 0.07268244738917673, 0.9917226039674212, 0.9897339926200182, 0.9954421306119557, 0.9940479943007182, 0.9943764181599057, 0.9909495459108096, 0.7958609230012568, 0.9909410624261259, 0.23006358120199133, 0.2784006536441761, 0.32004228967481274, 0.29708012358446667, 0.3066060198534247, 0.28998798932580505, 0.3098524147674072, 0.32678922403370636, 0.2886545318405028, 0.31503193782753736, 0.21906123727227444, 0.15946466100241063, 0.14038245821553286, 0.2668265506336023, 0.3097669236002666, 0.21365201996140604, 0.10760181647256672, 0.21670053371650233, 0.31405777656625666, 0.15646354623410008, 0.15948641056715063, 0.1329220602794816, 0.11994986577377964, 0.12761302011656772, 0.14756984889199554, 0.11898537499859252, 0.18317192898866208, 0.19501762584840887, 0.2158989248804679, 0.13737168663546329, 0.37064485781162926, 0.1922121834408974, 0.12999775371936417, 0.15676477450890558, 0.17784779462854783, 0.10838974971350157, 0.20197339249245327, 0.0, 0.0, 0.0, 0.0, 0.04569701441915808, 0.0, 0.0, 0.0, 0.0, 0.11272159725300879, 0.032178447659678255, 0.055161612654109904, 0.07808562624833071, 0.02570190581274079, 0.006303728548477605, 0.05057676974189673, 0.018300975408191644, 0.023642078626345042, 0.0, 0.0, 0.08786953938749575, 0.11347041691525861, 0.1456626686616237, 0.08549018053241997, 0.0, 0.11451744179055845, 0.1584091798920153, 0.052689903997647725, 0.12006763572675516, 0.044522300473328724, 0.0571822756263628, 0.04057318108793573, 0.05293260248170295, 0.05259932075957563, 0.07733909868092836, 0.08591744043316052, 0.45627273866418194, 0.4271915378637805, 0.4647845792721429, 0.39727369906280363, 0.4076450235829244, 0.3682483432032686, 0.485611099754363, 0.45162404374130194, 0.47515793653111027, 0.055159829426008944, 0.07026537801135235, 0.056962483720315316, 0.16240608726752193, 0.0671009111252111, 0.06192505387449965, 0.1204256680918061, 0.09369883187273298, 0.07841276880451764, 0.25945597664252373, 0.17459812979672495, 0.17180175556199062, 0.24137202446266115, 0.277196164351172, 0.28664623269988165, 0.2971994278431219, 0.2382912117437912, 0.22574764249176005, 0.14021004270150839, 0.18039081290080106, 0.20125485296040757, 0.2905882119888451, 0.1536879481001333, 0.18989121915886165, 0.22794667816031222, 0.22311803918759576, 0.2992253857970585, 0.1333112648530248, 0.0697907134548248, 0.07991270602652034, 0.23496212698143948, 0.09481131049454705, 0.21954645688071794, 0.14774949468631426, 0.13405520181042396, 0.11283914885748436, 0.2010861115977396, 0.1614562431730443, 0.20094352402587667, 0.16539832771195762, 0.1505312218668392, 0.17402995692904533, 0.23697303766547562, 0.23707860804982406, 0.1824493744420702, 0.19100924911095696, 0.2114825234692871, 0.1860801010335994, 0.1780813113486085, 0.206961975833313, 0.20200767135111342, 0.1816008594512274, 0.19625542358245118, 0.1747769903419899, 0.6114154895304287, 0.9653591267868908, 0.13714975445435595, 0.8332304502129068, 0.2015206851468212, 0.20101647581992277, 0.16879723464561158, 0.165959225885985, 0.16856943501192234, 0.5576968012686345, 0.11122648058109841, 0.6667529204387588, 0.5519793588627713, 0.153803722843888, 0.21377174873594107, 0.39421689403679916, 0.10496342206199949, 0.45709380824267976, 0.19346831969931577, 0.1853530789560356, 0.1947134059859501, 0.20274328246219298, 0.20106504963345628, 0.2041535629446638, 0.24498730739718577, 0.23806236025609095, 0.24468523531631925, 0.10243342355052243, 0.10176999465330705, 0.09928250342073985, 0.08393390403724299, 0.09069966448806899, 0.05218208276606695, 0.08489047272954231, 0.08054849504671113, 0.06960270761518117]}, "mutation_prompt": null}
{"id": "e6e4caed-18b9-4551-9464-690fcfe42b4e", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n\n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                fitness = np.apply_along_axis(objective_function, 1, particles)\n                personal_best_mask = fitness < best_fitness\n                best_solution = np.where(personal_best_mask, particles, best_solution)\n                best_fitness = np.where(personal_best_mask, fitness, best_fitness)\n\n                cognitive_component = random_cognitive * (particles - particles[:, np.newaxis])\n                social_component = random_social * (best_solution - particles)\n                cognitive_social = alpha * (cognitive_component + social_component)\n                velocities = inertia_weight * velocities + cognitive_social\n                particles = np.clip(particles + velocities, bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, (n_particles, self.dim)), bounds[0], bounds[1])\n                    candidate_fitness = np.apply_along_axis(objective_function, 1, candidate_solution)\n\n                    improvement_mask = candidate_fitness < current_fitness\n                    acceptance_probability = np.exp((current_fitness - candidate_fitness) / T)\n                    random_values = np.random.rand(n_particles)\n                    accept_mask = random_values < acceptance_probability\n\n                    current_solution = np.where(improvement_mask | accept_mask[:, np.newaxis], candidate_solution, current_solution)\n                    current_fitness = np.where(improvement_mask | accept_mask, candidate_fitness, current_fitness)\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Improved_PSO_SA_Optimizer", "description": "Improved the PSO-SA hybrid optimization algorithm by vectorizing the particle updates to enhance computational efficiency.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (10,) (10,5) () ').", "error": "ValueError('operands could not be broadcast together with shapes (10,) (10,5) () ')", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {}, "mutation_prompt": null}
{"id": "1ce717a5-d0e0-45ef-a6ed-cf2b8bb9d08c", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()\n", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Improved PSO with Simulated Annealing by reducing redundant random calculations and optimizing loop structures.", "configspace": "", "generation": 83, "fitness": 0.21963802834318738, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "90a2d712-b9cd-41bd-8853-e8a2eadfc3d0", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] += velocities[i]\n                    particles[i] = np.clip(particles[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Improved velocity update calculation and convergence criterion for faster convergence and better performance.", "configspace": "", "generation": 84, "fitness": 0.21963802834318738, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "e96070d4-176e-43c7-b756-912af0a8b70e", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            random_component = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Reduced redundancy in random component calculation by precalculating and reusing them within the loop.", "configspace": "", "generation": 85, "fitness": 0.21715226299877008, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4241131824302341, 0.5523576629747265, 0.4328339344469406, 0.40645730765748456, 0.4820316091940202, 0.7257089479797278, 0.148238511650727, 0.0, 0.1397614393573936, 0.09854297477234719, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14620448300631705, 0.16614219871264957, 0.06280034993730077, 0.12853554326515404, 0.07145749265303292, 0.04681940485613412, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08175064189702674, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.047172584739737844, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7969121013284086, 0.9881307813786347, 0.9697240922293513, 0.35268053554093814, 0.2812493234470418, 0.3167942184618159, 0.30373189204474615, 0.30957487781736404, 0.3120867793010974, 0.290661532070953, 0.29739654580427144, 0.32795867670460777, 0.34421741371228565, 0.13239849899779688, 0.22967306955692435, 0.18338425526108693, 0.2725985307614308, 0.2168932499973264, 0.20877799337924885, 0.22342106821806484, 0.22803247945090477, 0.1469660651263195, 0.19441925782054104, 0.18671689641318523, 0.13526912764739185, 0.11813327155714792, 0.17928409011772362, 0.11925510177722554, 0.18229018177388479, 0.1744907028355317, 0.13268433651560696, 0.20094370778957804, 0.1783792700038861, 0.13546333522128062, 0.17471821730251758, 0.18397849508823527, 0.13048599846228026, 0.1418248415234088, 0.184212513752403, 0.0, 0.0, 0.0, 0.1029416163609671, 0.011149230072471594, 0.0, 0.0, 0.0, 0.0, 0.027045655914745503, 0.0248220804805227, 0.052015876285602225, 0.0683350572621152, 0.022338628947229155, 0.003751093420656826, 0.05201842173400695, 0.02061091349603461, 0.015290461905644204, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.07629569575851713, 0.20763017841792575, 0.16202819343266706, 0.05270070693255802, 0.06011436032825368, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.43955773210812965, 0.42603625189950023, 0.5281149870251198, 0.41395274812231997, 0.47325224831589585, 0.02739861277430322, 0.07559889707108836, 0.06854451051312682, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20138719554366002, 0.16942740347326468, 0.18163240382374446, 0.31216387576832316, 0.15719534948038494, 0.23638755132556566, 0.25610908152899314, 0.1641687855524906, 0.21122377238861367, 0.24746533387987724, 0.28328340732462043, 0.17937026828880898, 0.21533951513477645, 0.23301036112714135, 0.3522593871398194, 0.22694365264855643, 0.23672003582575896, 0.17304110036858988, 0.21790518446621154, 0.1806271990413454, 0.10518715341060547, 0.22009477701157354, 0.10569364583917851, 0.19676357123620714, 0.1859335939440715, 0.13621037601490515, 0.17680573588718274, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.25466289861127267, 0.17189397401266693, 0.32613737805170717, 0.1840914822692925, 0.2021063089309577, 0.1903800977301915, 0.21800096764502175, 0.2567957920319368, 0.17567710662921965, 0.18829577550847487, 0.18775733609903178, 0.15582583787894977, 0.6701986159732337, 0.1352404654278504, 0.580160060827495, 0.20145740260043454, 0.14865177670391128, 0.16799441785525127, 0.16620217155583672, 0.15356201605149267, 0.08264912179524109, 0.11202975707496243, 0.46759381024268243, 0.35126568782870327, 0.10518488231654988, 0.21354043532784495, 0.11212354742861719, 0.09483053372221983, 0.49671102078098195, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.1800701813056903, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "3e8f253b-5e28-4a0a-af41-362069aecead", "solution": "# import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            random_values = np.random.random((max_iterations_pso, n_particles, self.dim))\n            normal_values = np.random.normal(0, sigma, (max_iterations_sa, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            for i in range(max_iterations_pso):\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + normal_values[_], bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or random_values[i][_] < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                    T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Reduced the number of random number generations by pre-generating them outside the loop.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {}, "mutation_prompt": null}
{"id": "eece1e44-53ca-4036-8f9a-0832a1cd1797", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "490c43ef-0838-4406-8fe7-860e5167a070", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = alpha * np.random.random(self.dim) * (particles[i] - particles[i])\n                    social_component = alpha * np.random.random(self.dim) * (best_solution - particles[i])\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Streamlined the velocity update calculation by removing redundant random variable calculations and directly calculating the cognitive and social components.", "configspace": "", "generation": 88, "fitness": 0.2150731279642011, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.7856322076866629, 0.9358336004408181, 0.7998035615257837, 0.7905764159111637, 0.42695702803770597, 0.43399489907851374, 0.43465321599318063, 0.7479606045064592, 0.44606068590812853, 0.0, 0.060846373126670406, 0.035499393980489735, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10708887168602998, 0.036944173842593186, 0.11492721856331167, 0.1356956440110083, 0.03936598543489467, 0.06300821962687042, 0.05129250441326716, 0.0568295958759516, 0.0661744059819761, 0.06437614150955728, 0.09312552525849627, 0.05872552134105191, 0.1270398349713412, 0.06948776404580459, 0.06256006676041348, 0.07258738543633902, 0.1647817674334725, 0.008848118094458401, 0.9929473757042914, 0.9930359929056546, 0.9959677796045792, 0.9912854230235244, 0.9913542727428077, 0.9841456109588841, 0.9901064774446483, 0.9946077657833313, 0.9881570155982725, 0.3129926450594045, 0.2905835391193885, 0.2753196773657475, 0.29287749773408445, 0.31918006413392064, 0.3825257659074761, 0.3165484090374924, 0.3098384106456217, 0.28750623148918175, 0.22596561033472107, 0.13000864281614755, 0.22908866227570768, 0.35170025604896504, 0.25573928515750766, 0.14288278091971351, 0.14806345427374912, 0.1511625158426212, 0.36572369901224056, 0.13491325774869345, 0.1435033848742927, 0.18858921452111288, 0.1643558220735042, 0.1522229367375647, 0.11750424636280166, 0.15972732008072488, 0.11937705336021176, 0.20404720668776555, 0.21041505955205797, 0.1119319619357142, 0.1656993550861483, 0.29547023114568305, 0.1764279220906827, 0.18393412575796153, 0.18632013009126946, 0.10543943196077776, 0.20912667229923754, 0.0, 0.0, 0.0, 0.0, 0.019172782261017485, 0.0, 0.013481642699726737, 0.010675737993664502, 0.0041921638890261015, 0.024776248192106665, 0.0037232732877903185, 0.11726156427415657, 0.09780978929764372, 0.04709774099310449, 0.0, 0.048296194521995184, 0.0067127418957461105, 0.07973388771757617, 0.0, 0.0, 0.0, 0.08510736480289527, 0.08470859129281894, 0.12808244718704886, 0.0, 0.07973878717975025, 0.0, 0.0473821238055836, 0.08795451490777573, 0.0446534869423858, 0.06254461557421165, 0.007183778572395161, 0.039367529360124665, 0.05187857945570218, 0.055990898573009096, 0.08479340466175966, 0.47877347412194626, 0.3624029524976813, 0.5022137642657923, 0.395739109620976, 0.45711439313433255, 0.4272827234303309, 0.4652439720568796, 0.38370895015421347, 0.4396038815491403, 0.05971846129662206, 0.04458764799891801, 0.10739402534992426, 0.11245480689563103, 0.11886439754643652, 0.09498221721785993, 0.061818729561739394, 0.15548512675675485, 0.06580313923663017, 0.27539627221417495, 0.29124944650431894, 0.14972827350074203, 0.29587031790748075, 0.19791218584026415, 0.25908624594868346, 0.18748898992646879, 0.13387593436275524, 0.17551658371165235, 0.17025054768915493, 0.27092464957055584, 0.1448082941379646, 0.2989937175481213, 0.24038956659880328, 0.2451507082415374, 0.23417137544940014, 0.2734488461876111, 0.3143452876332452, 0.24416127581737102, 0.2075494646724697, 0.23598842627753092, 0.2141835276748867, 0.22426140139282724, 0.10628268621215242, 0.2544803133647836, 0.22275385937227143, 0.09311466540280722, 0.19974912442455428, 0.19581970486843114, 0.1900336338556472, 0.17683115169789598, 0.1541137490448815, 0.17245695583923648, 0.21726150918976328, 0.18416936746115609, 0.25426576598060924, 0.19058027711486392, 0.18052795629357354, 0.18412177809419716, 0.1830077728400662, 0.18643997919347943, 0.17566915722950505, 0.19361872639704036, 0.23463418589677065, 0.21129948144839905, 0.15654159764108666, 0.5953096711285285, 0.16786428320654012, 0.1730661581670836, 0.20096017233223318, 0.1997980744679697, 0.14666120724135434, 0.11519922818667905, 0.15419973834188527, 0.15629489316855705, 0.11264498240566989, 0.5765047001030676, 0.514241018439307, 0.15489664005670178, 0.21255347035968897, 0.1123735029836731, 0.1480327738995686, 0.42493476916836304, 0.19408506358602629, 0.18691222430149013, 0.19951534669018223, 0.22684571189754987, 0.2102370968152365, 0.23320742274430106, 0.21816998165087298, 0.21482536180317002, 0.2007695883316548, 0.07007248955020517, 0.051824891590219524, 0.0926932374081405, 0.12982229562710546, 0.09412344264969474, 0.06263013115602556, 0.05689155940079804, 0.1085893082207513, 0.04201187969682285]}, "mutation_prompt": null}
{"id": "1308ce32-33f0-4316-83e6-4f91eb3c6c40", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_social = alpha * ((random_cognitive[i] - random_social[i]) * (best_solution - particles[i]))\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Efficiently handle particle updates and avoid unnecessary variable calculations for improved performance.", "configspace": "", "generation": 89, "fitness": 0.16042299736009782, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.4027377884483764, 0.4010002343691097, 0.4131202909890255, 0.3912834401325326, 0.4182745211075879, 0.41229237482292047, 0.41273974464747754, 0.410259899156026, 0.3937669956469577, 0.0, 0.0, 0.0, 0.0025399699940528153, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03637330193625132, 0.04326197015250799, 0.0471355262095442, 0.018273328785441523, 0.012892909455162638, 0.04175030621129694, 0.038849001939250005, 0.03184726564302687, 0.03370302190798724, 0.030589644926862114, 0.0, 0.03117179476790677, 0.07820821465645089, 0.0, 0.03619737599877659, 0.020262466882407848, 0.016546361061947734, 0.01879972514681616, 0.16239270930715188, 0.988286680650521, 0.8181739917286774, 0.7673848973074966, 0.9904750212307226, 0.9795140608832744, 0.8416970133111081, 0.7656995935767483, 0.9867204818573333, 0.31249468189191265, 0.27182102210079373, 0.27032520913022795, 0.3006034156195656, 0.3408578384820412, 0.30786960660572293, 0.255951576636806, 0.31074451299820627, 0.2970662969369694, 0.3462459168246751, 0.12115230816932931, 0.2153888134958668, 0.3581294244813171, 0.053724391789042425, 0.057952317841979295, 0.19541750987875872, 0.15812373044355776, 0.1659148805062327, 0.13379756237583262, 0.11399110988730554, 0.11781089184979243, 0.11708281843071766, 0.0932449487740854, 0.16029947701985126, 0.15250093349445593, 0.10623319212189986, 0.21349187087339228, 0.1551278270997234, 0.12103292030101365, 0.1704361385941613, 0.1659737737857484, 0.18268358013210106, 0.18104219305608493, 0.21162068765417974, 0.1598570297328693, 0.12184937605191681, 0.0, 0.0, 0.0, 0.060905272326280624, 0.0, 0.0, 0.0, 0.0662723161487454, 0.0, 0.04636280415188487, 0.027416878433740965, 0.060803817339987076, 0.05955171886384014, 0.0, 0.003755856981823902, 0.03359161725359827, 0.021987969250213624, 0.007922930828743513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07281791121003356, 0.047898129495316244, 0.062293549506865054, 0.09094603334494555, 0.04923016441004113, 0.09255391199799812, 0.112863137777382, 0.08214638281190711, 0.09292765928410807, 0.3938798578131165, 0.3839228877431742, 0.3856541439696135, 0.374570337435741, 0.39272159792253336, 0.39812934824391455, 0.37462716436884713, 0.4161333559982585, 0.4180866829389184, 0.016411314638867913, 0.036079696048257226, 0.046378452671332115, 0.020960507718093546, 0.01311796681743893, 0.07001754001339944, 0.035716557539993254, 0.014441267931505908, 0.03344277633771331, 0.16276490023674228, 0.16376422033334037, 0.12719706596581348, 0.26999174075960986, 0.1788677581647895, 0.0982478136615591, 0.14094208259794483, 0.20657477032394167, 0.2877679044100744, 0.16433435153810716, 0.15117089189651667, 0.11709148549019954, 0.17515199149572003, 0.12180173077861911, 0.13894161422099238, 0.2548747770971228, 0.11276849246466791, 0.2032843776768758, 0.0564742757415756, 0.0830728808960024, 0.05292536496882094, 0.0977529985548925, 0.0876672751633818, 0.10293424504076143, 0.19542971523603225, 0.09169447320653745, 0.07069139578037464, 0.1609536815515492, 0.127465481705626, 0.23745808948389313, 0.1311059791616903, 0.21433969072557413, 0.14099162607409965, 0.1911040572906353, 0.13700732833173168, 0.14637276076383987, 0.1490102978631339, 0.1584401553995558, 0.19186058723251354, 0.16579002514120056, 0.17104396713734604, 0.1546491678312334, 0.1782669474329599, 0.22304718054174133, 0.17683588080771928, 0.10463321212024823, 0.11146870518776197, 0.12835424687571306, 0.17144346926332077, 0.19395484415083275, 0.10574479808350301, 0.11387600192322533, 0.15411608772651475, 0.16090193511421236, 0.07938256224396134, 0.10594019043776903, 0.06401926777060762, 0.14498341290760763, 0.1468427505788099, 0.10286644048329285, 0.10022682565714891, 0.08825620583179572, 0.1083288866669635, 0.18072207638830806, 0.18613010614323822, 0.19339437560311368, 0.1785134476533633, 0.19202150089896153, 0.20753022372685825, 0.16405266268210184, 0.19189944094945166, 0.1860677650732191, 0.024677969519638077, 0.039256246201309075, 0.05644971772695917, 0.06647101757000329, 0.05327652105082903, 0.034682146772594624, 0.031992768699255936, 0.035279201091524603, 0.04506567334500866]}, "mutation_prompt": null}
{"id": "3617e55b-5709-4cdd-b9de-97d764fd1cee", "solution": "import numpy as np\n\nclass Enhanced_Optimized_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_social = alpha * (random_cognitive[i] * (particles[i] - particles[i]) + random_social[i] * (best_solution - particles[i]))\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_Optimized_PSO_SA_Optimizer_V3", "description": "Improved the population update process by removing redundant calculations and optimizing loop operations.", "configspace": "", "generation": 90, "fitness": 0.21963802834318738, "feedback": "The algorithm Enhanced_Optimized_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "28e8bfb8-87ee-4ab5-a4b1-f166d4b80f23", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "fb5f6bc8-8a69-41a9-9fcd-3be73753773b", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "fe5c19f2-4628-483d-922e-1eac38378cf3", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V2", "description": "Updated the velocity update calculation to eliminate redundant calculations and streamline the process for better performance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "36594d41-0507-4ca0-bab6-f8e8e44ef296", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO with Simulated Annealing hybrid algorithm for global optimization with improved velocity update and temperature cooling schedule.", "configspace": "", "generation": 94, "fitness": 0.21963802834318738, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "f9591cf4-1fdd-4a87-a071-36c64e4df8ce", "solution": "import numpy as np\n\nclass Enhanced_Optimized_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_social = alpha * (random_cognitive[i] * (particles[i] - particles[i]) + random_social[i] * (best_solution - particles[i]))\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_Optimized_PSO_SA_Optimizer_V3", "description": "Optimized the velocity update calculation by removing redundant calculations, simplifying the velocity update process, and enhancing convergence speed.", "configspace": "", "generation": 95, "fitness": 0.21963802834318738, "feedback": "The algorithm Enhanced_Optimized_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "ac07064b-be31-4271-989c-6a0307a48390", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_social = alpha * (random_cognitive[i] * 0 + random_social[i] * (best_solution - particles[i]))\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Removed redundant calculations in the loop for updating particles' positions by simplifying the cognitive and social components calculations.", "configspace": "", "generation": 96, "fitness": 0.21963802834318738, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.6974273622089218, 0.7955247883114327, 0.6614552758304746, 0.4250945373442372, 0.5523576629747265, 0.42311942657575086, 0.4324820763895363, 0.4820316091940202, 0.7257089479797278, 0.14822333403152044, 0.0, 0.1397588689807553, 0.11248900427215958, 0.104403293120655, 0.0, 0.0, 0.0, 0.0, 0.14896762885527026, 0.14933391943376517, 0.16614219871264957, 0.06280034993730077, 0.1338638041687925, 0.07145749265303292, 0.04681723626374046, 0.10649285204194725, 0.09253400034852333, 0.06462296966591097, 0.04464564694431794, 0.08174472828558899, 0.11374476986188853, 0.02888095078192421, 0.0780891570445863, 0.051062470644906766, 0.13981132532767337, 0.06440013689518331, 0.9906722580141301, 0.989596564469296, 0.9943276305379286, 0.9929363019804195, 0.9951025655640261, 0.9902993734271698, 0.7958272452992254, 0.9881307813786347, 0.9697240922293513, 0.3021620033480784, 0.2813721575391306, 0.3088110886135471, 0.3029463547542035, 0.3398867080129192, 0.32708179942805693, 0.29734818318814804, 0.3194985027088568, 0.3140048217167719, 0.3688517596528782, 0.14578909948364094, 0.22967306955692435, 0.18082437512199923, 0.2780708606223059, 0.38266217004376823, 0.20606315666251185, 0.22718415122073088, 0.17664665039254412, 0.1469660651263195, 0.1975431197335743, 0.18692809505106844, 0.13526912764739185, 0.11618052458034567, 0.1769805214151573, 0.15254708409647377, 0.19234830743863618, 0.18352185729517656, 0.1326826605435163, 0.17678206275117048, 0.18343198777001923, 0.13546333522128062, 0.19693029217715918, 0.13181168763780549, 0.16843664300537442, 0.1418248415234088, 0.18420065584375334, 0.0, 0.03808011028678959, 0.0, 0.1029416163609671, 0.011143313619554118, 0.0, 0.0, 0.0, 0.0, 0.027039395574168124, 0.024817690238863377, 0.05201128192211468, 0.06833280650328744, 0.020070173720287854, 0.003747500420589689, 0.052013634922448704, 0.0206069047910733, 0.01846049771863323, 0.05433879539132613, 0.0, 0.0, 0.12348150120707702, 0.047180409208188445, 0.11744513487059727, 0.10972920577179446, 0.09330093982843812, 0.0, 0.16649010466999425, 0.16871439363638951, 0.04843557149775368, 0.11390561510183561, 0.20763017841792575, 0.16202819343266706, 0.052698737782263194, 0.0673444489229219, 0.0860852453704456, 0.4534957105233134, 0.43198097929627877, 0.481765552333119, 0.476663997416535, 0.4416353660226324, 0.4018087354535579, 0.5281149870251198, 0.4255875448176356, 0.47325224831589585, 0.02739861277430322, 0.08633145362033756, 0.09560556667212328, 0.07868810856918806, 0.0895050027273433, 0.06182370333198395, 0.05608849933630444, 0.12007500841765362, 0.10271927709034467, 0.20056384257400328, 0.17678207496728826, 0.1625069544980946, 0.27786384320629554, 0.15719534948038494, 0.2876499927013916, 0.23489153904423987, 0.1641687855524906, 0.2112565930492627, 0.2449376603048189, 0.29948696855955204, 0.17937026828880898, 0.2905828980752966, 0.23301036112714135, 0.3522593871398194, 0.2219984985679644, 0.23672003582575896, 0.17304110036858988, 0.23632030176773222, 0.1806271990413454, 0.10288011096907124, 0.20885267699243126, 0.10513059822992288, 0.19676357123620714, 0.20348865631635604, 0.15671407454804953, 0.1830619266605933, 0.20668216062568112, 0.14129265977404792, 0.18520065007446884, 0.19610131746685722, 0.18715349495854405, 0.20572283944202174, 0.2491636239312638, 0.2546574778659393, 0.17189397401266693, 0.2187037354818825, 0.1840914822692925, 0.22122811920120988, 0.20728949795146312, 0.21860562912796233, 0.2567957920319368, 0.18687296098872064, 0.18249939345955213, 0.18464764815200707, 0.155882515772507, 0.6657869505397134, 0.13507083299830813, 0.622192356593539, 0.20145740260043454, 0.14865177670391128, 0.16794640683582673, 0.1661396084593716, 0.15344106637880905, 0.08266336937315066, 0.11215952237064264, 0.5661084559761465, 0.4979739969177527, 0.10523289103032218, 0.21354043532784495, 0.11205872973401143, 0.09483053372221983, 0.3525315051271316, 0.21439069676578515, 0.2267634167405076, 0.19653999868274186, 0.2392194500983058, 0.20821709060824722, 0.20384339522785588, 0.18910805396634178, 0.21938472803974696, 0.18007012817968593, 0.08197906821822942, 0.08353698198199122, 0.09577078582812826, 0.085463058961878, 0.08106612851511397, 0.12346700837446789, 0.08585739154147631, 0.08976018765376759, 0.07553629653631855]}, "mutation_prompt": null}
{"id": "2d053949-d378-4c5e-9690-9080cd697b05", "solution": "import numpy as np\n\nclass Enhanced_Optimized_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weights = np.linspace(inertia_max, inertia_min, num=max_iterations_pso)\n\n            random_cognitive = np.random.random((n_particles, self.dim))\n            random_social = np.random.random((n_particles, self.dim))\n\n            for inertia_weight in inertia_weights:\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] += inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Enhanced_Optimized_PSO_SA_Optimizer", "description": "Optimized the velocity update calculation and streamlined the process by reducing redundant calculations and vectorized operations.", "configspace": "", "generation": 97, "fitness": 0.18106327953286516, "feedback": "The algorithm Enhanced_Optimized_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.43262868183210246, 0.4102717129770118, 0.42344161886041165, 0.39691535251001264, 0.40852510582302315, 0.4161356841985213, 0.41960633877668285, 0.43323351638280194, 0.4125544354001175, 0.055779745507808176, 0.026598838521243673, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08452896749588801, 0.04326197015250799, 0.03392561145025752, 0.0377027632927297, 0.012892909455162638, 0.03545327540031107, 0.038849001939250005, 0.05224488179645814, 0.06606170307389114, 0.04266102388079018, 0.002667312333722971, 0.0, 0.10842620823975735, 0.005560911382150313, 0.0, 0.03965732658603305, 0.0249515750990289, 0.0, 0.9945751628032056, 0.9924846173096529, 0.9952888630458359, 0.9953796807149745, 0.9947992244809228, 0.9936939333288397, 0.9916987700857023, 0.9937207638959982, 0.9922869946469305, 0.2971646764819871, 0.3145264561665746, 0.31224721794100807, 0.30181277771019177, 0.2776922163889809, 0.28392209240671995, 0.3061650437679516, 0.31074451299820627, 0.2715837117119537, 0.3462459168246751, 0.14975587583374583, 0.1410481250984683, 0.3708090938276357, 0.1755111257504932, 0.19905386385972346, 0.1618307204672943, 0.16406581937002396, 0.20179685001427827, 0.12172885845415948, 0.1677307504191693, 0.15098546909813337, 0.1804570255016561, 0.14915229186436552, 0.1655581609454746, 0.15250093349445593, 0.1485507648192228, 0.1766849919803175, 0.2411150668871822, 0.09353178378661109, 0.10696846391914427, 0.1651411302148048, 0.15328796102730524, 0.17221253875328946, 0.18698227043091775, 0.11864874222011279, 0.16595689732747365, 0.0, 0.0, 0.010655242610663085, 0.0, 0.03464819319231083, 0.0016768635091475304, 0.0, 0.0, 0.0, 0.033240176217090855, 0.026120687399218356, 0.04939481568092796, 0.019268492650306168, 0.0, 0.005592198127147285, 0.0864490348497442, 0.021339984275865587, 0.01952929623594335, 0.0, 0.0, 0.0, 0.0, 0.02229979394150272, 0.0, 0.0, 0.0, 0.0, 0.07281791121003356, 0.10529189340000489, 0.10120712039524771, 0.056852793448076255, 0.11665857501012689, 0.09019601537053024, 0.0869241709645674, 0.12620359471189735, 0.0901856139311793, 0.38292042468169873, 0.38402849568423203, 0.39515163015174626, 0.4003266079713187, 0.3882066104284799, 0.3846268197311834, 0.38235671963727724, 0.4204525543663601, 0.37339343260751434, 0.061158533709104845, 0.03180907500134267, 0.005103765351974321, 0.042521643364091144, 0.024922308632921664, 0.08691606864162238, 0.015377952231832248, 0.08476242764797226, 0.0633282259631216, 0.28069288461380515, 0.14481388195792155, 0.14222464473675167, 0.26999174075960986, 0.2831925661424928, 0.29932444918994894, 0.13280728227824778, 0.16305952336580432, 0.12053995383354155, 0.15748289071708754, 0.14351987073563943, 0.1152788505482748, 0.2205934056940554, 0.10386480036927193, 0.15365344705553086, 0.13210686650546066, 0.14134821582789758, 0.15583806473865736, 0.09698074247564348, 0.05072665321402692, 0.05676240561100587, 0.16631968429245514, 0.07225442022798889, 0.05621337601336984, 0.10159716800503116, 0.08217989608293497, 0.06879394730135846, 0.15912309632382327, 0.15662761911254142, 0.1568722506741913, 0.14098404762303418, 0.13266021620056823, 0.18798103655213272, 0.1911040572906353, 0.13725752939048563, 0.18235064978939697, 0.17328290338000774, 0.2043342104685142, 0.1774544006709894, 0.18591284835173782, 0.16396019465508238, 0.1761336337184919, 0.16876984485657598, 0.1742174924636689, 0.15508268461493768, 0.1690996758465242, 0.07450090298564815, 0.1636481034736924, 0.6508522197265232, 0.19395484415083275, 0.110832740853679, 0.14510537509147903, 0.15963918266949517, 0.16168393772370504, 0.08198386172627148, 0.1081318694138168, 0.39081654932986465, 0.5122997293000986, 0.10141696014909196, 0.20122504491496185, 0.06825051566651508, 0.5478915615825659, 0.37698662590257515, 0.17043312650052633, 0.16405047994269806, 0.1594812706776323, 0.18633178441052367, 0.18104557178892722, 0.17037665055870044, 0.17230441080231285, 0.18398310235567128, 0.1709605461618241, 0.06548092400503935, 0.04276448790713072, 0.05644971772695917, 0.04888056769997218, 0.042340889945264304, 0.06754344626746611, 0.0607216084334421, 0.04328576800634709, 0.05309353359169766]}, "mutation_prompt": null}
{"id": "9dccb049-4845-437e-920b-b1381f77f111", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.random_cognitive = np.random.random((10, dim))\n        self.random_social = np.random.random((10, dim))\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = self.random_cognitive[i] * (particles[i] - particles[i])\n                    social_component = self.random_social[i] * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Removing redundant random generation by pre-generating all random numbers to improve efficiency.", "configspace": "", "generation": 98, "fitness": 0.21014141782026668, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.5605180426995541, 0.4333261625128666, 0.7094325327431148, 0.42707523216084686, 0.46904765501617585, 0.4286902570906155, 0.42240197650979194, 0.88757970018315, 0.44602106815745024, 0.06792437970782217, 0.0, 0.0, 0.0, 0.08696514415601542, 0.0, 0.0, 0.04788564548841823, 0.0, 0.09079761046552048, 0.05884825871034338, 0.05174913878341447, 0.07350623695969094, 0.05382120026792525, 0.04278668269223995, 0.07910862307860111, 0.041244830771214436, 0.09382614700574154, 0.05764423673824859, 0.09177331730783767, 0.09788145608171872, 0.0938500778539827, 0.020568069027140923, 0.10721684550817667, 0.11574530151168805, 0.08698852147729397, 0.06655060052519979, 0.8162341627024338, 0.9924173333579741, 0.986112530587668, 0.992344099252644, 0.9887936712542961, 0.9874402212477789, 0.988015367599455, 0.9933335444084614, 0.9918570596372406, 0.3337743799198858, 0.2971505694367381, 0.3035589564112794, 0.3056323405151643, 0.31376077940692837, 0.3360070009067675, 0.3063407366030253, 0.30563491794840536, 0.3059477127336726, 0.23091883251047696, 0.21525851821130126, 0.3619694490462012, 0.2593681933989903, 0.29264757102657346, 0.3793154107457163, 0.2330205436004983, 0.35572786805839296, 0.21690903190336752, 0.13671210885218898, 0.13290436061188104, 0.1322175262855806, 0.13563775076609086, 0.10584473971445407, 0.30285760775561865, 0.13733916860920614, 0.1672475965686634, 0.1713538292013853, 0.18303999695641693, 0.10947095959626307, 0.13122615565274298, 0.1353695377051316, 0.16716149784413514, 0.11997207521188336, 0.17199239850933623, 0.12846324160334732, 0.1678909610508228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002447436717823215, 0.0, 0.006017229560085768, 0.09288636082198953, 0.06929169425510295, 0.057624865700727446, 0.012574434947738355, 0.0, 0.015040106824106614, 0.05437043461976321, 0.028229082076642986, 0.08182803859273413, 0.0010331239065864972, 0.0, 0.0, 0.0, 0.0854831862816553, 0.0, 0.07798451795534744, 0.07998689223560651, 0.0, 0.046008609123351696, 0.10128938911310137, 0.018268799049497852, 0.0066316794390403055, 0.03945561771219763, 0.045525318541949855, 0.07167063238358173, 0.15642745682640946, 0.08542329890750078, 0.39608418693960523, 0.4244951711272097, 0.4656874174183543, 0.5183109570390239, 0.40181518070841116, 0.4475481456110805, 0.43656191461798244, 0.4266452929298965, 0.527158027006844, 0.07108687746979647, 0.060725175581698765, 0.06175081590822307, 0.0905997135309311, 0.06341860324448356, 0.13397534213082907, 0.09456500022800063, 0.08027746139444736, 0.1235896986386622, 0.27335500235173515, 0.33325872519827393, 0.2749841026931208, 0.1886372956728759, 0.1909001498744457, 0.1746262081425779, 0.23133877857285456, 0.15394329221667136, 0.17229323571615895, 0.28987093665979957, 0.11386893765881212, 0.18346670778996155, 0.2505515525249049, 0.2034729668634191, 0.2184977843459308, 0.1937832229017562, 0.2936619986829948, 0.23370703487158118, 0.09316227597317916, 0.09990467658429802, 0.23566199775381025, 0.19696585208136153, 0.14775111522820916, 0.20234970120306517, 0.24337413788190876, 0.26849327842099213, 0.26580679780698924, 0.23392052072540748, 0.12962487392664368, 0.24726436486481962, 0.2165135363170524, 0.17387153334909167, 0.17142246731061184, 0.1990786072556584, 0.18118199410497748, 0.1735103390785211, 0.2262912356648672, 0.19394080495813637, 0.20081868958319093, 0.18248315255180225, 0.23555204002816532, 0.2908416221287278, 0.21446834159889172, 0.20533329987212923, 0.1956721369703348, 0.21344729482997848, 0.12978271442293776, 0.16717205326142426, 0.17345096767613855, 0.1971395407318819, 0.11488354866443096, 0.17677680432465348, 0.1792125975764457, 0.2109714342649015, 0.6057922499223456, 0.15767107523008894, 0.35116880129332073, 0.1697298497885802, 0.15669386237217464, 0.5682102355564531, 0.3623256919514861, 0.10489184405846896, 0.09467094686221422, 0.23625738719232536, 0.25870732447615197, 0.19782607315138312, 0.22945420753095547, 0.18353182517998134, 0.2013214529149271, 0.2006392652781649, 0.3075511098878505, 0.19027925540941204, 0.06284245120474274, 0.06015290778762794, 0.08661560857832551, 0.06131852421088846, 0.07987539755001194, 0.09273875764716555, 0.10298529629098152, 0.04014201300863918, 0.06807809989311531]}, "mutation_prompt": null}
{"id": "5a1c9a7d-ea4c-4b51-83f9-dc562dd70349", "solution": "import numpy as np\n\nclass Optimized_Enhanced_PSO_SA_Optimizer_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_sa_optimization():\n            def objective_function(x):\n                return func(x)\n            \n            n_particles = 10\n            max_iterations_pso = 100\n            max_iterations_sa = 10\n            bounds = (-5.0, 5.0)\n            alpha = 0.95\n            T0 = 1.0\n            T_min = 0.0001\n            sigma = 0.1\n            inertia_max = 0.9\n            inertia_min = 0.4\n\n            best_solution = None\n            best_fitness = float('inf')\n\n            particles = np.random.uniform(bounds[0], bounds[1], (n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n            inertia_weight = inertia_max\n\n            for _ in range(max_iterations_pso):\n                for i in range(n_particles):\n                    fitness = objective_function(particles[i])\n                    if fitness < best_fitness:\n                        best_solution = particles[i].copy()\n                        best_fitness = fitness\n\n                    cognitive_component = np.random.random(self.dim) * (particles[i] - particles[i])\n                    social_component = np.random.random(self.dim) * (best_solution - particles[i])\n                    cognitive_social = alpha * (cognitive_component + social_component)\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_social\n                    particles[i] = np.clip(particles[i] + velocities[i], bounds[0], bounds[1])\n\n                inertia_weight = max(inertia_max - (_ / max_iterations_pso) * (inertia_max - inertia_min), inertia_min)\n\n            current_solution = best_solution\n            current_fitness = best_fitness\n            T = T0\n\n            while T > T_min:\n                for _ in range(max_iterations_sa):\n                    candidate_solution = np.clip(current_solution + np.random.normal(0, sigma, self.dim), bounds[0], bounds[1])\n                    candidate_fitness = objective_function(candidate_solution)\n\n                    if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / T):\n                        current_solution = candidate_solution\n                        current_fitness = candidate_fitness\n\n                T *= alpha\n\n            return current_solution\n\n        return pso_sa_optimization()", "name": "Optimized_Enhanced_PSO_SA_Optimizer_V3", "description": "Removed redundant random generation for cognitive and social components to improve efficiency.", "configspace": "", "generation": 99, "fitness": 0.21507312796868885, "feedback": "The algorithm Optimized_Enhanced_PSO_SA_Optimizer_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "b5078434-996c-480b-b79b-3e1c9446cfc8", "metadata": {"aucs": [0.78563220768702, 0.935833600440563, 0.7998035615255836, 0.7905764159110242, 0.4269570280377073, 0.4339948990785162, 0.43465321599318185, 0.7479606045063919, 0.4460606859081314, 0.0, 0.060846373126668185, 0.03549939398050306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10708887168602976, 0.036944173842593186, 0.11492721856331123, 0.1356956440110083, 0.03936598543489489, 0.06300821962687042, 0.05129250441326716, 0.0568295958759516, 0.0661744059819761, 0.0643761415095574, 0.09312552525849627, 0.05872552134105191, 0.1270398349713412, 0.06948776404580459, 0.06256006676041348, 0.07258738543633902, 0.16478176743347261, 0.008848118094458401, 0.9929473757042914, 0.9930359929056546, 0.9959677796045792, 0.9912854230235244, 0.9913542727428077, 0.9841456109588841, 0.9901064774446483, 0.9946077657833313, 0.9881570155982725, 0.31299264505940627, 0.29058353911938894, 0.2753196773657477, 0.2928774977340838, 0.31918006413392064, 0.3825257659074758, 0.3165484090375026, 0.3098384106456209, 0.28750623148916, 0.22596561033472107, 0.13000864281614755, 0.22908866227570768, 0.35170025604896504, 0.25573928515750766, 0.14288278091971351, 0.14806345427374912, 0.1511625158426212, 0.36572369901224056, 0.13491325774869345, 0.14350338487429293, 0.18858921452110855, 0.1643558220735034, 0.15222293673756482, 0.11750424636280188, 0.15972732008072488, 0.11937705336021176, 0.20404720668776566, 0.21041505955205797, 0.11193196290574614, 0.16569935508614853, 0.29547023114568316, 0.1764279220906836, 0.18393412575796142, 0.18632013009126935, 0.10543943196077776, 0.20912667229923698, 0.0, 0.0, 0.0, 0.0, 0.019172782261010823, 0.0, 0.013481642699726959, 0.010675737993665058, 0.004192163889023659, 0.024776248192106665, 0.0037232732877903185, 0.11726156427415935, 0.09780978929764328, 0.04709774099310449, 0.0, 0.04829619452199474, 0.0067127418957461105, 0.07973388771757617, 0.0, 0.0, 0.0, 0.08510736480289505, 0.08470859129281894, 0.1280824471870492, 0.0, 0.07973878717975036, 0.0, 0.04738212380558382, 0.08795451490777617, 0.04465348694238602, 0.06254461557421132, 0.007183778572395161, 0.03936752936012422, 0.05187857945570229, 0.05599089857300765, 0.08479340466175922, 0.47877347412194593, 0.3624029524976786, 0.5022137642657909, 0.3957391096209769, 0.45711439313433355, 0.4272827234303309, 0.46524397205688095, 0.383708950154219, 0.43960388154919816, 0.05971846129662206, 0.04458764799891801, 0.10739402534992515, 0.11245480689563103, 0.1188643975464373, 0.09498221721785993, 0.061818729561739394, 0.15548512675675552, 0.06580313923663017, 0.27539627221416574, 0.2912494465042681, 0.14972827350074136, 0.29587031790748086, 0.1979121858402093, 0.2590862459486867, 0.18748898992645124, 0.13387593436272238, 0.17551658371164192, 0.17025054768915726, 0.2709246495705566, 0.1448082941379646, 0.29899371754812243, 0.24038956659880628, 0.24515070824153995, 0.2341713754493323, 0.273448846187613, 0.3143452876332532, 0.24416127581737035, 0.20754946467248825, 0.23598842627752503, 0.21418352767488835, 0.22426140139282724, 0.10628268621217396, 0.25448031336476484, 0.22275385937227843, 0.093114665402796, 0.19974912442451442, 0.1958197048684387, 0.19003363385564553, 0.17683115169790575, 0.1541137490448813, 0.17245695583923804, 0.21726150918976728, 0.18416936746115609, 0.2542657659806078, 0.19058027711486392, 0.18052795629357354, 0.18412177809419716, 0.18300777284006597, 0.18643997919347943, 0.17566915722950505, 0.19361872639704036, 0.2346341858967691, 0.21129948144839905, 0.15654159764108666, 0.5953096711285285, 0.16786428320654012, 0.1730661581670836, 0.20096017233223318, 0.1997980744679697, 0.14666120724135434, 0.11519922818667905, 0.15419973834188527, 0.15629489316855705, 0.11264498240566989, 0.5765047001030676, 0.5142410184393054, 0.15489664005670178, 0.21255347035968897, 0.1123735029836731, 0.1480327738995686, 0.4249347691683567, 0.19408506358602684, 0.18691222430147358, 0.19951534669018212, 0.22684571189758185, 0.21023709681515979, 0.23320742274430106, 0.21816998165086554, 0.21482536180318967, 0.20076958833150804, 0.07007248955020517, 0.05182489159021986, 0.0926932374081405, 0.12982229562710546, 0.0941234426496943, 0.06263013115602556, 0.05689155940079804, 0.1085893082207513, 0.04201187969682285]}, "mutation_prompt": null}
