{"id": "ac584ea9-452a-4eea-9a3e-7de8cef58eae", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "e22e0a76-0f95-4a86-8867-ec739113db5c", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = self.w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            self.w = 0.4 + 0.5 * (1 - _ / self.budget)\n\n        return gbest_fitness", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight to control exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 1, "fitness": 0.09604188063569691, "feedback": "The algorithm DynamicInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.20.", "error": "", "parent_id": "ac584ea9-452a-4eea-9a3e-7de8cef58eae", "metadata": {"aucs": [0.1666002218484306, 0.18633432824804352, 0.1286287233545942, 0.043640923106279095, 0.12776901147612985, 0.08742707103872294, 0.13308791048271829, 0.0944936808794451, 0.12520445036085492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027052056090589582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00979562321995342, 0.02080901224268039, 0.04501166654776767, 0.03553289028891904, 0.030225086277619106, 0.02712288390928641, 0.14302840473450873, 0.028768950032071916, 0.029772377973973363, 0.00820140474816855, 0.005506524269446866, 9.999999999998899e-05, 0.0648975516409509, 0.018279366084971826, 0.005375042546456599, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9976941009441043, 0.9967060685017091, 0.9972299005519837, 0.9976682180113007, 0.9949796577948653, 0.9971829070781129, 0.9938086949228807, 0.9970261699448577, 0.9973849537075333, 0.05468082433147503, 0.11404132981589865, 9.999999999998899e-05, 9.999999999998899e-05, 0.1503136740172244, 0.029669665512863097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11644463767212965, 0.018543151695535, 0.04264120424808804, 0.1220591885096608, 0.11071235720353234, 0.01265196638978483, 0.08867582863466328, 0.0571559194727268, 0.00990846602666351, 9.999999999998899e-05, 0.0018973453053766631, 0.03078426432387149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030203073361548594, 9.999999999998899e-05, 0.007108101168379677, 0.0535847090681858, 0.028092865039187398, 9.999999999998899e-05, 0.0503560288911038, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014973603763860033, 9.999999999998899e-05, 0.038646554360021956, 9.999999999998899e-05, 9.999999999998899e-05, 0.12203874537282078, 0.14880730578237034, 0.14838054695461433, 0.12968502038613972, 0.11439447695186977, 0.07389273485515457, 0.15462390277293092, 0.10589971222835826, 0.15207194268571234, 0.03950356410675926, 0.0037120436662843037, 0.0004701590508265907, 0.016589788638107117, 0.022351620245187553, 0.02541029729977695, 0.022484723871567303, 0.028144600900213312, 0.042640308425358486, 0.06681029638330271, 0.11121242070086335, 0.16699067988713745, 0.09855305120349966, 0.06581597144687368, 0.07693754554780952, 0.1129659541567678, 0.11574425035392888, 0.11749473306380731, 0.12997906989309016, 0.11994475464157384, 0.10531229322799007, 0.14959906513961163, 0.1827198530459726, 0.1614787569821623, 0.12281976907867143, 0.11299177240732805, 0.13744360269515998, 0.0906518016598793, 0.05543240707976438, 0.053184132963845276, 0.1493774981766921, 0.08059274065005684, 0.0825335140614245, 0.0760706866156694, 0.04685573753622918, 0.08161205793122428, 0.14171992024125446, 0.08085605295461373, 0.12335567746454523, 0.1291567493643172, 0.12731501306507176, 0.11051494838391296, 0.1301620688348183, 0.12187211772916162, 0.13523073562267163, 9.999999999998899e-05, 0.024925322410733308, 0.05044661417371499, 0.1376553013663281, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15350382768500836, 0.12915926497468477, 0.16747802185996463, 0.05098059712318026, 0.1258490823842141, 0.16890283293794273, 0.0457749623460475, 0.1563752080751014, 0.07740519932352741, 0.11237657837593629, 0.1055714817630049, 0.05638699132166969, 0.04196820442836946, 0.09601613053963887, 0.021600351495484005, 0.08048380914370978, 0.10018850518532996, 0.06924620912415247, 0.023068498411701333, 0.1450879524052343, 0.12017502569002791, 0.1629661038126483, 0.18444675908398644, 0.15793441042373857, 0.12465113207635137, 0.14352794637409938, 0.1889935746618009, 0.13441254736370611, 0.033463942222909604, 0.034046794518134416, 0.026967877931730055, 0.06532962224785954, 0.04282669874121403, 0.03499084912025141, 0.02600147208970971, 0.042537859111331455, 0.031169719411417995]}, "mutation_prompt": null}
{"id": "1b7bafe1-264c-4409-bb1e-1c86ac2ba6de", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        for t in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            cognitive = self.c1 * r1 * (pbest - swarm)\n            social = self.c2 * r2 * (gbest - swarm)\n            velocity = self.w * velocity + cognitive + social\n\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            self.w = 0.4 + 0.5 * (1 - t / self.budget)\n\n        return gbest_fitness", "name": "AdaptivePSO", "description": "Introducing adaptive cognitive and social components to adjust the exploration and exploitation balance dynamically for faster convergence.", "configspace": "", "generation": 2, "fitness": 0.09604188063569691, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.20.", "error": "", "parent_id": "e22e0a76-0f95-4a86-8867-ec739113db5c", "metadata": {"aucs": [0.1666002218484306, 0.18633432824804352, 0.1286287233545942, 0.043640923106279095, 0.12776901147612985, 0.08742707103872294, 0.13308791048271829, 0.0944936808794451, 0.12520445036085492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027052056090589582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00979562321995342, 0.02080901224268039, 0.04501166654776767, 0.03553289028891904, 0.030225086277619106, 0.02712288390928641, 0.14302840473450873, 0.028768950032071916, 0.029772377973973363, 0.00820140474816855, 0.005506524269446866, 9.999999999998899e-05, 0.0648975516409509, 0.018279366084971826, 0.005375042546456599, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9976941009441043, 0.9967060685017091, 0.9972299005519837, 0.9976682180113007, 0.9949796577948653, 0.9971829070781129, 0.9938086949228807, 0.9970261699448577, 0.9973849537075333, 0.05468082433147503, 0.11404132981589865, 9.999999999998899e-05, 9.999999999998899e-05, 0.1503136740172244, 0.029669665512863097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11644463767212965, 0.018543151695535, 0.04264120424808804, 0.1220591885096608, 0.11071235720353234, 0.01265196638978483, 0.08867582863466328, 0.0571559194727268, 0.00990846602666351, 9.999999999998899e-05, 0.0018973453053766631, 0.03078426432387149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030203073361548594, 9.999999999998899e-05, 0.007108101168379677, 0.0535847090681858, 0.028092865039187398, 9.999999999998899e-05, 0.0503560288911038, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014973603763860033, 9.999999999998899e-05, 0.038646554360021956, 9.999999999998899e-05, 9.999999999998899e-05, 0.12203874537282078, 0.14880730578237034, 0.14838054695461433, 0.12968502038613972, 0.11439447695186977, 0.07389273485515457, 0.15462390277293092, 0.10589971222835826, 0.15207194268571234, 0.03950356410675926, 0.0037120436662843037, 0.0004701590508265907, 0.016589788638107117, 0.022351620245187553, 0.02541029729977695, 0.022484723871567303, 0.028144600900213312, 0.042640308425358486, 0.06681029638330271, 0.11121242070086335, 0.16699067988713745, 0.09855305120349966, 0.06581597144687368, 0.07693754554780952, 0.1129659541567678, 0.11574425035392888, 0.11749473306380731, 0.12997906989309016, 0.11994475464157384, 0.10531229322799007, 0.14959906513961163, 0.1827198530459726, 0.1614787569821623, 0.12281976907867143, 0.11299177240732805, 0.13744360269515998, 0.0906518016598793, 0.05543240707976438, 0.053184132963845276, 0.1493774981766921, 0.08059274065005684, 0.0825335140614245, 0.0760706866156694, 0.04685573753622918, 0.08161205793122428, 0.14171992024125446, 0.08085605295461373, 0.12335567746454523, 0.1291567493643172, 0.12731501306507176, 0.11051494838391296, 0.1301620688348183, 0.12187211772916162, 0.13523073562267163, 9.999999999998899e-05, 0.024925322410733308, 0.05044661417371499, 0.1376553013663281, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15350382768500836, 0.12915926497468477, 0.16747802185996463, 0.05098059712318026, 0.1258490823842141, 0.16890283293794273, 0.0457749623460475, 0.1563752080751014, 0.07740519932352741, 0.11237657837593629, 0.1055714817630049, 0.05638699132166969, 0.04196820442836946, 0.09601613053963887, 0.021600351495484005, 0.08048380914370978, 0.10018850518532996, 0.06924620912415247, 0.023068498411701333, 0.1450879524052343, 0.12017502569002791, 0.1629661038126483, 0.18444675908398644, 0.15793441042373857, 0.12465113207635137, 0.14352794637409938, 0.1889935746618009, 0.13441254736370611, 0.033463942222909604, 0.034046794518134416, 0.026967877931730055, 0.06532962224785954, 0.04282669874121403, 0.03499084912025141, 0.02600147208970971, 0.042537859111331455, 0.031169719411417995]}, "mutation_prompt": null}
{"id": "ad5ca232-9e85-45d5-a777-561793721814", "solution": "import numpy as np\n\nclass AcceleratedDynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.a = 0.5\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            acceleration = self.a + 0.5 * (1 - t / self.budget)\n            self.w = 0.4 + 0.5 * (1 - t / self.budget)\n\n            velocity = self.w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm) * acceleration\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n        return gbest_fitness", "name": "AcceleratedDynamicInertiaPSO", "description": "Implementing a dynamic acceleration coefficient to adaptively adjust the particle movement for faster convergence.", "configspace": "", "generation": 3, "fitness": 0.09583697314265195, "feedback": "The algorithm AcceleratedDynamicInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.20.", "error": "", "parent_id": "e22e0a76-0f95-4a86-8867-ec739113db5c", "metadata": {"aucs": [0.16779979192056704, 0.18645831800671786, 0.12864395913870508, 0.043644576109515776, 0.1279984374062878, 0.08742013063456566, 0.13513945389430704, 0.09446189005849426, 0.1275678702808254, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010468866782760822, 0.018445485227423397, 0.04505974753271769, 0.03550586771142683, 0.030771794418257392, 0.027564510863328562, 0.13030407842920155, 0.07495480524386189, 0.0321730087862061, 0.010582690339026146, 0.0058480779923869575, 9.999999999998899e-05, 0.04775624103288867, 0.018127503274609658, 0.00523012729796879, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9976940839207468, 0.9967060748165639, 0.9972298678758783, 0.9976681817842693, 0.9949798758214584, 0.9971829162960807, 0.9938086121580646, 0.9970261815904853, 0.997384943511184, 0.05469634675903867, 0.1134915165520104, 9.999999999998899e-05, 9.999999999998899e-05, 0.12438127448073633, 0.029121613499396126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11693233202943698, 0.01852691777216664, 0.04264120424808804, 0.11182651630561757, 0.1126278899864035, 0.012653787920707926, 0.09228574977187287, 0.04043086157493159, 0.00990846602666351, 9.999999999998899e-05, 0.0022082788242143714, 0.030347421210169867, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030274892247247998, 9.999999999998899e-05, 9.999999999998899e-05, 0.053871323188960596, 0.024209578193088777, 9.999999999998899e-05, 0.05018952529314502, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00025427744097727967, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010018724335754126, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017153848014705986, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01353023450216062, 9.999999999998899e-05, 0.0387067920391162, 9.999999999998899e-05, 9.999999999998899e-05, 0.12208764241835235, 0.14878410010218324, 0.14838054695461433, 0.1296693498200573, 0.11437181512530858, 0.07388967414632319, 0.15810683455908947, 0.10591815438081054, 0.14619854878451333, 0.019345598430259625, 0.00399497725920861, 0.0009706344234604591, 0.016702041785420785, 0.027300441334948466, 0.025666575643723766, 0.025506799955357762, 0.044464997424517816, 0.043413277958502694, 0.07500523137918569, 0.1026360017713962, 0.15500946376825453, 0.09855305120349966, 0.06581597144687368, 0.07693055577187502, 0.1173732822806609, 0.15542640541484964, 0.12494762906788215, 0.13244346771930704, 0.11958883633463424, 0.1054318603250356, 0.16879243976198754, 0.18275087602641982, 0.1625761659860704, 0.12289595996394598, 0.11380003385693671, 0.13290542691882168, 0.09050100422060858, 0.057061532316508234, 0.05319139306085541, 0.12017224984486652, 0.07997272846263581, 0.0816879907897845, 0.075868315101557, 0.046431693808405394, 0.08690243282068966, 0.11931138677775854, 0.09289089252924132, 0.13169238759642743, 0.12044729822315425, 0.11125417126614845, 0.1139814928820524, 0.14104280150498327, 0.16433470162045927, 0.10956794386536772, 9.999999999998899e-05, 0.02759684891385772, 0.04970543260359794, 0.13693021731739485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1501193098963466, 0.13305174543832854, 0.16918315987372645, 0.05098059712318026, 0.12579804501756553, 0.1695892685870929, 0.04579633838093289, 0.15673097935564217, 0.07738083112563576, 0.11256516690734186, 0.1044700710616473, 0.056547750045051415, 0.04178564786689676, 0.09981677530134148, 0.021600351495484005, 0.08054481692551652, 0.08197661503248599, 0.07071388519815791, 0.023068498411701333, 0.16292696660361328, 0.12017502569002791, 0.15942138402230643, 0.15298752239769564, 0.14426720287325812, 0.12465113207635137, 0.14999416763963414, 0.18116176281199003, 0.1356761124196162, 0.03392807559371991, 0.028964848640942953, 0.02555654707432764, 0.04203556465765845, 0.026478683365990907, 0.0386286828789949, 0.031751598842334916, 0.03614488782618386, 0.06207456806547784]}, "mutation_prompt": null}
{"id": "15a0105b-8748-48d1-8efb-052d8c90bf6d", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = self.w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            self.w = 0.4 + 0.5 * (1 - _ / self.budget)\n\n        return gbest_fitness", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight to control exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e22e0a76-0f95-4a86-8867-ec739113db5c", "metadata": {"aucs": [0.1666002218484306, 0.18633432824804352, 0.1286287233545942, 0.043640923106279095, 0.12776901147612985, 0.08742707103872294, 0.13308791048271829, 0.0944936808794451, 0.12520445036085492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027052056090589582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00979562321995342, 0.02080901224268039, 0.04501166654776767, 0.03553289028891904, 0.030225086277619106, 0.02712288390928641, 0.14302840473450873, 0.028768950032071916, 0.029772377973973363, 0.00820140474816855, 0.005506524269446866, 9.999999999998899e-05, 0.0648975516409509, 0.018279366084971826, 0.005375042546456599, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9976941009441043, 0.9967060685017091, 0.9972299005519837, 0.9976682180113007, 0.9949796577948653, 0.9971829070781129, 0.9938086949228807, 0.9970261699448577, 0.9973849537075333, 0.05468082433147503, 0.11404132981589865, 9.999999999998899e-05, 9.999999999998899e-05, 0.1503136740172244, 0.029669665512863097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11644463767212965, 0.018543151695535, 0.04264120424808804, 0.1220591885096608, 0.11071235720353234, 0.01265196638978483, 0.08867582863466328, 0.0571559194727268, 0.00990846602666351, 9.999999999998899e-05, 0.0018973453053766631, 0.03078426432387149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030203073361548594, 9.999999999998899e-05, 0.007108101168379677, 0.0535847090681858, 0.028092865039187398, 9.999999999998899e-05, 0.0503560288911038, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014973603763860033, 9.999999999998899e-05, 0.038646554360021956, 9.999999999998899e-05, 9.999999999998899e-05, 0.12203874537282078, 0.14880730578237034, 0.14838054695461433, 0.12968502038613972, 0.11439447695186977, 0.07389273485515457, 0.15462390277293092, 0.10589971222835826, 0.15207194268571234, 0.03950356410675926, 0.0037120436662843037, 0.0004701590508265907, 0.016589788638107117, 0.022351620245187553, 0.02541029729977695, 0.022484723871567303, 0.028144600900213312, 0.042640308425358486, 0.06681029638330271, 0.11121242070086335, 0.16699067988713745, 0.09855305120349966, 0.06581597144687368, 0.07693754554780952, 0.1129659541567678, 0.11574425035392888, 0.11749473306380731, 0.12997906989309016, 0.11994475464157384, 0.10531229322799007, 0.14959906513961163, 0.1827198530459726, 0.1614787569821623, 0.12281976907867143, 0.11299177240732805, 0.13744360269515998, 0.0906518016598793, 0.05543240707976438, 0.053184132963845276, 0.1493774981766921, 0.08059274065005684, 0.0825335140614245, 0.0760706866156694, 0.04685573753622918, 0.08161205793122428, 0.14171992024125446, 0.08085605295461373, 0.12335567746454523, 0.1291567493643172, 0.12731501306507176, 0.11051494838391296, 0.1301620688348183, 0.12187211772916162, 0.13523073562267163, 9.999999999998899e-05, 0.024925322410733308, 0.05044661417371499, 0.1376553013663281, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15350382768500836, 0.12915926497468477, 0.16747802185996463, 0.05098059712318026, 0.1258490823842141, 0.16890283293794273, 0.0457749623460475, 0.1563752080751014, 0.07740519932352741, 0.11237657837593629, 0.1055714817630049, 0.05638699132166969, 0.04196820442836946, 0.09601613053963887, 0.021600351495484005, 0.08048380914370978, 0.10018850518532996, 0.06924620912415247, 0.023068498411701333, 0.1450879524052343, 0.12017502569002791, 0.1629661038126483, 0.18444675908398644, 0.15793441042373857, 0.12465113207635137, 0.14352794637409938, 0.1889935746618009, 0.13441254736370611, 0.033463942222909604, 0.034046794518134416, 0.026967877931730055, 0.06532962224785954, 0.04282669874121403, 0.03499084912025141, 0.02600147208970971, 0.042537859111331455, 0.031169719411417995]}, "mutation_prompt": null}
{"id": "0fc7c071-604b-4b0d-addf-4ed88e377f75", "solution": "import numpy as np\n\nclass DynamicAccelerationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.a = 1.5\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = self.w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            self.w = 0.4 + 0.5 * (1 - _ / self.budget)\n            self.c1 = max(1.5 - 0.5 * _ / self.budget, 1.0)\n            self.c2 = min(1.5 + 0.5 * _ / self.budget, 3.0)\n\n        return gbest_fitness", "name": "DynamicAccelerationPSO", "description": "Introducing a dynamic acceleration coefficient to adaptively adjust the balance between exploration and exploitation during the optimization process for faster convergence.", "configspace": "", "generation": 5, "fitness": 0.17901635652436265, "feedback": "The algorithm DynamicAccelerationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "e22e0a76-0f95-4a86-8867-ec739113db5c", "metadata": {"aucs": [0.4954967438049144, 0.47592037114443875, 0.568493527765257, 0.380994714380281, 0.4214072736148379, 0.4460133046423541, 0.3253899462004167, 0.5131349064577287, 0.5606094284066262, 0.1964684270781507, 0.1799624149952329, 0.13639866510018583, 0.1674703985852095, 0.25121353364369214, 0.2626308252830579, 0.14819007615308633, 0.15315292608764264, 0.21747589006876622, 0.11271497673766717, 0.08876661043661338, 0.17892889309746984, 0.0926791532929887, 0.09538929614521818, 0.10863293984389888, 0.09492357599954926, 0.0755292081879928, 0.10365501529797017, 0.09852967552384506, 0.050868208050159236, 0.08450679699673369, 0.06796074921961626, 0.05153688499315323, 0.07342215269556707, 0.10241824488067663, 0.07341402321235513, 0.06367869085583111, 0.9976926014181291, 0.9963757805265491, 0.9977977008409235, 0.9971767526008012, 0.9940758434969567, 0.9939018317901719, 0.9943396859127138, 0.9972044787265035, 0.996756632790395, 0.20564911031766664, 0.16316084509638662, 0.19856619081611826, 0.05729895596889634, 0.3627491774213688, 0.11117469578551331, 0.08672656213460994, 0.14091219929513377, 0.07512410312273365, 0.21013635040573986, 0.1757803597239841, 0.0913002080127171, 0.17826381285767567, 0.1445286864060208, 0.16572626974638083, 0.1462691221759025, 0.15266638188779358, 0.21161960030191462, 0.11720920008291158, 0.10243799849626722, 0.11585603116115639, 0.11329253210819246, 0.029926439770906255, 0.09839655420762194, 0.07339419538656489, 0.07633506280625801, 0.12764090543676665, 0.08638321539235061, 0.05263351386753801, 0.07860764982076729, 0.1362275342933641, 0.05270351726726208, 0.09791951046025205, 0.12726811065063848, 0.09022757437049844, 0.1423973071093666, 0.007224233048989448, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010782636668005274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019237191292464928, 9.999999999998899e-05, 0.0327343762061959, 0.05754306010759369, 9.999999999998899e-05, 9.999999999998899e-05, 0.013804140649294694, 0.03269776716554751, 9.999999999998899e-05, 0.037536884996168696, 0.011300888708897006, 0.0514979493538289, 0.04934149081745287, 9.999999999998899e-05, 0.08757064538578929, 0.00460790237057862, 0.0652298424091794, 0.032366425418439926, 0.011113070932861069, 0.03541934785012035, 0.0462961977603924, 0.012912988613793419, 0.07472772445907117, 0.010825678259376192, 0.03676172967779401, 0.024616123400486467, 0.0695660727476094, 0.3171297460833239, 0.3511393219122345, 0.37464225611546054, 0.29719825731119287, 0.260560422564329, 0.3303594086530959, 0.3518048126899226, 0.23348781866408752, 0.37206016822922783, 0.07143124867271466, 0.05831391716876444, 0.08239755814057825, 0.06572899266082022, 0.0777825195806372, 0.08652487896340921, 0.07792420315648252, 0.08404161217844552, 0.0704141155816751, 0.1407136891785914, 0.13439252795575607, 0.17650294612568573, 0.1719382180359076, 0.15152162559931226, 0.11700117697578516, 0.1068486034500038, 0.11854667815452813, 0.15545013876892422, 0.20339180135191293, 0.23254210103038764, 0.25387349115796765, 0.21379740142678838, 0.2052028372518796, 0.15816774389321586, 0.2163949562658669, 0.2372678248223068, 0.1896756309554205, 0.12472511416747889, 0.18282310414738978, 0.08572074360004789, 0.13128164131674658, 0.163181058518439, 0.13472382979746966, 0.13985946654950598, 0.11761482750115138, 0.09803408430517524, 0.16904761069462115, 0.18040554056379132, 0.20852748663873855, 0.17872611218292278, 0.13964157463121396, 0.16554995373540915, 0.16805157059405373, 0.14896246597032825, 0.2282511806425186, 0.18418528264303535, 0.16523449496373432, 0.22377821215761085, 0.18188670648417726, 0.13830861871201938, 0.19095180769245768, 0.1510385948319919, 0.20151149590502293, 0.19038614360952555, 0.15392169008047585, 0.24181857599017198, 0.18093232936275694, 0.4134114093736402, 0.1948063608210443, 0.15093252195254359, 0.15218025912229882, 0.11491766342834397, 0.12822345174395722, 0.24090408581050038, 0.12636874219330052, 0.28238543529032645, 0.15077986284313338, 0.16525215108786173, 0.18270865073726705, 0.07933264120061467, 0.25641236787881583, 0.25488598539279483, 0.17061849205741875, 0.1642236254369862, 0.17448163436480357, 0.15785575674096286, 0.19421600600470446, 0.19816242980352794, 0.1768292218941202, 0.1576056611521286, 0.17660608419703616, 0.04737697739949576, 0.060384421860877224, 0.06081279608258572, 0.07197657784538247, 0.08852113179588617, 0.07163814126400447, 0.05565037486855162, 0.07902791535768539, 0.06578820377647898]}, "mutation_prompt": null}
{"id": "8a77ed24-3ed6-4230-85bf-85a298ba859c", "solution": "import numpy as np\n\nclass DynamicAccelerationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.a = 1.5\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = self.w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            self.w = 0.4 + 0.5 * (1 - _ / self.budget)\n            self.c1 = max(1.5 - 0.5 * _ / self.budget, 1.0)\n            self.c2 = min(1.5 + 0.5 * _ / self.budget, 3.0)\n\n        return gbest_fitness", "name": "DynamicAccelerationPSO", "description": "Introducing a dynamic acceleration coefficient to adaptively adjust the balance between exploration and exploitation during the optimization process for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fc7c071-604b-4b0d-addf-4ed88e377f75", "metadata": {"aucs": [0.4954967438049144, 0.47592037114443875, 0.568493527765257, 0.380994714380281, 0.4214072736148379, 0.4460133046423541, 0.3253899462004167, 0.5131349064577287, 0.5606094284066262, 0.1964684270781507, 0.1799624149952329, 0.13639866510018583, 0.1674703985852095, 0.25121353364369214, 0.2626308252830579, 0.14819007615308633, 0.15315292608764264, 0.21747589006876622, 0.11271497673766717, 0.08876661043661338, 0.17892889309746984, 0.0926791532929887, 0.09538929614521818, 0.10863293984389888, 0.09492357599954926, 0.0755292081879928, 0.10365501529797017, 0.09852967552384506, 0.050868208050159236, 0.08450679699673369, 0.06796074921961626, 0.05153688499315323, 0.07342215269556707, 0.10241824488067663, 0.07341402321235513, 0.06367869085583111, 0.9976926014181291, 0.9963757805265491, 0.9977977008409235, 0.9971767526008012, 0.9940758434969567, 0.9939018317901719, 0.9943396859127138, 0.9972044787265035, 0.996756632790395, 0.20564911031766664, 0.16316084509638662, 0.19856619081611826, 0.05729895596889634, 0.3627491774213688, 0.11117469578551331, 0.08672656213460994, 0.14091219929513377, 0.07512410312273365, 0.21013635040573986, 0.1757803597239841, 0.0913002080127171, 0.17826381285767567, 0.1445286864060208, 0.16572626974638083, 0.1462691221759025, 0.15266638188779358, 0.21161960030191462, 0.11720920008291158, 0.10243799849626722, 0.11585603116115639, 0.11329253210819246, 0.029926439770906255, 0.09839655420762194, 0.07339419538656489, 0.07633506280625801, 0.12764090543676665, 0.08638321539235061, 0.05263351386753801, 0.07860764982076729, 0.1362275342933641, 0.05270351726726208, 0.09791951046025205, 0.12726811065063848, 0.09022757437049844, 0.1423973071093666, 0.007224233048989448, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010782636668005274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019237191292464928, 9.999999999998899e-05, 0.0327343762061959, 0.05754306010759369, 9.999999999998899e-05, 9.999999999998899e-05, 0.013804140649294694, 0.03269776716554751, 9.999999999998899e-05, 0.037536884996168696, 0.011300888708897006, 0.0514979493538289, 0.04934149081745287, 9.999999999998899e-05, 0.08757064538578929, 0.00460790237057862, 0.0652298424091794, 0.032366425418439926, 0.011113070932861069, 0.03541934785012035, 0.0462961977603924, 0.012912988613793419, 0.07472772445907117, 0.010825678259376192, 0.03676172967779401, 0.024616123400486467, 0.0695660727476094, 0.3171297460833239, 0.3511393219122345, 0.37464225611546054, 0.29719825731119287, 0.260560422564329, 0.3303594086530959, 0.3518048126899226, 0.23348781866408752, 0.37206016822922783, 0.07143124867271466, 0.05831391716876444, 0.08239755814057825, 0.06572899266082022, 0.0777825195806372, 0.08652487896340921, 0.07792420315648252, 0.08404161217844552, 0.0704141155816751, 0.1407136891785914, 0.13439252795575607, 0.17650294612568573, 0.1719382180359076, 0.15152162559931226, 0.11700117697578516, 0.1068486034500038, 0.11854667815452813, 0.15545013876892422, 0.20339180135191293, 0.23254210103038764, 0.25387349115796765, 0.21379740142678838, 0.2052028372518796, 0.15816774389321586, 0.2163949562658669, 0.2372678248223068, 0.1896756309554205, 0.12472511416747889, 0.18282310414738978, 0.08572074360004789, 0.13128164131674658, 0.163181058518439, 0.13472382979746966, 0.13985946654950598, 0.11761482750115138, 0.09803408430517524, 0.16904761069462115, 0.18040554056379132, 0.20852748663873855, 0.17872611218292278, 0.13964157463121396, 0.16554995373540915, 0.16805157059405373, 0.14896246597032825, 0.2282511806425186, 0.18418528264303535, 0.16523449496373432, 0.22377821215761085, 0.18188670648417726, 0.13830861871201938, 0.19095180769245768, 0.1510385948319919, 0.20151149590502293, 0.19038614360952555, 0.15392169008047585, 0.24181857599017198, 0.18093232936275694, 0.4134114093736402, 0.1948063608210443, 0.15093252195254359, 0.15218025912229882, 0.11491766342834397, 0.12822345174395722, 0.24090408581050038, 0.12636874219330052, 0.28238543529032645, 0.15077986284313338, 0.16525215108786173, 0.18270865073726705, 0.07933264120061467, 0.25641236787881583, 0.25488598539279483, 0.17061849205741875, 0.1642236254369862, 0.17448163436480357, 0.15785575674096286, 0.19421600600470446, 0.19816242980352794, 0.1768292218941202, 0.1576056611521286, 0.17660608419703616, 0.04737697739949576, 0.060384421860877224, 0.06081279608258572, 0.07197657784538247, 0.08852113179588617, 0.07163814126400447, 0.05565037486855162, 0.07902791535768539, 0.06578820377647898]}, "mutation_prompt": null}
{"id": "2e7456b3-2c82-4c84-8e65-0203199beb29", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = self.w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            self.w = 0.4 + 0.5 * (1 - _ / self.budget) * (np.mean(pbest_fitness) / gbest_fitness)\n            self.c1 = max(1.5 - 0.5 * _ / self.budget, 1.0)\n            self.c2 = min(1.5 + 0.5 * _ / self.budget, 3.0)\n\n        return gbest_fitness", "name": "AdaptiveInertiaPSO", "description": "Utilizing an adaptive inertia weight strategy based on the fitness progress to dynamically balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 7, "fitness": 0.11025673009961828, "feedback": "The algorithm AdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.21.", "error": "", "parent_id": "0fc7c071-604b-4b0d-addf-4ed88e377f75", "metadata": {"aucs": [0.15420107550948703, 0.13888068826795474, 0.17391225022056078, 0.12415320902568783, 0.37908740898707627, 0.15505092554178534, 0.4944743595871536, 0.5354417687843962, 0.5901898844762725, 0.0, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 0.0, 0.33053013799918385, 0.108556703769918, 0.14536970941904603, 0.03890201911847713, 0.0012186513362246743, 0.02095753207310369, 0.018248263482334326, 0.015778440697697627, 0.028715634953240254, 0.09957860673946684, 0.13453822682480454, 0.11182898222231685, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.9966280846938848, 0.981551669118255, 0.9977908073560393, 0.9971883936519127, 0.9954665288739715, 0.9939003205658109, 0.9930996807607781, 0.9972038536052374, 0.9967422624845681, 0.040244611288094534, 0.0, 0.0, 0.0, 0.00031549654350837564, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 0.010476260715098773, 0.001764133297929349, 0.050452755537683136, 0.09633799966915835, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 9.999999999998899e-05, 0.0, 0.0, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.38687910219304844, 0.369389655960668, 0.41551624597107295, 0.37492674298746886, 0.3635495002255391, 0.3333421916572984, 0.16638963752617897, 0.13655173508858442, 0.19848168692393098, 0.02845297092299026, 0.022899551546542662, 0.011586844451221268, 9.999999999998899e-05, 0.017491213534143624, 9.999999999998899e-05, 9.999999999998899e-05, 0.011998270738705519, 0.0267656688986897, 0.09776183762696944, 0.10332838572019842, 0.06756241161559595, 0.13472413716897358, 0.1633873936770489, 0.12352153638614183, 0.10656307571910695, 0.048975834592276835, 0.07726393575557644, 0.09659627513006197, 0.0962505644704219, 0.21297188303814496, 0.13293251859176236, 0.11367304868336048, 0.11349844378287288, 0.2559808433667635, 0.1859459121169813, 0.1695038562994261, 0.04193679643103054, 0.04183841924070708, 0.03464785118471059, 0.060837062847618806, 0.05994522972202254, 0.06699078797825586, 0.09358769491331409, 0.05050029899063646, 0.03899825549199454, 0.1902215956331027, 0.1733707028491479, 0.19968819492229295, 0.13042389501060625, 0.09811261613336153, 0.10265379575718547, 0.17845237522335522, 0.10123937923327464, 0.18587245586012346, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 0.06711501895360084, 0.056143274529988574, 0.05098059712318026, 0.06718871428537254, 0.1207914665021157, 0.06135863981036349, 0.14458851187536315, 0.1149495025051146, 0.15990199700725372, 0.2495161827982385, 0.15822446835208526, 0.5091538864239127, 0.14130579465163906, 0.11319928693312853, 0.17611561107363582, 0.024163899679540024, 0.02606087979189764, 0.023068498411701333, 0.17276364107890818, 0.12017502569002791, 0.14763022729669195, 0.1271598823246619, 0.11860421076636196, 0.12465113207635137, 0.1749631536133628, 0.1829561746438605, 0.18480798751021388, 0.01833333677421156, 0.010561832547661076, 0.02726960760725905, 0.02488972467258732, 0.014675768650633692, 0.005267023967677087, 0.011591719764459052, 0.019859046697954685, 0.02920215810523774]}, "mutation_prompt": null}
{"id": "8ee44c0c-1a91-43d9-aebd-86e0e9597dba", "solution": "class SelfAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(fitness)\n            if fitness[gbest_idx] < gbest_fitness:\n                gbest = swarm[gbest_idx]\n                gbest_fitness = fitness[gbest_idx]\n\n            w = self.w_max - t * ((self.w_max - self.w_min) / self.budget)\n\n        return gbest_fitness", "name": "SelfAdaptiveInertiaPSO", "description": "Implementing a self-adaptive inertia weight control mechanism to dynamically adjust the exploration and exploitation trade-off during optimization for improved convergence speed.", "configspace": "", "generation": 8, "fitness": 0.09552262556954035, "feedback": "The algorithm SelfAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.20.", "error": "", "parent_id": "0fc7c071-604b-4b0d-addf-4ed88e377f75", "metadata": {"aucs": [0.16777344673360928, 0.18639542379688245, 0.12862855625498903, 0.0436374888366452, 0.1277678586549662, 0.08742026032856942, 0.1340460855446629, 0.09445961838533257, 0.12760032886778228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012370348009134391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01033006013140747, 0.022733118219881776, 0.04489027688256886, 0.03553073748743607, 0.030731479444308984, 0.026905979317543238, 0.13073392819108487, 0.0434700211896778, 0.030329661737607427, 0.009460373396557031, 0.0015731004478015675, 9.999999999998899e-05, 0.05800443839857872, 0.0183337045134645, 0.005317374086201365, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9976940963738575, 0.9967060332161647, 0.997229883298199, 0.9976682048013726, 0.9949796716486635, 0.9971829121456658, 0.9938086975071694, 0.9970261612902208, 0.9973849527888461, 0.054686574438239544, 0.034030944190718615, 9.999999999998899e-05, 9.999999999998899e-05, 0.14991652119388765, 0.029668426967191186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11189297603930315, 0.017540922787755542, 0.04264120424808804, 0.11257473911339844, 0.11071235761062348, 0.012652775628589574, 0.07978966312854086, 0.04008945958915466, 0.00990846602666351, 9.999999999998899e-05, 0.0021387556485377157, 0.03052507044941355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03024480402975782, 9.999999999998899e-05, 0.011373052788576254, 0.05375682842319107, 0.024207619567730765, 9.999999999998899e-05, 0.05033268571677796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009754171677600065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012282520670311436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014399079580894258, 9.999999999998899e-05, 0.038597375832154834, 9.999999999998899e-05, 9.999999999998899e-05, 0.12203604928192968, 0.14880858661136975, 0.14838054695461433, 0.12965279452204836, 0.1143837643512392, 0.07389520820904694, 0.15461914161939183, 0.10590821867358813, 0.14535698798568153, 0.019273127852513783, 0.003921572557116115, 0.0015860616925834625, 0.016595746267954015, 0.02687357420020431, 0.025438951144827082, 0.02256481048691239, 0.029344727542207738, 0.04199231253428937, 0.07590986386105503, 0.11127940274347581, 0.15858404555044658, 0.09855305120349966, 0.06581597144687368, 0.07679926229249245, 0.11776900868708085, 0.11944652090294616, 0.11601827592961778, 0.12611286437597868, 0.12266383985448015, 0.10538673532744869, 0.15769035378994833, 0.18208496741856228, 0.16170240129896796, 0.1228413137922385, 0.11262327068012123, 0.1376370621421802, 0.09055732307723452, 0.05700262092054176, 0.05312889199462878, 0.13093543648301642, 0.08079323539080119, 0.08252936416062562, 0.07601521319256388, 0.04806895759480745, 0.08310336880522062, 0.13876337601812794, 0.09111963409662382, 0.13023563516897507, 0.12089824463780441, 0.11318861252305812, 0.08475235495437461, 0.12245976138762271, 0.11896533879723226, 0.11436239607941989, 9.999999999998899e-05, 0.026524253496552408, 0.05079344082778081, 0.138788664230724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14109415623037436, 0.13126928583058906, 0.1683118526452928, 0.05098059712318026, 0.12583154545352504, 0.16884964862747964, 0.04579985783770002, 0.15666057972376313, 0.07738273717088195, 0.11239833239793529, 0.10530323597322533, 0.05641809035855372, 0.042055450982195874, 0.09944786464571975, 0.021600351495484005, 0.08054375014084603, 0.09227293163367356, 0.06921907370038005, 0.023068498411701333, 0.13738511857448432, 0.1591072407341253, 0.16325735548482267, 0.16093375382199537, 0.17706452856349186, 0.12465113207635137, 0.17975583010535934, 0.18677506925159237, 0.1487269891231663, 0.03367459378510995, 0.029189171921713553, 0.027372588262166042, 0.06708120515720584, 0.0474718717709397, 0.03626503393744673, 0.02844722928195753, 0.038492693682838586, 0.038904350810107124]}, "mutation_prompt": null}
{"id": "79f48017-3127-4227-b798-cae02e4e692e", "solution": "import numpy as np\n\nclass DynamicAccelerationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.a = 1.5\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = self.w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            self.w = 0.4 + 0.5 * (1 - _ / self.budget)\n            self.c1 = max(1.5 - 0.5 * _ / self.budget, 1.0)\n            self.c2 = min(1.5 + 0.5 * _ / self.budget, 3.0)\n\n        return gbest_fitness", "name": "DynamicAccelerationPSO", "description": "Introducing a dynamic acceleration coefficient to adaptively adjust the balance between exploration and exploitation during the optimization process for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fc7c071-604b-4b0d-addf-4ed88e377f75", "metadata": {"aucs": [0.4954967438049144, 0.47592037114443875, 0.568493527765257, 0.380994714380281, 0.4214072736148379, 0.4460133046423541, 0.3253899462004167, 0.5131349064577287, 0.5606094284066262, 0.1964684270781507, 0.1799624149952329, 0.13639866510018583, 0.1674703985852095, 0.25121353364369214, 0.2626308252830579, 0.14819007615308633, 0.15315292608764264, 0.21747589006876622, 0.11271497673766717, 0.08876661043661338, 0.17892889309746984, 0.0926791532929887, 0.09538929614521818, 0.10863293984389888, 0.09492357599954926, 0.0755292081879928, 0.10365501529797017, 0.09852967552384506, 0.050868208050159236, 0.08450679699673369, 0.06796074921961626, 0.05153688499315323, 0.07342215269556707, 0.10241824488067663, 0.07341402321235513, 0.06367869085583111, 0.9976926014181291, 0.9963757805265491, 0.9977977008409235, 0.9971767526008012, 0.9940758434969567, 0.9939018317901719, 0.9943396859127138, 0.9972044787265035, 0.996756632790395, 0.20564911031766664, 0.16316084509638662, 0.19856619081611826, 0.05729895596889634, 0.3627491774213688, 0.11117469578551331, 0.08672656213460994, 0.14091219929513377, 0.07512410312273365, 0.21013635040573986, 0.1757803597239841, 0.0913002080127171, 0.17826381285767567, 0.1445286864060208, 0.16572626974638083, 0.1462691221759025, 0.15266638188779358, 0.21161960030191462, 0.11720920008291158, 0.10243799849626722, 0.11585603116115639, 0.11329253210819246, 0.029926439770906255, 0.09839655420762194, 0.07339419538656489, 0.07633506280625801, 0.12764090543676665, 0.08638321539235061, 0.05263351386753801, 0.07860764982076729, 0.1362275342933641, 0.05270351726726208, 0.09791951046025205, 0.12726811065063848, 0.09022757437049844, 0.1423973071093666, 0.007224233048989448, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010782636668005274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019237191292464928, 9.999999999998899e-05, 0.0327343762061959, 0.05754306010759369, 9.999999999998899e-05, 9.999999999998899e-05, 0.013804140649294694, 0.03269776716554751, 9.999999999998899e-05, 0.037536884996168696, 0.011300888708897006, 0.0514979493538289, 0.04934149081745287, 9.999999999998899e-05, 0.08757064538578929, 0.00460790237057862, 0.0652298424091794, 0.032366425418439926, 0.011113070932861069, 0.03541934785012035, 0.0462961977603924, 0.012912988613793419, 0.07472772445907117, 0.010825678259376192, 0.03676172967779401, 0.024616123400486467, 0.0695660727476094, 0.3171297460833239, 0.3511393219122345, 0.37464225611546054, 0.29719825731119287, 0.260560422564329, 0.3303594086530959, 0.3518048126899226, 0.23348781866408752, 0.37206016822922783, 0.07143124867271466, 0.05831391716876444, 0.08239755814057825, 0.06572899266082022, 0.0777825195806372, 0.08652487896340921, 0.07792420315648252, 0.08404161217844552, 0.0704141155816751, 0.1407136891785914, 0.13439252795575607, 0.17650294612568573, 0.1719382180359076, 0.15152162559931226, 0.11700117697578516, 0.1068486034500038, 0.11854667815452813, 0.15545013876892422, 0.20339180135191293, 0.23254210103038764, 0.25387349115796765, 0.21379740142678838, 0.2052028372518796, 0.15816774389321586, 0.2163949562658669, 0.2372678248223068, 0.1896756309554205, 0.12472511416747889, 0.18282310414738978, 0.08572074360004789, 0.13128164131674658, 0.163181058518439, 0.13472382979746966, 0.13985946654950598, 0.11761482750115138, 0.09803408430517524, 0.16904761069462115, 0.18040554056379132, 0.20852748663873855, 0.17872611218292278, 0.13964157463121396, 0.16554995373540915, 0.16805157059405373, 0.14896246597032825, 0.2282511806425186, 0.18418528264303535, 0.16523449496373432, 0.22377821215761085, 0.18188670648417726, 0.13830861871201938, 0.19095180769245768, 0.1510385948319919, 0.20151149590502293, 0.19038614360952555, 0.15392169008047585, 0.24181857599017198, 0.18093232936275694, 0.4134114093736402, 0.1948063608210443, 0.15093252195254359, 0.15218025912229882, 0.11491766342834397, 0.12822345174395722, 0.24090408581050038, 0.12636874219330052, 0.28238543529032645, 0.15077986284313338, 0.16525215108786173, 0.18270865073726705, 0.07933264120061467, 0.25641236787881583, 0.25488598539279483, 0.17061849205741875, 0.1642236254369862, 0.17448163436480357, 0.15785575674096286, 0.19421600600470446, 0.19816242980352794, 0.1768292218941202, 0.1576056611521286, 0.17660608419703616, 0.04737697739949576, 0.060384421860877224, 0.06081279608258572, 0.07197657784538247, 0.08852113179588617, 0.07163814126400447, 0.05565037486855162, 0.07902791535768539, 0.06578820377647898]}, "mutation_prompt": null}
{"id": "d3bab772-635b-4741-bba8-d3339c12f879", "solution": "import numpy as np\n\nclass DynamicLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.a = 1.5\n        self.search_radius = 1.0\n\n    def dynamic_local_search(self, func, point):\n        fitness = func(point)\n        for _ in range(10):\n            candidate_point = point + np.random.uniform(-self.search_radius, self.search_radius, self.dim)\n            candidate_fitness = func(candidate_point)\n            if candidate_fitness < fitness:\n                point = candidate_point\n                fitness = candidate_fitness\n        return point, fitness\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = self.w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            updated_swarm = np.array([self.dynamic_local_search(func, point) for point in swarm])\n            swarm, fitness = updated_swarm[:, 0], updated_swarm[:, 1]\n\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            self.w = 0.4 + 0.5 * (1 - _ / self.budget)\n            self.c1 = max(1.5 - 0.5 * _ / self.budget, 1.0)\n            self.c2 = min(1.5 + 0.5 * _ / self.budget, 3.0)\n            self.search_radius = 1.0 / (1 + 0.1 * _)\n\n        return gbest_fitness", "name": "DynamicLocalSearchPSO", "description": "Implementing a dynamic local search strategy to exploit promising regions by adaptively adjusting the search radius based on past performance to improve convergence speed.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('setting an array element with a sequence. The requested array has an inhomogeneous shape after 2 dimensions. The detected shape was (5, 2) + inhomogeneous part.').", "error": "ValueError('setting an array element with a sequence. The requested array has an inhomogeneous shape after 2 dimensions. The detected shape was (5, 2) + inhomogeneous part.')", "parent_id": "0fc7c071-604b-4b0d-addf-4ed88e377f75", "metadata": {}, "mutation_prompt": null}
{"id": "bd7aeda7-36eb-459e-b329-b792091e1f9f", "solution": "import numpy as np\n\nclass DynamicAccelerationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.a = 1.5\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = self.w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            self.w = 0.4 + 0.5 * (1 - _ / self.budget)\n            self.c1 = max(1.5 - 0.5 * _ / self.budget, 1.0)\n            self.c2 = min(1.5 + 0.5 * _ / self.budget, 3.0)\n\n        return gbest_fitness", "name": "DynamicAccelerationPSO", "description": "Introducing a dynamic acceleration coefficient to adaptively adjust the balance between exploration and exploitation during the optimization process for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fc7c071-604b-4b0d-addf-4ed88e377f75", "metadata": {"aucs": [0.4954967438049144, 0.47592037114443875, 0.568493527765257, 0.380994714380281, 0.4214072736148379, 0.4460133046423541, 0.3253899462004167, 0.5131349064577287, 0.5606094284066262, 0.1964684270781507, 0.1799624149952329, 0.13639866510018583, 0.1674703985852095, 0.25121353364369214, 0.2626308252830579, 0.14819007615308633, 0.15315292608764264, 0.21747589006876622, 0.11271497673766717, 0.08876661043661338, 0.17892889309746984, 0.0926791532929887, 0.09538929614521818, 0.10863293984389888, 0.09492357599954926, 0.0755292081879928, 0.10365501529797017, 0.09852967552384506, 0.050868208050159236, 0.08450679699673369, 0.06796074921961626, 0.05153688499315323, 0.07342215269556707, 0.10241824488067663, 0.07341402321235513, 0.06367869085583111, 0.9976926014181291, 0.9963757805265491, 0.9977977008409235, 0.9971767526008012, 0.9940758434969567, 0.9939018317901719, 0.9943396859127138, 0.9972044787265035, 0.996756632790395, 0.20564911031766664, 0.16316084509638662, 0.19856619081611826, 0.05729895596889634, 0.3627491774213688, 0.11117469578551331, 0.08672656213460994, 0.14091219929513377, 0.07512410312273365, 0.21013635040573986, 0.1757803597239841, 0.0913002080127171, 0.17826381285767567, 0.1445286864060208, 0.16572626974638083, 0.1462691221759025, 0.15266638188779358, 0.21161960030191462, 0.11720920008291158, 0.10243799849626722, 0.11585603116115639, 0.11329253210819246, 0.029926439770906255, 0.09839655420762194, 0.07339419538656489, 0.07633506280625801, 0.12764090543676665, 0.08638321539235061, 0.05263351386753801, 0.07860764982076729, 0.1362275342933641, 0.05270351726726208, 0.09791951046025205, 0.12726811065063848, 0.09022757437049844, 0.1423973071093666, 0.007224233048989448, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010782636668005274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019237191292464928, 9.999999999998899e-05, 0.0327343762061959, 0.05754306010759369, 9.999999999998899e-05, 9.999999999998899e-05, 0.013804140649294694, 0.03269776716554751, 9.999999999998899e-05, 0.037536884996168696, 0.011300888708897006, 0.0514979493538289, 0.04934149081745287, 9.999999999998899e-05, 0.08757064538578929, 0.00460790237057862, 0.0652298424091794, 0.032366425418439926, 0.011113070932861069, 0.03541934785012035, 0.0462961977603924, 0.012912988613793419, 0.07472772445907117, 0.010825678259376192, 0.03676172967779401, 0.024616123400486467, 0.0695660727476094, 0.3171297460833239, 0.3511393219122345, 0.37464225611546054, 0.29719825731119287, 0.260560422564329, 0.3303594086530959, 0.3518048126899226, 0.23348781866408752, 0.37206016822922783, 0.07143124867271466, 0.05831391716876444, 0.08239755814057825, 0.06572899266082022, 0.0777825195806372, 0.08652487896340921, 0.07792420315648252, 0.08404161217844552, 0.0704141155816751, 0.1407136891785914, 0.13439252795575607, 0.17650294612568573, 0.1719382180359076, 0.15152162559931226, 0.11700117697578516, 0.1068486034500038, 0.11854667815452813, 0.15545013876892422, 0.20339180135191293, 0.23254210103038764, 0.25387349115796765, 0.21379740142678838, 0.2052028372518796, 0.15816774389321586, 0.2163949562658669, 0.2372678248223068, 0.1896756309554205, 0.12472511416747889, 0.18282310414738978, 0.08572074360004789, 0.13128164131674658, 0.163181058518439, 0.13472382979746966, 0.13985946654950598, 0.11761482750115138, 0.09803408430517524, 0.16904761069462115, 0.18040554056379132, 0.20852748663873855, 0.17872611218292278, 0.13964157463121396, 0.16554995373540915, 0.16805157059405373, 0.14896246597032825, 0.2282511806425186, 0.18418528264303535, 0.16523449496373432, 0.22377821215761085, 0.18188670648417726, 0.13830861871201938, 0.19095180769245768, 0.1510385948319919, 0.20151149590502293, 0.19038614360952555, 0.15392169008047585, 0.24181857599017198, 0.18093232936275694, 0.4134114093736402, 0.1948063608210443, 0.15093252195254359, 0.15218025912229882, 0.11491766342834397, 0.12822345174395722, 0.24090408581050038, 0.12636874219330052, 0.28238543529032645, 0.15077986284313338, 0.16525215108786173, 0.18270865073726705, 0.07933264120061467, 0.25641236787881583, 0.25488598539279483, 0.17061849205741875, 0.1642236254369862, 0.17448163436480357, 0.15785575674096286, 0.19421600600470446, 0.19816242980352794, 0.1768292218941202, 0.1576056611521286, 0.17660608419703616, 0.04737697739949576, 0.060384421860877224, 0.06081279608258572, 0.07197657784538247, 0.08852113179588617, 0.07163814126400447, 0.05565037486855162, 0.07902791535768539, 0.06578820377647898]}, "mutation_prompt": null}
{"id": "100d330a-b9a9-4a23-98df-1e42e368095d", "solution": "import numpy as np\n\nclass DynamicAccelerationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.a = 1.5\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = self.w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            self.w = 0.4 + 0.5 * (1 - _ / self.budget)\n            self.c1 = max(1.5 - 0.5 * _ / self.budget, 1.0)\n            self.c2 = min(1.5 + 0.5 * _ / self.budget, 3.0)\n\n        return gbest_fitness", "name": "DynamicAccelerationPSO", "description": "Introducing a dynamic acceleration coefficient to adaptively adjust the balance between exploration and exploitation during the optimization process for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fc7c071-604b-4b0d-addf-4ed88e377f75", "metadata": {"aucs": [0.4954967438049144, 0.47592037114443875, 0.568493527765257, 0.380994714380281, 0.4214072736148379, 0.4460133046423541, 0.3253899462004167, 0.5131349064577287, 0.5606094284066262, 0.1964684270781507, 0.1799624149952329, 0.13639866510018583, 0.1674703985852095, 0.25121353364369214, 0.2626308252830579, 0.14819007615308633, 0.15315292608764264, 0.21747589006876622, 0.11271497673766717, 0.08876661043661338, 0.17892889309746984, 0.0926791532929887, 0.09538929614521818, 0.10863293984389888, 0.09492357599954926, 0.0755292081879928, 0.10365501529797017, 0.09852967552384506, 0.050868208050159236, 0.08450679699673369, 0.06796074921961626, 0.05153688499315323, 0.07342215269556707, 0.10241824488067663, 0.07341402321235513, 0.06367869085583111, 0.9976926014181291, 0.9963757805265491, 0.9977977008409235, 0.9971767526008012, 0.9940758434969567, 0.9939018317901719, 0.9943396859127138, 0.9972044787265035, 0.996756632790395, 0.20564911031766664, 0.16316084509638662, 0.19856619081611826, 0.05729895596889634, 0.3627491774213688, 0.11117469578551331, 0.08672656213460994, 0.14091219929513377, 0.07512410312273365, 0.21013635040573986, 0.1757803597239841, 0.0913002080127171, 0.17826381285767567, 0.1445286864060208, 0.16572626974638083, 0.1462691221759025, 0.15266638188779358, 0.21161960030191462, 0.11720920008291158, 0.10243799849626722, 0.11585603116115639, 0.11329253210819246, 0.029926439770906255, 0.09839655420762194, 0.07339419538656489, 0.07633506280625801, 0.12764090543676665, 0.08638321539235061, 0.05263351386753801, 0.07860764982076729, 0.1362275342933641, 0.05270351726726208, 0.09791951046025205, 0.12726811065063848, 0.09022757437049844, 0.1423973071093666, 0.007224233048989448, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010782636668005274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019237191292464928, 9.999999999998899e-05, 0.0327343762061959, 0.05754306010759369, 9.999999999998899e-05, 9.999999999998899e-05, 0.013804140649294694, 0.03269776716554751, 9.999999999998899e-05, 0.037536884996168696, 0.011300888708897006, 0.0514979493538289, 0.04934149081745287, 9.999999999998899e-05, 0.08757064538578929, 0.00460790237057862, 0.0652298424091794, 0.032366425418439926, 0.011113070932861069, 0.03541934785012035, 0.0462961977603924, 0.012912988613793419, 0.07472772445907117, 0.010825678259376192, 0.03676172967779401, 0.024616123400486467, 0.0695660727476094, 0.3171297460833239, 0.3511393219122345, 0.37464225611546054, 0.29719825731119287, 0.260560422564329, 0.3303594086530959, 0.3518048126899226, 0.23348781866408752, 0.37206016822922783, 0.07143124867271466, 0.05831391716876444, 0.08239755814057825, 0.06572899266082022, 0.0777825195806372, 0.08652487896340921, 0.07792420315648252, 0.08404161217844552, 0.0704141155816751, 0.1407136891785914, 0.13439252795575607, 0.17650294612568573, 0.1719382180359076, 0.15152162559931226, 0.11700117697578516, 0.1068486034500038, 0.11854667815452813, 0.15545013876892422, 0.20339180135191293, 0.23254210103038764, 0.25387349115796765, 0.21379740142678838, 0.2052028372518796, 0.15816774389321586, 0.2163949562658669, 0.2372678248223068, 0.1896756309554205, 0.12472511416747889, 0.18282310414738978, 0.08572074360004789, 0.13128164131674658, 0.163181058518439, 0.13472382979746966, 0.13985946654950598, 0.11761482750115138, 0.09803408430517524, 0.16904761069462115, 0.18040554056379132, 0.20852748663873855, 0.17872611218292278, 0.13964157463121396, 0.16554995373540915, 0.16805157059405373, 0.14896246597032825, 0.2282511806425186, 0.18418528264303535, 0.16523449496373432, 0.22377821215761085, 0.18188670648417726, 0.13830861871201938, 0.19095180769245768, 0.1510385948319919, 0.20151149590502293, 0.19038614360952555, 0.15392169008047585, 0.24181857599017198, 0.18093232936275694, 0.4134114093736402, 0.1948063608210443, 0.15093252195254359, 0.15218025912229882, 0.11491766342834397, 0.12822345174395722, 0.24090408581050038, 0.12636874219330052, 0.28238543529032645, 0.15077986284313338, 0.16525215108786173, 0.18270865073726705, 0.07933264120061467, 0.25641236787881583, 0.25488598539279483, 0.17061849205741875, 0.1642236254369862, 0.17448163436480357, 0.15785575674096286, 0.19421600600470446, 0.19816242980352794, 0.1768292218941202, 0.1576056611521286, 0.17660608419703616, 0.04737697739949576, 0.060384421860877224, 0.06081279608258572, 0.07197657784538247, 0.08852113179588617, 0.07163814126400447, 0.05565037486855162, 0.07902791535768539, 0.06578820377647898]}, "mutation_prompt": null}
{"id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "DynamicInertiaWeightPSO", "description": "Introducing a dynamic inertia weight adaptation mechanism that adjusts the inertia weight based on the fitness improvement to balance exploration and exploitation dynamically for faster convergence.", "configspace": "", "generation": 13, "fitness": 0.20607138463164978, "feedback": "The algorithm DynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.22.", "error": "", "parent_id": "0fc7c071-604b-4b0d-addf-4ed88e377f75", "metadata": {"aucs": [0.9160688689853619, 0.9627369441870708, 0.9789426004079395, 0.670674565592865, 0.9729027966168862, 0.34958738629833563, 0.9589372902012749, 0.7816008827970415, 0.6008929617018562, 0.2793017092182567, 0.04286587254480523, 0.2415578930904857, 0.18897633269227188, 9.999999999998899e-05, 0.41369663444211635, 9.999999999998899e-05, 0.2749089142182791, 0.274079281184637, 0.09465595041048769, 0.08066791037475962, 0.12738436688675758, 0.1023637328907685, 0.12601391026791475, 0.15025291814887753, 0.08282817807923215, 0.19357264492257098, 0.13816960891899255, 0.09302878049978935, 0.08116089004276472, 0.11331204727233868, 0.10252356063317114, 0.057827299225806206, 0.09839023089886378, 0.07827530845986219, 0.1206693504554367, 0.045399238195044433, 0.9927849872368487, 0.14218184515757404, 0.9964351801215002, 0.9917768355989791, 0.13022165321704327, 0.9844161357011966, 0.9885953031488375, 0.9941008884383941, 0.9967359679378507, 0.20761795095272417, 0.15151833916510482, 0.16147800308026583, 0.08024314085584161, 0.25360776683602326, 0.11863778252532542, 0.0878151249972654, 0.05865156993007714, 0.2078678006217145, 0.21597664276664885, 0.21978677516595668, 0.07126360366819062, 0.2848283309370818, 0.2701185863176587, 0.08258022860938963, 0.1171823922078109, 0.22682095992895257, 0.09113377219024443, 0.1388006861396891, 0.17990709774223745, 0.16681388700830646, 0.146280049686505, 0.15735241821869062, 0.0097802148924655, 0.1303735527008324, 0.13429722170606329, 0.2224907645082006, 0.1372687290223732, 0.05858198641930268, 9.999999999998899e-05, 0.16296170339359228, 0.13008615412786406, 0.10958596046466151, 0.186598032726645, 9.999999999998899e-05, 0.13312662929887742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1427416095267965, 9.999999999998899e-05, 9.999999999998899e-05, 0.01921209801996937, 9.999999999998899e-05, 0.012831314242139569, 0.02689207498628765, 0.04951487976993063, 0.04651985347627796, 9.999999999998899e-05, 0.007225259901669001, 0.0981457749167377, 0.05099694051086712, 0.012238332475397184, 0.3179475124554423, 0.03386334991864037, 0.04704235136589652, 0.17306844339715044, 0.0029966702390349376, 0.14348164312223255, 9.999999999998899e-05, 0.06792046699058207, 0.12153192291910442, 0.09870030589162704, 0.274203558515678, 0.06775404136998509, 0.03461473721611197, 0.07560240885064717, 0.22402746335007795, 0.10332524368990526, 0.04276567509702689, 0.09655243892122034, 0.539341545041764, 0.4527363319558071, 0.5349066667015143, 0.16250049621966378, 0.24706807568641387, 0.44361592420007745, 0.5211888572740238, 0.2870618340876847, 0.17388671894563446, 0.09930536317013938, 0.09124399183543663, 0.0199594973946019, 0.06735292015808059, 0.076574150081132, 0.09942001551504387, 0.06331777088368651, 0.14896448624559833, 0.0738246281675512, 0.14581709866942605, 0.19046826496189784, 0.26383090622411665, 0.26344795743877936, 0.13364136295500084, 0.35545459216363173, 0.19985017410665207, 0.27575573559946176, 0.18017974136345805, 0.14466960103604343, 0.1848404862988905, 0.16812430293882685, 0.23016604819458952, 0.1805050248348019, 0.18720726920473374, 0.24554850758706037, 0.2620731380248723, 0.2453153577732472, 0.2521901073349009, 0.0855675807440679, 0.12757386397431014, 0.19965633558278728, 0.18105212752312239, 0.17834176087986287, 0.2403559619762623, 0.11907709972960279, 0.15392654860443422, 0.23450743387267403, 0.22368382319249513, 0.20709794193094988, 0.20280108729817103, 0.15235546590782834, 0.16059387271968295, 0.3216845006295377, 0.2147018670114006, 0.21562671808279887, 0.20199212407268174, 0.20379089225614722, 0.20097719589759788, 0.19606866479435425, 0.20275167341001676, 0.25776969651481296, 0.23049671345814626, 0.1749563886122396, 0.18547304583648327, 0.1599440464210229, 0.33369254787578306, 0.16555705738650273, 0.1700566417156546, 0.2023292755387226, 0.17069560574984133, 0.14686094325410537, 0.1593062735542249, 0.15380313986662553, 0.25023217721557145, 0.11364261047903512, 0.3326427270821064, 0.2001796618025241, 0.05936541571470155, 0.17574209295537202, 0.10443774358030367, 0.10550545821857282, 0.11301941221750766, 0.18846423295768877, 0.21119600284988682, 0.18928245588399184, 0.1940454953429288, 0.1913026281435528, 0.18431880529449707, 0.19896786482487805, 0.2536988117157928, 0.19272300165508527, 0.12657190085356884, 0.07654240462859219, 0.07007987392044868, 0.0571188967932823, 0.1031902281134579, 0.06471558144278011, 0.10520556378300283, 0.0927005753498985, 0.09412070419796714]}, "mutation_prompt": null}
{"id": "0499887a-9969-44f7-9178-35cc027d09c1", "solution": "import numpy as np\n\nclass DynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_min = 0.1\n        self.mutation_max = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        mutation_rate = self.mutation_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = mutation_rate * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            mutation_rate = self.mutation_min + (_ / self.budget) * (self.mutation_max - self.mutation_min)\n\n        return gbest_fitness", "name": "DynamicMutationPSO", "description": "Implementing a dynamic mutation strategy that adjusts the mutation rate based on the fitness improvement to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 14, "fitness": 0.10370402705246974, "feedback": "The algorithm DynamicMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.1616769945833143, 0.34613779531186073, 0.22381576206837595, 0.06900358104261617, 0.13449788474089142, 0.10079707205438138, 0.0835446592841157, 0.24275733814538014, 0.1459047753292303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09217227607423806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1673493227459949, 0.053960524814121724, 0.1656998349515425, 0.10643534417588885, 0.11665810459464587, 0.11431296419140036, 0.08423882271964067, 0.07354999005957219, 0.13570563339990427, 0.12239293303619414, 9.999999999998899e-05, 0.10904043146857911, 0.10413083358569131, 0.061199512796313305, 0.037532400258599274, 0.04146214747275556, 0.1354193269934394, 9.999999999998899e-05, 0.13350091831397948, 0.09316616494210395, 0.09547549607630612, 0.06508066793099843, 0.07339597587250046, 0.13347743374472754, 0.05193134814303135, 0.08894652744852505, 0.1468321702097063, 0.09473521305665422, 0.015550965112839932, 0.040606059261012906, 9.999999999998899e-05, 0.11563588611148734, 0.021787856531558125, 0.04425422756854491, 9.999999999998899e-05, 0.07986402891420108, 0.18340044298444258, 0.07228959481620112, 0.10244219640834196, 0.12719030089292804, 0.057084904655976376, 0.04954836861693168, 0.1521481617787689, 0.1834603840528949, 0.05572274123306853, 0.15036826219422073, 0.06304444755515137, 0.13371268563847594, 0.06573125202433716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005692710272272916, 0.07587651005287321, 9.999999999998899e-05, 9.999999999998899e-05, 0.020628042566405602, 9.999999999998899e-05, 9.999999999998899e-05, 0.04565190937796193, 0.13349431266809697, 9.999999999998899e-05, 0.01498671479148761, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03440255333424813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04594143983293908, 0.09214988056300955, 0.06936517572455325, 9.999999999998899e-05, 0.02376447541094473, 0.0936453719849375, 0.06895115933440843, 0.057266230159652154, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047689433201632214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117813268081407, 0.14394517191086886, 0.4101241395855455, 0.32043035506307793, 0.1364397666218501, 0.36052935349045934, 0.06448765956033076, 0.14826388574169502, 0.13050816736883752, 0.14256081819004718, 0.08378649306859809, 9.999999999998899e-05, 0.0124056569452341, 0.02897459372143807, 0.11678336888366792, 0.06375788351422107, 0.06080467645542065, 0.07433322667645914, 0.09086479480297438, 0.1375047134062003, 0.18563918057473783, 0.14402964389134032, 0.19687497447494473, 0.285234198582233, 0.18290275965757996, 0.26733584038899505, 0.22410500875359785, 0.12396215587167392, 0.21394376680245863, 0.3077457209036192, 0.15012780187956942, 0.19549090159173044, 0.16412560067377857, 0.1962776240158428, 0.22343672037355478, 0.22551082960478408, 0.15339955341817035, 0.18884352937742954, 0.1464599552665088, 0.11307739012449691, 0.11807454376777227, 0.14808618186771727, 0.12066123728089384, 0.1839862200813287, 0.16810658376157261, 0.046644541813706364, 0.20780161165367395, 0.15486996081853155, 0.21400007092822293, 0.2257321231496494, 0.15183782677711555, 0.22273067830354654, 0.2668254348946405, 0.21499130341223327, 0.20206323400370552, 0.2095252714151139, 0.2068573306463778, 0.18753157689760225, 0.1630822248151722, 0.17258957693444443, 0.16021685166228528, 0.23300296298690604, 0.1596304766872665, 0.17097261973651745, 0.15661635789306527, 0.17801442597791195, 0.13835358892920235, 0.17189666803638082, 0.18638470299753718, 0.16779917503822905, 0.10405423938375513, 0.11388555582368065, 0.10413318455572351, 0.0807300057803908, 0.10718176028126314, 0.08403124528694228, 0.08722543266872185, 0.23872921031816619, 0.16067325985655456, 0.10399983728149031, 0.06582073063612492, 0.10481784052758847, 0.18003603828510917, 0.19410455081641453, 0.1744516856007311, 0.17320922411457884, 0.18904744817884012, 0.2227786505762227, 0.18673039843021633, 0.19858270558447289, 0.20452269723444505, 0.06625122161676844, 0.08599346035772337, 0.08688369094010684, 0.07688783707506996, 0.1127183740434401, 0.09228540641808891, 0.093174635770788, 0.07962281218520184, 0.08842845935771038]}, "mutation_prompt": null}
{"id": "44a22e46-ab4f-4fc0-9898-b512895000fd", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "DynamicInertiaWeightPSO", "description": "Introducing a dynamic inertia weight adaptation mechanism that adjusts the inertia weight based on the fitness improvement to balance exploration and exploitation dynamically for faster convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.9160688689853619, 0.9627369441870708, 0.9789426004079395, 0.670674565592865, 0.9729027966168862, 0.34958738629833563, 0.9589372902012749, 0.7816008827970415, 0.6008929617018562, 0.2793017092182567, 0.04286587254480523, 0.2415578930904857, 0.18897633269227188, 9.999999999998899e-05, 0.41369663444211635, 9.999999999998899e-05, 0.2749089142182791, 0.274079281184637, 0.09465595041048769, 0.08066791037475962, 0.12738436688675758, 0.1023637328907685, 0.12601391026791475, 0.15025291814887753, 0.08282817807923215, 0.19357264492257098, 0.13816960891899255, 0.09302878049978935, 0.08116089004276472, 0.11331204727233868, 0.10252356063317114, 0.057827299225806206, 0.09839023089886378, 0.07827530845986219, 0.1206693504554367, 0.045399238195044433, 0.9927849872368487, 0.14218184515757404, 0.9964351801215002, 0.9917768355989791, 0.13022165321704327, 0.9844161357011966, 0.9885953031488375, 0.9941008884383941, 0.9967359679378507, 0.20761795095272417, 0.15151833916510482, 0.16147800308026583, 0.08024314085584161, 0.25360776683602326, 0.11863778252532542, 0.0878151249972654, 0.05865156993007714, 0.2078678006217145, 0.21597664276664885, 0.21978677516595668, 0.07126360366819062, 0.2848283309370818, 0.2701185863176587, 0.08258022860938963, 0.1171823922078109, 0.22682095992895257, 0.09113377219024443, 0.1388006861396891, 0.17990709774223745, 0.16681388700830646, 0.146280049686505, 0.15735241821869062, 0.0097802148924655, 0.1303735527008324, 0.13429722170606329, 0.2224907645082006, 0.1372687290223732, 0.05858198641930268, 9.999999999998899e-05, 0.16296170339359228, 0.13008615412786406, 0.10958596046466151, 0.186598032726645, 9.999999999998899e-05, 0.13312662929887742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1427416095267965, 9.999999999998899e-05, 9.999999999998899e-05, 0.01921209801996937, 9.999999999998899e-05, 0.012831314242139569, 0.02689207498628765, 0.04951487976993063, 0.04651985347627796, 9.999999999998899e-05, 0.007225259901669001, 0.0981457749167377, 0.05099694051086712, 0.012238332475397184, 0.3179475124554423, 0.03386334991864037, 0.04704235136589652, 0.17306844339715044, 0.0029966702390349376, 0.14348164312223255, 9.999999999998899e-05, 0.06792046699058207, 0.12153192291910442, 0.09870030589162704, 0.274203558515678, 0.06775404136998509, 0.03461473721611197, 0.07560240885064717, 0.22402746335007795, 0.10332524368990526, 0.04276567509702689, 0.09655243892122034, 0.539341545041764, 0.4527363319558071, 0.5349066667015143, 0.16250049621966378, 0.24706807568641387, 0.44361592420007745, 0.5211888572740238, 0.2870618340876847, 0.17388671894563446, 0.09930536317013938, 0.09124399183543663, 0.0199594973946019, 0.06735292015808059, 0.076574150081132, 0.09942001551504387, 0.06331777088368651, 0.14896448624559833, 0.0738246281675512, 0.14581709866942605, 0.19046826496189784, 0.26383090622411665, 0.26344795743877936, 0.13364136295500084, 0.35545459216363173, 0.19985017410665207, 0.27575573559946176, 0.18017974136345805, 0.14466960103604343, 0.1848404862988905, 0.16812430293882685, 0.23016604819458952, 0.1805050248348019, 0.18720726920473374, 0.24554850758706037, 0.2620731380248723, 0.2453153577732472, 0.2521901073349009, 0.0855675807440679, 0.12757386397431014, 0.19965633558278728, 0.18105212752312239, 0.17834176087986287, 0.2403559619762623, 0.11907709972960279, 0.15392654860443422, 0.23450743387267403, 0.22368382319249513, 0.20709794193094988, 0.20280108729817103, 0.15235546590782834, 0.16059387271968295, 0.3216845006295377, 0.2147018670114006, 0.21562671808279887, 0.20199212407268174, 0.20379089225614722, 0.20097719589759788, 0.19606866479435425, 0.20275167341001676, 0.25776969651481296, 0.23049671345814626, 0.1749563886122396, 0.18547304583648327, 0.1599440464210229, 0.33369254787578306, 0.16555705738650273, 0.1700566417156546, 0.2023292755387226, 0.17069560574984133, 0.14686094325410537, 0.1593062735542249, 0.15380313986662553, 0.25023217721557145, 0.11364261047903512, 0.3326427270821064, 0.2001796618025241, 0.05936541571470155, 0.17574209295537202, 0.10443774358030367, 0.10550545821857282, 0.11301941221750766, 0.18846423295768877, 0.21119600284988682, 0.18928245588399184, 0.1940454953429288, 0.1913026281435528, 0.18431880529449707, 0.19896786482487805, 0.2536988117157928, 0.19272300165508527, 0.12657190085356884, 0.07654240462859219, 0.07007987392044868, 0.0571188967932823, 0.1031902281134579, 0.06471558144278011, 0.10520556378300283, 0.0927005753498985, 0.09412070419796714]}, "mutation_prompt": null}
{"id": "1cac5af3-2948-4a1b-8097-c7734b07c0c8", "solution": "import numpy as np\n\nclass ModifiedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.5\n        self.c2_min = 1.5\n        self.c2_max = 2.5\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n        c1 = self.c1_max\n        c2 = self.c2_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + c1 * r1 * (pbest - swarm) + c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n            # Update acceleration coefficients based on population diversity\n            diversity = np.std(swarm, axis=0)\n            c1 = self.c1_min + (np.sum(diversity) / self.dim) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (np.max(diversity) / 5.0) * (self.c2_max - self.c2_min)\n\n        return gbest_fitness", "name": "ModifiedDynamicInertiaWeightPSO", "description": "Introducing a dynamic adaptation of acceleration coefficients, c1 and c2, based on population diversity to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 16, "fitness": 0.0506736388754351, "feedback": "The algorithm ModifiedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.12.", "error": "", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.11701666453795767, 0.08200073600713731, 0.11564361348734942, 0.049431207174498226, 0.08604763475866917, 0.043462872045649026, 0.051890966747961786, 0.06160245108544382, 0.10421677668120377, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.005900712013795273, 0.022659594669647398, 0.0019504285802004473, 0.03847378633041865, 0.02379522468548656, 0.0, 0.0, 0.014162453146517318, 0.0, 0.0, 0.004360411275141418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12727464357099927, 0.9956046593545257, 0.15632344480645677, 0.16111033541753583, 0.11600317561189621, 0.15222356707617113, 0.0890116836527961, 0.9970044976430504, 0.9984236228661897, 0.12306247160682193, 0.0, 0.0, 0.0, 0.08506662957682598, 0.0063945076843435755, 0.0, 0.0, 0.0, 0.03232362276045497, 0.04486966746205978, 0.0, 0.015861776790754067, 0.0, 0.0, 0.026181922062048946, 0.013119494814686772, 0.042313960835611786, 0.0, 0.0, 0.0, 0.0, 0.0, 9.999999999998899e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0007581712107194161, 0.0, 0.02395996319758431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.999999999998899e-05, 0.0, 0.0, 0.0, 0.040409860129870356, 0.1288291858616436, 0.18055115977610692, 0.08209082601780082, 0.08041876921715996, 0.056101596753492466, 0.1099946431795168, 0.08538419443477974, 0.13867124115900042, 0.039181656154876454, 0.0, 0.0, 0.0, 0.005924792368666054, 0.0, 0.0, 0.0, 0.042635167593837786, 0.0569233726682411, 0.06726366127807482, 0.05459392587769929, 0.09846289938816166, 0.06572254448697346, 0.05633684591928945, 0.04322879336375629, 0.04010129972004839, 0.07717165476235788, 0.09116171693588626, 0.09734098756458698, 0.10350813781504964, 0.12216738186278364, 0.08290739212077258, 0.08961516613058718, 0.11411347464502597, 0.10004631021926003, 0.07123303423380878, 0.04494297036849215, 0.03934698866872255, 0.034551307077603455, 0.044555131067182674, 0.03400280595046101, 0.045298215618592264, 0.07940032922538287, 0.038433917477429747, 0.03699242557613014, 0.11382573151225406, 0.09069183404311099, 0.09782216331437554, 0.09121143776311724, 0.09680572415012523, 0.06900071412896536, 0.12237199858757541, 0.07328531128671567, 0.08893517487915592, 0.0, 0.0, 0.0, 0.0, 0.0, 0.15240841996045962, 0.0, 0.0, 0.0, 0.09130884785149407, 0.05604888032687083, 0.0508856862033461, 0.06709542404813529, 0.12070353966556191, 0.019125046257120082, 0.05500145212660812, 0.08620830431885007, 0.0905449873784635, 0.03590455183669672, 0.03957798628310871, 0.01630315145370509, 0.01850796326103321, 0.03864320296177104, 0.0454156150021221, 0.03880704613032593, 0.04681456465051925, 0.02297079570432181, 0.10087028022501032, 0.1414524206039781, 0.1475449842687161, 0.10726544462840137, 0.12100474271211026, 0.12456358843521431, 0.09945213886469684, 0.09002389585045223, 0.11833020437352226, 0.0, 0.0020608381811066945, 0.03056090500445119, 0.022668787739794083, 0.0057755656362813435, 0.002760918426367609, 0.013265527482385742, 0.011204542022863473, 0.02115252365499931]}, "mutation_prompt": null}
{"id": "bb7f8374-2f5c-41a8-bb52-d4a4717a7b99", "solution": "import numpy as np\n\nclass EnhancedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def initialize_population(self):\n        return np.array([np.linspace(-5.0, 5.0, self.dim) for _ in range(self.dim)]) + \\\n               np.random.uniform(-0.5, 0.5, (self.dim, self.dim))\n\n    def __call__(self, func):\n        swarm = self.initialize_population()\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedDynamicInertiaWeightPSO", "description": "Implementing a diverse population initialization strategy by using Latin hypercube sampling to enhance exploration and diversity in the search space.", "configspace": "", "generation": 17, "fitness": 0.04599901809440658, "feedback": "The algorithm EnhancedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.0739144660964095, 0.024299957630433022, 0.027530288623454524, 0.10651168178769876, 0.1210665913743072, 0.08599975353096068, 0.07591122486841217, 0.0626631439348263, 0.024649019974509412, 0.0465950289446988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02166577235786704, 0.02128557369474615, 0.03863342541524217, 0.03276365789235591, 9.999999999998899e-05, 9.999999999998899e-05, 0.09686505570463655, 0.06672378158613812, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07045699416787432, 0.020159995832764954, 0.014885808841893278, 0.03772178619334898, 0.02722904155701822, 0.022004189162983856, 0.031562381608715495, 9.999999999998899e-05, 9.999999999998899e-05, 0.03837535206420528, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832664145530652, 9.999999999998899e-05, 0.004521825456018647, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07568277143112356, 0.00414624824296006, 0.026656606987624176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032111433914018273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016680110008927107, 0.04909183939001993, 0.05671862504090763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037152552637966796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08053896150802142, 0.10688826118094874, 0.044778009479087055, 0.10021560020652054, 0.15357108161852995, 0.0644878803151987, 0.08395999199760551, 0.11170922944432149, 0.0798660721733917, 0.07377726069393631, 0.0007451024518903004, 9.999999999998899e-05, 9.999999999998899e-05, 0.03360486754105063, 9.999999999998899e-05, 0.05624052877967711, 0.04156762069872644, 9.999999999998899e-05, 0.10867617853004086, 0.1475320507933311, 0.14696396779291276, 0.17659679841593312, 0.14044428218939098, 0.2753078668467961, 0.12619448552721224, 0.1305513974223219, 0.16826447984305537, 0.04998986842604303, 0.038977387015787235, 9.999999999998899e-05, 0.10569488435842145, 0.11446002482835704, 0.1034397430057028, 0.11380000040085125, 0.12084397918385548, 0.11971249806010387, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09587444236117826, 0.08504069761853383, 0.05280659708029112, 0.2408581564584118, 0.062330727445695455, 0.05846171876148343, 0.12271364763443526, 0.21538840739500742, 0.1299208745781243, 0.12324023458753941, 0.11782702011489421, 0.12444079804913966, 0.09890654300197244, 0.20681235219294603, 0.17388612770987566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033947067119504015, 0.15309458540239118, 0.02223590639891304, 0.05223543118724905, 0.029688394530333007, 0.10699479221595976, 0.035928239428643205, 0.061239669491134574, 0.016430303694276116, 0.0246102488178096, 0.024636622761571525, 0.024652353404368887, 0.05837462397212201, 0.10058422073803563, 0.06493949313330882, 0.07006875467376616, 0.03367227243837112, 0.056270414476227604, 0.2145597953599051, 0.17636297797511413, 0.22222991078637644, 0.22289359525382046, 0.1843624937565287, 0.19191545928911713, 0.22736183459052595, 0.23837926045267654, 0.26560127965575797, 0.08154298200581467, 0.036938067813754194, 0.04732333910330522, 0.03990801539779221, 0.03591434765274992, 0.053307365838253684, 0.028301204017537773, 0.04845651763093939, 0.0012550253215607432]}, "mutation_prompt": null}
{"id": "a9e885bc-c859-46cd-a20a-94f2fcb1fa6c", "solution": "import numpy as np\n\nclass DecayingAccelerationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.decay_rate = 0.9 # New parameter for decaying acceleration coefficients\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n            self.c1 *= self.decay_rate # Decaying cognitive acceleration coefficient\n            self.c2 *= self.decay_rate # Decaying social acceleration coefficient\n\n        return gbest_fitness", "name": "DecayingAccelerationPSO", "description": "Implementing a decaying acceleration coefficient to dynamically adjust the cognitive and social components in the particle swarm optimization algorithm for improved convergence speed.", "configspace": "", "generation": 18, "fitness": 0.0732536928977559, "feedback": "The algorithm DecayingAccelerationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.07.", "error": "", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.14540902813378542, 0.15228970707949807, 0.22810857767860748, 0.05504314882809791, 0.1503878517073527, 0.11395274865516236, 0.09043124574912342, 0.22024393683360521, 0.15173468952360059, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11683237136555313, 0.0024718048435508067, 0.006202485462206253, 0.04935961991329474, 0.0370230808515154, 0.0603015047646519, 0.021224251030749652, 0.050973851003971116, 0.056045783145861394, 0.014145713133705606, 0.010105184285004398, 0.02385891785389538, 0.014537444302436753, 9.999999999998899e-05, 0.05098834434982369, 0.053488660129138776, 0.014796836071286235, 0.028825238522675822, 0.12218542414298939, 0.09347576379879252, 0.14915617809357917, 0.07749251818866487, 0.0881772690033169, 0.13078286354180468, 0.053920919576431525, 0.11923264939713685, 0.16713645951304168, 0.06474135673526815, 0.04273308613790505, 0.012667211603016426, 9.999999999998899e-05, 0.05730039772616968, 0.02688112628847772, 9.999999999998899e-05, 9.999999999998899e-05, 0.020774624280748166, 0.12527870613008085, 0.07809108396427478, 0.047797505595383205, 0.21437561657081106, 0.00905629365599403, 0.06244540450892144, 0.0783478060918067, 0.0032689101492137107, 0.022710204150156676, 9.999999999998899e-05, 0.0427268223595938, 0.1461520564608254, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11464892298741869, 0.01935307688353438, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063810775504389294, 0.03352206239910993, 9.999999999998899e-05, 0.03854259022194817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0455023383867621, 0.057830829345162926, 0.053288571822715625, 9.999999999998899e-05, 9.999999999998899e-05, 0.08726358207145368, 0.006814137987198987, 0.03988243030164318, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026350407085019456, 0.19533687614482365, 0.21344462925140262, 0.19124337035420924, 0.13967193673933487, 0.18041551026569191, 0.10948354844554742, 0.17163080916264462, 0.1063749468998092, 0.15197461940009416, 0.058886526683902596, 0.0023580954725866965, 9.999999999998899e-05, 9.999999999998899e-05, 0.06844719919530451, 0.03780477175810881, 0.016687464743367908, 0.05734668689217104, 0.043704126912843866, 0.06755094238082715, 0.17539032867507087, 0.11042548881824332, 0.1495114700879523, 0.12250231009380164, 0.07240322519393627, 0.08640642740405424, 0.12250799786624089, 0.12896293361207123, 0.14257722668398032, 0.21951044503798567, 0.11305720222723625, 0.14921038552274912, 0.2172953510707476, 0.11171001615942133, 0.1372641581383638, 0.1232321610538536, 0.0898907729866758, 0.061838898636797035, 0.09289680749713314, 0.09709570076987384, 0.09647319842846103, 0.13190402076728536, 0.07934698055062694, 0.08428624156646314, 0.08521975737243015, 0.03197033600000321, 0.1322897045851843, 0.15468991991142578, 0.13186561751236692, 0.17871932691435577, 0.12857639664786835, 0.13074737581068385, 0.18873857639595604, 0.167693900760312, 0.13965868872741904, 0.14754077289469747, 0.1659944226605008, 0.15652764097265348, 0.14209513047016042, 0.15078419285837152, 0.1434386705984274, 0.17243463491244182, 9.999999999998899e-05, 9.999999999998899e-05, 0.11025275310419314, 0.06690021940276603, 0.1596755358165166, 0.16926076008545898, 0.24550502959194398, 0.10928812549650413, 0.10836676322841865, 0.08191310236829996, 0.1444365526754755, 0.21154646769383534, 0.08049522023995814, 0.04590804190571485, 0.07381304589905446, 0.10088923640526815, 0.08030978958246338, 0.06956755957896055, 0.07833817468624804, 0.10588628267099087, 0.1591638890231537, 0.1923277517123514, 0.17370956969117468, 0.1544190926954574, 0.19084218150787957, 0.17849157772269808, 0.15858360403534555, 0.17685468900288326, 0.17184274422033463, 0.04378796288179332, 0.03531079432453843, 0.03622309706416471, 0.04426717841445993, 0.04197716246560268, 0.04079420889343166, 0.07216413463578697, 0.05872921538034548, 0.06313896632988236]}, "mutation_prompt": null}
{"id": "59483cce-7622-47e8-83fc-602c26755bc2", "solution": "import numpy as np\n\nclass ChaoticDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def chaotic_init(self, dim):\n        chaotic_vals = []\n        x = np.random.rand(dim)\n        chaotic_vals.append(x)\n        for _ in range(self.dim - 1):\n            x = 4 * x * (1 - x)\n            chaotic_vals.append(x)\n        return np.array(chaotic_vals)\n\n    def __call__(self, func):\n        swarm = self.chaotic_init(self.dim) * 10 - 5\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "ChaoticDynamicInertiaWeightPSO", "description": "Introducing chaotic initialization of the swarm positions to enhance exploration capabilities and speed up convergence by diversifying the search space at the beginning of the optimization process.", "configspace": "", "generation": 19, "fitness": 0.18370730902896806, "feedback": "The algorithm ChaoticDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.22.", "error": "", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.9621003856180538, 0.12968157566306437, 0.968535631893509, 0.31899430604539925, 0.5138079914361644, 0.9666840373460509, 0.9682922475405452, 0.18369247745778605, 0.7664005360771303, 0.22492575907882695, 9.999999999998899e-05, 0.02508771226028439, 0.12568101732336068, 9.999999999998899e-05, 9.999999999998899e-05, 0.11373651942628216, 9.999999999998899e-05, 0.06338082296443603, 0.1634925485358273, 0.08647704587738358, 0.13555374161347222, 0.08126343840982353, 0.1906121441954901, 0.11259650093029594, 0.06512353999149345, 0.006157400900698828, 0.11489025007200548, 0.08410056110038755, 9.999999999998899e-05, 0.08107678874273583, 0.07153850042934284, 0.10436559501494791, 0.05040897236167785, 0.09270165002972464, 0.005783752387372942, 0.1283109340245222, 0.9922830680611774, 0.060556166205429474, 0.9818321165895665, 0.9907550662295662, 0.9944460694939187, 0.9896393292158926, 0.993878342159816, 0.9938695414736394, 0.9870927957888113, 0.39580595164989296, 9.999999999998899e-05, 0.11401426848874219, 0.24013077722895537, 0.21132022804572892, 0.07578488044313947, 0.13294995811554344, 9.999999999998899e-05, 0.1426241348568128, 0.13804578040623305, 0.01773937997759445, 0.11461338186710657, 0.19546212591208467, 0.05877047196530771, 0.1616314684440493, 0.13443381913366537, 0.09525516427542391, 0.1372908698107147, 0.13008561620732273, 9.999999999998899e-05, 9.999999999998899e-05, 0.1484020031130291, 9.999999999998899e-05, 0.13519911180413002, 0.11351119673446353, 0.14982604511476583, 0.13317948699601678, 0.13937234618127436, 9.999999999998899e-05, 0.131782180093026, 0.1672439828115363, 0.12853468778253807, 0.13690136430001554, 0.19758946263680233, 0.10847670787935693, 0.1196779661738101, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026913754824454905, 0.005551690781660179, 0.032383737452840955, 0.07407108369477411, 0.011731165900218499, 9.999999999998899e-05, 0.11772297328160053, 0.0640181478546763, 0.05742056927109784, 0.23362231614216145, 9.999999999998899e-05, 0.10769931222627438, 0.09622350458785256, 9.999999999998899e-05, 0.13416950163475738, 0.0472976873385631, 0.014946982291240918, 0.10383652159985379, 0.06438285922009457, 0.08571954739205778, 9.999999999998899e-05, 0.12626801630307694, 0.021257417700648373, 0.09927957142666233, 0.061295938365319325, 9.999999999998899e-05, 0.16197079866502007, 0.4314760310495007, 0.10436116000973195, 0.40035420807875755, 0.3694896546840516, 0.3243951206286574, 0.4413317070878363, 0.3323546678213215, 0.23053127449180666, 0.4973398293489819, 0.10745762536815984, 9.999999999998899e-05, 0.0838076276394828, 0.1125676833288689, 0.11957114407587777, 0.03705901489033492, 0.13689020027858934, 0.04491301142360227, 0.19346118624633513, 0.20531676275452082, 0.20118344610882355, 0.1813253014699906, 0.19691408774460828, 0.15134095704436312, 0.14949651276430653, 0.26434753970129987, 0.23615757600669918, 0.19272753102295415, 0.27622296017970893, 0.1258298237938259, 0.20698764294490768, 0.23493434591318751, 0.20065747573209114, 0.27262744060320776, 0.2220289160125476, 0.16750960330526354, 0.12954545830450137, 0.10433782570321604, 0.09356420657235853, 0.22337917356860126, 0.22388563519263283, 0.06436298611427849, 0.23514724378996388, 0.16108573004527993, 0.09167261114617409, 0.07527060040626199, 0.1973629898582573, 0.2698792758431169, 0.19692432687198136, 0.21744390260561008, 0.21533438539868288, 0.1989122605811101, 0.2724660096952328, 0.17005665433249828, 0.24967056297688672, 0.1788294819412557, 0.1832934932140654, 0.21416555076988164, 0.19675573582680694, 9.999999999998899e-05, 0.19100776816474396, 0.2120325479176962, 9.999999999998899e-05, 0.19984578130683084, 0.1662442867968319, 0.15998724345459903, 0.16869766545152798, 0.17082879556759234, 0.17939028319966988, 0.19695128871491385, 0.1134246201289012, 0.11533270759494918, 0.16386834046976495, 0.21312472878317335, 0.11302574940348842, 0.21478013134863227, 0.17967470154619603, 0.06642325865925836, 0.11198788518867386, 0.15538595141807332, 0.022066566368884932, 0.3030678521082534, 0.22252282796514078, 0.23196355514380618, 0.22568199573656877, 0.20329664416787552, 0.23573628877658726, 0.19394327346953566, 0.19339035777570757, 0.193342007530804, 0.19079704219169336, 0.13501731224973934, 0.08056278916439163, 0.10078242040831342, 0.08990397328729627, 0.056144494842489845, 0.08830955529989393, 0.11540473590370004, 0.03825732456892761, 0.1062140314992237]}, "mutation_prompt": null}
{"id": "fe03da9e-76f2-4ab6-b8e6-4ab3edbf96a7", "solution": "import numpy as np\n\nclass DynamicPopulationSizePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        num_particles = self.dim\n        swarm = np.random.uniform(-5.0, 5.0, (num_particles, self.dim))\n        velocity = np.zeros((num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((num_particles, self.dim))\n            r2 = np.random.random((num_particles, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n            if np.random.rand() < 0.5 and num_particles > 2:\n                num_particles -= 1\n                swarm = np.vstack((swarm, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                velocity = np.vstack((velocity, np.zeros((1, self.dim)))\n                pbest = np.vstack((pbest, swarm[-1]))\n                pbest_fitness = np.append(pbest_fitness, func(pbest[-1]))\n\n        return gbest_fitness", "name": "DynamicPopulationSizePSO", "description": "Implementing a dynamic population size adaptation mechanism that adjusts the number of particles based on the fitness improvement to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 45, 17, '                pbest = np.vstack((pbest, swarm[-1]))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 45, 17, '                pbest = np.vstack((pbest, swarm[-1]))\\n'))", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {}, "mutation_prompt": null}
{"id": "0f13888d-8f23-4523-b3db-e7f444f93a12", "solution": "class DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm) + np.random.uniform(-1, 1, (self.dim, self.dim))  # Mutation\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "DynamicInertiaWeightPSO", "description": "Introducing a mutation mechanism that adds a random perturbation to the velocity to encourage exploration and enhance diversity in the search space for faster convergence.", "configspace": "", "generation": 21, "fitness": 0.16400116498178824, "feedback": "The algorithm DynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.3110807086319882, 0.2782567789575564, 0.28452188578688753, 0.2731230404033739, 0.27280860524024875, 0.3047576845864741, 0.26535290137534173, 0.29252882280764114, 0.2609088362384303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11684384282529559, 0.07904670158842642, 0.06790089840231117, 0.08479935662721616, 0.08719604398999437, 0.0893530457585201, 0.07875933906319932, 0.0849555670787917, 0.07733916482354164, 0.07246171480896468, 0.06512541420785767, 0.09214460960740867, 0.07102645314664058, 0.06584788448215895, 0.06523915424952287, 0.06387058751216446, 0.07060185546351827, 0.06625942051693723, 0.9963067035775443, 0.9961493448788481, 0.9951306609521747, 0.9950254260659783, 0.9918092309239671, 0.9980658897591752, 0.9949325080552159, 0.9962421170935293, 0.9961453003881853, 0.17653726340162867, 0.17343419219797274, 0.1463527336364434, 0.15125730171245377, 0.18951504490900994, 0.15881484447594008, 0.15384628661995592, 0.16007223145562388, 0.15376633159200626, 0.20389887035231002, 0.20833750693388475, 0.18830536194815561, 0.1998566950943217, 0.18029144396880525, 0.2549710189104224, 0.21465312583365037, 0.1684749787105504, 0.18931680016998642, 0.07350060131901537, 0.11791790630377452, 0.0967033019733835, 0.022295709593311952, 0.060116163204494866, 0.08651658257572437, 0.02515982937017147, 0.07312593567788694, 0.09296739972461654, 0.10073426566480825, 0.06903172928200729, 0.08639046202373668, 0.10122284482073629, 0.09741549788974502, 0.08458873131364852, 0.07607707434512034, 0.10027848696510333, 0.10997870104714569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025274458476115425, 0.011551007616084963, 0.07366683726019951, 0.07665219219320718, 0.014775190429519136, 0.0004134769528438831, 0.08883166847361623, 0.03503450651286599, 0.040682071747934256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023014389311514005, 0.01521731105336821, 0.028847743833041894, 0.050059901803671925, 0.028895896141132638, 0.024419118816256913, 0.022629243050059422, 0.007334602294154502, 0.02063830049477966, 0.2760033762654984, 0.2607016016343616, 0.2922282839131026, 0.26541598129918775, 0.2954283254418667, 0.27610227304148494, 0.27068804921958156, 0.2746528571914151, 0.2526308188814834, 0.08211236717460435, 0.08335801254314978, 0.07658610708594427, 0.06866290816932019, 0.08647345025232844, 0.07651347483453341, 0.10561319209515974, 0.0724586705296888, 0.0852694641797852, 0.13573042926720047, 0.14407217206786793, 0.17872628255289436, 0.12041821023815646, 0.1361646225024853, 0.1173172121742968, 0.1392102709605173, 0.11843960570821022, 0.13033967742107744, 0.2124703227873359, 0.2185213576755065, 0.20844489785791098, 0.22106185574825232, 0.19319132560700258, 0.21861738503006467, 0.20270247088686466, 0.20457250735624322, 0.20708753130860746, 0.14663648763666315, 0.15274893584418403, 0.15749399386274432, 0.14819432358848994, 0.13911417355128597, 0.12906756337197423, 0.14365598054928852, 0.16186111180058704, 0.1365123323838061, 0.18816292434507487, 0.1856930117869926, 0.18851215368862284, 0.2116900266603826, 0.18725502314461429, 0.17237204951258778, 0.18888700461786523, 0.16929798640458882, 0.18702322970317276, 0.18413274508377142, 0.1670577654313794, 0.1800410311807944, 0.17236053095922, 0.16733993125029534, 0.17072246597576957, 0.17248979730459835, 0.16850187689598495, 0.1696376506550925, 0.1640828004427789, 0.36238200195728965, 0.16500727057612674, 0.35203771826467356, 0.2920901623195399, 0.1572178750660227, 0.15693409656811075, 0.3237985969634629, 0.15076225820139721, 0.2644619104736715, 0.18350125620475266, 0.28861057849285, 0.2583513295365024, 0.2009752350468953, 0.18947759503545225, 0.11204102562918439, 0.2642646605215382, 0.15339723150758422, 0.18044363915258987, 0.19156358018865194, 0.17772041647998327, 0.18220857688265524, 0.16158059959090276, 0.18355150047252677, 0.17424598660174828, 0.17240367029033477, 0.17864908279316738, 0.07569143851071714, 0.08168287971817845, 0.06560245924802144, 0.08388734922621699, 0.0956362792019343, 0.059786865490300434, 0.06619858628151798, 0.076803632166758, 0.08447336151645213]}, "mutation_prompt": null}
{"id": "7393f10c-ec33-4a41-8ffc-8e87e3b4e9a1", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "DynamicInertiaWeightPSO", "description": "Introducing a dynamic inertia weight adaptation mechanism that adjusts the inertia weight based on the fitness improvement to balance exploration and exploitation dynamically for faster convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.9160688689853619, 0.9627369441870708, 0.9789426004079395, 0.670674565592865, 0.9729027966168862, 0.34958738629833563, 0.9589372902012749, 0.7816008827970415, 0.6008929617018562, 0.2793017092182567, 0.04286587254480523, 0.2415578930904857, 0.18897633269227188, 9.999999999998899e-05, 0.41369663444211635, 9.999999999998899e-05, 0.2749089142182791, 0.274079281184637, 0.09465595041048769, 0.08066791037475962, 0.12738436688675758, 0.1023637328907685, 0.12601391026791475, 0.15025291814887753, 0.08282817807923215, 0.19357264492257098, 0.13816960891899255, 0.09302878049978935, 0.08116089004276472, 0.11331204727233868, 0.10252356063317114, 0.057827299225806206, 0.09839023089886378, 0.07827530845986219, 0.1206693504554367, 0.045399238195044433, 0.9927849872368487, 0.14218184515757404, 0.9964351801215002, 0.9917768355989791, 0.13022165321704327, 0.9844161357011966, 0.9885953031488375, 0.9941008884383941, 0.9967359679378507, 0.20761795095272417, 0.15151833916510482, 0.16147800308026583, 0.08024314085584161, 0.25360776683602326, 0.11863778252532542, 0.0878151249972654, 0.05865156993007714, 0.2078678006217145, 0.21597664276664885, 0.21978677516595668, 0.07126360366819062, 0.2848283309370818, 0.2701185863176587, 0.08258022860938963, 0.1171823922078109, 0.22682095992895257, 0.09113377219024443, 0.1388006861396891, 0.17990709774223745, 0.16681388700830646, 0.146280049686505, 0.15735241821869062, 0.0097802148924655, 0.1303735527008324, 0.13429722170606329, 0.2224907645082006, 0.1372687290223732, 0.05858198641930268, 9.999999999998899e-05, 0.16296170339359228, 0.13008615412786406, 0.10958596046466151, 0.186598032726645, 9.999999999998899e-05, 0.13312662929887742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1427416095267965, 9.999999999998899e-05, 9.999999999998899e-05, 0.01921209801996937, 9.999999999998899e-05, 0.012831314242139569, 0.02689207498628765, 0.04951487976993063, 0.04651985347627796, 9.999999999998899e-05, 0.007225259901669001, 0.0981457749167377, 0.05099694051086712, 0.012238332475397184, 0.3179475124554423, 0.03386334991864037, 0.04704235136589652, 0.17306844339715044, 0.0029966702390349376, 0.14348164312223255, 9.999999999998899e-05, 0.06792046699058207, 0.12153192291910442, 0.09870030589162704, 0.274203558515678, 0.06775404136998509, 0.03461473721611197, 0.07560240885064717, 0.22402746335007795, 0.10332524368990526, 0.04276567509702689, 0.09655243892122034, 0.539341545041764, 0.4527363319558071, 0.5349066667015143, 0.16250049621966378, 0.24706807568641387, 0.44361592420007745, 0.5211888572740238, 0.2870618340876847, 0.17388671894563446, 0.09930536317013938, 0.09124399183543663, 0.0199594973946019, 0.06735292015808059, 0.076574150081132, 0.09942001551504387, 0.06331777088368651, 0.14896448624559833, 0.0738246281675512, 0.14581709866942605, 0.19046826496189784, 0.26383090622411665, 0.26344795743877936, 0.13364136295500084, 0.35545459216363173, 0.19985017410665207, 0.27575573559946176, 0.18017974136345805, 0.14466960103604343, 0.1848404862988905, 0.16812430293882685, 0.23016604819458952, 0.1805050248348019, 0.18720726920473374, 0.24554850758706037, 0.2620731380248723, 0.2453153577732472, 0.2521901073349009, 0.0855675807440679, 0.12757386397431014, 0.19965633558278728, 0.18105212752312239, 0.17834176087986287, 0.2403559619762623, 0.11907709972960279, 0.15392654860443422, 0.23450743387267403, 0.22368382319249513, 0.20709794193094988, 0.20280108729817103, 0.15235546590782834, 0.16059387271968295, 0.3216845006295377, 0.2147018670114006, 0.21562671808279887, 0.20199212407268174, 0.20379089225614722, 0.20097719589759788, 0.19606866479435425, 0.20275167341001676, 0.25776969651481296, 0.23049671345814626, 0.1749563886122396, 0.18547304583648327, 0.1599440464210229, 0.33369254787578306, 0.16555705738650273, 0.1700566417156546, 0.2023292755387226, 0.17069560574984133, 0.14686094325410537, 0.1593062735542249, 0.15380313986662553, 0.25023217721557145, 0.11364261047903512, 0.3326427270821064, 0.2001796618025241, 0.05936541571470155, 0.17574209295537202, 0.10443774358030367, 0.10550545821857282, 0.11301941221750766, 0.18846423295768877, 0.21119600284988682, 0.18928245588399184, 0.1940454953429288, 0.1913026281435528, 0.18431880529449707, 0.19896786482487805, 0.2536988117157928, 0.19272300165508527, 0.12657190085356884, 0.07654240462859219, 0.07007987392044868, 0.0571188967932823, 0.1031902281134579, 0.06471558144278011, 0.10520556378300283, 0.0927005753498985, 0.09412070419796714]}, "mutation_prompt": null}
{"id": "5bad42ca-5cf1-4b18-a2d6-1cb073739d1b", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "DynamicInertiaWeightPSO", "description": "Introducing a dynamic inertia weight adaptation mechanism that adjusts the inertia weight based on the fitness improvement to balance exploration and exploitation dynamically for faster convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.9160688689853619, 0.9627369441870708, 0.9789426004079395, 0.670674565592865, 0.9729027966168862, 0.34958738629833563, 0.9589372902012749, 0.7816008827970415, 0.6008929617018562, 0.2793017092182567, 0.04286587254480523, 0.2415578930904857, 0.18897633269227188, 9.999999999998899e-05, 0.41369663444211635, 9.999999999998899e-05, 0.2749089142182791, 0.274079281184637, 0.09465595041048769, 0.08066791037475962, 0.12738436688675758, 0.1023637328907685, 0.12601391026791475, 0.15025291814887753, 0.08282817807923215, 0.19357264492257098, 0.13816960891899255, 0.09302878049978935, 0.08116089004276472, 0.11331204727233868, 0.10252356063317114, 0.057827299225806206, 0.09839023089886378, 0.07827530845986219, 0.1206693504554367, 0.045399238195044433, 0.9927849872368487, 0.14218184515757404, 0.9964351801215002, 0.9917768355989791, 0.13022165321704327, 0.9844161357011966, 0.9885953031488375, 0.9941008884383941, 0.9967359679378507, 0.20761795095272417, 0.15151833916510482, 0.16147800308026583, 0.08024314085584161, 0.25360776683602326, 0.11863778252532542, 0.0878151249972654, 0.05865156993007714, 0.2078678006217145, 0.21597664276664885, 0.21978677516595668, 0.07126360366819062, 0.2848283309370818, 0.2701185863176587, 0.08258022860938963, 0.1171823922078109, 0.22682095992895257, 0.09113377219024443, 0.1388006861396891, 0.17990709774223745, 0.16681388700830646, 0.146280049686505, 0.15735241821869062, 0.0097802148924655, 0.1303735527008324, 0.13429722170606329, 0.2224907645082006, 0.1372687290223732, 0.05858198641930268, 9.999999999998899e-05, 0.16296170339359228, 0.13008615412786406, 0.10958596046466151, 0.186598032726645, 9.999999999998899e-05, 0.13312662929887742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1427416095267965, 9.999999999998899e-05, 9.999999999998899e-05, 0.01921209801996937, 9.999999999998899e-05, 0.012831314242139569, 0.02689207498628765, 0.04951487976993063, 0.04651985347627796, 9.999999999998899e-05, 0.007225259901669001, 0.0981457749167377, 0.05099694051086712, 0.012238332475397184, 0.3179475124554423, 0.03386334991864037, 0.04704235136589652, 0.17306844339715044, 0.0029966702390349376, 0.14348164312223255, 9.999999999998899e-05, 0.06792046699058207, 0.12153192291910442, 0.09870030589162704, 0.274203558515678, 0.06775404136998509, 0.03461473721611197, 0.07560240885064717, 0.22402746335007795, 0.10332524368990526, 0.04276567509702689, 0.09655243892122034, 0.539341545041764, 0.4527363319558071, 0.5349066667015143, 0.16250049621966378, 0.24706807568641387, 0.44361592420007745, 0.5211888572740238, 0.2870618340876847, 0.17388671894563446, 0.09930536317013938, 0.09124399183543663, 0.0199594973946019, 0.06735292015808059, 0.076574150081132, 0.09942001551504387, 0.06331777088368651, 0.14896448624559833, 0.0738246281675512, 0.14581709866942605, 0.19046826496189784, 0.26383090622411665, 0.26344795743877936, 0.13364136295500084, 0.35545459216363173, 0.19985017410665207, 0.27575573559946176, 0.18017974136345805, 0.14466960103604343, 0.1848404862988905, 0.16812430293882685, 0.23016604819458952, 0.1805050248348019, 0.18720726920473374, 0.24554850758706037, 0.2620731380248723, 0.2453153577732472, 0.2521901073349009, 0.0855675807440679, 0.12757386397431014, 0.19965633558278728, 0.18105212752312239, 0.17834176087986287, 0.2403559619762623, 0.11907709972960279, 0.15392654860443422, 0.23450743387267403, 0.22368382319249513, 0.20709794193094988, 0.20280108729817103, 0.15235546590782834, 0.16059387271968295, 0.3216845006295377, 0.2147018670114006, 0.21562671808279887, 0.20199212407268174, 0.20379089225614722, 0.20097719589759788, 0.19606866479435425, 0.20275167341001676, 0.25776969651481296, 0.23049671345814626, 0.1749563886122396, 0.18547304583648327, 0.1599440464210229, 0.33369254787578306, 0.16555705738650273, 0.1700566417156546, 0.2023292755387226, 0.17069560574984133, 0.14686094325410537, 0.1593062735542249, 0.15380313986662553, 0.25023217721557145, 0.11364261047903512, 0.3326427270821064, 0.2001796618025241, 0.05936541571470155, 0.17574209295537202, 0.10443774358030367, 0.10550545821857282, 0.11301941221750766, 0.18846423295768877, 0.21119600284988682, 0.18928245588399184, 0.1940454953429288, 0.1913026281435528, 0.18431880529449707, 0.19896786482487805, 0.2536988117157928, 0.19272300165508527, 0.12657190085356884, 0.07654240462859219, 0.07007987392044868, 0.0571188967932823, 0.1031902281134579, 0.06471558144278011, 0.10520556378300283, 0.0927005753498985, 0.09412070419796714]}, "mutation_prompt": null}
{"id": "3612cd07-ef7a-46ba-a9c5-a11ce46d89d3", "solution": "import numpy as np\n\nclass AdaptiveMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.mutation_rate_min = 0.1\n        self.mutation_rate_max = 0.9\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        mutation_rate = self.mutation_rate_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n                if np.random.uniform() < 0.5:\n                    mutation_rate = self.mutation_rate_min + (_ / self.budget) * (self.mutation_rate_max - self.mutation_rate_min)\n\n            swarm += np.random.normal(0, mutation_rate, (self.dim, self.dim))\n\n        return gbest_fitness", "name": "AdaptiveMutationPSO", "description": "Implementing a novel adaptive mutation mechanism that adjusts the mutation rate based on the fitness improvement to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 24, "fitness": 0.07958295263300157, "feedback": "The algorithm AdaptiveMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.20.", "error": "", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.10294849830082131, 0.08865894720506295, 0.11867192691936401, 0.05566092616790663, 0.11133424514304602, 0.04703421843089306, 0.04818853977772686, 0.09324832016408635, 0.08186697476643534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02007631863744841, 9.999999999998899e-05, 0.007105225577741292, 0.019811565859444324, 0.0017619568247884132, 0.01085760170654504, 0.020068491892118456, 0.0069403602931300545, 0.014004499724181385, 0.0125080983813739, 0.01980569124436682, 9.999999999998899e-05, 0.00994007026892707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9974106106868988, 0.9976545285191499, 0.9981711879279273, 0.9976516261789745, 0.9972563440498898, 0.9974929337418496, 0.9971840839782652, 0.9976795205490254, 0.9978518311724712, 0.03299485031541283, 9.999999999998899e-05, 0.008931611864700262, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0856789519272082, 0.021711146916696955, 0.011352783709140724, 0.015231409896468207, 9.999999999998899e-05, 0.07528513997739916, 0.05704964402899482, 0.017991734944331483, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007430080056212374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0844895106631035, 0.11706271275963587, 0.161923271692068, 0.10419225886258388, 0.10591262531546597, 0.12838933466028846, 0.13386060326417304, 0.12956844671930978, 0.13985262050134661, 9.999999999998899e-05, 9.999999999998899e-05, 0.014085538512303208, 9.999999999998899e-05, 0.017491213534143624, 9.999999999998899e-05, 0.0002549888786667065, 0.012097070071245386, 0.0267656688986897, 0.09209929158098462, 0.06735693451091307, 0.05468846648487902, 0.09855305120349966, 0.06581597144687368, 0.06921006770262117, 0.06453659833828007, 0.04044901314759919, 0.1103271554189641, 0.10385695236811576, 0.0962505644704219, 0.10359778603806002, 0.12620624938752367, 0.11367304868336048, 0.11987607253007593, 0.11420206329748472, 0.1001363042967901, 0.08498156136172275, 0.04464917358189302, 0.041934233639355445, 0.04590378588778399, 0.044650675553987496, 0.10436553624818568, 0.06699078797825586, 0.06135429372707368, 0.07061539183701881, 0.04511705659767773, 0.09734262191537457, 0.0628129088929702, 0.0765024070786069, 0.11037717794874569, 0.08697942023139527, 0.07292659750447661, 0.12245976138762271, 0.11960482475064094, 0.1203569236403137, 9.999999999998899e-05, 9.999999999998899e-05, 0.14726499106151003, 0.1293838797467144, 0.14450053414417363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06968062869701475, 0.0567007971426039, 0.08102772743421116, 0.08738993012124374, 0.1207914665021157, 0.050733791701017994, 0.0383563194180393, 0.056615725614002965, 0.1360058742076441, 0.03938037264682048, 0.03967402848431323, 0.04748259946772526, 0.046347073204067946, 0.021600351495484005, 0.045511073114331335, 0.07075685418115285, 0.029245797717663113, 0.049272369999986076, 0.12442471713559677, 0.12017502569002791, 0.14763022729669195, 0.10735471808377628, 0.09516345052572195, 0.12465113207635137, 0.1355412008144944, 0.11851632833001169, 0.12716853707000897, 0.01535482488156592, 0.0021606320767044718, 0.0207258908154756, 0.035307453789719334, 0.0058749879062220955, 0.023073613460649955, 0.010694224894108761, 0.021143404374971753, 0.02920215810523774]}, "mutation_prompt": null}
{"id": "0b5d42f3-1524-43d4-9e90-9dd723f11006", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "DynamicInertiaWeightPSO", "description": "Introducing a dynamic inertia weight adaptation mechanism that adjusts the inertia weight based on the fitness improvement to balance exploration and exploitation dynamically for faster convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.9160688689853619, 0.9627369441870708, 0.9789426004079395, 0.670674565592865, 0.9729027966168862, 0.34958738629833563, 0.9589372902012749, 0.7816008827970415, 0.6008929617018562, 0.2793017092182567, 0.04286587254480523, 0.2415578930904857, 0.18897633269227188, 9.999999999998899e-05, 0.41369663444211635, 9.999999999998899e-05, 0.2749089142182791, 0.274079281184637, 0.09465595041048769, 0.08066791037475962, 0.12738436688675758, 0.1023637328907685, 0.12601391026791475, 0.15025291814887753, 0.08282817807923215, 0.19357264492257098, 0.13816960891899255, 0.09302878049978935, 0.08116089004276472, 0.11331204727233868, 0.10252356063317114, 0.057827299225806206, 0.09839023089886378, 0.07827530845986219, 0.1206693504554367, 0.045399238195044433, 0.9927849872368487, 0.14218184515757404, 0.9964351801215002, 0.9917768355989791, 0.13022165321704327, 0.9844161357011966, 0.9885953031488375, 0.9941008884383941, 0.9967359679378507, 0.20761795095272417, 0.15151833916510482, 0.16147800308026583, 0.08024314085584161, 0.25360776683602326, 0.11863778252532542, 0.0878151249972654, 0.05865156993007714, 0.2078678006217145, 0.21597664276664885, 0.21978677516595668, 0.07126360366819062, 0.2848283309370818, 0.2701185863176587, 0.08258022860938963, 0.1171823922078109, 0.22682095992895257, 0.09113377219024443, 0.1388006861396891, 0.17990709774223745, 0.16681388700830646, 0.146280049686505, 0.15735241821869062, 0.0097802148924655, 0.1303735527008324, 0.13429722170606329, 0.2224907645082006, 0.1372687290223732, 0.05858198641930268, 9.999999999998899e-05, 0.16296170339359228, 0.13008615412786406, 0.10958596046466151, 0.186598032726645, 9.999999999998899e-05, 0.13312662929887742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1427416095267965, 9.999999999998899e-05, 9.999999999998899e-05, 0.01921209801996937, 9.999999999998899e-05, 0.012831314242139569, 0.02689207498628765, 0.04951487976993063, 0.04651985347627796, 9.999999999998899e-05, 0.007225259901669001, 0.0981457749167377, 0.05099694051086712, 0.012238332475397184, 0.3179475124554423, 0.03386334991864037, 0.04704235136589652, 0.17306844339715044, 0.0029966702390349376, 0.14348164312223255, 9.999999999998899e-05, 0.06792046699058207, 0.12153192291910442, 0.09870030589162704, 0.274203558515678, 0.06775404136998509, 0.03461473721611197, 0.07560240885064717, 0.22402746335007795, 0.10332524368990526, 0.04276567509702689, 0.09655243892122034, 0.539341545041764, 0.4527363319558071, 0.5349066667015143, 0.16250049621966378, 0.24706807568641387, 0.44361592420007745, 0.5211888572740238, 0.2870618340876847, 0.17388671894563446, 0.09930536317013938, 0.09124399183543663, 0.0199594973946019, 0.06735292015808059, 0.076574150081132, 0.09942001551504387, 0.06331777088368651, 0.14896448624559833, 0.0738246281675512, 0.14581709866942605, 0.19046826496189784, 0.26383090622411665, 0.26344795743877936, 0.13364136295500084, 0.35545459216363173, 0.19985017410665207, 0.27575573559946176, 0.18017974136345805, 0.14466960103604343, 0.1848404862988905, 0.16812430293882685, 0.23016604819458952, 0.1805050248348019, 0.18720726920473374, 0.24554850758706037, 0.2620731380248723, 0.2453153577732472, 0.2521901073349009, 0.0855675807440679, 0.12757386397431014, 0.19965633558278728, 0.18105212752312239, 0.17834176087986287, 0.2403559619762623, 0.11907709972960279, 0.15392654860443422, 0.23450743387267403, 0.22368382319249513, 0.20709794193094988, 0.20280108729817103, 0.15235546590782834, 0.16059387271968295, 0.3216845006295377, 0.2147018670114006, 0.21562671808279887, 0.20199212407268174, 0.20379089225614722, 0.20097719589759788, 0.19606866479435425, 0.20275167341001676, 0.25776969651481296, 0.23049671345814626, 0.1749563886122396, 0.18547304583648327, 0.1599440464210229, 0.33369254787578306, 0.16555705738650273, 0.1700566417156546, 0.2023292755387226, 0.17069560574984133, 0.14686094325410537, 0.1593062735542249, 0.15380313986662553, 0.25023217721557145, 0.11364261047903512, 0.3326427270821064, 0.2001796618025241, 0.05936541571470155, 0.17574209295537202, 0.10443774358030367, 0.10550545821857282, 0.11301941221750766, 0.18846423295768877, 0.21119600284988682, 0.18928245588399184, 0.1940454953429288, 0.1913026281435528, 0.18431880529449707, 0.19896786482487805, 0.2536988117157928, 0.19272300165508527, 0.12657190085356884, 0.07654240462859219, 0.07007987392044868, 0.0571188967932823, 0.1031902281134579, 0.06471558144278011, 0.10520556378300283, 0.0927005753498985, 0.09412070419796714]}, "mutation_prompt": null}
{"id": "7a53510e-7085-4d8f-b395-b7f5a36eeca1", "solution": "class EnhancedPSO(DynamicInertiaWeightPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.c_min = 1.5\n        self.c_max = 2.5\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            c = self.c_min + (_ / self.budget) * (self.c_max - self.c_min)\n\n            velocity = w * velocity + c * r1 * (pbest - swarm) + c * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedPSO", "description": "Implementing a novel adaptive acceleration coefficient mechanism based on dimension-wise fitness values to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 26, "fitness": 0.10291609516623396, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.09.", "error": "", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.3121889068545418, 0.4079180773720996, 0.515817699345773, 0.10416419625295625, 0.3704671702909492, 0.11256837374814599, 0.10339355154060637, 0.39836283405581385, 0.23473345107624488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09936160044793052, 0.022288222247426548, 0.06522788372848387, 0.06583252448171173, 0.04724815142513994, 0.0505219965107464, 0.04664660727832248, 0.09039064031308897, 0.049002425091465907, 0.06765590873203486, 0.03723228394323308, 9.999999999998899e-05, 0.05799585021632281, 0.055111210038523706, 0.03779885654795767, 0.03535603674564358, 0.08356845274560853, 0.02816530651467164, 0.106826277073368, 0.0948761124421944, 0.17358586438181722, 0.07723044187819195, 0.07550412971365206, 0.13497193823384712, 0.06391538320621004, 0.09094171729982226, 0.15325190792053034, 0.06338262065952438, 0.047412720868068914, 0.016197238133606517, 9.999999999998899e-05, 0.10161278979204746, 0.058388486520047134, 0.0474904018919422, 9.999999999998899e-05, 0.06420956494001184, 0.1986905920474067, 0.07558785203766927, 0.06414320198576495, 0.1607431049657898, 0.08379172816338543, 0.06207011255774142, 0.10495783860315622, 0.046235030618443806, 0.03657065253476355, 0.07323981134514779, 0.13344622551662289, 0.17344122111068516, 0.0012632300906927352, 0.0039417710184892485, 0.04730695818377317, 9.999999999998899e-05, 9.999999999998899e-05, 0.06121151699974181, 0.0699317068106462, 9.999999999998899e-05, 0.1283172794583839, 0.019028281701273575, 0.24770505913119045, 0.03974837709661383, 0.16455212177141076, 0.11607089162855955, 0.11096478081638439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04985399548895386, 0.04080167177747984, 0.055869982743463664, 9.999999999998899e-05, 0.003522845101453842, 0.08811886898953403, 0.02329042731577724, 0.06337426899565068, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12865910292113636, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008924475998500214, 0.010774954121489322, 0.05750485780482795, 0.1754551628537132, 0.1950058799494292, 0.23459929759787768, 0.11762350904350771, 0.3853962029505068, 0.15593371151441238, 0.17350899219876104, 0.44620613055987424, 0.17030950026152292, 0.06863406918577475, 0.03413671499596982, 9.999999999998899e-05, 9.999999999998899e-05, 0.058147168222538625, 0.04791026279137478, 0.06808393822747727, 0.12111959121653615, 0.08497675786142422, 0.1773404203053719, 0.16322918684361776, 0.16832879382673982, 0.15037743027259842, 0.1437717323692903, 0.1885473359753138, 0.20324615942395574, 0.18261008817649216, 0.1316956516821043, 0.15566292963497108, 0.21296130523113577, 0.12282853136019334, 0.2585245113067507, 0.181298602858178, 0.12338874896537222, 0.15020683448160677, 0.17304407423230883, 0.16912525113810029, 0.12889025817590904, 0.12993840353970376, 0.06756882313428736, 0.12851176893115912, 0.17193285010655968, 0.08891081650494703, 0.15581391401331024, 0.12255282031159587, 0.05445224773640134, 0.20185115839015288, 0.16740019338692436, 0.2005541347905112, 0.15155111093453089, 0.1359140998870162, 0.21827486390608852, 0.21874050664316536, 0.17313822858120598, 0.14692657983095214, 0.18448812133420223, 0.20563009788737385, 0.18388633814981015, 0.16906191242533242, 0.19668569254154777, 0.19339397428929772, 0.19290927331068086, 0.1609504369762873, 0.18899516086975532, 0.15651893773185643, 0.07282600430978214, 0.1664608092177705, 0.1740120756437702, 0.18743397340848156, 0.1121249232816135, 0.10889418638301196, 0.1143098736219672, 0.1361889028464156, 0.0726519085478412, 0.19641661202659788, 0.06769853800301895, 0.08071958829077286, 0.16953216275337057, 0.17188467250996453, 0.10875027857870079, 0.06699170696763412, 0.08797574212230208, 0.20953608086226416, 0.21168151284734027, 0.18315030883572125, 0.18950510795625763, 0.21320742885958477, 0.19946228511301245, 0.20112435896729552, 0.2117064914015594, 0.23132749284084153, 0.056612484913577066, 0.04631154965046935, 0.06643501060839296, 0.05651996336094545, 0.07824693999545995, 0.016837243622160547, 0.08928458931135597, 0.08541026337228086, 0.07329767308730428]}, "mutation_prompt": null}
{"id": "253c0abc-36e4-4f84-a133-befe5cf76f1c", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "DynamicInertiaWeightPSO", "description": "Introducing a dynamic inertia weight adaptation mechanism that adjusts the inertia weight based on the fitness improvement to balance exploration and exploitation dynamically for faster convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.9160688689853619, 0.9627369441870708, 0.9789426004079395, 0.670674565592865, 0.9729027966168862, 0.34958738629833563, 0.9589372902012749, 0.7816008827970415, 0.6008929617018562, 0.2793017092182567, 0.04286587254480523, 0.2415578930904857, 0.18897633269227188, 9.999999999998899e-05, 0.41369663444211635, 9.999999999998899e-05, 0.2749089142182791, 0.274079281184637, 0.09465595041048769, 0.08066791037475962, 0.12738436688675758, 0.1023637328907685, 0.12601391026791475, 0.15025291814887753, 0.08282817807923215, 0.19357264492257098, 0.13816960891899255, 0.09302878049978935, 0.08116089004276472, 0.11331204727233868, 0.10252356063317114, 0.057827299225806206, 0.09839023089886378, 0.07827530845986219, 0.1206693504554367, 0.045399238195044433, 0.9927849872368487, 0.14218184515757404, 0.9964351801215002, 0.9917768355989791, 0.13022165321704327, 0.9844161357011966, 0.9885953031488375, 0.9941008884383941, 0.9967359679378507, 0.20761795095272417, 0.15151833916510482, 0.16147800308026583, 0.08024314085584161, 0.25360776683602326, 0.11863778252532542, 0.0878151249972654, 0.05865156993007714, 0.2078678006217145, 0.21597664276664885, 0.21978677516595668, 0.07126360366819062, 0.2848283309370818, 0.2701185863176587, 0.08258022860938963, 0.1171823922078109, 0.22682095992895257, 0.09113377219024443, 0.1388006861396891, 0.17990709774223745, 0.16681388700830646, 0.146280049686505, 0.15735241821869062, 0.0097802148924655, 0.1303735527008324, 0.13429722170606329, 0.2224907645082006, 0.1372687290223732, 0.05858198641930268, 9.999999999998899e-05, 0.16296170339359228, 0.13008615412786406, 0.10958596046466151, 0.186598032726645, 9.999999999998899e-05, 0.13312662929887742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1427416095267965, 9.999999999998899e-05, 9.999999999998899e-05, 0.01921209801996937, 9.999999999998899e-05, 0.012831314242139569, 0.02689207498628765, 0.04951487976993063, 0.04651985347627796, 9.999999999998899e-05, 0.007225259901669001, 0.0981457749167377, 0.05099694051086712, 0.012238332475397184, 0.3179475124554423, 0.03386334991864037, 0.04704235136589652, 0.17306844339715044, 0.0029966702390349376, 0.14348164312223255, 9.999999999998899e-05, 0.06792046699058207, 0.12153192291910442, 0.09870030589162704, 0.274203558515678, 0.06775404136998509, 0.03461473721611197, 0.07560240885064717, 0.22402746335007795, 0.10332524368990526, 0.04276567509702689, 0.09655243892122034, 0.539341545041764, 0.4527363319558071, 0.5349066667015143, 0.16250049621966378, 0.24706807568641387, 0.44361592420007745, 0.5211888572740238, 0.2870618340876847, 0.17388671894563446, 0.09930536317013938, 0.09124399183543663, 0.0199594973946019, 0.06735292015808059, 0.076574150081132, 0.09942001551504387, 0.06331777088368651, 0.14896448624559833, 0.0738246281675512, 0.14581709866942605, 0.19046826496189784, 0.26383090622411665, 0.26344795743877936, 0.13364136295500084, 0.35545459216363173, 0.19985017410665207, 0.27575573559946176, 0.18017974136345805, 0.14466960103604343, 0.1848404862988905, 0.16812430293882685, 0.23016604819458952, 0.1805050248348019, 0.18720726920473374, 0.24554850758706037, 0.2620731380248723, 0.2453153577732472, 0.2521901073349009, 0.0855675807440679, 0.12757386397431014, 0.19965633558278728, 0.18105212752312239, 0.17834176087986287, 0.2403559619762623, 0.11907709972960279, 0.15392654860443422, 0.23450743387267403, 0.22368382319249513, 0.20709794193094988, 0.20280108729817103, 0.15235546590782834, 0.16059387271968295, 0.3216845006295377, 0.2147018670114006, 0.21562671808279887, 0.20199212407268174, 0.20379089225614722, 0.20097719589759788, 0.19606866479435425, 0.20275167341001676, 0.25776969651481296, 0.23049671345814626, 0.1749563886122396, 0.18547304583648327, 0.1599440464210229, 0.33369254787578306, 0.16555705738650273, 0.1700566417156546, 0.2023292755387226, 0.17069560574984133, 0.14686094325410537, 0.1593062735542249, 0.15380313986662553, 0.25023217721557145, 0.11364261047903512, 0.3326427270821064, 0.2001796618025241, 0.05936541571470155, 0.17574209295537202, 0.10443774358030367, 0.10550545821857282, 0.11301941221750766, 0.18846423295768877, 0.21119600284988682, 0.18928245588399184, 0.1940454953429288, 0.1913026281435528, 0.18431880529449707, 0.19896786482487805, 0.2536988117157928, 0.19272300165508527, 0.12657190085356884, 0.07654240462859219, 0.07007987392044868, 0.0571188967932823, 0.1031902281134579, 0.06471558144278011, 0.10520556378300283, 0.0927005753498985, 0.09412070419796714]}, "mutation_prompt": null}
{"id": "71f6c135-b729-4e84-96de-bcf23b26276a", "solution": "import numpy as np\n\nclass MultiPopulationDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_populations = 5\n        self.pop_size = int(budget / self.num_populations)\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        populations = [np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim)) for _ in range(self.num_populations)]\n        velocities = [np.zeros((self.pop_size, self.dim)) for _ in range(self.num_populations)]\n        pbest = [pop.copy() for pop in populations]\n        pbest_fitness = [np.apply_along_axis(func, 1, pop) for pop in pbest]\n        gbest = [pop[np.argmin(fitness)] for pop, fitness in zip(pbest, pbest_fitness)]\n        gbest_fitness = [np.min(fitness) for fitness in pbest_fitness]\n\n        for _ in range(self.budget):\n            for i in range(self.num_populations):\n                swarm = populations[i]\n                velocity = velocities[i]\n                pbest_i = pbest[i]\n                pbest_fitness_i = pbest_fitness[i]\n                gbest_i = gbest[i]\n                gbest_fitness_i = gbest_fitness[i]\n\n                w = self.w_max\n\n                r1 = np.random.random((self.pop_size, self.dim))\n                r2 = np.random.random((self.pop_size, self.dim))\n\n                velocity = w * velocity + self.c1 * r1 * (pbest_i - swarm) + self.c2 * r2 * (gbest_i - swarm)\n                swarm += velocity\n\n                fitness = np.apply_along_axis(func, 1, swarm)\n                update_indices = fitness < pbest_fitness_i\n                pbest_i[update_indices] = swarm[update_indices]\n                pbest_fitness_i[update_indices] = fitness[update_indices]\n\n                if np.min(fitness) < gbest_fitness_i:\n                    gbest_i = swarm[np.argmin(fitness)]\n                    gbest_fitness_i = np.min(fitness)\n\n                w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return np.mean(gbest_fitness)", "name": "MultiPopulationDynamicInertiaWeightPSO", "description": "Introducing a multi-population approach where each subpopulation focuses on a different region of the search space to enhance exploration and exploitation.", "configspace": "", "generation": 28, "fitness": 0.09144843562834938, "feedback": "The algorithm MultiPopulationDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "42bd2520-dd13-4591-aefd-47baae91e837", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "DynamicInertiaWeightPSO", "description": "Introducing a dynamic inertia weight adaptation mechanism that adjusts the inertia weight based on the fitness improvement to balance exploration and exploitation dynamically for faster convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.9160688689853619, 0.9627369441870708, 0.9789426004079395, 0.670674565592865, 0.9729027966168862, 0.34958738629833563, 0.9589372902012749, 0.7816008827970415, 0.6008929617018562, 0.2793017092182567, 0.04286587254480523, 0.2415578930904857, 0.18897633269227188, 9.999999999998899e-05, 0.41369663444211635, 9.999999999998899e-05, 0.2749089142182791, 0.274079281184637, 0.09465595041048769, 0.08066791037475962, 0.12738436688675758, 0.1023637328907685, 0.12601391026791475, 0.15025291814887753, 0.08282817807923215, 0.19357264492257098, 0.13816960891899255, 0.09302878049978935, 0.08116089004276472, 0.11331204727233868, 0.10252356063317114, 0.057827299225806206, 0.09839023089886378, 0.07827530845986219, 0.1206693504554367, 0.045399238195044433, 0.9927849872368487, 0.14218184515757404, 0.9964351801215002, 0.9917768355989791, 0.13022165321704327, 0.9844161357011966, 0.9885953031488375, 0.9941008884383941, 0.9967359679378507, 0.20761795095272417, 0.15151833916510482, 0.16147800308026583, 0.08024314085584161, 0.25360776683602326, 0.11863778252532542, 0.0878151249972654, 0.05865156993007714, 0.2078678006217145, 0.21597664276664885, 0.21978677516595668, 0.07126360366819062, 0.2848283309370818, 0.2701185863176587, 0.08258022860938963, 0.1171823922078109, 0.22682095992895257, 0.09113377219024443, 0.1388006861396891, 0.17990709774223745, 0.16681388700830646, 0.146280049686505, 0.15735241821869062, 0.0097802148924655, 0.1303735527008324, 0.13429722170606329, 0.2224907645082006, 0.1372687290223732, 0.05858198641930268, 9.999999999998899e-05, 0.16296170339359228, 0.13008615412786406, 0.10958596046466151, 0.186598032726645, 9.999999999998899e-05, 0.13312662929887742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1427416095267965, 9.999999999998899e-05, 9.999999999998899e-05, 0.01921209801996937, 9.999999999998899e-05, 0.012831314242139569, 0.02689207498628765, 0.04951487976993063, 0.04651985347627796, 9.999999999998899e-05, 0.007225259901669001, 0.0981457749167377, 0.05099694051086712, 0.012238332475397184, 0.3179475124554423, 0.03386334991864037, 0.04704235136589652, 0.17306844339715044, 0.0029966702390349376, 0.14348164312223255, 9.999999999998899e-05, 0.06792046699058207, 0.12153192291910442, 0.09870030589162704, 0.274203558515678, 0.06775404136998509, 0.03461473721611197, 0.07560240885064717, 0.22402746335007795, 0.10332524368990526, 0.04276567509702689, 0.09655243892122034, 0.539341545041764, 0.4527363319558071, 0.5349066667015143, 0.16250049621966378, 0.24706807568641387, 0.44361592420007745, 0.5211888572740238, 0.2870618340876847, 0.17388671894563446, 0.09930536317013938, 0.09124399183543663, 0.0199594973946019, 0.06735292015808059, 0.076574150081132, 0.09942001551504387, 0.06331777088368651, 0.14896448624559833, 0.0738246281675512, 0.14581709866942605, 0.19046826496189784, 0.26383090622411665, 0.26344795743877936, 0.13364136295500084, 0.35545459216363173, 0.19985017410665207, 0.27575573559946176, 0.18017974136345805, 0.14466960103604343, 0.1848404862988905, 0.16812430293882685, 0.23016604819458952, 0.1805050248348019, 0.18720726920473374, 0.24554850758706037, 0.2620731380248723, 0.2453153577732472, 0.2521901073349009, 0.0855675807440679, 0.12757386397431014, 0.19965633558278728, 0.18105212752312239, 0.17834176087986287, 0.2403559619762623, 0.11907709972960279, 0.15392654860443422, 0.23450743387267403, 0.22368382319249513, 0.20709794193094988, 0.20280108729817103, 0.15235546590782834, 0.16059387271968295, 0.3216845006295377, 0.2147018670114006, 0.21562671808279887, 0.20199212407268174, 0.20379089225614722, 0.20097719589759788, 0.19606866479435425, 0.20275167341001676, 0.25776969651481296, 0.23049671345814626, 0.1749563886122396, 0.18547304583648327, 0.1599440464210229, 0.33369254787578306, 0.16555705738650273, 0.1700566417156546, 0.2023292755387226, 0.17069560574984133, 0.14686094325410537, 0.1593062735542249, 0.15380313986662553, 0.25023217721557145, 0.11364261047903512, 0.3326427270821064, 0.2001796618025241, 0.05936541571470155, 0.17574209295537202, 0.10443774358030367, 0.10550545821857282, 0.11301941221750766, 0.18846423295768877, 0.21119600284988682, 0.18928245588399184, 0.1940454953429288, 0.1913026281435528, 0.18431880529449707, 0.19896786482487805, 0.2536988117157928, 0.19272300165508527, 0.12657190085356884, 0.07654240462859219, 0.07007987392044868, 0.0571188967932823, 0.1031902281134579, 0.06471558144278011, 0.10520556378300283, 0.0927005753498985, 0.09412070419796714]}, "mutation_prompt": null}
{"id": "fa77012e-fccf-42e6-9bbd-8e11ef6cfcf7", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            diversity_factor = np.std(swarm)\n            cognitive_component = self.c1 / (1 + diversity_factor)\n            social_component = self.c2 * (1 + diversity_factor)\n\n            velocity = w * velocity + cognitive_component * r1 * (pbest - swarm) + social_component * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "AdaptivePSO", "description": "Introducing an adaptive mechanism to adjust the cognitive and social components of the Particle Swarm Optimization (PSO) algorithm based on the population's diversity to improve convergence speed.", "configspace": "", "generation": 30, "fitness": 0.04108145196754556, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.12.", "error": "", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.07172115044991989, 0.06423415049946268, 0.0822881188591662, 0.019485674469137626, 0.05257887047805776, 0.025191216022295126, 0.03212835352014154, 0.05058928098587567, 0.06701824832800662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007682999284896352, 0.0, 0.0, 0.0, 0.0011187632349987098, 0.0, 0.018150078853237606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04562303984838878, 0.047585567346508095, 0.998883623347395, 0.1280402542032827, 0.058812588967559365, 0.9988548448906537, 0.055061923405217206, 0.09771404100498726, 0.9984564349999029, 0.0, 0.0, 0.0, 0.0, 0.00021551809509001707, 0.0, 0.0, 0.0, 0.0, 0.03232362276045497, 0.0, 0.0, 0.004462664352364976, 0.0, 0.0, 0.026181922062049168, 0.0, 0.009809447265860194, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02363530066906938, 0.10693789276682164, 0.14829537673711224, 0.07339776368244766, 0.08041876921715996, 0.04447476872710865, 0.09452415868638986, 0.08474685940847848, 0.11419823301066623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02666833626569931, 0.0569233726682411, 0.06726366127807482, 0.05459392587769929, 0.09846289938816166, 0.06572254448697334, 0.056336845919289225, 0.0353290699247053, 0.025779377491666144, 0.07717165476235766, 0.09116171693588626, 0.09616018134012416, 0.10350813781504964, 0.10264986706467094, 0.08290739212077247, 0.06784689140952782, 0.11411347464502575, 0.10004631021926014, 0.07123303423380878, 0.03322226033550901, 0.03075358899712477, 0.034551307077603455, 0.059708367437594445, 0.015390172400233548, 0.02833945090219059, 0.05639263182623655, 0.038433917477429747, 0.005985681479316551, 0.09154377975027184, 0.04267402731730685, 0.06795011122388206, 0.09121143776311746, 0.06737852077118656, 0.06900071412896536, 0.12237199858757541, 0.04831892369221713, 0.08893517487915614, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.030488887081602467, 0.0, 0.0, 0.02795548024787675, 0.05604888032687072, 0.0508856862033461, 0.06709542404813529, 0.1207035396655618, 0.019125046257120082, 0.03382267488617985, 0.05652137775177002, 0.053579659675793145, 0.03590455183669672, 0.03957798628310871, 0.017367213145107585, 0.01850796326103321, 0.02150250198996473, 0.04541561500212232, 0.01642972030755685, 0.013831983821563143, 0.02297079570432159, 0.10087028022501054, 0.12008703439342805, 0.1475449842687161, 0.10726544462840115, 0.08005211408412816, 0.12456358843521453, 0.09945213886469684, 0.06815648712583355, 0.08824570648974173, 0.0, 0.0020608381811066945, 0.009878077650213868, 0.0, 0.0057755656362813435, 0.0, 0.014120148992372905, 0.0, 0.006903948184889486]}, "mutation_prompt": null}
{"id": "a966aa7b-b753-4611-a92c-5223e3a94b76", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "DynamicInertiaWeightPSO", "description": "Introducing a dynamic inertia weight adaptation mechanism that adjusts the inertia weight based on the fitness improvement to balance exploration and exploitation dynamically for faster convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.9160688689853619, 0.9627369441870708, 0.9789426004079395, 0.670674565592865, 0.9729027966168862, 0.34958738629833563, 0.9589372902012749, 0.7816008827970415, 0.6008929617018562, 0.2793017092182567, 0.04286587254480523, 0.2415578930904857, 0.18897633269227188, 9.999999999998899e-05, 0.41369663444211635, 9.999999999998899e-05, 0.2749089142182791, 0.274079281184637, 0.09465595041048769, 0.08066791037475962, 0.12738436688675758, 0.1023637328907685, 0.12601391026791475, 0.15025291814887753, 0.08282817807923215, 0.19357264492257098, 0.13816960891899255, 0.09302878049978935, 0.08116089004276472, 0.11331204727233868, 0.10252356063317114, 0.057827299225806206, 0.09839023089886378, 0.07827530845986219, 0.1206693504554367, 0.045399238195044433, 0.9927849872368487, 0.14218184515757404, 0.9964351801215002, 0.9917768355989791, 0.13022165321704327, 0.9844161357011966, 0.9885953031488375, 0.9941008884383941, 0.9967359679378507, 0.20761795095272417, 0.15151833916510482, 0.16147800308026583, 0.08024314085584161, 0.25360776683602326, 0.11863778252532542, 0.0878151249972654, 0.05865156993007714, 0.2078678006217145, 0.21597664276664885, 0.21978677516595668, 0.07126360366819062, 0.2848283309370818, 0.2701185863176587, 0.08258022860938963, 0.1171823922078109, 0.22682095992895257, 0.09113377219024443, 0.1388006861396891, 0.17990709774223745, 0.16681388700830646, 0.146280049686505, 0.15735241821869062, 0.0097802148924655, 0.1303735527008324, 0.13429722170606329, 0.2224907645082006, 0.1372687290223732, 0.05858198641930268, 9.999999999998899e-05, 0.16296170339359228, 0.13008615412786406, 0.10958596046466151, 0.186598032726645, 9.999999999998899e-05, 0.13312662929887742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1427416095267965, 9.999999999998899e-05, 9.999999999998899e-05, 0.01921209801996937, 9.999999999998899e-05, 0.012831314242139569, 0.02689207498628765, 0.04951487976993063, 0.04651985347627796, 9.999999999998899e-05, 0.007225259901669001, 0.0981457749167377, 0.05099694051086712, 0.012238332475397184, 0.3179475124554423, 0.03386334991864037, 0.04704235136589652, 0.17306844339715044, 0.0029966702390349376, 0.14348164312223255, 9.999999999998899e-05, 0.06792046699058207, 0.12153192291910442, 0.09870030589162704, 0.274203558515678, 0.06775404136998509, 0.03461473721611197, 0.07560240885064717, 0.22402746335007795, 0.10332524368990526, 0.04276567509702689, 0.09655243892122034, 0.539341545041764, 0.4527363319558071, 0.5349066667015143, 0.16250049621966378, 0.24706807568641387, 0.44361592420007745, 0.5211888572740238, 0.2870618340876847, 0.17388671894563446, 0.09930536317013938, 0.09124399183543663, 0.0199594973946019, 0.06735292015808059, 0.076574150081132, 0.09942001551504387, 0.06331777088368651, 0.14896448624559833, 0.0738246281675512, 0.14581709866942605, 0.19046826496189784, 0.26383090622411665, 0.26344795743877936, 0.13364136295500084, 0.35545459216363173, 0.19985017410665207, 0.27575573559946176, 0.18017974136345805, 0.14466960103604343, 0.1848404862988905, 0.16812430293882685, 0.23016604819458952, 0.1805050248348019, 0.18720726920473374, 0.24554850758706037, 0.2620731380248723, 0.2453153577732472, 0.2521901073349009, 0.0855675807440679, 0.12757386397431014, 0.19965633558278728, 0.18105212752312239, 0.17834176087986287, 0.2403559619762623, 0.11907709972960279, 0.15392654860443422, 0.23450743387267403, 0.22368382319249513, 0.20709794193094988, 0.20280108729817103, 0.15235546590782834, 0.16059387271968295, 0.3216845006295377, 0.2147018670114006, 0.21562671808279887, 0.20199212407268174, 0.20379089225614722, 0.20097719589759788, 0.19606866479435425, 0.20275167341001676, 0.25776969651481296, 0.23049671345814626, 0.1749563886122396, 0.18547304583648327, 0.1599440464210229, 0.33369254787578306, 0.16555705738650273, 0.1700566417156546, 0.2023292755387226, 0.17069560574984133, 0.14686094325410537, 0.1593062735542249, 0.15380313986662553, 0.25023217721557145, 0.11364261047903512, 0.3326427270821064, 0.2001796618025241, 0.05936541571470155, 0.17574209295537202, 0.10443774358030367, 0.10550545821857282, 0.11301941221750766, 0.18846423295768877, 0.21119600284988682, 0.18928245588399184, 0.1940454953429288, 0.1913026281435528, 0.18431880529449707, 0.19896786482487805, 0.2536988117157928, 0.19272300165508527, 0.12657190085356884, 0.07654240462859219, 0.07007987392044868, 0.0571188967932823, 0.1031902281134579, 0.06471558144278011, 0.10520556378300283, 0.0927005753498985, 0.09412070419796714]}, "mutation_prompt": null}
{"id": "01bffc2e-5d52-4c92-ab9b-7d5285b0a4b1", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "DynamicInertiaWeightPSO", "description": "Introducing a dynamic inertia weight adaptation mechanism that adjusts the inertia weight based on the fitness improvement to balance exploration and exploitation dynamically for faster convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.9160688689853619, 0.9627369441870708, 0.9789426004079395, 0.670674565592865, 0.9729027966168862, 0.34958738629833563, 0.9589372902012749, 0.7816008827970415, 0.6008929617018562, 0.2793017092182567, 0.04286587254480523, 0.2415578930904857, 0.18897633269227188, 9.999999999998899e-05, 0.41369663444211635, 9.999999999998899e-05, 0.2749089142182791, 0.274079281184637, 0.09465595041048769, 0.08066791037475962, 0.12738436688675758, 0.1023637328907685, 0.12601391026791475, 0.15025291814887753, 0.08282817807923215, 0.19357264492257098, 0.13816960891899255, 0.09302878049978935, 0.08116089004276472, 0.11331204727233868, 0.10252356063317114, 0.057827299225806206, 0.09839023089886378, 0.07827530845986219, 0.1206693504554367, 0.045399238195044433, 0.9927849872368487, 0.14218184515757404, 0.9964351801215002, 0.9917768355989791, 0.13022165321704327, 0.9844161357011966, 0.9885953031488375, 0.9941008884383941, 0.9967359679378507, 0.20761795095272417, 0.15151833916510482, 0.16147800308026583, 0.08024314085584161, 0.25360776683602326, 0.11863778252532542, 0.0878151249972654, 0.05865156993007714, 0.2078678006217145, 0.21597664276664885, 0.21978677516595668, 0.07126360366819062, 0.2848283309370818, 0.2701185863176587, 0.08258022860938963, 0.1171823922078109, 0.22682095992895257, 0.09113377219024443, 0.1388006861396891, 0.17990709774223745, 0.16681388700830646, 0.146280049686505, 0.15735241821869062, 0.0097802148924655, 0.1303735527008324, 0.13429722170606329, 0.2224907645082006, 0.1372687290223732, 0.05858198641930268, 9.999999999998899e-05, 0.16296170339359228, 0.13008615412786406, 0.10958596046466151, 0.186598032726645, 9.999999999998899e-05, 0.13312662929887742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1427416095267965, 9.999999999998899e-05, 9.999999999998899e-05, 0.01921209801996937, 9.999999999998899e-05, 0.012831314242139569, 0.02689207498628765, 0.04951487976993063, 0.04651985347627796, 9.999999999998899e-05, 0.007225259901669001, 0.0981457749167377, 0.05099694051086712, 0.012238332475397184, 0.3179475124554423, 0.03386334991864037, 0.04704235136589652, 0.17306844339715044, 0.0029966702390349376, 0.14348164312223255, 9.999999999998899e-05, 0.06792046699058207, 0.12153192291910442, 0.09870030589162704, 0.274203558515678, 0.06775404136998509, 0.03461473721611197, 0.07560240885064717, 0.22402746335007795, 0.10332524368990526, 0.04276567509702689, 0.09655243892122034, 0.539341545041764, 0.4527363319558071, 0.5349066667015143, 0.16250049621966378, 0.24706807568641387, 0.44361592420007745, 0.5211888572740238, 0.2870618340876847, 0.17388671894563446, 0.09930536317013938, 0.09124399183543663, 0.0199594973946019, 0.06735292015808059, 0.076574150081132, 0.09942001551504387, 0.06331777088368651, 0.14896448624559833, 0.0738246281675512, 0.14581709866942605, 0.19046826496189784, 0.26383090622411665, 0.26344795743877936, 0.13364136295500084, 0.35545459216363173, 0.19985017410665207, 0.27575573559946176, 0.18017974136345805, 0.14466960103604343, 0.1848404862988905, 0.16812430293882685, 0.23016604819458952, 0.1805050248348019, 0.18720726920473374, 0.24554850758706037, 0.2620731380248723, 0.2453153577732472, 0.2521901073349009, 0.0855675807440679, 0.12757386397431014, 0.19965633558278728, 0.18105212752312239, 0.17834176087986287, 0.2403559619762623, 0.11907709972960279, 0.15392654860443422, 0.23450743387267403, 0.22368382319249513, 0.20709794193094988, 0.20280108729817103, 0.15235546590782834, 0.16059387271968295, 0.3216845006295377, 0.2147018670114006, 0.21562671808279887, 0.20199212407268174, 0.20379089225614722, 0.20097719589759788, 0.19606866479435425, 0.20275167341001676, 0.25776969651481296, 0.23049671345814626, 0.1749563886122396, 0.18547304583648327, 0.1599440464210229, 0.33369254787578306, 0.16555705738650273, 0.1700566417156546, 0.2023292755387226, 0.17069560574984133, 0.14686094325410537, 0.1593062735542249, 0.15380313986662553, 0.25023217721557145, 0.11364261047903512, 0.3326427270821064, 0.2001796618025241, 0.05936541571470155, 0.17574209295537202, 0.10443774358030367, 0.10550545821857282, 0.11301941221750766, 0.18846423295768877, 0.21119600284988682, 0.18928245588399184, 0.1940454953429288, 0.1913026281435528, 0.18431880529449707, 0.19896786482487805, 0.2536988117157928, 0.19272300165508527, 0.12657190085356884, 0.07654240462859219, 0.07007987392044868, 0.0571188967932823, 0.1031902281134579, 0.06471558144278011, 0.10520556378300283, 0.0927005753498985, 0.09412070419796714]}, "mutation_prompt": null}
{"id": "9507fd13-8376-4d0b-a8f8-68299588260a", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "DynamicInertiaWeightPSO", "description": "Introducing a dynamic inertia weight adaptation mechanism that adjusts the inertia weight based on the fitness improvement to balance exploration and exploitation dynamically for faster convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.9160688689853619, 0.9627369441870708, 0.9789426004079395, 0.670674565592865, 0.9729027966168862, 0.34958738629833563, 0.9589372902012749, 0.7816008827970415, 0.6008929617018562, 0.2793017092182567, 0.04286587254480523, 0.2415578930904857, 0.18897633269227188, 9.999999999998899e-05, 0.41369663444211635, 9.999999999998899e-05, 0.2749089142182791, 0.274079281184637, 0.09465595041048769, 0.08066791037475962, 0.12738436688675758, 0.1023637328907685, 0.12601391026791475, 0.15025291814887753, 0.08282817807923215, 0.19357264492257098, 0.13816960891899255, 0.09302878049978935, 0.08116089004276472, 0.11331204727233868, 0.10252356063317114, 0.057827299225806206, 0.09839023089886378, 0.07827530845986219, 0.1206693504554367, 0.045399238195044433, 0.9927849872368487, 0.14218184515757404, 0.9964351801215002, 0.9917768355989791, 0.13022165321704327, 0.9844161357011966, 0.9885953031488375, 0.9941008884383941, 0.9967359679378507, 0.20761795095272417, 0.15151833916510482, 0.16147800308026583, 0.08024314085584161, 0.25360776683602326, 0.11863778252532542, 0.0878151249972654, 0.05865156993007714, 0.2078678006217145, 0.21597664276664885, 0.21978677516595668, 0.07126360366819062, 0.2848283309370818, 0.2701185863176587, 0.08258022860938963, 0.1171823922078109, 0.22682095992895257, 0.09113377219024443, 0.1388006861396891, 0.17990709774223745, 0.16681388700830646, 0.146280049686505, 0.15735241821869062, 0.0097802148924655, 0.1303735527008324, 0.13429722170606329, 0.2224907645082006, 0.1372687290223732, 0.05858198641930268, 9.999999999998899e-05, 0.16296170339359228, 0.13008615412786406, 0.10958596046466151, 0.186598032726645, 9.999999999998899e-05, 0.13312662929887742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1427416095267965, 9.999999999998899e-05, 9.999999999998899e-05, 0.01921209801996937, 9.999999999998899e-05, 0.012831314242139569, 0.02689207498628765, 0.04951487976993063, 0.04651985347627796, 9.999999999998899e-05, 0.007225259901669001, 0.0981457749167377, 0.05099694051086712, 0.012238332475397184, 0.3179475124554423, 0.03386334991864037, 0.04704235136589652, 0.17306844339715044, 0.0029966702390349376, 0.14348164312223255, 9.999999999998899e-05, 0.06792046699058207, 0.12153192291910442, 0.09870030589162704, 0.274203558515678, 0.06775404136998509, 0.03461473721611197, 0.07560240885064717, 0.22402746335007795, 0.10332524368990526, 0.04276567509702689, 0.09655243892122034, 0.539341545041764, 0.4527363319558071, 0.5349066667015143, 0.16250049621966378, 0.24706807568641387, 0.44361592420007745, 0.5211888572740238, 0.2870618340876847, 0.17388671894563446, 0.09930536317013938, 0.09124399183543663, 0.0199594973946019, 0.06735292015808059, 0.076574150081132, 0.09942001551504387, 0.06331777088368651, 0.14896448624559833, 0.0738246281675512, 0.14581709866942605, 0.19046826496189784, 0.26383090622411665, 0.26344795743877936, 0.13364136295500084, 0.35545459216363173, 0.19985017410665207, 0.27575573559946176, 0.18017974136345805, 0.14466960103604343, 0.1848404862988905, 0.16812430293882685, 0.23016604819458952, 0.1805050248348019, 0.18720726920473374, 0.24554850758706037, 0.2620731380248723, 0.2453153577732472, 0.2521901073349009, 0.0855675807440679, 0.12757386397431014, 0.19965633558278728, 0.18105212752312239, 0.17834176087986287, 0.2403559619762623, 0.11907709972960279, 0.15392654860443422, 0.23450743387267403, 0.22368382319249513, 0.20709794193094988, 0.20280108729817103, 0.15235546590782834, 0.16059387271968295, 0.3216845006295377, 0.2147018670114006, 0.21562671808279887, 0.20199212407268174, 0.20379089225614722, 0.20097719589759788, 0.19606866479435425, 0.20275167341001676, 0.25776969651481296, 0.23049671345814626, 0.1749563886122396, 0.18547304583648327, 0.1599440464210229, 0.33369254787578306, 0.16555705738650273, 0.1700566417156546, 0.2023292755387226, 0.17069560574984133, 0.14686094325410537, 0.1593062735542249, 0.15380313986662553, 0.25023217721557145, 0.11364261047903512, 0.3326427270821064, 0.2001796618025241, 0.05936541571470155, 0.17574209295537202, 0.10443774358030367, 0.10550545821857282, 0.11301941221750766, 0.18846423295768877, 0.21119600284988682, 0.18928245588399184, 0.1940454953429288, 0.1913026281435528, 0.18431880529449707, 0.19896786482487805, 0.2536988117157928, 0.19272300165508527, 0.12657190085356884, 0.07654240462859219, 0.07007987392044868, 0.0571188967932823, 0.1031902281134579, 0.06471558144278011, 0.10520556378300283, 0.0927005753498985, 0.09412070419796714]}, "mutation_prompt": null}
{"id": "f99331c6-d683-408f-aaea-27470cc6cda0", "solution": "import numpy as np\n\nclass AdaptiveLearningRatePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.c1_min = 1.5\n        self.c1_max = 2.5\n        self.c2_min = 1.5\n        self.c2_max = 2.5\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        c1 = np.random.uniform(self.c1_min, self.c1_max)\n        c2 = np.random.uniform(self.c2_min, self.c2_max)\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = velocity + c1 * r1 * (pbest - swarm) + c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n\n        return gbest_fitness", "name": "AdaptiveLearningRatePSO", "description": "Implement a novel adaptive learning rate mechanism that dynamically adjusts the cognitive and social components to enhance exploitation and exploration balancing, leading to faster convergence.", "configspace": "", "generation": 34, "fitness": 0.08817849613386214, "feedback": "The algorithm AdaptiveLearningRatePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.20.", "error": "", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.11855763522082052, 0.12229703881367837, 0.10437487795400846, 0.10272874775594099, 0.06760798033453319, 0.1107665177131244, 0.16930387456504215, 0.07163729567282973, 0.1337692165039711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035053493163017535, 9.999999999998899e-05, 9.999999999998899e-05, 0.02204365373863315, 0.0012186513362246743, 0.007544594194581755, 0.026643156898817688, 9.999999999998899e-05, 0.035089371946775305, 0.015431583453552555, 9.999999999998899e-05, 9.999999999998899e-05, 0.002354655166395103, 9.999999999998899e-05, 0.003925128406528144, 0.005157214499681317, 9.999999999998899e-05, 9.999999999998899e-05, 0.995597233267292, 0.9960502308649849, 0.9968550169276988, 0.9971709075894063, 0.9980287031546179, 0.9966500677224469, 0.9970245062804263, 0.9971608263417645, 0.9924640516452242, 0.013471054360097101, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.0267030368049751, 0.018075141368010694, 0.0017548944483516404, 9.999999999998899e-05, 0.12765722123543088, 0.08371576550324156, 0.02186866330709092, 0.17498550541621594, 0.009383176474700106, 0.002434673615820837, 0.057108853274122295, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017355868186139878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04776259215690282, 0.17273761490136985, 0.1851736999349266, 0.13765580309597736, 0.15131832556125413, 0.05954028700148606, 0.13973824029675108, 0.11319540134734252, 0.15563161327694075, 0.008793055130572824, 9.999999999998899e-05, 9.999999999998899e-05, 0.00862624681424895, 9.999999999998899e-05, 0.024898573676622404, 0.019659355149950875, 9.999999999998899e-05, 0.0267656688986897, 0.07160212104064834, 0.10921307453130646, 0.08994083451975698, 0.13647966257471655, 0.09727133595735926, 0.0922084807788286, 0.05793129255959861, 0.06085813448843691, 0.07726393575557644, 0.11215752017008673, 0.15960397613809563, 0.10913409046849432, 0.17134304421422608, 0.13442401769148726, 0.14425115595363458, 0.1238877324808042, 0.10165478655225013, 0.10425686161662884, 0.09532571030659442, 0.11081518025647963, 0.04689158098333135, 0.11394955671699913, 0.08658734608656415, 0.10206183426659676, 0.05720523704822389, 0.05025646645522952, 0.07701118504834581, 0.13470445180802704, 0.1071004524200474, 0.1250995718252228, 0.1285520041999365, 0.12952273245625145, 0.11914919988771666, 0.12245976138762271, 0.09409069778720136, 0.11678504233938114, 9.999999999998899e-05, 0.057180715580707475, 9.999999999998899e-05, 0.1479002909011229, 9.999999999998899e-05, 0.018006887459755982, 0.13450129212937867, 9.999999999998899e-05, 9.999999999998899e-05, 0.13780803627175375, 0.07660618331238278, 0.10652281723071444, 0.09931865525889405, 0.1207914665021157, 0.0495766330199946, 0.11666400018653855, 0.06469903156844958, 0.09321601127369028, 0.0827437381118512, 0.07840747728725417, 0.08244531279412715, 0.03594094987530971, 0.07912893720715097, 0.1268228361582795, 0.025696690590422455, 0.0877582250459833, 0.08299630862831964, 0.14114951338560455, 0.12108398436656242, 0.14763022729669195, 0.1565027660339301, 0.1472310877048678, 0.13223201575436527, 0.1227805029243455, 0.1305488294276218, 0.11298289321732624, 0.016934884392380778, 0.007769303886739909, 0.04083470100160247, 0.033781221125969596, 0.020791574257657208, 0.05572039677277041, 0.03754302557665101, 0.017389099631234917, 0.012274191899288911]}, "mutation_prompt": null}
{"id": "5af3b1d3-6f7f-45ee-8745-24d50e78db3e", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "DynamicInertiaWeightPSO", "description": "Introducing a dynamic inertia weight adaptation mechanism that adjusts the inertia weight based on the fitness improvement to balance exploration and exploitation dynamically for faster convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.9160688689853619, 0.9627369441870708, 0.9789426004079395, 0.670674565592865, 0.9729027966168862, 0.34958738629833563, 0.9589372902012749, 0.7816008827970415, 0.6008929617018562, 0.2793017092182567, 0.04286587254480523, 0.2415578930904857, 0.18897633269227188, 9.999999999998899e-05, 0.41369663444211635, 9.999999999998899e-05, 0.2749089142182791, 0.274079281184637, 0.09465595041048769, 0.08066791037475962, 0.12738436688675758, 0.1023637328907685, 0.12601391026791475, 0.15025291814887753, 0.08282817807923215, 0.19357264492257098, 0.13816960891899255, 0.09302878049978935, 0.08116089004276472, 0.11331204727233868, 0.10252356063317114, 0.057827299225806206, 0.09839023089886378, 0.07827530845986219, 0.1206693504554367, 0.045399238195044433, 0.9927849872368487, 0.14218184515757404, 0.9964351801215002, 0.9917768355989791, 0.13022165321704327, 0.9844161357011966, 0.9885953031488375, 0.9941008884383941, 0.9967359679378507, 0.20761795095272417, 0.15151833916510482, 0.16147800308026583, 0.08024314085584161, 0.25360776683602326, 0.11863778252532542, 0.0878151249972654, 0.05865156993007714, 0.2078678006217145, 0.21597664276664885, 0.21978677516595668, 0.07126360366819062, 0.2848283309370818, 0.2701185863176587, 0.08258022860938963, 0.1171823922078109, 0.22682095992895257, 0.09113377219024443, 0.1388006861396891, 0.17990709774223745, 0.16681388700830646, 0.146280049686505, 0.15735241821869062, 0.0097802148924655, 0.1303735527008324, 0.13429722170606329, 0.2224907645082006, 0.1372687290223732, 0.05858198641930268, 9.999999999998899e-05, 0.16296170339359228, 0.13008615412786406, 0.10958596046466151, 0.186598032726645, 9.999999999998899e-05, 0.13312662929887742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1427416095267965, 9.999999999998899e-05, 9.999999999998899e-05, 0.01921209801996937, 9.999999999998899e-05, 0.012831314242139569, 0.02689207498628765, 0.04951487976993063, 0.04651985347627796, 9.999999999998899e-05, 0.007225259901669001, 0.0981457749167377, 0.05099694051086712, 0.012238332475397184, 0.3179475124554423, 0.03386334991864037, 0.04704235136589652, 0.17306844339715044, 0.0029966702390349376, 0.14348164312223255, 9.999999999998899e-05, 0.06792046699058207, 0.12153192291910442, 0.09870030589162704, 0.274203558515678, 0.06775404136998509, 0.03461473721611197, 0.07560240885064717, 0.22402746335007795, 0.10332524368990526, 0.04276567509702689, 0.09655243892122034, 0.539341545041764, 0.4527363319558071, 0.5349066667015143, 0.16250049621966378, 0.24706807568641387, 0.44361592420007745, 0.5211888572740238, 0.2870618340876847, 0.17388671894563446, 0.09930536317013938, 0.09124399183543663, 0.0199594973946019, 0.06735292015808059, 0.076574150081132, 0.09942001551504387, 0.06331777088368651, 0.14896448624559833, 0.0738246281675512, 0.14581709866942605, 0.19046826496189784, 0.26383090622411665, 0.26344795743877936, 0.13364136295500084, 0.35545459216363173, 0.19985017410665207, 0.27575573559946176, 0.18017974136345805, 0.14466960103604343, 0.1848404862988905, 0.16812430293882685, 0.23016604819458952, 0.1805050248348019, 0.18720726920473374, 0.24554850758706037, 0.2620731380248723, 0.2453153577732472, 0.2521901073349009, 0.0855675807440679, 0.12757386397431014, 0.19965633558278728, 0.18105212752312239, 0.17834176087986287, 0.2403559619762623, 0.11907709972960279, 0.15392654860443422, 0.23450743387267403, 0.22368382319249513, 0.20709794193094988, 0.20280108729817103, 0.15235546590782834, 0.16059387271968295, 0.3216845006295377, 0.2147018670114006, 0.21562671808279887, 0.20199212407268174, 0.20379089225614722, 0.20097719589759788, 0.19606866479435425, 0.20275167341001676, 0.25776969651481296, 0.23049671345814626, 0.1749563886122396, 0.18547304583648327, 0.1599440464210229, 0.33369254787578306, 0.16555705738650273, 0.1700566417156546, 0.2023292755387226, 0.17069560574984133, 0.14686094325410537, 0.1593062735542249, 0.15380313986662553, 0.25023217721557145, 0.11364261047903512, 0.3326427270821064, 0.2001796618025241, 0.05936541571470155, 0.17574209295537202, 0.10443774358030367, 0.10550545821857282, 0.11301941221750766, 0.18846423295768877, 0.21119600284988682, 0.18928245588399184, 0.1940454953429288, 0.1913026281435528, 0.18431880529449707, 0.19896786482487805, 0.2536988117157928, 0.19272300165508527, 0.12657190085356884, 0.07654240462859219, 0.07007987392044868, 0.0571188967932823, 0.1031902281134579, 0.06471558144278011, 0.10520556378300283, 0.0927005753498985, 0.09412070419796714]}, "mutation_prompt": null}
{"id": "f26f28e8-41c5-4a8d-bf01-d295fda6739c", "solution": "import numpy as np\n\nclass DynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate_min = 0.01\n        self.mutation_rate_max = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        mutation_rate = self.mutation_rate_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            mutation_rate = self.mutation_rate_min + (_ / self.budget) * (self.mutation_rate_max - self.mutation_rate_min)\n            mutation_mask = np.random.choice([0, 1], size=(self.dim, self.dim), p=[1 - mutation_rate, mutation_rate])\n            swarm += mutation_mask * np.random.normal(0, 1, (self.dim, self.dim))\n\n        return gbest_fitness", "name": "DynamicMutationPSO", "description": "Implementing a dynamic mutation strategy that adjusts the mutation rate based on the local search behavior to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 36, "fitness": 0.08237324526124608, "feedback": "The algorithm DynamicMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.20.", "error": "", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.10735048417087578, 0.10701941937812043, 0.11867192691936401, 0.13316252078241597, 0.111884936500107, 0.04414217850396307, 0.08375414266174541, 0.13805367312955463, 0.20153941219290228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011511993210081006, 9.999999999998899e-05, 9.999999999998899e-05, 0.014734462039202478, 0.011383350121930147, 0.011640441286979164, 0.030463934488685673, 0.012794806869194653, 0.007684074821163955, 0.01944910373036368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.994695322856645, 0.9966003856922512, 0.9985792266610097, 0.9979463863734819, 0.993234184311332, 0.9979257453314899, 0.997648211787494, 0.9972869921276117, 0.9972431084849549, 0.04905487804459574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015088513713145235, 0.007392055186908886, 0.009097269960259613, 9.999999999998899e-05, 9.999999999998899e-05, 0.10139280058588995, 9.999999999998899e-05, 9.999999999998899e-05, 0.04789521044518419, 9.999999999998899e-05, 9.999999999998899e-05, 0.037688805118313407, 9.999999999998899e-05, 0.03957881445881517, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03183801776628825, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028613928683914658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04874919114293175, 0.1352583997500043, 0.19104445870158904, 0.08300176221736055, 0.10042817485096345, 0.0894650819921684, 0.11482040266805593, 0.0857358618918479, 0.15342508490945783, 9.999999999998899e-05, 9.999999999998899e-05, 0.004086438999592046, 0.007281730466531355, 0.027498958269442708, 9.999999999998899e-05, 0.02167411665899399, 0.013473540995346367, 0.03589055756704873, 0.08390547966377615, 0.08661289905810077, 0.05682493945123257, 0.10670227551581957, 0.08217304256372426, 0.084800277573986, 0.08344805631890306, 0.054569202312388376, 0.07726393575557644, 0.12822045140954086, 0.1295206053096506, 0.1237022100959706, 0.12025879281525909, 0.11367304868336048, 0.10954093066156712, 0.12482538154942358, 0.1571234593377363, 0.08347295271599886, 0.044361221060490785, 0.041934233639355445, 0.06689447595725961, 0.06808550278056558, 0.04295244159771683, 0.06699078797825586, 0.06764549030361955, 0.04143853362187744, 0.03683902323069688, 0.10208268631985462, 0.07683606162995271, 0.09938133414288985, 0.11037717794874569, 0.11010064731716007, 0.09961418966785607, 0.13409503335810624, 0.08911554122260601, 0.15695301104067372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14423902357758778, 9.999999999998899e-05, 0.12694258673464665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09728945076441209, 0.06518431106865263, 0.08984070433317104, 0.07834610010338405, 0.13519706069183035, 0.04303447851635789, 0.07982371450841164, 0.08528763392779659, 0.07020136352372097, 0.036158418558046246, 0.04787668626673236, 0.025748579762171375, 0.08686752204988846, 0.11522437309478084, 0.06153967059493004, 0.07807428678111372, 0.041917488116148705, 0.06966846672773186, 0.1098439967518714, 0.1331331149522721, 0.14763022729669195, 0.1256278713595428, 0.14919517114836367, 0.12465113207635137, 0.11012615995363939, 0.11277689147822878, 0.12716853707000897, 0.01933646784218801, 0.015898850200501302, 0.018280272771980854, 0.033256710809261514, 0.02705685166540006, 0.005364909150773589, 0.014137849951112225, 0.0241620710569459, 0.02920215810523774]}, "mutation_prompt": null}
{"id": "174d2d49-5dae-460d-b592-21543410b0f4", "solution": "import numpy as np\n\nclass FastConvergingDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c_min = 1.5\n        self.c_max = 2.5\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n        c1 = self.c_max\n        c2 = self.c_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + c1 * r1 * (pbest - swarm) + c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n            c1 = self.c_min + (_ / self.budget) * (self.c_max - self.c_min)\n            c2 = self.c_min + (_ / self.budget) * (self.c_max - self.c_min)\n\n        return gbest_fitness", "name": "FastConvergingDynamicInertiaWeightPSO", "description": "Implementing a dynamic acceleration coefficient adaptation to adjust the cognitive and social components based on fitness improvement to enhance convergence speed.", "configspace": "", "generation": 37, "fitness": 0.10740698842539305, "feedback": "The algorithm FastConvergingDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.14.", "error": "", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.17087314677727083, 0.3786617733388532, 0.3576518643185205, 0.04499555804354893, 0.276855632161186, 0.14813691764451542, 0.15575200940579725, 0.3075064440195129, 0.12670651423220114, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0874598592534579, 0.019763438925193944, 0.004103436812529115, 0.08512425193728668, 0.04072754688637181, 0.08894491563163431, 0.05823431860111028, 0.07382938568294817, 0.052214501991566964, 0.09723654537616988, 0.0034500983758781745, 0.020990255463600227, 0.05055134065361255, 0.0065820261893785315, 0.032783924527147845, 0.11077191043668866, 0.04129956148745828, 0.020647102446397225, 0.14859764319918034, 0.11747694558033694, 0.9944997735356816, 0.07266517912394588, 0.1297084215781824, 0.9885926266811819, 0.059634212620192195, 0.9937071887806885, 0.2029866879225397, 0.21869209676325796, 0.03414112565793692, 0.0262149683663907, 9.999999999998899e-05, 0.09012897122283725, 0.06346330483661056, 0.006019658080186452, 9.999999999998899e-05, 0.03620053557987957, 0.09251788995553512, 0.08200256382154891, 0.09270604546425387, 0.13346466054036354, 0.1434325539246274, 0.02241691756241071, 0.059028060567047014, 0.051661012519875094, 0.020344040288437615, 9.999999999998899e-05, 0.13358592192746221, 0.21002929258966363, 0.12881181565152422, 0.06271592909179324, 0.007789617542619975, 9.999999999998899e-05, 0.0017555519954539633, 9.999999999998899e-05, 0.17965843939138382, 9.999999999998899e-05, 0.012566224342457133, 0.028022398510384128, 9.999999999998899e-05, 0.03800497613078335, 0.03151266495893379, 9.999999999998899e-05, 0.0027854444917182475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00035362936851501825, 0.004560451300334223, 0.07499501664261499, 0.059480079525025764, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830635751055755, 9.999999999998899e-05, 0.05955251977642073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04255876262302705, 9.999999999998899e-05, 9.999999999998899e-05, 0.09025677196422988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21581745817431885, 0.26598971048892894, 0.19797229407409922, 0.13190033140896373, 0.3250433381397575, 0.10305878398542423, 0.14278477839629544, 0.13358433929958968, 0.1513665927152884, 0.044806371084235797, 0.006608770941963882, 9.999999999998899e-05, 9.999999999998899e-05, 0.12043146826021545, 0.06740790231313987, 0.03304533114976116, 0.03652245409168231, 0.06036248255717347, 0.11354391015027909, 0.21399640826250932, 0.13547471527897592, 0.18201741057585163, 0.13188274182627502, 0.16623712760937503, 0.13916187108114353, 0.18749546587458543, 0.27404552532912607, 0.14500785822978357, 0.26356428122340025, 0.13307915466205666, 0.1596205205620903, 0.14394274087667203, 0.12454547216501888, 0.16599849865495164, 0.13909795017886284, 0.12725141263189232, 0.09224800735972183, 0.10824805636687107, 0.07006016261738945, 0.11345655053521186, 0.09319415163739564, 0.09947153430444011, 0.12010304032816843, 0.09423155826406149, 0.05296939176182636, 0.20966493989065504, 0.23110440701456902, 0.17980140309664527, 0.1953647321316504, 0.13013637385253674, 0.15462548850353708, 0.1803306406700692, 0.1503219591019661, 0.19557718320381146, 0.17366170938631953, 0.17418479955144717, 0.1488498223454786, 9.999999999998899e-05, 0.19735804952516123, 0.1752282297539497, 0.24637735952656659, 0.18983281457910084, 9.999999999998899e-05, 0.12262915706648814, 0.07577104113680777, 0.1446553785354081, 0.1702657715145277, 0.5188509722766246, 0.10695602602399867, 0.10212400550522849, 0.11153251404626985, 0.10216948805067783, 0.4744669220812894, 0.2587082471659665, 0.05220276828215098, 0.12716935381944894, 0.0903481383652679, 0.12086938239705292, 0.10396866182613207, 0.10183205214804025, 0.12899833113191195, 0.2149583168971968, 0.17631337496670263, 0.18896045969880038, 0.215478027008697, 0.1850589327537131, 0.19673795516785575, 0.25242597044476, 0.20581017746540442, 0.22935901102022493, 0.036845624496982365, 0.09894003329140955, 0.07430169619276061, 0.04894404065476865, 0.0835359698086039, 0.08527103441657236, 0.06518098482915213, 0.09472951624292836, 0.07535587786995035]}, "mutation_prompt": null}
{"id": "e766ea5a-91a6-4cae-95d8-8b5ae12e7913", "solution": "import numpy as np\n\nclass AccelerationDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.5\n        self.c2_min = 1.5\n        self.c2_max = 2.5\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n        c1 = self.c1_max\n        c2 = self.c2_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + c1 * r1 * (pbest - swarm) + c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n\n        return gbest_fitness", "name": "AccelerationDynamicPSO", "description": "Utilize a dynamic approach to adjust the acceleration coefficients based on the fitness improvement to enhance the exploration and exploitation balance for quicker convergence.", "configspace": "", "generation": 38, "fitness": 0.10740698842539305, "feedback": "The algorithm AccelerationDynamicPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.14.", "error": "", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.17087314677727083, 0.3786617733388532, 0.3576518643185205, 0.04499555804354893, 0.276855632161186, 0.14813691764451542, 0.15575200940579725, 0.3075064440195129, 0.12670651423220114, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0874598592534579, 0.019763438925193944, 0.004103436812529115, 0.08512425193728668, 0.04072754688637181, 0.08894491563163431, 0.05823431860111028, 0.07382938568294817, 0.052214501991566964, 0.09723654537616988, 0.0034500983758781745, 0.020990255463600227, 0.05055134065361255, 0.0065820261893785315, 0.032783924527147845, 0.11077191043668866, 0.04129956148745828, 0.020647102446397225, 0.14859764319918034, 0.11747694558033694, 0.9944997735356816, 0.07266517912394588, 0.1297084215781824, 0.9885926266811819, 0.059634212620192195, 0.9937071887806885, 0.2029866879225397, 0.21869209676325796, 0.03414112565793692, 0.0262149683663907, 9.999999999998899e-05, 0.09012897122283725, 0.06346330483661056, 0.006019658080186452, 9.999999999998899e-05, 0.03620053557987957, 0.09251788995553512, 0.08200256382154891, 0.09270604546425387, 0.13346466054036354, 0.1434325539246274, 0.02241691756241071, 0.059028060567047014, 0.051661012519875094, 0.020344040288437615, 9.999999999998899e-05, 0.13358592192746221, 0.21002929258966363, 0.12881181565152422, 0.06271592909179324, 0.007789617542619975, 9.999999999998899e-05, 0.0017555519954539633, 9.999999999998899e-05, 0.17965843939138382, 9.999999999998899e-05, 0.012566224342457133, 0.028022398510384128, 9.999999999998899e-05, 0.03800497613078335, 0.03151266495893379, 9.999999999998899e-05, 0.0027854444917182475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00035362936851501825, 0.004560451300334223, 0.07499501664261499, 0.059480079525025764, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830635751055755, 9.999999999998899e-05, 0.05955251977642073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04255876262302705, 9.999999999998899e-05, 9.999999999998899e-05, 0.09025677196422988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21581745817431885, 0.26598971048892894, 0.19797229407409922, 0.13190033140896373, 0.3250433381397575, 0.10305878398542423, 0.14278477839629544, 0.13358433929958968, 0.1513665927152884, 0.044806371084235797, 0.006608770941963882, 9.999999999998899e-05, 9.999999999998899e-05, 0.12043146826021545, 0.06740790231313987, 0.03304533114976116, 0.03652245409168231, 0.06036248255717347, 0.11354391015027909, 0.21399640826250932, 0.13547471527897592, 0.18201741057585163, 0.13188274182627502, 0.16623712760937503, 0.13916187108114353, 0.18749546587458543, 0.27404552532912607, 0.14500785822978357, 0.26356428122340025, 0.13307915466205666, 0.1596205205620903, 0.14394274087667203, 0.12454547216501888, 0.16599849865495164, 0.13909795017886284, 0.12725141263189232, 0.09224800735972183, 0.10824805636687107, 0.07006016261738945, 0.11345655053521186, 0.09319415163739564, 0.09947153430444011, 0.12010304032816843, 0.09423155826406149, 0.05296939176182636, 0.20966493989065504, 0.23110440701456902, 0.17980140309664527, 0.1953647321316504, 0.13013637385253674, 0.15462548850353708, 0.1803306406700692, 0.1503219591019661, 0.19557718320381146, 0.17366170938631953, 0.17418479955144717, 0.1488498223454786, 9.999999999998899e-05, 0.19735804952516123, 0.1752282297539497, 0.24637735952656659, 0.18983281457910084, 9.999999999998899e-05, 0.12262915706648814, 0.07577104113680777, 0.1446553785354081, 0.1702657715145277, 0.5188509722766246, 0.10695602602399867, 0.10212400550522849, 0.11153251404626985, 0.10216948805067783, 0.4744669220812894, 0.2587082471659665, 0.05220276828215098, 0.12716935381944894, 0.0903481383652679, 0.12086938239705292, 0.10396866182613207, 0.10183205214804025, 0.12899833113191195, 0.2149583168971968, 0.17631337496670263, 0.18896045969880038, 0.215478027008697, 0.1850589327537131, 0.19673795516785575, 0.25242597044476, 0.20581017746540442, 0.22935901102022493, 0.036845624496982365, 0.09894003329140955, 0.07430169619276061, 0.04894404065476865, 0.0835359698086039, 0.08527103441657236, 0.06518098482915213, 0.09472951624292836, 0.07535587786995035]}, "mutation_prompt": null}
{"id": "c2adacd4-2b4b-40eb-b1d8-8fa73eab5229", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "DynamicInertiaWeightPSO", "description": "Introducing a dynamic inertia weight adaptation mechanism that adjusts the inertia weight based on the fitness improvement to balance exploration and exploitation dynamically for faster convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.9160688689853619, 0.9627369441870708, 0.9789426004079395, 0.670674565592865, 0.9729027966168862, 0.34958738629833563, 0.9589372902012749, 0.7816008827970415, 0.6008929617018562, 0.2793017092182567, 0.04286587254480523, 0.2415578930904857, 0.18897633269227188, 9.999999999998899e-05, 0.41369663444211635, 9.999999999998899e-05, 0.2749089142182791, 0.274079281184637, 0.09465595041048769, 0.08066791037475962, 0.12738436688675758, 0.1023637328907685, 0.12601391026791475, 0.15025291814887753, 0.08282817807923215, 0.19357264492257098, 0.13816960891899255, 0.09302878049978935, 0.08116089004276472, 0.11331204727233868, 0.10252356063317114, 0.057827299225806206, 0.09839023089886378, 0.07827530845986219, 0.1206693504554367, 0.045399238195044433, 0.9927849872368487, 0.14218184515757404, 0.9964351801215002, 0.9917768355989791, 0.13022165321704327, 0.9844161357011966, 0.9885953031488375, 0.9941008884383941, 0.9967359679378507, 0.20761795095272417, 0.15151833916510482, 0.16147800308026583, 0.08024314085584161, 0.25360776683602326, 0.11863778252532542, 0.0878151249972654, 0.05865156993007714, 0.2078678006217145, 0.21597664276664885, 0.21978677516595668, 0.07126360366819062, 0.2848283309370818, 0.2701185863176587, 0.08258022860938963, 0.1171823922078109, 0.22682095992895257, 0.09113377219024443, 0.1388006861396891, 0.17990709774223745, 0.16681388700830646, 0.146280049686505, 0.15735241821869062, 0.0097802148924655, 0.1303735527008324, 0.13429722170606329, 0.2224907645082006, 0.1372687290223732, 0.05858198641930268, 9.999999999998899e-05, 0.16296170339359228, 0.13008615412786406, 0.10958596046466151, 0.186598032726645, 9.999999999998899e-05, 0.13312662929887742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1427416095267965, 9.999999999998899e-05, 9.999999999998899e-05, 0.01921209801996937, 9.999999999998899e-05, 0.012831314242139569, 0.02689207498628765, 0.04951487976993063, 0.04651985347627796, 9.999999999998899e-05, 0.007225259901669001, 0.0981457749167377, 0.05099694051086712, 0.012238332475397184, 0.3179475124554423, 0.03386334991864037, 0.04704235136589652, 0.17306844339715044, 0.0029966702390349376, 0.14348164312223255, 9.999999999998899e-05, 0.06792046699058207, 0.12153192291910442, 0.09870030589162704, 0.274203558515678, 0.06775404136998509, 0.03461473721611197, 0.07560240885064717, 0.22402746335007795, 0.10332524368990526, 0.04276567509702689, 0.09655243892122034, 0.539341545041764, 0.4527363319558071, 0.5349066667015143, 0.16250049621966378, 0.24706807568641387, 0.44361592420007745, 0.5211888572740238, 0.2870618340876847, 0.17388671894563446, 0.09930536317013938, 0.09124399183543663, 0.0199594973946019, 0.06735292015808059, 0.076574150081132, 0.09942001551504387, 0.06331777088368651, 0.14896448624559833, 0.0738246281675512, 0.14581709866942605, 0.19046826496189784, 0.26383090622411665, 0.26344795743877936, 0.13364136295500084, 0.35545459216363173, 0.19985017410665207, 0.27575573559946176, 0.18017974136345805, 0.14466960103604343, 0.1848404862988905, 0.16812430293882685, 0.23016604819458952, 0.1805050248348019, 0.18720726920473374, 0.24554850758706037, 0.2620731380248723, 0.2453153577732472, 0.2521901073349009, 0.0855675807440679, 0.12757386397431014, 0.19965633558278728, 0.18105212752312239, 0.17834176087986287, 0.2403559619762623, 0.11907709972960279, 0.15392654860443422, 0.23450743387267403, 0.22368382319249513, 0.20709794193094988, 0.20280108729817103, 0.15235546590782834, 0.16059387271968295, 0.3216845006295377, 0.2147018670114006, 0.21562671808279887, 0.20199212407268174, 0.20379089225614722, 0.20097719589759788, 0.19606866479435425, 0.20275167341001676, 0.25776969651481296, 0.23049671345814626, 0.1749563886122396, 0.18547304583648327, 0.1599440464210229, 0.33369254787578306, 0.16555705738650273, 0.1700566417156546, 0.2023292755387226, 0.17069560574984133, 0.14686094325410537, 0.1593062735542249, 0.15380313986662553, 0.25023217721557145, 0.11364261047903512, 0.3326427270821064, 0.2001796618025241, 0.05936541571470155, 0.17574209295537202, 0.10443774358030367, 0.10550545821857282, 0.11301941221750766, 0.18846423295768877, 0.21119600284988682, 0.18928245588399184, 0.1940454953429288, 0.1913026281435528, 0.18431880529449707, 0.19896786482487805, 0.2536988117157928, 0.19272300165508527, 0.12657190085356884, 0.07654240462859219, 0.07007987392044868, 0.0571188967932823, 0.1031902281134579, 0.06471558144278011, 0.10520556378300283, 0.0927005753498985, 0.09412070419796714]}, "mutation_prompt": null}
{"id": "6210ce7d-b7c7-4e7e-8077-6b2c2c53aa21", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSOChaoticMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def chaotic_map(self, x, alpha=2, beta=4):\n        return (alpha * x * (1 - x)) % beta\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = self.chaotic_map(np.random.random((self.dim, self.dim)))\n            r2 = self.chaotic_map(np.random.random((self.dim, self.dim)))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "DynamicInertiaWeightPSOChaoticMutation", "description": "Introducing a novel mutation operator based on chaotic maps to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 40, "fitness": 0.076107706429063, "feedback": "The algorithm DynamicInertiaWeightPSOChaoticMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.21571328156797487, 0.11196983973873831, 0.29516091516779863, 0.1378415363565738, 0.09284531208719982, 0.07738247343990967, 0.09280529156332773, 0.24565838735648282, 0.10614174482872862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09421371105725374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07237583751598309, 0.02632724794674246, 9.999999999998899e-05, 0.08363758429258339, 0.0486780991694713, 0.0907236722232534, 0.048343931286578434, 0.06152726977907674, 0.027665928819204932, 0.08769994766534095, 0.04663354466040359, 9.999999999998899e-05, 0.004300275446998403, 0.01785064217421517, 0.028852423911241543, 9.999999999998899e-05, 0.011714750262623919, 0.011132713287335672, 0.06697961348323367, 0.061600822672257305, 0.10912288619450539, 0.07507819842390617, 0.07126204372946143, 0.0664333294509113, 0.0538129587078654, 0.08183260387166413, 0.05773559910099557, 0.06324876600223883, 0.005289303253241506, 0.033702627857073675, 9.999999999998899e-05, 0.02996425283951809, 0.016393269740432648, 0.10857224973976276, 9.999999999998899e-05, 9.999999999998899e-05, 0.08244936998462271, 0.08214300919926265, 0.01825820389746935, 0.18725458279264673, 0.021087838201392928, 0.12800642003817153, 0.07799606165139994, 0.0659142034490573, 0.040901492870703215, 0.03919271625797083, 9.999999999998899e-05, 9.999999999998899e-05, 0.06922319861852355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1550556346982508, 0.12415150624379878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039458898382276675, 0.045073000772581695, 0.12745432895639985, 0.06116274730842308, 9.999999999998899e-05, 0.016535194568561007, 0.08478087193536321, 0.010801300428463056, 0.06250306103398762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09835266171540569, 0.14833055309034848, 0.21012099444769716, 0.12442696385034235, 0.20768969817512273, 0.08387229608242253, 0.15936992553580698, 0.12879130246379678, 0.1406902454289457, 0.004207493078958069, 0.005539613557914214, 9.999999999998899e-05, 9.999999999998899e-05, 0.030949723345509494, 0.029730277100112446, 0.024956898411783945, 0.03914751482404122, 0.08921552600442262, 0.11128238771062293, 0.12458277117567107, 0.12933274447554577, 0.15886084880402707, 0.13032576316807554, 0.134433615910851, 0.18213930071065987, 0.08672330796610406, 0.16167029844884784, 0.13560698034462693, 0.1573001953357125, 0.12415386448139054, 0.15296908833988598, 0.1322651302273654, 0.11824225216920514, 0.1393554567246702, 0.19287144542711987, 0.10530984534139587, 0.07452115446943552, 0.10813620086956488, 0.06743156382194138, 0.09864649214640253, 0.10395845794082748, 0.07438268373457901, 0.0686350051699226, 0.13046617986735742, 0.038438102805493646, 0.24254590666406828, 0.18197879678500573, 0.13835320401042084, 0.24065841877700778, 0.1502341986323712, 0.1860346157166759, 0.17977396501264198, 0.19899896886845914, 0.14944122251036374, 0.16808631671841523, 0.009817508035536271, 9.999999999998899e-05, 0.1689939126015424, 0.16186625209570593, 0.1887575219744202, 0.17001666961160322, 9.999999999998899e-05, 9.999999999998899e-05, 0.1555825932673104, 0.07485673921693325, 0.08857164103171922, 0.09504461336885361, 0.19487698893392646, 0.17237097724243644, 0.075872666094425, 0.11467144277047758, 0.10256525543836037, 0.050231981618987676, 0.09944697799601598, 0.32444831477990077, 0.12054929990770924, 0.17625634178355498, 0.08726769926281341, 0.03237061512043515, 0.042577118572725725, 0.11279598131877078, 0.19620437975912297, 0.24342563888341606, 0.19917761385602373, 0.18859782211026066, 0.21021238574238943, 0.21322073561623245, 0.20399337860271993, 0.18651408343833664, 0.18668062693011045, 0.0621401377220393, 0.04544573320754319, 0.05366560284498301, 0.03899699405640189, 0.10935287221120249, 0.044633326911470816, 0.10103713625468314, 0.08156556230443535, 0.0673244798252759]}, "mutation_prompt": null}
{"id": "3e5ff262-210e-4143-911e-b93a7b6ed930", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "DynamicInertiaWeightPSO", "description": "Introducing a dynamic inertia weight adaptation mechanism that adjusts the inertia weight based on the fitness improvement to balance exploration and exploitation dynamically for faster convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.9160688689853619, 0.9627369441870708, 0.9789426004079395, 0.670674565592865, 0.9729027966168862, 0.34958738629833563, 0.9589372902012749, 0.7816008827970415, 0.6008929617018562, 0.2793017092182567, 0.04286587254480523, 0.2415578930904857, 0.18897633269227188, 9.999999999998899e-05, 0.41369663444211635, 9.999999999998899e-05, 0.2749089142182791, 0.274079281184637, 0.09465595041048769, 0.08066791037475962, 0.12738436688675758, 0.1023637328907685, 0.12601391026791475, 0.15025291814887753, 0.08282817807923215, 0.19357264492257098, 0.13816960891899255, 0.09302878049978935, 0.08116089004276472, 0.11331204727233868, 0.10252356063317114, 0.057827299225806206, 0.09839023089886378, 0.07827530845986219, 0.1206693504554367, 0.045399238195044433, 0.9927849872368487, 0.14218184515757404, 0.9964351801215002, 0.9917768355989791, 0.13022165321704327, 0.9844161357011966, 0.9885953031488375, 0.9941008884383941, 0.9967359679378507, 0.20761795095272417, 0.15151833916510482, 0.16147800308026583, 0.08024314085584161, 0.25360776683602326, 0.11863778252532542, 0.0878151249972654, 0.05865156993007714, 0.2078678006217145, 0.21597664276664885, 0.21978677516595668, 0.07126360366819062, 0.2848283309370818, 0.2701185863176587, 0.08258022860938963, 0.1171823922078109, 0.22682095992895257, 0.09113377219024443, 0.1388006861396891, 0.17990709774223745, 0.16681388700830646, 0.146280049686505, 0.15735241821869062, 0.0097802148924655, 0.1303735527008324, 0.13429722170606329, 0.2224907645082006, 0.1372687290223732, 0.05858198641930268, 9.999999999998899e-05, 0.16296170339359228, 0.13008615412786406, 0.10958596046466151, 0.186598032726645, 9.999999999998899e-05, 0.13312662929887742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1427416095267965, 9.999999999998899e-05, 9.999999999998899e-05, 0.01921209801996937, 9.999999999998899e-05, 0.012831314242139569, 0.02689207498628765, 0.04951487976993063, 0.04651985347627796, 9.999999999998899e-05, 0.007225259901669001, 0.0981457749167377, 0.05099694051086712, 0.012238332475397184, 0.3179475124554423, 0.03386334991864037, 0.04704235136589652, 0.17306844339715044, 0.0029966702390349376, 0.14348164312223255, 9.999999999998899e-05, 0.06792046699058207, 0.12153192291910442, 0.09870030589162704, 0.274203558515678, 0.06775404136998509, 0.03461473721611197, 0.07560240885064717, 0.22402746335007795, 0.10332524368990526, 0.04276567509702689, 0.09655243892122034, 0.539341545041764, 0.4527363319558071, 0.5349066667015143, 0.16250049621966378, 0.24706807568641387, 0.44361592420007745, 0.5211888572740238, 0.2870618340876847, 0.17388671894563446, 0.09930536317013938, 0.09124399183543663, 0.0199594973946019, 0.06735292015808059, 0.076574150081132, 0.09942001551504387, 0.06331777088368651, 0.14896448624559833, 0.0738246281675512, 0.14581709866942605, 0.19046826496189784, 0.26383090622411665, 0.26344795743877936, 0.13364136295500084, 0.35545459216363173, 0.19985017410665207, 0.27575573559946176, 0.18017974136345805, 0.14466960103604343, 0.1848404862988905, 0.16812430293882685, 0.23016604819458952, 0.1805050248348019, 0.18720726920473374, 0.24554850758706037, 0.2620731380248723, 0.2453153577732472, 0.2521901073349009, 0.0855675807440679, 0.12757386397431014, 0.19965633558278728, 0.18105212752312239, 0.17834176087986287, 0.2403559619762623, 0.11907709972960279, 0.15392654860443422, 0.23450743387267403, 0.22368382319249513, 0.20709794193094988, 0.20280108729817103, 0.15235546590782834, 0.16059387271968295, 0.3216845006295377, 0.2147018670114006, 0.21562671808279887, 0.20199212407268174, 0.20379089225614722, 0.20097719589759788, 0.19606866479435425, 0.20275167341001676, 0.25776969651481296, 0.23049671345814626, 0.1749563886122396, 0.18547304583648327, 0.1599440464210229, 0.33369254787578306, 0.16555705738650273, 0.1700566417156546, 0.2023292755387226, 0.17069560574984133, 0.14686094325410537, 0.1593062735542249, 0.15380313986662553, 0.25023217721557145, 0.11364261047903512, 0.3326427270821064, 0.2001796618025241, 0.05936541571470155, 0.17574209295537202, 0.10443774358030367, 0.10550545821857282, 0.11301941221750766, 0.18846423295768877, 0.21119600284988682, 0.18928245588399184, 0.1940454953429288, 0.1913026281435528, 0.18431880529449707, 0.19896786482487805, 0.2536988117157928, 0.19272300165508527, 0.12657190085356884, 0.07654240462859219, 0.07007987392044868, 0.0571188967932823, 0.1031902281134579, 0.06471558144278011, 0.10520556378300283, 0.0927005753498985, 0.09412070419796714]}, "mutation_prompt": null}
{"id": "a94785f9-9f1c-4472-ad47-43e378b90533", "solution": "import numpy as np\n\nclass DynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.m_min = 0.1\n        self.m_max = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        m = self.m_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            mutation = np.random.normal(0, m, (self.dim, self.dim))\n            swarm += mutation\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            m = self.m_min + (_ / self.budget) * (self.m_max - self.m_min)\n\n        return gbest_fitness", "name": "DynamicMutationPSO", "description": "Implementing a dynamic mutation mechanism that adapts the mutation rate based on the fitness improvement to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 42, "fitness": 0.05719101341808021, "feedback": "The algorithm DynamicMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.12982886986094977, 0.09363587658172523, 0.1250504401427288, 0.058329989145515015, 0.08209639277036129, 0.08655514220736327, 0.059928772796666085, 0.11940489459041359, 0.10666541213151193, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014223370376081568, 0.011579485030025483, 9.999999999998899e-05, 0.07404859092149585, 0.03362906371440755, 0.02377747977304079, 0.03472104026589751, 0.02205994911508824, 0.021460376560886285, 0.007999855305463432, 0.01672905957329529, 9.999999999998899e-05, 9.999999999998899e-05, 0.017036564418851596, 9.999999999998899e-05, 9.999999999998899e-05, 0.014988591598743772, 9.999999999998899e-05, 0.0765460002631666, 0.04393822744322373, 0.052222600740487124, 0.0597012502693719, 0.0558450922779391, 0.07648068738657854, 0.05632669334870444, 0.05350293347463686, 0.07596447747379897, 0.06882946305267412, 9.999999999998899e-05, 0.02750630568733836, 0.01934529736625923, 0.019876465800264143, 0.08290521679545404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1022083222973239, 0.026575601334799304, 0.019551921225541613, 0.08144155180222601, 0.0383547159537595, 9.999999999998899e-05, 0.06803749632325362, 0.03130956163472676, 0.025225507419358473, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048723634053900566, 0.0945678137911391, 0.058079045990129474, 0.016777075805004094, 9.999999999998899e-05, 0.10010131737159611, 0.024088244689100757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1254601709543235, 0.13192275675476173, 0.157340756698801, 0.10315633094652987, 0.11061897608236049, 0.10828291487982822, 0.1346936018310143, 0.12421323614233992, 0.11428681122064532, 0.014044275005600348, 0.0018449608420665342, 9.999999999998899e-05, 0.010053807379375779, 0.02927232762441112, 0.03905291878465322, 0.016420020611361497, 0.05427086391981428, 0.04727666343415515, 0.12743042906445512, 0.14892714067734725, 0.18876234521583557, 0.15554055166558012, 0.12532699792543323, 0.1151064309914207, 0.17736618544791094, 0.13992844328871323, 0.13105163179202806, 0.14840407250830379, 0.14129055174807204, 0.1246869174001578, 0.15391561175167312, 0.12559194248665084, 0.12884078349666983, 0.1348810883579037, 0.13264802611294013, 0.10477622180597534, 0.09174467586781343, 0.07648645165411783, 0.06581604337067604, 0.10332424049591205, 0.07155431495425435, 0.07967528678512259, 0.07688499646279523, 0.08247007692072328, 0.03857948767030428, 0.1402744098026667, 0.11676800705895785, 0.1689694181589213, 0.144421833452277, 0.10796778902965454, 0.1419736584823641, 0.16458841263417712, 0.09785804224512817, 0.143591479553695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04889143690026698, 0.02355577189075797, 0.041616566636911934, 9.999999999998899e-05, 0.0842861813859106, 9.999999999998899e-05, 0.09968281750144692, 0.10888338486809768, 0.14939113385842284, 0.10909537007095638, 0.1264055489561321, 0.11809543646598486, 0.15288351089280494, 0.07390920580253568, 0.11471693876988354, 0.0708727830449547, 0.07304910473218607, 0.022224053760497187, 0.1191043305323457, 0.12889649252462876, 0.10794381591700963, 0.05437440085715406, 0.027907356515938453, 0.0676902875519465, 0.18650400995661254, 0.1862624388609213, 0.17617226906092476, 0.1747612215406985, 0.1891274501119059, 0.1762234957424642, 0.1771360572283044, 0.1813728046470231, 0.19805834088653773, 0.04105031549586524, 0.04098066201078343, 0.048674140116846454, 0.03193353418137068, 0.04079844488677897, 0.02597110211254461, 0.05053635952577984, 0.034924718531943344, 0.06447847657030559]}, "mutation_prompt": null}
{"id": "261d3845-3196-455d-88d9-cebb48170b50", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.F = 0.5\n        self.CR = 0.7\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            for i in range(self.dim):\n                trial_vector = swarm[i]\n                idxs = np.random.choice(self.dim, 3, replace=False)\n                diff_vector = swarm[idxs[0]] + self.F * (swarm[idxs[1]] - swarm[idxs[2]])\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector[crossover_mask] = diff_vector[crossover_mask]\n\n                trial_fitness = func(trial_vector)\n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial_vector\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial_vector\n                        gbest_fitness = trial_fitness\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "HybridPSODE", "description": "Implementing a hybrid approach by combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the strengths of both algorithms for faster convergence.", "configspace": "", "generation": 43, "fitness": 0.07568595479800261, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.20.", "error": "", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.07833197996941821, 0.06432772651221763, 0.14468167514440178, 0.01961528023013981, 0.07511169712767674, 0.0642696495324735, 0.05352828529699616, 0.0964635248797493, 0.10960903672858546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03639687899656763, 9.999999999998899e-05, 9.999999999998899e-05, 0.03157343937499024, 0.011756518702365826, 0.0178486117827662, 0.018248263482334326, 0.0013171798880857732, 0.002689684430452921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9964521736141255, 0.9964988637406076, 0.9961555588797694, 0.9868481716421043, 0.9939413782283937, 0.994470327782494, 0.9902260883003741, 0.9972424715723258, 0.9935493784808347, 9.999999999998899e-05, 9.999999999998899e-05, 0.03866657433846554, 9.999999999998899e-05, 0.0245816682161889, 9.999999999998899e-05, 0.007444071671020125, 9.999999999998899e-05, 0.02671018770389688, 0.032420390398068766, 0.04790848687798954, 0.009250527795822694, 0.029670204575835468, 0.013655040410680552, 9.999999999998899e-05, 0.026279303607937843, 0.03953130941291039, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023917242785905013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.114627871488591, 0.11591444376053839, 0.14838054695461433, 0.11167949962987533, 0.08051072568095674, 0.09497245546391464, 0.09461470627041313, 0.09635372337107928, 0.1365563547919303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028228799270165306, 9.999999999998899e-05, 9.999999999998899e-05, 0.027892816248493935, 0.02780490802937252, 0.0570176786646851, 0.06735693451091307, 0.05468846648487902, 0.09855305120349966, 0.06764130593272288, 0.05643121168494414, 0.035425536348623776, 0.09604469247196934, 0.07726393575557644, 0.09125260076425479, 0.14309756701105691, 0.10902510523478903, 0.12824105796252694, 0.11082379599721626, 0.07514112624198765, 0.11420206329748472, 0.15238657845232606, 0.07132591053364068, 0.057296964419623175, 0.05555649335852764, 0.04578029883511048, 0.052100006071950866, 0.07933843606303037, 0.05961993161030221, 0.05648699256316181, 0.038530072755655564, 0.030123913735553676, 0.10265962809609996, 0.08799693288384947, 0.11233969640538566, 0.10183838860328509, 0.06747178230817008, 0.07506911643765213, 0.13733235956473366, 0.08453274924425636, 0.09438594438435155, 0.12339203015327405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0502997054270059, 0.06321449121775713, 0.05098059712318026, 0.06718871428537254, 0.1207914665021157, 0.047964921046337206, 0.03391929261879634, 0.056615725614002965, 0.053674301379695866, 0.03600096115587692, 0.043512676479764534, 0.024614084007101744, 0.018606112313171663, 0.022468069640392052, 0.06468498771358044, 0.016528077255320017, 0.029309713103968682, 0.024925054028385185, 0.10096019244302157, 0.1778936790371738, 0.14763022729669195, 0.13456521746112848, 0.11180828635524354, 0.12465113207635137, 0.10626661990521513, 0.13729882898838874, 0.12459478841421956, 0.00201573675373079, 0.006065243701756429, 0.027931217471952596, 0.008895176347962663, 0.017035517058419325, 9.999999999998899e-05, 0.024046613638725622, 9.999999999998899e-05, 0.015304283358109516]}, "mutation_prompt": null}
{"id": "76a3af4d-b353-4d9e-857c-dbde229afef6", "solution": "class OppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "OppositionBasedDynamicInertiaWeightPSO", "description": "Implement a novel Opposition-based Learning mechanism to enhance exploration and exploitation by using the opposite solutions to improve convergence speed.", "configspace": "", "generation": 44, "fitness": 0.29563786435586636, "feedback": "The algorithm OppositionBasedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "c3db9e21-45b4-4dee-aeb1-9f97c988d054", "metadata": {"aucs": [0.9219318336784339, 0.9301872784665327, 0.945899625260118, 0.919355387581418, 0.9022029145093388, 0.9396032830802344, 0.8983635821826713, 0.9233345008741028, 0.9165670095697085, 0.853041726050744, 0.8262811716193512, 0.8351138932514153, 0.8662806300499879, 0.8527790096390636, 0.8412834599189892, 0.8511101847400386, 0.8719655610747794, 0.8684956930248416, 0.14447352915738176, 0.16094006109845216, 0.1365423621902564, 0.14300002706367232, 0.15616809880257465, 0.10682910921451616, 0.09221624674334894, 0.1318403857730902, 0.18417029909839677, 0.0932253474214555, 0.14294917253507333, 0.13234165628812566, 0.09208910929195413, 0.11662276466533661, 0.08028743722130405, 0.14096271832515594, 0.11029280885271042, 0.1241464171000809, 0.9918583319924615, 0.9941175262072607, 0.9947321398544592, 0.9914535773186, 0.9943119268206425, 0.9958524745788713, 0.9948185994494442, 0.9968108495881091, 0.9964522314393454, 0.7282496117908677, 0.7675803346097139, 0.8056545499359047, 0.6615517490687061, 0.8091899331084997, 0.6970404350558941, 0.7222152108642534, 0.7643640497990882, 0.7788478934813949, 0.22138464610778918, 0.21941578402280426, 0.15805036046049625, 0.2133451837901127, 0.19287260973835552, 0.1575968180923899, 0.24123052785514365, 0.16881693195508618, 0.20796773277258584, 0.17508745062013498, 0.13358372059317136, 0.21787205322180514, 0.16792714274297738, 0.17555841699398966, 0.2507764884247542, 0.1974882608237567, 0.1985844870778487, 0.13470951980736046, 0.21221760877206297, 0.23487726526381614, 0.22332244988392946, 0.3719687361681505, 0.1914781365570699, 0.22823376656214422, 0.25359534782261994, 0.2350481643578789, 0.22374697835968982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007719129999687047, 9.999999999998899e-05, 0.001475778818666229, 0.0030321657620672182, 9.999999999998899e-05, 9.999999999998899e-05, 0.001365919206311128, 0.08553927714014786, 0.11976169014838978, 0.08212298395831807, 0.0055860135993703874, 0.023597278660772325, 0.1323548518129677, 0.02985245130098957, 0.011999853139758265, 0.03886202154646723, 0.030184278467454195, 0.05163673149850112, 0.10230068427056882, 0.0151785511386755, 0.17336809837748846, 0.08944540044308835, 0.1676999162270153, 0.038376862997995365, 0.024811860437266686, 0.11846044947897749, 0.1797008870786585, 0.15845043753955068, 0.133509000683657, 0.07053753547248143, 0.010953460911625745, 0.015148627470344067, 0.082963636434074, 0.5417359339320138, 0.5311235863273496, 0.5196105246960382, 0.6389567823577139, 0.5714611792788928, 0.5516176631728772, 0.5744734721445424, 0.5305038717187651, 0.5681770106598192, 0.1227316137969523, 0.05677050174348208, 0.10478157698887702, 0.12495195333829257, 0.07635797351473395, 0.09675263458487515, 0.07929127594482799, 0.08872899790248323, 0.09962450173004722, 0.19919214591660972, 0.22454749430156984, 0.23645169751915995, 0.18225903172161384, 0.20566884090058868, 0.18328627098640304, 0.2112314803852693, 0.24525826979582932, 0.169522657664822, 0.17034820532893713, 0.23358318049558513, 0.19131321207386365, 0.19568977026870837, 0.2440837137889572, 0.16517810523711995, 0.3124052625838878, 0.39646911150843656, 0.13823836707789794, 0.2316535078813995, 0.15173580240820306, 0.12514155259608128, 0.2739339528706899, 0.17468849527510488, 0.23969229388931657, 0.19124333479920685, 0.18487748609618448, 0.15386520043645957, 0.3193956489061889, 0.17340770749426504, 0.21590506971429202, 0.18899572709932966, 0.22042897672459205, 0.17157477825015177, 0.2323816341405458, 0.25009419749693484, 0.183191604296151, 0.8579308690202154, 0.19179168576977246, 0.19951618956450135, 0.2089740825371077, 0.1774863923864235, 0.18579972803363276, 0.19335072106465123, 0.2519975925681279, 0.22440403547183074, 0.15896185030733845, 0.11413447547819999, 0.17051403840736568, 0.17273022043612762, 0.20149280085127086, 0.17026556658510894, 0.10787332826113338, 0.11524425570625696, 0.10399946086092626, 0.6283621498137688, 0.11344474591461517, 0.1557951281205069, 0.8114938326046051, 0.21068024915396277, 0.21316292386936098, 0.10425560899626818, 0.10513012481404727, 0.11244465116929392, 0.18494110112800188, 0.17142354742835253, 0.19237108829777627, 0.22286318619564238, 0.2096588943885459, 0.19197741209288544, 0.16831665536183393, 0.2039567276518155, 0.1930760101852529, 0.06706687765186703, 0.061348357924582486, 0.09698883133742786, 0.09763765793760171, 0.118085492017039, 0.11360378744430744, 0.1066861646263324, 0.09345725236005487, 0.09409718106074794]}, "mutation_prompt": null}
{"id": "e03e2685-798b-4125-a2a8-2be400f5e6f9", "solution": "import numpy as np\n\nclass AdaptiveInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        prev_best_fitness = gbest_fitness\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            if gbest_fitness < prev_best_fitness:\n                w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n                prev_best_fitness = gbest_fitness\n\n        return gbest_fitness", "name": "AdaptiveInertiaWeightPSO", "description": "Introducing adaptive inertia weight based on fitness improvement to dynamically adjust the exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 45, "fitness": 0.18828004586190372, "feedback": "The algorithm AdaptiveInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "76a3af4d-b353-4d9e-857c-dbde229afef6", "metadata": {"aucs": [0.9749418675129422, 0.8975221856525843, 0.6673488619686604, 0.9705190389374676, 0.4842727410896478, 0.34227548707797173, 0.9599921470145504, 0.9710861879881708, 0.8592974492287044, 0.31232460511877225, 0.03985837262963743, 0.12986619339661665, 0.6712533669441987, 9.999999999998899e-05, 0.12609437034356819, 9.999999999998899e-05, 0.26617143909221364, 0.221876577593615, 0.09466309556412456, 0.05702153551137035, 0.12745176825487925, 0.10168103945005347, 0.07493114050914118, 0.12020948591849645, 0.12704783710437662, 0.10702040220906461, 0.13757152383758253, 0.0651772587663687, 0.10284153424705478, 0.11332577168239988, 0.15962440462508076, 0.05780790849921491, 0.10269817333361864, 0.09804064697425818, 9.999999999998899e-05, 0.045345623114376066, 0.9927849765227293, 0.14216987204617693, 0.9964351801215002, 0.13676302169219867, 0.13022111911670708, 0.9844161481618324, 0.9885953031488375, 0.9941008929039717, 0.9967359679378507, 0.20048197814354574, 0.13153111624035152, 0.1197185803262586, 0.0262448249146211, 0.21928531565583465, 0.02532230542274161, 0.13426866485367228, 0.060321787942460126, 0.20663073206533633, 0.1864108722941722, 0.09708615259186337, 0.08977249279781263, 0.28555776580538905, 0.36515300511921933, 0.08258022949064381, 0.1784252654305375, 0.22682095992895257, 0.00990846602666351, 0.19801874473336456, 0.18062821056858924, 0.1630670761582662, 0.1536244380845856, 0.15503889670365223, 0.15363502164770126, 0.12906336373265115, 0.2245936851588154, 0.2285846224000716, 0.16198790036100275, 0.08076380382413118, 0.0011072319639171546, 0.1538346095939802, 0.13646950927645995, 0.14218267335525347, 0.16302292262494045, 9.999999999998899e-05, 0.14450757095634814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02270431872672629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019965344442531063, 0.024619651171842616, 0.047047510187369856, 9.999999999998899e-05, 9.999999999998899e-05, 0.011498080627629692, 0.09862822125999449, 9.999999999998899e-05, 0.005110135410212435, 0.1584417538134858, 0.033979813325865194, 0.04723672004367707, 0.05409041946711368, 0.0006970625199517189, 0.14357115384642216, 9.999999999998899e-05, 0.06682552887852322, 0.05012520600505144, 0.18588668055461388, 0.33531036494229804, 0.09977179001084535, 9.999999999998899e-05, 0.07541940505021139, 0.003831596502978707, 0.10223247802555724, 0.04283709607955011, 0.09677878657210714, 0.48431963541951617, 0.3294461900952784, 0.14838054695461433, 0.20543609326346124, 0.32015804838974093, 0.19496009303414485, 0.3145418479276525, 0.2869238882148851, 0.17387985468704514, 0.09889146587521813, 0.0916921787440993, 0.07273271965824968, 0.04045458876033259, 0.07674066569008176, 0.09736630850821826, 0.052556627395685784, 0.146776323242103, 0.07953389041425019, 0.2831668916398493, 0.22403048397406622, 0.19451580116947698, 0.09855305120349966, 0.06581597144687368, 0.16108596552287613, 0.33375575820480197, 0.17532507620842352, 0.1706067275619535, 0.14498189630357938, 0.2993051290417781, 0.1745540565962872, 0.22827604399017398, 0.18897011311309497, 0.20623565098329832, 0.17759470643234854, 0.1848488180109602, 0.22442363385390085, 0.17389434603709175, 0.13644117259578903, 0.17619528517188188, 0.10614277208901457, 0.18023911190541952, 0.13685174795359822, 0.18111197587391648, 0.17854679614528324, 0.1328337348957448, 0.17922055116692392, 0.14967736066319326, 0.22258384819163635, 0.2043794704927976, 0.24122333541170993, 0.1489164984725163, 0.19881718673352677, 0.19177278543497855, 0.22585777028307497, 0.19746085788964252, 0.1855455785365131, 0.20099251799646634, 0.17444261292782504, 0.20274265980785788, 0.21460324307683332, 0.22988646139311775, 0.18070598046441577, 0.18547511903323233, 0.15994176020378326, 0.13668139003034485, 0.05098059712318026, 0.169114646288004, 0.20199494959574926, 0.17069663871247798, 0.10894098252971851, 0.13720406899012472, 0.15404293455011353, 0.26479288981545535, 0.13258631472561644, 0.17004511732633965, 0.20003210381682712, 0.021600351495484005, 0.2146425501289041, 0.10441502126245172, 0.10550552686827719, 0.023068498411701333, 0.18723686855050137, 0.12017502569002791, 0.20289467181547405, 0.1939099341565499, 0.19468860412347744, 0.18554640148013246, 0.1962845901005421, 0.23253675070447843, 0.18788569217849205, 0.11781956757467282, 0.12184654315724697, 0.06052391434662008, 0.05958081643076951, 0.12460012554932398, 0.09548732252984815, 0.09827902205248507, 0.08328762054510075, 0.09888013463413192]}, "mutation_prompt": null}
{"id": "6bb5e2f7-02de-4374-b59d-84d9b91b358e", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Mutation\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Implement a mutation strategy that adds diversity to the search by randomly mutating a subset of the population towards unexplored regions.", "configspace": "", "generation": 46, "fitness": 0.30623905784465016, "feedback": "The algorithm EnhancedOppositionBasedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "76a3af4d-b353-4d9e-857c-dbde229afef6", "metadata": {"aucs": [0.911370891493049, 0.9145038355071716, 0.9551562689994665, 0.8807180205346661, 0.9215157248702954, 0.9007592368106933, 0.9035477604542139, 0.9212145362903454, 0.9532788725369218, 0.8379704520307791, 0.8609812864521963, 0.85848592594733, 0.8821781231532189, 0.8563084209142822, 0.8612496324072834, 0.8787842257837483, 0.8718718664478596, 0.8658026172849925, 0.16247951168522545, 0.1463628917052685, 0.10249155114939856, 0.09418598524479005, 0.1529058286518239, 0.14579374391257938, 0.16107952925288682, 0.10849450550868145, 0.1618856577588098, 0.11713950464465672, 0.09360031524853618, 0.12409638352010277, 0.1153791160561708, 0.028561147827080302, 0.16119536510238008, 0.0858636278669399, 0.12940414631175068, 0.13349497795304888, 0.9938764073138971, 0.9953457261575498, 0.9921184450511431, 0.9967899205326791, 0.9926987685143911, 0.9870853173742312, 0.9953377895291691, 0.9973480459953528, 0.9884373881501077, 0.8274803991786825, 0.7341166913745887, 0.7953040755387919, 0.7107045579831146, 0.6642209805307506, 0.7214251579342774, 0.7637156967559677, 0.70357490993665, 0.768076246502214, 0.2079446132468753, 0.18981456587165135, 0.1682601795214641, 0.21371381185083715, 0.274217177429538, 0.197619809501405, 0.23091913235711625, 0.21805642343098075, 0.14704523676928816, 0.24717403779105596, 0.21132230496476068, 0.32521487722268594, 0.2009127940220462, 0.18058780001945707, 0.2754209890098669, 0.3733263592812551, 0.08293374442195478, 0.20923180477385717, 0.24140858035353185, 0.21793281800402864, 0.21208073184002518, 0.271175800459608, 0.19937670837599986, 0.16730984002206117, 0.25512482207871834, 0.12698901139247465, 0.1337818920919952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010840392514883335, 9.999999999998899e-05, 9.999999999998899e-05, 0.018433901334441893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06490832771864441, 0.0013966467361260504, 0.08246179217785155, 9.999999999998899e-05, 0.03888078868652989, 0.10419727007905988, 0.03881788286472676, 0.04114118291247082, 0.2267612723490553, 0.02135422442788948, 0.0471204521619788, 0.014963330092284788, 0.03138819656071812, 0.21147353672419877, 0.0686931278300753, 0.03046433739612875, 0.039101421553974225, 0.024041750938682327, 0.2315653317348041, 0.03942703594591457, 0.33247470296143633, 0.10386524799959373, 0.22539726760205636, 0.22534178829612528, 0.14528937218584392, 0.12884744373246593, 0.5562742369854268, 0.5404577861855937, 0.5416538529824715, 0.5217954737568058, 0.5710545245468674, 0.5362486079896712, 0.6103420434831309, 0.5748107839588654, 0.5771280971116217, 0.114806298088035, 0.08695276657383877, 0.043557303713636975, 0.08399954709820301, 0.07054135401996586, 0.06089722097767625, 0.07298700760248522, 0.14252418646514253, 0.09041728629213797, 0.1880426182105681, 0.19427088678344795, 0.24621518008144772, 0.19478526625484627, 0.3159440395596299, 0.18913132746661176, 0.19426692079011676, 0.18301697323931643, 0.19011251672794216, 0.4207310795972018, 0.4081732185753162, 0.18612863854519557, 0.2608733052812522, 0.20830393260914615, 0.23158762034111513, 0.19237979947556005, 0.20380524975868808, 0.11497309725582905, 0.20699932056084258, 0.17486157187748308, 0.18647345885157507, 0.15932961126579814, 0.13287228721928745, 0.1553312224659592, 0.17853382677459684, 0.1678524343105573, 0.18346843497424192, 0.18125857065416218, 0.2249951535477256, 0.20436391399482257, 0.22283910131941487, 0.222940172022293, 0.18553371434310484, 0.20143584281866211, 0.20940409717682806, 0.16180163488947275, 0.20990105972117667, 0.18210703799968075, 0.19438916665036465, 0.19203793552182358, 0.19822596458735797, 0.2284581914570467, 0.19264288251610617, 0.19289645356163654, 0.20378169042233707, 0.15945414502095157, 0.9173738853096814, 0.17136639750309846, 0.9026908311909125, 0.20062586213447164, 0.918979324094128, 0.14355441270693625, 0.1151412165337069, 0.15411925755241795, 0.15688756749617438, 0.11251638573619782, 0.4622325423443089, 0.5572392671685158, 0.08296241836826279, 0.2133074307043743, 0.11187469537326666, 0.7204358171382654, 0.16568633459410664, 0.18064745331087073, 0.18716137719873704, 0.19048763692023252, 0.20978070739420385, 0.17528970098508112, 0.19884048244811925, 0.21513277099564876, 0.19709742620554693, 0.18067612923929122, 0.08335161276140501, 0.10812620071898837, 0.07589267184365722, 0.09682413404766155, 0.12190387351492304, 0.07531151886165643, 0.13605955859833707, 0.07420877284458405, 0.08425997240184135]}, "mutation_prompt": null}
{"id": "3d8645f1-de24-487c-ad4b-56659cfa3c3b", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Mutation\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Implement a mutation strategy that adds diversity to the search by randomly mutating a subset of the population towards unexplored regions.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6bb5e2f7-02de-4374-b59d-84d9b91b358e", "metadata": {"aucs": [0.911370891493049, 0.9145038355071716, 0.9551562689994665, 0.8807180205346661, 0.9215157248702954, 0.9007592368106933, 0.9035477604542139, 0.9212145362903454, 0.9532788725369218, 0.8379704520307791, 0.8609812864521963, 0.85848592594733, 0.8821781231532189, 0.8563084209142822, 0.8612496324072834, 0.8787842257837483, 0.8718718664478596, 0.8658026172849925, 0.16247951168522545, 0.1463628917052685, 0.10249155114939856, 0.09418598524479005, 0.1529058286518239, 0.14579374391257938, 0.16107952925288682, 0.10849450550868145, 0.1618856577588098, 0.11713950464465672, 0.09360031524853618, 0.12409638352010277, 0.1153791160561708, 0.028561147827080302, 0.16119536510238008, 0.0858636278669399, 0.12940414631175068, 0.13349497795304888, 0.9938764073138971, 0.9953457261575498, 0.9921184450511431, 0.9967899205326791, 0.9926987685143911, 0.9870853173742312, 0.9953377895291691, 0.9973480459953528, 0.9884373881501077, 0.8274803991786825, 0.7341166913745887, 0.7953040755387919, 0.7107045579831146, 0.6642209805307506, 0.7214251579342774, 0.7637156967559677, 0.70357490993665, 0.768076246502214, 0.2079446132468753, 0.18981456587165135, 0.1682601795214641, 0.21371381185083715, 0.274217177429538, 0.197619809501405, 0.23091913235711625, 0.21805642343098075, 0.14704523676928816, 0.24717403779105596, 0.21132230496476068, 0.32521487722268594, 0.2009127940220462, 0.18058780001945707, 0.2754209890098669, 0.3733263592812551, 0.08293374442195478, 0.20923180477385717, 0.24140858035353185, 0.21793281800402864, 0.21208073184002518, 0.271175800459608, 0.19937670837599986, 0.16730984002206117, 0.25512482207871834, 0.12698901139247465, 0.1337818920919952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010840392514883335, 9.999999999998899e-05, 9.999999999998899e-05, 0.018433901334441893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06490832771864441, 0.0013966467361260504, 0.08246179217785155, 9.999999999998899e-05, 0.03888078868652989, 0.10419727007905988, 0.03881788286472676, 0.04114118291247082, 0.2267612723490553, 0.02135422442788948, 0.0471204521619788, 0.014963330092284788, 0.03138819656071812, 0.21147353672419877, 0.0686931278300753, 0.03046433739612875, 0.039101421553974225, 0.024041750938682327, 0.2315653317348041, 0.03942703594591457, 0.33247470296143633, 0.10386524799959373, 0.22539726760205636, 0.22534178829612528, 0.14528937218584392, 0.12884744373246593, 0.5562742369854268, 0.5404577861855937, 0.5416538529824715, 0.5217954737568058, 0.5710545245468674, 0.5362486079896712, 0.6103420434831309, 0.5748107839588654, 0.5771280971116217, 0.114806298088035, 0.08695276657383877, 0.043557303713636975, 0.08399954709820301, 0.07054135401996586, 0.06089722097767625, 0.07298700760248522, 0.14252418646514253, 0.09041728629213797, 0.1880426182105681, 0.19427088678344795, 0.24621518008144772, 0.19478526625484627, 0.3159440395596299, 0.18913132746661176, 0.19426692079011676, 0.18301697323931643, 0.19011251672794216, 0.4207310795972018, 0.4081732185753162, 0.18612863854519557, 0.2608733052812522, 0.20830393260914615, 0.23158762034111513, 0.19237979947556005, 0.20380524975868808, 0.11497309725582905, 0.20699932056084258, 0.17486157187748308, 0.18647345885157507, 0.15932961126579814, 0.13287228721928745, 0.1553312224659592, 0.17853382677459684, 0.1678524343105573, 0.18346843497424192, 0.18125857065416218, 0.2249951535477256, 0.20436391399482257, 0.22283910131941487, 0.222940172022293, 0.18553371434310484, 0.20143584281866211, 0.20940409717682806, 0.16180163488947275, 0.20990105972117667, 0.18210703799968075, 0.19438916665036465, 0.19203793552182358, 0.19822596458735797, 0.2284581914570467, 0.19264288251610617, 0.19289645356163654, 0.20378169042233707, 0.15945414502095157, 0.9173738853096814, 0.17136639750309846, 0.9026908311909125, 0.20062586213447164, 0.918979324094128, 0.14355441270693625, 0.1151412165337069, 0.15411925755241795, 0.15688756749617438, 0.11251638573619782, 0.4622325423443089, 0.5572392671685158, 0.08296241836826279, 0.2133074307043743, 0.11187469537326666, 0.7204358171382654, 0.16568633459410664, 0.18064745331087073, 0.18716137719873704, 0.19048763692023252, 0.20978070739420385, 0.17528970098508112, 0.19884048244811925, 0.21513277099564876, 0.19709742620554693, 0.18067612923929122, 0.08335161276140501, 0.10812620071898837, 0.07589267184365722, 0.09682413404766155, 0.12190387351492304, 0.07531151886165643, 0.13605955859833707, 0.07420877284458405, 0.08425997240184135]}, "mutation_prompt": null}
{"id": "10a8b8dd-c1fd-4eae-ad2e-f72b4192536a", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for _ in range(self.budget):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Mutation\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Implement a mutation strategy that adds diversity to the search by randomly mutating a subset of the population towards unexplored regions.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6bb5e2f7-02de-4374-b59d-84d9b91b358e", "metadata": {"aucs": [0.911370891493049, 0.9145038355071716, 0.9551562689994665, 0.8807180205346661, 0.9215157248702954, 0.9007592368106933, 0.9035477604542139, 0.9212145362903454, 0.9532788725369218, 0.8379704520307791, 0.8609812864521963, 0.85848592594733, 0.8821781231532189, 0.8563084209142822, 0.8612496324072834, 0.8787842257837483, 0.8718718664478596, 0.8658026172849925, 0.16247951168522545, 0.1463628917052685, 0.10249155114939856, 0.09418598524479005, 0.1529058286518239, 0.14579374391257938, 0.16107952925288682, 0.10849450550868145, 0.1618856577588098, 0.11713950464465672, 0.09360031524853618, 0.12409638352010277, 0.1153791160561708, 0.028561147827080302, 0.16119536510238008, 0.0858636278669399, 0.12940414631175068, 0.13349497795304888, 0.9938764073138971, 0.9953457261575498, 0.9921184450511431, 0.9967899205326791, 0.9926987685143911, 0.9870853173742312, 0.9953377895291691, 0.9973480459953528, 0.9884373881501077, 0.8274803991786825, 0.7341166913745887, 0.7953040755387919, 0.7107045579831146, 0.6642209805307506, 0.7214251579342774, 0.7637156967559677, 0.70357490993665, 0.768076246502214, 0.2079446132468753, 0.18981456587165135, 0.1682601795214641, 0.21371381185083715, 0.274217177429538, 0.197619809501405, 0.23091913235711625, 0.21805642343098075, 0.14704523676928816, 0.24717403779105596, 0.21132230496476068, 0.32521487722268594, 0.2009127940220462, 0.18058780001945707, 0.2754209890098669, 0.3733263592812551, 0.08293374442195478, 0.20923180477385717, 0.24140858035353185, 0.21793281800402864, 0.21208073184002518, 0.271175800459608, 0.19937670837599986, 0.16730984002206117, 0.25512482207871834, 0.12698901139247465, 0.1337818920919952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010840392514883335, 9.999999999998899e-05, 9.999999999998899e-05, 0.018433901334441893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06490832771864441, 0.0013966467361260504, 0.08246179217785155, 9.999999999998899e-05, 0.03888078868652989, 0.10419727007905988, 0.03881788286472676, 0.04114118291247082, 0.2267612723490553, 0.02135422442788948, 0.0471204521619788, 0.014963330092284788, 0.03138819656071812, 0.21147353672419877, 0.0686931278300753, 0.03046433739612875, 0.039101421553974225, 0.024041750938682327, 0.2315653317348041, 0.03942703594591457, 0.33247470296143633, 0.10386524799959373, 0.22539726760205636, 0.22534178829612528, 0.14528937218584392, 0.12884744373246593, 0.5562742369854268, 0.5404577861855937, 0.5416538529824715, 0.5217954737568058, 0.5710545245468674, 0.5362486079896712, 0.6103420434831309, 0.5748107839588654, 0.5771280971116217, 0.114806298088035, 0.08695276657383877, 0.043557303713636975, 0.08399954709820301, 0.07054135401996586, 0.06089722097767625, 0.07298700760248522, 0.14252418646514253, 0.09041728629213797, 0.1880426182105681, 0.19427088678344795, 0.24621518008144772, 0.19478526625484627, 0.3159440395596299, 0.18913132746661176, 0.19426692079011676, 0.18301697323931643, 0.19011251672794216, 0.4207310795972018, 0.4081732185753162, 0.18612863854519557, 0.2608733052812522, 0.20830393260914615, 0.23158762034111513, 0.19237979947556005, 0.20380524975868808, 0.11497309725582905, 0.20699932056084258, 0.17486157187748308, 0.18647345885157507, 0.15932961126579814, 0.13287228721928745, 0.1553312224659592, 0.17853382677459684, 0.1678524343105573, 0.18346843497424192, 0.18125857065416218, 0.2249951535477256, 0.20436391399482257, 0.22283910131941487, 0.222940172022293, 0.18553371434310484, 0.20143584281866211, 0.20940409717682806, 0.16180163488947275, 0.20990105972117667, 0.18210703799968075, 0.19438916665036465, 0.19203793552182358, 0.19822596458735797, 0.2284581914570467, 0.19264288251610617, 0.19289645356163654, 0.20378169042233707, 0.15945414502095157, 0.9173738853096814, 0.17136639750309846, 0.9026908311909125, 0.20062586213447164, 0.918979324094128, 0.14355441270693625, 0.1151412165337069, 0.15411925755241795, 0.15688756749617438, 0.11251638573619782, 0.4622325423443089, 0.5572392671685158, 0.08296241836826279, 0.2133074307043743, 0.11187469537326666, 0.7204358171382654, 0.16568633459410664, 0.18064745331087073, 0.18716137719873704, 0.19048763692023252, 0.20978070739420385, 0.17528970098508112, 0.19884048244811925, 0.21513277099564876, 0.19709742620554693, 0.18067612923929122, 0.08335161276140501, 0.10812620071898837, 0.07589267184365722, 0.09682413404766155, 0.12190387351492304, 0.07531151886165643, 0.13605955859833707, 0.07420877284458405, 0.08425997240184135]}, "mutation_prompt": null}
{"id": "9a579b7e-c978-4b2e-954b-410691549227", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress to accelerate convergence.", "configspace": "", "generation": 49, "fitness": 0.30946699655782156, "feedback": "The algorithm EnhancedOppositionBasedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "6bb5e2f7-02de-4374-b59d-84d9b91b358e", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "2d0e51d1-a457-4d5b-9f61-753da4e64d40", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n        self.inertia_weight_base = 0.9\n        self.inertia_weight_min = 0.4\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        inertia_weight = self.inertia_weight_base\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = inertia_weight * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            inertia_weight = self.inertia_weight_min + ((self.budget - t) / self.budget) * (self.inertia_weight_base - self.inertia_weight_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Implement adaptive inertia weight adjustment to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 50, "fitness": 0.08736579850828682, "feedback": "The algorithm EnhancedOppositionBasedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.20.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.13635660085393098, 0.14594937325462487, 0.18011503547079688, 0.02988059182599323, 0.14621780012449204, 0.17121862394950726, 0.07255425140067073, 0.08003535677804152, 0.22317626729234397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06115385864822842, 9.999999999998899e-05, 0.01713752821982739, 0.014734462039202478, 0.006479075211513918, 0.032581790473096395, 0.022708597067383707, 0.01778537346736664, 0.036594415313808915, 9.999999999998899e-05, 9.999999999998899e-05, 0.012520498819598158, 0.023559129174726356, 9.999999999998899e-05, 0.022090080289864145, 0.018493907037743895, 9.999999999998899e-05, 0.0511858154370366, 0.9924579347194914, 0.9964484195176245, 0.9941112314479881, 0.9974064956215055, 0.9946313996901087, 0.9945128954066104, 0.9947207101708863, 0.9974332340847295, 0.9924186840814186, 0.03900458981635002, 0.009495098178984862, 0.004632782368546584, 9.999999999998899e-05, 0.01015242333190891, 0.03810282443065194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12478184619794264, 0.052560713806380055, 0.043457666407546225, 0.029913768307591626, 0.04461252885718747, 0.04102551605966076, 0.055684892280438714, 0.05120174230927965, 0.012139051497855324, 0.003966266034974297, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011200914669755146, 9.999999999998899e-05, 9.999999999998899e-05, 0.030118516930725647, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04174792804954941, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07966256917533943, 0.12716790984144477, 0.1568881266140275, 0.09012273646590307, 0.08051072568095674, 0.05000122723332312, 0.14410563668095733, 0.16358426918653224, 0.14431239109605176, 0.00922329506748043, 0.04325047374961055, 9.999999999998899e-05, 0.038360481079233066, 0.025561775589151847, 0.013877779740534835, 0.04916381506769396, 0.0302330207506899, 0.030109447810547696, 0.06448206263719058, 0.06735693451091307, 0.0765240253130629, 0.10849035572020316, 0.06581597144687368, 0.09874425342277826, 0.0727264032915631, 0.06755635279562433, 0.08995092812384842, 0.13338376563933907, 0.1772257607502552, 0.10359778603806002, 0.14825650751739305, 0.1141785806244281, 0.11303705733552327, 0.1369509979653416, 0.11431946655936831, 0.07773346453502039, 0.049314305928009894, 0.048267571776567264, 0.0528084379410404, 0.10412934612051816, 0.04550284947869221, 0.09424112822776531, 0.10028219168942065, 0.04472436396672552, 0.07125345548917472, 0.09950605108000021, 0.08264461810694268, 0.10957268958658661, 0.15698450512463202, 0.11206746411751278, 0.10028749305354034, 0.12245976138762271, 0.09014636393049846, 0.09205847909924747, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15626553355508555, 0.1627824953178375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07317557173145961, 0.0762452479921103, 0.06624913499995111, 0.1136839061159941, 0.1207914665021157, 0.060481689159998187, 0.07431825576889628, 0.09581959083126734, 0.12970919423920368, 0.03600096115587692, 0.03967402848431323, 0.023684062660164984, 0.06307831871637659, 0.029701359577715802, 0.09751141079385273, 0.04734439879414554, 0.03357135880398565, 0.05974330062681821, 0.11641437199415505, 0.15383093727979213, 0.14763022729669195, 0.1351558986774788, 0.14699725371246297, 0.16258830255391732, 0.1321636940686861, 0.14752772690064797, 0.12716853707000897, 0.04086729015462465, 0.0033285021509505963, 0.039770094149371826, 0.021256885201604736, 0.0058749879062220955, 0.041741162578910695, 0.01809667257760117, 0.029806534930723716, 0.030176175172679565]}, "mutation_prompt": null}
{"id": "417637a6-b152-489b-864b-80e9a77256e4", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress to accelerate convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "f3650f63-0e7d-43d6-8b9d-80c498d5c364", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress to accelerate convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "14ac2023-fa3e-419f-9789-e4874f34c7ae", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Non-uniform Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            mutation_direction = np.sign(np.random.randn(self.dim, self.dim))\n            swarm[mutation_indices] += mutation_direction * np.random.uniform(0, 1, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Implementing a non-uniform mutation strategy that biases towards better solutions to explore promising regions more effectively.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (5,5) (0,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (5,5) (0,5) ')", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {}, "mutation_prompt": null}
{"id": "977b51c0-be44-43f5-b6ab-506b26738b08", "solution": "class EnhancedDynamicScalingPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Dynamic Scaling Factor for Mutation Rate\n            scaling_factor = 0.5 * (1 - np.min(fitness) / np.max(pbest_fitness))\n            self.mutation_rate = self.base_mutation_rate + scaling_factor\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedDynamicScalingPSO", "description": "Introducing a dynamic scaling factor to adjust the mutation rate based on the fitness progress, enhancing exploration-exploitation balance.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('Negative dimensions are not allowed').", "error": "ValueError('Negative dimensions are not allowed')", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {}, "mutation_prompt": null}
{"id": "a883d4ee-6e0c-41e1-a4c8-600bb5d45e86", "solution": "import numpy as np\n\nclass EnhancedAdaptivePopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n        self.min_particles = 10\n        self.max_particles = 100\n\n    def __call__(self, func):\n        num_particles = self.min_particles\n        swarm = np.random.uniform(-5.0, 5.0, (num_particles, self.dim))\n        velocity = np.zeros((num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((num_particles, self.dim))\n            r2 = np.random.random((num_particles, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n            # Adaptive Population Size\n            mean_fitness = np.mean(fitness)\n            if t % (self.budget // 5) == 0:  # Adjust population size every 20% of the budget\n                if mean_fitness < gbest_fitness * 1.05 and num_particles < self.max_particles:\n                    num_particles += 10\n                    swarm = np.vstack((swarm, np.random.uniform(-5.0, 5.0, (10, self.dim)))\n                    velocity = np.vstack((velocity, np.zeros((10, self.dim)))\n                    pbest = np.vstack((pbest, np.random.uniform(-5.0, 5.0, (10, self.dim)))\n                    pbest_fitness = np.hstack((pbest_fitness, np.apply_along_axis(func, 1, pbest[-10:])))\n                elif mean_fitness > gbest_fitness * 1.1 and num_particles > self.min_particles:\n                    num_particles -= 10\n                    swarm = swarm[:num_particles]\n                    velocity = velocity[:num_particles]\n                    pbest = pbest[:num_particles]\n                    pbest_fitness = pbest_fitness[:num_particles]\n\n        return gbest_fitness", "name": "EnhancedAdaptivePopulationPSO", "description": "Implement a dynamic population size adaptation strategy to adjust the number of particles based on the fitness progress, facilitating faster convergence.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 51, 21, '                    velocity = np.vstack((velocity, np.zeros((10, self.dim)))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 51, 21, '                    velocity = np.vstack((velocity, np.zeros((10, self.dim)))\\n'))", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {}, "mutation_prompt": null}
{"id": "4d123c12-335e-419f-af34-0adddb7363b4", "solution": "import numpy as np\n\nclass EnhancedFastOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation with self-adaptive strategy\n            improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n            self.mutation_rate = max(self.base_mutation_rate, self.base_mutation_rate + 0.5 * improvement_rate)\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedFastOppositionBasedDynamicInertiaWeightPSO", "description": "Implementing a dynamic inertia weight update based on the fitness progress and introducing a self-adaptive mutation strategy to enhance convergence speed.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {}, "mutation_prompt": null}
{"id": "bb7f3d13-28f5-416e-88c4-25b967cd2c77", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            # Dynamic Local Search\n            local_search_indices = np.argpartition(fitness, int(0.1 * self.dim))[:int(0.1 * self.dim)]\n            local_search_points = swarm[local_search_indices] + np.random.normal(0, 0.1, (len(local_search_indices), self.dim))\n            local_fitness = np.apply_along_axis(func, 1, local_search_points)\n            best_local_index = np.argmin(local_fitness)\n            if local_fitness[best_local_index] < gbest_fitness:\n                swarm[local_search_indices[best_local_index]] = local_search_points[best_local_index]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic local search mechanism to exploit promising regions more effectively during optimization.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('Cannot apply_along_axis when any iteration dimensions are 0').", "error": "ValueError('Cannot apply_along_axis when any iteration dimensions are 0')", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {}, "mutation_prompt": null}
{"id": "477adef2-22af-4b32-8b08-12b0846b26c5", "solution": "import numpy as np\n\nclass AdaptiveOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Adaptive Local Search Operator\n            if t % (self.budget // 10) == 0:  # Introduce local search every 10% of the budget\n                local_search_indices = np.argsort(fitness)[:self.dim // 10]\n                local_search_swarm = swarm[local_search_indices]\n                local_search_swarm += np.random.normal(0, 0.1, local_search_swarm.shape)\n                local_search_fitness = np.apply_along_axis(func, 1, local_search_swarm)\n\n                update_indices = local_search_fitness < fitness[local_search_indices]\n                swarm[local_search_indices[update_indices]] = local_search_swarm[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "AdaptiveOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a novel adaptive local search operator to exploit promising regions and enhance convergence speed.", "configspace": "", "generation": 58, "fitness": 0.29473197067019363, "feedback": "The algorithm AdaptiveOppositionBasedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.29.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.927787304339391, 0.9131443975451801, 0.950402629141993, 0.9215037027919288, 0.8930223853621115, 0.9407493678549198, 0.9019257930324801, 0.9110522546409525, 0.9207756084314445, 0.8546881350098336, 0.8377933640336337, 0.8360926827139396, 0.8577389147701587, 0.8620899492447256, 0.8304622045454108, 0.8657698686511622, 0.8771907575522616, 0.8825258090574041, 0.18089348691357976, 0.14305382135399636, 0.14278047713282827, 0.12180580708891853, 0.161932094399864, 0.1620032008756418, 0.08822345582872437, 0.1623427755856568, 0.10222522324980943, 0.09322240598903886, 0.14359654765126273, 0.12335724322852781, 0.08877036705933838, 0.12063325381757473, 0.08002555172903303, 0.05874513520110525, 0.110207459358593, 0.0921701799252218, 0.9918582835993759, 0.9941175880036304, 0.9947321235565323, 0.9914534986730812, 0.9943118624538331, 0.9958524621815655, 0.9948186320691699, 0.9968109715334373, 0.9964522234950742, 0.7872067083872489, 0.7758630543028635, 0.783163115073308, 0.605790401797723, 0.7784621838504044, 0.7071861401343473, 0.7071900301116119, 0.7387427091776204, 0.743252379173793, 0.22144344462557397, 0.21019363130042812, 0.15802840200551582, 0.21334546203735727, 0.16126707930416562, 0.15332316223532105, 0.23008854796640532, 0.16311583106459115, 0.5211028119710969, 0.17096863554491903, 0.13345707987029276, 0.2117435336789244, 0.16766903527812715, 0.16981358994310103, 0.24675005889882706, 0.12902438960775797, 0.1982731985391344, 0.13461288561209417, 0.22844948348517702, 0.23033611146823996, 0.22430477963629247, 0.38582400524768146, 0.20412815875710288, 0.20969969911069408, 0.2474339431213488, 0.25847027797831457, 0.21558050445737165, 0.042801234437069846, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006488543463077923, 9.999999999998899e-05, 0.0186484212750756, 0.006601071630667366, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027035849687881974, 0.05109046136645412, 0.10311133668799866, 0.08171835345243195, 9.999999999998899e-05, 0.030248085980125516, 0.12163495748563491, 0.0197864726350504, 0.001283560498906433, 0.04325419627720384, 0.030026535903556528, 0.050605491073228204, 0.10927105353461908, 0.0168562137692696, 0.1756754347357462, 0.0802830869218969, 0.17172596579503807, 0.03870932322687681, 0.022840297444717494, 0.13008650974494285, 0.1506184807368729, 0.17427295780100993, 0.13180964438945908, 0.07342660167414927, 0.01102125353457084, 0.0163566726305453, 0.0835126352204355, 0.536500226927395, 0.499660886632343, 0.5573707871145965, 0.5841584529310414, 0.5365757345112627, 0.5670096116521424, 0.561557194893064, 0.5495512002209588, 0.5673077582833395, 0.12248493885384992, 0.07100048427942385, 0.08603786922718004, 0.08554817852977625, 0.0763396986787156, 0.09274595556475873, 0.08179891358422209, 0.08119172661021945, 0.0995867010466196, 0.1825851149363662, 0.18328052967996877, 0.18918366016236865, 0.1667408859747438, 0.19064755038164904, 0.16462106907556773, 0.164961699161837, 0.2616115527653389, 0.15167905377999047, 0.22463416096799282, 0.27348560735557426, 0.19125091980720121, 0.19734269984565533, 0.22876334969875967, 0.16296941764710304, 0.219636488106148, 0.4365290680653061, 0.28754796453322073, 0.19192114626407508, 0.1977945012955603, 0.13128598415405046, 0.22282697506460603, 0.1830692621154142, 0.24140740308260322, 0.16889080950696167, 0.2745270980542749, 0.1451483976202742, 0.21287338487249774, 0.18905511565025346, 0.2055930690364135, 0.19208401344166404, 0.19891860224854485, 0.21176410477838203, 0.22030833471407185, 0.20715846529297188, 0.19797449610362294, 0.8612925996113957, 0.22227651765172352, 0.20966030550802017, 0.20937836733701265, 0.17745689236643614, 0.1858172145024699, 0.18206787593636453, 0.25190367335491937, 0.22528560659091956, 0.1589615790463753, 0.11413977392279684, 0.17051242444306136, 0.1727304807137129, 0.2014795570164889, 0.17026585346053347, 0.10787278175756077, 0.11524432664841056, 0.10399946677042993, 0.6006676159963114, 0.11341032048096111, 0.15590122871251988, 0.8013471017544702, 0.21004904446545958, 0.21265129666755012, 0.10425350222606611, 0.10513009753308833, 0.11244390769676871, 0.1880499096705699, 0.19791180955627907, 0.19788388898176434, 0.2032933830989465, 0.20300928641103333, 0.17654455376810507, 0.20150548116654476, 0.2100632031858377, 0.19849014796665998, 0.07849824733122934, 0.10309978490491545, 0.09304286706341902, 0.1077604529980919, 0.11226524565827056, 0.10772550685129811, 0.11476509778816713, 0.07969343618913027, 0.07816120061102172]}, "mutation_prompt": null}
{"id": "f027b77b-4020-42fd-8d83-6c5a1c3679b4", "solution": "class EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Chaotic Search Mechanism\n            chaos_factor = np.random.uniform(0.1, 0.3, (self.dim, self.dim))\n            swarm += chaos_factor * np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a chaotic search mechanism to enhance exploration and exploit potential promising areas for faster convergence.", "configspace": "", "generation": 59, "fitness": 0.16587972589524164, "feedback": "The algorithm EnhancedOppositionBasedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.2957224196923921, 0.27751588934347415, 0.2905762655875729, 0.27266172715183756, 0.29338793387368756, 0.30049907586386093, 0.2977982093361542, 0.31713031354075116, 0.3008494148288964, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08333780131451984, 0.057729060621955486, 0.061357903984593176, 0.08268902281306634, 0.08593859009135596, 0.07130939279739557, 0.06989642818588215, 0.06860809774220233, 0.07042489109970884, 0.052053443647525954, 0.06727286995410575, 0.050325975892606456, 0.06157414319183785, 0.06968767932718367, 0.07452894742585581, 0.057597909016288806, 0.07768493092627393, 0.0648373994721082, 0.9955018394939777, 0.991317157259436, 0.9970773848891789, 0.9958205340669468, 0.9937538292848923, 0.9929703850050149, 0.9953778763736729, 0.9965207474663356, 0.993991376520397, 0.17875729842741583, 0.1595329533390204, 0.1562940070317007, 0.15075239625002346, 0.16214687253719584, 0.16886097107240605, 0.15238492868345932, 0.16058436908544704, 0.1703456362439778, 0.22165118032763853, 0.17862067053951136, 0.15284667100484783, 0.18894051475192963, 0.2523580983300985, 0.20168517273379571, 0.19057164131610405, 0.25617973361721613, 0.1629386091928796, 0.11805429433358272, 0.11885281486003063, 0.09808408203794583, 0.04446525009426583, 0.10883135503703956, 0.09715630332783898, 0.07155993729224064, 0.07928330350143586, 0.10076700787920034, 0.11235028070360642, 0.11386045961595914, 0.10144831458013304, 0.11954466256207474, 0.09724206243880307, 0.09738365128804105, 0.1203643626575569, 0.10309672776864387, 0.10186628990833602, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02543976927985281, 0.043188898175700374, 0.021776576226454236, 0.018869507332520907, 9.999999999998899e-05, 0.0885457073524396, 0.016818645486059935, 0.02725296599628979, 0.021504097620102747, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009760152647083853, 0.012135043262270995, 0.003336784822912331, 0.02621977425514488, 0.021537795762751055, 0.044689120753087064, 0.03169739092911472, 0.023043224034813292, 0.024663077905194064, 0.30367941027350653, 0.3246709151835465, 0.28919151045824687, 0.3163957934638998, 0.309535777862776, 0.2945899068451523, 0.30936440338650495, 0.3168148301057674, 0.291682360400218, 0.09721923790244169, 0.06939774515845987, 0.06341547887823651, 0.06387754819907854, 0.07618426794342592, 0.06332164743180724, 0.04663520003270427, 0.09315213852801241, 0.06620573234686167, 0.15514182355044792, 0.16313597642740985, 0.16566112280593026, 0.12457937627085525, 0.1470369843706527, 0.12700128341364725, 0.13547615887743136, 0.13681789372599362, 0.1416528611978769, 0.21190129345761943, 0.2270197272005834, 0.221682690653365, 0.22081450285276982, 0.22243514563643219, 0.20782552776375374, 0.18685739706563764, 0.22821038661950765, 0.23237851092703465, 0.14254787825030857, 0.15160247047587438, 0.1766723016166627, 0.12765992068434096, 0.1408357836137637, 0.14550923571419172, 0.1438462291240743, 0.14055741906551333, 0.12234158024483022, 0.16212038617403923, 0.18039257729493308, 0.18364277953298036, 0.1888743420206378, 0.16865968747030036, 0.2135237090867158, 0.17586376214820698, 0.19175992006372422, 0.19049511960725696, 0.16670721723270576, 0.1679169377934241, 0.18040260053032275, 0.16494268788209443, 0.16744089431356146, 0.16029882477715252, 0.16925029776648315, 0.17563003863459759, 0.171092124275652, 0.1528811107870759, 0.406451859951352, 0.16642468113892284, 0.40447791468768024, 0.21441882749695174, 0.16254517533227242, 0.2785944400607959, 0.1257715366649561, 0.15751684922513598, 0.20669541519822265, 0.32897447896918297, 0.2922248755486111, 0.31360390589264986, 0.1802798375887682, 0.20076431543222673, 0.1296260892482365, 0.26730893219893515, 0.15100760402121938, 0.18360046514037232, 0.17491853366601084, 0.164561793350958, 0.1670554668305989, 0.18259001152029108, 0.1755742557824871, 0.18220722236228326, 0.1630370372972031, 0.18979791818471847, 0.06000707262438232, 0.0797335351711006, 0.06716330523475111, 0.0669792349186824, 0.07150674293956039, 0.061426659842931386, 0.08004883116116657, 0.07464441388178511, 0.0657828681116367]}, "mutation_prompt": null}
{"id": "37529d00-790a-4815-b7f3-5019b8970ea4", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation with Diversity\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                diversity = np.std(swarm)\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate + 0.1 * diversity\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress and particle diversity to enhance convergence speed.", "configspace": "", "generation": 60, "fitness": 0.30946699655782156, "feedback": "The algorithm EnhancedOppositionBasedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "38ed889d-71e6-4d29-adcd-2c3a1828132d", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress to accelerate convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "46ca235b-52fc-4d4f-8d0f-29c410419216", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress to accelerate convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "0e350564-c963-429f-90cd-5883ed9d0112", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Dynamic Mutation & Diversity Maintenance\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n                if improvement_rate < 0.1:  # Reinitialize a random proportion of the swarm\n                    reinit_indices = np.random.choice(self.dim, int(0.1 * self.dim), replace=False)\n                    swarm[reinit_indices] = np.random.uniform(-5.0, 5.0, (len(reinit_indices), self.dim))\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedDynamicMutationPSO", "description": "Implementing a dynamic mutation strategy that adjusts the mutation rate based on the fitness progress and introduces a diversity maintenance mechanism through reinitialization to enhance convergence speed.", "configspace": "", "generation": 63, "fitness": 0.21826653920437714, "feedback": "The algorithm EnhancedDynamicMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.6151695274023163, 0.4431422807312623, 0.6006916253753662, 0.9565015525519125, 0.9743190853479746, 0.16410276504277266, 0.9681271232266303, 0.9590674971237968, 0.6896558286336325, 0.17228152252047624, 0.031702855842449584, 0.3136388591244772, 0.8292792860114732, 9.999999999998899e-05, 0.15766011669425384, 0.039280861316749904, 0.27828422127989616, 0.35464694404004593, 0.14750440562868805, 0.19029560423649328, 0.10949472162550045, 0.11145450099762233, 0.09897613267665495, 0.10320198377184375, 0.08273423890151665, 0.09388849025500223, 0.03976349121147471, 0.0945259716982797, 0.1130153631817209, 0.09514040826819314, 0.14817472595441128, 0.09381752154541523, 0.0687175030079612, 0.09291959266583294, 0.11408556034486717, 0.126032831126356, 0.9946678898552328, 0.9929461438775399, 0.9968168902225435, 0.1552572602782466, 0.9963602728041986, 0.986491626544091, 0.9891849353824065, 0.9976914610526942, 0.993119428236539, 0.32615698704881657, 0.4895078279934125, 0.35248535751688503, 0.17323870742550151, 0.14006866342417013, 0.11391654290540043, 0.15830412522919068, 0.4732850893671424, 0.21008602353255545, 0.8772020054571967, 0.08964649475471997, 0.09291038255515272, 0.21575524522650358, 0.1546156047720606, 0.19404892193628864, 0.16744028192229798, 0.1399984234506566, 0.06125193267245688, 0.1554458370588525, 0.1547360898177863, 0.19750704436682376, 0.1372297605436883, 9.999999999998899e-05, 0.14868962142848008, 0.13241195518286952, 0.20935194331246387, 0.10918452256530486, 0.1489438739506742, 0.13117448496378636, 0.13542973654905544, 0.24851655515481363, 0.16449545477797434, 0.13332106093379426, 0.16282250589988767, 0.22922940280732718, 0.04866456771479766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06694884086741382, 0.07097060243080011, 0.06750976494850514, 9.999999999998899e-05, 0.021476081565815597, 0.10673227246678996, 0.09761327427387512, 0.05864717825628485, 0.38059681534856316, 0.03316311461481947, 9.999999999998899e-05, 0.10626699340678947, 9.999999999998899e-05, 0.1301141630388345, 9.999999999998899e-05, 0.004646677967713009, 0.09546348719053444, 0.1999379053548238, 0.05711032816146433, 0.09701948562927809, 9.999999999998899e-05, 0.147636914238921, 9.999999999998899e-05, 0.014654004284645583, 0.059310472050567165, 0.1357910334154685, 0.43351124317400147, 0.4954740717312166, 0.4902037726378914, 0.38246368724724933, 0.4436844424945968, 0.16845476581117091, 0.26143430905100173, 0.4440796241226719, 0.42496456213373424, 0.10611263983726493, 0.1494150721559645, 0.020626289988224578, 0.05038324897251856, 0.0844996942987637, 0.0722489949126337, 0.08701920448234302, 0.16160244780885713, 0.10757767886340441, 0.1983813650227796, 0.173689623329088, 0.135833207826201, 0.3268489737195469, 0.23034530386408336, 0.29313714646422506, 0.1748288595999058, 0.18256954301720507, 0.23257859369093226, 0.14004978822435987, 0.2879361410126243, 0.15012467880063518, 0.3288006679475639, 0.16974353121151364, 0.18223873911077737, 0.198358247300642, 0.33335482669335703, 0.17307382323646647, 0.21174154178836357, 0.16506087181540174, 0.14718877732139368, 0.267650799071381, 0.19722577370479033, 0.23865278906268161, 0.22833079985641624, 0.11047769444243316, 0.05984504008316782, 0.20398837899507538, 0.20639674696653054, 0.1809219024770664, 0.20890543298154396, 0.17540252629668085, 0.19514369818299304, 0.27382058036763723, 0.21576843019404746, 0.14507721751925895, 0.20200308530091937, 0.2293650426466619, 0.1835256079166443, 0.2131093973198771, 0.17555938290673878, 0.17468319028149604, 0.1711023958418615, 0.1973341771899666, 0.16780918359744268, 0.1588727706941201, 0.15855009160404077, 0.15828017740204847, 0.17331732515050824, 0.20270893099346232, 0.1668912261869746, 0.185178831246388, 0.1153438452118164, 0.10410786874439604, 0.7527767640065067, 0.1112211094364004, 0.22244836557937464, 0.2469668445189478, 0.21343510743581984, 0.2059961093603624, 0.11307391483414408, 0.14959044561008017, 0.11330520704275882, 0.18957640403548626, 0.21118760241947676, 0.18365000081375327, 0.18795534140202708, 0.18608822300294803, 0.19981451421978014, 0.22765231062894242, 0.19935967250017472, 0.19476833525330817, 0.07216120540827209, 0.06686026244457677, 0.0692504187010301, 0.07404499152970567, 0.08127880626303574, 0.14547299930760205, 0.07453512547331442, 0.1083116306507158, 0.0754870637617665]}, "mutation_prompt": null}
{"id": "5af05b88-9b1c-4a38-b912-5b7be243c28c", "solution": "class AdaptiveOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n        self.diversity_threshold = 0.5\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation with Adaptive Mechanism\n            if np.random.rand() < self.diversity_threshold:\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = max(self.base_mutation_rate, min(1.0, self.mutation_rate + 0.1 * improvement_rate))\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "AdaptiveOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a novel adaptive mechanism to dynamically update the mutation rate based on the fitness progress and swarm diversity to enhance exploration and exploitation trade-off for faster convergence.", "configspace": "", "generation": 64, "fitness": 0.25541482943166616, "feedback": "The algorithm AdaptiveOppositionBasedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.28.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.936936069635843, 0.9226386036749241, 0.9443467675974248, 0.921071227714195, 0.9148538457796487, 0.8991713425788082, 0.9156195272280462, 0.9138342743057182, 0.9122077622567354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032619038914750154, 0.008667765106723735, 0.808912061474874, 0.8229638866885554, 0.8576764533172758, 0.00974022938406649, 0.1861780709619002, 0.09739556066058286, 0.1531362725123092, 0.16003693271653885, 0.18672073371410003, 0.16080951193356507, 0.11758843376751116, 0.08570533982722395, 0.05191619704083328, 0.05493621127088533, 0.15790459915263855, 0.11526164099225356, 0.13354479286638743, 0.12294706821063517, 0.14207792574084566, 0.10714255174333698, 0.7640461489045208, 0.052775273351019836, 0.9930596203530502, 0.9942013237534802, 0.9932361304517628, 0.9957005370900304, 0.9941269431135367, 0.9867002566465426, 0.9953493160071746, 0.9975947434049219, 0.9958327651260941, 0.7829130707853964, 0.7875383650331432, 0.7337319395997883, 0.767986050103884, 0.6986919110699781, 0.7709098824249603, 0.7451715996547403, 0.0007433194423436262, 0.004062991845098285, 0.17092207797038117, 0.0936115150606649, 0.23876674320872204, 0.2787413290591946, 0.20875526345559747, 0.21226358001240164, 0.3484453862773256, 0.20831770358805912, 0.22955778130610294, 0.3581344339616328, 0.20816854615522606, 0.21021232331960837, 0.19480312758841423, 0.12806647825682993, 9.999999999998899e-05, 0.17534591084689732, 0.21538067754804846, 0.13670590589445242, 0.2042321828245358, 0.12355769767613856, 0.1205162614357187, 0.13408943098178916, 0.19579231824353327, 0.22414430244858807, 0.24955970392749716, 0.17257536807875662, 0.1900162519416324, 9.999999999998899e-05, 0.0246041064873449, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0813236336451264, 0.03334718791610558, 0.11533298980706275, 0.05421269859828548, 9.999999999998899e-05, 0.0073225083156328585, 0.11342026648646297, 0.07125550454805785, 0.03511125425096595, 9.999999999998899e-05, 0.025706295096808773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007596909980505218, 0.04917282498496911, 0.0672841781558855, 0.0624458446905346, 0.12225596457810917, 9.999999999998899e-05, 0.17572843283990058, 0.028263574933698687, 9.999999999998899e-05, 0.025922315182143607, 0.09795001029480976, 0.12321824448572116, 0.5401138497544096, 0.5224467148569203, 0.5240044077217783, 0.549061497058406, 0.6360608005905697, 0.5576214351863187, 0.5829368816700252, 0.599878607954334, 0.09678143833605868, 0.08894157783407719, 0.07876735548070135, 0.10551272454180616, 0.06626274574068047, 0.0658428975482146, 0.0405304065869323, 0.0435699105530617, 0.0687736459062076, 0.19184930731679872, 0.3708674969928537, 0.17296937485912145, 0.26311338070542845, 0.15107126700019757, 0.2787035583644609, 0.23188838876329743, 0.21128163403751743, 0.2805746047046024, 0.1631462744894583, 0.1388413253410805, 0.1833792253085298, 0.33877379205630886, 0.32646848367514825, 0.21158811248382403, 0.23223568157171026, 0.22538965717493165, 0.18873293190350515, 0.10549048309892295, 0.10242636657539661, 0.0765877799882706, 0.28578269096517095, 0.15364995614069976, 0.20369921620276588, 0.22538057721655202, 0.16428668420064663, 0.053378708640162364, 0.167719424734193, 0.13402466060664098, 0.20995992152300047, 0.2144672865093299, 0.15936625355185552, 0.15874653840006436, 0.24491929479618324, 0.1871130617444251, 0.21706099691629932, 0.12030787623170969, 0.18813683774185008, 0.14892989480420493, 0.18907688760777241, 0.21240804295406202, 0.1904648079310669, 0.19403289810878355, 0.1896190834379785, 0.2054670059910898, 0.15864077173792246, 0.1368990897840615, 0.1584663643290123, 0.19223766947142196, 0.17891269472360294, 0.17685181049850507, 0.10690748699152808, 0.1554335074374834, 0.1633374902399748, 0.6394402220318192, 0.11240081315852968, 0.7629408916966871, 0.5115649417445828, 0.20903493822435804, 0.21114806308396405, 0.10245878738382785, 0.06601439808506093, 0.08733250658139258, 0.18383628234819738, 0.21921228847107987, 0.19440361660670202, 0.1876160126882499, 0.19209459420231023, 0.18726854477301402, 0.15975906584058597, 0.17756706666248467, 0.15156366355616357, 0.1020234278587373, 0.06750389711281335, 0.06667828658975361, 0.08989379573454448, 0.13378707913544308, 0.09100608626898155, 0.14538696723562794, 0.0942482135781102, 0.10205725740849814]}, "mutation_prompt": null}
{"id": "b22c39ae-cf30-4002-a657-8a8b658002dd", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  \n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Implementing a dynamic mutation rate based on the fitness improvement ratio to enhance exploration and exploitation balance.", "configspace": "", "generation": 65, "fitness": 0.30946699655782156, "feedback": "The algorithm EnhancedOppositionBasedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "e30cd2d9-6581-495d-8eb3-e2925122be17", "solution": "import numpy as np\n\nclass ImprovedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            # Introducing chaotic perturbations for enhanced exploration\n            chaos_factor = 0.01 + 0.99 * np.exp(-t / self.budget)\n            chaos = np.random.uniform(-chaos_factor, chaos_factor, (self.dim, self.dim))\n            swarm += chaos\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "ImprovedOppositionBasedDynamicInertiaWeightPSO", "description": "Implementing a novel diversity-enhancing mechanism by introducing chaotic perturbations to swarm positions for improved exploration capability.", "configspace": "", "generation": 66, "fitness": 0.16578898234351247, "feedback": "The algorithm ImprovedOppositionBasedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.30237381935488583, 0.3237152746755605, 0.2800474970287109, 0.3045399402860356, 0.30163392412358203, 0.29478492686014257, 0.3185781307969736, 0.2929294759505434, 0.31584645436120873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06839051435715626, 0.07839451350864257, 0.07734675374780509, 0.07398319321292379, 0.07391608933288951, 0.06974309542934298, 0.06915538027808765, 0.07226133527698753, 0.06888828596724561, 0.07065259658857959, 0.08642432687455259, 0.06015529078848414, 0.062303809687713874, 0.05546476732718997, 0.0606123710403923, 0.06256883413919401, 0.07241958411764715, 0.06950454521757587, 0.9958202773141982, 0.9919201153003365, 0.9914776803711023, 0.9935568778507071, 0.9947968367008403, 0.9952427637642413, 0.9940421226632011, 0.9955919772867506, 0.995953117471079, 0.1739813543286709, 0.18975032299820083, 0.1630574160431768, 0.1805795879575578, 0.20649836303801017, 0.1777078049356704, 0.2152767479756209, 0.16204799809709858, 0.19150457863249792, 0.20402434388045532, 0.19402174928077698, 0.20980693298468456, 0.23237628537666155, 0.25127402696661305, 0.18137989201159976, 0.15923727730875692, 0.19177744645839967, 0.20098052261670474, 0.11852332673060706, 0.10732256407456775, 0.10548334427374906, 0.10361896508264634, 0.12184635321355641, 0.07371819344497654, 0.04130455930655863, 0.11917119384923569, 0.10415422448656486, 0.11931935358205714, 0.11688432223686873, 0.10673467613088683, 0.10081604706796898, 0.11155818018174413, 0.06924513895191009, 0.10876914253517311, 0.05068899377674463, 0.11264576423686501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07042057356873033, 0.015062423019731042, 0.07836850211482727, 0.10619638284712651, 0.007731464650154507, 0.049881198001495486, 9.999999999998899e-05, 0.03797648834412615, 0.015022425979004717, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010858009749522002, 0.03957364586692291, 0.03700675780006679, 0.033203986982020095, 0.03995065425753164, 0.02007849652285898, 0.029111644462269992, 0.00808448422560104, 0.029716671686826013, 0.30772133780343036, 0.2919125014484545, 0.3072962889626566, 0.2981515690425003, 0.2894003277052156, 0.3028572583781832, 0.31119764574306785, 0.27845220593746367, 0.2916360594628138, 0.07137949721787151, 0.07349833166784159, 0.08151449385801257, 0.06252746617366833, 0.0693824177965211, 0.08512726286788475, 0.057402070051855825, 0.0796648306052199, 0.09521899345821117, 0.11300214260414665, 0.15902341660366803, 0.1463166817602769, 0.16033031376911422, 0.13803331617509884, 0.1602594130121795, 0.15183816796080207, 0.12280926244730295, 0.14931730164661527, 0.2200974931645856, 0.2161331137625313, 0.2018421905184712, 0.2143381907975821, 0.23144434795767888, 0.20363094653198488, 0.2341761336731235, 0.2228840823720255, 0.20572088125128263, 0.13641116838170653, 0.183200528805063, 0.13143184790771278, 0.1586715439466161, 0.1513206132197018, 0.14914405941722475, 0.1410546037141439, 0.15037030005364327, 0.16108961246887044, 0.1753037216746347, 0.1727164312654088, 0.18705179190761545, 0.1736769577231584, 0.17445846152380295, 0.1774871286079418, 0.17101897378661235, 0.16880636622884337, 0.20033291470940162, 0.16762759363528967, 0.17122535280400097, 0.1622419630717119, 0.16831580268299584, 0.16492323616799476, 0.19953649065582635, 0.17021129483913267, 0.17327869107068294, 0.18034875204626366, 0.16074998853536093, 0.23742003798452416, 0.1526016737933953, 0.4332020906182271, 0.18581769013463112, 0.35256823525085623, 0.1793885430416462, 0.11867448529705726, 0.14231407743149616, 0.26355551232958174, 0.10918768735466233, 0.25433691824884697, 0.12255327795336435, 0.1972399513878128, 0.21700564220800012, 0.163699113828768, 0.17903670375580205, 0.11195769949709578, 0.18183920955243316, 0.20286656986320517, 0.17004667153899422, 0.17176477337349227, 0.18012863775057664, 0.1807688173225106, 0.17552200760370995, 0.16911228249056653, 0.16895587640931675, 0.07704380101181652, 0.0716529097887546, 0.08742156457359307, 0.07175154948038909, 0.07429558769163358, 0.05666942323583024, 0.08010702174959572, 0.06681465613967741, 0.07238803828095808]}, "mutation_prompt": null}
{"id": "dac3501b-017a-436c-8ac4-1dfe4ebf9d8d", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress to accelerate convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "ba27f61b-6593-4455-84db-2e36668976b7", "solution": "import numpy as np\n\nclass AdaptiveMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Adaptive Mutation\n            mutation_rate = np.clip(0.5 + 0.5 * (gbest_fitness - pbest_fitness) / np.abs(gbest_fitness - pbest_fitness), 0.1, 0.9)\n            mutation_indices = np.random.choice(self.dim, int(self.dim * mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "AdaptiveMutationPSO", "description": "Introducing a novel adaptive mutation strategy based on individual performance to enhance exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('only size-1 arrays can be converted to Python scalars').", "error": "TypeError('only size-1 arrays can be converted to Python scalars')", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {}, "mutation_prompt": null}
{"id": "33cd5865-44ef-4f37-beb3-72e76dbb7db0", "solution": "import numpy as np\n\nclass DynamicScalingFactorPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n        self.scaling_factor = 0.2\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Dynamic Scaling Factor for Mutation Rate\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + self.scaling_factor * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "DynamicScalingFactorPSO", "description": "Introducing a dynamic scaling factor to adjust the mutation rate based on the fitness progress more aggressively for faster convergence.", "configspace": "", "generation": 69, "fitness": 0.21826653920437714, "feedback": "The algorithm DynamicScalingFactorPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.6151695274023163, 0.4431422807312623, 0.6006916253753662, 0.9565015525519125, 0.9743190853479746, 0.16410276504277266, 0.9681271232266303, 0.9590674971237968, 0.6896558286336325, 0.17228152252047624, 0.031702855842449584, 0.3136388591244772, 0.8292792860114732, 9.999999999998899e-05, 0.15766011669425384, 0.039280861316749904, 0.27828422127989616, 0.35464694404004593, 0.14750440562868805, 0.19029560423649328, 0.10949472162550045, 0.11145450099762233, 0.09897613267665495, 0.10320198377184375, 0.08273423890151665, 0.09388849025500223, 0.03976349121147471, 0.0945259716982797, 0.1130153631817209, 0.09514040826819314, 0.14817472595441128, 0.09381752154541523, 0.0687175030079612, 0.09291959266583294, 0.11408556034486717, 0.126032831126356, 0.9946678898552328, 0.9929461438775399, 0.9968168902225435, 0.1552572602782466, 0.9963602728041986, 0.986491626544091, 0.9891849353824065, 0.9976914610526942, 0.993119428236539, 0.32615698704881657, 0.4895078279934125, 0.35248535751688503, 0.17323870742550151, 0.14006866342417013, 0.11391654290540043, 0.15830412522919068, 0.4732850893671424, 0.21008602353255545, 0.8772020054571967, 0.08964649475471997, 0.09291038255515272, 0.21575524522650358, 0.1546156047720606, 0.19404892193628864, 0.16744028192229798, 0.1399984234506566, 0.06125193267245688, 0.1554458370588525, 0.1547360898177863, 0.19750704436682376, 0.1372297605436883, 9.999999999998899e-05, 0.14868962142848008, 0.13241195518286952, 0.20935194331246387, 0.10918452256530486, 0.1489438739506742, 0.13117448496378636, 0.13542973654905544, 0.24851655515481363, 0.16449545477797434, 0.13332106093379426, 0.16282250589988767, 0.22922940280732718, 0.04866456771479766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06694884086741382, 0.07097060243080011, 0.06750976494850514, 9.999999999998899e-05, 0.021476081565815597, 0.10673227246678996, 0.09761327427387512, 0.05864717825628485, 0.38059681534856316, 0.03316311461481947, 9.999999999998899e-05, 0.10626699340678947, 9.999999999998899e-05, 0.1301141630388345, 9.999999999998899e-05, 0.004646677967713009, 0.09546348719053444, 0.1999379053548238, 0.05711032816146433, 0.09701948562927809, 9.999999999998899e-05, 0.147636914238921, 9.999999999998899e-05, 0.014654004284645583, 0.059310472050567165, 0.1357910334154685, 0.43351124317400147, 0.4954740717312166, 0.4902037726378914, 0.38246368724724933, 0.4436844424945968, 0.16845476581117091, 0.26143430905100173, 0.4440796241226719, 0.42496456213373424, 0.10611263983726493, 0.1494150721559645, 0.020626289988224578, 0.05038324897251856, 0.0844996942987637, 0.0722489949126337, 0.08701920448234302, 0.16160244780885713, 0.10757767886340441, 0.1983813650227796, 0.173689623329088, 0.135833207826201, 0.3268489737195469, 0.23034530386408336, 0.29313714646422506, 0.1748288595999058, 0.18256954301720507, 0.23257859369093226, 0.14004978822435987, 0.2879361410126243, 0.15012467880063518, 0.3288006679475639, 0.16974353121151364, 0.18223873911077737, 0.198358247300642, 0.33335482669335703, 0.17307382323646647, 0.21174154178836357, 0.16506087181540174, 0.14718877732139368, 0.267650799071381, 0.19722577370479033, 0.23865278906268161, 0.22833079985641624, 0.11047769444243316, 0.05984504008316782, 0.20398837899507538, 0.20639674696653054, 0.1809219024770664, 0.20890543298154396, 0.17540252629668085, 0.19514369818299304, 0.27382058036763723, 0.21576843019404746, 0.14507721751925895, 0.20200308530091937, 0.2293650426466619, 0.1835256079166443, 0.2131093973198771, 0.17555938290673878, 0.17468319028149604, 0.1711023958418615, 0.1973341771899666, 0.16780918359744268, 0.1588727706941201, 0.15855009160404077, 0.15828017740204847, 0.17331732515050824, 0.20270893099346232, 0.1668912261869746, 0.185178831246388, 0.1153438452118164, 0.10410786874439604, 0.7527767640065067, 0.1112211094364004, 0.22244836557937464, 0.2469668445189478, 0.21343510743581984, 0.2059961093603624, 0.11307391483414408, 0.14959044561008017, 0.11330520704275882, 0.18957640403548626, 0.21118760241947676, 0.18365000081375327, 0.18795534140202708, 0.18608822300294803, 0.19981451421978014, 0.22765231062894242, 0.19935967250017472, 0.19476833525330817, 0.07216120540827209, 0.06686026244457677, 0.0692504187010301, 0.07404499152970567, 0.08127880626303574, 0.14547299930760205, 0.07453512547331442, 0.1083116306507158, 0.0754870637617665]}, "mutation_prompt": null}
{"id": "e997a9e5-e5e6-431b-b594-0d4c3acf4092", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress to accelerate convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "438e58dc-20d9-4842-acbb-15cd4a1126a6", "solution": "import numpy as np\n\nclass AdaptiveMutationEnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Adaptive Mutation\n            mutation_fitness_changes = np.abs(pbest_fitness - np.roll(pbest_fitness, 1))\n            mutation_rate_adjustment = 0.1 + 0.4 * (mutation_fitness_changes / np.max(mutation_fitness_changes))\n            self.mutation_rate = np.mean(mutation_rate_adjustment)\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "AdaptiveMutationEnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a novel adaptive mutation strategy that adjusts the mutation rate based on the individual fitness changes to enhance exploration and exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('cannot convert float NaN to integer').", "error": "ValueError('cannot convert float NaN to integer')", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {}, "mutation_prompt": null}
{"id": "cec28499-e4fb-45ee-b027-0ee2b3091d42", "solution": "class AdaptiveInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n        self.inertia_weights = np.full((self.dim, self.dim), self.w_max)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = self.inertia_weights * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            # Adaptive Inertia Weight\n            improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n            self.inertia_weights = np.clip(self.inertia_weights + improvement_rate, self.w_min, self.w_max)\n\n        return gbest_fitness", "name": "AdaptiveInertiaWeightPSO", "description": "Introducing a novel adaptive inertia weight strategy based on individual fitness progress to enhance convergence speed.", "configspace": "", "generation": 72, "fitness": 0.18325414138127805, "feedback": "The algorithm AdaptiveInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.23.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.962585910129548, 0.35266728193455177, 0.6109392577673305, 0.22491783451352698, 0.9222133653199287, 0.6673175608356552, 0.21485334446676174, 0.09461576768580104, 0.11811273757075147, 0.08543289276362742, 0.8771000040805035, 0.9133183583449691, 0.23865598904913254, 9.999999999998899e-05, 0.13491070396550553, 0.04052895650403465, 0.13146880233621738, 0.0871346640950047, 0.010811729190380537, 0.01531426878827502, 0.04476779113438112, 0.06935573656183747, 0.11979711561509465, 0.16376481737157011, 0.1481902531638991, 0.16465117165699772, 0.12182127287734057, 0.022640400334232758, 0.0035342408137032377, 9.999999999998899e-05, 0.10238674004527548, 0.13391340585374623, 0.0489006345741525, 0.1177584684961206, 9.999999999998899e-05, 0.14786686270857918, 0.9976941049175075, 0.9967061317606876, 0.9972299227491092, 0.9976682279236793, 0.9949814977955475, 0.9971829089235245, 0.9934395917725843, 0.9972112511664434, 0.9973849593007351, 0.5587092159097515, 0.2057596565872294, 0.28077087533632283, 9.999999999998899e-05, 0.23392885175520628, 0.12488344434809429, 9.999999999998899e-05, 9.999999999998899e-05, 0.21061907077904318, 0.17117152923110657, 0.0810432719492934, 0.06885265379749761, 0.3520759540991295, 0.13066882000654934, 0.1741333711507459, 0.21644897225015314, 0.13751506194570828, 0.00990846602666351, 0.2250284380331885, 0.1482046840675454, 0.13218580171710037, 0.03490760095969714, 0.012179466519118387, 0.014936562989125934, 0.13359314680512724, 0.15388905791327234, 0.1426522920787684, 0.13317561589273086, 0.13089397684779702, 0.14589987894730216, 0.13960804989545905, 0.33681556701199666, 0.1938044050242641, 0.2504036501404089, 9.999999999998899e-05, 0.12817611701900755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10393475032331756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05373239045261613, 0.06994949588244492, 9.999999999998899e-05, 9.999999999998899e-05, 0.03903963951899059, 0.14003012281227367, 9.999999999998899e-05, 0.01169211092118927, 0.0, 0.041086732148249205, 0.0, 0.029960052062484088, 9.999999999998899e-05, 0.14155566356982618, 0.07743513119993573, 0.15553050837955684, 0.07760130018738431, 0.10807849182727225, 0.12385302137373422, 0.1343891525258718, 0.04294757275275207, 0.18231091487534345, 0.007504561496132545, 0.028508628936580682, 0.026636924945270257, 0.005132876436151679, 0.12197313881584082, 0.1488124250053261, 0.14838054695461433, 0.12935809642334173, 0.11240906280291652, 0.07245256539369405, 0.551953354970063, 0.5472141396771619, 0.5126618600260541, 0.1365622622915582, 0.04885996465626008, 0.030430055785680254, 0.0845053324059638, 0.10001730308443257, 0.08716207204377135, 0.04149477294589976, 0.04956040801981221, 0.05400526672374051, 0.17409952530462192, 0.2413720843656979, 0.22211642595873238, 0.09846289938802477, 0.0657225444869024, 0.07404008160334419, 0.23092559921686062, 0.28962559359990014, 0.2338763914375429, 0.12492994627553633, 0.11653817980945258, 0.10485265848947378, 0.19938589975997267, 0.16700649115766952, 0.236545743605601, 0.22848312854632735, 0.2530695100316508, 0.24889238931961777, 0.09821278006840584, 0.10319937998376116, 0.09863648813210946, 0.16198073261942159, 0.21222389966582034, 0.2887806970312822, 0.18370267461382705, 0.16267719114026635, 0.1669067219425302, 0.12622526847461335, 0.0628129088929702, 0.15269554211354786, 0.22923595207276726, 0.19606842322071183, 0.14189871277230304, 0.22039656680123954, 0.2001579734355986, 0.19072815340539995, 0.14445302670575932, 0.19180684447966756, 0.15789217216752827, 0.19181791928536773, 0.1677737482018059, 0.18977820875589602, 0.20424993822786952, 0.19039960063436834, 0.19258943613842427, 0.18527024549557425, 0.12066182723212837, 0.05098059712318026, 0.17217428315061767, 0.20083660424550942, 0.3615408879638926, 0.1626703295194737, 0.07472313710019696, 0.10679634203252841, 0.09829823190086262, 0.0529328790979805, 0.03974766400807239, 0.2167098067985156, 0.021600351495484005, 0.2134289425935051, 0.08227809939985453, 0.10156978483235035, 0.023068498411701333, 0.1836066343565348, 0.12017502569002791, 0.20000778278633147, 0.21869566497369786, 0.220455901885801, 0.19453627001151474, 0.131742820886379, 0.14852384420119147, 0.12716853707000897, 0.08751501812894769, 0.13110146346820162, 0.05456379977528192, 0.06544797955690296, 0.09977112653179587, 0.06971533966399623, 0.09143850518387919, 0.07578101819379568, 0.06480010570397587]}, "mutation_prompt": null}
{"id": "84b105e5-295d-400b-b07d-d443f56e2bd0", "solution": "class FastDiversityEnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n        self.diversity_threshold = 0.1\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Diversity Maintenance\n            if np.random.random() < self.diversity_threshold:\n                random_swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n                random_fitness = np.apply_along_axis(func, 1, random_swarm)\n                swarm[random_fitness < pbest_fitness] = random_swarm[random_fitness < pbest_fitness]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "FastDiversityEnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a diversity-based mechanism to maintain population diversity and exploration during optimization.", "configspace": "", "generation": 73, "fitness": 0.3069634176481773, "feedback": "The algorithm FastDiversityEnhancedOppositionBasedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.8804672604936812, 0.902941480344151, 0.9181045264037351, 0.9209844813425216, 0.9250016203474918, 0.9074049194180461, 0.9270624587599784, 0.9041540969412211, 0.9132944027437992, 0.8597143999947012, 0.8282583569108679, 0.8744804228247164, 0.8637828314358978, 0.8498979379771017, 0.8365922231256484, 0.8465332246355604, 0.8534922532224422, 0.8657249274466157, 0.09375901597525282, 0.14637125083100144, 0.12390243520705047, 0.0923607576284714, 0.1160276268070789, 0.14802282760999352, 0.11675853885116272, 0.13350072845825944, 0.1806203447171445, 0.09706610513551517, 0.09355547169021716, 0.10950580524275066, 0.11852158581111161, 0.18140078236838697, 0.04358303147939713, 0.11072872920663035, 0.0655791322404139, 0.04609380458025447, 0.9899015569489855, 0.9942895113815897, 0.9943426703303535, 0.9946018091165607, 0.9949426641820286, 0.9882487378009404, 0.9941035655325033, 0.9975947434049219, 0.9945016217102625, 0.8060433974248601, 0.7646410819249395, 0.7986811483562452, 0.7357573261862944, 0.8236386900721301, 0.6899206155963638, 0.6338918345105122, 0.6793826462012494, 0.7796571630476417, 0.1839287725903559, 0.16141519647243385, 0.1346414270485684, 0.19725349962627847, 0.14945169077288079, 0.19556930317298815, 0.2217970267451621, 0.2140595027605744, 0.17287945337104138, 0.2171356582039432, 0.2074007581163213, 0.1336007196384449, 0.13397868949367786, 0.21268161408102948, 0.44996704108570373, 0.2188666502514509, 0.1326350979223151, 0.13273463510419914, 0.22764912590930586, 0.2222119019417137, 0.32516020426857806, 0.2338333035624498, 0.2191046972485171, 0.17100424369125045, 0.3041562591933522, 0.13134223904309583, 0.23123697246443542, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017392399447517137, 0.005123500163927597, 9.999999999998899e-05, 9.999999999998899e-05, 0.06918813817703051, 0.0937414249015075, 0.02197874014928025, 0.0674953751647911, 0.0020180526818094346, 0.0308610770987221, 0.09716252674001713, 0.04365361955611047, 0.11101316351861912, 0.07990137452489054, 0.02244790053402923, 0.009810118791912847, 0.083846712952509, 0.08761939408847319, 0.11586166686635602, 0.04833399101733282, 0.0397365824797935, 0.1160104038511941, 0.12493382135923548, 0.12373796518999114, 0.10910276208937708, 0.180634135521634, 0.23068762894477135, 0.022847828909323464, 0.243831464307807, 0.03962534018024544, 0.10239039403006533, 0.5686477417029772, 0.5474205692723936, 0.5246858262992395, 0.5749156190379568, 0.5767381452077369, 0.5625061031931193, 0.565108049705923, 0.5528180926574202, 0.5750402402972228, 0.07758847017717796, 0.07747889706140554, 0.06529433745699009, 0.12576022643306095, 0.11045322380883349, 0.07954060520734152, 0.11182657495129933, 0.12594860843384725, 0.05757708398483774, 0.16466448541925272, 0.2475630695998826, 0.18060566126507527, 0.16156773150643844, 0.19578890884228428, 0.22669108782260194, 0.11214676371114152, 0.18573604423110923, 0.15845980512711977, 0.39903809462671713, 0.25409385913645255, 0.2578296378944469, 0.22990171685323768, 0.1705845318424123, 0.22035295476374672, 0.21913940707644675, 0.31788361342216276, 0.2990176289263612, 0.17982821990202247, 0.21361219999977743, 0.11940873608418656, 0.2625283191670439, 0.19560663083840013, 0.12233074565540158, 0.14392073521700677, 0.18763751415447472, 0.142452364268442, 0.20847444556151018, 0.20146189613879795, 0.22507664743154476, 0.1767548325697924, 0.18626076871834463, 0.1924197304328008, 0.23311930960079918, 0.21422380243230188, 0.16194077063034762, 0.22677128795090795, 0.19769420597439546, 0.18512148816535134, 0.2004911139081864, 0.18356979322184042, 0.21282233929561112, 0.1778469286344263, 0.17994075222104478, 0.1949975473169705, 0.1590982949163957, 0.11442447943947176, 0.1580515400870245, 0.9166991873167976, 0.8728163648799542, 0.8810448783368844, 0.13208143092834412, 0.15282945598109943, 0.1630541096490684, 0.7912892121873677, 0.5591192806218135, 0.5612518240904241, 0.556886099334396, 0.1551929944722702, 0.21287916545342023, 0.11563550310747417, 0.10440203706343365, 0.7032809739809756, 0.24846685951371628, 0.18804498359754662, 0.19463749524620133, 0.17693991508697582, 0.19063333593252163, 0.1856295187207867, 0.21232328410235013, 0.1756194315680032, 0.19571274673294237, 0.09312385313854288, 0.06964721338652868, 0.07595209930860092, 0.09180524644162347, 0.10726857908410292, 0.10078429923513177, 0.08762072544986366, 0.08900801907657019, 0.07734346313528007]}, "mutation_prompt": null}
{"id": "685ec6a6-f32e-4b8c-a07a-52c28f71ad75", "solution": "class EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n        self.inertia_weights = np.full(dim, self.w_max)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = self.inertia_weights[:, np.newaxis] * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            if t % (self.budget // 5) == 0:\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.inertia_weights = np.clip(self.inertia_weights * (1.0 + 0.1 * improvement_rate), self.w_min, self.w_max)\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Implementing a self-adaptive inertia weight mechanism that adjusts based on particle performance to improve convergence speed.", "configspace": "", "generation": 74, "fitness": 0.08996310793313306, "feedback": "The algorithm EnhancedOppositionBasedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.20.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.1675823953034722, 0.1538382613584809, 0.12801210296298215, 0.07216640703121735, 0.12799255766715756, 0.11149802316640256, 0.050015180451153385, 0.11265505757495942, 0.10665010872813252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020870031023297875, 0.011884495433009401, 0.044584831305472306, 0.06025620368842788, 0.037965742033232885, 0.03850893192760707, 0.05299361503700872, 0.014887342193985353, 0.03054041530699325, 0.020640837263706246, 0.0034551189436311525, 9.999999999998899e-05, 9.999999999998899e-05, 0.03920858717142128, 0.0021290255846438955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.992709814656761, 0.9956020686206135, 0.9964745070493631, 0.9959381283258638, 0.9962166966744905, 0.992147424757692, 0.9962354822368454, 0.9973486267030157, 0.9966127513830616, 0.05438351577117284, 9.999999999998899e-05, 0.019371197375666505, 9.999999999998899e-05, 0.04807473315163335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12478184619794264, 0.03893121043698955, 0.008015541156752626, 0.06543692255277456, 0.05854328709348233, 0.00869298785805328, 0.03722404534952661, 0.008106316554223336, 0.043034089522860586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011200914669755146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043100761710047286, 9.999999999998899e-05, 0.07632995511377905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07160247433935929, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12190142765984069, 0.2289182634891621, 0.1568881266140275, 0.12923335477751807, 0.11232030362562362, 0.08694711413764367, 0.20170900186534224, 0.10947958742468833, 0.13437093660071475, 0.030793991316410918, 9.999999999998899e-05, 0.0016421130133980055, 0.04042936720599355, 0.017491213534143624, 0.02060182336802041, 9.999999999998899e-05, 0.01935903268962047, 0.02709932028808748, 0.08502795495981463, 0.0851255859276171, 0.08980815108840523, 0.09855305120349966, 0.08101944684321749, 0.07412381479518404, 0.06737293901834185, 0.09602502291922133, 0.07726393575557644, 0.119917768049285, 0.11661172617252613, 0.1157548719356366, 0.17447262724256085, 0.17738855680797005, 0.09103227696627603, 0.11420206329748472, 0.1038083389399872, 0.08106631292142663, 0.0706437491323546, 0.05384152193749436, 0.05389785106000522, 0.10412934612051816, 0.0777347118199575, 0.06699078797825586, 0.07256070803654968, 0.04472436396672552, 0.07000887011661938, 0.17319687866318123, 0.0628129088929702, 0.1493056003455815, 0.11734998748103076, 0.10190237070915231, 0.08003341309722434, 0.12245976138762271, 0.09826788209602877, 0.08902628122675849, 0.16153419181663298, 9.999999999998899e-05, 9.999999999998899e-05, 0.15524598289730906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10980020806332391, 0.08877745355158062, 0.07670788677944451, 0.1811297514570771, 0.13477949224543795, 0.08908482739420209, 0.12694548318668553, 0.09581959083126734, 0.1578041287294666, 0.03600096115587692, 0.07083145895413578, 0.03906436585781303, 0.08235521353010611, 0.028469755077952685, 0.045511073114331335, 0.07271401825221713, 0.08082520176492758, 0.10400925469410216, 0.15334571245298734, 0.12017502569002791, 0.14763022729669195, 0.15077109284421253, 0.12979968411532605, 0.1324899137430906, 0.13347159480963988, 0.1485059438743398, 0.12716853707000897, 0.030421870838363563, 0.024532055393233554, 0.02697559869491739, 0.052289814102170595, 0.023741074240475446, 0.039419255942346854, 0.0189198610045902, 0.029082747934564446, 0.03566704513641472]}, "mutation_prompt": null}
{"id": "dc016b2c-a183-445a-aacb-6cd2f850cd96", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation (Modified for faster convergence)\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                fitness_diff = np.abs(pbest_fitness - np.mean(pbest_fitness))\n                self.mutation_rate = self.base_mutation_rate + 0.5 * (np.sum(fitness_diff) / np.max(fitness_diff))\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Implementing a dynamic mutation strategy based on individual fitness to adapt mutation rates locally for faster convergence.", "configspace": "", "generation": 75, "fitness": 0.30946699655782156, "feedback": "The algorithm EnhancedOppositionBasedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "8dc1a640-d2a8-40d0-88c4-54f1185fb876", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Boundary Adjustment\n            if t % (self.budget // 5) == 0:  # Adjust boundaries every 20% of the budget\n                boundary_shift = 0.5 * np.sin((t / self.budget) * np.pi) * 5.0\n                swarm = np.clip(swarm, self.lower_bound - boundary_shift, self.upper_bound + boundary_shift)\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Implementing a dynamic boundary adjustment mechanism to enhance exploration and convergence speed.", "configspace": "", "generation": 76, "fitness": 0.30946699655782156, "feedback": "The algorithm EnhancedOppositionBasedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "48d09747-503d-49da-bbf4-cb94af21dd11", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress to accelerate convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "a954510f-4298-458f-b22a-ab11e8f33ded", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress to accelerate convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "34a439d9-381f-4b7f-8769-e347e4fa3cdd", "solution": "class FastConvergingOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n        self.mutation_rate_history = [self.base_mutation_rate]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation with Individual Fitness Improvement\n            improvement_rate = (pbest_fitness - np.min(pbest_fitness)) / pbest_fitness\n            self.mutation_rate = np.mean(improvement_rate) * 0.5\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n            self.mutation_rate_history.append(self.mutation_rate)\n\n        return gbest_fitness", "name": "FastConvergingOppositionBasedDynamicInertiaWeightPSO", "description": "Implement a novel adaptive mutation strategy based on individual fitness improvements, dynamically adjusting mutation rates to amplify exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('Negative dimensions are not allowed').", "error": "ValueError('Negative dimensions are not allowed')", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {}, "mutation_prompt": null}
{"id": "b4a0d4d3-a69f-4b08-86ad-acb55ed84018", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress to accelerate convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "a750c01b-c432-4cef-9019-2e25119e91e2", "solution": "class EnhancedAdaptiveMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Adaptive Mutation\n            mutation_rate = self.base_mutation_rate + 0.1 * np.log(1 + t)  # Adaptive mutation rate\n            mutation_indices = np.random.choice(self.dim, int(self.dim * mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedAdaptiveMutationPSO", "description": "Introducing adaptive mutation based on individual fitness progress to enhance exploration-exploitation balance and accelerate convergence.", "configspace": "", "generation": 81, "fitness": 0.13633866741840103, "feedback": "The algorithm EnhancedAdaptiveMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.24835992701988674, 0.3161759954750649, 0.2368410360679587, 0.22091731392693403, 0.2288676819468044, 0.24365138434815725, 0.2468792572498517, 0.22960619589065778, 0.25007464021597114, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05081224957521535, 0.061974168006780905, 0.06008118378981786, 0.07552227972530401, 0.05673950050685139, 0.05488149584936308, 0.05654425907408822, 0.05035408927430052, 0.0431192423132829, 0.04635557597250173, 0.0373966132427771, 0.05725582066640911, 0.04451434556386524, 0.038199367922352345, 0.03844521273104762, 0.035815927949558124, 0.05814092016117989, 0.056615838289559184, 0.9965010657976063, 0.9973352984064412, 0.9977202553317366, 0.9963247432124066, 0.9958059902619487, 0.9949445169560264, 0.9949613715647698, 0.9968681098294779, 0.9957994689094347, 0.11894142987648193, 0.1099115249273771, 0.16152231345260037, 0.11371595700256953, 0.1448298382664307, 0.09785418649567035, 0.08553772394904258, 0.06875930664257834, 0.11236887314503352, 0.123372470836419, 0.13908933652034738, 0.15074033061396452, 0.12579925791170044, 0.10765079030207636, 0.11297317992367584, 0.15322961962472148, 0.11378331100076011, 0.09447498925346831, 0.03505094863026348, 0.08322167099075539, 0.028198537439021898, 9.999999999998899e-05, 0.04771207519782783, 0.07985635480900488, 0.0027231006567272065, 0.0049564240102106805, 0.06494060053314621, 0.019211879789843067, 0.05119188639236505, 0.05095404409452953, 0.023081410575247707, 0.06699554180955658, 0.09529795890746062, 0.031360382287557886, 0.009806411986410746, 0.07676864462179778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05134482051633804, 0.06826232466091875, 9.999999999998899e-05, 9.999999999998899e-05, 0.028239507356067617, 0.02691142051055717, 0.006953881688930963, 0.0168861339813553, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0033383810276748083, 0.028256871652943993, 9.999999999998899e-05, 0.010594256378837819, 0.002759917450608884, 9.999999999998899e-05, 9.999999999998899e-05, 0.008293170351575063, 0.012423396565178102, 0.22800608797243205, 0.26977874869692575, 0.2346381574821489, 0.20124368124256975, 0.24359229879660305, 0.21880625585888358, 0.2467759658330142, 0.23861062290398538, 0.25907197660189396, 0.05266188564805374, 0.032917893254581054, 0.04581158036284727, 0.048013321073538506, 0.05420841122641362, 0.05477629396754058, 0.046353742528391195, 0.08279119012244862, 0.0590548280563129, 0.11478650343333907, 0.11524446536459398, 0.10582695817600052, 0.12449016229904808, 0.11176652260414743, 0.11420721667680878, 0.10709602071745705, 0.12903625759445025, 0.1273765620680104, 0.1870072557816842, 0.1782889568940833, 0.16921568056902325, 0.18866825858565706, 0.1565522114919975, 0.17873366437312144, 0.16987377015303373, 0.19384704227671923, 0.14462659626523766, 0.13014648403477935, 0.12187103524246468, 0.11764348093939969, 0.15308401543612526, 0.11412482987637318, 0.11342019794713065, 0.137744642985405, 0.12671828724730472, 0.1380568530606492, 0.158654368647155, 0.1459287217826064, 0.16871005150201313, 0.16762605353709426, 0.1856656601434915, 0.15794237969481473, 0.1506044644858846, 0.15355845215526154, 0.18437498109546224, 0.1586638192800257, 0.16135110670135278, 0.15724975263045748, 0.15957952870519954, 0.1684252626539996, 0.15521903166235118, 0.1545982760379524, 0.14546122159781294, 0.16144466903303767, 0.1375512031977547, 0.1432978376113453, 0.17860473363118468, 0.13707800289214134, 0.170247334479663, 0.14304409256423056, 0.1623897733455162, 0.19787080901098697, 0.14117212311272742, 0.14380877968765649, 0.11097061460292312, 0.2822068944979629, 0.24234016693346772, 0.15136084791025328, 0.1603755336111211, 0.12315023540570214, 0.1497840545253839, 0.10157141090356758, 0.18828998354295723, 0.162703079977645, 0.16090245068587106, 0.1564122532451504, 0.1541341533551307, 0.1566186746206527, 0.16239887705515044, 0.1703624427498166, 0.18147568249663404, 0.053420298741368555, 0.05515409318158804, 0.053077454581687555, 0.05933207094396198, 0.06291286477433256, 0.06254104377298209, 0.062456076278775474, 0.050035514189631924, 0.05452728754607539]}, "mutation_prompt": null}
{"id": "5ca74091-f62e-43ec-a8b2-70e4a816abcb", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress to accelerate convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "cd3db033-8d6f-4d33-94e5-96584dbb94c8", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation based on Velocity Progress\n            if t > 1:\n                velocity_progress = np.linalg.norm(velocity) / np.linalg.norm(swarm)\n                self.mutation_rate = self.base_mutation_rate + 0.5 * velocity_progress\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic adaptation of the mutation rate based on the velocity progress to enhance the convergence speed.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {}, "mutation_prompt": null}
{"id": "d98d1683-3406-4513-baed-a0da36e1dd0c", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress to accelerate convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "50a99d90-9465-4ce7-872e-595970ee3827", "solution": "import numpy as np\n\nclass FastEnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n        self.chaos_param = 0.5\n\n    def chaos_map(self, x):\n        return 4.0 * x * (1.0 - x)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation with Chaos\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = max(0.1, min(0.9, self.mutation_rate + self.chaos_param * self.chaos_map(improvement_rate)))\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "FastEnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Implementing a dynamically updating mutation rate combined with a chaotic map to enhance exploration and convergence speed.", "configspace": "", "generation": 85, "fitness": 0.30946699655782156, "feedback": "The algorithm FastEnhancedOppositionBasedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "0fb7257a-9f0d-4916-9d4c-61571089c23e", "solution": "class SelfAdaptiveInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        inertia_weight = np.full(self.dim, self.inertia_max)\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = inertia_weight[:, None] * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            inertia_weight = self.inertia_min + (np.sum(pbest_fitness) / (self.dim * np.sum(pbest_fitness) + 1e-10)) * (self.inertia_max - self.inertia_min)\n\n        return gbest_fitness", "name": "SelfAdaptiveInertiaWeightPSO", "description": "Implementing a self-adaptive inertia weight mechanism that dynamically adjusts the inertia weight based on the population's performance to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('invalid index to scalar variable.').", "error": "IndexError('invalid index to scalar variable.')", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {}, "mutation_prompt": null}
{"id": "503d70f7-4ec0-4981-b1f5-1f300767e395", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress to accelerate convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "6086df9d-7527-4e69-ae35-ea278ed86129", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Novel Adaptive Mutation Strategy\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            mutation_swarm = np.copy(swarm)\n            for i in range(len(mutation_indices)):\n                candidate = np.copy(swarm[i])\n                chosen_indices = np.random.choice(self.dim, 2, replace=False)\n                trial_vector = swarm[chosen_indices[0]] + np.random.uniform(-1, 1) * (swarm[chosen_indices[1]] - swarm[i])\n                for j in range(self.dim):\n                    if np.random.uniform() < self.mutation_rate:\n                        candidate[j] = trial_vector[j]\n                mutation_swarm[i] = candidate\n            \n            mutation_fitness = np.apply_along_axis(func, 1, mutation_swarm)\n            update_indices = mutation_fitness < pbest_fitness\n            pbest[update_indices] = mutation_swarm[update_indices]\n            pbest_fitness[update_indices] = mutation_fitness[update_indices]\n\n            if np.min(mutation_fitness) < gbest_fitness:\n                gbest = mutation_swarm[np.argmin(mutation_fitness)]\n                gbest_fitness = np.min(mutation_fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "AdaptiveMutationDynamicInertiaWeightPSO", "description": "Introducing a novel adaptive mutation strategy inspired by the concept of differential evolution to enhance exploration-exploitation balance and accelerate convergence.", "configspace": "", "generation": 88, "fitness": 0.20419378894079984, "feedback": "The algorithm AdaptiveMutationDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.23.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9450725124204589, 0.3667924174868644, 0.6574460045933119, 0.40252139174804147, 0.4061119591971657, 0.16337653722702383, 0.9303877632051298, 0.41007450028519143, 0.1985934922871283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.8871706156045819, 9.999999999998899e-05, 0.13052945737945354, 9.999999999998899e-05, 0.8421108161116877, 0.5808308362263319, 0.14430910215023285, 0.1197728905971831, 0.01830198479545564, 0.10423520318156987, 0.06447673211884453, 0.08458493225527941, 0.09278830151967288, 0.0796415272653821, 0.16479764175565792, 0.06647663096414347, 0.044972256218154816, 0.08390115790342367, 0.08786109016892063, 0.07759560466186688, 0.06770618305388598, 0.1128203650865115, 0.11190558062017242, 0.05777522166626137, 0.9899265834031328, 0.9857269683369055, 0.9941406038463902, 0.9757566574460449, 0.9932343219909296, 0.9865900637269313, 0.9788806582721007, 0.9958741668433594, 0.9460103674397337, 0.1787693480227086, 0.18205068396367163, 0.12541968730437636, 0.034528756944200545, 0.17259731049139815, 0.06116117260560716, 0.1756961810383958, 0.25123659293703926, 0.235333714072664, 0.20023053731433071, 0.07322287681875983, 0.11193607332326283, 0.13960899682765415, 0.10451960700381546, 0.11107210905975662, 0.15152457699873956, 0.17637418353606504, 0.14842266791138403, 0.16414817089528588, 0.13085631356086547, 0.16981294431546357, 0.16099185094895274, 0.13017183293800916, 0.10369494113017386, 0.13596399487038635, 9.999999999998899e-05, 0.1399902596403101, 0.1538299362875858, 0.12034199961340131, 0.14202277512126515, 0.1249971333810923, 0.08779401416808419, 0.14093207575142275, 0.1303251434148438, 0.09424640764953873, 0.12338222808916177, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043923096096221914, 0.0830815524557158, 0.0660446973824097, 0.0021079128775680633, 0.01787458745500914, 0.09751197360931496, 0.07567082412870951, 0.02873811482491495, 0.2702117857070273, 0.03300756344796829, 9.999999999998899e-05, 0.11869617750958839, 0.046595781354400234, 0.30392396847718317, 9.999999999998899e-05, 9.999999999998899e-05, 0.11923887569338731, 0.01525491023384673, 0.17157538105398285, 0.020635036203681234, 9.999999999998899e-05, 0.2694802831973506, 9.999999999998899e-05, 0.07494164368638723, 0.06393235905086203, 0.05108569561632992, 0.3733853594757459, 0.47061635320807516, 0.4818897177576331, 0.5041830080784735, 0.5117663238218003, 0.1169860170774708, 0.44720977794790984, 0.5682553682191187, 0.3926624831260487, 0.0916594441883044, 0.08341183872238855, 0.0463404495422961, 0.06867724380908968, 0.07821075448476145, 0.1169502921788741, 0.09092412206741263, 0.10668836217124211, 0.06350748915749793, 0.17685581714583254, 0.19879177653324642, 0.2173186708841932, 0.17978820055054856, 0.1568160345933085, 0.24538312277138452, 0.17258917849204958, 0.16683572796012336, 0.23548550151677405, 0.375068113005515, 0.28798180444389476, 0.13923811521360618, 0.2797316444290121, 0.16912870244757305, 0.36375679244192183, 0.17402829026163413, 0.3308811454864188, 0.2190094467953535, 0.1397310549867269, 0.2447914239695247, 0.11687143867718319, 0.1762122870830546, 0.1599347657159471, 0.23057925246328903, 0.16253490726385156, 0.13463865508248363, 0.10269934482799692, 0.2141688045862331, 0.17474208083188403, 0.21117854201004727, 0.19689403184778342, 0.16314171658939391, 0.1984551513362669, 0.23671833205550508, 0.17050099785358286, 0.19754026472077435, 0.20425784256421664, 0.17052567818471687, 0.20047041462264092, 0.18280527093488463, 0.17285737745456864, 0.20236319043677564, 0.22758018819154358, 0.17728924693415626, 0.18595184523278407, 0.15989785412721924, 0.15908990833162184, 0.15908004050311353, 0.6164884099694165, 0.20232409601101076, 0.17029765584683176, 0.10868912220113636, 0.11526168050664742, 0.16276558819309062, 0.5416269463739871, 0.11131783322544375, 0.29358341344252414, 0.22152839948694014, 0.2071571479292229, 0.20978954158266827, 0.11227826178009837, 0.10494254838756278, 0.11315107600563801, 0.16716828383892302, 0.17366067999554724, 0.19741352239994525, 0.1834270948359491, 0.23211337686776545, 0.20409264653253534, 0.17209317954676695, 0.19868701077390216, 0.20233853648629552, 0.0931057809361251, 0.07009003071440079, 0.09285889291003369, 0.04114421449375383, 0.0777791833549647, 0.07469065020840404, 0.13725450654661076, 0.07348234520152508, 0.0738219361287451]}, "mutation_prompt": null}
{"id": "9a0a174a-2140-4d78-9da8-1d3a91cf1efc", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress to accelerate convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "a59cd02e-e96f-4bf9-a01b-182592dc38d9", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress to accelerate convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "3edcb2ca-2bfd-4b7b-9479-e36bd124551a", "solution": "class FastAdaptiveOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation with Adaptation\n            diversity = np.std(swarm, axis=0)\n            self.mutation_rate = 0.1 + 0.4 * (1 - np.mean(diversity) / 10.0)\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "FastAdaptiveOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a self-adaptive mechanism to adjust the mutation rate based on the population diversity to enhance convergence speed.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('Negative dimensions are not allowed').", "error": "ValueError('Negative dimensions are not allowed')", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {}, "mutation_prompt": null}
{"id": "ff343f35-d734-42b0-b8be-3cd501013476", "solution": "class DynamicMutationEnhancedOppositionBasedDynamicInertiaWeightPSO(EnhancedOppositionBasedDynamicInertiaWeightPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.base_mutation_rate = 0.05  # Modified mutation rate\n        self.mutation_rates = np.full((self.dim, self.dim), self.base_mutation_rate)\n    \n    def __call__(self, func):\n        # Existing code\n        for t in range(1, self.budget + 1):\n            # Existing code\n            \n            # Dynamic Mutation Enhancement\n            for i in range(self.dim):\n                if fitness[i] < pbest_fitness[i]:  # Adapt mutation rate based on individual particle progress\n                    self.mutation_rates[i] += 0.02  # Increase mutation rate for better performing particles\n                else:\n                    self.mutation_rates[i] -= 0.01  # Decrease mutation rate for worse performing particles\n                self.mutation_rates[i] = np.clip(self.mutation_rates[i], 0.01, 0.1)  # Clip mutation rate within a range\n                \n                mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rates[i]), replace=False)\n                swarm[i, mutation_indices] = np.random.uniform(-5.0, 5.0, len(mutation_indices))\n            \n            # Existing code", "name": "DynamicMutationEnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on individual particle progress to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'fitness' is not defined\").", "error": "NameError(\"name 'fitness' is not defined\")", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {}, "mutation_prompt": null}
{"id": "bb3b80b4-dd3e-4df3-8426-756f878e4662", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress to accelerate convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "f615edcb-122c-4aef-b416-345c47197f36", "solution": "class EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning on personal best positions\n            opposite_pbest = 2 * pbest - swarm\n            opposite_pbest_fitness = np.apply_along_axis(func, 1, opposite_pbest)\n            update_indices = opposite_pbest_fitness < pbest_fitness\n            pbest[update_indices] = opposite_pbest[update_indices]\n            pbest_fitness[update_indices] = opposite_pbest_fitness[update_indices]\n\n            # Opposition-based Learning on global best position\n            opposite_gbest = 2 * gbest - swarm\n            opposite_gbest_fitness = np.apply_along_axis(func, 1, opposite_gbest)\n            update_indices = opposite_gbest_fitness < pbest_fitness\n            pbest[update_indices] = opposite_gbest[update_indices]\n            pbest_fitness[update_indices] = opposite_gbest_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Implementing opposition-based learning on both personal best and global best positions to enhance exploration and exploit the search space effectively for faster convergence.", "configspace": "", "generation": 94, "fitness": 0.29562738634419544, "feedback": "The algorithm EnhancedOppositionBasedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.28.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.8932415396817548, 0.8819053925769933, 0.8747963515726831, 0.875249564850758, 0.8682136909553978, 0.9037578389316507, 0.8540012326716605, 0.8810330234455348, 0.9015940867576494, 0.7414229931661882, 0.7629672931781581, 0.8236522428732906, 0.8154580900837808, 0.7763903210393377, 0.8032731025373595, 0.7766350432492435, 0.792361325231274, 0.8034068755930791, 0.11849693684551343, 0.1314060835883496, 0.1186434454048102, 0.14473303701116313, 0.14111532549256423, 0.1190846026748088, 0.16318305422664703, 0.09332067728339022, 0.15031232839479236, 0.10973053378940334, 0.10794212177591778, 0.11624604527026727, 0.0627201594602671, 0.1743231753268335, 0.08264492792977618, 0.09316703850576502, 0.11852014463313187, 0.16115192670199852, 0.9913671885829423, 0.993087941735471, 0.9885489928068761, 0.9954151692277696, 0.9901792757014666, 0.9910355852278354, 0.9930274874745432, 0.9964443664197926, 0.9853391641353747, 0.6567524787038432, 0.6025520170827221, 0.7573868719320161, 0.5253435825957958, 0.6807279271885089, 0.6452049243982751, 0.5801696269820975, 0.6362286075899699, 0.602248869806984, 0.2262311269096925, 0.21350641860280684, 0.21767313461017512, 0.18536373957399688, 0.18992342599773215, 0.1748950810257205, 0.17421816705483184, 0.19866321017705746, 0.23768484001890133, 0.11646208676733727, 0.2977567836333551, 0.1878069106267013, 0.17706418974636418, 0.18389328062936516, 0.19860844981638515, 0.19597173244307942, 0.1763348566288503, 0.19472602397967953, 0.2826778045791669, 0.16717915807288186, 0.19509061825335072, 0.1876201122048099, 0.18933360772043695, 0.1914786743329766, 0.18711230500780096, 0.2050248431137094, 0.12713276807896878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006381993759329241, 9.999999999998899e-05, 0.07887899547942745, 9.999999999998899e-05, 0.008898136034350301, 0.04031342824163353, 0.05268953211598215, 0.03780394015386079, 0.08928001059205892, 9.999999999998899e-05, 0.027029481180515513, 0.08818114846234548, 0.06462018821261661, 0.0782248884768223, 0.2570710678022814, 0.021393407279009957, 0.08467244858722567, 0.03992078485739581, 0.03791143807467867, 0.1425401027617088, 0.08995208113125319, 0.018417522607520054, 0.029084747209073614, 0.03786571083025336, 0.21734736933118137, 0.03339605413412716, 0.11151940957391449, 0.13049569033463537, 0.18955934905824612, 0.14339534118269115, 0.1940469135262558, 0.07466330810272626, 0.59466981058307, 0.5847346657564103, 0.540169851140093, 0.588056114847508, 0.5130445065563325, 0.528899664486886, 0.5204521975292815, 0.5481339946132879, 0.5242956465192636, 0.09241034439433038, 0.08584766066672112, 0.09910404642390636, 0.09740612514664959, 0.09342119596637799, 0.09331714469287367, 0.07700962679413059, 0.1425456041195977, 0.07623349874436358, 0.14497121170467853, 0.16121110503947145, 0.16298637828700502, 0.22745159274020255, 0.15488298876952722, 0.18024433711544807, 0.17667354715010553, 0.19219751024942655, 0.23855025275670283, 0.33656924128075727, 0.5267677441786077, 0.2301058235556941, 0.41702278736156584, 0.22140564892261838, 0.17532922442869459, 0.20611194807283595, 0.4128273601640262, 0.46543449132908976, 0.23114495101010735, 0.20527001484666296, 0.19058305656058572, 0.32770315757262947, 0.19841033461273705, 0.2213455246777174, 0.16701336320826998, 0.14807161420144388, 0.19815389306404407, 0.19334041034268434, 0.17342183849476933, 0.23146188905521836, 0.28789864489273886, 0.1699711726441201, 0.1866131951437675, 0.19857638994918492, 0.21385954152318687, 0.22105003109313615, 0.20447100623091385, 0.2168746113443365, 0.24791971090195697, 0.2513854121990572, 0.1853236088007414, 0.21235650179323595, 0.19533008809194063, 0.2020892588975004, 0.19211064673022749, 0.1580976204005332, 0.8846540515662011, 0.15777616857796561, 0.8773389715153583, 0.20118925052166892, 0.8478388531797422, 0.16705698734351915, 0.12852060069429427, 0.15408236618821158, 0.3103480990361587, 0.20063925225990864, 0.2626588064968447, 0.472733291843339, 0.2081455302992372, 0.21264710734418313, 0.11141416857173758, 0.1623335258310834, 0.11252174143810134, 0.2041222722964492, 0.18895467393516785, 0.18173647452065878, 0.20755081654575724, 0.1927104756721587, 0.1929047473700366, 0.1992273716641415, 0.1817681071952233, 0.18181459807421885, 0.08242160522882136, 0.14110719964907203, 0.07754065860604309, 0.088927216626566, 0.08375412950492023, 0.09830628035683986, 0.1248221740035953, 0.07587577320285199, 0.06688023381242114]}, "mutation_prompt": null}
{"id": "7ccacee0-27aa-47be-9222-8ec9e2a695ae", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Novel Particle Regeneration based on Fitness Improvement\n            regeneration_indices = np.argsort(pbest_fitness)[:self.dim // 2]\n            regenerated_particles = np.random.uniform(-5.0, 5.0, (self.dim // 2, self.dim))\n            swarm[regeneration_indices] = regenerated_particles\n            pbest[regeneration_indices] = regenerated_particles\n            pbest_fitness[regeneration_indices] = np.apply_along_axis(func, 1, regenerated_particles)\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a novel particle regeneration strategy based on fitness improvement to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 95, "fitness": 0.09373350923260722, "feedback": "The algorithm EnhancedOppositionBasedDynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.14.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.12887564476698476, 0.1694518658085037, 0.1583127408778302, 0.17385359662635524, 0.14826801232827402, 0.16938366603089505, 0.16033909606110897, 0.1506533206759486, 0.16679011440181257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04368950365414925, 0.03530645807791666, 0.03969959404520562, 0.023700779928694127, 0.029903478314777354, 0.02513907520892933, 0.024332382651535256, 0.030706084858297067, 0.04150638926013872, 0.02874504465114025, 0.03253637428622991, 0.02133055829985331, 0.021195978902956436, 0.03740406667264795, 0.033984129944832464, 0.02510741102573988, 0.04397271185046536, 0.050105592917539576, 0.929546296788325, 0.9858541008409752, 0.13064928112536467, 0.13261471837825534, 0.16951490382852752, 0.9801501539646469, 0.9866225203801204, 0.17081184238777436, 0.12216912844096406, 0.040004424583399145, 0.05899260931334671, 0.03790667866044917, 0.036456845810573624, 0.04452781965740382, 0.04824301918940255, 0.040445337533176806, 0.067277874682101, 0.06388677362236028, 0.09351192332852731, 0.11877716145657236, 0.12722360690589107, 0.0955745498881575, 0.07160851641604482, 0.0732851483461402, 0.08312084527956398, 0.07746588552729972, 0.11557326549595526, 9.999999999998899e-05, 9.999999999998899e-05, 0.003807213807132781, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07001390165726529, 0.02126187438322702, 0.0073605337881296196, 9.999999999998899e-05, 0.0017191462751962039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015279583088816051, 0.01486516527391235, 0.0023746801972550635, 0.000587805502324068, 9.999999999998899e-05, 0.020106742843686187, 0.023831165120905995, 0.03399171701296877, 0.03578516644585639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011516228087271596, 9.999999999998899e-05, 9.999999999998899e-05, 0.18035754949259786, 0.15927579505373635, 0.18080619646342788, 0.1488403591490951, 0.1882979553310653, 0.16422789719737652, 0.17000260038837367, 0.15898983679698653, 0.17766044896248456, 0.02665689919515246, 0.037187049832677066, 0.030906985688604283, 0.03492009761355419, 0.02806170259413643, 0.045010247589617025, 0.03981589778971251, 0.0314199876098783, 0.034025471278571806, 0.1397813163321383, 0.13132068602133062, 0.12632677349987043, 0.12879784071260747, 0.1178491049405368, 0.13063573784039295, 0.11835568088910509, 0.10476274016287113, 0.12072062732177946, 0.14884192062554213, 0.14549052516412775, 0.1500956735240836, 0.1523491496666849, 0.14478827944328898, 0.14918516004469162, 0.14761491873183674, 0.17381462273537163, 0.14977988772353967, 0.10016528848694473, 0.08081965804733482, 0.1059932030529035, 0.08765656587849957, 0.1206936202570198, 0.0996344831722421, 0.08862845519983387, 0.0966359199249246, 0.10168627289925591, 0.14376011146635337, 0.12917991661811445, 0.12922762149667755, 0.13310407805867586, 0.14901926136533317, 0.1691044627836531, 0.15308946829174186, 0.13818686723762674, 0.13327497134906496, 0.11524762549140866, 0.12657323383460828, 0.11916467532009678, 0.1366776852264433, 0.13534319623168978, 0.13094513373473105, 0.12666172286064536, 0.13693447486638566, 0.09799338688743009, 0.11511792966398426, 0.16611811595711, 0.14761730436163234, 0.16439889131178753, 0.14244587091197058, 0.13479034982396332, 0.13721443136370903, 0.1613728854941372, 0.14895656663799128, 0.1354947187481137, 0.15923340139360642, 0.11397159231722565, 0.1587166166619225, 0.1294273993667815, 0.12603097469934388, 0.1325954779696391, 0.10692737462131185, 0.15531688954505518, 0.17290797523304646, 0.17341501427257644, 0.16181766620954918, 0.16587433473776714, 0.1846693690195741, 0.15954824001254342, 0.1644065208937956, 0.17264744458809977, 0.19141733372363967, 0.04645498665451431, 0.04254546693381889, 0.040152604783871504, 0.04518560090102597, 0.03733937068714566, 0.053622882864900356, 0.035566413834580035, 0.04212971535847576, 0.04650651760083546]}, "mutation_prompt": null}
{"id": "d4f6c6a1-8dcc-4f13-94a6-f4b4353d04b8", "solution": "class EnhancedDynamicPopulationSizePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n        self.min_particles = 10\n        self.max_particles = 100\n        self.particle_ratio = (self.max_particles - self.min_particles) / self.budget\n\n    def __call__(self, func):\n        num_particles = self.min_particles\n        swarm = np.random.uniform(-5.0, 5.0, (num_particles, self.dim))\n        velocity = np.zeros((num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((num_particles, self.dim))\n            r2 = np.random.random((num_particles, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(num_particles, int(num_particles * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n            if t % (self.budget // 10) == 0:  # Update population size every 10% of the budget\n                num_particles = max(self.min_particles, min(self.max_particles, num_particles + int(self.particle_ratio)))\n                swarm = np.vstack((swarm, np.random.uniform(-5.0, 5.0, (num_particles - swarm.shape[0], self.dim)))\n                velocity = np.vstack((velocity, np.zeros((num_particles - velocity.shape[0], self.dim)))\n                pbest = np.vstack((pbest, swarm[-(num_particles - pbest.shape[0]):]))\n                pbest_fitness = np.apply_along_axis(func, 1, pbest)\n\n        return gbest_fitness", "name": "EnhancedDynamicPopulationSizePSO", "description": "Implement a dynamic population size strategy to adapt the number of particles based on the fitness progress for faster convergence.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 54, 17, '                velocity = np.vstack((velocity, np.zeros((num_particles - velocity.shape[0], self.dim)))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 54, 17, '                velocity = np.vstack((velocity, np.zeros((num_particles - velocity.shape[0], self.dim)))\\n'))", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {}, "mutation_prompt": null}
{"id": "59540ebb-210b-4653-b40b-1a60f696e479", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress to accelerate convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
{"id": "5a6defa6-30ac-4099-bd0d-c10422778e76", "solution": "class AdaptiveInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            # Adaptive Inertia Weight\n            w = self.w_min + np.exp(-0.1 * t) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "AdaptiveInertiaWeightPSO", "description": "Implement adaptive inertia weight based on the fitness progress to dynamically adjust the exploration and exploitation trade-off for faster convergence.", "configspace": "", "generation": 98, "fitness": 0.2291193870094071, "feedback": "The algorithm AdaptiveInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.25.", "error": "", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.7146320903090573, 0.8936881694380752, 0.9590793538039982, 0.3528249381479488, 0.381671038170303, 0.9586461099010044, 0.3776978832050115, 0.9662967084751046, 0.9536703320725953, 0.1749541979562611, 9.999999999998899e-05, 0.058433598629980765, 0.11042392010237234, 0.928407572596574, 0.7040974327777998, 9.999999999998899e-05, 0.063182318875171, 0.16400689056073914, 0.08817663587530411, 0.1934093064385527, 0.1450229359116525, 0.12749586158019777, 0.13115797360584092, 0.11811673196383488, 0.1087209387355953, 0.04133268044657712, 0.13588683618717312, 0.11814944330527744, 0.03730138464601951, 0.08565090768553851, 0.09771156771283163, 0.03726666188635441, 0.11930470389550407, 0.07826324055244838, 0.09722541014304154, 0.0967610966184409, 0.9976038754188041, 0.9968644940877436, 0.9965481961200092, 0.9976534809284474, 0.9943094340328782, 0.9968000763282723, 0.993018481532568, 0.997218182641867, 0.997045652932289, 0.29012100296297494, 0.6109242651035935, 0.23541556532990393, 0.03089972612168712, 0.25502744342219263, 0.10841165719928592, 0.11080151838680485, 0.42504277319805606, 0.2768630631448473, 0.13968284632281125, 0.2150601450165064, 0.13998392252972713, 0.3427014584735183, 0.38850042044979605, 0.24022614424511324, 0.1474454697129347, 0.2329162623200518, 0.2462751097451239, 0.27137415355786876, 0.18354849344023427, 0.07617545496291545, 0.11653436251159333, 0.14433134647490642, 0.15384598031113783, 0.13353391877653353, 0.13468907041579692, 0.15417369337669629, 0.06934632944905827, 0.03304943073395139, 0.17833268933719937, 0.13400465136637774, 0.11426873429394369, 0.13245820922941676, 0.16750300770033477, 9.999999999998899e-05, 0.13845314491405458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03186763226859457, 9.999999999998899e-05, 9.999999999998899e-05, 0.019622035091495627, 0.05799279469954255, 0.02752444831073131, 0.07769611256810005, 9.999999999998899e-05, 0.034100522763844454, 0.0024460092725048233, 0.010494226690087483, 0.07937301103620997, 0.43744110097053635, 0.04038832730444808, 0.035250918999032765, 0.14460985770172197, 0.009201181822879545, 0.1569873012096077, 0.03485776921764194, 9.999999999998899e-05, 0.07336934291435704, 0.07565806326368107, 9.999999999998899e-05, 0.12333772420136135, 0.021998855550064533, 0.08617777853155606, 0.010930166062069313, 0.12989062395990258, 9.999999999998899e-05, 0.07570423727688935, 0.47923400469147215, 0.48018778271446017, 0.4646513347206561, 0.2366271581104864, 0.1666631930607202, 0.5462908139191007, 0.2478395181490337, 0.5688542591012107, 0.4899447691772135, 0.0915575715359166, 0.08059908652520664, 0.1192628965768614, 0.09610881244776392, 0.07810256844367991, 0.08747286465527215, 0.10165890831192537, 0.07259701413949238, 0.13265893142472995, 0.15546316839162777, 0.14647305440149883, 0.22038708797909068, 0.22233941273582936, 0.35666336242516383, 0.1952052792042075, 0.49974736352325744, 0.20512076862319628, 0.3146462056495195, 0.18149509464784896, 0.2671369360894712, 0.16268925993149008, 0.23638135675848848, 0.1864155825298065, 0.2695916165939677, 0.23521136406298992, 0.15947973584188424, 0.20514377702693343, 0.1996296998380368, 0.25325469385290256, 0.14362310494919672, 0.19102383885152463, 0.22223781463418302, 0.19825544902020253, 0.1618824056776259, 0.10964075252002037, 0.11294534594718153, 0.25145023419193724, 0.20876816857442237, 0.20686116673367572, 0.1931876630200725, 0.2118643334145497, 0.16450714211325412, 0.23131659620104805, 0.18874495983744732, 0.213316615637412, 0.20739989998968378, 0.23062885745081196, 0.1930293627688281, 0.18187595233378606, 0.1979560167407418, 0.21991867646264895, 0.191280131032884, 0.19853936504035474, 0.19023126030702564, 0.1601321698003183, 0.9051006990695769, 0.1728498757420348, 0.9615591601155399, 0.20202863021369843, 0.11157347375401838, 0.10894392690058208, 0.11783207622181258, 0.1041008047881623, 0.1548431302839106, 0.11227585278444463, 0.28268521053139906, 0.28513712929148083, 0.13477512137743908, 0.20290259630778362, 0.3091404860225232, 0.10512143784204131, 0.2063621366437839, 0.21979558945412536, 0.21264469910168804, 0.192212956292944, 0.19522453710400178, 0.2236307925994765, 0.20915930032514318, 0.193279204587947, 0.20765429318100725, 0.18073004585633567, 0.08853109298139139, 0.07198402748066368, 0.0785073146823172, 0.10557152276172788, 0.10710793786954786, 0.08487364176611245, 0.10334049826309033, 0.09088373342560385, 0.09795081488645896]}, "mutation_prompt": null}
{"id": "e8e14f5e-0eb1-4198-a743-f80efbd5d031", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDynamicInertiaWeightPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.base_mutation_rate = 0.1\n        self.mutation_rate = self.base_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest = pbest[np.argmin(pbest_fitness)]\n        gbest_fitness = np.min(pbest_fitness)\n\n        w = self.w_max\n\n        for t in range(1, self.budget + 1):\n            r1 = np.random.random((self.dim, self.dim))\n            r2 = np.random.random((self.dim, self.dim))\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n            swarm += velocity\n\n            fitness = np.apply_along_axis(func, 1, swarm)\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            # Opposition-based Learning\n            opposite_swarm = 2 * gbest - swarm\n            opposite_fitness = np.apply_along_axis(func, 1, opposite_swarm)\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_swarm[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n\n            # Dynamic Mutation\n            if t % (self.budget // 5) == 0:  # Adjust mutation rate every 20% of the budget\n                improvement_rate = (gbest_fitness - np.min(fitness)) / gbest_fitness\n                self.mutation_rate = self.base_mutation_rate + 0.5 * improvement_rate\n\n            mutation_indices = np.random.choice(self.dim, int(self.dim * self.mutation_rate), replace=False)\n            swarm[mutation_indices] = np.random.uniform(-5.0, 5.0, (len(mutation_indices), self.dim))\n\n            if np.min(fitness) < gbest_fitness:\n                gbest = swarm[np.argmin(fitness)]\n                gbest_fitness = np.min(fitness)\n\n            w = self.w_min + (t / self.budget) * (self.w_max - self.w_min)\n\n        return gbest_fitness", "name": "EnhancedOppositionBasedDynamicInertiaWeightPSO", "description": "Introducing a dynamic mutation strategy that adapts the mutation rate based on the fitness progress to accelerate convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a579b7e-c978-4b2e-954b-410691549227", "metadata": {"aucs": [0.9204097048098856, 0.9217805824593936, 0.9530355783752092, 0.8940988524439056, 0.9155514805081466, 0.9214791736458102, 0.8984060427734014, 0.9136567247128412, 0.9501540002842822, 0.8447640203499702, 0.849046007321809, 0.852460489472398, 0.8753431257614549, 0.8508829543125166, 0.8463616230238639, 0.8453791588951289, 0.8702001634761891, 0.8600025840805581, 0.1632653890039164, 0.14559762656055886, 0.10243597635928514, 0.09071592059042666, 0.1268021755865455, 0.14581092540520058, 0.16098745067379805, 0.10913348364134967, 0.18965453553314993, 0.1174958919929584, 0.13454419834211973, 0.11723072740193274, 0.13511422688111652, 0.15321988117284913, 0.16166632174586737, 0.08583591123351675, 0.11070862561004613, 0.12562886826356223, 0.9938763413324468, 0.9953457302403791, 0.992118589521497, 0.9967898967805229, 0.9926995263425059, 0.9870848073696249, 0.9953377814218872, 0.9973480504084786, 0.9884368187429119, 0.8334920138962427, 0.7241774136874538, 0.7587449958991704, 0.7503539373806051, 0.7541259669874283, 0.7653112640792803, 0.7686177315675496, 0.6665153581152858, 0.6738044050140701, 0.2079446132468753, 0.21465361693731333, 0.2206073808316692, 0.21372727316654716, 0.27414628923104434, 0.19742206431605758, 0.23102688079508304, 0.21802574094940397, 0.14706001806067304, 0.25193001658003045, 0.21031038283377235, 0.31496681438496876, 0.2125885180245478, 0.18446248615338212, 0.2770511448107502, 0.461613755405365, 0.08467660775681163, 0.22016748046735524, 0.23779716449845456, 0.2180613069457661, 0.215962745841893, 0.2642910867805657, 0.15127305113275724, 0.17358972337236667, 0.2491083678361793, 0.1285439807003067, 0.13386785663065637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010331395133678756, 9.999999999998899e-05, 9.999999999998899e-05, 0.017732488252544365, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005550848236771655, 0.07062579601928176, 0.01884954384953541, 0.09701579560225926, 9.999999999998899e-05, 0.020610640789697432, 0.11195799359434444, 0.04173454398575904, 0.05988347201172839, 0.23090244079225264, 0.02128292531144549, 0.04667427752586151, 0.014634414072980273, 0.030747877777711263, 0.20475656303454526, 0.07071156967055525, 0.029633728970038797, 0.03997367939972485, 0.024517506420568713, 0.23817001153872097, 0.034982869949127915, 0.27580743415498277, 0.11117707546434208, 0.23354384478754486, 0.22702419985130862, 0.15337460764864552, 0.13176826968244681, 0.557715369175644, 0.5329128342019516, 0.5292234807740457, 0.542214733749587, 0.579396376940314, 0.5461725866480742, 0.545282206389004, 0.5406819581816309, 0.6054234026566263, 0.1089120936577308, 0.12502833740241326, 0.04359563301835423, 0.0846085003805449, 0.07002051588282387, 0.06089714349386666, 0.08154039519696876, 0.14255644936343814, 0.09029841347492384, 0.2627692239370083, 0.1826406013186006, 0.2769983645734382, 0.19941658095204162, 0.14313469597701878, 0.16043122665575882, 0.4037187143297115, 0.20019213936622504, 0.23023175166285015, 0.31828354136114223, 0.31602374202993955, 0.23147001714835802, 0.2243619859559003, 0.20994121837023672, 0.1920319372778999, 0.16638991723632368, 0.19849432469134298, 0.2291621192151514, 0.2603129612530002, 0.17064985395383303, 0.214648399518383, 0.1830908372187835, 0.13427713209637981, 0.23156899139374687, 0.1990539005354378, 0.19318415244566223, 0.1671568464513573, 0.19362026896431317, 0.2488242851364022, 0.22610913881163153, 0.1794250772606183, 0.12671413621314764, 0.18957769169193184, 0.24946939711250893, 0.17895228253979656, 0.18559767402682337, 0.20989307013874337, 0.1713585106448079, 0.1943895928798166, 0.19203516724495662, 0.19824072751077804, 0.22890078601798036, 0.20526550068811344, 0.1924186868945158, 0.19523602960705033, 0.1594559542275692, 0.8963532425851095, 0.17136430953374493, 0.9364666916574705, 0.2005516487755019, 0.9131078725466799, 0.14516990937976626, 0.11514047107244185, 0.15412393802915214, 0.15691269186018175, 0.11257447104407636, 0.497811078255608, 0.5941899469404023, 0.08296246196888846, 0.21365628623353128, 0.11187695327698965, 0.7859074375230317, 0.16388847783199456, 0.17067135311674753, 0.18383705927936755, 0.179227988891144, 0.2031477016033908, 0.21808198089724096, 0.20662696212301757, 0.1892056027380702, 0.24869748482818155, 0.2763065869057446, 0.06375551422494796, 0.08438945456486713, 0.07588318042543629, 0.09287183592524939, 0.12736657340453383, 0.08895785991654992, 0.1429330005000956, 0.09162082871559563, 0.05993536549150613]}, "mutation_prompt": null}
